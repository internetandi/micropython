
uPY_TM4C123.axf:     file format elf32-littlearm


Disassembly of section .text:

000003c0 <gc_helper_get_regs_and_sp>:
     3c0:	f840 4b04 	str.w	r4, [r0], #4
     3c4:	f840 5b04 	str.w	r5, [r0], #4
     3c8:	f840 6b04 	str.w	r6, [r0], #4
     3cc:	f840 7b04 	str.w	r7, [r0], #4
     3d0:	f840 8b04 	str.w	r8, [r0], #4
     3d4:	f840 9b04 	str.w	r9, [r0], #4
     3d8:	f840 ab04 	str.w	sl, [r0], #4
     3dc:	f840 bb04 	str.w	fp, [r0], #4
     3e0:	f840 cb04 	str.w	ip, [r0], #4
     3e4:	f840 db04 	str.w	sp, [r0], #4
     3e8:	4668      	mov	r0, sp
     3ea:	4770      	bx	lr

000003ec <gc_helper_get_regs_and_clean_stack>:
     3ec:	f840 4b04 	str.w	r4, [r0], #4
     3f0:	f840 5b04 	str.w	r5, [r0], #4
     3f4:	f840 6b04 	str.w	r6, [r0], #4
     3f8:	f840 7b04 	str.w	r7, [r0], #4
     3fc:	f840 8b04 	str.w	r8, [r0], #4
     400:	f840 9b04 	str.w	r9, [r0], #4
     404:	f840 ab04 	str.w	sl, [r0], #4
     408:	f840 bb04 	str.w	fp, [r0], #4
     40c:	f840 cb04 	str.w	ip, [r0], #4
     410:	f840 db04 	str.w	sp, [r0], #4
     414:	2000      	movs	r0, #0
     416:	466a      	mov	r2, sp
     418:	e001      	b.n	41e <.entry>

0000041a <.loop>:
     41a:	f841 0b04 	str.w	r0, [r1], #4

0000041e <.entry>:
     41e:	4291      	cmp	r1, r2
     420:	d3fb      	bcc.n	41a <.loop>
     422:	4770      	bx	lr

00000424 <__aeabi_drsub>:
     424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     428:	e002      	b.n	430 <__adddf3>
     42a:	bf00      	nop

0000042c <__aeabi_dsub>:
     42c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000430 <__adddf3>:
     430:	b530      	push	{r4, r5, lr}
     432:	ea4f 0441 	mov.w	r4, r1, lsl #1
     436:	ea4f 0543 	mov.w	r5, r3, lsl #1
     43a:	ea94 0f05 	teq	r4, r5
     43e:	bf08      	it	eq
     440:	ea90 0f02 	teqeq	r0, r2
     444:	bf1f      	itttt	ne
     446:	ea54 0c00 	orrsne.w	ip, r4, r0
     44a:	ea55 0c02 	orrsne.w	ip, r5, r2
     44e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     456:	f000 80e2 	beq.w	61e <__adddf3+0x1ee>
     45a:	ea4f 5454 	mov.w	r4, r4, lsr #21
     45e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     462:	bfb8      	it	lt
     464:	426d      	neglt	r5, r5
     466:	dd0c      	ble.n	482 <__adddf3+0x52>
     468:	442c      	add	r4, r5
     46a:	ea80 0202 	eor.w	r2, r0, r2
     46e:	ea81 0303 	eor.w	r3, r1, r3
     472:	ea82 0000 	eor.w	r0, r2, r0
     476:	ea83 0101 	eor.w	r1, r3, r1
     47a:	ea80 0202 	eor.w	r2, r0, r2
     47e:	ea81 0303 	eor.w	r3, r1, r3
     482:	2d36      	cmp	r5, #54	; 0x36
     484:	bf88      	it	hi
     486:	bd30      	pophi	{r4, r5, pc}
     488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     48c:	ea4f 3101 	mov.w	r1, r1, lsl #12
     490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     498:	d002      	beq.n	4a0 <__adddf3+0x70>
     49a:	4240      	negs	r0, r0
     49c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     4a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     4a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     4ac:	d002      	beq.n	4b4 <__adddf3+0x84>
     4ae:	4252      	negs	r2, r2
     4b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     4b4:	ea94 0f05 	teq	r4, r5
     4b8:	f000 80a7 	beq.w	60a <__adddf3+0x1da>
     4bc:	f1a4 0401 	sub.w	r4, r4, #1
     4c0:	f1d5 0e20 	rsbs	lr, r5, #32
     4c4:	db0d      	blt.n	4e2 <__adddf3+0xb2>
     4c6:	fa02 fc0e 	lsl.w	ip, r2, lr
     4ca:	fa22 f205 	lsr.w	r2, r2, r5
     4ce:	1880      	adds	r0, r0, r2
     4d0:	f141 0100 	adc.w	r1, r1, #0
     4d4:	fa03 f20e 	lsl.w	r2, r3, lr
     4d8:	1880      	adds	r0, r0, r2
     4da:	fa43 f305 	asr.w	r3, r3, r5
     4de:	4159      	adcs	r1, r3
     4e0:	e00e      	b.n	500 <__adddf3+0xd0>
     4e2:	f1a5 0520 	sub.w	r5, r5, #32
     4e6:	f10e 0e20 	add.w	lr, lr, #32
     4ea:	2a01      	cmp	r2, #1
     4ec:	fa03 fc0e 	lsl.w	ip, r3, lr
     4f0:	bf28      	it	cs
     4f2:	f04c 0c02 	orrcs.w	ip, ip, #2
     4f6:	fa43 f305 	asr.w	r3, r3, r5
     4fa:	18c0      	adds	r0, r0, r3
     4fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     504:	d507      	bpl.n	516 <__adddf3+0xe6>
     506:	f04f 0e00 	mov.w	lr, #0
     50a:	f1dc 0c00 	rsbs	ip, ip, #0
     50e:	eb7e 0000 	sbcs.w	r0, lr, r0
     512:	eb6e 0101 	sbc.w	r1, lr, r1
     516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     51a:	d31b      	bcc.n	554 <__adddf3+0x124>
     51c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     520:	d30c      	bcc.n	53c <__adddf3+0x10c>
     522:	0849      	lsrs	r1, r1, #1
     524:	ea5f 0030 	movs.w	r0, r0, rrx
     528:	ea4f 0c3c 	mov.w	ip, ip, rrx
     52c:	f104 0401 	add.w	r4, r4, #1
     530:	ea4f 5244 	mov.w	r2, r4, lsl #21
     534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     538:	f080 809a 	bcs.w	670 <__adddf3+0x240>
     53c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     540:	bf08      	it	eq
     542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     546:	f150 0000 	adcs.w	r0, r0, #0
     54a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     54e:	ea41 0105 	orr.w	r1, r1, r5
     552:	bd30      	pop	{r4, r5, pc}
     554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     558:	4140      	adcs	r0, r0
     55a:	eb41 0101 	adc.w	r1, r1, r1
     55e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     562:	f1a4 0401 	sub.w	r4, r4, #1
     566:	d1e9      	bne.n	53c <__adddf3+0x10c>
     568:	f091 0f00 	teq	r1, #0
     56c:	bf04      	itt	eq
     56e:	4601      	moveq	r1, r0
     570:	2000      	moveq	r0, #0
     572:	fab1 f381 	clz	r3, r1
     576:	bf08      	it	eq
     578:	3320      	addeq	r3, #32
     57a:	f1a3 030b 	sub.w	r3, r3, #11
     57e:	f1b3 0220 	subs.w	r2, r3, #32
     582:	da0c      	bge.n	59e <__adddf3+0x16e>
     584:	320c      	adds	r2, #12
     586:	dd08      	ble.n	59a <__adddf3+0x16a>
     588:	f102 0c14 	add.w	ip, r2, #20
     58c:	f1c2 020c 	rsb	r2, r2, #12
     590:	fa01 f00c 	lsl.w	r0, r1, ip
     594:	fa21 f102 	lsr.w	r1, r1, r2
     598:	e00c      	b.n	5b4 <__adddf3+0x184>
     59a:	f102 0214 	add.w	r2, r2, #20
     59e:	bfd8      	it	le
     5a0:	f1c2 0c20 	rsble	ip, r2, #32
     5a4:	fa01 f102 	lsl.w	r1, r1, r2
     5a8:	fa20 fc0c 	lsr.w	ip, r0, ip
     5ac:	bfdc      	itt	le
     5ae:	ea41 010c 	orrle.w	r1, r1, ip
     5b2:	4090      	lslle	r0, r2
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	bfa2      	ittt	ge
     5b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     5bc:	4329      	orrge	r1, r5
     5be:	bd30      	popge	{r4, r5, pc}
     5c0:	ea6f 0404 	mvn.w	r4, r4
     5c4:	3c1f      	subs	r4, #31
     5c6:	da1c      	bge.n	602 <__adddf3+0x1d2>
     5c8:	340c      	adds	r4, #12
     5ca:	dc0e      	bgt.n	5ea <__adddf3+0x1ba>
     5cc:	f104 0414 	add.w	r4, r4, #20
     5d0:	f1c4 0220 	rsb	r2, r4, #32
     5d4:	fa20 f004 	lsr.w	r0, r0, r4
     5d8:	fa01 f302 	lsl.w	r3, r1, r2
     5dc:	ea40 0003 	orr.w	r0, r0, r3
     5e0:	fa21 f304 	lsr.w	r3, r1, r4
     5e4:	ea45 0103 	orr.w	r1, r5, r3
     5e8:	bd30      	pop	{r4, r5, pc}
     5ea:	f1c4 040c 	rsb	r4, r4, #12
     5ee:	f1c4 0220 	rsb	r2, r4, #32
     5f2:	fa20 f002 	lsr.w	r0, r0, r2
     5f6:	fa01 f304 	lsl.w	r3, r1, r4
     5fa:	ea40 0003 	orr.w	r0, r0, r3
     5fe:	4629      	mov	r1, r5
     600:	bd30      	pop	{r4, r5, pc}
     602:	fa21 f004 	lsr.w	r0, r1, r4
     606:	4629      	mov	r1, r5
     608:	bd30      	pop	{r4, r5, pc}
     60a:	f094 0f00 	teq	r4, #0
     60e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     612:	bf06      	itte	eq
     614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     618:	3401      	addeq	r4, #1
     61a:	3d01      	subne	r5, #1
     61c:	e74e      	b.n	4bc <__adddf3+0x8c>
     61e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     622:	bf18      	it	ne
     624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     628:	d029      	beq.n	67e <__adddf3+0x24e>
     62a:	ea94 0f05 	teq	r4, r5
     62e:	bf08      	it	eq
     630:	ea90 0f02 	teqeq	r0, r2
     634:	d005      	beq.n	642 <__adddf3+0x212>
     636:	ea54 0c00 	orrs.w	ip, r4, r0
     63a:	bf04      	itt	eq
     63c:	4619      	moveq	r1, r3
     63e:	4610      	moveq	r0, r2
     640:	bd30      	pop	{r4, r5, pc}
     642:	ea91 0f03 	teq	r1, r3
     646:	bf1e      	ittt	ne
     648:	2100      	movne	r1, #0
     64a:	2000      	movne	r0, #0
     64c:	bd30      	popne	{r4, r5, pc}
     64e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     652:	d105      	bne.n	660 <__adddf3+0x230>
     654:	0040      	lsls	r0, r0, #1
     656:	4149      	adcs	r1, r1
     658:	bf28      	it	cs
     65a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     65e:	bd30      	pop	{r4, r5, pc}
     660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     664:	bf3c      	itt	cc
     666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     66a:	bd30      	popcc	{r4, r5, pc}
     66c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd30      	pop	{r4, r5, pc}
     67e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     682:	bf1a      	itte	ne
     684:	4619      	movne	r1, r3
     686:	4610      	movne	r0, r2
     688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     68c:	bf1c      	itt	ne
     68e:	460b      	movne	r3, r1
     690:	4602      	movne	r2, r0
     692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     696:	bf06      	itte	eq
     698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     69c:	ea91 0f03 	teqeq	r1, r3
     6a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     6a4:	bd30      	pop	{r4, r5, pc}
     6a6:	bf00      	nop

000006a8 <__aeabi_ui2d>:
     6a8:	f090 0f00 	teq	r0, #0
     6ac:	bf04      	itt	eq
     6ae:	2100      	moveq	r1, #0
     6b0:	4770      	bxeq	lr
     6b2:	b530      	push	{r4, r5, lr}
     6b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
     6b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
     6bc:	f04f 0500 	mov.w	r5, #0
     6c0:	f04f 0100 	mov.w	r1, #0
     6c4:	e750      	b.n	568 <__adddf3+0x138>
     6c6:	bf00      	nop

000006c8 <__aeabi_i2d>:
     6c8:	f090 0f00 	teq	r0, #0
     6cc:	bf04      	itt	eq
     6ce:	2100      	moveq	r1, #0
     6d0:	4770      	bxeq	lr
     6d2:	b530      	push	{r4, r5, lr}
     6d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
     6d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
     6dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     6e0:	bf48      	it	mi
     6e2:	4240      	negmi	r0, r0
     6e4:	f04f 0100 	mov.w	r1, #0
     6e8:	e73e      	b.n	568 <__adddf3+0x138>
     6ea:	bf00      	nop

000006ec <__aeabi_f2d>:
     6ec:	0042      	lsls	r2, r0, #1
     6ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
     6f2:	ea4f 0131 	mov.w	r1, r1, rrx
     6f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
     6fa:	bf1f      	itttt	ne
     6fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     708:	4770      	bxne	lr
     70a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     70e:	bf08      	it	eq
     710:	4770      	bxeq	lr
     712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     716:	bf04      	itt	eq
     718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     71c:	4770      	bxeq	lr
     71e:	b530      	push	{r4, r5, lr}
     720:	f44f 7460 	mov.w	r4, #896	; 0x380
     724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     72c:	e71c      	b.n	568 <__adddf3+0x138>
     72e:	bf00      	nop

00000730 <__aeabi_ul2d>:
     730:	ea50 0201 	orrs.w	r2, r0, r1
     734:	bf08      	it	eq
     736:	4770      	bxeq	lr
     738:	b530      	push	{r4, r5, lr}
     73a:	f04f 0500 	mov.w	r5, #0
     73e:	e00a      	b.n	756 <__aeabi_l2d+0x16>

00000740 <__aeabi_l2d>:
     740:	ea50 0201 	orrs.w	r2, r0, r1
     744:	bf08      	it	eq
     746:	4770      	bxeq	lr
     748:	b530      	push	{r4, r5, lr}
     74a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     74e:	d502      	bpl.n	756 <__aeabi_l2d+0x16>
     750:	4240      	negs	r0, r0
     752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     756:	f44f 6480 	mov.w	r4, #1024	; 0x400
     75a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     75e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     762:	f43f aed8 	beq.w	516 <__adddf3+0xe6>
     766:	f04f 0203 	mov.w	r2, #3
     76a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     76e:	bf18      	it	ne
     770:	3203      	addne	r2, #3
     772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     776:	bf18      	it	ne
     778:	3203      	addne	r2, #3
     77a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     77e:	f1c2 0320 	rsb	r3, r2, #32
     782:	fa00 fc03 	lsl.w	ip, r0, r3
     786:	fa20 f002 	lsr.w	r0, r0, r2
     78a:	fa01 fe03 	lsl.w	lr, r1, r3
     78e:	ea40 000e 	orr.w	r0, r0, lr
     792:	fa21 f102 	lsr.w	r1, r1, r2
     796:	4414      	add	r4, r2
     798:	e6bd      	b.n	516 <__adddf3+0xe6>
     79a:	bf00      	nop

0000079c <__aeabi_d2f>:
     79c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     7a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     7a4:	bf24      	itt	cs
     7a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     7aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     7ae:	d90d      	bls.n	7cc <__aeabi_d2f+0x30>
     7b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     7b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     7b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     7bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     7c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     7c4:	bf08      	it	eq
     7c6:	f020 0001 	biceq.w	r0, r0, #1
     7ca:	4770      	bx	lr
     7cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     7d0:	d121      	bne.n	816 <_Min_Stack_Size+0x16>
     7d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     7d6:	bfbc      	itt	lt
     7d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     7dc:	4770      	bxlt	lr
     7de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     7e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     7e6:	f1c2 0218 	rsb	r2, r2, #24
     7ea:	f1c2 0c20 	rsb	ip, r2, #32
     7ee:	fa10 f30c 	lsls.w	r3, r0, ip
     7f2:	fa20 f002 	lsr.w	r0, r0, r2
     7f6:	bf18      	it	ne
     7f8:	f040 0001 	orrne.w	r0, r0, #1
     7fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     804:	fa03 fc0c 	lsl.w	ip, r3, ip
     808:	ea40 000c 	orr.w	r0, r0, ip
     80c:	fa23 f302 	lsr.w	r3, r3, r2
     810:	ea4f 0343 	mov.w	r3, r3, lsl #1
     814:	e7cc      	b.n	7b0 <__aeabi_d2f+0x14>
     816:	ea7f 5362 	mvns.w	r3, r2, asr #21
     81a:	d107      	bne.n	82c <_Min_Stack_Size+0x2c>
     81c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     820:	bf1e      	ittt	ne
     822:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     826:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     82a:	4770      	bxne	lr
     82c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     838:	4770      	bx	lr
     83a:	bf00      	nop

0000083c <nlr_push_tail>:
#endif
#endif

unsigned int nlr_push_tail(nlr_buf_t *nlr) {
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
    nlr->prev = *top;
     83c:	4b02      	ldr	r3, [pc, #8]	; (848 <nlr_push_tail+0xc>)
     83e:	689a      	ldr	r2, [r3, #8]
     840:	6002      	str	r2, [r0, #0]
    MP_NLR_SAVE_PYSTACK(nlr);
    *top = nlr;
     842:	6098      	str	r0, [r3, #8]
    return 0; // normal return
}
     844:	2000      	movs	r0, #0
     846:	4770      	bx	lr
     848:	200008a0 	.word	0x200008a0

0000084c <nlr_pop>:

void nlr_pop(void) {
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
    *top = (*top)->prev;
     84c:	4b02      	ldr	r3, [pc, #8]	; (858 <nlr_pop+0xc>)
     84e:	689a      	ldr	r2, [r3, #8]
     850:	6812      	ldr	r2, [r2, #0]
     852:	609a      	str	r2, [r3, #8]
}
     854:	4770      	bx	lr
     856:	bf00      	nop
     858:	200008a0 	.word	0x200008a0

0000085c <nlr_push>:
// For reference, arm/thumb callee save regs are:
//      r4-r11, r13=sp

__attribute__((naked)) unsigned int nlr_push(nlr_buf_t *nlr) {

    __asm volatile (
     85c:	60c4      	str	r4, [r0, #12]
     85e:	6105      	str	r5, [r0, #16]
     860:	6146      	str	r6, [r0, #20]
     862:	6187      	str	r7, [r0, #24]
     864:	f8c0 801c 	str.w	r8, [r0, #28]
     868:	f8c0 9020 	str.w	r9, [r0, #32]
     86c:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
     870:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
     874:	f8c0 d02c 	str.w	sp, [r0, #44]	; 0x2c
     878:	f8c0 e008 	str.w	lr, [r0, #8]
     87c:	f7ff bfde 	b.w	83c <nlr_push_tail>

00000880 <nlr_jump>:
    return 0;
    #endif
}

NORETURN void nlr_jump(void *val) {
    MP_NLR_JUMP_HEAD(val, top)
     880:	4a0d      	ldr	r2, [pc, #52]	; (8b8 <nlr_jump+0x38>)
NORETURN void nlr_jump(void *val) {
     882:	b508      	push	{r3, lr}
    MP_NLR_JUMP_HEAD(val, top)
     884:	6893      	ldr	r3, [r2, #8]
     886:	b90b      	cbnz	r3, 88c <nlr_jump+0xc>
     888:	f017 fe54 	bl	18534 <nlr_jump_fail>
     88c:	6819      	ldr	r1, [r3, #0]
     88e:	6058      	str	r0, [r3, #4]
     890:	6091      	str	r1, [r2, #8]

    __asm volatile (
     892:	4618      	mov	r0, r3
     894:	68c4      	ldr	r4, [r0, #12]
     896:	6905      	ldr	r5, [r0, #16]
     898:	6946      	ldr	r6, [r0, #20]
     89a:	6987      	ldr	r7, [r0, #24]
     89c:	f8d0 801c 	ldr.w	r8, [r0, #28]
     8a0:	f8d0 9020 	ldr.w	r9, [r0, #32]
     8a4:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
     8a8:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
     8ac:	f8d0 d02c 	ldr.w	sp, [r0, #44]	; 0x2c
     8b0:	f8d0 e008 	ldr.w	lr, [r0, #8]
     8b4:	2001      	movs	r0, #1
     8b6:	4770      	bx	lr
     8b8:	200008a0 	.word	0x200008a0

000008bc <m_malloc>:
        return NULL;
    }
}
#endif // MICROPY_ENABLE_GC

void *m_malloc(size_t num_bytes) {
     8bc:	b510      	push	{r4, lr}
     8be:	4604      	mov	r4, r0
    void *ptr = malloc(num_bytes);
     8c0:	2100      	movs	r1, #0
     8c2:	f000 fa77 	bl	db4 <gc_alloc>
    if (ptr == NULL && num_bytes != 0) {
     8c6:	4603      	mov	r3, r0
     8c8:	b108      	cbz	r0, 8ce <m_malloc+0x12>
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
}
     8ca:	4618      	mov	r0, r3
     8cc:	bd10      	pop	{r4, pc}
    if (ptr == NULL && num_bytes != 0) {
     8ce:	2c00      	cmp	r4, #0
     8d0:	d0fb      	beq.n	8ca <m_malloc+0xe>
        m_malloc_fail(num_bytes);
     8d2:	4620      	mov	r0, r4
     8d4:	f009 fcd2 	bl	a27c <m_malloc_fail>

000008d8 <m_malloc_maybe>:

void *m_malloc_maybe(size_t num_bytes) {
     8d8:	b508      	push	{r3, lr}
    void *ptr = malloc(num_bytes);
     8da:	2100      	movs	r1, #0
     8dc:	f000 fa6a 	bl	db4 <gc_alloc>
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
}
     8e0:	bd08      	pop	{r3, pc}

000008e2 <m_malloc0>:
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
}
#endif

void *m_malloc0(size_t num_bytes) {
     8e2:	b508      	push	{r3, lr}
    void *ptr = m_malloc(num_bytes);
     8e4:	f7ff ffea 	bl	8bc <m_malloc>
    // If this config is set then the GC clears all memory, so we don't need to.
    #if !MICROPY_GC_CONSERVATIVE_CLEAR
    memset(ptr, 0, num_bytes);
    #endif
    return ptr;
}
     8e8:	bd08      	pop	{r3, pc}

000008ea <m_realloc>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc(void *ptr, size_t old_num_bytes, size_t new_num_bytes) {
#else
void *m_realloc(void *ptr, size_t new_num_bytes) {
     8ea:	b510      	push	{r4, lr}
     8ec:	460c      	mov	r4, r1
#endif
    void *new_ptr = realloc(ptr, new_num_bytes);
     8ee:	2201      	movs	r2, #1
     8f0:	f000 fb5c 	bl	fac <gc_realloc>
    if (new_ptr == NULL && new_num_bytes != 0) {
     8f4:	4603      	mov	r3, r0
     8f6:	b108      	cbz	r0, 8fc <m_realloc+0x12>
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
}
     8f8:	4618      	mov	r0, r3
     8fa:	bd10      	pop	{r4, pc}
    if (new_ptr == NULL && new_num_bytes != 0) {
     8fc:	2c00      	cmp	r4, #0
     8fe:	d0fb      	beq.n	8f8 <m_realloc+0xe>
        m_malloc_fail(new_num_bytes);
     900:	4620      	mov	r0, r4
     902:	f009 fcbb 	bl	a27c <m_malloc_fail>

00000906 <m_realloc_maybe>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc_maybe(void *ptr, size_t old_num_bytes, size_t new_num_bytes, bool allow_move) {
#else
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, bool allow_move) {
     906:	b508      	push	{r3, lr}
#endif
    void *new_ptr = realloc_ext(ptr, new_num_bytes, allow_move);
     908:	f000 fb50 	bl	fac <gc_realloc>
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
}
     90c:	bd08      	pop	{r3, pc}

0000090e <m_free>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void m_free(void *ptr, size_t num_bytes) {
#else
void m_free(void *ptr) {
     90e:	b508      	push	{r3, lr}
#endif
    free(ptr);
     910:	f000 fb0c 	bl	f2c <gc_free>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("free %p, %d\n", ptr, num_bytes);
    #else
    DEBUG_printf("free %p\n", ptr);
    #endif
}
     914:	bd08      	pop	{r3, pc}
	...

00000918 <gc_mark_subtree>:

// Take the given block as the topmost block on the stack. Check all it's
// children: mark the unmarked child blocks and put those newly marked
// blocks on the stack. When all children have been checked, pop off the
// topmost block on the stack and repeat with that one.
STATIC void gc_mark_subtree(size_t block) {
     918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     91c:	4c2a      	ldr	r4, [pc, #168]	; (9c8 <gc_mark_subtree+0xb0>)
    // Start with the block passed in the argument.
    size_t sp = 0;
     91e:	2500      	movs	r5, #0
                // Mark and push this pointer
                size_t childblock = BLOCK_FROM_PTR(ptr);
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
                    // an unmarked head, mark it, and push it on gc stack
                    TRACE_MARK(childblock, ptr);
                    ATB_HEAD_TO_MARK(childblock);
     920:	f04f 0903 	mov.w	r9, #3
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     924:	f8d4 7240 	ldr.w	r7, [r4, #576]	; 0x240
        size_t n_blocks = 0;
     928:	2100      	movs	r1, #0
            n_blocks += 1;
     92a:	3101      	adds	r1, #1
     92c:	1843      	adds	r3, r0, r1
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     92e:	089a      	lsrs	r2, r3, #2
     930:	f003 0303 	and.w	r3, r3, #3
     934:	5cba      	ldrb	r2, [r7, r2]
     936:	005b      	lsls	r3, r3, #1
     938:	fa42 f303 	asr.w	r3, r2, r3
     93c:	f003 0303 	and.w	r3, r3, #3
     940:	2b02      	cmp	r3, #2
     942:	d0f2      	beq.n	92a <gc_mark_subtree+0x12>
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     944:	f8d4 3248 	ldr.w	r3, [r4, #584]	; 0x248
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     948:	0109      	lsls	r1, r1, #4
     94a:	088a      	lsrs	r2, r1, #2
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     94c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     950:	b381      	cbz	r1, 9b4 <gc_mark_subtree+0x9c>
     952:	eb00 0182 	add.w	r1, r0, r2, lsl #2
            void *ptr = *ptrs;
     956:	6803      	ldr	r3, [r0, #0]
            if (VERIFY_PTR(ptr)) {
     958:	071a      	lsls	r2, r3, #28
     95a:	d128      	bne.n	9ae <gc_mark_subtree+0x96>
     95c:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
     960:	429a      	cmp	r2, r3
     962:	d824      	bhi.n	9ae <gc_mark_subtree+0x96>
                size_t childblock = BLOCK_FROM_PTR(ptr);
     964:	1a9a      	subs	r2, r3, r2
            if (VERIFY_PTR(ptr)) {
     966:	f8d4 624c 	ldr.w	r6, [r4, #588]	; 0x24c
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     96a:	ea4f 1c92 	mov.w	ip, r2, lsr #6
                size_t childblock = BLOCK_FROM_PTR(ptr);
     96e:	0912      	lsrs	r2, r2, #4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     970:	f002 0703 	and.w	r7, r2, #3
            if (VERIFY_PTR(ptr)) {
     974:	429e      	cmp	r6, r3
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     976:	ea4f 0747 	mov.w	r7, r7, lsl #1
            if (VERIFY_PTR(ptr)) {
     97a:	d918      	bls.n	9ae <gc_mark_subtree+0x96>
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     97c:	f8d4 e240 	ldr.w	lr, [r4, #576]	; 0x240
     980:	f81e 800c 	ldrb.w	r8, [lr, ip]
     984:	fa48 f307 	asr.w	r3, r8, r7
     988:	f003 0303 	and.w	r3, r3, #3
     98c:	2b01      	cmp	r3, #1
     98e:	d10e      	bne.n	9ae <gc_mark_subtree+0x96>
                    ATB_HEAD_TO_MARK(childblock);
     990:	fa09 f707 	lsl.w	r7, r9, r7
     994:	ea47 0708 	orr.w	r7, r7, r8
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     998:	eb04 0885 	add.w	r8, r4, r5, lsl #2
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
     99c:	2d3f      	cmp	r5, #63	; 0x3f
                    ATB_HEAD_TO_MARK(childblock);
     99e:	f80e 700c 	strb.w	r7, [lr, ip]
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     9a2:	bf9a      	itte	ls
     9a4:	3501      	addls	r5, #1
     9a6:	f8c8 2254 	strls.w	r2, [r8, #596]	; 0x254
                    } else {
                        MP_STATE_MEM(gc_stack_overflow) = 1;
     9aa:	f8c4 3250 	strhi.w	r3, [r4, #592]	; 0x250
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     9ae:	3004      	adds	r0, #4
     9b0:	4288      	cmp	r0, r1
     9b2:	d1d0      	bne.n	956 <gc_mark_subtree+0x3e>
                }
            }
        }

        // Are there any blocks on the stack?
        if (sp == 0) {
     9b4:	b12d      	cbz	r5, 9c2 <gc_mark_subtree+0xaa>
            break; // No, stack is empty, we're done.
        }

        // pop the next block off the stack
        block = MP_STATE_MEM(gc_stack)[--sp];
     9b6:	3d01      	subs	r5, #1
     9b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
     9bc:	f8d3 0254 	ldr.w	r0, [r3, #596]	; 0x254
    for (;;) {
     9c0:	e7b0      	b.n	924 <gc_mark_subtree+0xc>
    }
}
     9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     9c6:	bf00      	nop
     9c8:	200008a0 	.word	0x200008a0

000009cc <gc_free.part.0>:
}
*/

// force the freeing of a piece of memory
// TODO: freeing here does not call finaliser
void gc_free(void *ptr) {
     9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (ptr == NULL) {
        GC_EXIT();
    } else {
        // get the GC block number corresponding to this pointer
        assert(VERIFY_PTR(ptr));
     9ce:	0703      	lsls	r3, r0, #28
     9d0:	d134      	bne.n	a3c <gc_free.part.0+0x70>
     9d2:	4e21      	ldr	r6, [pc, #132]	; (a58 <gc_free.part.0+0x8c>)
     9d4:	f8d6 3248 	ldr.w	r3, [r6, #584]	; 0x248
     9d8:	4298      	cmp	r0, r3
     9da:	d32f      	bcc.n	a3c <gc_free.part.0+0x70>
     9dc:	f8d6 224c 	ldr.w	r2, [r6, #588]	; 0x24c
     9e0:	4290      	cmp	r0, r2
     9e2:	d22b      	bcs.n	a3c <gc_free.part.0+0x70>
        size_t block = BLOCK_FROM_PTR(ptr);
     9e4:	1ac0      	subs	r0, r0, r3
        assert(ATB_GET_KIND(block) == AT_HEAD);
     9e6:	0981      	lsrs	r1, r0, #6
     9e8:	f8d6 5240 	ldr.w	r5, [r6, #576]	; 0x240
        size_t block = BLOCK_FROM_PTR(ptr);
     9ec:	0900      	lsrs	r0, r0, #4
        assert(ATB_GET_KIND(block) == AT_HEAD);
     9ee:	f000 0303 	and.w	r3, r0, #3
     9f2:	5c6a      	ldrb	r2, [r5, r1]
     9f4:	005c      	lsls	r4, r3, #1
     9f6:	4122      	asrs	r2, r4
     9f8:	f002 0203 	and.w	r2, r2, #3
     9fc:	2a01      	cmp	r2, #1
     9fe:	d124      	bne.n	a4a <gc_free.part.0+0x7e>
        #if MICROPY_ENABLE_FINALISER
        FTB_CLEAR(block);
        #endif

        // set the last_free pointer to this block if it's earlier in the heap
        if (block / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     a00:	f8d6 2360 	ldr.w	r2, [r6, #864]	; 0x360
     a04:	4291      	cmp	r1, r2
            MP_STATE_MEM(gc_last_free_atb_index) = block / BLOCKS_PER_ATB;
     a06:	bf38      	it	cc
     a08:	f8c6 1360 	strcc.w	r1, [r6, #864]	; 0x360
     a0c:	5c69      	ldrb	r1, [r5, r1]
     a0e:	0884      	lsrs	r4, r0, #2
        }

        // free head and all of its tail blocks
        do {
            ATB_ANY_TO_FREE(block);
     a10:	2703      	movs	r7, #3
     a12:	005b      	lsls	r3, r3, #1
     a14:	fa07 f303 	lsl.w	r3, r7, r3
     a18:	ea21 0103 	bic.w	r1, r1, r3
     a1c:	5529      	strb	r1, [r5, r4]
            block += 1;
     a1e:	3001      	adds	r0, #1
        } while (ATB_GET_KIND(block) == AT_TAIL);
     a20:	f8d6 5240 	ldr.w	r5, [r6, #576]	; 0x240
     a24:	0884      	lsrs	r4, r0, #2
     a26:	f000 0303 	and.w	r3, r0, #3
     a2a:	5d29      	ldrb	r1, [r5, r4]
     a2c:	005a      	lsls	r2, r3, #1
     a2e:	fa41 f202 	asr.w	r2, r1, r2
     a32:	f002 0203 	and.w	r2, r2, #3
     a36:	2a02      	cmp	r2, #2
     a38:	d0eb      	beq.n	a12 <gc_free.part.0+0x46>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif
    }
}
     a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(VERIFY_PTR(ptr));
     a3c:	4b07      	ldr	r3, [pc, #28]	; (a5c <gc_free.part.0+0x90>)
     a3e:	4a08      	ldr	r2, [pc, #32]	; (a60 <gc_free.part.0+0x94>)
     a40:	4808      	ldr	r0, [pc, #32]	; (a64 <gc_free.part.0+0x98>)
     a42:	f240 213d 	movw	r1, #573	; 0x23d
     a46:	f017 fd89 	bl	1855c <__assert_func>
        assert(ATB_GET_KIND(block) == AT_HEAD);
     a4a:	4b07      	ldr	r3, [pc, #28]	; (a68 <gc_free.part.0+0x9c>)
     a4c:	4a04      	ldr	r2, [pc, #16]	; (a60 <gc_free.part.0+0x94>)
     a4e:	4805      	ldr	r0, [pc, #20]	; (a64 <gc_free.part.0+0x98>)
     a50:	f240 213f 	movw	r1, #575	; 0x23f
     a54:	f017 fd82 	bl	1855c <__assert_func>
     a58:	200008a0 	.word	0x200008a0
     a5c:	00020f58 	.word	0x00020f58
     a60:	00020e94 	.word	0x00020e94
     a64:	00020f68 	.word	0x00020f68
     a68:	00020f78 	.word	0x00020f78

00000a6c <gc_init>:
void gc_init(void *start, void *end) {
     a6c:	b570      	push	{r4, r5, r6, lr}
    end = (void*)((uintptr_t)end & (~(BYTES_PER_BLOCK - 1)));
     a6e:	f021 050f 	bic.w	r5, r1, #15
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     a72:	4911      	ldr	r1, [pc, #68]	; (ab8 <gc_init+0x4c>)
     a74:	4c11      	ldr	r4, [pc, #68]	; (abc <gc_init+0x50>)
    size_t total_byte_len = (byte*)end - (byte*)start;
     a76:	1a2b      	subs	r3, r5, r0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     a78:	fba1 1303 	umull	r1, r3, r1, r3
     a7c:	099b      	lsrs	r3, r3, #6
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     a7e:	eba5 1683 	sub.w	r6, r5, r3, lsl #6
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     a82:	461a      	mov	r2, r3
     a84:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     a86:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    MP_STATE_MEM(gc_alloc_table_start) = (byte*)start;
     a8a:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    MP_STATE_MEM(gc_pool_end) = end;
     a8e:	f8c4 524c 	str.w	r5, [r4, #588]	; 0x24c
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     a92:	f8c4 6248 	str.w	r6, [r4, #584]	; 0x248
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     a96:	f01a fef1 	bl	1b87c <memset>
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     a9a:	2300      	movs	r3, #0
    MP_STATE_MEM(gc_lock_depth) = 0;
     a9c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    MP_STATE_MEM(gc_lock_depth) = 0;
     aa4:	f8c4 1354 	str.w	r1, [r4, #852]	; 0x354
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     aa8:	f8c4 235c 	str.w	r2, [r4, #860]	; 0x35c
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     aac:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
    MP_STATE_MEM(gc_alloc_amount) = 0;
     ab0:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
}
     ab4:	bd70      	pop	{r4, r5, r6, pc}
     ab6:	bf00      	nop
     ab8:	fc0fc0fd 	.word	0xfc0fc0fd
     abc:	200008a0 	.word	0x200008a0

00000ac0 <gc_lock>:
    MP_STATE_MEM(gc_lock_depth)++;
     ac0:	4a03      	ldr	r2, [pc, #12]	; (ad0 <gc_lock+0x10>)
     ac2:	f8b2 3354 	ldrh.w	r3, [r2, #852]	; 0x354
     ac6:	3301      	adds	r3, #1
     ac8:	f8a2 3354 	strh.w	r3, [r2, #852]	; 0x354
}
     acc:	4770      	bx	lr
     ace:	bf00      	nop
     ad0:	200008a0 	.word	0x200008a0

00000ad4 <gc_unlock>:
    MP_STATE_MEM(gc_lock_depth)--;
     ad4:	4a03      	ldr	r2, [pc, #12]	; (ae4 <gc_unlock+0x10>)
     ad6:	f8b2 3354 	ldrh.w	r3, [r2, #852]	; 0x354
     ada:	3b01      	subs	r3, #1
     adc:	f8a2 3354 	strh.w	r3, [r2, #852]	; 0x354
}
     ae0:	4770      	bx	lr
     ae2:	bf00      	nop
     ae4:	200008a0 	.word	0x200008a0

00000ae8 <gc_is_locked>:
    return MP_STATE_MEM(gc_lock_depth) != 0;
     ae8:	4b03      	ldr	r3, [pc, #12]	; (af8 <gc_is_locked+0x10>)
     aea:	f8b3 0354 	ldrh.w	r0, [r3, #852]	; 0x354
}
     aee:	3000      	adds	r0, #0
     af0:	bf18      	it	ne
     af2:	2001      	movne	r0, #1
     af4:	4770      	bx	lr
     af6:	bf00      	nop
     af8:	200008a0 	.word	0x200008a0

00000afc <gc_collect_start>:
void gc_collect_start(void) {
     afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_lock_depth)++;
     afe:	4d1c      	ldr	r5, [pc, #112]	; (b70 <gc_collect_start+0x74>)
     b00:	f8b5 3354 	ldrh.w	r3, [r5, #852]	; 0x354
    MP_STATE_MEM(gc_alloc_amount) = 0;
     b04:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)++;
     b06:	3301      	adds	r3, #1
     b08:	f8a5 3354 	strh.w	r3, [r5, #852]	; 0x354
    MP_STATE_MEM(gc_alloc_amount) = 0;
     b0c:	f8c5 2358 	str.w	r2, [r5, #856]	; 0x358
    MP_STATE_MEM(gc_stack_overflow) = 0;
     b10:	f8c5 2250 	str.w	r2, [r5, #592]	; 0x250
     b14:	1f2c      	subs	r4, r5, #4
     b16:	f505 760b 	add.w	r6, r5, #556	; 0x22c
                ATB_HEAD_TO_MARK(block);
     b1a:	2703      	movs	r7, #3
        void *ptr = ptrs[i];
     b1c:	f854 3f04 	ldr.w	r3, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     b20:	071a      	lsls	r2, r3, #28
     b22:	d119      	bne.n	b58 <gc_collect_start+0x5c>
     b24:	f8d5 0248 	ldr.w	r0, [r5, #584]	; 0x248
     b28:	4283      	cmp	r3, r0
     b2a:	d315      	bcc.n	b58 <gc_collect_start+0x5c>
            size_t block = BLOCK_FROM_PTR(ptr);
     b2c:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     b2e:	f8d5 124c 	ldr.w	r1, [r5, #588]	; 0x24c
            if (ATB_GET_KIND(block) == AT_HEAD) {
     b32:	ea4f 1c90 	mov.w	ip, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     b36:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     b38:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     b3c:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     b3e:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     b42:	d209      	bcs.n	b58 <gc_collect_start+0x5c>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     b44:	f8d5 1240 	ldr.w	r1, [r5, #576]	; 0x240
     b48:	f811 e00c 	ldrb.w	lr, [r1, ip]
     b4c:	fa4e f302 	asr.w	r3, lr, r2
     b50:	f003 0303 	and.w	r3, r3, #3
     b54:	2b01      	cmp	r3, #1
     b56:	d002      	beq.n	b5e <gc_collect_start+0x62>
    for (size_t i = 0; i < len; i++) {
     b58:	42a6      	cmp	r6, r4
     b5a:	d1df      	bne.n	b1c <gc_collect_start+0x20>
}
     b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                ATB_HEAD_TO_MARK(block);
     b5e:	fa07 f202 	lsl.w	r2, r7, r2
     b62:	ea42 020e 	orr.w	r2, r2, lr
     b66:	f801 200c 	strb.w	r2, [r1, ip]
                gc_mark_subtree(block);
     b6a:	f7ff fed5 	bl	918 <gc_mark_subtree>
     b6e:	e7f3      	b.n	b58 <gc_collect_start+0x5c>
     b70:	200008a0 	.word	0x200008a0

00000b74 <gc_collect_root>:
    for (size_t i = 0; i < len; i++) {
     b74:	b331      	cbz	r1, bc4 <gc_collect_root+0x50>
void gc_collect_root(void **ptrs, size_t len) {
     b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b78:	1f04      	subs	r4, r0, #4
        if (VERIFY_PTR(ptr)) {
     b7a:	4e17      	ldr	r6, [pc, #92]	; (bd8 <gc_collect_root+0x64>)
     b7c:	eb04 0581 	add.w	r5, r4, r1, lsl #2
                ATB_HEAD_TO_MARK(block);
     b80:	2703      	movs	r7, #3
        void *ptr = ptrs[i];
     b82:	f854 3f04 	ldr.w	r3, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     b86:	071a      	lsls	r2, r3, #28
     b88:	d119      	bne.n	bbe <gc_collect_root+0x4a>
     b8a:	f8d6 0248 	ldr.w	r0, [r6, #584]	; 0x248
     b8e:	4298      	cmp	r0, r3
     b90:	d815      	bhi.n	bbe <gc_collect_root+0x4a>
            size_t block = BLOCK_FROM_PTR(ptr);
     b92:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     b94:	f8d6 124c 	ldr.w	r1, [r6, #588]	; 0x24c
            if (ATB_GET_KIND(block) == AT_HEAD) {
     b98:	ea4f 1c90 	mov.w	ip, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     b9c:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     b9e:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     ba2:	4299      	cmp	r1, r3
            if (ATB_GET_KIND(block) == AT_HEAD) {
     ba4:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     ba8:	d909      	bls.n	bbe <gc_collect_root+0x4a>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     baa:	f8d6 1240 	ldr.w	r1, [r6, #576]	; 0x240
     bae:	f811 e00c 	ldrb.w	lr, [r1, ip]
     bb2:	fa4e f302 	asr.w	r3, lr, r2
     bb6:	f003 0303 	and.w	r3, r3, #3
     bba:	2b01      	cmp	r3, #1
     bbc:	d003      	beq.n	bc6 <gc_collect_root+0x52>
    for (size_t i = 0; i < len; i++) {
     bbe:	42a5      	cmp	r5, r4
     bc0:	d1df      	bne.n	b82 <gc_collect_root+0xe>
}
     bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bc4:	4770      	bx	lr
                ATB_HEAD_TO_MARK(block);
     bc6:	fa07 f202 	lsl.w	r2, r7, r2
     bca:	ea42 020e 	orr.w	r2, r2, lr
     bce:	f801 200c 	strb.w	r2, [r1, ip]
                gc_mark_subtree(block);
     bd2:	f7ff fea1 	bl	918 <gc_mark_subtree>
     bd6:	e7f2      	b.n	bbe <gc_collect_root+0x4a>
     bd8:	200008a0 	.word	0x200008a0

00000bdc <gc_collect_end>:
void gc_collect_end(void) {
     bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     be0:	4e35      	ldr	r6, [pc, #212]	; (cb8 <gc_collect_end+0xdc>)
     be2:	f8d6 1244 	ldr.w	r1, [r6, #580]	; 0x244
     be6:	f8d6 3250 	ldr.w	r3, [r6, #592]	; 0x250
     bea:	0089      	lsls	r1, r1, #2
        MP_STATE_MEM(gc_stack_overflow) = 0;
     bec:	2500      	movs	r5, #0
    while (MP_STATE_MEM(gc_stack_overflow)) {
     bee:	b363      	cbz	r3, c4a <gc_collect_end+0x6e>
        MP_STATE_MEM(gc_stack_overflow) = 0;
     bf0:	f8c6 5250 	str.w	r5, [r6, #592]	; 0x250
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     bf4:	b1f9      	cbz	r1, c36 <gc_collect_end+0x5a>
     bf6:	2400      	movs	r4, #0
            if (ATB_GET_KIND(block) == AT_MARK) {
     bf8:	08a2      	lsrs	r2, r4, #2
     bfa:	f8d6 0240 	ldr.w	r0, [r6, #576]	; 0x240
     bfe:	f004 0303 	and.w	r3, r4, #3
     c02:	5c82      	ldrb	r2, [r0, r2]
     c04:	005b      	lsls	r3, r3, #1
     c06:	fa42 f303 	asr.w	r3, r2, r3
     c0a:	f003 0303 	and.w	r3, r3, #3
     c0e:	2b03      	cmp	r3, #3
     c10:	d005      	beq.n	c1e <gc_collect_end+0x42>
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     c12:	3401      	adds	r4, #1
     c14:	428c      	cmp	r4, r1
     c16:	d3ef      	bcc.n	bf8 <gc_collect_end+0x1c>
     c18:	f8d6 3250 	ldr.w	r3, [r6, #592]	; 0x250
     c1c:	e7e7      	b.n	bee <gc_collect_end+0x12>
                gc_mark_subtree(block);
     c1e:	4620      	mov	r0, r4
     c20:	f7ff fe7a 	bl	918 <gc_mark_subtree>
     c24:	f8d6 1244 	ldr.w	r1, [r6, #580]	; 0x244
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     c28:	3401      	adds	r4, #1
     c2a:	0089      	lsls	r1, r1, #2
     c2c:	42a1      	cmp	r1, r4
     c2e:	d8e3      	bhi.n	bf8 <gc_collect_end+0x1c>
     c30:	f8d6 3250 	ldr.w	r3, [r6, #592]	; 0x250
     c34:	e7db      	b.n	bee <gc_collect_end+0x12>
    MP_STATE_MEM(gc_lock_depth)--;
     c36:	f8b6 3354 	ldrh.w	r3, [r6, #852]	; 0x354
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     c3a:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)--;
     c3c:	3b01      	subs	r3, #1
     c3e:	f8a6 3354 	strh.w	r3, [r6, #852]	; 0x354
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     c42:	f8c6 2360 	str.w	r2, [r6, #864]	; 0x360
}
     c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     c4a:	2900      	cmp	r1, #0
     c4c:	d0f3      	beq.n	c36 <gc_collect_end+0x5a>
    int free_tail = 0;
     c4e:	4698      	mov	r8, r3
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     c50:	4618      	mov	r0, r3
                    ATB_ANY_TO_FREE(block);
     c52:	2703      	movs	r7, #3
                ATB_MARK_TO_HEAD(block);
     c54:	f04f 0c02 	mov.w	ip, #2
     c58:	e006      	b.n	c68 <gc_collect_end+0x8c>
        switch (ATB_GET_KIND(block)) {
     c5a:	2a03      	cmp	r2, #3
     c5c:	d020      	beq.n	ca0 <gc_collect_end+0xc4>
     c5e:	2a01      	cmp	r2, #1
     c60:	d013      	beq.n	c8a <gc_collect_end+0xae>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     c62:	3001      	adds	r0, #1
     c64:	4288      	cmp	r0, r1
     c66:	d2e6      	bcs.n	c36 <gc_collect_end+0x5a>
        switch (ATB_GET_KIND(block)) {
     c68:	0884      	lsrs	r4, r0, #2
     c6a:	f8d6 5240 	ldr.w	r5, [r6, #576]	; 0x240
     c6e:	f000 0303 	and.w	r3, r0, #3
     c72:	f815 e004 	ldrb.w	lr, [r5, r4]
     c76:	005b      	lsls	r3, r3, #1
     c78:	fa4e f203 	asr.w	r2, lr, r3
     c7c:	f002 0203 	and.w	r2, r2, #3
     c80:	2a02      	cmp	r2, #2
     c82:	d1ea      	bne.n	c5a <gc_collect_end+0x7e>
                if (free_tail) {
     c84:	f1b8 0f00 	cmp.w	r8, #0
     c88:	d0eb      	beq.n	c62 <gc_collect_end+0x86>
                    ATB_ANY_TO_FREE(block);
     c8a:	fa07 f303 	lsl.w	r3, r7, r3
     c8e:	ea2e 0303 	bic.w	r3, lr, r3
     c92:	552b      	strb	r3, [r5, r4]
     c94:	f8d6 1244 	ldr.w	r1, [r6, #580]	; 0x244
     c98:	f04f 0801 	mov.w	r8, #1
     c9c:	0089      	lsls	r1, r1, #2
     c9e:	e7e0      	b.n	c62 <gc_collect_end+0x86>
                ATB_MARK_TO_HEAD(block);
     ca0:	fa0c f303 	lsl.w	r3, ip, r3
     ca4:	ea2e 0303 	bic.w	r3, lr, r3
     ca8:	552b      	strb	r3, [r5, r4]
     caa:	f8d6 1244 	ldr.w	r1, [r6, #580]	; 0x244
                free_tail = 0;
     cae:	f04f 0800 	mov.w	r8, #0
     cb2:	0089      	lsls	r1, r1, #2
     cb4:	e7d5      	b.n	c62 <gc_collect_end+0x86>
     cb6:	bf00      	nop
     cb8:	200008a0 	.word	0x200008a0

00000cbc <gc_info>:
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     cbc:	4b3c      	ldr	r3, [pc, #240]	; (db0 <gc_info+0xf4>)
void gc_info(gc_info_t *info) {
     cbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     cc2:	f8d3 1248 	ldr.w	r1, [r3, #584]	; 0x248
     cc6:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     cca:	f8d3 6244 	ldr.w	r6, [r3, #580]	; 0x244
        size_t kind = ATB_GET_KIND(block);
     cce:	f8d3 7240 	ldr.w	r7, [r3, #576]	; 0x240
    info->used = 0;
     cd2:	2300      	movs	r3, #0
    info->free = 0;
     cd4:	e9c0 3301 	strd	r3, r3, [r0, #4]
    info->num_1block = 0;
     cd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
    info->max_block = 0;
     cdc:	e9c0 3305 	strd	r3, r3, [r0, #20]
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     ce0:	1a52      	subs	r2, r2, r1
     ce2:	6002      	str	r2, [r0, #0]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     ce4:	461d      	mov	r5, r3
     ce6:	00b6      	lsls	r6, r6, #2
     ce8:	469e      	mov	lr, r3
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     cea:	469c      	mov	ip, r3
     cec:	461c      	mov	r4, r3
     cee:	461a      	mov	r2, r3
     cf0:	4699      	mov	r9, r3
     cf2:	4619      	mov	r1, r3
     cf4:	4698      	mov	r8, r3
        size_t kind = ATB_GET_KIND(block);
     cf6:	f817 3009 	ldrb.w	r3, [r7, r9]
     cfa:	0049      	lsls	r1, r1, #1
     cfc:	410b      	asrs	r3, r1
     cfe:	f003 0303 	and.w	r3, r3, #3
        switch (kind) {
     d02:	2b01      	cmp	r3, #1
     d04:	d049      	beq.n	d9a <gc_info+0xde>
     d06:	d340      	bcc.n	d8a <gc_info+0xce>
     d08:	2b02      	cmp	r3, #2
     d0a:	d102      	bne.n	d12 <gc_info+0x56>
                info->used += 1;
     d0c:	3501      	adds	r5, #1
     d0e:	6045      	str	r5, [r0, #4]
                len += 1;
     d10:	3401      	adds	r4, #1
        block++;
     d12:	3201      	adds	r2, #1
        if (!finish) {
     d14:	4296      	cmp	r6, r2
     d16:	d00e      	beq.n	d36 <gc_info+0x7a>
            kind = ATB_GET_KIND(block);
     d18:	ea4f 0992 	mov.w	r9, r2, lsr #2
     d1c:	f002 0103 	and.w	r1, r2, #3
     d20:	f817 3009 	ldrb.w	r3, [r7, r9]
     d24:	ea4f 0a41 	mov.w	sl, r1, lsl #1
     d28:	fa43 f30a 	asr.w	r3, r3, sl
        if (finish || kind == AT_FREE || kind == AT_HEAD) {
     d2c:	f013 0303 	ands.w	r3, r3, #3
     d30:	d001      	beq.n	d36 <gc_info+0x7a>
     d32:	2b01      	cmp	r3, #1
     d34:	d1df      	bne.n	cf6 <gc_info+0x3a>
            if (len == 1) {
     d36:	2c01      	cmp	r4, #1
     d38:	d011      	beq.n	d5e <gc_info+0xa2>
            } else if (len == 2) {
     d3a:	2c02      	cmp	r4, #2
     d3c:	d102      	bne.n	d44 <gc_info+0x88>
                info->num_2block += 1;
     d3e:	6941      	ldr	r1, [r0, #20]
     d40:	3101      	adds	r1, #1
     d42:	6141      	str	r1, [r0, #20]
            if (len > info->max_block) {
     d44:	6981      	ldr	r1, [r0, #24]
     d46:	42a1      	cmp	r1, r4
                info->max_block = len;
     d48:	bf38      	it	cc
     d4a:	6184      	strcc	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     d4c:	4296      	cmp	r6, r2
     d4e:	d00f      	beq.n	d70 <gc_info+0xb4>
     d50:	2b01      	cmp	r3, #1
     d52:	d026      	beq.n	da2 <gc_info+0xe6>
     d54:	ea4f 0992 	mov.w	r9, r2, lsr #2
     d58:	f002 0103 	and.w	r1, r2, #3
     d5c:	e7cb      	b.n	cf6 <gc_info+0x3a>
                info->num_1block += 1;
     d5e:	6901      	ldr	r1, [r0, #16]
     d60:	3101      	adds	r1, #1
     d62:	6101      	str	r1, [r0, #16]
            if (len > info->max_block) {
     d64:	6981      	ldr	r1, [r0, #24]
     d66:	42a1      	cmp	r1, r4
                info->max_block = len;
     d68:	bf38      	it	cc
     d6a:	6184      	strcc	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     d6c:	4296      	cmp	r6, r2
     d6e:	d1ef      	bne.n	d50 <gc_info+0x94>
                if (len_free > info->max_free) {
     d70:	45c4      	cmp	ip, r8
     d72:	d903      	bls.n	d7c <gc_info+0xc0>
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     d74:	4296      	cmp	r6, r2
                    info->max_free = len_free;
     d76:	f8c0 c00c 	str.w	ip, [r0, #12]
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     d7a:	d117      	bne.n	dac <gc_info+0xf0>
    info->used *= BYTES_PER_BLOCK;
     d7c:	012d      	lsls	r5, r5, #4
    info->free *= BYTES_PER_BLOCK;
     d7e:	ea4f 130e 	mov.w	r3, lr, lsl #4
     d82:	e9c0 5301 	strd	r5, r3, [r0, #4]
}
     d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                info->free += 1;
     d8a:	f10e 0e01 	add.w	lr, lr, #1
     d8e:	f8c0 e008 	str.w	lr, [r0, #8]
                len_free += 1;
     d92:	f10c 0c01 	add.w	ip, ip, #1
                len = 0;
     d96:	461c      	mov	r4, r3
                break;
     d98:	e7bb      	b.n	d12 <gc_info+0x56>
                info->used += 1;
     d9a:	3501      	adds	r5, #1
     d9c:	6045      	str	r5, [r0, #4]
                len = 1;
     d9e:	461c      	mov	r4, r3
                break;
     da0:	e7b7      	b.n	d12 <gc_info+0x56>
                if (len_free > info->max_free) {
     da2:	45e0      	cmp	r8, ip
     da4:	d3e6      	bcc.n	d74 <gc_info+0xb8>
                len_free = 0;
     da6:	f04f 0c00 	mov.w	ip, #0
     daa:	e7d3      	b.n	d54 <gc_info+0x98>
     dac:	46e0      	mov	r8, ip
     dae:	e7fa      	b.n	da6 <gc_info+0xea>
     db0:	200008a0 	.word	0x200008a0

00000db4 <gc_alloc>:
    size_t n_blocks = ((n_bytes + BYTES_PER_BLOCK - 1) & (~(BYTES_PER_BLOCK - 1))) / BYTES_PER_BLOCK;
     db4:	300f      	adds	r0, #15
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (n_blocks == 0) {
     dba:	0906      	lsrs	r6, r0, #4
     dbc:	d05a      	beq.n	e74 <gc_alloc+0xc0>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     dbe:	4d5a      	ldr	r5, [pc, #360]	; (f28 <gc_alloc+0x174>)
     dc0:	f8b5 3354 	ldrh.w	r3, [r5, #852]	; 0x354
     dc4:	2b00      	cmp	r3, #0
     dc6:	d155      	bne.n	e74 <gc_alloc+0xc0>
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     dc8:	f8b5 3356 	ldrh.w	r3, [r5, #854]	; 0x356
     dcc:	2b00      	cmp	r3, #0
     dce:	bf0c      	ite	eq
     dd0:	f04f 0801 	moveq.w	r8, #1
     dd4:	f04f 0800 	movne.w	r8, #0
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     dd8:	d150      	bne.n	e7c <gc_alloc+0xc8>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     dda:	f8d5 2360 	ldr.w	r2, [r5, #864]	; 0x360
     dde:	f8d5 0244 	ldr.w	r0, [r5, #580]	; 0x244
     de2:	4282      	cmp	r2, r0
     de4:	f04f 0400 	mov.w	r4, #0
     de8:	d237      	bcs.n	e5a <gc_alloc+0xa6>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     dea:	f8d5 7240 	ldr.w	r7, [r5, #576]	; 0x240
     dee:	1e51      	subs	r1, r2, #1
     df0:	4439      	add	r1, r7
     df2:	e019      	b.n	e28 <gc_alloc+0x74>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     df4:	3401      	adds	r4, #1
     df6:	42a6      	cmp	r6, r4
     df8:	d949      	bls.n	e8e <gc_alloc+0xda>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     dfa:	f013 0f0c 	tst.w	r3, #12
     dfe:	d11d      	bne.n	e3c <gc_alloc+0x88>
     e00:	3401      	adds	r4, #1
     e02:	42a6      	cmp	r6, r4
     e04:	f240 8087 	bls.w	f16 <gc_alloc+0x162>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     e08:	f013 0f30 	tst.w	r3, #48	; 0x30
     e0c:	d11b      	bne.n	e46 <gc_alloc+0x92>
     e0e:	3401      	adds	r4, #1
     e10:	42a6      	cmp	r6, r4
     e12:	f240 8083 	bls.w	f1c <gc_alloc+0x168>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     e16:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     e1a:	d119      	bne.n	e50 <gc_alloc+0x9c>
     e1c:	3401      	adds	r4, #1
     e1e:	42a6      	cmp	r6, r4
     e20:	d97f      	bls.n	f22 <gc_alloc+0x16e>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     e22:	3201      	adds	r2, #1
     e24:	4282      	cmp	r2, r0
     e26:	d218      	bcs.n	e5a <gc_alloc+0xa6>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     e28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     e2c:	f013 0f03 	tst.w	r3, #3
     e30:	d0e0      	beq.n	df4 <gc_alloc+0x40>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     e32:	f013 0f0c 	tst.w	r3, #12
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     e36:	f04f 0400 	mov.w	r4, #0
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     e3a:	d0e1      	beq.n	e00 <gc_alloc+0x4c>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     e3c:	f013 0f30 	tst.w	r3, #48	; 0x30
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     e40:	f04f 0400 	mov.w	r4, #0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     e44:	d0e3      	beq.n	e0e <gc_alloc+0x5a>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     e46:	f013 0fc0 	tst.w	r3, #192	; 0xc0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     e4a:	f04f 0400 	mov.w	r4, #0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     e4e:	d0e5      	beq.n	e1c <gc_alloc+0x68>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     e50:	3201      	adds	r2, #1
     e52:	4282      	cmp	r2, r0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     e54:	f04f 0400 	mov.w	r4, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     e58:	d3e6      	bcc.n	e28 <gc_alloc+0x74>
        if (collected) {
     e5a:	f1b8 0f00 	cmp.w	r8, #0
     e5e:	d109      	bne.n	e74 <gc_alloc+0xc0>
        gc_collect();
     e60:	f017 fd16 	bl	18890 <gc_collect>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     e64:	f8d5 2360 	ldr.w	r2, [r5, #864]	; 0x360
     e68:	f8d5 0244 	ldr.w	r0, [r5, #580]	; 0x244
     e6c:	4282      	cmp	r2, r0
        collected = 1;
     e6e:	f04f 0801 	mov.w	r8, #1
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     e72:	d3ba      	bcc.n	dea <gc_alloc+0x36>
        return NULL;
     e74:	2300      	movs	r3, #0
}
     e76:	4618      	mov	r0, r3
     e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     e7c:	f8d5 2358 	ldr.w	r2, [r5, #856]	; 0x358
     e80:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
     e84:	429a      	cmp	r2, r3
     e86:	d3a8      	bcc.n	dda <gc_alloc+0x26>
        gc_collect();
     e88:	f017 fd02 	bl	18890 <gc_collect>
     e8c:	e7a5      	b.n	dda <gc_alloc+0x26>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     e8e:	0092      	lsls	r2, r2, #2
    start_block = i - n_free + 1;
     e90:	1b11      	subs	r1, r2, r4
    if (n_free == 1) {
     e92:	2c01      	cmp	r4, #1
    start_block = i - n_free + 1;
     e94:	f101 0001 	add.w	r0, r1, #1
     e98:	f102 0c01 	add.w	ip, r2, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     e9c:	bf08      	it	eq
     e9e:	ea4f 039c 	moveq.w	r3, ip, lsr #2
    ATB_FREE_TO_HEAD(start_block);
     ea2:	ea4f 0490 	mov.w	r4, r0, lsr #2
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     ea6:	bf08      	it	eq
     ea8:	f8c5 3360 	streq.w	r3, [r5, #864]	; 0x360
    ATB_FREE_TO_HEAD(start_block);
     eac:	f000 0303 	and.w	r3, r0, #3
     eb0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
     eb4:	f817 8004 	ldrb.w	r8, [r7, r4]
     eb8:	2301      	movs	r3, #1
     eba:	fa03 f30e 	lsl.w	r3, r3, lr
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     ebe:	3102      	adds	r1, #2
    ATB_FREE_TO_HEAD(start_block);
     ec0:	ea43 0308 	orr.w	r3, r3, r8
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     ec4:	428a      	cmp	r2, r1
    ATB_FREE_TO_HEAD(start_block);
     ec6:	553b      	strb	r3, [r7, r4]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     ec8:	d311      	bcc.n	eee <gc_alloc+0x13a>
        ATB_FREE_TO_TAIL(bl);
     eca:	f04f 0802 	mov.w	r8, #2
     ece:	088c      	lsrs	r4, r1, #2
     ed0:	f8d5 7240 	ldr.w	r7, [r5, #576]	; 0x240
     ed4:	f001 0303 	and.w	r3, r1, #3
     ed8:	f817 e004 	ldrb.w	lr, [r7, r4]
     edc:	005b      	lsls	r3, r3, #1
     ede:	fa08 f303 	lsl.w	r3, r8, r3
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     ee2:	3101      	adds	r1, #1
        ATB_FREE_TO_TAIL(bl);
     ee4:	ea43 030e 	orr.w	r3, r3, lr
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     ee8:	428a      	cmp	r2, r1
        ATB_FREE_TO_TAIL(bl);
     eea:	553b      	strb	r3, [r7, r4]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     eec:	d2ef      	bcs.n	ece <gc_alloc+0x11a>
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     eee:	f8d5 3248 	ldr.w	r3, [r5, #584]	; 0x248
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     ef2:	f8d5 1358 	ldr.w	r1, [r5, #856]	; 0x358
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     ef6:	ebac 0200 	sub.w	r2, ip, r0
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     efa:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     efe:	440e      	add	r6, r1
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     f00:	0112      	lsls	r2, r2, #4
     f02:	4618      	mov	r0, r3
     f04:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     f06:	f8c5 6358 	str.w	r6, [r5, #856]	; 0x358
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     f0a:	f01a fcb7 	bl	1b87c <memset>
     f0e:	4603      	mov	r3, r0
}
     f10:	4618      	mov	r0, r3
     f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     f16:	0092      	lsls	r2, r2, #2
     f18:	3201      	adds	r2, #1
     f1a:	e7b9      	b.n	e90 <gc_alloc+0xdc>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     f1c:	0092      	lsls	r2, r2, #2
     f1e:	3202      	adds	r2, #2
     f20:	e7b6      	b.n	e90 <gc_alloc+0xdc>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     f22:	0092      	lsls	r2, r2, #2
     f24:	3203      	adds	r2, #3
     f26:	e7b3      	b.n	e90 <gc_alloc+0xdc>
     f28:	200008a0 	.word	0x200008a0

00000f2c <gc_free>:
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     f2c:	4b03      	ldr	r3, [pc, #12]	; (f3c <gc_free+0x10>)
     f2e:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
     f32:	b913      	cbnz	r3, f3a <gc_free+0xe>
    if (ptr == NULL) {
     f34:	b108      	cbz	r0, f3a <gc_free+0xe>
     f36:	f7ff bd49 	b.w	9cc <gc_free.part.0>
}
     f3a:	4770      	bx	lr
     f3c:	200008a0 	.word	0x200008a0

00000f40 <gc_nbytes>:

size_t gc_nbytes(const void *ptr) {
    GC_ENTER();
    if (VERIFY_PTR(ptr)) {
     f40:	f010 030f 	ands.w	r3, r0, #15
     f44:	d11b      	bne.n	f7e <gc_nbytes+0x3e>
     f46:	4918      	ldr	r1, [pc, #96]	; (fa8 <gc_nbytes+0x68>)
     f48:	f8d1 2248 	ldr.w	r2, [r1, #584]	; 0x248
     f4c:	4282      	cmp	r2, r0
     f4e:	d816      	bhi.n	f7e <gc_nbytes+0x3e>
size_t gc_nbytes(const void *ptr) {
     f50:	b410      	push	{r4}
    if (VERIFY_PTR(ptr)) {
     f52:	f8d1 424c 	ldr.w	r4, [r1, #588]	; 0x24c
     f56:	4284      	cmp	r4, r0
     f58:	d922      	bls.n	fa0 <gc_nbytes+0x60>
        size_t block = BLOCK_FROM_PTR(ptr);
     f5a:	1a80      	subs	r0, r0, r2
        if (ATB_GET_KIND(block) == AT_HEAD) {
     f5c:	f8d1 4240 	ldr.w	r4, [r1, #576]	; 0x240
     f60:	0981      	lsrs	r1, r0, #6
        size_t block = BLOCK_FROM_PTR(ptr);
     f62:	0902      	lsrs	r2, r0, #4
        if (ATB_GET_KIND(block) == AT_HEAD) {
     f64:	5c61      	ldrb	r1, [r4, r1]
     f66:	f002 0003 	and.w	r0, r2, #3
     f6a:	0040      	lsls	r0, r0, #1
     f6c:	4101      	asrs	r1, r0
     f6e:	f001 0103 	and.w	r1, r1, #3
     f72:	2901      	cmp	r1, #1
            // work out number of consecutive blocks in the chain starting with this on
            size_t n_blocks = 0;
     f74:	4618      	mov	r0, r3
        if (ATB_GET_KIND(block) == AT_HEAD) {
     f76:	d004      	beq.n	f82 <gc_nbytes+0x42>
    }

    // invalid pointer
    GC_EXIT();
    return 0;
}
     f78:	f85d 4b04 	ldr.w	r4, [sp], #4
     f7c:	4770      	bx	lr
    return 0;
     f7e:	2000      	movs	r0, #0
     f80:	4770      	bx	lr
                n_blocks += 1;
     f82:	3001      	adds	r0, #1
     f84:	1813      	adds	r3, r2, r0
            } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     f86:	0899      	lsrs	r1, r3, #2
     f88:	f003 0303 	and.w	r3, r3, #3
     f8c:	5c61      	ldrb	r1, [r4, r1]
     f8e:	005b      	lsls	r3, r3, #1
     f90:	fa41 f303 	asr.w	r3, r1, r3
     f94:	f003 0303 	and.w	r3, r3, #3
     f98:	2b02      	cmp	r3, #2
     f9a:	d0f2      	beq.n	f82 <gc_nbytes+0x42>
            return n_blocks * BYTES_PER_BLOCK;
     f9c:	0100      	lsls	r0, r0, #4
     f9e:	e7eb      	b.n	f78 <gc_nbytes+0x38>
    return 0;
     fa0:	4618      	mov	r0, r3
}
     fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
     fa6:	4770      	bx	lr
     fa8:	200008a0 	.word	0x200008a0

00000fac <gc_realloc>:
    }
}

#else // Alternative gc_realloc impl

void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     fb0:	460b      	mov	r3, r1
    // check for pure allocation
    if (ptr_in == NULL) {
     fb2:	4605      	mov	r5, r0
     fb4:	2800      	cmp	r0, #0
     fb6:	f000 80c4 	beq.w	1142 <gc_realloc+0x196>
     fba:	4e6f      	ldr	r6, [pc, #444]	; (1178 <_Stacksize+0x28>)
     fbc:	f8b6 4354 	ldrh.w	r4, [r6, #852]	; 0x354
        return gc_alloc(n_bytes, false);
    }

    // check for pure free
    if (n_bytes == 0) {
     fc0:	2900      	cmp	r1, #0
     fc2:	d077      	beq.n	10b4 <gc_realloc+0x108>

    void *ptr = ptr_in;

    GC_ENTER();

    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     fc4:	2c00      	cmp	r4, #0
     fc6:	d177      	bne.n	10b8 <gc_realloc+0x10c>
        GC_EXIT();
        return NULL;
    }

    // get the GC block number corresponding to this pointer
    assert(VERIFY_PTR(ptr));
     fc8:	f010 0e0f 	ands.w	lr, r0, #15
     fcc:	f040 80bf 	bne.w	114e <gc_realloc+0x1a2>
     fd0:	f8d6 3248 	ldr.w	r3, [r6, #584]	; 0x248
     fd4:	4283      	cmp	r3, r0
     fd6:	f200 80ba 	bhi.w	114e <gc_realloc+0x1a2>
     fda:	f8d6 024c 	ldr.w	r0, [r6, #588]	; 0x24c
     fde:	42a8      	cmp	r0, r5
     fe0:	f240 80b5 	bls.w	114e <gc_realloc+0x1a2>
    size_t block = BLOCK_FROM_PTR(ptr);
     fe4:	1aeb      	subs	r3, r5, r3
    assert(ATB_GET_KIND(block) == AT_HEAD);
     fe6:	099f      	lsrs	r7, r3, #6
     fe8:	f8d6 4240 	ldr.w	r4, [r6, #576]	; 0x240
    size_t block = BLOCK_FROM_PTR(ptr);
     fec:	091b      	lsrs	r3, r3, #4
    assert(ATB_GET_KIND(block) == AT_HEAD);
     fee:	f003 0003 	and.w	r0, r3, #3
     ff2:	5de7      	ldrb	r7, [r4, r7]
     ff4:	0040      	lsls	r0, r0, #1
     ff6:	4107      	asrs	r7, r0
     ff8:	f007 0703 	and.w	r7, r7, #3
     ffc:	2f01      	cmp	r7, #1
     ffe:	f040 80b4 	bne.w	116a <_Stacksize+0x1a>
    // free blocks to satisfy the realloc.  Note that we need to compute the
    // total size of the existing memory chunk so we can correctly and
    // efficiently shrink it (see below for shrinking code).
    size_t n_free   = 0;
    size_t n_blocks = 1; // counting HEAD block
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
    1002:	f8d6 0244 	ldr.w	r0, [r6, #580]	; 0x244
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
    1006:	f103 0801 	add.w	r8, r3, #1
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
    100a:	ea4f 0980 	mov.w	r9, r0, lsl #2
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
    100e:	f101 0c0f 	add.w	ip, r1, #15
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
    1012:	45c1      	cmp	r9, r8
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
    1014:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
    1018:	d913      	bls.n	1042 <gc_realloc+0x96>
        byte block_type = ATB_GET_KIND(bl);
    101a:	ea4f 0a98 	mov.w	sl, r8, lsr #2
    101e:	f008 0003 	and.w	r0, r8, #3
    1022:	f814 a00a 	ldrb.w	sl, [r4, sl]
    1026:	0040      	lsls	r0, r0, #1
    1028:	fa4a f000 	asr.w	r0, sl, r0
    102c:	f000 0003 	and.w	r0, r0, #3
        if (block_type == AT_TAIL) {
    1030:	2802      	cmp	r0, #2
    1032:	d045      	beq.n	10c0 <gc_realloc+0x114>
            n_blocks++;
            continue;
        }
        if (block_type == AT_FREE) {
    1034:	b928      	cbnz	r0, 1042 <gc_realloc+0x96>
            n_free++;
    1036:	f10e 0e01 	add.w	lr, lr, #1
            if (n_blocks + n_free >= new_blocks) {
    103a:	eb0e 0007 	add.w	r0, lr, r7
    103e:	4560      	cmp	r0, ip
    1040:	d33f      	bcc.n	10c2 <gc_realloc+0x116>
        }
        break;
    }

    // return original ptr if it already has the requested number of blocks
    if (new_blocks == n_blocks) {
    1042:	45bc      	cmp	ip, r7
    1044:	d062      	beq.n	110c <gc_realloc+0x160>
        GC_EXIT();
        return ptr_in;
    }

    // check if we can shrink the allocated area
    if (new_blocks < n_blocks) {
    1046:	d341      	bcc.n	10cc <gc_realloc+0x120>

        return ptr_in;
    }

    // check if we can expand in place
    if (new_blocks <= n_blocks + n_free) {
    1048:	44be      	add	lr, r7
    104a:	45e6      	cmp	lr, ip
    104c:	d362      	bcc.n	1114 <gc_realloc+0x168>
        // mark few more blocks as used tail
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
    104e:	19da      	adds	r2, r3, r7
    1050:	eb03 010c 	add.w	r1, r3, ip
    1054:	4291      	cmp	r1, r2
    1056:	d923      	bls.n	10a0 <gc_realloc+0xf4>
            assert(ATB_GET_KIND(bl) == AT_FREE);
    1058:	0890      	lsrs	r0, r2, #2
    105a:	f002 0303 	and.w	r3, r2, #3
    105e:	f814 e000 	ldrb.w	lr, [r4, r0]
    1062:	005b      	lsls	r3, r3, #1
    1064:	fa4e f803 	asr.w	r8, lr, r3
    1068:	f018 0f03 	tst.w	r8, #3
    106c:	4404      	add	r4, r0
    106e:	d175      	bne.n	115c <_Stacksize+0xc>
            ATB_FREE_TO_TAIL(bl);
    1070:	2002      	movs	r0, #2
    1072:	e00d      	b.n	1090 <gc_realloc+0xe4>
            assert(ATB_GET_KIND(bl) == AT_FREE);
    1074:	0894      	lsrs	r4, r2, #2
    1076:	f8d6 8240 	ldr.w	r8, [r6, #576]	; 0x240
    107a:	f002 0303 	and.w	r3, r2, #3
    107e:	f818 e004 	ldrb.w	lr, [r8, r4]
    1082:	005b      	lsls	r3, r3, #1
    1084:	fa4e f903 	asr.w	r9, lr, r3
    1088:	f019 0f03 	tst.w	r9, #3
    108c:	4444      	add	r4, r8
    108e:	d165      	bne.n	115c <_Stacksize+0xc>
            ATB_FREE_TO_TAIL(bl);
    1090:	fa00 f303 	lsl.w	r3, r0, r3
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
    1094:	3201      	adds	r2, #1
            ATB_FREE_TO_TAIL(bl);
    1096:	ea43 030e 	orr.w	r3, r3, lr
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
    109a:	4291      	cmp	r1, r2
            ATB_FREE_TO_TAIL(bl);
    109c:	7023      	strb	r3, [r4, #0]
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
    109e:	d1e9      	bne.n	1074 <gc_realloc+0xc8>

        GC_EXIT();

        #if MICROPY_GC_CONSERVATIVE_CLEAR
        // be conservative and zero out all the newly allocated blocks
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
    10a0:	ebac 0207 	sub.w	r2, ip, r7
    10a4:	0112      	lsls	r2, r2, #4
    10a6:	eb05 1007 	add.w	r0, r5, r7, lsl #4
    10aa:	2100      	movs	r1, #0

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif

        return ptr_in;
    10ac:	462c      	mov	r4, r5
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
    10ae:	f01a fbe5 	bl	1b87c <memset>
        return ptr_in;
    10b2:	e002      	b.n	10ba <gc_realloc+0x10e>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
    10b4:	2c00      	cmp	r4, #0
    10b6:	d03f      	beq.n	1138 <gc_realloc+0x18c>
        return NULL;
    10b8:	2400      	movs	r4, #0

    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
    gc_free(ptr_in);
    return ptr_out;
}
    10ba:	4620      	mov	r0, r4
    10bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            n_blocks++;
    10c0:	3701      	adds	r7, #1
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
    10c2:	f108 0801 	add.w	r8, r8, #1
    10c6:	45c1      	cmp	r9, r8
    10c8:	d1a7      	bne.n	101a <gc_realloc+0x6e>
    10ca:	e7ba      	b.n	1042 <gc_realloc+0x96>
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
    10cc:	449c      	add	ip, r3
    10ce:	4661      	mov	r1, ip
    10d0:	443b      	add	r3, r7
            ATB_ANY_TO_FREE(bl);
    10d2:	f04f 0803 	mov.w	r8, #3
    10d6:	e001      	b.n	10dc <gc_realloc+0x130>
    10d8:	f8d6 4240 	ldr.w	r4, [r6, #576]	; 0x240
    10dc:	ea4f 0e91 	mov.w	lr, r1, lsr #2
    10e0:	f001 0203 	and.w	r2, r1, #3
    10e4:	f814 000e 	ldrb.w	r0, [r4, lr]
    10e8:	0052      	lsls	r2, r2, #1
    10ea:	fa08 f202 	lsl.w	r2, r8, r2
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
    10ee:	3101      	adds	r1, #1
            ATB_ANY_TO_FREE(bl);
    10f0:	ea20 0202 	bic.w	r2, r0, r2
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
    10f4:	4299      	cmp	r1, r3
            ATB_ANY_TO_FREE(bl);
    10f6:	f804 200e 	strb.w	r2, [r4, lr]
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
    10fa:	d1ed      	bne.n	10d8 <gc_realloc+0x12c>
        if ((block + new_blocks) / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
    10fc:	f8d6 3360 	ldr.w	r3, [r6, #864]	; 0x360
    1100:	ea4f 029c 	mov.w	r2, ip, lsr #2
    1104:	429a      	cmp	r2, r3
            MP_STATE_MEM(gc_last_free_atb_index) = (block + new_blocks) / BLOCKS_PER_ATB;
    1106:	bf38      	it	cc
    1108:	f8c6 2360 	strcc.w	r2, [r6, #864]	; 0x360
    110c:	462c      	mov	r4, r5
}
    110e:	4620      	mov	r0, r4
    1110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!allow_move) {
    1114:	2a00      	cmp	r2, #0
    1116:	d0cf      	beq.n	10b8 <gc_realloc+0x10c>
    void *ptr_out = gc_alloc(n_bytes, ftb_state);
    1118:	4608      	mov	r0, r1
    111a:	2100      	movs	r1, #0
    111c:	f7ff fe4a 	bl	db4 <gc_alloc>
    if (ptr_out == NULL) {
    1120:	4604      	mov	r4, r0
    1122:	2800      	cmp	r0, #0
    1124:	d0c8      	beq.n	10b8 <gc_realloc+0x10c>
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
    1126:	013a      	lsls	r2, r7, #4
    1128:	4629      	mov	r1, r5
    112a:	f01a fb63 	bl	1b7f4 <memcpy>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
    112e:	f8b6 3354 	ldrh.w	r3, [r6, #852]	; 0x354
    1132:	2b00      	cmp	r3, #0
    1134:	d1c1      	bne.n	10ba <gc_realloc+0x10e>
    1136:	4628      	mov	r0, r5
    1138:	f7ff fc48 	bl	9cc <gc_free.part.0>
}
    113c:	4620      	mov	r0, r4
    113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return gc_alloc(n_bytes, false);
    1142:	4601      	mov	r1, r0
}
    1144:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return gc_alloc(n_bytes, false);
    1148:	4618      	mov	r0, r3
    114a:	f7ff be33 	b.w	db4 <gc_alloc>
    assert(VERIFY_PTR(ptr));
    114e:	4b0b      	ldr	r3, [pc, #44]	; (117c <_Stacksize+0x2c>)
    1150:	4a0b      	ldr	r2, [pc, #44]	; (1180 <_Stacksize+0x30>)
    1152:	480c      	ldr	r0, [pc, #48]	; (1184 <_Stacksize+0x34>)
    1154:	f240 219f 	movw	r1, #671	; 0x29f
    1158:	f017 fa00 	bl	1855c <__assert_func>
            assert(ATB_GET_KIND(bl) == AT_FREE);
    115c:	4b0a      	ldr	r3, [pc, #40]	; (1188 <_Stacksize+0x38>)
    115e:	4a08      	ldr	r2, [pc, #32]	; (1180 <_Stacksize+0x30>)
    1160:	4808      	ldr	r0, [pc, #32]	; (1184 <_Stacksize+0x34>)
    1162:	f240 21df 	movw	r1, #735	; 0x2df
    1166:	f017 f9f9 	bl	1855c <__assert_func>
    assert(ATB_GET_KIND(block) == AT_HEAD);
    116a:	4b08      	ldr	r3, [pc, #32]	; (118c <_Stacksize+0x3c>)
    116c:	4a04      	ldr	r2, [pc, #16]	; (1180 <_Stacksize+0x30>)
    116e:	4805      	ldr	r0, [pc, #20]	; (1184 <_Stacksize+0x34>)
    1170:	f240 21a1 	movw	r1, #673	; 0x2a1
    1174:	f017 f9f2 	bl	1855c <__assert_func>
    1178:	200008a0 	.word	0x200008a0
    117c:	00020f58 	.word	0x00020f58
    1180:	00020e9c 	.word	0x00020e9c
    1184:	00020f68 	.word	0x00020f68
    1188:	00020f98 	.word	0x00020f98
    118c:	00020f78 	.word	0x00020f78

00001190 <gc_dump_info>:
#endif // Alternative gc_realloc impl

void gc_dump_info(void) {
    1190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
    1194:	4b40      	ldr	r3, [pc, #256]	; (1298 <gc_dump_info+0x108>)
    1196:	f8d3 024c 	ldr.w	r0, [r3, #588]	; 0x24c
    119a:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
    119e:	f8d3 1244 	ldr.w	r1, [r3, #580]	; 0x244
        size_t kind = ATB_GET_KIND(block);
    11a2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
void gc_dump_info(void) {
    11a6:	b085      	sub	sp, #20
    info->max_block = 0;
    11a8:	2500      	movs	r5, #0
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
    11aa:	1a82      	subs	r2, r0, r2
    11ac:	9203      	str	r2, [sp, #12]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
    11ae:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    info->num_2block = 0;
    11b2:	46a8      	mov	r8, r5
    info->num_1block = 0;
    11b4:	462f      	mov	r7, r5
    info->max_free = 0;
    11b6:	9502      	str	r5, [sp, #8]
    info->free = 0;
    11b8:	46aa      	mov	sl, r5
    info->used = 0;
    11ba:	46ab      	mov	fp, r5
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
    11bc:	462e      	mov	r6, r5
    11be:	46a9      	mov	r9, r5
    11c0:	462c      	mov	r4, r5
    11c2:	46ac      	mov	ip, r5
    11c4:	462a      	mov	r2, r5
        size_t kind = ATB_GET_KIND(block);
    11c6:	f813 100c 	ldrb.w	r1, [r3, ip]
    11ca:	0052      	lsls	r2, r2, #1
    11cc:	4111      	asrs	r1, r2
    11ce:	f001 0103 	and.w	r1, r1, #3
        switch (kind) {
    11d2:	2901      	cmp	r1, #1
    11d4:	d04d      	beq.n	1272 <gc_dump_info+0xe2>
    11d6:	d346      	bcc.n	1266 <gc_dump_info+0xd6>
    11d8:	2902      	cmp	r1, #2
    11da:	d102      	bne.n	11e2 <gc_dump_info+0x52>
                info->used += 1;
    11dc:	f10b 0b01 	add.w	fp, fp, #1
                len += 1;
    11e0:	3601      	adds	r6, #1
        block++;
    11e2:	3401      	adds	r4, #1
        if (!finish) {
    11e4:	4574      	cmp	r4, lr
    11e6:	d00c      	beq.n	1202 <gc_dump_info+0x72>
            kind = ATB_GET_KIND(block);
    11e8:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    11ec:	f004 0203 	and.w	r2, r4, #3
    11f0:	f813 100c 	ldrb.w	r1, [r3, ip]
    11f4:	0050      	lsls	r0, r2, #1
    11f6:	4101      	asrs	r1, r0
        if (finish || kind == AT_FREE || kind == AT_HEAD) {
    11f8:	f011 0103 	ands.w	r1, r1, #3
    11fc:	d001      	beq.n	1202 <gc_dump_info+0x72>
    11fe:	2901      	cmp	r1, #1
    1200:	d1e1      	bne.n	11c6 <gc_dump_info+0x36>
            if (len == 1) {
    1202:	2e01      	cmp	r6, #1
    1204:	d00f      	beq.n	1226 <gc_dump_info+0x96>
            } else if (len == 2) {
    1206:	2e02      	cmp	r6, #2
                info->num_2block += 1;
    1208:	bf08      	it	eq
    120a:	f108 0801 	addeq.w	r8, r8, #1
    120e:	42b5      	cmp	r5, r6
    1210:	bf38      	it	cc
    1212:	4635      	movcc	r5, r6
            if (finish || kind == AT_HEAD) {
    1214:	4574      	cmp	r4, lr
    1216:	d00d      	beq.n	1234 <gc_dump_info+0xa4>
    1218:	2901      	cmp	r1, #1
    121a:	d02e      	beq.n	127a <gc_dump_info+0xea>
    121c:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    1220:	f004 0203 	and.w	r2, r4, #3
    1224:	e7cf      	b.n	11c6 <gc_dump_info+0x36>
    1226:	42b5      	cmp	r5, r6
    1228:	bf38      	it	cc
    122a:	4635      	movcc	r5, r6
    122c:	4574      	cmp	r4, lr
                info->num_1block += 1;
    122e:	f107 0701 	add.w	r7, r7, #1
            if (finish || kind == AT_HEAD) {
    1232:	d1f1      	bne.n	1218 <gc_dump_info+0x88>
    info->free *= BYTES_PER_BLOCK;
    1234:	ea4f 130a 	mov.w	r3, sl, lsl #4
    gc_info_t info;
    gc_info(&info);
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
    1238:	9300      	str	r3, [sp, #0]
    123a:	9b02      	ldr	r3, [sp, #8]
    123c:	9a03      	ldr	r2, [sp, #12]
    123e:	4917      	ldr	r1, [pc, #92]	; (129c <gc_dump_info+0x10c>)
    1240:	4817      	ldr	r0, [pc, #92]	; (12a0 <gc_dump_info+0x110>)
    1242:	4599      	cmp	r9, r3
    1244:	bf38      	it	cc
    1246:	4699      	movcc	r9, r3
    1248:	ea4f 130b 	mov.w	r3, fp, lsl #4
    124c:	f000 ff0e 	bl	206c <mp_printf>
        (uint)info.total, (uint)info.used, (uint)info.free);
    mp_printf(&mp_plat_print, " No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",
    1250:	e9cd 5900 	strd	r5, r9, [sp]
    1254:	4643      	mov	r3, r8
    1256:	463a      	mov	r2, r7
    1258:	4912      	ldr	r1, [pc, #72]	; (12a4 <gc_dump_info+0x114>)
    125a:	4811      	ldr	r0, [pc, #68]	; (12a0 <gc_dump_info+0x110>)
    125c:	f000 ff06 	bl	206c <mp_printf>
           (uint)info.num_1block, (uint)info.num_2block, (uint)info.max_block, (uint)info.max_free);
}
    1260:	b005      	add	sp, #20
    1262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                info->free += 1;
    1266:	f10a 0a01 	add.w	sl, sl, #1
                len_free += 1;
    126a:	f109 0901 	add.w	r9, r9, #1
                len = 0;
    126e:	460e      	mov	r6, r1
    1270:	e7b7      	b.n	11e2 <gc_dump_info+0x52>
                info->used += 1;
    1272:	f10b 0b01 	add.w	fp, fp, #1
                len = 1;
    1276:	460e      	mov	r6, r1
    1278:	e7b3      	b.n	11e2 <gc_dump_info+0x52>
                if (len_free > info->max_free) {
    127a:	9a02      	ldr	r2, [sp, #8]
    127c:	454a      	cmp	r2, r9
                len_free = 0;
    127e:	bf28      	it	cs
    1280:	f04f 0900 	movcs.w	r9, #0
                if (len_free > info->max_free) {
    1284:	d2ca      	bcs.n	121c <gc_dump_info+0x8c>
    1286:	f8cd 9008 	str.w	r9, [sp, #8]
    128a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
                len_free = 0;
    128e:	f04f 0900 	mov.w	r9, #0
    1292:	f004 0203 	and.w	r2, r4, #3
    1296:	e796      	b.n	11c6 <gc_dump_info+0x36>
    1298:	200008a0 	.word	0x200008a0
    129c:	00020eec 	.word	0x00020eec
    12a0:	00023684 	.word	0x00023684
    12a4:	00020f10 	.word	0x00020f10

000012a8 <gc_dump_alloc_table>:

void gc_dump_alloc_table(void) {
    12a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GC_ENTER();
    static const size_t DUMP_BYTES_PER_LINE = 64;
    #if !EXTENSIVE_HEAP_PROFILING
    // When comparing heap output we don't want to print the starting
    // pointer of the heap because it changes from run to run.
    mp_printf(&mp_plat_print, "GC memory layout; from %p:", MP_STATE_MEM(gc_pool_start));
    12ac:	4f52      	ldr	r7, [pc, #328]	; (13f8 <gc_dump_alloc_table+0x150>)
    12ae:	4953      	ldr	r1, [pc, #332]	; (13fc <gc_dump_alloc_table+0x154>)
    12b0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
    12b4:	4852      	ldr	r0, [pc, #328]	; (1400 <gc_dump_alloc_table+0x158>)
    12b6:	f000 fed9 	bl	206c <mp_printf>
    #endif
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
    12ba:	f8d7 5244 	ldr.w	r5, [r7, #580]	; 0x244
    12be:	00ad      	lsls	r5, r5, #2
    12c0:	f000 8086 	beq.w	13d0 <gc_dump_alloc_table+0x128>
                }
            }
            // print header for new line of blocks
            // (the cast to uint32_t is for 16-bit ports)
            //mp_printf(&mp_plat_print, "\n%05x: ", (uint)(PTR_FROM_BLOCK(bl) & (uint32_t)0xfffff));
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
    12c4:	f8df a170 	ldr.w	sl, [pc, #368]	; 1438 <gc_dump_alloc_table+0x190>
    12c8:	f8df 9170 	ldr.w	r9, [pc, #368]	; 143c <gc_dump_alloc_table+0x194>
    12cc:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1400 <gc_dump_alloc_table+0x158>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
    12d0:	2400      	movs	r4, #0
    12d2:	e018      	b.n	1306 <gc_dump_alloc_table+0x5e>
        }
        int c = ' ';
        switch (ATB_GET_KIND(bl)) {
    12d4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
    12d8:	f813 300b 	ldrb.w	r3, [r3, fp]
    12dc:	fa43 f606 	asr.w	r6, r3, r6
    12e0:	f006 0603 	and.w	r6, r6, #3
    12e4:	2e02      	cmp	r6, #2
    12e6:	d06f      	beq.n	13c8 <gc_dump_alloc_table+0x120>
    12e8:	2e03      	cmp	r6, #3
    12ea:	d06b      	beq.n	13c4 <gc_dump_alloc_table+0x11c>
    12ec:	2e01      	cmp	r6, #1
    12ee:	d044      	beq.n	137a <gc_dump_alloc_table+0xd2>
            case AT_FREE: c = '.'; break;
    12f0:	222e      	movs	r2, #46	; 0x2e
                break;
            }
            case AT_TAIL: c = '='; break;
            case AT_MARK: c = 'm'; break;
        }
        mp_printf(&mp_plat_print, "%c", c);
    12f2:	4944      	ldr	r1, [pc, #272]	; (1404 <gc_dump_alloc_table+0x15c>)
    12f4:	4640      	mov	r0, r8
    12f6:	f000 feb9 	bl	206c <mp_printf>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
    12fa:	f8d7 5244 	ldr.w	r5, [r7, #580]	; 0x244
    12fe:	3401      	adds	r4, #1
    1300:	00ad      	lsls	r5, r5, #2
    1302:	42a5      	cmp	r5, r4
    1304:	d964      	bls.n	13d0 <gc_dump_alloc_table+0x128>
    1306:	f004 0603 	and.w	r6, r4, #3
        if (bl % DUMP_BYTES_PER_LINE == 0) {
    130a:	06a0      	lsls	r0, r4, #26
    130c:	ea4f 0646 	mov.w	r6, r6, lsl #1
    1310:	ea4f 0b94 	mov.w	fp, r4, lsr #2
    1314:	d1de      	bne.n	12d4 <gc_dump_alloc_table+0x2c>
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
    1316:	42ac      	cmp	r4, r5
    1318:	d228      	bcs.n	136c <gc_dump_alloc_table+0xc4>
    131a:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
    131e:	f810 300b 	ldrb.w	r3, [r0, fp]
    1322:	4133      	asrs	r3, r6
    1324:	0799      	lsls	r1, r3, #30
    1326:	d121      	bne.n	136c <gc_dump_alloc_table+0xc4>
    1328:	4623      	mov	r3, r4
    132a:	e004      	b.n	1336 <gc_dump_alloc_table+0x8e>
    132c:	5c41      	ldrb	r1, [r0, r1]
    132e:	fa41 f202 	asr.w	r2, r1, r2
    1332:	0792      	lsls	r2, r2, #30
    1334:	d14a      	bne.n	13cc <gc_dump_alloc_table+0x124>
                    bl2++;
    1336:	3301      	adds	r3, #1
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
    1338:	f003 0203 	and.w	r2, r3, #3
    133c:	42ab      	cmp	r3, r5
    133e:	ea4f 0193 	mov.w	r1, r3, lsr #2
    1342:	ea4f 0242 	mov.w	r2, r2, lsl #1
    1346:	d1f1      	bne.n	132c <gc_dump_alloc_table+0x84>
                if (bl2 - bl >= 2 * DUMP_BYTES_PER_LINE) {
    1348:	1b2a      	subs	r2, r5, r4
    134a:	2a7f      	cmp	r2, #127	; 0x7f
    134c:	d90e      	bls.n	136c <gc_dump_alloc_table+0xc4>
                    mp_printf(&mp_plat_print, "\n       (%u lines all free)", (uint)(bl2 - bl) / DUMP_BYTES_PER_LINE);
    134e:	0992      	lsrs	r2, r2, #6
    1350:	492d      	ldr	r1, [pc, #180]	; (1408 <gc_dump_alloc_table+0x160>)
    1352:	4640      	mov	r0, r8
    1354:	f000 fe8a 	bl	206c <mp_printf>
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
    1358:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
                    bl = bl2 & (~(DUMP_BYTES_PER_LINE - 1));
    135c:	f025 043f 	bic.w	r4, r5, #63	; 0x3f
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
    1360:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
    1364:	d234      	bcs.n	13d0 <gc_dump_alloc_table+0x128>
    1366:	ea4f 0b94 	mov.w	fp, r4, lsr #2
    136a:	2600      	movs	r6, #0
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
    136c:	ea0a 1204 	and.w	r2, sl, r4, lsl #4
    1370:	4649      	mov	r1, r9
    1372:	4640      	mov	r0, r8
    1374:	f000 fe7a 	bl	206c <mp_printf>
    1378:	e7ac      	b.n	12d4 <gc_dump_alloc_table+0x2c>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
    137a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
    137e:	4b23      	ldr	r3, [pc, #140]	; (140c <gc_dump_alloc_table+0x164>)
    1380:	0122      	lsls	r2, r4, #4
    1382:	588a      	ldr	r2, [r1, r2]
    1384:	429a      	cmp	r2, r3
    1386:	d029      	beq.n	13dc <gc_dump_alloc_table+0x134>
                else if (*ptr == &mp_type_list) { c = 'L'; }
    1388:	4b21      	ldr	r3, [pc, #132]	; (1410 <gc_dump_alloc_table+0x168>)
    138a:	429a      	cmp	r2, r3
    138c:	d02a      	beq.n	13e4 <gc_dump_alloc_table+0x13c>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
    138e:	4b21      	ldr	r3, [pc, #132]	; (1414 <gc_dump_alloc_table+0x16c>)
    1390:	429a      	cmp	r2, r3
    1392:	d029      	beq.n	13e8 <gc_dump_alloc_table+0x140>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
    1394:	4b20      	ldr	r3, [pc, #128]	; (1418 <gc_dump_alloc_table+0x170>)
    1396:	429a      	cmp	r2, r3
    1398:	d022      	beq.n	13e0 <gc_dump_alloc_table+0x138>
    139a:	4b20      	ldr	r3, [pc, #128]	; (141c <gc_dump_alloc_table+0x174>)
    139c:	429a      	cmp	r2, r3
    139e:	d01f      	beq.n	13e0 <gc_dump_alloc_table+0x138>
                else if (*ptr == &mp_type_bytearray) { c = 'A'; }
    13a0:	4b1f      	ldr	r3, [pc, #124]	; (1420 <gc_dump_alloc_table+0x178>)
    13a2:	429a      	cmp	r2, r3
    13a4:	d022      	beq.n	13ec <gc_dump_alloc_table+0x144>
                else if (*ptr == &mp_type_array) { c = 'A'; }
    13a6:	4b1f      	ldr	r3, [pc, #124]	; (1424 <gc_dump_alloc_table+0x17c>)
    13a8:	429a      	cmp	r2, r3
    13aa:	d01f      	beq.n	13ec <gc_dump_alloc_table+0x144>
                else if (*ptr == &mp_type_float) { c = 'F'; }
    13ac:	4b1e      	ldr	r3, [pc, #120]	; (1428 <gc_dump_alloc_table+0x180>)
    13ae:	429a      	cmp	r2, r3
    13b0:	d01e      	beq.n	13f0 <gc_dump_alloc_table+0x148>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
    13b2:	4b1e      	ldr	r3, [pc, #120]	; (142c <gc_dump_alloc_table+0x184>)
    13b4:	429a      	cmp	r2, r3
    13b6:	d01d      	beq.n	13f4 <gc_dump_alloc_table+0x14c>
                else if (*ptr == &mp_type_module) { c = 'M'; }
    13b8:	4b1d      	ldr	r3, [pc, #116]	; (1430 <gc_dump_alloc_table+0x188>)
    13ba:	429a      	cmp	r2, r3
    13bc:	bf14      	ite	ne
    13be:	2268      	movne	r2, #104	; 0x68
    13c0:	224d      	moveq	r2, #77	; 0x4d
    13c2:	e796      	b.n	12f2 <gc_dump_alloc_table+0x4a>
            case AT_MARK: c = 'm'; break;
    13c4:	226d      	movs	r2, #109	; 0x6d
    13c6:	e794      	b.n	12f2 <gc_dump_alloc_table+0x4a>
            case AT_TAIL: c = '='; break;
    13c8:	223d      	movs	r2, #61	; 0x3d
    13ca:	e792      	b.n	12f2 <gc_dump_alloc_table+0x4a>
    13cc:	461d      	mov	r5, r3
    13ce:	e7bb      	b.n	1348 <gc_dump_alloc_table+0xa0>
    }
    mp_print_str(&mp_plat_print, "\n");
    13d0:	4918      	ldr	r1, [pc, #96]	; (1434 <gc_dump_alloc_table+0x18c>)
    13d2:	480b      	ldr	r0, [pc, #44]	; (1400 <gc_dump_alloc_table+0x158>)
    GC_EXIT();
}
    13d4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mp_print_str(&mp_plat_print, "\n");
    13d8:	f000 bab1 	b.w	193e <mp_print_str>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
    13dc:	2254      	movs	r2, #84	; 0x54
    13de:	e788      	b.n	12f2 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
    13e0:	2253      	movs	r2, #83	; 0x53
    13e2:	e786      	b.n	12f2 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_list) { c = 'L'; }
    13e4:	224c      	movs	r2, #76	; 0x4c
    13e6:	e784      	b.n	12f2 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
    13e8:	2244      	movs	r2, #68	; 0x44
    13ea:	e782      	b.n	12f2 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_bytearray) { c = 'A'; }
    13ec:	2241      	movs	r2, #65	; 0x41
    13ee:	e780      	b.n	12f2 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_float) { c = 'F'; }
    13f0:	2246      	movs	r2, #70	; 0x46
    13f2:	e77e      	b.n	12f2 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
    13f4:	2242      	movs	r2, #66	; 0x42
    13f6:	e77c      	b.n	12f2 <gc_dump_alloc_table+0x4a>
    13f8:	200008a0 	.word	0x200008a0
    13fc:	00020ea8 	.word	0x00020ea8
    1400:	00023684 	.word	0x00023684
    1404:	00020ee8 	.word	0x00020ee8
    1408:	00020ec4 	.word	0x00020ec4
    140c:	00028844 	.word	0x00028844
    1410:	00027890 	.word	0x00027890
    1414:	000265d0 	.word	0x000265d0
    1418:	00028104 	.word	0x00028104
    141c:	000280c8 	.word	0x000280c8
    1420:	00025ec4 	.word	0x00025ec4
    1424:	00025e88 	.word	0x00025e88
    1428:	00026d90 	.word	0x00026d90
    142c:	00026fb4 	.word	0x00026fb4
    1430:	00027a8c 	.word	0x00027a8c
    1434:	0002aa44 	.word	0x0002aa44
    1438:	000ffff0 	.word	0x000ffff0
    143c:	00020ee0 	.word	0x00020ee0

00001440 <find_qstr>:
}

STATIC const byte *find_qstr(qstr q) {
    // search pool for this qstr
    // total_prev_len==0 in the final pool, so the loop will always terminate
    qstr_pool_t *pool = MP_STATE_VM(last_pool);
    1440:	4b05      	ldr	r3, [pc, #20]	; (1458 <find_qstr+0x18>)
    1442:	691b      	ldr	r3, [r3, #16]
    while (q < pool->total_prev_len) {
    1444:	e000      	b.n	1448 <find_qstr+0x8>
        pool = pool->prev;
    1446:	681b      	ldr	r3, [r3, #0]
    while (q < pool->total_prev_len) {
    1448:	685a      	ldr	r2, [r3, #4]
    144a:	4282      	cmp	r2, r0
    144c:	d8fb      	bhi.n	1446 <find_qstr+0x6>
    }
    return pool->qstrs[q - pool->total_prev_len];
    144e:	1a82      	subs	r2, r0, r2
    1450:	3204      	adds	r2, #4
}
    1452:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1456:	4770      	bx	lr
    1458:	200008a0 	.word	0x200008a0

0000145c <qstr_add>:

// qstr_mutex must be taken while in this function
STATIC qstr qstr_add(const byte *q_ptr) {
    145c:	b510      	push	{r4, lr}
    145e:	4604      	mov	r4, r0
    DEBUG_printf("QSTR: add hash=%d len=%d data=%.*s\n", Q_GET_HASH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_DATA(q_ptr));

    // make sure we have room in the pool for a new qstr
    if (MP_STATE_VM(last_pool)->len >= MP_STATE_VM(last_pool)->alloc) {
    1460:	4b17      	ldr	r3, [pc, #92]	; (14c0 <qstr_add+0x64>)
    1462:	691b      	ldr	r3, [r3, #16]
    1464:	68da      	ldr	r2, [r3, #12]
    1466:	6898      	ldr	r0, [r3, #8]
    1468:	4282      	cmp	r2, r0
    146a:	d20d      	bcs.n	1488 <qstr_add+0x2c>
        MP_STATE_VM(last_pool) = pool;
        DEBUG_printf("QSTR: allocate new pool of size %d\n", MP_STATE_VM(last_pool)->alloc);
    }

    // add the new qstr
    MP_STATE_VM(last_pool)->qstrs[MP_STATE_VM(last_pool)->len++] = q_ptr;
    146c:	4914      	ldr	r1, [pc, #80]	; (14c0 <qstr_add+0x64>)
    146e:	690a      	ldr	r2, [r1, #16]
    1470:	68d3      	ldr	r3, [r2, #12]
    1472:	1c58      	adds	r0, r3, #1
    1474:	60d0      	str	r0, [r2, #12]
    1476:	3304      	adds	r3, #4
    1478:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

    // return id for the newly-added qstr
    return MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len - 1;
    147c:	690b      	ldr	r3, [r1, #16]
    147e:	6858      	ldr	r0, [r3, #4]
    1480:	68db      	ldr	r3, [r3, #12]
    1482:	4418      	add	r0, r3
}
    1484:	3801      	subs	r0, #1
    1486:	bd10      	pop	{r4, pc}
        qstr_pool_t *pool = m_new_obj_var_maybe(qstr_pool_t, const char*, MP_STATE_VM(last_pool)->alloc * 2);
    1488:	3002      	adds	r0, #2
    148a:	00c0      	lsls	r0, r0, #3
    148c:	f7ff fa24 	bl	8d8 <m_malloc_maybe>
        if (pool == NULL) {
    1490:	4603      	mov	r3, r0
    1492:	b178      	cbz	r0, 14b4 <qstr_add+0x58>
        pool->prev = MP_STATE_VM(last_pool);
    1494:	4a0a      	ldr	r2, [pc, #40]	; (14c0 <qstr_add+0x64>)
    1496:	6911      	ldr	r1, [r2, #16]
    1498:	6001      	str	r1, [r0, #0]
        pool->total_prev_len = MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len;
    149a:	6910      	ldr	r0, [r2, #16]
    149c:	6841      	ldr	r1, [r0, #4]
    149e:	68c0      	ldr	r0, [r0, #12]
    14a0:	4401      	add	r1, r0
    14a2:	6059      	str	r1, [r3, #4]
        pool->alloc = MP_STATE_VM(last_pool)->alloc * 2;
    14a4:	6911      	ldr	r1, [r2, #16]
    14a6:	6889      	ldr	r1, [r1, #8]
    14a8:	0049      	lsls	r1, r1, #1
    14aa:	6099      	str	r1, [r3, #8]
        pool->len = 0;
    14ac:	2100      	movs	r1, #0
    14ae:	60d9      	str	r1, [r3, #12]
        MP_STATE_VM(last_pool) = pool;
    14b0:	6113      	str	r3, [r2, #16]
    14b2:	e7db      	b.n	146c <qstr_add+0x10>
            m_malloc_fail(MP_STATE_VM(last_pool)->alloc * 2);
    14b4:	4b02      	ldr	r3, [pc, #8]	; (14c0 <qstr_add+0x64>)
    14b6:	691b      	ldr	r3, [r3, #16]
    14b8:	6898      	ldr	r0, [r3, #8]
    14ba:	0040      	lsls	r0, r0, #1
    14bc:	f008 fede 	bl	a27c <m_malloc_fail>
    14c0:	200008a0 	.word	0x200008a0

000014c4 <qstr_compute_hash>:
    for (const byte *top = data + len; data < top; data++) {
    14c4:	4401      	add	r1, r0
    mp_uint_t hash = 5381;
    14c6:	f241 5305 	movw	r3, #5381	; 0x1505
    for (const byte *top = data + len; data < top; data++) {
    14ca:	e004      	b.n	14d6 <qstr_compute_hash+0x12>
        hash = ((hash << 5) + hash) ^ (*data); // hash * 33 ^ data
    14cc:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    14d0:	f810 2b01 	ldrb.w	r2, [r0], #1
    14d4:	4053      	eors	r3, r2
    for (const byte *top = data + len; data < top; data++) {
    14d6:	4288      	cmp	r0, r1
    14d8:	d3f8      	bcc.n	14cc <qstr_compute_hash+0x8>
    if (hash == 0) {
    14da:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
    14de:	d100      	bne.n	14e2 <qstr_compute_hash+0x1e>
        hash++;
    14e0:	3001      	adds	r0, #1
}
    14e2:	4770      	bx	lr

000014e4 <qstr_init>:
    MP_STATE_VM(last_pool) = (qstr_pool_t*)&CONST_POOL; // we won't modify the const_pool since it has no allocated room left
    14e4:	4b03      	ldr	r3, [pc, #12]	; (14f4 <qstr_init+0x10>)
    14e6:	4a04      	ldr	r2, [pc, #16]	; (14f8 <qstr_init+0x14>)
    14e8:	611a      	str	r2, [r3, #16]
    MP_STATE_VM(qstr_last_chunk) = NULL;
    14ea:	2200      	movs	r2, #0
    14ec:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
}
    14f0:	4770      	bx	lr
    14f2:	bf00      	nop
    14f4:	200008a0 	.word	0x200008a0
    14f8:	00020fc4 	.word	0x00020fc4

000014fc <qstr_find_strn>:

qstr qstr_find_strn(const char *str, size_t str_len) {
    14fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1500:	4682      	mov	sl, r0
    1502:	460f      	mov	r7, r1
    // work out hash of str
    mp_uint_t str_hash = qstr_compute_hash((const byte*)str, str_len);
    1504:	f7ff ffde 	bl	14c4 <qstr_compute_hash>
    1508:	4606      	mov	r6, r0

    // search pools for the data
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    150a:	4b16      	ldr	r3, [pc, #88]	; (1564 <qstr_find_strn+0x68>)
    150c:	f8d3 8010 	ldr.w	r8, [r3, #16]
    1510:	e01a      	b.n	1548 <qstr_find_strn+0x4c>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1512:	3404      	adds	r4, #4
    1514:	42ac      	cmp	r4, r5
    1516:	d215      	bcs.n	1544 <qstr_find_strn+0x48>
            if (Q_GET_HASH(*q) == str_hash && Q_GET_LENGTH(*q) == str_len && memcmp(Q_GET_DATA(*q), str, str_len) == 0) {
    1518:	6820      	ldr	r0, [r4, #0]
    151a:	7803      	ldrb	r3, [r0, #0]
    151c:	42b3      	cmp	r3, r6
    151e:	d1f8      	bne.n	1512 <qstr_find_strn+0x16>
    1520:	7843      	ldrb	r3, [r0, #1]
    1522:	42bb      	cmp	r3, r7
    1524:	d1f5      	bne.n	1512 <qstr_find_strn+0x16>
    1526:	463a      	mov	r2, r7
    1528:	4651      	mov	r1, sl
    152a:	3002      	adds	r0, #2
    152c:	f01a f9d8 	bl	1b8e0 <memcmp>
    1530:	2800      	cmp	r0, #0
    1532:	d1ee      	bne.n	1512 <qstr_find_strn+0x16>
                return pool->total_prev_len + (q - pool->qstrs);
    1534:	f8d8 0004 	ldr.w	r0, [r8, #4]
    1538:	eba4 0409 	sub.w	r4, r4, r9
    153c:	eb00 00a4 	add.w	r0, r0, r4, asr #2
        }
    }

    // not found; return null qstr
    return 0;
}
    1540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    1544:	f8d8 8000 	ldr.w	r8, [r8]
    1548:	f1b8 0f00 	cmp.w	r8, #0
    154c:	d007      	beq.n	155e <qstr_find_strn+0x62>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    154e:	f108 0910 	add.w	r9, r8, #16
    1552:	f8d8 500c 	ldr.w	r5, [r8, #12]
    1556:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    155a:	464c      	mov	r4, r9
    155c:	e7da      	b.n	1514 <qstr_find_strn+0x18>
    return 0;
    155e:	2000      	movs	r0, #0
    1560:	e7ee      	b.n	1540 <qstr_find_strn+0x44>
    1562:	bf00      	nop
    1564:	200008a0 	.word	0x200008a0

00001568 <qstr_from_strn>:

qstr qstr_from_str(const char *str) {
    return qstr_from_strn(str, strlen(str));
}

qstr qstr_from_strn(const char *str, size_t len) {
    1568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    156c:	29ff      	cmp	r1, #255	; 0xff
    156e:	d837      	bhi.n	15e0 <qstr_from_strn+0x78>
    1570:	4606      	mov	r6, r0
    1572:	460c      	mov	r4, r1
    QSTR_ENTER();
    qstr q = qstr_find_strn(str, len);
    1574:	f7ff ffc2 	bl	14fc <qstr_find_strn>
    if (q == 0) {
    1578:	4603      	mov	r3, r0
    157a:	bb70      	cbnz	r0, 15da <qstr_from_strn+0x72>
        // qstr does not exist in interned pool so need to add it

        // compute number of bytes needed to intern this string
        size_t n_bytes = MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len + 1;
    157c:	1ce5      	adds	r5, r4, #3

        if (MP_STATE_VM(qstr_last_chunk) != NULL && MP_STATE_VM(qstr_last_used) + n_bytes > MP_STATE_VM(qstr_last_alloc)) {
    157e:	4b37      	ldr	r3, [pc, #220]	; (165c <qstr_from_strn+0xf4>)
    1580:	f8d3 0230 	ldr.w	r0, [r3, #560]	; 0x230
    1584:	b138      	cbz	r0, 1596 <qstr_from_strn+0x2e>
    1586:	461a      	mov	r2, r3
    1588:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
    158c:	442b      	add	r3, r5
    158e:	f8d2 1234 	ldr.w	r1, [r2, #564]	; 0x234
    1592:	428b      	cmp	r3, r1
    1594:	d82a      	bhi.n	15ec <qstr_from_strn+0x84>
                // could grow existing memory
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
            }
        }

        if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1596:	4b31      	ldr	r3, [pc, #196]	; (165c <qstr_from_strn+0xf4>)
    1598:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
    159c:	2b00      	cmp	r3, #0
    159e:	d03d      	beq.n	161c <qstr_from_strn+0xb4>
            MP_STATE_VM(qstr_last_alloc) = al;
            MP_STATE_VM(qstr_last_used) = 0;
        }

        // allocate memory from the chunk for this new interned string's data
        byte *q_ptr = MP_STATE_VM(qstr_last_chunk) + MP_STATE_VM(qstr_last_used);
    15a0:	4b2e      	ldr	r3, [pc, #184]	; (165c <qstr_from_strn+0xf4>)
    15a2:	f8d3 9230 	ldr.w	r9, [r3, #560]	; 0x230
    15a6:	f8d3 8238 	ldr.w	r8, [r3, #568]	; 0x238
    15aa:	eb09 0708 	add.w	r7, r9, r8
        MP_STATE_VM(qstr_last_used) += n_bytes;
    15ae:	4445      	add	r5, r8
    15b0:	f8c3 5238 	str.w	r5, [r3, #568]	; 0x238

        // store the interned strings' data
        mp_uint_t hash = qstr_compute_hash((const byte*)str, len);
    15b4:	4621      	mov	r1, r4
    15b6:	4630      	mov	r0, r6
    15b8:	f7ff ff84 	bl	14c4 <qstr_compute_hash>
        Q_SET_HASH(q_ptr, hash);
    15bc:	f809 0008 	strb.w	r0, [r9, r8]
        Q_SET_LENGTH(q_ptr, len);
    15c0:	707c      	strb	r4, [r7, #1]
        memcpy(q_ptr + MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN, str, len);
    15c2:	4622      	mov	r2, r4
    15c4:	4631      	mov	r1, r6
    15c6:	1cb8      	adds	r0, r7, #2
    15c8:	f01a f914 	bl	1b7f4 <memcpy>
        q_ptr[MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len] = '\0';
    15cc:	3402      	adds	r4, #2
    15ce:	2300      	movs	r3, #0
    15d0:	553b      	strb	r3, [r7, r4]
        q = qstr_add(q_ptr);
    15d2:	4638      	mov	r0, r7
    15d4:	f7ff ff42 	bl	145c <qstr_add>
    15d8:	4603      	mov	r3, r0
    }
    QSTR_EXIT();
    return q;
}
    15da:	4618      	mov	r0, r3
    15dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    15e0:	4b1f      	ldr	r3, [pc, #124]	; (1660 <qstr_from_strn+0xf8>)
    15e2:	4a20      	ldr	r2, [pc, #128]	; (1664 <qstr_from_strn+0xfc>)
    15e4:	21ba      	movs	r1, #186	; 0xba
    15e6:	4820      	ldr	r0, [pc, #128]	; (1668 <qstr_from_strn+0x100>)
    15e8:	f016 ffb8 	bl	1855c <__assert_func>
            byte *new_p = m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_alloc) + n_bytes, false);
    15ec:	2200      	movs	r2, #0
    15ee:	4429      	add	r1, r5
    15f0:	f7ff f989 	bl	906 <m_realloc_maybe>
            if (new_p == NULL) {
    15f4:	b130      	cbz	r0, 1604 <qstr_from_strn+0x9c>
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
    15f6:	4a19      	ldr	r2, [pc, #100]	; (165c <qstr_from_strn+0xf4>)
    15f8:	f8d2 3234 	ldr.w	r3, [r2, #564]	; 0x234
    15fc:	442b      	add	r3, r5
    15fe:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
    1602:	e7c8      	b.n	1596 <qstr_from_strn+0x2e>
                (void)m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_used), false);
    1604:	4f15      	ldr	r7, [pc, #84]	; (165c <qstr_from_strn+0xf4>)
    1606:	2200      	movs	r2, #0
    1608:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
    160c:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
    1610:	f7ff f979 	bl	906 <m_realloc_maybe>
                MP_STATE_VM(qstr_last_chunk) = NULL;
    1614:	2300      	movs	r3, #0
    1616:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    161a:	e7bc      	b.n	1596 <qstr_from_strn+0x2e>
            if (al < MICROPY_ALLOC_QSTR_CHUNK_INIT) {
    161c:	2d7f      	cmp	r5, #127	; 0x7f
    161e:	d90e      	bls.n	163e <qstr_from_strn+0xd6>
            size_t al = n_bytes;
    1620:	462f      	mov	r7, r5
            MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, al);
    1622:	4638      	mov	r0, r7
    1624:	f7ff f958 	bl	8d8 <m_malloc_maybe>
    1628:	4b0c      	ldr	r3, [pc, #48]	; (165c <qstr_from_strn+0xf4>)
    162a:	f8c3 0230 	str.w	r0, [r3, #560]	; 0x230
            if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    162e:	b140      	cbz	r0, 1642 <qstr_from_strn+0xda>
            MP_STATE_VM(qstr_last_alloc) = al;
    1630:	4b0a      	ldr	r3, [pc, #40]	; (165c <qstr_from_strn+0xf4>)
    1632:	f8c3 7234 	str.w	r7, [r3, #564]	; 0x234
            MP_STATE_VM(qstr_last_used) = 0;
    1636:	2200      	movs	r2, #0
    1638:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
    163c:	e7b0      	b.n	15a0 <qstr_from_strn+0x38>
                al = MICROPY_ALLOC_QSTR_CHUNK_INIT;
    163e:	2780      	movs	r7, #128	; 0x80
    1640:	e7ef      	b.n	1622 <qstr_from_strn+0xba>
                MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, n_bytes);
    1642:	4628      	mov	r0, r5
    1644:	f7ff f948 	bl	8d8 <m_malloc_maybe>
    1648:	4b04      	ldr	r3, [pc, #16]	; (165c <qstr_from_strn+0xf4>)
    164a:	f8c3 0230 	str.w	r0, [r3, #560]	; 0x230
                if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    164e:	b108      	cbz	r0, 1654 <qstr_from_strn+0xec>
                al = n_bytes;
    1650:	462f      	mov	r7, r5
    1652:	e7ed      	b.n	1630 <qstr_from_strn+0xc8>
                    m_malloc_fail(n_bytes);
    1654:	4628      	mov	r0, r5
    1656:	f008 fe11 	bl	a27c <m_malloc_fail>
    165a:	bf00      	nop
    165c:	200008a0 	.word	0x200008a0
    1660:	000219d4 	.word	0x000219d4
    1664:	00020fb4 	.word	0x00020fb4
    1668:	00021a04 	.word	0x00021a04

0000166c <qstr_from_str>:
qstr qstr_from_str(const char *str) {
    166c:	b510      	push	{r4, lr}
    166e:	4604      	mov	r4, r0
    return qstr_from_strn(str, strlen(str));
    1670:	f01a f958 	bl	1b924 <strlen>
    1674:	4601      	mov	r1, r0
    1676:	4620      	mov	r0, r4
    1678:	f7ff ff76 	bl	1568 <qstr_from_strn>
}
    167c:	bd10      	pop	{r4, pc}

0000167e <qstr_hash>:

mp_uint_t qstr_hash(qstr q) {
    167e:	b508      	push	{r3, lr}
    return Q_GET_HASH(find_qstr(q));
    1680:	f7ff fede 	bl	1440 <find_qstr>
}
    1684:	7800      	ldrb	r0, [r0, #0]
    1686:	bd08      	pop	{r3, pc}

00001688 <qstr_len>:

size_t qstr_len(qstr q) {
    1688:	b508      	push	{r3, lr}
    const byte *qd = find_qstr(q);
    168a:	f7ff fed9 	bl	1440 <find_qstr>
    return Q_GET_LENGTH(qd);
}
    168e:	7840      	ldrb	r0, [r0, #1]
    1690:	bd08      	pop	{r3, pc}

00001692 <qstr_str>:

const char *qstr_str(qstr q) {
    1692:	b508      	push	{r3, lr}
    const byte *qd = find_qstr(q);
    1694:	f7ff fed4 	bl	1440 <find_qstr>
    return (const char*)Q_GET_DATA(qd);
}
    1698:	3002      	adds	r0, #2
    169a:	bd08      	pop	{r3, pc}

0000169c <qstr_data>:

const byte *qstr_data(qstr q, size_t *len) {
    169c:	b510      	push	{r4, lr}
    169e:	460c      	mov	r4, r1
    const byte *qd = find_qstr(q);
    16a0:	f7ff fece 	bl	1440 <find_qstr>
    *len = Q_GET_LENGTH(qd);
    16a4:	7843      	ldrb	r3, [r0, #1]
    16a6:	6023      	str	r3, [r4, #0]
    return Q_GET_DATA(qd);
}
    16a8:	3002      	adds	r0, #2
    16aa:	bd10      	pop	{r4, pc}

000016ac <qstr_pool_info>:

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes) {
    16ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16b0:	4680      	mov	r8, r0
    16b2:	460f      	mov	r7, r1
    16b4:	4614      	mov	r4, r2
    16b6:	461e      	mov	r6, r3
    QSTR_ENTER();
    *n_pool = 0;
    16b8:	2300      	movs	r3, #0
    16ba:	6003      	str	r3, [r0, #0]
    *n_qstr = 0;
    16bc:	600b      	str	r3, [r1, #0]
    *n_str_data_bytes = 0;
    16be:	6013      	str	r3, [r2, #0]
    *n_total_bytes = 0;
    16c0:	6033      	str	r3, [r6, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    16c2:	4b16      	ldr	r3, [pc, #88]	; (171c <qstr_pool_info+0x70>)
    16c4:	691d      	ldr	r5, [r3, #16]
    16c6:	e00f      	b.n	16e8 <qstr_pool_info+0x3c>
        *n_pool += 1;
        *n_qstr += pool->len;
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
            *n_str_data_bytes += Q_GET_ALLOC(*q);
    16c8:	f852 3b04 	ldr.w	r3, [r2], #4
    16cc:	785b      	ldrb	r3, [r3, #1]
    16ce:	6821      	ldr	r1, [r4, #0]
    16d0:	440b      	add	r3, r1
    16d2:	3303      	adds	r3, #3
    16d4:	6023      	str	r3, [r4, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    16d6:	4282      	cmp	r2, r0
    16d8:	d3f6      	bcc.n	16c8 <qstr_pool_info+0x1c>
        }
        #if MICROPY_ENABLE_GC
        *n_total_bytes += gc_nbytes(pool); // this counts actual bytes used in heap
    16da:	4628      	mov	r0, r5
    16dc:	f7ff fc30 	bl	f40 <gc_nbytes>
    16e0:	6833      	ldr	r3, [r6, #0]
    16e2:	4418      	add	r0, r3
    16e4:	6030      	str	r0, [r6, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    16e6:	682d      	ldr	r5, [r5, #0]
    16e8:	b18d      	cbz	r5, 170e <qstr_pool_info+0x62>
    16ea:	4b0d      	ldr	r3, [pc, #52]	; (1720 <qstr_pool_info+0x74>)
    16ec:	429d      	cmp	r5, r3
    16ee:	d00e      	beq.n	170e <qstr_pool_info+0x62>
        *n_pool += 1;
    16f0:	f8d8 3000 	ldr.w	r3, [r8]
    16f4:	3301      	adds	r3, #1
    16f6:	f8c8 3000 	str.w	r3, [r8]
        *n_qstr += pool->len;
    16fa:	68ea      	ldr	r2, [r5, #12]
    16fc:	683b      	ldr	r3, [r7, #0]
    16fe:	4413      	add	r3, r2
    1700:	603b      	str	r3, [r7, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1702:	f105 0210 	add.w	r2, r5, #16
    1706:	68e8      	ldr	r0, [r5, #12]
    1708:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    170c:	e7e3      	b.n	16d6 <qstr_pool_info+0x2a>
        #else
        *n_total_bytes += sizeof(qstr_pool_t) + sizeof(qstr) * pool->alloc;
        #endif
    }
    *n_total_bytes += *n_str_data_bytes;
    170e:	6822      	ldr	r2, [r4, #0]
    1710:	6833      	ldr	r3, [r6, #0]
    1712:	4413      	add	r3, r2
    1714:	6033      	str	r3, [r6, #0]
    QSTR_EXIT();
}
    1716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    171a:	bf00      	nop
    171c:	200008a0 	.word	0x200008a0
    1720:	00020fc4 	.word	0x00020fc4

00001724 <vstr_ensure_extra>:
    vstr->alloc += size;
    vstr->buf = new_buf;
    return p;
}

STATIC void vstr_ensure_extra(vstr_t *vstr, size_t size) {
    1724:	b538      	push	{r3, r4, r5, lr}
    if (vstr->len + size > vstr->alloc) {
    1726:	6843      	ldr	r3, [r0, #4]
    1728:	4419      	add	r1, r3
    172a:	6803      	ldr	r3, [r0, #0]
    172c:	4299      	cmp	r1, r3
    172e:	d90f      	bls.n	1750 <vstr_ensure_extra+0x2c>
    1730:	4605      	mov	r5, r0
        if (vstr->fixed_buf) {
    1732:	7b03      	ldrb	r3, [r0, #12]
    1734:	f013 0f01 	tst.w	r3, #1
    1738:	d10b      	bne.n	1752 <vstr_ensure_extra+0x2e>
            // We can't reallocate, and the caller is expecting the space to
            // be there, so the only safe option is to raise an exception.
            mp_raise_msg(&mp_type_RuntimeError, NULL);
        }
        size_t new_alloc = ROUND_ALLOC((vstr->len + size) + 16);
    173a:	f101 0410 	add.w	r4, r1, #16
    173e:	f024 0407 	bic.w	r4, r4, #7
    1742:	3408      	adds	r4, #8
        char *new_buf = m_renew(char, vstr->buf, vstr->alloc, new_alloc);
    1744:	4621      	mov	r1, r4
    1746:	6880      	ldr	r0, [r0, #8]
    1748:	f7ff f8cf 	bl	8ea <m_realloc>
        vstr->alloc = new_alloc;
    174c:	602c      	str	r4, [r5, #0]
        vstr->buf = new_buf;
    174e:	60a8      	str	r0, [r5, #8]
    }
}
    1750:	bd38      	pop	{r3, r4, r5, pc}
            mp_raise_msg(&mp_type_RuntimeError, NULL);
    1752:	2100      	movs	r1, #0
    1754:	4801      	ldr	r0, [pc, #4]	; (175c <vstr_ensure_extra+0x38>)
    1756:	f008 fd87 	bl	a268 <mp_raise_msg>
    175a:	bf00      	nop
    175c:	00026b94 	.word	0x00026b94

00001760 <vstr_add_strn>:

void vstr_add_str(vstr_t *vstr, const char *str) {
    vstr_add_strn(vstr, str, strlen(str));
}

void vstr_add_strn(vstr_t *vstr, const char *str, size_t len) {
    1760:	b570      	push	{r4, r5, r6, lr}
    1762:	4604      	mov	r4, r0
    1764:	460e      	mov	r6, r1
    1766:	4615      	mov	r5, r2
    vstr_ensure_extra(vstr, len);
    1768:	4611      	mov	r1, r2
    176a:	f7ff ffdb 	bl	1724 <vstr_ensure_extra>
    memmove(vstr->buf + vstr->len, str, len);
    176e:	68a0      	ldr	r0, [r4, #8]
    1770:	6863      	ldr	r3, [r4, #4]
    1772:	462a      	mov	r2, r5
    1774:	4631      	mov	r1, r6
    1776:	4418      	add	r0, r3
    1778:	f01a f868 	bl	1b84c <memmove>
    vstr->len += len;
    177c:	6862      	ldr	r2, [r4, #4]
    177e:	442a      	add	r2, r5
    1780:	6062      	str	r2, [r4, #4]
}
    1782:	bd70      	pop	{r4, r5, r6, pc}

00001784 <vstr_ins_blank_bytes>:

STATIC char *vstr_ins_blank_bytes(vstr_t *vstr, size_t byte_pos, size_t byte_len) {
    1784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1786:	4605      	mov	r5, r0
    1788:	460c      	mov	r4, r1
    178a:	4616      	mov	r6, r2
    size_t l = vstr->len;
    178c:	6847      	ldr	r7, [r0, #4]
    if (byte_pos > l) {
    178e:	428f      	cmp	r7, r1
    1790:	d200      	bcs.n	1794 <vstr_ins_blank_bytes+0x10>
        byte_pos = l;
    1792:	463c      	mov	r4, r7
    }
    if (byte_len > 0) {
    1794:	b916      	cbnz	r6, 179c <vstr_ins_blank_bytes+0x18>
        // copy up the string to make room for the new bytes
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
        // increase the length
        vstr->len += byte_len;
    }
    return vstr->buf + byte_pos;
    1796:	68a8      	ldr	r0, [r5, #8]
}
    1798:	4420      	add	r0, r4
    179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        vstr_ensure_extra(vstr, byte_len);
    179c:	4631      	mov	r1, r6
    179e:	4628      	mov	r0, r5
    17a0:	f7ff ffc0 	bl	1724 <vstr_ensure_extra>
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
    17a4:	68ab      	ldr	r3, [r5, #8]
    17a6:	19a0      	adds	r0, r4, r6
    17a8:	1b3a      	subs	r2, r7, r4
    17aa:	1919      	adds	r1, r3, r4
    17ac:	4418      	add	r0, r3
    17ae:	f01a f84d 	bl	1b84c <memmove>
        vstr->len += byte_len;
    17b2:	686b      	ldr	r3, [r5, #4]
    17b4:	441e      	add	r6, r3
    17b6:	606e      	str	r6, [r5, #4]
    17b8:	e7ed      	b.n	1796 <vstr_ins_blank_bytes+0x12>

000017ba <vstr_init>:
void vstr_init(vstr_t *vstr, size_t alloc) {
    17ba:	b538      	push	{r3, r4, r5, lr}
    17bc:	4604      	mov	r4, r0
    if (alloc < 1) {
    17be:	4608      	mov	r0, r1
    17c0:	b901      	cbnz	r1, 17c4 <vstr_init+0xa>
        alloc = 1;
    17c2:	2001      	movs	r0, #1
    vstr->alloc = alloc;
    17c4:	6020      	str	r0, [r4, #0]
    vstr->len = 0;
    17c6:	2500      	movs	r5, #0
    17c8:	6065      	str	r5, [r4, #4]
    vstr->buf = m_new(char, vstr->alloc);
    17ca:	f7ff f877 	bl	8bc <m_malloc>
    17ce:	60a0      	str	r0, [r4, #8]
    vstr->fixed_buf = false;
    17d0:	7b23      	ldrb	r3, [r4, #12]
    17d2:	f365 0300 	bfi	r3, r5, #0, #1
    17d6:	7323      	strb	r3, [r4, #12]
}
    17d8:	bd38      	pop	{r3, r4, r5, pc}

000017da <vstr_init_len>:
void vstr_init_len(vstr_t *vstr, size_t len) {
    17da:	b538      	push	{r3, r4, r5, lr}
    17dc:	4605      	mov	r5, r0
    17de:	460c      	mov	r4, r1
    vstr_init(vstr, len + 1);
    17e0:	3101      	adds	r1, #1
    17e2:	f7ff ffea 	bl	17ba <vstr_init>
    vstr->len = len;
    17e6:	606c      	str	r4, [r5, #4]
}
    17e8:	bd38      	pop	{r3, r4, r5, pc}

000017ea <vstr_init_fixed_buf>:
    vstr->alloc = alloc;
    17ea:	6001      	str	r1, [r0, #0]
    vstr->len = 0;
    17ec:	2300      	movs	r3, #0
    17ee:	6043      	str	r3, [r0, #4]
    vstr->buf = buf;
    17f0:	6082      	str	r2, [r0, #8]
    vstr->fixed_buf = true;
    17f2:	7b03      	ldrb	r3, [r0, #12]
    17f4:	f043 0301 	orr.w	r3, r3, #1
    17f8:	7303      	strb	r3, [r0, #12]
}
    17fa:	4770      	bx	lr

000017fc <vstr_init_print>:
void vstr_init_print(vstr_t *vstr, size_t alloc, mp_print_t *print) {
    17fc:	b538      	push	{r3, r4, r5, lr}
    17fe:	4605      	mov	r5, r0
    1800:	4614      	mov	r4, r2
    vstr_init(vstr, alloc);
    1802:	f7ff ffda 	bl	17ba <vstr_init>
    print->data = vstr;
    1806:	6025      	str	r5, [r4, #0]
    print->print_strn = (mp_print_strn_t)vstr_add_strn;
    1808:	4b01      	ldr	r3, [pc, #4]	; (1810 <vstr_init_print+0x14>)
    180a:	6063      	str	r3, [r4, #4]
}
    180c:	bd38      	pop	{r3, r4, r5, pc}
    180e:	bf00      	nop
    1810:	00001761 	.word	0x00001761

00001814 <vstr_clear>:
void vstr_clear(vstr_t *vstr) {
    1814:	b510      	push	{r4, lr}
    1816:	4604      	mov	r4, r0
    if (!vstr->fixed_buf) {
    1818:	7b03      	ldrb	r3, [r0, #12]
    181a:	f013 0f01 	tst.w	r3, #1
    181e:	d002      	beq.n	1826 <vstr_clear+0x12>
    vstr->buf = NULL;
    1820:	2300      	movs	r3, #0
    1822:	60a3      	str	r3, [r4, #8]
}
    1824:	bd10      	pop	{r4, pc}
        m_del(char, vstr->buf, vstr->alloc);
    1826:	6880      	ldr	r0, [r0, #8]
    1828:	f7ff f871 	bl	90e <m_free>
    182c:	e7f8      	b.n	1820 <vstr_clear+0xc>

0000182e <vstr_new>:
vstr_t *vstr_new(size_t alloc) {
    182e:	b538      	push	{r3, r4, r5, lr}
    1830:	4605      	mov	r5, r0
    vstr_t *vstr = m_new_obj(vstr_t);
    1832:	2010      	movs	r0, #16
    1834:	f7ff f842 	bl	8bc <m_malloc>
    1838:	4604      	mov	r4, r0
    vstr_init(vstr, alloc);
    183a:	4629      	mov	r1, r5
    183c:	f7ff ffbd 	bl	17ba <vstr_init>
}
    1840:	4620      	mov	r0, r4
    1842:	bd38      	pop	{r3, r4, r5, pc}

00001844 <vstr_extend>:
char *vstr_extend(vstr_t *vstr, size_t size) {
    1844:	b538      	push	{r3, r4, r5, lr}
    if (vstr->fixed_buf) {
    1846:	7b03      	ldrb	r3, [r0, #12]
    1848:	f013 0f01 	tst.w	r3, #1
    184c:	d10c      	bne.n	1868 <vstr_extend+0x24>
    184e:	4604      	mov	r4, r0
    1850:	460d      	mov	r5, r1
    char *new_buf = m_renew(char, vstr->buf, vstr->alloc, vstr->alloc + size);
    1852:	6801      	ldr	r1, [r0, #0]
    1854:	4429      	add	r1, r5
    1856:	6880      	ldr	r0, [r0, #8]
    1858:	f7ff f847 	bl	8ea <m_realloc>
    char *p = new_buf + vstr->alloc;
    185c:	6823      	ldr	r3, [r4, #0]
    vstr->alloc += size;
    185e:	441d      	add	r5, r3
    1860:	6025      	str	r5, [r4, #0]
    vstr->buf = new_buf;
    1862:	60a0      	str	r0, [r4, #8]
}
    1864:	4418      	add	r0, r3
    1866:	bd38      	pop	{r3, r4, r5, pc}
        mp_raise_msg(&mp_type_RuntimeError, NULL);
    1868:	2100      	movs	r1, #0
    186a:	4801      	ldr	r0, [pc, #4]	; (1870 <vstr_extend+0x2c>)
    186c:	f008 fcfc 	bl	a268 <mp_raise_msg>
    1870:	00026b94 	.word	0x00026b94

00001874 <vstr_add_len>:
char *vstr_add_len(vstr_t *vstr, size_t len) {
    1874:	b538      	push	{r3, r4, r5, lr}
    1876:	4604      	mov	r4, r0
    1878:	460d      	mov	r5, r1
    vstr_ensure_extra(vstr, len);
    187a:	f7ff ff53 	bl	1724 <vstr_ensure_extra>
    char *buf = vstr->buf + vstr->len;
    187e:	68a0      	ldr	r0, [r4, #8]
    1880:	6863      	ldr	r3, [r4, #4]
    vstr->len += len;
    1882:	441d      	add	r5, r3
    1884:	6065      	str	r5, [r4, #4]
}
    1886:	4418      	add	r0, r3
    1888:	bd38      	pop	{r3, r4, r5, pc}

0000188a <vstr_null_terminated_str>:
char *vstr_null_terminated_str(vstr_t *vstr) {
    188a:	b510      	push	{r4, lr}
    188c:	4604      	mov	r4, r0
    if (vstr->alloc == vstr->len) {
    188e:	6802      	ldr	r2, [r0, #0]
    1890:	6843      	ldr	r3, [r0, #4]
    1892:	429a      	cmp	r2, r3
    1894:	d005      	beq.n	18a2 <vstr_null_terminated_str+0x18>
    vstr->buf[vstr->len] = '\0';
    1896:	68a2      	ldr	r2, [r4, #8]
    1898:	6863      	ldr	r3, [r4, #4]
    189a:	2100      	movs	r1, #0
    189c:	54d1      	strb	r1, [r2, r3]
}
    189e:	68a0      	ldr	r0, [r4, #8]
    18a0:	bd10      	pop	{r4, pc}
        vstr_extend(vstr, 1);
    18a2:	2101      	movs	r1, #1
    18a4:	f7ff ffce 	bl	1844 <vstr_extend>
    18a8:	e7f5      	b.n	1896 <vstr_null_terminated_str+0xc>

000018aa <vstr_add_byte>:
void vstr_add_byte(vstr_t *vstr, byte b) {
    18aa:	b510      	push	{r4, lr}
    18ac:	460c      	mov	r4, r1
    byte *buf = (byte*)vstr_add_len(vstr, 1);
    18ae:	2101      	movs	r1, #1
    18b0:	f7ff ffe0 	bl	1874 <vstr_add_len>
    buf[0] = b;
    18b4:	7004      	strb	r4, [r0, #0]
}
    18b6:	bd10      	pop	{r4, pc}

000018b8 <vstr_add_char>:
void vstr_add_char(vstr_t *vstr, unichar c) {
    18b8:	b508      	push	{r3, lr}
    vstr_add_byte(vstr, c);
    18ba:	b2c9      	uxtb	r1, r1
    18bc:	f7ff fff5 	bl	18aa <vstr_add_byte>
}
    18c0:	bd08      	pop	{r3, pc}

000018c2 <vstr_add_str>:
void vstr_add_str(vstr_t *vstr, const char *str) {
    18c2:	b538      	push	{r3, r4, r5, lr}
    18c4:	4605      	mov	r5, r0
    18c6:	460c      	mov	r4, r1
    vstr_add_strn(vstr, str, strlen(str));
    18c8:	4608      	mov	r0, r1
    18ca:	f01a f82b 	bl	1b924 <strlen>
    18ce:	4602      	mov	r2, r0
    18d0:	4621      	mov	r1, r4
    18d2:	4628      	mov	r0, r5
    18d4:	f7ff ff44 	bl	1760 <vstr_add_strn>
}
    18d8:	bd38      	pop	{r3, r4, r5, pc}

000018da <vstr_ins_byte>:

void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b) {
    18da:	b510      	push	{r4, lr}
    18dc:	4614      	mov	r4, r2
    char *s = vstr_ins_blank_bytes(vstr, byte_pos, 1);
    18de:	2201      	movs	r2, #1
    18e0:	f7ff ff50 	bl	1784 <vstr_ins_blank_bytes>
    *s = b;
    18e4:	7004      	strb	r4, [r0, #0]
}
    18e6:	bd10      	pop	{r4, pc}

000018e8 <vstr_ins_char>:

void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr) {
    18e8:	b510      	push	{r4, lr}
    18ea:	4614      	mov	r4, r2
    // TODO UNICODE
    char *s = vstr_ins_blank_bytes(vstr, char_pos, 1);
    18ec:	2201      	movs	r2, #1
    18ee:	f7ff ff49 	bl	1784 <vstr_ins_blank_bytes>
    *s = chr;
    18f2:	7004      	strb	r4, [r0, #0]
}
    18f4:	bd10      	pop	{r4, pc}

000018f6 <vstr_cut_tail_bytes>:
void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut) {
    vstr_cut_out_bytes(vstr, 0, bytes_to_cut);
}

void vstr_cut_tail_bytes(vstr_t *vstr, size_t len) {
    if (len > vstr->len) {
    18f6:	6843      	ldr	r3, [r0, #4]
    18f8:	428b      	cmp	r3, r1
    18fa:	d302      	bcc.n	1902 <vstr_cut_tail_bytes+0xc>
        vstr->len = 0;
    } else {
        vstr->len -= len;
    18fc:	1a5b      	subs	r3, r3, r1
    18fe:	6043      	str	r3, [r0, #4]
    }
}
    1900:	4770      	bx	lr
        vstr->len = 0;
    1902:	2300      	movs	r3, #0
    1904:	6043      	str	r3, [r0, #4]
    1906:	4770      	bx	lr

00001908 <vstr_cut_out_bytes>:

void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut) {
    1908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (byte_pos >= vstr->len) {
    190a:	6844      	ldr	r4, [r0, #4]
    190c:	428c      	cmp	r4, r1
    190e:	d903      	bls.n	1918 <vstr_cut_out_bytes+0x10>
        return;
    } else if (byte_pos + bytes_to_cut >= vstr->len) {
    1910:	188f      	adds	r7, r1, r2
    1912:	42bc      	cmp	r4, r7
    1914:	d801      	bhi.n	191a <vstr_cut_out_bytes+0x12>
        vstr->len = byte_pos;
    1916:	6041      	str	r1, [r0, #4]
    } else {
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
        vstr->len -= bytes_to_cut;
    }
}
    1918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    191a:	4616      	mov	r6, r2
    191c:	460b      	mov	r3, r1
    191e:	4605      	mov	r5, r0
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
    1920:	6880      	ldr	r0, [r0, #8]
    1922:	1a64      	subs	r4, r4, r1
    1924:	1aa2      	subs	r2, r4, r2
    1926:	19c1      	adds	r1, r0, r7
    1928:	4418      	add	r0, r3
    192a:	f019 ff8f 	bl	1b84c <memmove>
        vstr->len -= bytes_to_cut;
    192e:	686a      	ldr	r2, [r5, #4]
    1930:	1b92      	subs	r2, r2, r6
    1932:	606a      	str	r2, [r5, #4]
    1934:	e7f0      	b.n	1918 <vstr_cut_out_bytes+0x10>

00001936 <plat_print_strn>:
#endif

static const char pad_spaces[] = "                ";
static const char pad_zeroes[] = "0000000000000000";

STATIC void plat_print_strn(void *env, const char *str, size_t len) {
    1936:	4608      	mov	r0, r1
    (void)env;
    MP_PLAT_PRINT_STRN(str, len);
    1938:	4611      	mov	r1, r2
    193a:	f017 b885 	b.w	18a48 <mp_hal_stdout_tx_strn_cooked>

0000193e <mp_print_str>:
}

const mp_print_t mp_plat_print = {NULL, plat_print_strn};

int mp_print_str(const mp_print_t *print, const char *str) {
    193e:	b570      	push	{r4, r5, r6, lr}
    1940:	4605      	mov	r5, r0
    size_t len = strlen(str);
    1942:	4608      	mov	r0, r1
int mp_print_str(const mp_print_t *print, const char *str) {
    1944:	460e      	mov	r6, r1
    size_t len = strlen(str);
    1946:	f019 ffed 	bl	1b924 <strlen>
    if (len) {
    194a:	4604      	mov	r4, r0
    194c:	b120      	cbz	r0, 1958 <mp_print_str+0x1a>
        print->print_strn(print->data, str, len);
    194e:	4602      	mov	r2, r0
    1950:	686b      	ldr	r3, [r5, #4]
    1952:	6828      	ldr	r0, [r5, #0]
    1954:	4631      	mov	r1, r6
    1956:	4798      	blx	r3
    }
    return len;
}
    1958:	4620      	mov	r0, r4
    195a:	bd70      	pop	{r4, r5, r6, pc}

0000195c <mp_print_strn>:

int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    195c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1960:	9101      	str	r1, [sp, #4]
    int pad = width - len;
    int pad_size;
    int total_chars_printed = 0;
    const char *pad_chars;

    if (!fill || fill == ' ') {
    1962:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    1966:	4691      	mov	r9, r2
    int pad = width - len;
    1968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    if (!fill || fill == ' ') {
    196a:	f011 0fdf 	tst.w	r1, #223	; 0xdf
int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    196e:	4606      	mov	r6, r0
    int pad = width - len;
    1970:	eba2 0209 	sub.w	r2, r2, r9
    if (!fill || fill == ' ') {
    1974:	d03d      	beq.n	19f2 <mp_print_strn+0x96>
        pad_chars = pad_zeroes;
        pad_size = sizeof(pad_zeroes) - 1;
    } else {
        // Other pad characters are fairly unusual, so we'll take the hit
        // and output them 1 at a time.
        pad_chars = &fill;
    1976:	2930      	cmp	r1, #48	; 0x30
    1978:	a90c      	add	r1, sp, #48	; 0x30
    197a:	4f24      	ldr	r7, [pc, #144]	; (1a0c <mp_print_strn+0xb0>)
    197c:	bf0e      	itee	eq
    197e:	f04f 0810 	moveq.w	r8, #16
    1982:	460f      	movne	r7, r1
    1984:	f04f 0801 	movne.w	r8, #1
        pad_size = 1;
    }

    if (flags & PF_FLAG_CENTER_ADJUST) {
    1988:	f013 0480 	ands.w	r4, r3, #128	; 0x80
    198c:	d035      	beq.n	19fa <mp_print_strn+0x9e>
        left_pad = pad / 2;
    198e:	2402      	movs	r4, #2
    1990:	fb92 f4f4 	sdiv	r4, r2, r4
        right_pad = pad - left_pad;
    1994:	1b15      	subs	r5, r2, r4
        right_pad = pad;
    } else {
        left_pad = pad;
    }

    if (left_pad > 0) {
    1996:	2c00      	cmp	r4, #0
    1998:	dd36      	ble.n	1a08 <mp_print_strn+0xac>
    199a:	46a2      	mov	sl, r4
    199c:	45d0      	cmp	r8, sl
    199e:	46c3      	mov	fp, r8
    19a0:	bfa8      	it	ge
    19a2:	46d3      	movge	fp, sl
        while (left_pad > 0) {
            int p = left_pad;
            if (p > pad_size) {
                p = pad_size;
            }
            print->print_strn(print->data, pad_chars, p);
    19a4:	6873      	ldr	r3, [r6, #4]
    19a6:	6830      	ldr	r0, [r6, #0]
    19a8:	465a      	mov	r2, fp
    19aa:	4639      	mov	r1, r7
            left_pad -= p;
    19ac:	ebaa 0a0b 	sub.w	sl, sl, fp
            print->print_strn(print->data, pad_chars, p);
    19b0:	4798      	blx	r3
        while (left_pad > 0) {
    19b2:	f1ba 0f00 	cmp.w	sl, #0
    19b6:	dcf1      	bgt.n	199c <mp_print_strn+0x40>
        }
    }
    if (len) {
    19b8:	f1b9 0f00 	cmp.w	r9, #0
    19bc:	d005      	beq.n	19ca <mp_print_strn+0x6e>
        print->print_strn(print->data, str, len);
    19be:	6873      	ldr	r3, [r6, #4]
    19c0:	9901      	ldr	r1, [sp, #4]
    19c2:	6830      	ldr	r0, [r6, #0]
    19c4:	464a      	mov	r2, r9
    19c6:	4798      	blx	r3
        total_chars_printed += len;
    19c8:	444c      	add	r4, r9
    }
    if (right_pad > 0) {
    19ca:	2d00      	cmp	r5, #0
    19cc:	dd0d      	ble.n	19ea <mp_print_strn+0x8e>
        total_chars_printed += right_pad;
    19ce:	442c      	add	r4, r5
    19d0:	45a8      	cmp	r8, r5
    19d2:	46c1      	mov	r9, r8
    19d4:	bfa8      	it	ge
    19d6:	46a9      	movge	r9, r5
        while (right_pad > 0) {
            int p = right_pad;
            if (p > pad_size) {
                p = pad_size;
            }
            print->print_strn(print->data, pad_chars, p);
    19d8:	6873      	ldr	r3, [r6, #4]
    19da:	6830      	ldr	r0, [r6, #0]
    19dc:	464a      	mov	r2, r9
    19de:	4639      	mov	r1, r7
            right_pad -= p;
    19e0:	eba5 0509 	sub.w	r5, r5, r9
            print->print_strn(print->data, pad_chars, p);
    19e4:	4798      	blx	r3
        while (right_pad > 0) {
    19e6:	2d00      	cmp	r5, #0
    19e8:	dcf2      	bgt.n	19d0 <mp_print_strn+0x74>
        }
    }
    return total_chars_printed;
}
    19ea:	4620      	mov	r0, r4
    19ec:	b003      	add	sp, #12
    19ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pad_chars = pad_spaces;
    19f2:	4f07      	ldr	r7, [pc, #28]	; (1a10 <mp_print_strn+0xb4>)
        pad_size = sizeof(pad_spaces) - 1;
    19f4:	f04f 0810 	mov.w	r8, #16
    19f8:	e7c6      	b.n	1988 <mp_print_strn+0x2c>
    } else if (flags & PF_FLAG_LEFT_ADJUST) {
    19fa:	f013 0501 	ands.w	r5, r3, #1
    19fe:	d101      	bne.n	1a04 <mp_print_strn+0xa8>
        left_pad = pad;
    1a00:	4614      	mov	r4, r2
    1a02:	e7c8      	b.n	1996 <mp_print_strn+0x3a>
        right_pad = pad;
    1a04:	4615      	mov	r5, r2
    1a06:	e7d7      	b.n	19b8 <mp_print_strn+0x5c>
    int total_chars_printed = 0;
    1a08:	2400      	movs	r4, #0
    1a0a:	e7d5      	b.n	19b8 <mp_print_strn+0x5c>
    1a0c:	0002371c 	.word	0x0002371c
    1a10:	0002370b 	.word	0x0002370b

00001a14 <mp_print_int>:
// print the prefix of a non-base-10 number, so we don't need code for this.
#define SUPPORT_INT_BASE_PREFIX (0)

// This function is used exclusively by mp_vprintf to format ints.
// It needs to be a separate function to mp_print_mp_int, since converting to a mp_int looses the MSB.
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    1a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a18:	b089      	sub	sp, #36	; 0x24
    1a1a:	4607      	mov	r7, r0
    char sign = 0;
    1a1c:	2000      	movs	r0, #0
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    1a1e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    1a20:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    1a24:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    char sign = 0;
    1a26:	f88d 000f 	strb.w	r0, [sp, #15]
    if (sgn) {
    1a2a:	b302      	cbz	r2, 1a6e <mp_print_int+0x5a>
        if ((mp_int_t)x < 0) {
    1a2c:	4281      	cmp	r1, r0
    1a2e:	da19      	bge.n	1a64 <mp_print_int+0x50>
            sign = '-';
    1a30:	222d      	movs	r2, #45	; 0x2d
    1a32:	f88d 200f 	strb.w	r2, [sp, #15]
            x = -x;
    1a36:	4249      	negs	r1, r1
    } else {
        do {
            int c = x % base;
            x /= base;
            if (c >= 10) {
                c += base_char - 10;
    1a38:	9a10      	ldr	r2, [sp, #64]	; 0x40
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    1a3a:	ac08      	add	r4, sp, #32
                c += base_char - 10;
    1a3c:	f1a2 0c0a 	sub.w	ip, r2, #10
            } else {
                c += '0';
            }
            *(--b) = c;
        } while (b > buf && x != 0);
    1a40:	f10d 0e10 	add.w	lr, sp, #16
            int c = x % base;
    1a44:	fbb1 f0f3 	udiv	r0, r1, r3
    1a48:	fb03 1210 	mls	r2, r3, r0, r1
            if (c >= 10) {
    1a4c:	2a09      	cmp	r2, #9
                c += base_char - 10;
    1a4e:	bf8c      	ite	hi
    1a50:	4462      	addhi	r2, ip
                c += '0';
    1a52:	3230      	addls	r2, #48	; 0x30
            *(--b) = c;
    1a54:	f804 2d01 	strb.w	r2, [r4, #-1]!
        } while (b > buf && x != 0);
    1a58:	4574      	cmp	r4, lr
            x /= base;
    1a5a:	4601      	mov	r1, r0
        } while (b > buf && x != 0);
    1a5c:	d00d      	beq.n	1a7a <mp_print_int+0x66>
    1a5e:	2800      	cmp	r0, #0
    1a60:	d1f0      	bne.n	1a44 <mp_print_int+0x30>
    1a62:	e00a      	b.n	1a7a <mp_print_int+0x66>
        } else if (flags & PF_FLAG_SHOW_SIGN) {
    1a64:	07a8      	lsls	r0, r5, #30
    1a66:	d526      	bpl.n	1ab6 <mp_print_int+0xa2>
            sign = '+';
    1a68:	222b      	movs	r2, #43	; 0x2b
            sign = ' ';
    1a6a:	f88d 200f 	strb.w	r2, [sp, #15]
    if (x == 0) {
    1a6e:	2900      	cmp	r1, #0
    1a70:	d1e2      	bne.n	1a38 <mp_print_int+0x24>
        *(--b) = '0';
    1a72:	ac08      	add	r4, sp, #32
    1a74:	2330      	movs	r3, #48	; 0x30
    1a76:	f804 3d01 	strb.w	r3, [r4, #-1]!
        }
    }
    #endif

    int len = 0;
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1a7a:	f015 0940 	ands.w	r9, r5, #64	; 0x40
    1a7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1a82:	d01c      	beq.n	1abe <mp_print_int+0xaa>
        if (sign) {
    1a84:	b323      	cbz	r3, 1ad0 <mp_print_int+0xbc>
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1a86:	2201      	movs	r2, #1
    1a88:	e9cd 8200 	strd	r8, r2, [sp]
    1a8c:	462b      	mov	r3, r5
    1a8e:	f10d 010f 	add.w	r1, sp, #15
    1a92:	4638      	mov	r0, r7
    1a94:	f7ff ff62 	bl	195c <mp_print_strn>
            width--;
    1a98:	3e01      	subs	r6, #1
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1a9a:	4681      	mov	r9, r0
        if (sign && b > buf) {
            *(--b) = sign;
        }
    }

    len += mp_print_strn(print, b, buf + INT_BUF_SIZE - b, flags, fill, width);
    1a9c:	aa08      	add	r2, sp, #32
    1a9e:	e9cd 8600 	strd	r8, r6, [sp]
    1aa2:	462b      	mov	r3, r5
    1aa4:	1b12      	subs	r2, r2, r4
    1aa6:	4621      	mov	r1, r4
    1aa8:	4638      	mov	r0, r7
    1aaa:	f7ff ff57 	bl	195c <mp_print_strn>
    return len;
}
    1aae:	4448      	add	r0, r9
    1ab0:	b009      	add	sp, #36	; 0x24
    1ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1ab6:	076a      	lsls	r2, r5, #29
    1ab8:	d5d9      	bpl.n	1a6e <mp_print_int+0x5a>
            sign = ' ';
    1aba:	2220      	movs	r2, #32
    1abc:	e7d5      	b.n	1a6a <mp_print_int+0x56>
        if (sign && b > buf) {
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d0ec      	beq.n	1a9c <mp_print_int+0x88>
    1ac2:	aa04      	add	r2, sp, #16
    1ac4:	4294      	cmp	r4, r2
    1ac6:	d9e9      	bls.n	1a9c <mp_print_int+0x88>
            *(--b) = sign;
    1ac8:	f804 3c01 	strb.w	r3, [r4, #-1]
    1acc:	3c01      	subs	r4, #1
    1ace:	e7e5      	b.n	1a9c <mp_print_int+0x88>
    int len = 0;
    1ad0:	4699      	mov	r9, r3
    1ad2:	e7e3      	b.n	1a9c <mp_print_int+0x88>

00001ad4 <mp_print_mp_int>:

int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ad8:	b091      	sub	sp, #68	; 0x44
    1ada:	461c      	mov	r4, r3
    // These are the only values for "base" that are required to be supported by this
    // function, since Python only allows the user to format integers in these bases.
    // If needed this function could be generalised to handle other values.
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1adc:	2a10      	cmp	r2, #16
int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1ade:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    1ae2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    1ae4:	9305      	str	r3, [sp, #20]
    1ae6:	4682      	mov	sl, r0
    1ae8:	460f      	mov	r7, r1
    1aea:	4691      	mov	r9, r2
    1aec:	e9dd 861c 	ldrd	r8, r6, [sp, #112]	; 0x70
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1af0:	d803      	bhi.n	1afa <mp_print_mp_int+0x26>
    1af2:	4b88      	ldr	r3, [pc, #544]	; (1d14 <mp_print_mp_int+0x240>)
    1af4:	40d3      	lsrs	r3, r2
    1af6:	07db      	lsls	r3, r3, #31
    1af8:	d405      	bmi.n	1b06 <mp_print_mp_int+0x32>
    1afa:	4b87      	ldr	r3, [pc, #540]	; (1d18 <mp_print_mp_int+0x244>)
    1afc:	4a87      	ldr	r2, [pc, #540]	; (1d1c <mp_print_mp_int+0x248>)
    1afe:	4888      	ldr	r0, [pc, #544]	; (1d20 <mp_print_mp_int+0x24c>)
    1b00:	21d0      	movs	r1, #208	; 0xd0
    1b02:	f016 fd2b 	bl	1855c <__assert_func>

    if (!MP_OBJ_IS_INT(x)) {
    1b06:	07c8      	lsls	r0, r1, #31
    1b08:	d40b      	bmi.n	1b22 <mp_print_mp_int+0x4e>
    1b0a:	07b9      	lsls	r1, r7, #30
    1b0c:	d103      	bne.n	1b16 <mp_print_mp_int+0x42>
    1b0e:	683a      	ldr	r2, [r7, #0]
    1b10:	4b84      	ldr	r3, [pc, #528]	; (1d24 <mp_print_mp_int+0x250>)
    1b12:	429a      	cmp	r2, r3
    1b14:	d005      	beq.n	1b22 <mp_print_mp_int+0x4e>
        // This will convert booleans to int, or raise an error for
        // non-integer types.
        x = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(x));
    1b16:	4638      	mov	r0, r7
    1b18:	f009 f958 	bl	adcc <mp_obj_get_int>
    1b1c:	0040      	lsls	r0, r0, #1
    1b1e:	f040 0701 	orr.w	r7, r0, #1
    }

    if ((flags & (PF_FLAG_LEFT_ADJUST | PF_FLAG_CENTER_ADJUST)) == 0 && fill == '0') {
    1b22:	f015 0381 	ands.w	r3, r5, #129	; 0x81
    1b26:	d106      	bne.n	1b36 <mp_print_mp_int+0x62>
    1b28:	9a05      	ldr	r2, [sp, #20]
    1b2a:	2a30      	cmp	r2, #48	; 0x30
    1b2c:	d103      	bne.n	1b36 <mp_print_mp_int+0x62>
    1b2e:	45b0      	cmp	r8, r6
    1b30:	bfb8      	it	lt
    1b32:	46b0      	movlt	r8, r6
        if (prec > width) {
            width = prec;
        }
        prec = 0;
    1b34:	461e      	mov	r6, r3
    }
    char prefix_buf[4];
    char *prefix = prefix_buf;

    if (mp_obj_int_sign(x) >= 0) {
    1b36:	4638      	mov	r0, r7
    1b38:	f00c f996 	bl	de68 <mp_obj_int_sign>
    1b3c:	2800      	cmp	r0, #0
    1b3e:	f10d 0b20 	add.w	fp, sp, #32
    1b42:	db18      	blt.n	1b76 <mp_print_mp_int+0xa2>
        if (flags & PF_FLAG_SHOW_SIGN) {
    1b44:	07aa      	lsls	r2, r5, #30
    1b46:	d512      	bpl.n	1b6e <mp_print_mp_int+0x9a>
            *prefix++ = '+';
    1b48:	232b      	movs	r3, #43	; 0x2b
        } else if (flags & PF_FLAG_SPACE_SIGN) {
            *prefix++ = ' ';
    1b4a:	f88d 3020 	strb.w	r3, [sp, #32]
    1b4e:	f10d 0321 	add.w	r3, sp, #33	; 0x21
    1b52:	b2e1      	uxtb	r1, r4
        }
    }

    if (flags & PF_FLAG_SHOW_PREFIX) {
    1b54:	06ec      	lsls	r4, r5, #27
    1b56:	d51d      	bpl.n	1b94 <mp_print_mp_int+0xc0>
        if (base == 2) {
    1b58:	f1b9 0f02 	cmp.w	r9, #2
    1b5c:	d10d      	bne.n	1b7a <mp_print_mp_int+0xa6>
            *prefix++ = '0';
    1b5e:	461a      	mov	r2, r3
    1b60:	2030      	movs	r0, #48	; 0x30
    1b62:	f802 0b02 	strb.w	r0, [r2], #2
            *prefix++ = base_char + 'b' - 'a';
    1b66:	1c48      	adds	r0, r1, #1
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
                *prefix++ = base_char + 'o' - 'a';
            }
        } else if (base == 16) {
            *prefix++ = '0';
            *prefix++ = base_char + 'x' - 'a';
    1b68:	7058      	strb	r0, [r3, #1]
    1b6a:	4613      	mov	r3, r2
    1b6c:	e012      	b.n	1b94 <mp_print_mp_int+0xc0>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1b6e:	076b      	lsls	r3, r5, #29
    1b70:	d501      	bpl.n	1b76 <mp_print_mp_int+0xa2>
            *prefix++ = ' ';
    1b72:	2320      	movs	r3, #32
    1b74:	e7e9      	b.n	1b4a <mp_print_mp_int+0x76>
    char *prefix = prefix_buf;
    1b76:	465b      	mov	r3, fp
    1b78:	e7eb      	b.n	1b52 <mp_print_mp_int+0x7e>
        } else if (base == 8) {
    1b7a:	f1b9 0f08 	cmp.w	r9, #8
    1b7e:	d13e      	bne.n	1bfe <mp_print_mp_int+0x12a>
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
    1b80:	05a8      	lsls	r0, r5, #22
            *prefix++ = '0';
    1b82:	f04f 0230 	mov.w	r2, #48	; 0x30
    1b86:	701a      	strb	r2, [r3, #0]
                *prefix++ = base_char + 'o' - 'a';
    1b88:	bf45      	ittet	mi
    1b8a:	f101 020e 	addmi.w	r2, r1, #14
    1b8e:	705a      	strbmi	r2, [r3, #1]
            *prefix++ = '0';
    1b90:	3301      	addpl	r3, #1
                *prefix++ = base_char + 'o' - 'a';
    1b92:	3302      	addmi	r3, #2
        }
    }
    *prefix = '\0';
    1b94:	2200      	movs	r2, #0
    int prefix_len = prefix - prefix_buf;
    prefix = prefix_buf;

    char comma = '\0';
    1b96:	f015 0f20 	tst.w	r5, #32
    *prefix = '\0';
    1b9a:	701a      	strb	r2, [r3, #0]
    int prefix_len = prefix - prefix_buf;
    1b9c:	eba3 030b 	sub.w	r3, r3, fp
    1ba0:	9304      	str	r3, [sp, #16]
    char comma = '\0';
    1ba2:	bf14      	ite	ne
    1ba4:	232c      	movne	r3, #44	; 0x2c
    1ba6:	4613      	moveq	r3, r2
    char *buf = stack_buf;
    size_t buf_size = sizeof(stack_buf);
    size_t fmt_size = 0;
    char *str;

    if (prec > 1) {
    1ba8:	2e01      	cmp	r6, #1
    char *buf = stack_buf;
    1baa:	a80c      	add	r0, sp, #48	; 0x30
        flags |= PF_FLAG_PAD_AFTER_SIGN;
    1bac:	bfc8      	it	gt
    1bae:	f045 0540 	orrgt.w	r5, r5, #64	; 0x40
    char *buf = stack_buf;
    1bb2:	9009      	str	r0, [sp, #36]	; 0x24
    }
    char sign = '\0';
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1bb4:	f015 0440 	ands.w	r4, r5, #64	; 0x40
    size_t buf_size = sizeof(stack_buf);
    1bb8:	f04f 0010 	mov.w	r0, #16
    size_t fmt_size = 0;
    1bbc:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    char sign = '\0';
    1bc0:	f88d 201f 	strb.w	r2, [sp, #31]
        // We add the pad in this function, so since the pad goes after
        // the sign & prefix, we format without a prefix
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1bc4:	e9cd 1302 	strd	r1, r3, [sp, #8]
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1bc8:	d023      	beq.n	1c12 <mp_print_mp_int+0x13e>
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1bca:	e9cd 9200 	strd	r9, r2, [sp]
    1bce:	463b      	mov	r3, r7
    1bd0:	aa0b      	add	r2, sp, #44	; 0x2c
    1bd2:	a90a      	add	r1, sp, #40	; 0x28
    1bd4:	a809      	add	r0, sp, #36	; 0x24
    1bd6:	f00b ffc7 	bl	db68 <mp_obj_int_formatted>
                                   x, base, NULL, base_char, comma);
        if (*str == '-') {
    1bda:	7803      	ldrb	r3, [r0, #0]
    1bdc:	2b2d      	cmp	r3, #45	; 0x2d
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1bde:	4681      	mov	r9, r0
        if (*str == '-') {
    1be0:	f040 8086 	bne.w	1cf0 <mp_print_mp_int+0x21c>
            sign = *str++;
            fmt_size--;
    1be4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
            sign = *str++;
    1be6:	f88d 301f 	strb.w	r3, [sp, #31]
            fmt_size--;
    1bea:	3c01      	subs	r4, #1
    }

    int spaces_before = 0;
    int spaces_after = 0;

    if (prec > 1) {
    1bec:	2e01      	cmp	r6, #1
            sign = *str++;
    1bee:	f100 0901 	add.w	r9, r0, #1
            fmt_size--;
    1bf2:	940b      	str	r4, [sp, #44]	; 0x2c
    if (prec > 1) {
    1bf4:	f300 8089 	bgt.w	1d0a <mp_print_mp_int+0x236>
    int spaces_after = 0;
    1bf8:	2700      	movs	r7, #0
        }
        fill = '0';
        flags &= ~PF_FLAG_LEFT_ADJUST;
    }

    int len = 0;
    1bfa:	463c      	mov	r4, r7
    1bfc:	e036      	b.n	1c6c <mp_print_mp_int+0x198>
        } else if (base == 16) {
    1bfe:	f1b9 0f10 	cmp.w	r9, #16
    1c02:	d1c7      	bne.n	1b94 <mp_print_mp_int+0xc0>
            *prefix++ = '0';
    1c04:	461a      	mov	r2, r3
    1c06:	2030      	movs	r0, #48	; 0x30
    1c08:	f802 0b02 	strb.w	r0, [r2], #2
            *prefix++ = base_char + 'x' - 'a';
    1c0c:	f101 0017 	add.w	r0, r1, #23
    1c10:	e7aa      	b.n	1b68 <mp_print_mp_int+0x94>
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1c12:	ab08      	add	r3, sp, #32
    1c14:	e9cd 9300 	strd	r9, r3, [sp]
    1c18:	aa0b      	add	r2, sp, #44	; 0x2c
    1c1a:	463b      	mov	r3, r7
    1c1c:	a90a      	add	r1, sp, #40	; 0x28
    1c1e:	a809      	add	r0, sp, #36	; 0x24
    1c20:	f00b ffa2 	bl	db68 <mp_obj_int_formatted>
    if (prec > 1) {
    1c24:	2e01      	cmp	r6, #1
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1c26:	4681      	mov	r9, r0
    if (prec > 1) {
    1c28:	dd1f      	ble.n	1c6a <mp_print_mp_int+0x196>
        int prec_width = fmt_size;  // The digits
    1c2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    1c2c:	42b4      	cmp	r4, r6
    1c2e:	bfb8      	it	lt
    1c30:	4634      	movlt	r4, r6
        if (prec_width < width) {
    1c32:	45a0      	cmp	r8, r4
    1c34:	dd16      	ble.n	1c64 <mp_print_mp_int+0x190>
            if (flags & PF_FLAG_LEFT_ADJUST) {
    1c36:	f015 0701 	ands.w	r7, r5, #1
    1c3a:	eba8 0404 	sub.w	r4, r8, r4
    1c3e:	d001      	beq.n	1c44 <mp_print_mp_int+0x170>
                spaces_after = width - prec_width;
    1c40:	4627      	mov	r7, r4
    int spaces_before = 0;
    1c42:	2400      	movs	r4, #0
        flags &= ~PF_FLAG_LEFT_ADJUST;
    1c44:	f025 0501 	bic.w	r5, r5, #1
    if (spaces_before) {
    1c48:	b14c      	cbz	r4, 1c5e <mp_print_mp_int+0x18a>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_before);
    1c4a:	2320      	movs	r3, #32
    1c4c:	9300      	str	r3, [sp, #0]
    1c4e:	2300      	movs	r3, #0
    1c50:	9401      	str	r4, [sp, #4]
    1c52:	461a      	mov	r2, r3
    1c54:	4934      	ldr	r1, [pc, #208]	; (1d28 <mp_print_mp_int+0x254>)
    1c56:	4650      	mov	r0, sl
    1c58:	f7ff fe80 	bl	195c <mp_print_strn>
    1c5c:	4604      	mov	r4, r0
        fill = '0';
    1c5e:	2330      	movs	r3, #48	; 0x30
    1c60:	9305      	str	r3, [sp, #20]
    1c62:	e003      	b.n	1c6c <mp_print_mp_int+0x198>
    int spaces_after = 0;
    1c64:	2700      	movs	r7, #0
    int spaces_before = 0;
    1c66:	463c      	mov	r4, r7
    1c68:	e7ec      	b.n	1c44 <mp_print_mp_int+0x170>
    int spaces_after = 0;
    1c6a:	4627      	mov	r7, r4
    }
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1c6c:	0669      	lsls	r1, r5, #25
    1c6e:	d51d      	bpl.n	1cac <mp_print_mp_int+0x1d8>
        // pad after sign implies pad after prefix as well.
        if (sign) {
    1c70:	f89d 301f 	ldrb.w	r3, [sp, #31]
    1c74:	b15b      	cbz	r3, 1c8e <mp_print_mp_int+0x1ba>
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1c76:	2300      	movs	r3, #0
    1c78:	2201      	movs	r2, #1
    1c7a:	e9cd 3200 	strd	r3, r2, [sp]
    1c7e:	f10d 011f 	add.w	r1, sp, #31
    1c82:	4650      	mov	r0, sl
    1c84:	f7ff fe6a 	bl	195c <mp_print_strn>
            width--;
    1c88:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1c8c:	4404      	add	r4, r0
        }
        if (prefix_len) {
    1c8e:	9b04      	ldr	r3, [sp, #16]
    1c90:	b163      	cbz	r3, 1cac <mp_print_mp_int+0x1d8>
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1c92:	2300      	movs	r3, #0
    1c94:	2201      	movs	r2, #1
    1c96:	e9cd 3200 	strd	r3, r2, [sp]
    1c9a:	4659      	mov	r1, fp
    1c9c:	9a04      	ldr	r2, [sp, #16]
    1c9e:	4650      	mov	r0, sl
    1ca0:	f7ff fe5c 	bl	195c <mp_print_strn>
            width -= prefix_len;
    1ca4:	9b04      	ldr	r3, [sp, #16]
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1ca6:	4404      	add	r4, r0
            width -= prefix_len;
    1ca8:	eba8 0803 	sub.w	r8, r8, r3
    }
    if (prec > 1) {
        width = prec;
    }

    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    1cac:	9b05      	ldr	r3, [sp, #20]
    1cae:	9300      	str	r3, [sp, #0]
    if (prec > 1) {
    1cb0:	2e01      	cmp	r6, #1
    1cb2:	bfd8      	it	le
    1cb4:	4646      	movle	r6, r8
    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    1cb6:	9601      	str	r6, [sp, #4]
    1cb8:	462b      	mov	r3, r5
    1cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1cbc:	4649      	mov	r1, r9
    1cbe:	4650      	mov	r0, sl
    1cc0:	f7ff fe4c 	bl	195c <mp_print_strn>
    1cc4:	4404      	add	r4, r0

    if (spaces_after) {
    1cc6:	b14f      	cbz	r7, 1cdc <mp_print_mp_int+0x208>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_after);
    1cc8:	2320      	movs	r3, #32
    1cca:	9300      	str	r3, [sp, #0]
    1ccc:	2300      	movs	r3, #0
    1cce:	9701      	str	r7, [sp, #4]
    1cd0:	461a      	mov	r2, r3
    1cd2:	4915      	ldr	r1, [pc, #84]	; (1d28 <mp_print_mp_int+0x254>)
    1cd4:	4650      	mov	r0, sl
    1cd6:	f7ff fe41 	bl	195c <mp_print_strn>
    1cda:	4404      	add	r4, r0
    }

    if (buf != stack_buf) {
    1cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
    1cde:	ab0c      	add	r3, sp, #48	; 0x30
    1ce0:	4298      	cmp	r0, r3
    1ce2:	d001      	beq.n	1ce8 <mp_print_mp_int+0x214>
        m_del(char, buf, buf_size);
    1ce4:	f7fe fe13 	bl	90e <m_free>
    }
    return len;
}
    1ce8:	4620      	mov	r0, r4
    1cea:	b011      	add	sp, #68	; 0x44
    1cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (prec > 1) {
    1cf0:	2e01      	cmp	r6, #1
    1cf2:	dd81      	ble.n	1bf8 <mp_print_mp_int+0x124>
        int prec_width = fmt_size;  // The digits
    1cf4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
            if (sign) {
    1cf6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    1cfa:	42b4      	cmp	r4, r6
    1cfc:	bfb8      	it	lt
    1cfe:	4634      	movlt	r4, r6
    1d00:	b103      	cbz	r3, 1d04 <mp_print_mp_int+0x230>
                prec_width++;
    1d02:	3401      	adds	r4, #1
            prec_width += prefix_len;
    1d04:	9b04      	ldr	r3, [sp, #16]
    1d06:	441c      	add	r4, r3
    1d08:	e793      	b.n	1c32 <mp_print_mp_int+0x15e>
    1d0a:	42b4      	cmp	r4, r6
    1d0c:	bfb8      	it	lt
    1d0e:	4634      	movlt	r4, r6
    1d10:	e7f7      	b.n	1d02 <mp_print_mp_int+0x22e>
    1d12:	bf00      	nop
    1d14:	00010504 	.word	0x00010504
    1d18:	0002368c 	.word	0x0002368c
    1d1c:	00023666 	.word	0x00023666
    1d20:	000236bf 	.word	0x000236bf
    1d24:	00027498 	.word	0x00027498
    1d28:	0002bee9 	.word	0x0002bee9

00001d2c <mp_print_float>:

#if MICROPY_PY_BUILTINS_FLOAT
int mp_print_float(const mp_print_t *print, mp_float_t f, char fmt, int flags, char fill, int width, int prec) {
    1d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d30:	4616      	mov	r6, r2
    1d32:	b08b      	sub	sp, #44	; 0x2c
    char buf[32];
    char sign = '\0';
    int chrs = 0;

    if (flags & PF_FLAG_SHOW_SIGN) {
    1d34:	07b2      	lsls	r2, r6, #30
int mp_print_float(const mp_print_t *print, mp_float_t f, char fmt, int flags, char fill, int width, int prec) {
    1d36:	4680      	mov	r8, r0
    1d38:	4699      	mov	r9, r3
    1d3a:	9f12      	ldr	r7, [sp, #72]	; 0x48
    if (flags & PF_FLAG_SHOW_SIGN) {
    1d3c:	d43c      	bmi.n	1db8 <mp_print_float+0x8c>
        sign = '+';
    }
    else
    if (flags & PF_FLAG_SPACE_SIGN) {
        sign = ' ';
    1d3e:	f016 0f04 	tst.w	r6, #4
    1d42:	bf0c      	ite	eq
    1d44:	2300      	moveq	r3, #0
    1d46:	2320      	movne	r3, #32
    }

    int len = mp_format_float(f, buf, sizeof(buf), fmt, prec, sign);
    1d48:	9300      	str	r3, [sp, #0]
    1d4a:	460a      	mov	r2, r1
    1d4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d4e:	2120      	movs	r1, #32
    1d50:	a802      	add	r0, sp, #8
    1d52:	f006 fe61 	bl	8a18 <mp_format_float>

    char *s = buf;

    if ((flags & PF_FLAG_ADD_PERCENT) && (size_t)(len + 1) < sizeof(buf)) {
    1d56:	05f3      	lsls	r3, r6, #23
    int len = mp_format_float(f, buf, sizeof(buf), fmt, prec, sign);
    1d58:	4604      	mov	r4, r0
    if ((flags & PF_FLAG_ADD_PERCENT) && (size_t)(len + 1) < sizeof(buf)) {
    1d5a:	d50d      	bpl.n	1d78 <mp_print_float+0x4c>
    1d5c:	1c43      	adds	r3, r0, #1
    1d5e:	2b1f      	cmp	r3, #31
    1d60:	d80a      	bhi.n	1d78 <mp_print_float+0x4c>
        buf[len++] = '%';
    1d62:	aa0a      	add	r2, sp, #40	; 0x28
    1d64:	4414      	add	r4, r2
    1d66:	2225      	movs	r2, #37	; 0x25
    1d68:	f804 2c20 	strb.w	r2, [r4, #-32]
        buf[len] = '\0';
    1d6c:	aa0a      	add	r2, sp, #40	; 0x28
    1d6e:	441a      	add	r2, r3
    1d70:	2100      	movs	r1, #0
    1d72:	f802 1c20 	strb.w	r1, [r2, #-32]
    1d76:	461c      	mov	r4, r3
    }

    // buf[0] < '0' returns true if the first character is space, + or -
    if ((flags & PF_FLAG_PAD_AFTER_SIGN) && buf[0] < '0') {
    1d78:	f016 0540 	ands.w	r5, r6, #64	; 0x40
    1d7c:	d01e      	beq.n	1dbc <mp_print_float+0x90>
    1d7e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1d82:	2b2f      	cmp	r3, #47	; 0x2f
    1d84:	f04f 0300 	mov.w	r3, #0
    1d88:	d81a      	bhi.n	1dc0 <mp_print_float+0x94>
        // We have a sign character
        s++;
        chrs += mp_print_strn(print, &buf[0], 1, 0, 0, 1);
    1d8a:	2201      	movs	r2, #1
    1d8c:	a902      	add	r1, sp, #8
    1d8e:	e9cd 3200 	strd	r3, r2, [sp]
    1d92:	4640      	mov	r0, r8
    1d94:	f7ff fde2 	bl	195c <mp_print_strn>
        width--;
    1d98:	3f01      	subs	r7, #1
        chrs += mp_print_strn(print, &buf[0], 1, 0, 0, 1);
    1d9a:	4605      	mov	r5, r0
        len--;
    1d9c:	3c01      	subs	r4, #1
        s++;
    1d9e:	f10d 0109 	add.w	r1, sp, #9
    }

    chrs += mp_print_strn(print, s, len, flags, fill, width);
    1da2:	e9cd 9700 	strd	r9, r7, [sp]
    1da6:	4633      	mov	r3, r6
    1da8:	4622      	mov	r2, r4
    1daa:	4640      	mov	r0, r8
    1dac:	f7ff fdd6 	bl	195c <mp_print_strn>

    return chrs;
}
    1db0:	4428      	add	r0, r5
    1db2:	b00b      	add	sp, #44	; 0x2c
    1db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sign = '+';
    1db8:	232b      	movs	r3, #43	; 0x2b
    1dba:	e7c5      	b.n	1d48 <mp_print_float+0x1c>
    char *s = buf;
    1dbc:	a902      	add	r1, sp, #8
    1dbe:	e7f0      	b.n	1da2 <mp_print_float+0x76>
    1dc0:	a902      	add	r1, sp, #8
    int chrs = 0;
    1dc2:	461d      	mov	r5, r3
    1dc4:	e7ed      	b.n	1da2 <mp_print_float+0x76>
	...

00001dc8 <mp_vprintf>:
    int ret = mp_vprintf(print, fmt, ap);
    va_end(ap);
    return ret;
}

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args) {
    1dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dcc:	4682      	mov	sl, r0
    1dce:	b089      	sub	sp, #36	; 0x24
    1dd0:	4615      	mov	r5, r2
    int chrs = 0;
    1dd2:	2400      	movs	r4, #0
    1dd4:	460e      	mov	r6, r1
    for (;;) {
        {
            const char *f = fmt;
            while (*f != '\0' && *f != '%') {
    1dd6:	4633      	mov	r3, r6
    1dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
    1ddc:	b982      	cbnz	r2, 1e00 <mp_vprintf+0x38>
                ++f; // XXX UTF8 advance char
            }
            if (f > fmt) {
    1dde:	42b1      	cmp	r1, r6
    1de0:	d312      	bcc.n	1e08 <mp_vprintf+0x40>
                chrs += f - fmt;
                fmt = f;
            }
        }

        if (*fmt == '\0') {
    1de2:	780b      	ldrb	r3, [r1, #0]
    1de4:	2b00      	cmp	r3, #0
    1de6:	f000 8131 	beq.w	204c <mp_vprintf+0x284>
            break;
        }

        // move past % character
        ++fmt;
    1dea:	3101      	adds	r1, #1

        // parse flags, if they exist
        int flags = 0;
        char fill = ' ';
    1dec:	2320      	movs	r3, #32
        int flags = 0;
    1dee:	f04f 0800 	mov.w	r8, #0
        while (*fmt != '\0') {
    1df2:	780e      	ldrb	r6, [r1, #0]
    1df4:	460f      	mov	r7, r1
    1df6:	1c4a      	adds	r2, r1, #1
    1df8:	b986      	cbnz	r6, 1e1c <mp_vprintf+0x54>
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
            width = width * 10 + *fmt - '0';
        }

        // parse precision, if it exists
        int prec = -1;
    1dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1dfe:	e04e      	b.n	1e9e <mp_vprintf+0xd6>
            while (*f != '\0' && *f != '%') {
    1e00:	2a25      	cmp	r2, #37	; 0x25
    1e02:	d0ec      	beq.n	1dde <mp_vprintf+0x16>
    1e04:	461e      	mov	r6, r3
    1e06:	e7e6      	b.n	1dd6 <mp_vprintf+0xe>
                print->print_strn(print->data, fmt, f - fmt);
    1e08:	1a77      	subs	r7, r6, r1
    1e0a:	f8da 3004 	ldr.w	r3, [sl, #4]
    1e0e:	f8da 0000 	ldr.w	r0, [sl]
    1e12:	463a      	mov	r2, r7
    1e14:	4798      	blx	r3
                chrs += f - fmt;
    1e16:	443c      	add	r4, r7
    1e18:	4631      	mov	r1, r6
    1e1a:	e7e2      	b.n	1de2 <mp_vprintf+0x1a>
            if (*fmt == '-') flags |= PF_FLAG_LEFT_ADJUST;
    1e1c:	2e2d      	cmp	r6, #45	; 0x2d
    1e1e:	d103      	bne.n	1e28 <mp_vprintf+0x60>
    1e20:	f048 0801 	orr.w	r8, r8, #1
        int flags = 0;
    1e24:	4611      	mov	r1, r2
    1e26:	e7e4      	b.n	1df2 <mp_vprintf+0x2a>
            else if (*fmt == '+') flags |= PF_FLAG_SHOW_SIGN;
    1e28:	2e2b      	cmp	r6, #43	; 0x2b
    1e2a:	d102      	bne.n	1e32 <mp_vprintf+0x6a>
    1e2c:	f048 0802 	orr.w	r8, r8, #2
    1e30:	e7f8      	b.n	1e24 <mp_vprintf+0x5c>
            else if (*fmt == ' ') flags |= PF_FLAG_SPACE_SIGN;
    1e32:	2e20      	cmp	r6, #32
    1e34:	d102      	bne.n	1e3c <mp_vprintf+0x74>
    1e36:	f048 0804 	orr.w	r8, r8, #4
    1e3a:	e7f3      	b.n	1e24 <mp_vprintf+0x5c>
            else if (*fmt == '!') flags |= PF_FLAG_NO_TRAILZ;
    1e3c:	2e21      	cmp	r6, #33	; 0x21
    1e3e:	d102      	bne.n	1e46 <mp_vprintf+0x7e>
    1e40:	f048 0808 	orr.w	r8, r8, #8
    1e44:	e7ee      	b.n	1e24 <mp_vprintf+0x5c>
            else if (*fmt == '0') {
    1e46:	2e30      	cmp	r6, #48	; 0x30
    1e48:	d122      	bne.n	1e90 <mp_vprintf+0xc8>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
    1e4a:	f048 0840 	orr.w	r8, r8, #64	; 0x40
                fill = '0';
    1e4e:	4633      	mov	r3, r6
    1e50:	e7e8      	b.n	1e24 <mp_vprintf+0x5c>
            width = width * 10 + *fmt - '0';
    1e52:	200a      	movs	r0, #10
    1e54:	fb00 2606 	mla	r6, r0, r6, r2
    1e58:	3e30      	subs	r6, #48	; 0x30
    1e5a:	460f      	mov	r7, r1
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1e5c:	f811 2b01 	ldrb.w	r2, [r1], #1
    1e60:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    1e64:	2809      	cmp	r0, #9
    1e66:	d9f4      	bls.n	1e52 <mp_vprintf+0x8a>
        if (*fmt == '.') {
    1e68:	2a2e      	cmp	r2, #46	; 0x2e
    1e6a:	d1c6      	bne.n	1dfa <mp_vprintf+0x32>
            ++fmt;
            if (*fmt == '*') {
    1e6c:	787a      	ldrb	r2, [r7, #1]
    1e6e:	2a2a      	cmp	r2, #42	; 0x2a
    1e70:	d010      	beq.n	1e94 <mp_vprintf+0xcc>
            ++fmt;
    1e72:	4608      	mov	r0, r1
                ++fmt;
                prec = va_arg(args, int);
            } else {
                prec = 0;
    1e74:	2200      	movs	r2, #0
    1e76:	4607      	mov	r7, r0
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1e78:	f810 1b01 	ldrb.w	r1, [r0], #1
    1e7c:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
    1e80:	f1bc 0f09 	cmp.w	ip, #9
    1e84:	d80b      	bhi.n	1e9e <mp_vprintf+0xd6>
                    prec = prec * 10 + *fmt - '0';
    1e86:	270a      	movs	r7, #10
    1e88:	fb07 1202 	mla	r2, r7, r2, r1
    1e8c:	3a30      	subs	r2, #48	; 0x30
    1e8e:	e7f2      	b.n	1e76 <mp_vprintf+0xae>
    1e90:	2600      	movs	r6, #0
    1e92:	e7e2      	b.n	1e5a <mp_vprintf+0x92>
    1e94:	682a      	ldr	r2, [r5, #0]
                ++fmt;
    1e96:	3702      	adds	r7, #2
    1e98:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
                prec = va_arg(args, int);
    1e9c:	3504      	adds	r5, #4
        // parse long specifiers (only for LP64 model where they make a difference)
        #ifndef __LP64__
        const
        #endif
        bool long_arg = false;
        if (*fmt == 'l') {
    1e9e:	7839      	ldrb	r1, [r7, #0]
    1ea0:	296c      	cmp	r1, #108	; 0x6c
            ++fmt;
    1ea2:	bf08      	it	eq
    1ea4:	3701      	addeq	r7, #1
            #ifdef __LP64__
            long_arg = true;
            #endif
        }

        if (*fmt == '\0') {
    1ea6:	f897 9000 	ldrb.w	r9, [r7]
    1eaa:	f1b9 0f00 	cmp.w	r9, #0
    1eae:	f000 80cd 	beq.w	204c <mp_vprintf+0x284>
            break;
        }

        switch (*fmt) {
    1eb2:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    1eb6:	f000 8099 	beq.w	1fec <mp_vprintf+0x224>
    1eba:	d827      	bhi.n	1f0c <mp_vprintf+0x144>
    1ebc:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
    1ec0:	d02e      	beq.n	1f20 <mp_vprintf+0x158>
    1ec2:	d80f      	bhi.n	1ee4 <mp_vprintf+0x11c>
    1ec4:	f1a9 0145 	sub.w	r1, r9, #69	; 0x45
    1ec8:	2902      	cmp	r1, #2
    1eca:	f240 809e 	bls.w	200a <mp_vprintf+0x242>
                assert(!"unsupported fmt char");
            }
            #endif
            default:
                // if it's not %% then it's an unsupported format character
                assert(*fmt == '%' || !"unsupported fmt char");
    1ece:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    1ed2:	f000 80b1 	beq.w	2038 <mp_vprintf+0x270>
    1ed6:	4b5f      	ldr	r3, [pc, #380]	; (2054 <mp_vprintf+0x28c>)
    1ed8:	4a5f      	ldr	r2, [pc, #380]	; (2058 <mp_vprintf+0x290>)
    1eda:	4860      	ldr	r0, [pc, #384]	; (205c <mp_vprintf+0x294>)
    1edc:	f240 2132 	movw	r1, #562	; 0x232
    1ee0:	f016 fb3c 	bl	1855c <__assert_func>
        switch (*fmt) {
    1ee4:	f1b9 0f62 	cmp.w	r9, #98	; 0x62
    1ee8:	d038      	beq.n	1f5c <mp_vprintf+0x194>
    1eea:	d84a      	bhi.n	1f82 <mp_vprintf+0x1ba>
    1eec:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    1ef0:	d1ed      	bne.n	1ece <mp_vprintf+0x106>
                char fmt_c = *fmt - 'X' + 'A';
    1ef2:	f1a9 0917 	sub.w	r9, r9, #23
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    1ef6:	e9cd 3602 	strd	r3, r6, [sp, #8]
                    val = va_arg(args, unsigned int);
    1efa:	f105 0b04 	add.w	fp, r5, #4
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    1efe:	f8cd 8004 	str.w	r8, [sp, #4]
    1f02:	fa5f f389 	uxtb.w	r3, r9
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    1f06:	9300      	str	r3, [sp, #0]
    1f08:	2310      	movs	r3, #16
    1f0a:	e06d      	b.n	1fe8 <mp_vprintf+0x220>
        switch (*fmt) {
    1f0c:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    1f10:	d042      	beq.n	1f98 <mp_vprintf+0x1d0>
    1f12:	d80d      	bhi.n	1f30 <mp_vprintf+0x168>
    1f14:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    1f18:	d977      	bls.n	200a <mp_vprintf+0x242>
    1f1a:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    1f1e:	d1d6      	bne.n	1ece <mp_vprintf+0x106>
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    1f20:	e9cd 3602 	strd	r3, r6, [sp, #8]
    1f24:	f105 0b04 	add.w	fp, r5, #4
    1f28:	f8cd 8004 	str.w	r8, [sp, #4]
    1f2c:	2361      	movs	r3, #97	; 0x61
    1f2e:	e7ea      	b.n	1f06 <mp_vprintf+0x13e>
        switch (*fmt) {
    1f30:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    1f34:	d04f      	beq.n	1fd6 <mp_vprintf+0x20e>
    1f36:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    1f3a:	d0da      	beq.n	1ef2 <mp_vprintf+0x12a>
    1f3c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    1f40:	d1c5      	bne.n	1ece <mp_vprintf+0x106>
                const char *str = va_arg(args, const char*);
    1f42:	f105 0b04 	add.w	fp, r5, #4
    1f46:	682d      	ldr	r5, [r5, #0]
                if (prec != 0 && str == NULL) {
    1f48:	2a00      	cmp	r2, #0
    1f4a:	d03f      	beq.n	1fcc <mp_vprintf+0x204>
    1f4c:	2d00      	cmp	r5, #0
    1f4e:	d135      	bne.n	1fbc <mp_vprintf+0x1f4>
                    chrs += mp_print_strn(print, "(null)", 6, flags, fill, width);
    1f50:	e9cd 3600 	strd	r3, r6, [sp]
    1f54:	2206      	movs	r2, #6
    1f56:	4643      	mov	r3, r8
    1f58:	4941      	ldr	r1, [pc, #260]	; (2060 <mp_vprintf+0x298>)
    1f5a:	e008      	b.n	1f6e <mp_vprintf+0x1a6>
                if (va_arg(args, int)) {
    1f5c:	682a      	ldr	r2, [r5, #0]
    1f5e:	f105 0b04 	add.w	fp, r5, #4
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    1f62:	e9cd 3600 	strd	r3, r6, [sp]
    1f66:	4643      	mov	r3, r8
                if (va_arg(args, int)) {
    1f68:	b142      	cbz	r2, 1f7c <mp_vprintf+0x1b4>
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    1f6a:	493e      	ldr	r1, [pc, #248]	; (2064 <mp_vprintf+0x29c>)
    1f6c:	2204      	movs	r2, #4
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    1f6e:	4650      	mov	r0, sl
    1f70:	f7ff fcf4 	bl	195c <mp_print_strn>
    1f74:	4404      	add	r4, r0
                print->print_strn(print->data, fmt, 1);
                chrs += 1;
                break;
        }
        ++fmt;
    1f76:	1c79      	adds	r1, r7, #1
    for (;;) {
    1f78:	465d      	mov	r5, fp
    1f7a:	e72b      	b.n	1dd4 <mp_vprintf+0xc>
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    1f7c:	2205      	movs	r2, #5
    1f7e:	493a      	ldr	r1, [pc, #232]	; (2068 <mp_vprintf+0x2a0>)
    1f80:	e7f5      	b.n	1f6e <mp_vprintf+0x1a6>
                char str = va_arg(args, int);
    1f82:	a908      	add	r1, sp, #32
    1f84:	682a      	ldr	r2, [r5, #0]
    1f86:	f801 2d04 	strb.w	r2, [r1, #-4]!
    1f8a:	f105 0b04 	add.w	fp, r5, #4
                chrs += mp_print_strn(print, &str, 1, flags, fill, width);
    1f8e:	e9cd 3600 	strd	r3, r6, [sp]
    1f92:	2201      	movs	r2, #1
    1f94:	4643      	mov	r3, r8
    1f96:	e7ea      	b.n	1f6e <mp_vprintf+0x1a6>
                const char *str = (const char*)qstr_data(qst, &len);
    1f98:	a907      	add	r1, sp, #28
    1f9a:	6828      	ldr	r0, [r5, #0]
    1f9c:	e9cd 3204 	strd	r3, r2, [sp, #16]
    1fa0:	f7ff fb7c 	bl	169c <qstr_data>
                if (prec < 0) {
    1fa4:	9a05      	ldr	r2, [sp, #20]
    1fa6:	9b04      	ldr	r3, [sp, #16]
                const char *str = (const char*)qstr_data(qst, &len);
    1fa8:	4601      	mov	r1, r0
                if (prec < 0) {
    1faa:	1c50      	adds	r0, r2, #1
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    1fac:	e9cd 3600 	strd	r3, r6, [sp]
                qstr qst = va_arg(args, qstr);
    1fb0:	f105 0b04 	add.w	fp, r5, #4
                    prec = len;
    1fb4:	bf08      	it	eq
    1fb6:	9a07      	ldreq	r2, [sp, #28]
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    1fb8:	4643      	mov	r3, r8
    1fba:	e7d8      	b.n	1f6e <mp_vprintf+0x1a6>
                if (prec < 0) {
    1fbc:	1c51      	adds	r1, r2, #1
    1fbe:	d105      	bne.n	1fcc <mp_vprintf+0x204>
                    prec = strlen(str);
    1fc0:	4628      	mov	r0, r5
    1fc2:	9304      	str	r3, [sp, #16]
    1fc4:	f019 fcae 	bl	1b924 <strlen>
    1fc8:	9b04      	ldr	r3, [sp, #16]
    1fca:	4602      	mov	r2, r0
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    1fcc:	e9cd 3600 	strd	r3, r6, [sp]
    1fd0:	4629      	mov	r1, r5
    1fd2:	4643      	mov	r3, r8
    1fd4:	e7cb      	b.n	1f6e <mp_vprintf+0x1a6>
                chrs += mp_print_int(print, va_arg(args, unsigned int), 0, 10, 'a', flags, fill, width);
    1fd6:	e9cd 3602 	strd	r3, r6, [sp, #8]
    1fda:	2361      	movs	r3, #97	; 0x61
    1fdc:	9300      	str	r3, [sp, #0]
    1fde:	f105 0b04 	add.w	fp, r5, #4
    1fe2:	f8cd 8004 	str.w	r8, [sp, #4]
    1fe6:	230a      	movs	r3, #10
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    1fe8:	2200      	movs	r2, #0
    1fea:	e009      	b.n	2000 <mp_vprintf+0x238>
                chrs += mp_print_int(print, va_arg(args, int), 1, 10, 'a', flags, fill, width);
    1fec:	e9cd 3602 	strd	r3, r6, [sp, #8]
    1ff0:	2361      	movs	r3, #97	; 0x61
    1ff2:	9300      	str	r3, [sp, #0]
    1ff4:	f105 0b04 	add.w	fp, r5, #4
    1ff8:	f8cd 8004 	str.w	r8, [sp, #4]
    1ffc:	230a      	movs	r3, #10
    1ffe:	2201      	movs	r2, #1
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    2000:	6829      	ldr	r1, [r5, #0]
    2002:	4650      	mov	r0, sl
    2004:	f7ff fd06 	bl	1a14 <mp_print_int>
    2008:	e7b4      	b.n	1f74 <mp_vprintf+0x1ac>
                mp_float_t f = va_arg(args, double);
    200a:	3507      	adds	r5, #7
    200c:	f025 0507 	bic.w	r5, r5, #7
    2010:	e9d5 0100 	ldrd	r0, r1, [r5]
    2014:	e9cd 3204 	strd	r3, r2, [sp, #16]
    2018:	f7fe fbc0 	bl	79c <__aeabi_d2f>
                chrs += mp_print_float(print, f, *fmt, flags, fill, width, prec);
    201c:	9a05      	ldr	r2, [sp, #20]
    201e:	9b04      	ldr	r3, [sp, #16]
    2020:	e9cd 6200 	strd	r6, r2, [sp]
    2024:	ee00 0a10 	vmov	s0, r0
    2028:	4642      	mov	r2, r8
    202a:	4649      	mov	r1, r9
    202c:	4650      	mov	r0, sl
                mp_float_t f = va_arg(args, double);
    202e:	f105 0b08 	add.w	fp, r5, #8
                chrs += mp_print_float(print, f, *fmt, flags, fill, width, prec);
    2032:	f7ff fe7b 	bl	1d2c <mp_print_float>
    2036:	e79d      	b.n	1f74 <mp_vprintf+0x1ac>
                print->print_strn(print->data, fmt, 1);
    2038:	f8da 3004 	ldr.w	r3, [sl, #4]
    203c:	f8da 0000 	ldr.w	r0, [sl]
    2040:	2201      	movs	r2, #1
    2042:	4639      	mov	r1, r7
    2044:	4798      	blx	r3
                chrs += 1;
    2046:	3401      	adds	r4, #1
                break;
    2048:	46ab      	mov	fp, r5
    204a:	e794      	b.n	1f76 <mp_vprintf+0x1ae>
    }
    return chrs;
}
    204c:	4620      	mov	r0, r4
    204e:	b009      	add	sp, #36	; 0x24
    2050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2054:	000236e4 	.word	0x000236e4
    2058:	00023676 	.word	0x00023676
    205c:	000236bf 	.word	0x000236bf
    2060:	000236dd 	.word	0x000236dd
    2064:	000236d2 	.word	0x000236d2
    2068:	000236d7 	.word	0x000236d7

0000206c <mp_printf>:
int mp_printf(const mp_print_t *print, const char *fmt, ...) {
    206c:	b40e      	push	{r1, r2, r3}
    206e:	b503      	push	{r0, r1, lr}
    2070:	aa03      	add	r2, sp, #12
    2072:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(ap, fmt);
    2076:	9201      	str	r2, [sp, #4]
    int ret = mp_vprintf(print, fmt, ap);
    2078:	f7ff fea6 	bl	1dc8 <mp_vprintf>
}
    207c:	b002      	add	sp, #8
    207e:	f85d eb04 	ldr.w	lr, [sp], #4
    2082:	b003      	add	sp, #12
    2084:	4770      	bx	lr
	...

00002088 <unichar_isspace>:

#endif

// Be aware: These unichar_is* functions are actually ASCII-only!
bool unichar_isspace(unichar c) {
    return c < 128 && (attr[c] & FL_SPACE) != 0;
    2088:	287f      	cmp	r0, #127	; 0x7f
    208a:	d806      	bhi.n	209a <unichar_isspace+0x12>
    208c:	4b05      	ldr	r3, [pc, #20]	; (20a4 <unichar_isspace+0x1c>)
    208e:	5c1b      	ldrb	r3, [r3, r0]
    2090:	f013 0f02 	tst.w	r3, #2
    2094:	d103      	bne.n	209e <unichar_isspace+0x16>
    2096:	2000      	movs	r0, #0
    2098:	4770      	bx	lr
    209a:	2000      	movs	r0, #0
    209c:	4770      	bx	lr
    209e:	2001      	movs	r0, #1
}
    20a0:	4770      	bx	lr
    20a2:	bf00      	nop
    20a4:	00023730 	.word	0x00023730

000020a8 <unichar_isalpha>:

bool unichar_isalpha(unichar c) {
    return c < 128 && (attr[c] & FL_ALPHA) != 0;
    20a8:	287f      	cmp	r0, #127	; 0x7f
    20aa:	d806      	bhi.n	20ba <unichar_isalpha+0x12>
    20ac:	4b05      	ldr	r3, [pc, #20]	; (20c4 <unichar_isalpha+0x1c>)
    20ae:	5c1b      	ldrb	r3, [r3, r0]
    20b0:	f013 0f08 	tst.w	r3, #8
    20b4:	d103      	bne.n	20be <unichar_isalpha+0x16>
    20b6:	2000      	movs	r0, #0
    20b8:	4770      	bx	lr
    20ba:	2000      	movs	r0, #0
    20bc:	4770      	bx	lr
    20be:	2001      	movs	r0, #1
}
    20c0:	4770      	bx	lr
    20c2:	bf00      	nop
    20c4:	00023730 	.word	0x00023730

000020c8 <unichar_isdigit>:
    return c < 128 && (attr[c] & FL_PRINT) != 0;
}
*/

bool unichar_isdigit(unichar c) {
    return c < 128 && (attr[c] & FL_DIGIT) != 0;
    20c8:	287f      	cmp	r0, #127	; 0x7f
    20ca:	d806      	bhi.n	20da <unichar_isdigit+0x12>
    20cc:	4b05      	ldr	r3, [pc, #20]	; (20e4 <unichar_isdigit+0x1c>)
    20ce:	5c1b      	ldrb	r3, [r3, r0]
    20d0:	f013 0f04 	tst.w	r3, #4
    20d4:	d103      	bne.n	20de <unichar_isdigit+0x16>
    20d6:	2000      	movs	r0, #0
    20d8:	4770      	bx	lr
    20da:	2000      	movs	r0, #0
    20dc:	4770      	bx	lr
    20de:	2001      	movs	r0, #1
}
    20e0:	4770      	bx	lr
    20e2:	bf00      	nop
    20e4:	00023730 	.word	0x00023730

000020e8 <unichar_isxdigit>:

bool unichar_isxdigit(unichar c) {
    return c < 128 && (attr[c] & FL_XDIGIT) != 0;
    20e8:	287f      	cmp	r0, #127	; 0x7f
    20ea:	d806      	bhi.n	20fa <unichar_isxdigit+0x12>
    20ec:	4b05      	ldr	r3, [pc, #20]	; (2104 <unichar_isxdigit+0x1c>)
    20ee:	5c1b      	ldrb	r3, [r3, r0]
    20f0:	f013 0f40 	tst.w	r3, #64	; 0x40
    20f4:	d103      	bne.n	20fe <unichar_isxdigit+0x16>
    20f6:	2000      	movs	r0, #0
    20f8:	4770      	bx	lr
    20fa:	2000      	movs	r0, #0
    20fc:	4770      	bx	lr
    20fe:	2001      	movs	r0, #1
}
    2100:	4770      	bx	lr
    2102:	bf00      	nop
    2104:	00023730 	.word	0x00023730

00002108 <unichar_isident>:

bool unichar_isident(unichar c) {
    return c < 128 && ((attr[c] & (FL_ALPHA | FL_DIGIT)) != 0 || c == '_');
    2108:	287f      	cmp	r0, #127	; 0x7f
    210a:	d808      	bhi.n	211e <unichar_isident+0x16>
    210c:	4b07      	ldr	r3, [pc, #28]	; (212c <unichar_isident+0x24>)
    210e:	5c1b      	ldrb	r3, [r3, r0]
    2110:	f013 0f0c 	tst.w	r3, #12
    2114:	d105      	bne.n	2122 <unichar_isident+0x1a>
    2116:	285f      	cmp	r0, #95	; 0x5f
    2118:	d005      	beq.n	2126 <unichar_isident+0x1e>
    211a:	2000      	movs	r0, #0
    211c:	4770      	bx	lr
    211e:	2000      	movs	r0, #0
    2120:	4770      	bx	lr
    2122:	2001      	movs	r0, #1
    2124:	4770      	bx	lr
    2126:	2001      	movs	r0, #1
}
    2128:	4770      	bx	lr
    212a:	bf00      	nop
    212c:	00023730 	.word	0x00023730

00002130 <unichar_isupper>:

bool unichar_isupper(unichar c) {
    return c < 128 && (attr[c] & FL_UPPER) != 0;
    2130:	287f      	cmp	r0, #127	; 0x7f
    2132:	d806      	bhi.n	2142 <unichar_isupper+0x12>
    2134:	4b05      	ldr	r3, [pc, #20]	; (214c <unichar_isupper+0x1c>)
    2136:	5c1b      	ldrb	r3, [r3, r0]
    2138:	f013 0f10 	tst.w	r3, #16
    213c:	d103      	bne.n	2146 <unichar_isupper+0x16>
    213e:	2000      	movs	r0, #0
    2140:	4770      	bx	lr
    2142:	2000      	movs	r0, #0
    2144:	4770      	bx	lr
    2146:	2001      	movs	r0, #1
}
    2148:	4770      	bx	lr
    214a:	bf00      	nop
    214c:	00023730 	.word	0x00023730

00002150 <unichar_islower>:

bool unichar_islower(unichar c) {
    return c < 128 && (attr[c] & FL_LOWER) != 0;
    2150:	287f      	cmp	r0, #127	; 0x7f
    2152:	d806      	bhi.n	2162 <unichar_islower+0x12>
    2154:	4b05      	ldr	r3, [pc, #20]	; (216c <unichar_islower+0x1c>)
    2156:	5c1b      	ldrb	r3, [r3, r0]
    2158:	f013 0f20 	tst.w	r3, #32
    215c:	d103      	bne.n	2166 <unichar_islower+0x16>
    215e:	2000      	movs	r0, #0
    2160:	4770      	bx	lr
    2162:	2000      	movs	r0, #0
    2164:	4770      	bx	lr
    2166:	2001      	movs	r0, #1
}
    2168:	4770      	bx	lr
    216a:	bf00      	nop
    216c:	00023730 	.word	0x00023730

00002170 <unichar_tolower>:

unichar unichar_tolower(unichar c) {
    2170:	b510      	push	{r4, lr}
    2172:	4604      	mov	r4, r0
    if (unichar_isupper(c)) {
    2174:	f7ff ffdc 	bl	2130 <unichar_isupper>
    2178:	b110      	cbz	r0, 2180 <unichar_tolower+0x10>
        return c + 0x20;
    217a:	f104 0020 	add.w	r0, r4, #32
    }
    return c;
}
    217e:	bd10      	pop	{r4, pc}
    return c;
    2180:	4620      	mov	r0, r4
    2182:	e7fc      	b.n	217e <unichar_tolower+0xe>

00002184 <unichar_toupper>:

unichar unichar_toupper(unichar c) {
    2184:	b510      	push	{r4, lr}
    2186:	4604      	mov	r4, r0
    if (unichar_islower(c)) {
    2188:	f7ff ffe2 	bl	2150 <unichar_islower>
    218c:	b110      	cbz	r0, 2194 <unichar_toupper+0x10>
        return c - 0x20;
    218e:	f1a4 0020 	sub.w	r0, r4, #32
    }
    return c;
}
    2192:	bd10      	pop	{r4, pc}
    return c;
    2194:	4620      	mov	r0, r4
    2196:	e7fc      	b.n	2192 <unichar_toupper+0xe>

00002198 <unichar_xdigit_value>:

mp_uint_t unichar_xdigit_value(unichar c) {
    // c is assumed to be hex digit
    mp_uint_t n = c - '0';
    2198:	3830      	subs	r0, #48	; 0x30
    if (n > 9) {
    219a:	2809      	cmp	r0, #9
    219c:	d902      	bls.n	21a4 <unichar_xdigit_value+0xc>
        n &= ~('a' - 'A');
    219e:	f020 0020 	bic.w	r0, r0, #32
        n -= ('A' - ('9' + 1));
    21a2:	3807      	subs	r0, #7
    }
    return n;
}
    21a4:	4770      	bx	lr

000021a6 <mpn_remove_trailing_zeros>:

 Definition of normalise: ?
*/

STATIC size_t mpn_remove_trailing_zeros(mpz_dig_t *oidig, mpz_dig_t *idig) {
    for (--idig; idig >= oidig && *idig == 0; --idig) {
    21a6:	3902      	subs	r1, #2
    21a8:	e000      	b.n	21ac <mpn_remove_trailing_zeros+0x6>
    21aa:	3902      	subs	r1, #2
    21ac:	4281      	cmp	r1, r0
    21ae:	d302      	bcc.n	21b6 <mpn_remove_trailing_zeros+0x10>
    21b0:	880b      	ldrh	r3, [r1, #0]
    21b2:	2b00      	cmp	r3, #0
    21b4:	d0f9      	beq.n	21aa <mpn_remove_trailing_zeros+0x4>
    }
    return idig + 1 - oidig;
    21b6:	3102      	adds	r1, #2
    21b8:	1a08      	subs	r0, r1, r0
}
    21ba:	1040      	asrs	r0, r0, #1
    21bc:	4770      	bx	lr

000021be <mpn_cmp>:
/* compares i with j
   returns sign(i - j)
   assumes i, j are normalised
*/
STATIC int mpn_cmp(const mpz_dig_t *idig, size_t ilen, const mpz_dig_t *jdig, size_t jlen) {
    if (ilen < jlen) { return -1; }
    21be:	4299      	cmp	r1, r3
    21c0:	d314      	bcc.n	21ec <mpn_cmp+0x2e>
    if (ilen > jlen) { return 1; }
    21c2:	d816      	bhi.n	21f2 <mpn_cmp+0x34>

    for (idig += ilen, jdig += ilen; ilen > 0; --ilen) {
    21c4:	004b      	lsls	r3, r1, #1
    21c6:	4418      	add	r0, r3
    21c8:	441a      	add	r2, r3
    21ca:	b1c9      	cbz	r1, 2200 <mpn_cmp+0x42>
STATIC int mpn_cmp(const mpz_dig_t *idig, size_t ilen, const mpz_dig_t *jdig, size_t jlen) {
    21cc:	b410      	push	{r4}
        mpz_dbl_dig_signed_t cmp = (mpz_dbl_dig_t)*(--idig) - (mpz_dbl_dig_t)*(--jdig);
    21ce:	f830 3d02 	ldrh.w	r3, [r0, #-2]!
    21d2:	f832 4d02 	ldrh.w	r4, [r2, #-2]!
        if (cmp < 0) { return -1; }
    21d6:	1b1b      	subs	r3, r3, r4
    21d8:	d40d      	bmi.n	21f6 <mpn_cmp+0x38>
        if (cmp > 0) { return 1; }
    21da:	2b00      	cmp	r3, #0
    21dc:	dc0e      	bgt.n	21fc <mpn_cmp+0x3e>
    for (idig += ilen, jdig += ilen; ilen > 0; --ilen) {
    21de:	3901      	subs	r1, #1
    21e0:	2900      	cmp	r1, #0
    21e2:	d1f4      	bne.n	21ce <mpn_cmp+0x10>
    }

    return 0;
    21e4:	2000      	movs	r0, #0
}
    21e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    21ea:	4770      	bx	lr
    if (ilen < jlen) { return -1; }
    21ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    21f0:	4770      	bx	lr
    if (ilen > jlen) { return 1; }
    21f2:	2001      	movs	r0, #1
    21f4:	4770      	bx	lr
        if (cmp < 0) { return -1; }
    21f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    21fa:	e7f4      	b.n	21e6 <mpn_cmp+0x28>
        if (cmp > 0) { return 1; }
    21fc:	2001      	movs	r0, #1
    21fe:	e7f2      	b.n	21e6 <mpn_cmp+0x28>
    return 0;
    2200:	2000      	movs	r0, #0
}
    2202:	4770      	bx	lr

00002204 <mpn_shr>:
/* computes i = j >> n
   returns number of digits in i
   assumes enough memory in i; assumes normalised j; assumes n > 0
   can have i, j pointing to same memory
*/
STATIC size_t mpn_shr(mpz_dig_t *idig, mpz_dig_t *jdig, size_t jlen, mp_uint_t n) {
    2204:	b4f0      	push	{r4, r5, r6, r7}
    2206:	4606      	mov	r6, r0
    mp_uint_t n_whole = n / DIG_SIZE;
    2208:	0918      	lsrs	r0, r3, #4
    mp_uint_t n_part = n % DIG_SIZE;

    if (n_whole >= jlen) {
    220a:	4290      	cmp	r0, r2
    220c:	d218      	bcs.n	2240 <mpn_shr+0x3c>
    220e:	f003 030f 	and.w	r3, r3, #15
        return 0;
    }

    jdig += n_whole;
    2212:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    jlen -= n_whole;
    2216:	1a10      	subs	r0, r2, r0

    for (size_t i = jlen; i > 0; i--, idig++, jdig++) {
    2218:	4605      	mov	r5, r0
    221a:	e004      	b.n	2226 <mpn_shr+0x22>
        mpz_dbl_dig_t d = *jdig;
        if (i > 1) {
            d |= (mpz_dbl_dig_t)jdig[1] << DIG_SIZE;
        }
        d >>= n_part;
    221c:	40dc      	lsrs	r4, r3
        *idig = d & DIG_MASK;
    221e:	f826 4b02 	strh.w	r4, [r6], #2
    for (size_t i = jlen; i > 0; i--, idig++, jdig++) {
    2222:	3d01      	subs	r5, #1
    2224:	3102      	adds	r1, #2
    2226:	b135      	cbz	r5, 2236 <mpn_shr+0x32>
        mpz_dbl_dig_t d = *jdig;
    2228:	880c      	ldrh	r4, [r1, #0]
        if (i > 1) {
    222a:	2d01      	cmp	r5, #1
    222c:	d9f6      	bls.n	221c <mpn_shr+0x18>
            d |= (mpz_dbl_dig_t)jdig[1] << DIG_SIZE;
    222e:	884f      	ldrh	r7, [r1, #2]
    2230:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    2234:	e7f2      	b.n	221c <mpn_shr+0x18>
    }

    if (idig[-1] == 0) {
    2236:	f836 3c02 	ldrh.w	r3, [r6, #-2]
    223a:	b913      	cbnz	r3, 2242 <mpn_shr+0x3e>
        jlen--;
    223c:	3801      	subs	r0, #1
    223e:	e000      	b.n	2242 <mpn_shr+0x3e>
        return 0;
    2240:	2000      	movs	r0, #0
    }

    return jlen;
}
    2242:	bcf0      	pop	{r4, r5, r6, r7}
    2244:	4770      	bx	lr

00002246 <mpn_add>:
/* computes i = j + k
   returns number of digits in i
   assumes enough memory in i; assumes normalised j, k; assumes jlen >= klen
   can have i, j, k pointing to same memory
*/
STATIC size_t mpn_add(mpz_dig_t *idig, const mpz_dig_t *jdig, size_t jlen, const mpz_dig_t *kdig, size_t klen) {
    2246:	b4f0      	push	{r4, r5, r6, r7}
    2248:	9f04      	ldr	r7, [sp, #16]
    mpz_dig_t *oidig = idig;
    mpz_dbl_dig_t carry = 0;

    jlen -= klen;
    224a:	1bd2      	subs	r2, r2, r7

    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    224c:	4605      	mov	r5, r0
    mpz_dbl_dig_t carry = 0;
    224e:	2400      	movs	r4, #0
    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    2250:	e009      	b.n	2266 <mpn_add+0x20>
        carry += (mpz_dbl_dig_t)*jdig + (mpz_dbl_dig_t)*kdig;
    2252:	f831 6b02 	ldrh.w	r6, [r1], #2
    2256:	f833 cb02 	ldrh.w	ip, [r3], #2
    225a:	4466      	add	r6, ip
    225c:	4434      	add	r4, r6
        *idig = carry & DIG_MASK;
    225e:	f825 4b02 	strh.w	r4, [r5], #2
        carry >>= DIG_SIZE;
    2262:	0c24      	lsrs	r4, r4, #16
    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    2264:	3f01      	subs	r7, #1
    2266:	2f00      	cmp	r7, #0
    2268:	d1f3      	bne.n	2252 <mpn_add+0xc>
    226a:	e006      	b.n	227a <mpn_add+0x34>
    }

    for (; jlen > 0; --jlen, ++idig, ++jdig) {
        carry += *jdig;
    226c:	f831 3b02 	ldrh.w	r3, [r1], #2
    2270:	441c      	add	r4, r3
        *idig = carry & DIG_MASK;
    2272:	f825 4b02 	strh.w	r4, [r5], #2
        carry >>= DIG_SIZE;
    2276:	0c24      	lsrs	r4, r4, #16
    for (; jlen > 0; --jlen, ++idig, ++jdig) {
    2278:	3a01      	subs	r2, #1
    227a:	2a00      	cmp	r2, #0
    227c:	d1f6      	bne.n	226c <mpn_add+0x26>
    }

    if (carry != 0) {
    227e:	b10c      	cbz	r4, 2284 <mpn_add+0x3e>
        *idig++ = carry;
    2280:	802c      	strh	r4, [r5, #0]
    2282:	3502      	adds	r5, #2
    }

    return idig - oidig;
    2284:	1a28      	subs	r0, r5, r0
}
    2286:	1040      	asrs	r0, r0, #1
    2288:	bcf0      	pop	{r4, r5, r6, r7}
    228a:	4770      	bx	lr

0000228c <mpn_sub>:
/* computes i = j - k
   returns number of digits in i
   assumes enough memory in i; assumes normalised j, k; assumes j >= k
   can have i, j, k pointing to same memory
*/
STATIC size_t mpn_sub(mpz_dig_t *idig, const mpz_dig_t *jdig, size_t jlen, const mpz_dig_t *kdig, size_t klen) {
    228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    228e:	460d      	mov	r5, r1
    2290:	9f06      	ldr	r7, [sp, #24]
    mpz_dig_t *oidig = idig;
    mpz_dbl_dig_signed_t borrow = 0;

    jlen -= klen;
    2292:	1bd2      	subs	r2, r2, r7

    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    2294:	4601      	mov	r1, r0
    mpz_dbl_dig_signed_t borrow = 0;
    2296:	2400      	movs	r4, #0
    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    2298:	e00a      	b.n	22b0 <mpn_sub+0x24>
        borrow += (mpz_dbl_dig_t)*jdig - (mpz_dbl_dig_t)*kdig;
    229a:	f835 6b02 	ldrh.w	r6, [r5], #2
    229e:	f833 cb02 	ldrh.w	ip, [r3], #2
    22a2:	eba6 060c 	sub.w	r6, r6, ip
    22a6:	4434      	add	r4, r6
        *idig = borrow & DIG_MASK;
    22a8:	f821 4b02 	strh.w	r4, [r1], #2
        borrow >>= DIG_SIZE;
    22ac:	1424      	asrs	r4, r4, #16
    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    22ae:	3f01      	subs	r7, #1
    22b0:	2f00      	cmp	r7, #0
    22b2:	d1f2      	bne.n	229a <mpn_sub+0xe>
    22b4:	e006      	b.n	22c4 <mpn_sub+0x38>
    }

    for (; jlen > 0; --jlen, ++idig, ++jdig) {
        borrow += *jdig;
    22b6:	f835 3b02 	ldrh.w	r3, [r5], #2
    22ba:	441c      	add	r4, r3
        *idig = borrow & DIG_MASK;
    22bc:	f821 4b02 	strh.w	r4, [r1], #2
        borrow >>= DIG_SIZE;
    22c0:	1424      	asrs	r4, r4, #16
    for (; jlen > 0; --jlen, ++idig, ++jdig) {
    22c2:	3a01      	subs	r2, #1
    22c4:	2a00      	cmp	r2, #0
    22c6:	d1f6      	bne.n	22b6 <mpn_sub+0x2a>
    }

    return mpn_remove_trailing_zeros(oidig, idig);
    22c8:	f7ff ff6d 	bl	21a6 <mpn_remove_trailing_zeros>
}
    22cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000022ce <mpn_and>:
/* computes i = j & k
   returns number of digits in i
   assumes enough memory in i; assumes normalised j, k; assumes jlen >= klen (jlen argument not needed)
   can have i, j, k pointing to same memory
*/
STATIC size_t mpn_and(mpz_dig_t *idig, const mpz_dig_t *jdig, const mpz_dig_t *kdig, size_t klen) {
    22ce:	b570      	push	{r4, r5, r6, lr}
    22d0:	460d      	mov	r5, r1
    mpz_dig_t *oidig = idig;

    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    22d2:	4601      	mov	r1, r0
    22d4:	e007      	b.n	22e6 <mpn_and+0x18>
        *idig = *jdig & *kdig;
    22d6:	f835 4b02 	ldrh.w	r4, [r5], #2
    22da:	f832 6b02 	ldrh.w	r6, [r2], #2
    22de:	4034      	ands	r4, r6
    22e0:	f821 4b02 	strh.w	r4, [r1], #2
    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    22e4:	3b01      	subs	r3, #1
    22e6:	2b00      	cmp	r3, #0
    22e8:	d1f5      	bne.n	22d6 <mpn_and+0x8>
    }

    return mpn_remove_trailing_zeros(oidig, idig);
    22ea:	f7ff ff5c 	bl	21a6 <mpn_remove_trailing_zeros>
}
    22ee:	bd70      	pop	{r4, r5, r6, pc}

000022f0 <mpn_and_neg>:
   returns number of digits in i
   assumes enough memory in i; assumes normalised j, k; assumes length j >= length k
   can have i, j, k pointing to same memory
*/
STATIC size_t mpn_and_neg(mpz_dig_t *idig, const mpz_dig_t *jdig, size_t jlen, const mpz_dig_t *kdig, size_t klen,
                            mpz_dbl_dig_t carryi, mpz_dbl_dig_t carryj, mpz_dbl_dig_t carryk) {
    22f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22f4:	9f08      	ldr	r7, [sp, #32]
    22f6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    22fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    22fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    mpz_dig_t *oidig = idig;
    mpz_dig_t imask = (0 == carryi) ? 0 : DIG_MASK;
    22fe:	f1ba 0f00 	cmp.w	sl, #0
    2302:	d109      	bne.n	2318 <mpn_and_neg+0x28>
    2304:	f04f 0e00 	mov.w	lr, #0
    mpz_dig_t jmask = (0 == carryj) ? 0 : DIG_MASK;
    2308:	b94d      	cbnz	r5, 231e <mpn_and_neg+0x2e>
    230a:	f04f 0800 	mov.w	r8, #0
    mpz_dig_t kmask = (0 == carryk) ? 0 : DIG_MASK;
    230e:	b94e      	cbnz	r6, 2324 <mpn_and_neg+0x34>
    2310:	f04f 0900 	mov.w	r9, #0

    for (; jlen > 0; ++idig, ++jdig) {
    2314:	4684      	mov	ip, r0
    2316:	e017      	b.n	2348 <mpn_and_neg+0x58>
    mpz_dig_t imask = (0 == carryi) ? 0 : DIG_MASK;
    2318:	f64f 7eff 	movw	lr, #65535	; 0xffff
    231c:	e7f4      	b.n	2308 <mpn_and_neg+0x18>
    mpz_dig_t jmask = (0 == carryj) ? 0 : DIG_MASK;
    231e:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2322:	e7f4      	b.n	230e <mpn_and_neg+0x1e>
    mpz_dig_t kmask = (0 == carryk) ? 0 : DIG_MASK;
    2324:	f64f 79ff 	movw	r9, #65535	; 0xffff
    2328:	e7f4      	b.n	2314 <mpn_and_neg+0x24>
        carryj += *jdig ^ jmask;
        carryk += (--klen <= --jlen) ? (*kdig++ ^ kmask) : kmask;
    232a:	464c      	mov	r4, r9
    232c:	4426      	add	r6, r4
        carryi += ((carryj & carryk) ^ imask) & DIG_MASK;
    232e:	ea05 0406 	and.w	r4, r5, r6
    2332:	ea8e 0404 	eor.w	r4, lr, r4
    2336:	fa1a f484 	uxtah	r4, sl, r4
        *idig = carryi & DIG_MASK;
    233a:	f82c 4b02 	strh.w	r4, [ip], #2
        carryk >>= DIG_SIZE;
    233e:	0c36      	lsrs	r6, r6, #16
        carryj >>= DIG_SIZE;
    2340:	0c2d      	lsrs	r5, r5, #16
        carryi >>= DIG_SIZE;
    2342:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    for (; jlen > 0; ++idig, ++jdig) {
    2346:	3102      	adds	r1, #2
    2348:	b162      	cbz	r2, 2364 <mpn_and_neg+0x74>
        carryj += *jdig ^ jmask;
    234a:	880c      	ldrh	r4, [r1, #0]
    234c:	ea84 0408 	eor.w	r4, r4, r8
    2350:	4425      	add	r5, r4
        carryk += (--klen <= --jlen) ? (*kdig++ ^ kmask) : kmask;
    2352:	3f01      	subs	r7, #1
    2354:	3a01      	subs	r2, #1
    2356:	4297      	cmp	r7, r2
    2358:	d8e7      	bhi.n	232a <mpn_and_neg+0x3a>
    235a:	881c      	ldrh	r4, [r3, #0]
    235c:	ea84 0409 	eor.w	r4, r4, r9
    2360:	3302      	adds	r3, #2
    2362:	e7e3      	b.n	232c <mpn_and_neg+0x3c>
    }

    if (0 != carryi) {
    2364:	f1ba 0f00 	cmp.w	sl, #0
    2368:	d003      	beq.n	2372 <mpn_and_neg+0x82>
        *idig++ = carryi;
    236a:	f8ac a000 	strh.w	sl, [ip]
    236e:	f10c 0c02 	add.w	ip, ip, #2
    }

    return mpn_remove_trailing_zeros(oidig, idig);
    2372:	4661      	mov	r1, ip
    2374:	f7ff ff17 	bl	21a6 <mpn_remove_trailing_zeros>
}
    2378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000237c <mpn_or>:
/* computes i = j | k
   returns number of digits in i
   assumes enough memory in i; assumes normalised j, k; assumes jlen >= klen
   can have i, j, k pointing to same memory
*/
STATIC size_t mpn_or(mpz_dig_t *idig, const mpz_dig_t *jdig, size_t jlen, const mpz_dig_t *kdig, size_t klen) {
    237c:	b4f0      	push	{r4, r5, r6, r7}
    237e:	9e04      	ldr	r6, [sp, #16]
    mpz_dig_t *oidig = idig;

    jlen -= klen;
    2380:	1b92      	subs	r2, r2, r6

    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    2382:	4604      	mov	r4, r0
    2384:	e007      	b.n	2396 <mpn_or+0x1a>
        *idig = *jdig | *kdig;
    2386:	f831 5b02 	ldrh.w	r5, [r1], #2
    238a:	f833 7b02 	ldrh.w	r7, [r3], #2
    238e:	433d      	orrs	r5, r7
    2390:	f824 5b02 	strh.w	r5, [r4], #2
    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    2394:	3e01      	subs	r6, #1
    2396:	2e00      	cmp	r6, #0
    2398:	d1f5      	bne.n	2386 <mpn_or+0xa>
    239a:	e004      	b.n	23a6 <mpn_or+0x2a>
    }

    for (; jlen > 0; --jlen, ++idig, ++jdig) {
        *idig = *jdig;
    239c:	f831 3b02 	ldrh.w	r3, [r1], #2
    23a0:	f824 3b02 	strh.w	r3, [r4], #2
    for (; jlen > 0; --jlen, ++idig, ++jdig) {
    23a4:	3a01      	subs	r2, #1
    23a6:	2a00      	cmp	r2, #0
    23a8:	d1f8      	bne.n	239c <mpn_or+0x20>
    }

    return idig - oidig;
    23aa:	1a20      	subs	r0, r4, r0
}
    23ac:	1040      	asrs	r0, r0, #1
    23ae:	bcf0      	pop	{r4, r5, r6, r7}
    23b0:	4770      	bx	lr

000023b2 <mpn_xor>:
/* computes i = j ^ k
   returns number of digits in i
   assumes enough memory in i; assumes normalised j, k; assumes jlen >= klen
   can have i, j, k pointing to same memory
*/
STATIC size_t mpn_xor(mpz_dig_t *idig, const mpz_dig_t *jdig, size_t jlen, const mpz_dig_t *kdig, size_t klen) {
    23b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23b4:	460c      	mov	r4, r1
    23b6:	9e06      	ldr	r6, [sp, #24]
    mpz_dig_t *oidig = idig;

    jlen -= klen;
    23b8:	1b92      	subs	r2, r2, r6

    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    23ba:	4601      	mov	r1, r0
    23bc:	e007      	b.n	23ce <mpn_xor+0x1c>
        *idig = *jdig ^ *kdig;
    23be:	f834 5b02 	ldrh.w	r5, [r4], #2
    23c2:	f833 7b02 	ldrh.w	r7, [r3], #2
    23c6:	407d      	eors	r5, r7
    23c8:	f821 5b02 	strh.w	r5, [r1], #2
    for (; klen > 0; --klen, ++idig, ++jdig, ++kdig) {
    23cc:	3e01      	subs	r6, #1
    23ce:	2e00      	cmp	r6, #0
    23d0:	d1f5      	bne.n	23be <mpn_xor+0xc>
    23d2:	e004      	b.n	23de <mpn_xor+0x2c>
    }

    for (; jlen > 0; --jlen, ++idig, ++jdig) {
        *idig = *jdig;
    23d4:	f834 3b02 	ldrh.w	r3, [r4], #2
    23d8:	f821 3b02 	strh.w	r3, [r1], #2
    for (; jlen > 0; --jlen, ++idig, ++jdig) {
    23dc:	3a01      	subs	r2, #1
    23de:	2a00      	cmp	r2, #0
    23e0:	d1f8      	bne.n	23d4 <mpn_xor+0x22>
    }

    return mpn_remove_trailing_zeros(oidig, idig);
    23e2:	f7ff fee0 	bl	21a6 <mpn_remove_trailing_zeros>
}
    23e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000023e8 <mpn_xor_neg>:
   returns number of digits in i
   assumes enough memory in i; assumes normalised j, k; assumes length j >= length k
   can have i, j, k pointing to same memory
*/
STATIC size_t mpn_xor_neg(mpz_dig_t *idig, const mpz_dig_t *jdig, size_t jlen, const mpz_dig_t *kdig, size_t klen,
                              mpz_dbl_dig_t carryi, mpz_dbl_dig_t carryj, mpz_dbl_dig_t carryk) {
    23e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23ec:	9f06      	ldr	r7, [sp, #24]
    23ee:	f8dd e01c 	ldr.w	lr, [sp, #28]
    23f2:	9c08      	ldr	r4, [sp, #32]
    23f4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    mpz_dig_t *oidig = idig;

    for (; jlen > 0; ++idig, ++jdig) {
    23f8:	4684      	mov	ip, r0
    23fa:	e00e      	b.n	241a <mpn_xor_neg+0x32>
        carryj += *jdig + DIG_MASK;
        carryk += (--klen <= --jlen) ? (*kdig++ + DIG_MASK) : DIG_MASK;
    23fc:	f64f 75ff 	movw	r5, #65535	; 0xffff
    2400:	4445      	add	r5, r8
        carryi += (carryj ^ carryk) & DIG_MASK;
    2402:	ea84 0605 	eor.w	r6, r4, r5
    2406:	fa1e f686 	uxtah	r6, lr, r6
        *idig = carryi & DIG_MASK;
    240a:	f82c 6b02 	strh.w	r6, [ip], #2
        carryk >>= DIG_SIZE;
    240e:	ea4f 4815 	mov.w	r8, r5, lsr #16
        carryj >>= DIG_SIZE;
    2412:	0c24      	lsrs	r4, r4, #16
        carryi >>= DIG_SIZE;
    2414:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    for (; jlen > 0; ++idig, ++jdig) {
    2418:	3102      	adds	r1, #2
    241a:	b172      	cbz	r2, 243a <mpn_xor_neg+0x52>
        carryj += *jdig + DIG_MASK;
    241c:	880d      	ldrh	r5, [r1, #0]
    241e:	442c      	add	r4, r5
    2420:	f504 447f 	add.w	r4, r4, #65280	; 0xff00
    2424:	34ff      	adds	r4, #255	; 0xff
        carryk += (--klen <= --jlen) ? (*kdig++ + DIG_MASK) : DIG_MASK;
    2426:	3f01      	subs	r7, #1
    2428:	3a01      	subs	r2, #1
    242a:	4297      	cmp	r7, r2
    242c:	d8e6      	bhi.n	23fc <mpn_xor_neg+0x14>
    242e:	881d      	ldrh	r5, [r3, #0]
    2430:	f505 457f 	add.w	r5, r5, #65280	; 0xff00
    2434:	35ff      	adds	r5, #255	; 0xff
    2436:	3302      	adds	r3, #2
    2438:	e7e2      	b.n	2400 <mpn_xor_neg+0x18>
    }

    if (0 != carryi) {
    243a:	f1be 0f00 	cmp.w	lr, #0
    243e:	d003      	beq.n	2448 <mpn_xor_neg+0x60>
        *idig++ = carryi;
    2440:	f8ac e000 	strh.w	lr, [ip]
    2444:	f10c 0c02 	add.w	ip, ip, #2
    }

    return mpn_remove_trailing_zeros(oidig, idig);
    2448:	4661      	mov	r1, ip
    244a:	f7ff feac 	bl	21a6 <mpn_remove_trailing_zeros>
}
    244e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002452 <mpn_mul_dig_add_dig>:

/* computes i = i * d1 + d2
   returns number of digits in i
   assumes enough memory in i; assumes normalised i; assumes dmul != 0
*/
STATIC size_t mpn_mul_dig_add_dig(mpz_dig_t *idig, size_t ilen, mpz_dig_t dmul, mpz_dig_t dadd) {
    2452:	b430      	push	{r4, r5}
    mpz_dig_t *oidig = idig;
    mpz_dbl_dig_t carry = dadd;

    for (; ilen > 0; --ilen, ++idig) {
    2454:	4604      	mov	r4, r0
    2456:	e006      	b.n	2466 <mpn_mul_dig_add_dig+0x14>
        carry += (mpz_dbl_dig_t)*idig * (mpz_dbl_dig_t)dmul; // will never overflow so long as DIG_SIZE <= 8*sizeof(mpz_dbl_dig_t)/2
    2458:	8825      	ldrh	r5, [r4, #0]
    245a:	fb02 3305 	mla	r3, r2, r5, r3
        *idig = carry & DIG_MASK;
    245e:	f824 3b02 	strh.w	r3, [r4], #2
        carry >>= DIG_SIZE;
    2462:	0c1b      	lsrs	r3, r3, #16
    for (; ilen > 0; --ilen, ++idig) {
    2464:	3901      	subs	r1, #1
    2466:	2900      	cmp	r1, #0
    2468:	d1f6      	bne.n	2458 <mpn_mul_dig_add_dig+0x6>
    }

    if (carry != 0) {
    246a:	b10b      	cbz	r3, 2470 <mpn_mul_dig_add_dig+0x1e>
        *idig++ = carry;
    246c:	8023      	strh	r3, [r4, #0]
    246e:	3402      	adds	r4, #2
    }

    return idig - oidig;
    2470:	1a20      	subs	r0, r4, r0
}
    2472:	1040      	asrs	r0, r0, #1
    2474:	bc30      	pop	{r4, r5}
    2476:	4770      	bx	lr

00002478 <mpn_mul>:
/* computes i = j * k
   returns number of digits in i
   assumes enough memory in i; assumes i is zeroed; assumes normalised j, k
   can have j, k point to same memory
*/
STATIC size_t mpn_mul(mpz_dig_t *idig, mpz_dig_t *jdig, size_t jlen, mpz_dig_t *kdig, size_t klen) {
    2478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    247c:	4694      	mov	ip, r2
    247e:	9a08      	ldr	r2, [sp, #32]
    mpz_dig_t *oidig = idig;
    size_t ilen = 0;

    for (; klen > 0; --klen, ++idig, ++kdig) {
    2480:	4686      	mov	lr, r0
    size_t ilen = 0;
    2482:	2500      	movs	r5, #0
    for (; klen > 0; --klen, ++idig, ++kdig) {
    2484:	e017      	b.n	24b6 <mpn_mul+0x3e>
        mpz_dig_t *id = idig;
        mpz_dbl_dig_t carry = 0;

        size_t jl = jlen;
        for (mpz_dig_t *jd = jdig; jl > 0; --jl, ++jd, ++id) {
            carry += (mpz_dbl_dig_t)*id + (mpz_dbl_dig_t)*jd * (mpz_dbl_dig_t)*kdig; // will never overflow so long as DIG_SIZE <= 8*sizeof(mpz_dbl_dig_t)/2
    2486:	f8b5 9000 	ldrh.w	r9, [r5]
    248a:	f838 6b02 	ldrh.w	r6, [r8], #2
    248e:	f8b3 a000 	ldrh.w	sl, [r3]
    2492:	fb0a 9606 	mla	r6, sl, r6, r9
    2496:	4434      	add	r4, r6
            *id = carry & DIG_MASK;
    2498:	f825 4b02 	strh.w	r4, [r5], #2
            carry >>= DIG_SIZE;
    249c:	0c24      	lsrs	r4, r4, #16
        for (mpz_dig_t *jd = jdig; jl > 0; --jl, ++jd, ++id) {
    249e:	3f01      	subs	r7, #1
    24a0:	2f00      	cmp	r7, #0
    24a2:	d1f0      	bne.n	2486 <mpn_mul+0xe>
        }

        if (carry != 0) {
    24a4:	b10c      	cbz	r4, 24aa <mpn_mul+0x32>
            *id++ = carry;
    24a6:	802c      	strh	r4, [r5, #0]
    24a8:	3502      	adds	r5, #2
        }

        ilen = id - oidig;
    24aa:	1a2d      	subs	r5, r5, r0
    24ac:	106d      	asrs	r5, r5, #1
    for (; klen > 0; --klen, ++idig, ++kdig) {
    24ae:	3a01      	subs	r2, #1
    24b0:	f10e 0e02 	add.w	lr, lr, #2
    24b4:	3302      	adds	r3, #2
    24b6:	b122      	cbz	r2, 24c2 <mpn_mul+0x4a>
        for (mpz_dig_t *jd = jdig; jl > 0; --jl, ++jd, ++id) {
    24b8:	4688      	mov	r8, r1
        size_t jl = jlen;
    24ba:	4667      	mov	r7, ip
        mpz_dig_t *id = idig;
    24bc:	4675      	mov	r5, lr
        mpz_dbl_dig_t carry = 0;
    24be:	2400      	movs	r4, #0
    24c0:	e7ee      	b.n	24a0 <mpn_mul+0x28>
    }

    return ilen;
}
    24c2:	4628      	mov	r0, r5
    24c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000024c8 <mpn_div>:
   assumes den != 0
   assumes num_dig has enough memory to be extended by 1 digit
   assumes quo_dig has enough memory (as many digits as num)
   assumes quo_dig is filled with zeros
*/
STATIC void mpn_div(mpz_dig_t *num_dig, size_t *num_len, const mpz_dig_t *den_dig, size_t den_len, mpz_dig_t *quo_dig, size_t *quo_len) {
    24c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24cc:	b085      	sub	sp, #20
    24ce:	4606      	mov	r6, r0
    24d0:	460d      	mov	r5, r1
    24d2:	9201      	str	r2, [sp, #4]
    24d4:	461f      	mov	r7, r3
    mpz_dig_t norm_shift = 0;
    mpz_dbl_dig_t lead_den_digit;

    // handle simple cases
    {
        int cmp = mpn_cmp(num_dig, *num_len, den_dig, den_len);
    24d6:	680c      	ldr	r4, [r1, #0]
    24d8:	4621      	mov	r1, r4
    24da:	f7ff fe70 	bl	21be <mpn_cmp>
        if (cmp == 0) {
    24de:	b148      	cbz	r0, 24f4 <mpn_div+0x2c>
            *num_len = 0;
            quo_dig[0] = 1;
            *quo_len = 1;
            return;
        } else if (cmp < 0) {
    24e0:	2800      	cmp	r0, #0
    24e2:	db11      	blt.n	2508 <mpn_div+0x40>
    // read-only we do the normalisation on the fly, each time a digit of the
    // denominator is needed.  We need to know is how many bits to shift by.

    // count number of leading zeros in leading digit of denominator
    {
        mpz_dig_t d = den_dig[den_len - 1];
    24e4:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
    24e8:	3801      	subs	r0, #1
    24ea:	9b01      	ldr	r3, [sp, #4]
    24ec:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    mpz_dig_t norm_shift = 0;
    24f0:	2100      	movs	r1, #0
        while ((d & DIG_MSB) == 0) {
    24f2:	e011      	b.n	2518 <mpn_div+0x50>
            *num_len = 0;
    24f4:	2300      	movs	r3, #0
    24f6:	602b      	str	r3, [r5, #0]
            quo_dig[0] = 1;
    24f8:	2301      	movs	r3, #1
    24fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    24fc:	8013      	strh	r3, [r2, #0]
            *quo_len = 1;
    24fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2500:	6013      	str	r3, [r2, #0]
    }

    while (*num_len > 0 && orig_num_dig[*num_len - 1] == 0) {
        --(*num_len);
    }
}
    2502:	b005      	add	sp, #20
    2504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *quo_len = 0;
    2508:	2300      	movs	r3, #0
    250a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    250c:	6013      	str	r3, [r2, #0]
            return;
    250e:	e7f8      	b.n	2502 <mpn_div+0x3a>
            d <<= 1;
    2510:	005b      	lsls	r3, r3, #1
    2512:	b29b      	uxth	r3, r3
            ++norm_shift;
    2514:	3101      	adds	r1, #1
    2516:	b289      	uxth	r1, r1
        while ((d & DIG_MSB) == 0) {
    2518:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    251c:	d0f8      	beq.n	2510 <mpn_div+0x48>
    num_dig[*num_len] = 0;
    251e:	2200      	movs	r2, #0
    2520:	f826 2014 	strh.w	r2, [r6, r4, lsl #1]
    ++(*num_len);
    2524:	682b      	ldr	r3, [r5, #0]
    2526:	3301      	adds	r3, #1
    2528:	602b      	str	r3, [r5, #0]
    for (mpz_dig_t *num = num_dig, carry = 0; num < num_dig + *num_len; ++num) {
    252a:	4634      	mov	r4, r6
    252c:	e00a      	b.n	2544 <mpn_div+0x7c>
        mpz_dig_t n = *num;
    252e:	8823      	ldrh	r3, [r4, #0]
        *num = ((n << norm_shift) | carry) & DIG_MASK;
    2530:	fa03 fc01 	lsl.w	ip, r3, r1
    2534:	ea4c 0202 	orr.w	r2, ip, r2
    2538:	f824 2b02 	strh.w	r2, [r4], #2
        carry = (mpz_dbl_dig_t)n >> (DIG_SIZE - norm_shift);
    253c:	f1c1 0210 	rsb	r2, r1, #16
    2540:	40d3      	lsrs	r3, r2
    2542:	b29a      	uxth	r2, r3
    for (mpz_dig_t *num = num_dig, carry = 0; num < num_dig + *num_len; ++num) {
    2544:	682b      	ldr	r3, [r5, #0]
    2546:	eb06 0c43 	add.w	ip, r6, r3, lsl #1
    254a:	45a4      	cmp	ip, r4
    254c:	d8ef      	bhi.n	252e <mpn_div+0x66>
    254e:	469c      	mov	ip, r3
    lead_den_digit = (mpz_dbl_dig_t)den_dig[den_len - 1] << norm_shift;
    2550:	9b01      	ldr	r3, [sp, #4]
    2552:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    2556:	460c      	mov	r4, r1
    2558:	fa02 f001 	lsl.w	r0, r2, r1
    255c:	9002      	str	r0, [sp, #8]
    if (den_len >= 2) {
    255e:	2f01      	cmp	r7, #1
    2560:	d90a      	bls.n	2578 <mpn_div+0xb0>
        lead_den_digit |= (mpz_dbl_dig_t)den_dig[den_len - 2] >> (DIG_SIZE - norm_shift);
    2562:	f107 4200 	add.w	r2, r7, #2147483648	; 0x80000000
    2566:	3a02      	subs	r2, #2
    2568:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    256c:	f1c1 0110 	rsb	r1, r1, #16
    2570:	fa22 f101 	lsr.w	r1, r2, r1
    2574:	4308      	orrs	r0, r1
    2576:	9002      	str	r0, [sp, #8]
    num_dig += *num_len - 1;
    2578:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    257c:	eb0c 0002 	add.w	r0, ip, r2
    2580:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    *quo_len = *num_len - den_len;
    2584:	ebac 0307 	sub.w	r3, ip, r7
    2588:	990f      	ldr	r1, [sp, #60]	; 0x3c
    258a:	600b      	str	r3, [r1, #0]
    quo_dig += *quo_len - 1;
    258c:	4413      	add	r3, r2
    258e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2590:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
    2594:	9603      	str	r6, [sp, #12]
    while (*num_len > den_len) {
    2596:	e045      	b.n	2624 <mpn_div+0x15c>
                borrow += x - (mpz_dbl_dig_t)*n;
    2598:	1a9b      	subs	r3, r3, r2
    259a:	440b      	add	r3, r1
                *n = (-borrow) & DIG_MASK;
    259c:	425a      	negs	r2, r3
    259e:	8032      	strh	r2, [r6, #0]
                borrow = (borrow >> DIG_SIZE) + ((borrow & DIG_MASK) == 0 ? 0 : 1); // shift-right with round-up
    25a0:	b299      	uxth	r1, r3
    25a2:	3100      	adds	r1, #0
    25a4:	bf18      	it	ne
    25a6:	2101      	movne	r1, #1
    25a8:	eb01 4113 	add.w	r1, r1, r3, lsr #16
        for (mpz_dig_t *n = num_dig - den_len; n < num_dig; ++n, ++d) {
    25ac:	3602      	adds	r6, #2
    25ae:	f108 0802 	add.w	r8, r8, #2
    25b2:	42b0      	cmp	r0, r6
    25b4:	d915      	bls.n	25e2 <mpn_div+0x11a>
            d_norm = ((mpz_dbl_dig_t)*d << norm_shift) | (d_norm >> DIG_SIZE);
    25b6:	f8b8 3000 	ldrh.w	r3, [r8]
    25ba:	40a3      	lsls	r3, r4
    25bc:	ea43 4e1e 	orr.w	lr, r3, lr, lsr #16
            mpz_dbl_dig_t x = (mpz_dbl_dig_t)quo * (d_norm & DIG_MASK);
    25c0:	fa1f f38e 	uxth.w	r3, lr
    25c4:	fb0c f303 	mul.w	r3, ip, r3
            if (x >= *n || *n - x <= borrow) {
    25c8:	8832      	ldrh	r2, [r6, #0]
    25ca:	429a      	cmp	r2, r3
    25cc:	d9e4      	bls.n	2598 <mpn_div+0xd0>
    25ce:	eba2 0b03 	sub.w	fp, r2, r3
    25d2:	458b      	cmp	fp, r1
    25d4:	d9e0      	bls.n	2598 <mpn_div+0xd0>
                *n = ((mpz_dbl_dig_t)*n - x - borrow) & DIG_MASK;
    25d6:	1ad3      	subs	r3, r2, r3
    25d8:	b29b      	uxth	r3, r3
    25da:	1a5b      	subs	r3, r3, r1
    25dc:	8033      	strh	r3, [r6, #0]
                borrow = 0;
    25de:	2100      	movs	r1, #0
    25e0:	e7e4      	b.n	25ac <mpn_div+0xe4>
        borrow -= *num_dig;
    25e2:	8803      	ldrh	r3, [r0, #0]
    25e4:	1ac9      	subs	r1, r1, r3
        for (; borrow != 0; --quo) {
    25e6:	e010      	b.n	260a <mpn_div+0x142>
                d_norm = ((mpz_dbl_dig_t)*d << norm_shift) | (d_norm >> DIG_SIZE);
    25e8:	f838 2b02 	ldrh.w	r2, [r8], #2
    25ec:	40a2      	lsls	r2, r4
    25ee:	ea42 4e1e 	orr.w	lr, r2, lr, lsr #16
                carry += (mpz_dbl_dig_t)*n + (d_norm & DIG_MASK);
    25f2:	8832      	ldrh	r2, [r6, #0]
    25f4:	fa12 f28e 	uxtah	r2, r2, lr
    25f8:	4413      	add	r3, r2
                *n = carry & DIG_MASK;
    25fa:	f826 3b02 	strh.w	r3, [r6], #2
                carry >>= DIG_SIZE;
    25fe:	0c1b      	lsrs	r3, r3, #16
            for (mpz_dig_t *n = num_dig - den_len; n < num_dig; ++n, ++d) {
    2600:	42b0      	cmp	r0, r6
    2602:	d8f1      	bhi.n	25e8 <mpn_div+0x120>
            borrow -= carry;
    2604:	1ac9      	subs	r1, r1, r3
        for (; borrow != 0; --quo) {
    2606:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    260a:	b129      	cbz	r1, 2618 <mpn_div+0x150>
            for (mpz_dig_t *n = num_dig - den_len; n < num_dig; ++n, ++d) {
    260c:	464e      	mov	r6, r9
            d = den_dig;
    260e:	f8dd 8004 	ldr.w	r8, [sp, #4]
            mpz_dbl_dig_t carry = 0;
    2612:	2300      	movs	r3, #0
            d_norm = 0;
    2614:	469e      	mov	lr, r3
    2616:	e7f3      	b.n	2600 <mpn_div+0x138>
        *quo_dig = quo & DIG_MASK;
    2618:	f82a c902 	strh.w	ip, [sl], #-2
        --num_dig;
    261c:	3802      	subs	r0, #2
        --(*num_len);
    261e:	682b      	ldr	r3, [r5, #0]
    2620:	3b01      	subs	r3, #1
    2622:	602b      	str	r3, [r5, #0]
    while (*num_len > den_len) {
    2624:	682b      	ldr	r3, [r5, #0]
    2626:	42bb      	cmp	r3, r7
    2628:	d90f      	bls.n	264a <mpn_div+0x182>
        mpz_dbl_dig_t quo = ((mpz_dbl_dig_t)*num_dig << DIG_SIZE) | num_dig[-1];
    262a:	8803      	ldrh	r3, [r0, #0]
    262c:	f830 cc02 	ldrh.w	ip, [r0, #-2]
    2630:	ea4c 4c03 	orr.w	ip, ip, r3, lsl #16
        quo /= lead_den_digit;
    2634:	9b02      	ldr	r3, [sp, #8]
    2636:	fbbc fcf3 	udiv	ip, ip, r3
        for (mpz_dig_t *n = num_dig - den_len; n < num_dig; ++n, ++d) {
    263a:	eba0 0947 	sub.w	r9, r0, r7, lsl #1
    263e:	464e      	mov	r6, r9
        const mpz_dig_t *d = den_dig;
    2640:	f8dd 8004 	ldr.w	r8, [sp, #4]
        mpz_dbl_dig_t borrow = 0;
    2644:	2100      	movs	r1, #0
        mpz_dbl_dig_t d_norm = 0;
    2646:	468e      	mov	lr, r1
        for (mpz_dig_t *n = num_dig - den_len; n < num_dig; ++n, ++d) {
    2648:	e7b3      	b.n	25b2 <mpn_div+0xea>
    264a:	9e03      	ldr	r6, [sp, #12]
    for (mpz_dig_t *num = orig_num_dig + *num_len - 1, carry = 0; num >= orig_num_dig; --num) {
    264c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2650:	3b01      	subs	r3, #1
    2652:	eb06 0043 	add.w	r0, r6, r3, lsl #1
    2656:	2200      	movs	r2, #0
    2658:	e009      	b.n	266e <mpn_div+0x1a6>
        mpz_dig_t n = *num;
    265a:	8803      	ldrh	r3, [r0, #0]
        *num = ((n >> norm_shift) | carry) & DIG_MASK;
    265c:	fa43 f104 	asr.w	r1, r3, r4
    2660:	430a      	orrs	r2, r1
    2662:	f820 2902 	strh.w	r2, [r0], #-2
        carry = (mpz_dbl_dig_t)n << (DIG_SIZE - norm_shift);
    2666:	f1c4 0210 	rsb	r2, r4, #16
    266a:	4093      	lsls	r3, r2
    266c:	b29a      	uxth	r2, r3
    for (mpz_dig_t *num = orig_num_dig + *num_len - 1, carry = 0; num >= orig_num_dig; --num) {
    266e:	42b0      	cmp	r0, r6
    2670:	d2f3      	bcs.n	265a <mpn_div+0x192>
    2672:	980e      	ldr	r0, [sp, #56]	; 0x38
    2674:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2676:	e001      	b.n	267c <mpn_div+0x1b4>
        --(*quo_len);
    2678:	3b01      	subs	r3, #1
    267a:	600b      	str	r3, [r1, #0]
    while (*quo_len > 0 && orig_quo_dig[*quo_len - 1] == 0) {
    267c:	680b      	ldr	r3, [r1, #0]
    267e:	b14b      	cbz	r3, 2694 <mpn_div+0x1cc>
    2680:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
    2684:	3a01      	subs	r2, #1
    2686:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
    268a:	2a00      	cmp	r2, #0
    268c:	d0f4      	beq.n	2678 <mpn_div+0x1b0>
    268e:	e001      	b.n	2694 <mpn_div+0x1cc>
        --(*num_len);
    2690:	3b01      	subs	r3, #1
    2692:	602b      	str	r3, [r5, #0]
    while (*num_len > 0 && orig_num_dig[*num_len - 1] == 0) {
    2694:	682b      	ldr	r3, [r5, #0]
    2696:	2b00      	cmp	r3, #0
    2698:	f43f af33 	beq.w	2502 <mpn_div+0x3a>
    269c:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
    26a0:	3a01      	subs	r2, #1
    26a2:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
    26a6:	2a00      	cmp	r2, #0
    26a8:	d0f2      	beq.n	2690 <mpn_div+0x1c8>
    26aa:	e72a      	b.n	2502 <mpn_div+0x3a>

000026ac <mpz_free>:
    return z;
}
#endif

STATIC void mpz_free(mpz_t *z) {
    if (z != NULL) {
    26ac:	b140      	cbz	r0, 26c0 <mpz_free+0x14>
STATIC void mpz_free(mpz_t *z) {
    26ae:	b510      	push	{r4, lr}
    26b0:	4604      	mov	r4, r0
        m_del(mpz_dig_t, z->dig, z->alloc);
    26b2:	6880      	ldr	r0, [r0, #8]
    26b4:	f7fe f92b 	bl	90e <m_free>
        m_del_obj(mpz_t, z);
    26b8:	4620      	mov	r0, r4
    26ba:	f7fe f928 	bl	90e <m_free>
    }
}
    26be:	bd10      	pop	{r4, pc}
    26c0:	4770      	bx	lr
	...

000026c4 <mpn_or_neg>:
                            mpz_dbl_dig_t carryj, mpz_dbl_dig_t carryk) {
    26c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26c8:	9f08      	ldr	r7, [sp, #32]
    26ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
    26cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    mpz_dig_t jmask = (0 == carryj) ? 0 : DIG_MASK;
    26d0:	b956      	cbnz	r6, 26e8 <mpn_or_neg+0x24>
    26d2:	f04f 0e00 	mov.w	lr, #0
    mpz_dig_t kmask = (0 == carryk) ? 0 : DIG_MASK;
    26d6:	f1ba 0f00 	cmp.w	sl, #0
    26da:	d108      	bne.n	26ee <mpn_or_neg+0x2a>
    26dc:	f04f 0800 	mov.w	r8, #0
    for (; jlen > 0; ++idig, ++jdig) {
    26e0:	4684      	mov	ip, r0
    mpz_dbl_dig_t carryi = 1;
    26e2:	f04f 0901 	mov.w	r9, #1
    for (; jlen > 0; ++idig, ++jdig) {
    26e6:	e014      	b.n	2712 <mpn_or_neg+0x4e>
    mpz_dig_t jmask = (0 == carryj) ? 0 : DIG_MASK;
    26e8:	f64f 7eff 	movw	lr, #65535	; 0xffff
    26ec:	e7f3      	b.n	26d6 <mpn_or_neg+0x12>
    mpz_dig_t kmask = (0 == carryk) ? 0 : DIG_MASK;
    26ee:	f64f 78ff 	movw	r8, #65535	; 0xffff
    26f2:	e7f5      	b.n	26e0 <mpn_or_neg+0x1c>
        carryk += (--klen <= --jlen) ? (*kdig++ ^ kmask) : kmask;
    26f4:	4645      	mov	r5, r8
    26f6:	4455      	add	r5, sl
        carryi += ((carryj | carryk) ^ DIG_MASK) & DIG_MASK;
    26f8:	ea46 0405 	orr.w	r4, r6, r5
    26fc:	43e4      	mvns	r4, r4
    26fe:	fa19 f484 	uxtah	r4, r9, r4
        *idig = carryi & DIG_MASK;
    2702:	f82c 4b02 	strh.w	r4, [ip], #2
        carryk >>= DIG_SIZE;
    2706:	ea4f 4a15 	mov.w	sl, r5, lsr #16
        carryj >>= DIG_SIZE;
    270a:	0c36      	lsrs	r6, r6, #16
        carryi >>= DIG_SIZE;
    270c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    for (; jlen > 0; ++idig, ++jdig) {
    2710:	3102      	adds	r1, #2
    2712:	b162      	cbz	r2, 272e <mpn_or_neg+0x6a>
        carryj += *jdig ^ jmask;
    2714:	880c      	ldrh	r4, [r1, #0]
    2716:	ea84 040e 	eor.w	r4, r4, lr
    271a:	4426      	add	r6, r4
        carryk += (--klen <= --jlen) ? (*kdig++ ^ kmask) : kmask;
    271c:	3f01      	subs	r7, #1
    271e:	3a01      	subs	r2, #1
    2720:	4297      	cmp	r7, r2
    2722:	d8e7      	bhi.n	26f4 <mpn_or_neg+0x30>
    2724:	881d      	ldrh	r5, [r3, #0]
    2726:	ea85 0508 	eor.w	r5, r5, r8
    272a:	3302      	adds	r3, #2
    272c:	e7e3      	b.n	26f6 <mpn_or_neg+0x32>
    assert(carryi == 0);
    272e:	f1b9 0f00 	cmp.w	r9, #0
    2732:	d104      	bne.n	273e <mpn_or_neg+0x7a>
    return mpn_remove_trailing_zeros(oidig, idig);
    2734:	4661      	mov	r1, ip
    2736:	f7ff fd36 	bl	21a6 <mpn_remove_trailing_zeros>
}
    273a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(carryi == 0);
    273e:	4b03      	ldr	r3, [pc, #12]	; (274c <mpn_or_neg+0x88>)
    2740:	4a03      	ldr	r2, [pc, #12]	; (2750 <mpn_or_neg+0x8c>)
    2742:	f44f 719d 	mov.w	r1, #314	; 0x13a
    2746:	4803      	ldr	r0, [pc, #12]	; (2754 <mpn_or_neg+0x90>)
    2748:	f015 ff08 	bl	1855c <__assert_func>
    274c:	0002380c 	.word	0x0002380c
    2750:	000237b0 	.word	0x000237b0
    2754:	00023818 	.word	0x00023818

00002758 <mpz_need_dig>:

STATIC void mpz_need_dig(mpz_t *z, size_t need) {
    2758:	b538      	push	{r3, r4, r5, lr}
    275a:	4604      	mov	r4, r0
    275c:	460d      	mov	r5, r1
    if (need < MIN_ALLOC) {
    275e:	2901      	cmp	r1, #1
    2760:	d913      	bls.n	278a <mpz_need_dig+0x32>
        need = MIN_ALLOC;
    }

    if (z->dig == NULL || z->alloc < need) {
    2762:	68a0      	ldr	r0, [r4, #8]
    2764:	b120      	cbz	r0, 2770 <mpz_need_dig+0x18>
    2766:	6823      	ldr	r3, [r4, #0]
    2768:	f3c3 039d 	ubfx	r3, r3, #2, #30
    276c:	42ab      	cmp	r3, r5
    276e:	d20b      	bcs.n	2788 <mpz_need_dig+0x30>
        // if z has fixed digit buffer there's not much we can do as the caller will
        // be expecting a buffer with at least "need" bytes (but it shouldn't happen)
        assert(!z->fixed_dig);
    2770:	7823      	ldrb	r3, [r4, #0]
    2772:	f013 0f02 	tst.w	r3, #2
    2776:	d10a      	bne.n	278e <mpz_need_dig+0x36>
        z->dig = m_renew(mpz_dig_t, z->dig, z->alloc, need);
    2778:	0069      	lsls	r1, r5, #1
    277a:	f7fe f8b6 	bl	8ea <m_realloc>
    277e:	60a0      	str	r0, [r4, #8]
        z->alloc = need;
    2780:	6823      	ldr	r3, [r4, #0]
    2782:	f365 039f 	bfi	r3, r5, #2, #30
    2786:	6023      	str	r3, [r4, #0]
    }
}
    2788:	bd38      	pop	{r3, r4, r5, pc}
        need = MIN_ALLOC;
    278a:	2502      	movs	r5, #2
    278c:	e7e9      	b.n	2762 <mpz_need_dig+0xa>
        assert(!z->fixed_dig);
    278e:	4b03      	ldr	r3, [pc, #12]	; (279c <mpz_need_dig+0x44>)
    2790:	4a03      	ldr	r2, [pc, #12]	; (27a0 <mpz_need_dig+0x48>)
    2792:	f240 21bd 	movw	r1, #701	; 0x2bd
    2796:	4803      	ldr	r0, [pc, #12]	; (27a4 <mpz_need_dig+0x4c>)
    2798:	f015 fee0 	bl	1855c <__assert_func>
    279c:	00023870 	.word	0x00023870
    27a0:	000237bc 	.word	0x000237bc
    27a4:	00023818 	.word	0x00023818

000027a8 <mpn_shl>:
STATIC size_t mpn_shl(mpz_dig_t *idig, mpz_dig_t *jdig, size_t jlen, mp_uint_t n) {
    27a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mp_uint_t n_whole = (n + DIG_SIZE - 1) / DIG_SIZE;
    27aa:	f103 070f 	add.w	r7, r3, #15
    27ae:	093f      	lsrs	r7, r7, #4
    if (n_part == 0) {
    27b0:	f013 030f 	ands.w	r3, r3, #15
    27b4:	d100      	bne.n	27b8 <mpn_shl+0x10>
        n_part = DIG_SIZE;
    27b6:	2310      	movs	r3, #16
    idig += jlen + n_whole - 1;
    27b8:	18bd      	adds	r5, r7, r2
    27ba:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    27be:	192e      	adds	r6, r5, r4
    27c0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
    jdig += jlen - 1;
    27c4:	4414      	add	r4, r2
    27c6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    mpz_dbl_dig_t d = 0;
    27ca:	2400      	movs	r4, #0
    for (size_t i = jlen; i > 0; i--, idig--, jdig--) {
    27cc:	e00a      	b.n	27e4 <mpn_shl+0x3c>
        d |= *jdig;
    27ce:	f831 6902 	ldrh.w	r6, [r1], #-2
    27d2:	4334      	orrs	r4, r6
        *idig = (d >> (DIG_SIZE - n_part)) & DIG_MASK;
    27d4:	f1c3 0610 	rsb	r6, r3, #16
    27d8:	fa24 f606 	lsr.w	r6, r4, r6
    27dc:	f820 6902 	strh.w	r6, [r0], #-2
        d <<= DIG_SIZE;
    27e0:	0424      	lsls	r4, r4, #16
    for (size_t i = jlen; i > 0; i--, idig--, jdig--) {
    27e2:	3a01      	subs	r2, #1
    27e4:	2a00      	cmp	r2, #0
    27e6:	d1f2      	bne.n	27ce <mpn_shl+0x26>
    *idig = (d >> (DIG_SIZE - n_part)) & DIG_MASK;
    27e8:	f1c3 0310 	rsb	r3, r3, #16
    27ec:	40dc      	lsrs	r4, r3
    27ee:	8004      	strh	r4, [r0, #0]
    idig -= n_whole - 1;
    27f0:	ebc7 73c7 	rsb	r3, r7, r7, lsl #31
    27f4:	005c      	lsls	r4, r3, #1
    27f6:	3402      	adds	r4, #2
    27f8:	4404      	add	r4, r0
    memset(idig, 0, (n_whole - 1) * sizeof(mpz_dig_t));
    27fa:	f107 4200 	add.w	r2, r7, #2147483648	; 0x80000000
    27fe:	3a01      	subs	r2, #1
    2800:	0052      	lsls	r2, r2, #1
    2802:	2100      	movs	r1, #0
    2804:	4620      	mov	r0, r4
    2806:	f019 f839 	bl	1b87c <memset>
    while (jlen != 0 && idig[jlen - 1] == 0) {
    280a:	e000      	b.n	280e <mpn_shl+0x66>
        jlen--;
    280c:	3d01      	subs	r5, #1
    while (jlen != 0 && idig[jlen - 1] == 0) {
    280e:	b135      	cbz	r5, 281e <mpn_shl+0x76>
    2810:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    2814:	3b01      	subs	r3, #1
    2816:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    281a:	2b00      	cmp	r3, #0
    281c:	d0f6      	beq.n	280c <mpn_shl+0x64>
}
    281e:	4628      	mov	r0, r5
    2820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002824 <mpz_clone>:

STATIC mpz_t *mpz_clone(const mpz_t *src) {
    2824:	b538      	push	{r3, r4, r5, lr}
    assert(src->alloc != 0);
    2826:	6803      	ldr	r3, [r0, #0]
    2828:	f033 0303 	bics.w	r3, r3, #3
    282c:	d021      	beq.n	2872 <mpz_clone+0x4e>
    282e:	4605      	mov	r5, r0
    mpz_t *z = m_new_obj(mpz_t);
    2830:	200c      	movs	r0, #12
    2832:	f7fe f843 	bl	8bc <m_malloc>
    2836:	4604      	mov	r4, r0
    z->neg = src->neg;
    2838:	782a      	ldrb	r2, [r5, #0]
    283a:	7803      	ldrb	r3, [r0, #0]
    283c:	f362 0300 	bfi	r3, r2, #0, #1
    z->fixed_dig = 0;
    2840:	f36f 0341 	bfc	r3, #1, #1
    2844:	7003      	strb	r3, [r0, #0]
    z->alloc = src->alloc;
    2846:	6828      	ldr	r0, [r5, #0]
    2848:	f3c0 009d 	ubfx	r0, r0, #2, #30
    284c:	6823      	ldr	r3, [r4, #0]
    284e:	f360 039f 	bfi	r3, r0, #2, #30
    2852:	6023      	str	r3, [r4, #0]
    z->len = src->len;
    2854:	686b      	ldr	r3, [r5, #4]
    2856:	6063      	str	r3, [r4, #4]
    z->dig = m_new(mpz_dig_t, z->alloc);
    2858:	0040      	lsls	r0, r0, #1
    285a:	f7fe f82f 	bl	8bc <m_malloc>
    285e:	60a0      	str	r0, [r4, #8]
    memcpy(z->dig, src->dig, src->alloc * sizeof(mpz_dig_t));
    2860:	682a      	ldr	r2, [r5, #0]
    2862:	f3c2 029d 	ubfx	r2, r2, #2, #30
    2866:	0052      	lsls	r2, r2, #1
    2868:	68a9      	ldr	r1, [r5, #8]
    286a:	f018 ffc3 	bl	1b7f4 <memcpy>
    return z;
}
    286e:	4620      	mov	r0, r4
    2870:	bd38      	pop	{r3, r4, r5, pc}
    assert(src->alloc != 0);
    2872:	4b03      	ldr	r3, [pc, #12]	; (2880 <mpz_clone+0x5c>)
    2874:	4a03      	ldr	r2, [pc, #12]	; (2884 <mpz_clone+0x60>)
    2876:	f44f 7131 	mov.w	r1, #708	; 0x2c4
    287a:	4803      	ldr	r0, [pc, #12]	; (2888 <mpz_clone+0x64>)
    287c:	f015 fe6e 	bl	1855c <__assert_func>
    2880:	0002384c 	.word	0x0002384c
    2884:	000237cc 	.word	0x000237cc
    2888:	00023818 	.word	0x00023818

0000288c <mpz_init_zero>:
    z->neg = 0;
    288c:	7803      	ldrb	r3, [r0, #0]
    z->fixed_dig = 0;
    288e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2892:	f36f 0341 	bfc	r3, #1, #1
    2896:	7003      	strb	r3, [r0, #0]
    z->alloc = 0;
    2898:	6803      	ldr	r3, [r0, #0]
    289a:	f36f 039f 	bfc	r3, #2, #30
    289e:	6003      	str	r3, [r0, #0]
    z->len = 0;
    28a0:	2300      	movs	r3, #0
    28a2:	6043      	str	r3, [r0, #4]
    z->dig = NULL;
    28a4:	6083      	str	r3, [r0, #8]
}
    28a6:	4770      	bx	lr

000028a8 <mpz_deinit>:
    if (z != NULL && !z->fixed_dig) {
    28a8:	b148      	cbz	r0, 28be <mpz_deinit+0x16>
void mpz_deinit(mpz_t *z) {
    28aa:	b508      	push	{r3, lr}
    if (z != NULL && !z->fixed_dig) {
    28ac:	7802      	ldrb	r2, [r0, #0]
    28ae:	f012 0f02 	tst.w	r2, #2
    28b2:	d000      	beq.n	28b6 <mpz_deinit+0xe>
}
    28b4:	bd08      	pop	{r3, pc}
        m_del(mpz_dig_t, z->dig, z->alloc);
    28b6:	6880      	ldr	r0, [r0, #8]
    28b8:	f7fe f829 	bl	90e <m_free>
}
    28bc:	e7fa      	b.n	28b4 <mpz_deinit+0xc>
    28be:	4770      	bx	lr

000028c0 <mpz_set>:

/* sets dest = src
   can have dest, src the same
*/
void mpz_set(mpz_t *dest, const mpz_t *src) {
    28c0:	b538      	push	{r3, r4, r5, lr}
    28c2:	4605      	mov	r5, r0
    28c4:	460c      	mov	r4, r1
    mpz_need_dig(dest, src->len);
    28c6:	6849      	ldr	r1, [r1, #4]
    28c8:	f7ff ff46 	bl	2758 <mpz_need_dig>
    dest->neg = src->neg;
    28cc:	7822      	ldrb	r2, [r4, #0]
    28ce:	782b      	ldrb	r3, [r5, #0]
    28d0:	f362 0300 	bfi	r3, r2, #0, #1
    28d4:	702b      	strb	r3, [r5, #0]
    dest->len = src->len;
    28d6:	6863      	ldr	r3, [r4, #4]
    28d8:	606b      	str	r3, [r5, #4]
    memcpy(dest->dig, src->dig, src->len * sizeof(mpz_dig_t));
    28da:	6862      	ldr	r2, [r4, #4]
    28dc:	0052      	lsls	r2, r2, #1
    28de:	68a1      	ldr	r1, [r4, #8]
    28e0:	68a8      	ldr	r0, [r5, #8]
    28e2:	f018 ff87 	bl	1b7f4 <memcpy>
}
    28e6:	bd38      	pop	{r3, r4, r5, pc}

000028e8 <mpz_set_from_int>:

void mpz_set_from_int(mpz_t *z, mp_int_t val) {
    28e8:	b538      	push	{r3, r4, r5, lr}
    if (val == 0) {
    28ea:	b911      	cbnz	r1, 28f2 <mpz_set_from_int+0xa>
        z->len = 0;
    28ec:	2300      	movs	r3, #0
    28ee:	6043      	str	r3, [r0, #4]
    z->len = 0;
    while (uval > 0) {
        z->dig[z->len++] = uval & DIG_MASK;
        uval >>= DIG_SIZE;
    }
}
    28f0:	bd38      	pop	{r3, r4, r5, pc}
    28f2:	460c      	mov	r4, r1
    28f4:	4605      	mov	r5, r0
    mpz_need_dig(z, MPZ_NUM_DIG_FOR_INT);
    28f6:	2102      	movs	r1, #2
    28f8:	f7ff ff2e 	bl	2758 <mpz_need_dig>
    if (val < 0) {
    28fc:	2c00      	cmp	r4, #0
    28fe:	db06      	blt.n	290e <mpz_set_from_int+0x26>
        z->neg = 0;
    2900:	782b      	ldrb	r3, [r5, #0]
    2902:	f36f 0300 	bfc	r3, #0, #1
    2906:	702b      	strb	r3, [r5, #0]
    z->len = 0;
    2908:	2300      	movs	r3, #0
    290a:	606b      	str	r3, [r5, #4]
    while (uval > 0) {
    290c:	e00c      	b.n	2928 <mpz_set_from_int+0x40>
        z->neg = 1;
    290e:	782b      	ldrb	r3, [r5, #0]
    2910:	f043 0301 	orr.w	r3, r3, #1
    2914:	702b      	strb	r3, [r5, #0]
        uval = -val;
    2916:	4264      	negs	r4, r4
    2918:	e7f6      	b.n	2908 <mpz_set_from_int+0x20>
        z->dig[z->len++] = uval & DIG_MASK;
    291a:	68aa      	ldr	r2, [r5, #8]
    291c:	686b      	ldr	r3, [r5, #4]
    291e:	1c58      	adds	r0, r3, #1
    2920:	6068      	str	r0, [r5, #4]
    2922:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
        uval >>= DIG_SIZE;
    2926:	0c24      	lsrs	r4, r4, #16
    while (uval > 0) {
    2928:	2c00      	cmp	r4, #0
    292a:	d1f6      	bne.n	291a <mpz_set_from_int+0x32>
    292c:	e7e0      	b.n	28f0 <mpz_set_from_int+0x8>

0000292e <mpz_init_from_int>:
void mpz_init_from_int(mpz_t *z, mp_int_t val) {
    292e:	b538      	push	{r3, r4, r5, lr}
    2930:	4604      	mov	r4, r0
    2932:	460d      	mov	r5, r1
    mpz_init_zero(z);
    2934:	f7ff ffaa 	bl	288c <mpz_init_zero>
    mpz_set_from_int(z, val);
    2938:	4629      	mov	r1, r5
    293a:	4620      	mov	r0, r4
    293c:	f7ff ffd4 	bl	28e8 <mpz_set_from_int>
}
    2940:	bd38      	pop	{r3, r4, r5, pc}

00002942 <mpz_init_fixed_from_int>:
void mpz_init_fixed_from_int(mpz_t *z, mpz_dig_t *dig, size_t alloc, mp_int_t val) {
    2942:	b538      	push	{r3, r4, r5, lr}
    z->neg = 0;
    2944:	7805      	ldrb	r5, [r0, #0]
    z->fixed_dig = 1;
    2946:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    294a:	f045 0502 	orr.w	r5, r5, #2
    294e:	7005      	strb	r5, [r0, #0]
    z->alloc = alloc;
    2950:	6805      	ldr	r5, [r0, #0]
    2952:	f362 059f 	bfi	r5, r2, #2, #30
    2956:	6005      	str	r5, [r0, #0]
    z->len = 0;
    2958:	2200      	movs	r2, #0
    295a:	6042      	str	r2, [r0, #4]
    z->dig = dig;
    295c:	6081      	str	r1, [r0, #8]
    mpz_set_from_int(z, val);
    295e:	4619      	mov	r1, r3
    2960:	f7ff ffc2 	bl	28e8 <mpz_set_from_int>
}
    2964:	bd38      	pop	{r3, r4, r5, pc}

00002966 <mpz_set_from_ll>:

void mpz_set_from_ll(mpz_t *z, long long val, bool is_signed) {
    2966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2968:	4604      	mov	r4, r0
    296a:	4616      	mov	r6, r2
    296c:	461f      	mov	r7, r3
    296e:	f89d 5018 	ldrb.w	r5, [sp, #24]
    mpz_need_dig(z, MPZ_NUM_DIG_FOR_LL);
    2972:	2104      	movs	r1, #4
    2974:	f7ff fef0 	bl	2758 <mpz_need_dig>

    unsigned long long uval;
    if (is_signed && val < 0) {
    2978:	b11d      	cbz	r5, 2982 <mpz_set_from_ll+0x1c>
    297a:	2e00      	cmp	r6, #0
    297c:	f177 0300 	sbcs.w	r3, r7, #0
    2980:	db06      	blt.n	2990 <mpz_set_from_ll+0x2a>
        z->neg = 1;
        uval = -val;
    } else {
        z->neg = 0;
    2982:	7823      	ldrb	r3, [r4, #0]
    2984:	f36f 0300 	bfc	r3, #0, #1
    2988:	7023      	strb	r3, [r4, #0]
        uval = val;
    }

    z->len = 0;
    298a:	2100      	movs	r1, #0
    298c:	6061      	str	r1, [r4, #4]
    while (uval > 0) {
    298e:	e013      	b.n	29b8 <mpz_set_from_ll+0x52>
        z->neg = 1;
    2990:	7823      	ldrb	r3, [r4, #0]
    2992:	f043 0301 	orr.w	r3, r3, #1
    2996:	7023      	strb	r3, [r4, #0]
        uval = -val;
    2998:	4276      	negs	r6, r6
    299a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
    299e:	e7f4      	b.n	298a <mpz_set_from_ll+0x24>
        z->dig[z->len++] = uval & DIG_MASK;
    29a0:	68a0      	ldr	r0, [r4, #8]
    29a2:	6861      	ldr	r1, [r4, #4]
    29a4:	1c4d      	adds	r5, r1, #1
    29a6:	6065      	str	r5, [r4, #4]
    29a8:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
        uval >>= DIG_SIZE;
    29ac:	0c31      	lsrs	r1, r6, #16
    29ae:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    29b2:	0c38      	lsrs	r0, r7, #16
    29b4:	460e      	mov	r6, r1
    29b6:	4607      	mov	r7, r0
    while (uval > 0) {
    29b8:	ea56 0307 	orrs.w	r3, r6, r7
    29bc:	d1f0      	bne.n	29a0 <mpz_set_from_ll+0x3a>
    }
}
    29be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000029c0 <mpz_set_from_float>:

#if MICROPY_PY_BUILTINS_FLOAT
void mpz_set_from_float(mpz_t *z, mp_float_t src) {
    29c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29c4:	4606      	mov	r6, r0
    29c6:	ee10 4a10 	vmov	r4, s0
        #else
        struct { mp_float_int_t sgn:1, exp:MP_FLOAT_EXP_BITS, frc:MP_FLOAT_FRAC_BITS; } p;
        #endif
    } u = {src};

    z->neg = u.p.sgn;
    29ca:	0fe2      	lsrs	r2, r4, #31
    29cc:	7803      	ldrb	r3, [r0, #0]
    29ce:	f362 0300 	bfi	r3, r2, #0, #1
    29d2:	7003      	strb	r3, [r0, #0]
    if (u.p.exp == 0) {
    29d4:	f3c4 430f 	ubfx	r3, r4, #16, #16
    29d8:	f413 43ff 	ands.w	r3, r3, #32640	; 0x7f80
    29dc:	d035      	beq.n	2a4a <mpz_set_from_float+0x8a>
    29de:	ee10 5a10 	vmov	r5, s0
        // value == 0 || value < 1
        mpz_set_from_int(z, 0);
    } else if (u.p.exp == ((1 << MP_FLOAT_EXP_BITS) - 1)) {
    29e2:	f5b3 4fff 	cmp.w	r3, #32640	; 0x7f80
    29e6:	d034      	beq.n	2a52 <mpz_set_from_float+0x92>
        // u.p.frc == 0 indicates inf, else NaN
        // should be handled by caller
        mpz_set_from_int(z, 0);
    } else {
        const int adj_exp = (int)u.p.exp - MP_FLOAT_EXP_BIAS;
    29e8:	f3c4 54c7 	ubfx	r4, r4, #23, #8
        if (adj_exp < 0) {
    29ec:	f1b4 037f 	subs.w	r3, r4, #127	; 0x7f
    29f0:	d433      	bmi.n	2a5a <mpz_set_from_float+0x9a>
            // value < 1 , truncates to 0
            mpz_set_from_int(z, 0);
        } else if (adj_exp == 0) {
    29f2:	b3b3      	cbz	r3, 2a62 <mpz_set_from_float+0xa2>
            // 1 <= value < 2 , so truncates to 1
            mpz_set_from_int(z, 1);
        } else {
            // 2 <= value
            const int dig_cnt = (adj_exp + 1 + (DIG_SIZE - 1)) / DIG_SIZE;
    29f4:	f1b4 076f 	subs.w	r7, r4, #111	; 0x6f
    29f8:	d437      	bmi.n	2a6a <mpz_set_from_float+0xaa>
    29fa:	113f      	asrs	r7, r7, #4
            const unsigned int rem = adj_exp % DIG_SIZE;
    29fc:	425a      	negs	r2, r3
    29fe:	f003 010f 	and.w	r1, r3, #15
    2a02:	f002 020f 	and.w	r2, r2, #15
    2a06:	bf58      	it	pl
    2a08:	4251      	negpl	r1, r2
            int dig_ind, shft;
            mp_float_int_t frc = u.p.frc | ((mp_float_int_t)1 << MP_FLOAT_FRAC_BITS);
    2a0a:	f3c5 0516 	ubfx	r5, r5, #0, #23
    2a0e:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000

            if (adj_exp < MP_FLOAT_FRAC_BITS) {
    2a12:	2b16      	cmp	r3, #22
    2a14:	dc2b      	bgt.n	2a6e <mpz_set_from_float+0xae>
                shft = 0;
                dig_ind = 0;
                frc >>= MP_FLOAT_FRAC_BITS - adj_exp;
    2a16:	f1c3 0317 	rsb	r3, r3, #23
    2a1a:	40dd      	lsrs	r5, r3
                shft = 0;
    2a1c:	f04f 0800 	mov.w	r8, #0
                dig_ind = 0;
    2a20:	4644      	mov	r4, r8
            } else {
                shft = (rem - MP_FLOAT_FRAC_BITS) % DIG_SIZE;
                dig_ind = (adj_exp - MP_FLOAT_FRAC_BITS) / DIG_SIZE;
            }
            mpz_need_dig(z, dig_cnt);
    2a22:	4639      	mov	r1, r7
    2a24:	4630      	mov	r0, r6
    2a26:	f7ff fe97 	bl	2758 <mpz_need_dig>
            z->len = dig_cnt;
    2a2a:	6077      	str	r7, [r6, #4]
            if (dig_ind != 0) {
    2a2c:	bb4c      	cbnz	r4, 2a82 <mpz_set_from_float+0xc2>
                memset(z->dig, 0, dig_ind * sizeof(mpz_dig_t));
            }
            if (shft != 0) {
    2a2e:	f1b8 0f00 	cmp.w	r8, #0
    2a32:	d031      	beq.n	2a98 <mpz_set_from_float+0xd8>
                z->dig[dig_ind++] = (frc << shft) & DIG_MASK;
    2a34:	fa05 f208 	lsl.w	r2, r5, r8
    2a38:	68b3      	ldr	r3, [r6, #8]
    2a3a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
                frc >>= DIG_SIZE - shft;
    2a3e:	f1c8 0810 	rsb	r8, r8, #16
    2a42:	fa25 f508 	lsr.w	r5, r5, r8
                z->dig[dig_ind++] = (frc << shft) & DIG_MASK;
    2a46:	3401      	adds	r4, #1
    2a48:	e026      	b.n	2a98 <mpz_set_from_float+0xd8>
        mpz_set_from_int(z, 0);
    2a4a:	2100      	movs	r1, #0
    2a4c:	f7ff ff4c 	bl	28e8 <mpz_set_from_int>
    2a50:	e024      	b.n	2a9c <mpz_set_from_float+0xdc>
        mpz_set_from_int(z, 0);
    2a52:	2100      	movs	r1, #0
    2a54:	f7ff ff48 	bl	28e8 <mpz_set_from_int>
    2a58:	e020      	b.n	2a9c <mpz_set_from_float+0xdc>
            mpz_set_from_int(z, 0);
    2a5a:	2100      	movs	r1, #0
    2a5c:	f7ff ff44 	bl	28e8 <mpz_set_from_int>
    2a60:	e01c      	b.n	2a9c <mpz_set_from_float+0xdc>
            mpz_set_from_int(z, 1);
    2a62:	2101      	movs	r1, #1
    2a64:	f7ff ff40 	bl	28e8 <mpz_set_from_int>
    2a68:	e018      	b.n	2a9c <mpz_set_from_float+0xdc>
            const int dig_cnt = (adj_exp + 1 + (DIG_SIZE - 1)) / DIG_SIZE;
    2a6a:	370f      	adds	r7, #15
    2a6c:	e7c5      	b.n	29fa <mpz_set_from_float+0x3a>
                shft = (rem - MP_FLOAT_FRAC_BITS) % DIG_SIZE;
    2a6e:	f1a1 0817 	sub.w	r8, r1, #23
    2a72:	f008 080f 	and.w	r8, r8, #15
                dig_ind = (adj_exp - MP_FLOAT_FRAC_BITS) / DIG_SIZE;
    2a76:	3c96      	subs	r4, #150	; 0x96
    2a78:	d401      	bmi.n	2a7e <mpz_set_from_float+0xbe>
    2a7a:	1124      	asrs	r4, r4, #4
    2a7c:	e7d1      	b.n	2a22 <mpz_set_from_float+0x62>
    2a7e:	340f      	adds	r4, #15
    2a80:	e7fb      	b.n	2a7a <mpz_set_from_float+0xba>
                memset(z->dig, 0, dig_ind * sizeof(mpz_dig_t));
    2a82:	0062      	lsls	r2, r4, #1
    2a84:	2100      	movs	r1, #0
    2a86:	68b0      	ldr	r0, [r6, #8]
    2a88:	f018 fef8 	bl	1b87c <memset>
    2a8c:	e7cf      	b.n	2a2e <mpz_set_from_float+0x6e>
            }
#if DIG_SIZE < (MP_FLOAT_FRAC_BITS + 1)
            while (dig_ind != dig_cnt) {
                z->dig[dig_ind++] = frc & DIG_MASK;
    2a8e:	68b3      	ldr	r3, [r6, #8]
    2a90:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
                frc >>= DIG_SIZE;
    2a94:	0c2d      	lsrs	r5, r5, #16
                z->dig[dig_ind++] = frc & DIG_MASK;
    2a96:	3401      	adds	r4, #1
            while (dig_ind != dig_cnt) {
    2a98:	42bc      	cmp	r4, r7
    2a9a:	d1f8      	bne.n	2a8e <mpz_set_from_float+0xce>
                z->dig[dig_ind] = frc;
            }
#endif
        }
    }
}
    2a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002aa0 <mpz_set_from_str>:
#endif

// returns number of bytes from str that were processed
size_t mpz_set_from_str(mpz_t *z, const char *str, size_t len, bool neg, unsigned int base) {
    2aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aa4:	9e06      	ldr	r6, [sp, #24]
    assert(base <= 36);
    2aa6:	2e24      	cmp	r6, #36	; 0x24
    2aa8:	d811      	bhi.n	2ace <mpz_set_from_str+0x2e>
    2aaa:	4605      	mov	r5, r0
    2aac:	4688      	mov	r8, r1
    2aae:	461c      	mov	r4, r3

    const char *cur = str;
    const char *top = str + len;
    2ab0:	188f      	adds	r7, r1, r2

    mpz_need_dig(z, len * 8 / DIG_SIZE + 1);
    2ab2:	f3c2 025b 	ubfx	r2, r2, #1, #28
    2ab6:	1c51      	adds	r1, r2, #1
    2ab8:	f7ff fe4e 	bl	2758 <mpz_need_dig>

    if (neg) {
    2abc:	b174      	cbz	r4, 2adc <mpz_set_from_str+0x3c>
        z->neg = 1;
    2abe:	782b      	ldrb	r3, [r5, #0]
    2ac0:	f043 0301 	orr.w	r3, r3, #1
    2ac4:	702b      	strb	r3, [r5, #0]
    } else {
        z->neg = 0;
    }

    z->len = 0;
    2ac6:	2300      	movs	r3, #0
    2ac8:	606b      	str	r3, [r5, #4]
    const char *cur = str;
    2aca:	4644      	mov	r4, r8
    for (; cur < top; ++cur) { // XXX UTF8 next char
    2acc:	e01b      	b.n	2b06 <mpz_set_from_str+0x66>
    assert(base <= 36);
    2ace:	4b17      	ldr	r3, [pc, #92]	; (2b2c <mpz_set_from_str+0x8c>)
    2ad0:	4a17      	ldr	r2, [pc, #92]	; (2b30 <mpz_set_from_str+0x90>)
    2ad2:	f240 314d 	movw	r1, #845	; 0x34d
    2ad6:	4817      	ldr	r0, [pc, #92]	; (2b34 <mpz_set_from_str+0x94>)
    2ad8:	f015 fd40 	bl	1855c <__assert_func>
        z->neg = 0;
    2adc:	782b      	ldrb	r3, [r5, #0]
    2ade:	f36f 0300 	bfc	r3, #0, #1
    2ae2:	702b      	strb	r3, [r5, #0]
    2ae4:	e7ef      	b.n	2ac6 <mpz_set_from_str+0x26>
        mp_uint_t v = *cur;
        if ('0' <= v && v <= '9') {
            v -= '0';
        } else if ('A' <= v && v <= 'Z') {
            v -= 'A' - 10;
        } else if ('a' <= v && v <= 'z') {
    2ae6:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    2aea:	2b19      	cmp	r3, #25
    2aec:	d819      	bhi.n	2b22 <mpz_set_from_str+0x82>
            v -= 'a' - 10;
    2aee:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
        } else {
            break;
        }
        if (v >= base) {
    2af2:	42b3      	cmp	r3, r6
    2af4:	d215      	bcs.n	2b22 <mpz_set_from_str+0x82>
            break;
        }
        z->len = mpn_mul_dig_add_dig(z->dig, z->len, base, v);
    2af6:	b29b      	uxth	r3, r3
    2af8:	b2b2      	uxth	r2, r6
    2afa:	6869      	ldr	r1, [r5, #4]
    2afc:	68a8      	ldr	r0, [r5, #8]
    2afe:	f7ff fca8 	bl	2452 <mpn_mul_dig_add_dig>
    2b02:	6068      	str	r0, [r5, #4]
    for (; cur < top; ++cur) { // XXX UTF8 next char
    2b04:	3401      	adds	r4, #1
    2b06:	42bc      	cmp	r4, r7
    2b08:	d20b      	bcs.n	2b22 <mpz_set_from_str+0x82>
        mp_uint_t v = *cur;
    2b0a:	7822      	ldrb	r2, [r4, #0]
        if ('0' <= v && v <= '9') {
    2b0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    2b10:	2b09      	cmp	r3, #9
    2b12:	d9ee      	bls.n	2af2 <mpz_set_from_str+0x52>
        } else if ('A' <= v && v <= 'Z') {
    2b14:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    2b18:	2b19      	cmp	r3, #25
    2b1a:	d8e4      	bhi.n	2ae6 <mpz_set_from_str+0x46>
            v -= 'A' - 10;
    2b1c:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    2b20:	e7e7      	b.n	2af2 <mpz_set_from_str+0x52>
    }

    return cur - str;
}
    2b22:	eba4 0008 	sub.w	r0, r4, r8
    2b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b2a:	bf00      	nop
    2b2c:	00023880 	.word	0x00023880
    2b30:	000237d8 	.word	0x000237d8
    2b34:	00023818 	.word	0x00023818

00002b38 <mpz_set_from_bytes>:

void mpz_set_from_bytes(mpz_t *z, bool big_endian, size_t len, const byte *buf) {
    2b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b3a:	4607      	mov	r7, r0
    2b3c:	4614      	mov	r4, r2
    2b3e:	461d      	mov	r5, r3
    int delta = 1;
    if (big_endian) {
    2b40:	b121      	cbz	r1, 2b4c <mpz_set_from_bytes+0x14>
        buf += len - 1;
    2b42:	1e53      	subs	r3, r2, #1
    2b44:	441d      	add	r5, r3
        delta = -1;
    2b46:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    2b4a:	e000      	b.n	2b4e <mpz_set_from_bytes+0x16>
    int delta = 1;
    2b4c:	2601      	movs	r6, #1
    }

    mpz_need_dig(z, (len * 8 + DIG_SIZE - 1) / DIG_SIZE);
    2b4e:	1ca1      	adds	r1, r4, #2
    2b50:	00c9      	lsls	r1, r1, #3
    2b52:	3901      	subs	r1, #1
    2b54:	0909      	lsrs	r1, r1, #4
    2b56:	4638      	mov	r0, r7
    2b58:	f7ff fdfe 	bl	2758 <mpz_need_dig>

    mpz_dig_t d = 0;
    int num_bits = 0;
    z->neg = 0;
    2b5c:	783b      	ldrb	r3, [r7, #0]
    2b5e:	f36f 0300 	bfc	r3, #0, #1
    2b62:	703b      	strb	r3, [r7, #0]
    z->len = 0;
    2b64:	2300      	movs	r3, #0
    2b66:	607b      	str	r3, [r7, #4]
    while (len) {
    2b68:	e010      	b.n	2b8c <mpz_set_from_bytes+0x54>
        while (len && num_bits < DIG_SIZE) {
            d |= *buf << num_bits;
    2b6a:	7829      	ldrb	r1, [r5, #0]
    2b6c:	4099      	lsls	r1, r3
    2b6e:	430a      	orrs	r2, r1
    2b70:	b292      	uxth	r2, r2
            num_bits += 8;
    2b72:	3308      	adds	r3, #8
            buf += delta;
    2b74:	4435      	add	r5, r6
            len--;
    2b76:	3c01      	subs	r4, #1
        while (len && num_bits < DIG_SIZE) {
    2b78:	b10c      	cbz	r4, 2b7e <mpz_set_from_bytes+0x46>
    2b7a:	2b0f      	cmp	r3, #15
    2b7c:	ddf5      	ble.n	2b6a <mpz_set_from_bytes+0x32>
        }
        z->dig[z->len++] = d & DIG_MASK;
    2b7e:	6879      	ldr	r1, [r7, #4]
    2b80:	1c48      	adds	r0, r1, #1
    2b82:	6078      	str	r0, [r7, #4]
    2b84:	68b8      	ldr	r0, [r7, #8]
    2b86:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
        #if DIG_SIZE != 8 && DIG_SIZE != 16 && DIG_SIZE != 32
        d >>= DIG_SIZE;
        #else
        d = 0;
        #endif
        num_bits -= DIG_SIZE;
    2b8a:	3b10      	subs	r3, #16
    while (len) {
    2b8c:	b10c      	cbz	r4, 2b92 <mpz_set_from_bytes+0x5a>
    2b8e:	2200      	movs	r2, #0
    2b90:	e7f2      	b.n	2b78 <mpz_set_from_bytes+0x40>
    }

    z->len = mpn_remove_trailing_zeros(z->dig, z->dig + z->len);
    2b92:	68b8      	ldr	r0, [r7, #8]
    2b94:	6879      	ldr	r1, [r7, #4]
    2b96:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    2b9a:	f7ff fb04 	bl	21a6 <mpn_remove_trailing_zeros>
    2b9e:	6078      	str	r0, [r7, #4]
}
    2ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002ba2 <mpz_cmp>:
bool mpz_is_even(const mpz_t *z) {
    return z->len == 0 || (z->dig[0] & 1) == 0;
}
#endif

int mpz_cmp(const mpz_t *z1, const mpz_t *z2) {
    2ba2:	b538      	push	{r3, r4, r5, lr}
    2ba4:	4604      	mov	r4, r0
    // to catch comparison of -0 with +0
    if (z1->len == 0 && z2->len == 0) {
    2ba6:	6845      	ldr	r5, [r0, #4]
    2ba8:	b90d      	cbnz	r5, 2bae <mpz_cmp+0xc>
    2baa:	684b      	ldr	r3, [r1, #4]
    2bac:	b19b      	cbz	r3, 2bd6 <mpz_cmp+0x34>
        return 0;
    }
    int cmp = (int)z2->neg - (int)z1->neg;
    2bae:	780b      	ldrb	r3, [r1, #0]
    2bb0:	f003 0301 	and.w	r3, r3, #1
    2bb4:	7820      	ldrb	r0, [r4, #0]
    2bb6:	f000 0001 	and.w	r0, r0, #1
    if (cmp != 0) {
    2bba:	1a18      	subs	r0, r3, r0
    2bbc:	d10c      	bne.n	2bd8 <mpz_cmp+0x36>
        return cmp;
    }
    cmp = mpn_cmp(z1->dig, z1->len, z2->dig, z2->len);
    2bbe:	684b      	ldr	r3, [r1, #4]
    2bc0:	688a      	ldr	r2, [r1, #8]
    2bc2:	4629      	mov	r1, r5
    2bc4:	68a0      	ldr	r0, [r4, #8]
    2bc6:	f7ff fafa 	bl	21be <mpn_cmp>
    if (z1->neg != 0) {
    2bca:	7823      	ldrb	r3, [r4, #0]
    2bcc:	f013 0f01 	tst.w	r3, #1
    2bd0:	d002      	beq.n	2bd8 <mpz_cmp+0x36>
        cmp = -cmp;
    2bd2:	4240      	negs	r0, r0
    2bd4:	e000      	b.n	2bd8 <mpz_cmp+0x36>
        return 0;
    2bd6:	2000      	movs	r0, #0
    }
    return cmp;
}
    2bd8:	bd38      	pop	{r3, r4, r5, pc}

00002bda <mpz_abs_inpl>:
#endif

/* computes dest = abs(z)
   can have dest, z the same
*/
void mpz_abs_inpl(mpz_t *dest, const mpz_t *z) {
    2bda:	b510      	push	{r4, lr}
    2bdc:	4604      	mov	r4, r0
    if (dest != z) {
    2bde:	4288      	cmp	r0, r1
    2be0:	d001      	beq.n	2be6 <mpz_abs_inpl+0xc>
        mpz_set(dest, z);
    2be2:	f7ff fe6d 	bl	28c0 <mpz_set>
    }
    dest->neg = 0;
    2be6:	7823      	ldrb	r3, [r4, #0]
    2be8:	f36f 0300 	bfc	r3, #0, #1
    2bec:	7023      	strb	r3, [r4, #0]
}
    2bee:	bd10      	pop	{r4, pc}

00002bf0 <mpz_neg_inpl>:

/* computes dest = -z
   can have dest, z the same
*/
void mpz_neg_inpl(mpz_t *dest, const mpz_t *z) {
    2bf0:	b510      	push	{r4, lr}
    2bf2:	4604      	mov	r4, r0
    if (dest != z) {
    2bf4:	4288      	cmp	r0, r1
    2bf6:	d001      	beq.n	2bfc <mpz_neg_inpl+0xc>
        mpz_set(dest, z);
    2bf8:	f7ff fe62 	bl	28c0 <mpz_set>
    }
    dest->neg = 1 - dest->neg;
    2bfc:	7823      	ldrb	r3, [r4, #0]
    2bfe:	f003 0201 	and.w	r2, r3, #1
    2c02:	f082 0201 	eor.w	r2, r2, #1
    2c06:	f362 0300 	bfi	r3, r2, #0, #1
    2c0a:	7023      	strb	r3, [r4, #0]
}
    2c0c:	bd10      	pop	{r4, pc}

00002c0e <mpz_not_inpl>:

/* computes dest = ~z (= -z - 1)
   can have dest, z the same
*/
void mpz_not_inpl(mpz_t *dest, const mpz_t *z) {
    2c0e:	b510      	push	{r4, lr}
    2c10:	b084      	sub	sp, #16
    2c12:	4604      	mov	r4, r0
    if (dest != z) {
    2c14:	4288      	cmp	r0, r1
    2c16:	d001      	beq.n	2c1c <mpz_not_inpl+0xe>
        mpz_set(dest, z);
    2c18:	f7ff fe52 	bl	28c0 <mpz_set>
    }
    if (dest->len == 0) {
    2c1c:	6862      	ldr	r2, [r4, #4]
    2c1e:	b1c2      	cbz	r2, 2c52 <mpz_not_inpl+0x44>
        mpz_need_dig(dest, 1);
        dest->dig[0] = 1;
        dest->len = 1;
        dest->neg = 1;
    } else if (dest->neg) {
    2c20:	7823      	ldrb	r3, [r4, #0]
    2c22:	f013 0f01 	tst.w	r3, #1
    2c26:	d121      	bne.n	2c6c <mpz_not_inpl+0x5e>
        dest->neg = 0;
        mpz_dig_t k = 1;
        dest->len = mpn_sub(dest->dig, dest->dig, dest->len, &k, 1);
    } else {
        mpz_need_dig(dest, dest->len + 1);
    2c28:	1c51      	adds	r1, r2, #1
    2c2a:	4620      	mov	r0, r4
    2c2c:	f7ff fd94 	bl	2758 <mpz_need_dig>
        mpz_dig_t k = 1;
    2c30:	2201      	movs	r2, #1
    2c32:	ab04      	add	r3, sp, #16
    2c34:	f823 2d02 	strh.w	r2, [r3, #-2]!
        dest->len = mpn_add(dest->dig, dest->dig, dest->len, &k, 1);
    2c38:	9200      	str	r2, [sp, #0]
    2c3a:	6862      	ldr	r2, [r4, #4]
    2c3c:	68a1      	ldr	r1, [r4, #8]
    2c3e:	4608      	mov	r0, r1
    2c40:	f7ff fb01 	bl	2246 <mpn_add>
    2c44:	6060      	str	r0, [r4, #4]
        dest->neg = 1;
    2c46:	7823      	ldrb	r3, [r4, #0]
    2c48:	f043 0301 	orr.w	r3, r3, #1
    2c4c:	7023      	strb	r3, [r4, #0]
    }
}
    2c4e:	b004      	add	sp, #16
    2c50:	bd10      	pop	{r4, pc}
        mpz_need_dig(dest, 1);
    2c52:	2101      	movs	r1, #1
    2c54:	4620      	mov	r0, r4
    2c56:	f7ff fd7f 	bl	2758 <mpz_need_dig>
        dest->dig[0] = 1;
    2c5a:	68a2      	ldr	r2, [r4, #8]
    2c5c:	2301      	movs	r3, #1
    2c5e:	8013      	strh	r3, [r2, #0]
        dest->len = 1;
    2c60:	6063      	str	r3, [r4, #4]
        dest->neg = 1;
    2c62:	7823      	ldrb	r3, [r4, #0]
    2c64:	f043 0301 	orr.w	r3, r3, #1
    2c68:	7023      	strb	r3, [r4, #0]
    2c6a:	e7f0      	b.n	2c4e <mpz_not_inpl+0x40>
        dest->neg = 0;
    2c6c:	7823      	ldrb	r3, [r4, #0]
    2c6e:	f36f 0300 	bfc	r3, #0, #1
    2c72:	7023      	strb	r3, [r4, #0]
        mpz_dig_t k = 1;
    2c74:	2101      	movs	r1, #1
    2c76:	ab04      	add	r3, sp, #16
    2c78:	f823 1d02 	strh.w	r1, [r3, #-2]!
        dest->len = mpn_sub(dest->dig, dest->dig, dest->len, &k, 1);
    2c7c:	9100      	str	r1, [sp, #0]
    2c7e:	68a1      	ldr	r1, [r4, #8]
    2c80:	4608      	mov	r0, r1
    2c82:	f7ff fb03 	bl	228c <mpn_sub>
    2c86:	6060      	str	r0, [r4, #4]
    2c88:	e7e1      	b.n	2c4e <mpz_not_inpl+0x40>

00002c8a <mpz_shl_inpl>:

/* computes dest = lhs << rhs
   can have dest, lhs the same
*/
void mpz_shl_inpl(mpz_t *dest, const mpz_t *lhs, mp_uint_t rhs) {
    2c8a:	b570      	push	{r4, r5, r6, lr}
    2c8c:	4605      	mov	r5, r0
    2c8e:	460c      	mov	r4, r1
    if (lhs->len == 0 || rhs == 0) {
    2c90:	684b      	ldr	r3, [r1, #4]
    2c92:	b10b      	cbz	r3, 2c98 <mpz_shl_inpl+0xe>
    2c94:	4616      	mov	r6, r2
    2c96:	b922      	cbnz	r2, 2ca2 <mpz_shl_inpl+0x18>
        mpz_set(dest, lhs);
    2c98:	4621      	mov	r1, r4
    2c9a:	4628      	mov	r0, r5
    2c9c:	f7ff fe10 	bl	28c0 <mpz_set>
    } else {
        mpz_need_dig(dest, lhs->len + (rhs + DIG_SIZE - 1) / DIG_SIZE);
        dest->len = mpn_shl(dest->dig, lhs->dig, lhs->len, rhs);
        dest->neg = lhs->neg;
    }
}
    2ca0:	bd70      	pop	{r4, r5, r6, pc}
        mpz_need_dig(dest, lhs->len + (rhs + DIG_SIZE - 1) / DIG_SIZE);
    2ca2:	f102 010f 	add.w	r1, r2, #15
    2ca6:	eb03 1111 	add.w	r1, r3, r1, lsr #4
    2caa:	f7ff fd55 	bl	2758 <mpz_need_dig>
        dest->len = mpn_shl(dest->dig, lhs->dig, lhs->len, rhs);
    2cae:	4633      	mov	r3, r6
    2cb0:	6862      	ldr	r2, [r4, #4]
    2cb2:	68a1      	ldr	r1, [r4, #8]
    2cb4:	68a8      	ldr	r0, [r5, #8]
    2cb6:	f7ff fd77 	bl	27a8 <mpn_shl>
    2cba:	6068      	str	r0, [r5, #4]
        dest->neg = lhs->neg;
    2cbc:	7822      	ldrb	r2, [r4, #0]
    2cbe:	782b      	ldrb	r3, [r5, #0]
    2cc0:	f362 0300 	bfi	r3, r2, #0, #1
    2cc4:	702b      	strb	r3, [r5, #0]
}
    2cc6:	e7eb      	b.n	2ca0 <mpz_shl_inpl+0x16>

00002cc8 <mpz_shr_inpl>:

/* computes dest = lhs >> rhs
   can have dest, lhs the same
*/
void mpz_shr_inpl(mpz_t *dest, const mpz_t *lhs, mp_uint_t rhs) {
    2cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cca:	b085      	sub	sp, #20
    2ccc:	4605      	mov	r5, r0
    2cce:	460c      	mov	r4, r1
    if (lhs->len == 0 || rhs == 0) {
    2cd0:	6849      	ldr	r1, [r1, #4]
    2cd2:	b109      	cbz	r1, 2cd8 <mpz_shr_inpl+0x10>
    2cd4:	4616      	mov	r6, r2
    2cd6:	b92a      	cbnz	r2, 2ce4 <mpz_shr_inpl+0x1c>
        mpz_set(dest, lhs);
    2cd8:	4621      	mov	r1, r4
    2cda:	4628      	mov	r0, r5
    2cdc:	f7ff fdf0 	bl	28c0 <mpz_set>
                    dest->len = mpn_add(dest->dig, dest->dig, dest->len, &round_up, 1);
                }
            }
        }
    }
}
    2ce0:	b005      	add	sp, #20
    2ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mpz_need_dig(dest, lhs->len);
    2ce4:	f7ff fd38 	bl	2758 <mpz_need_dig>
        dest->len = mpn_shr(dest->dig, lhs->dig, lhs->len, rhs);
    2ce8:	4633      	mov	r3, r6
    2cea:	6862      	ldr	r2, [r4, #4]
    2cec:	68a1      	ldr	r1, [r4, #8]
    2cee:	68a8      	ldr	r0, [r5, #8]
    2cf0:	f7ff fa88 	bl	2204 <mpn_shr>
    2cf4:	6068      	str	r0, [r5, #4]
        dest->neg = lhs->neg;
    2cf6:	7822      	ldrb	r2, [r4, #0]
    2cf8:	782b      	ldrb	r3, [r5, #0]
    2cfa:	f362 0300 	bfi	r3, r2, #0, #1
    2cfe:	702b      	strb	r3, [r5, #0]
        if (dest->neg) {
    2d00:	f013 0f01 	tst.w	r3, #1
    2d04:	d0ec      	beq.n	2ce0 <mpz_shr_inpl+0x18>
            mp_uint_t n_whole = rhs / DIG_SIZE;
    2d06:	ea4f 1c16 	mov.w	ip, r6, lsr #4
            mp_uint_t n_part = rhs % DIG_SIZE;
    2d0a:	f006 060f 	and.w	r6, r6, #15
            mpz_dig_t round_up = 0;
    2d0e:	2300      	movs	r3, #0
    2d10:	f8ad 300e 	strh.w	r3, [sp, #14]
            for (size_t i = 0; i < lhs->len && i < n_whole; i++) {
    2d14:	6861      	ldr	r1, [r4, #4]
    2d16:	4299      	cmp	r1, r3
    2d18:	d90a      	bls.n	2d30 <mpz_shr_inpl+0x68>
    2d1a:	4563      	cmp	r3, ip
    2d1c:	d208      	bcs.n	2d30 <mpz_shr_inpl+0x68>
                if (lhs->dig[i] != 0) {
    2d1e:	68a7      	ldr	r7, [r4, #8]
    2d20:	f837 7013 	ldrh.w	r7, [r7, r3, lsl #1]
    2d24:	b90f      	cbnz	r7, 2d2a <mpz_shr_inpl+0x62>
            for (size_t i = 0; i < lhs->len && i < n_whole; i++) {
    2d26:	3301      	adds	r3, #1
    2d28:	e7f4      	b.n	2d14 <mpz_shr_inpl+0x4c>
                    round_up = 1;
    2d2a:	2301      	movs	r3, #1
    2d2c:	f8ad 300e 	strh.w	r3, [sp, #14]
            if (n_whole < lhs->len && (lhs->dig[n_whole] & ((1 << n_part) - 1)) != 0) {
    2d30:	4561      	cmp	r1, ip
    2d32:	d90a      	bls.n	2d4a <mpz_shr_inpl+0x82>
    2d34:	68a3      	ldr	r3, [r4, #8]
    2d36:	f833 201c 	ldrh.w	r2, [r3, ip, lsl #1]
    2d3a:	2301      	movs	r3, #1
    2d3c:	fa03 f606 	lsl.w	r6, r3, r6
    2d40:	3e01      	subs	r6, #1
    2d42:	4232      	tst	r2, r6
    2d44:	d001      	beq.n	2d4a <mpz_shr_inpl+0x82>
                round_up = 1;
    2d46:	f8ad 300e 	strh.w	r3, [sp, #14]
            if (round_up) {
    2d4a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d0c6      	beq.n	2ce0 <mpz_shr_inpl+0x18>
                if (dest->len == 0) {
    2d52:	b920      	cbnz	r0, 2d5e <mpz_shr_inpl+0x96>
                    dest->dig[0] = 1;
    2d54:	68aa      	ldr	r2, [r5, #8]
    2d56:	2301      	movs	r3, #1
    2d58:	8013      	strh	r3, [r2, #0]
                    dest->len = 1;
    2d5a:	606b      	str	r3, [r5, #4]
    2d5c:	e7c0      	b.n	2ce0 <mpz_shr_inpl+0x18>
                    dest->len = mpn_add(dest->dig, dest->dig, dest->len, &round_up, 1);
    2d5e:	2301      	movs	r3, #1
    2d60:	9300      	str	r3, [sp, #0]
    2d62:	f10d 030e 	add.w	r3, sp, #14
    2d66:	4602      	mov	r2, r0
    2d68:	68a9      	ldr	r1, [r5, #8]
    2d6a:	4608      	mov	r0, r1
    2d6c:	f7ff fa6b 	bl	2246 <mpn_add>
    2d70:	6068      	str	r0, [r5, #4]
}
    2d72:	e7b5      	b.n	2ce0 <mpz_shr_inpl+0x18>

00002d74 <mpz_add_inpl>:

/* computes dest = lhs + rhs
   can have dest, lhs, rhs the same
*/
void mpz_add_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs) {
    2d74:	b570      	push	{r4, r5, r6, lr}
    2d76:	b082      	sub	sp, #8
    2d78:	4606      	mov	r6, r0
    2d7a:	460d      	mov	r5, r1
    2d7c:	4614      	mov	r4, r2
    if (mpn_cmp(lhs->dig, lhs->len, rhs->dig, rhs->len) < 0) {
    2d7e:	6853      	ldr	r3, [r2, #4]
    2d80:	6892      	ldr	r2, [r2, #8]
    2d82:	6849      	ldr	r1, [r1, #4]
    2d84:	68a8      	ldr	r0, [r5, #8]
    2d86:	f7ff fa1a 	bl	21be <mpn_cmp>
    2d8a:	2800      	cmp	r0, #0
    2d8c:	db02      	blt.n	2d94 <mpz_add_inpl+0x20>
    2d8e:	4623      	mov	r3, r4
    2d90:	462c      	mov	r4, r5
    2d92:	461d      	mov	r5, r3
        const mpz_t *temp = lhs;
        lhs = rhs;
        rhs = temp;
    }

    if (lhs->neg == rhs->neg) {
    2d94:	7823      	ldrb	r3, [r4, #0]
    2d96:	782a      	ldrb	r2, [r5, #0]
    2d98:	4053      	eors	r3, r2
    2d9a:	f013 0f01 	tst.w	r3, #1
    2d9e:	d013      	beq.n	2dc8 <mpz_add_inpl+0x54>
        mpz_need_dig(dest, lhs->len + 1);
        dest->len = mpn_add(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
    } else {
        mpz_need_dig(dest, lhs->len);
    2da0:	6861      	ldr	r1, [r4, #4]
    2da2:	4630      	mov	r0, r6
    2da4:	f7ff fcd8 	bl	2758 <mpz_need_dig>
        dest->len = mpn_sub(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
    2da8:	68a1      	ldr	r1, [r4, #8]
    2daa:	68ab      	ldr	r3, [r5, #8]
    2dac:	6862      	ldr	r2, [r4, #4]
    2dae:	6868      	ldr	r0, [r5, #4]
    2db0:	9000      	str	r0, [sp, #0]
    2db2:	68b0      	ldr	r0, [r6, #8]
    2db4:	f7ff fa6a 	bl	228c <mpn_sub>
    2db8:	6070      	str	r0, [r6, #4]
    }

    dest->neg = lhs->neg;
    2dba:	7822      	ldrb	r2, [r4, #0]
    2dbc:	7833      	ldrb	r3, [r6, #0]
    2dbe:	f362 0300 	bfi	r3, r2, #0, #1
    2dc2:	7033      	strb	r3, [r6, #0]
}
    2dc4:	b002      	add	sp, #8
    2dc6:	bd70      	pop	{r4, r5, r6, pc}
        mpz_need_dig(dest, lhs->len + 1);
    2dc8:	6861      	ldr	r1, [r4, #4]
    2dca:	3101      	adds	r1, #1
    2dcc:	4630      	mov	r0, r6
    2dce:	f7ff fcc3 	bl	2758 <mpz_need_dig>
        dest->len = mpn_add(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
    2dd2:	68a1      	ldr	r1, [r4, #8]
    2dd4:	68ab      	ldr	r3, [r5, #8]
    2dd6:	6862      	ldr	r2, [r4, #4]
    2dd8:	6868      	ldr	r0, [r5, #4]
    2dda:	9000      	str	r0, [sp, #0]
    2ddc:	68b0      	ldr	r0, [r6, #8]
    2dde:	f7ff fa32 	bl	2246 <mpn_add>
    2de2:	6070      	str	r0, [r6, #4]
    2de4:	e7e9      	b.n	2dba <mpz_add_inpl+0x46>

00002de6 <mpz_sub_inpl>:

/* computes dest = lhs - rhs
   can have dest, lhs, rhs the same
*/
void mpz_sub_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs) {
    2de6:	b5f0      	push	{r4, r5, r6, r7, lr}
    2de8:	b083      	sub	sp, #12
    2dea:	4606      	mov	r6, r0
    2dec:	460d      	mov	r5, r1
    2dee:	4614      	mov	r4, r2
    bool neg = false;

    if (mpn_cmp(lhs->dig, lhs->len, rhs->dig, rhs->len) < 0) {
    2df0:	6853      	ldr	r3, [r2, #4]
    2df2:	6892      	ldr	r2, [r2, #8]
    2df4:	6849      	ldr	r1, [r1, #4]
    2df6:	68a8      	ldr	r0, [r5, #8]
    2df8:	f7ff f9e1 	bl	21be <mpn_cmp>
    2dfc:	2800      	cmp	r0, #0
    2dfe:	db1f      	blt.n	2e40 <mpz_sub_inpl+0x5a>
    2e00:	4623      	mov	r3, r4
    2e02:	462c      	mov	r4, r5
    2e04:	461d      	mov	r5, r3
    bool neg = false;
    2e06:	2700      	movs	r7, #0
        lhs = rhs;
        rhs = temp;
        neg = true;
    }

    if (lhs->neg != rhs->neg) {
    2e08:	7823      	ldrb	r3, [r4, #0]
    2e0a:	782a      	ldrb	r2, [r5, #0]
    2e0c:	4053      	eors	r3, r2
    2e0e:	f013 0f01 	tst.w	r3, #1
    2e12:	d017      	beq.n	2e44 <mpz_sub_inpl+0x5e>
        mpz_need_dig(dest, lhs->len + 1);
    2e14:	6861      	ldr	r1, [r4, #4]
    2e16:	3101      	adds	r1, #1
    2e18:	4630      	mov	r0, r6
    2e1a:	f7ff fc9d 	bl	2758 <mpz_need_dig>
        dest->len = mpn_add(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
    2e1e:	68a1      	ldr	r1, [r4, #8]
    2e20:	68ab      	ldr	r3, [r5, #8]
    2e22:	6862      	ldr	r2, [r4, #4]
    2e24:	6868      	ldr	r0, [r5, #4]
    2e26:	9000      	str	r0, [sp, #0]
    2e28:	68b0      	ldr	r0, [r6, #8]
    2e2a:	f7ff fa0c 	bl	2246 <mpn_add>
    2e2e:	6070      	str	r0, [r6, #4]
    } else {
        mpz_need_dig(dest, lhs->len);
        dest->len = mpn_sub(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
    }

    if (neg) {
    2e30:	b9b7      	cbnz	r7, 2e60 <mpz_sub_inpl+0x7a>
        dest->neg = 1 - lhs->neg;
    } else {
        dest->neg = lhs->neg;
    2e32:	7822      	ldrb	r2, [r4, #0]
    2e34:	7833      	ldrb	r3, [r6, #0]
    2e36:	f362 0300 	bfi	r3, r2, #0, #1
    2e3a:	7033      	strb	r3, [r6, #0]
    }
}
    2e3c:	b003      	add	sp, #12
    2e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        neg = true;
    2e40:	2701      	movs	r7, #1
    2e42:	e7e1      	b.n	2e08 <mpz_sub_inpl+0x22>
        mpz_need_dig(dest, lhs->len);
    2e44:	6861      	ldr	r1, [r4, #4]
    2e46:	4630      	mov	r0, r6
    2e48:	f7ff fc86 	bl	2758 <mpz_need_dig>
        dest->len = mpn_sub(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
    2e4c:	68a1      	ldr	r1, [r4, #8]
    2e4e:	68ab      	ldr	r3, [r5, #8]
    2e50:	6862      	ldr	r2, [r4, #4]
    2e52:	6868      	ldr	r0, [r5, #4]
    2e54:	9000      	str	r0, [sp, #0]
    2e56:	68b0      	ldr	r0, [r6, #8]
    2e58:	f7ff fa18 	bl	228c <mpn_sub>
    2e5c:	6070      	str	r0, [r6, #4]
    2e5e:	e7e7      	b.n	2e30 <mpz_sub_inpl+0x4a>
        dest->neg = 1 - lhs->neg;
    2e60:	7823      	ldrb	r3, [r4, #0]
    2e62:	f003 0301 	and.w	r3, r3, #1
    2e66:	f083 0301 	eor.w	r3, r3, #1
    2e6a:	7832      	ldrb	r2, [r6, #0]
    2e6c:	f363 0200 	bfi	r2, r3, #0, #1
    2e70:	7032      	strb	r2, [r6, #0]
    2e72:	e7e3      	b.n	2e3c <mpz_sub_inpl+0x56>

00002e74 <mpz_and_inpl>:

/* computes dest = lhs & rhs
   can have dest, lhs, rhs the same
*/
void mpz_and_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs) {
    2e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e76:	b085      	sub	sp, #20
    2e78:	4606      	mov	r6, r0
    2e7a:	460d      	mov	r5, r1
    2e7c:	4614      	mov	r4, r2
    // make sure lhs has the most digits
    if (lhs->len < rhs->len) {
    2e7e:	684a      	ldr	r2, [r1, #4]
    2e80:	6863      	ldr	r3, [r4, #4]
    2e82:	429a      	cmp	r2, r3
    2e84:	d302      	bcc.n	2e8c <mpz_and_inpl+0x18>
    2e86:	4623      	mov	r3, r4
    2e88:	460c      	mov	r4, r1
    2e8a:	461d      	mov	r5, r3
        rhs = temp;
    }

    #if MICROPY_OPT_MPZ_BITWISE

    if ((0 == lhs->neg) && (0 == rhs->neg)) {
    2e8c:	7823      	ldrb	r3, [r4, #0]
    2e8e:	f013 0f01 	tst.w	r3, #1
    2e92:	d103      	bne.n	2e9c <mpz_and_inpl+0x28>
    2e94:	782b      	ldrb	r3, [r5, #0]
    2e96:	f013 0f01 	tst.w	r3, #1
    2e9a:	d028      	beq.n	2eee <mpz_and_inpl+0x7a>
        mpz_need_dig(dest, lhs->len);
        dest->len = mpn_and(dest->dig, lhs->dig, rhs->dig, rhs->len);
        dest->neg = 0;
    } else {
        mpz_need_dig(dest, lhs->len + 1);
    2e9c:	6861      	ldr	r1, [r4, #4]
    2e9e:	3101      	adds	r1, #1
    2ea0:	4630      	mov	r0, r6
    2ea2:	f7ff fc59 	bl	2758 <mpz_need_dig>
        dest->len = mpn_and_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len,
    2ea6:	68a1      	ldr	r1, [r4, #8]
    2ea8:	68ab      	ldr	r3, [r5, #8]
                                 lhs->neg == rhs->neg, 0 != lhs->neg, 0 != rhs->neg);
    2eaa:	7820      	ldrb	r0, [r4, #0]
    2eac:	782f      	ldrb	r7, [r5, #0]
    2eae:	ea80 0c07 	eor.w	ip, r0, r7
        dest->len = mpn_and_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len,
    2eb2:	6862      	ldr	r2, [r4, #4]
    2eb4:	f007 0701 	and.w	r7, r7, #1
    2eb8:	9703      	str	r7, [sp, #12]
    2eba:	f000 0001 	and.w	r0, r0, #1
    2ebe:	9002      	str	r0, [sp, #8]
    2ec0:	f01c 0f01 	tst.w	ip, #1
    2ec4:	bf0c      	ite	eq
    2ec6:	2001      	moveq	r0, #1
    2ec8:	2000      	movne	r0, #0
    2eca:	9001      	str	r0, [sp, #4]
    2ecc:	6868      	ldr	r0, [r5, #4]
    2ece:	9000      	str	r0, [sp, #0]
    2ed0:	68b0      	ldr	r0, [r6, #8]
    2ed2:	f7ff fa0d 	bl	22f0 <mpn_and_neg>
    2ed6:	6070      	str	r0, [r6, #4]
        dest->neg = lhs->neg & rhs->neg;
    2ed8:	7823      	ldrb	r3, [r4, #0]
    2eda:	782a      	ldrb	r2, [r5, #0]
    2edc:	f002 0201 	and.w	r2, r2, #1
    2ee0:	4013      	ands	r3, r2
    2ee2:	7832      	ldrb	r2, [r6, #0]
    2ee4:	f363 0200 	bfi	r2, r3, #0, #1
    2ee8:	7032      	strb	r2, [r6, #0]
    dest->len = mpn_and_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len,
                             (lhs->neg == rhs->neg) ? lhs->neg : 0, lhs->neg, rhs->neg);
    dest->neg = lhs->neg & rhs->neg;

    #endif
}
    2eea:	b005      	add	sp, #20
    2eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mpz_need_dig(dest, lhs->len);
    2eee:	6861      	ldr	r1, [r4, #4]
    2ef0:	4630      	mov	r0, r6
    2ef2:	f7ff fc31 	bl	2758 <mpz_need_dig>
        dest->len = mpn_and(dest->dig, lhs->dig, rhs->dig, rhs->len);
    2ef6:	686b      	ldr	r3, [r5, #4]
    2ef8:	68aa      	ldr	r2, [r5, #8]
    2efa:	68a1      	ldr	r1, [r4, #8]
    2efc:	68b0      	ldr	r0, [r6, #8]
    2efe:	f7ff f9e6 	bl	22ce <mpn_and>
    2f02:	6070      	str	r0, [r6, #4]
        dest->neg = 0;
    2f04:	7833      	ldrb	r3, [r6, #0]
    2f06:	f36f 0300 	bfc	r3, #0, #1
    2f0a:	7033      	strb	r3, [r6, #0]
    2f0c:	e7ed      	b.n	2eea <mpz_and_inpl+0x76>

00002f0e <mpz_or_inpl>:

/* computes dest = lhs | rhs
   can have dest, lhs, rhs the same
*/
void mpz_or_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs) {
    2f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f10:	b085      	sub	sp, #20
    2f12:	4606      	mov	r6, r0
    2f14:	460d      	mov	r5, r1
    2f16:	4614      	mov	r4, r2
    // make sure lhs has the most digits
    if (lhs->len < rhs->len) {
    2f18:	684a      	ldr	r2, [r1, #4]
    2f1a:	6863      	ldr	r3, [r4, #4]
    2f1c:	429a      	cmp	r2, r3
    2f1e:	d302      	bcc.n	2f26 <mpz_or_inpl+0x18>
    2f20:	4623      	mov	r3, r4
    2f22:	460c      	mov	r4, r1
    2f24:	461d      	mov	r5, r3
        rhs = temp;
    }

    #if MICROPY_OPT_MPZ_BITWISE

    if ((0 == lhs->neg) && (0 == rhs->neg)) {
    2f26:	7823      	ldrb	r3, [r4, #0]
    2f28:	f013 0f01 	tst.w	r3, #1
    2f2c:	d103      	bne.n	2f36 <mpz_or_inpl+0x28>
    2f2e:	782b      	ldrb	r3, [r5, #0]
    2f30:	f013 0f01 	tst.w	r3, #1
    2f34:	d01b      	beq.n	2f6e <mpz_or_inpl+0x60>
        mpz_need_dig(dest, lhs->len);
        dest->len = mpn_or(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
        dest->neg = 0;
    } else {
        mpz_need_dig(dest, lhs->len + 1);
    2f36:	6861      	ldr	r1, [r4, #4]
    2f38:	3101      	adds	r1, #1
    2f3a:	4630      	mov	r0, r6
    2f3c:	f7ff fc0c 	bl	2758 <mpz_need_dig>
        dest->len = mpn_or_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len,
    2f40:	68a1      	ldr	r1, [r4, #8]
    2f42:	68ab      	ldr	r3, [r5, #8]
                                 0 != lhs->neg, 0 != rhs->neg);
    2f44:	7820      	ldrb	r0, [r4, #0]
    2f46:	782f      	ldrb	r7, [r5, #0]
        dest->len = mpn_or_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len,
    2f48:	6862      	ldr	r2, [r4, #4]
    2f4a:	f007 0701 	and.w	r7, r7, #1
    2f4e:	9702      	str	r7, [sp, #8]
    2f50:	f000 0001 	and.w	r0, r0, #1
    2f54:	9001      	str	r0, [sp, #4]
    2f56:	6868      	ldr	r0, [r5, #4]
    2f58:	9000      	str	r0, [sp, #0]
    2f5a:	68b0      	ldr	r0, [r6, #8]
    2f5c:	f7ff fbb2 	bl	26c4 <mpn_or_neg>
    2f60:	6070      	str	r0, [r6, #4]
        dest->neg = 1;
    2f62:	7833      	ldrb	r3, [r6, #0]
    2f64:	f043 0301 	orr.w	r3, r3, #1
    2f68:	7033      	strb	r3, [r6, #0]
    dest->len = mpn_or_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len,
                             (lhs->neg || rhs->neg), lhs->neg, rhs->neg);
    dest->neg = lhs->neg | rhs->neg;

    #endif
}
    2f6a:	b005      	add	sp, #20
    2f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mpz_need_dig(dest, lhs->len);
    2f6e:	6861      	ldr	r1, [r4, #4]
    2f70:	4630      	mov	r0, r6
    2f72:	f7ff fbf1 	bl	2758 <mpz_need_dig>
        dest->len = mpn_or(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
    2f76:	68a1      	ldr	r1, [r4, #8]
    2f78:	68ab      	ldr	r3, [r5, #8]
    2f7a:	6862      	ldr	r2, [r4, #4]
    2f7c:	6868      	ldr	r0, [r5, #4]
    2f7e:	9000      	str	r0, [sp, #0]
    2f80:	68b0      	ldr	r0, [r6, #8]
    2f82:	f7ff f9fb 	bl	237c <mpn_or>
    2f86:	6070      	str	r0, [r6, #4]
        dest->neg = 0;
    2f88:	7833      	ldrb	r3, [r6, #0]
    2f8a:	f36f 0300 	bfc	r3, #0, #1
    2f8e:	7033      	strb	r3, [r6, #0]
    2f90:	e7eb      	b.n	2f6a <mpz_or_inpl+0x5c>

00002f92 <mpz_xor_inpl>:

/* computes dest = lhs ^ rhs
   can have dest, lhs, rhs the same
*/
void mpz_xor_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs) {
    2f92:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f94:	b085      	sub	sp, #20
    2f96:	4606      	mov	r6, r0
    2f98:	460d      	mov	r5, r1
    2f9a:	4614      	mov	r4, r2
    // make sure lhs has the most digits
    if (lhs->len < rhs->len) {
    2f9c:	684a      	ldr	r2, [r1, #4]
    2f9e:	6863      	ldr	r3, [r4, #4]
    2fa0:	429a      	cmp	r2, r3
    2fa2:	d302      	bcc.n	2faa <mpz_xor_inpl+0x18>
    2fa4:	4623      	mov	r3, r4
    2fa6:	460c      	mov	r4, r1
    2fa8:	461d      	mov	r5, r3
        rhs = temp;
    }

    #if MICROPY_OPT_MPZ_BITWISE

    if (lhs->neg == rhs->neg) {
    2faa:	7823      	ldrb	r3, [r4, #0]
    2fac:	782a      	ldrb	r2, [r5, #0]
    2fae:	4053      	eors	r3, r2
    2fb0:	f013 0f01 	tst.w	r3, #1
    2fb4:	d124      	bne.n	3000 <mpz_xor_inpl+0x6e>
        mpz_need_dig(dest, lhs->len);
    2fb6:	6861      	ldr	r1, [r4, #4]
    2fb8:	4630      	mov	r0, r6
    2fba:	f7ff fbcd 	bl	2758 <mpz_need_dig>
        if (lhs->neg == 0) {
    2fbe:	7823      	ldrb	r3, [r4, #0]
    2fc0:	f013 0f01 	tst.w	r3, #1
    2fc4:	d10e      	bne.n	2fe4 <mpz_xor_inpl+0x52>
            dest->len = mpn_xor(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
    2fc6:	68a1      	ldr	r1, [r4, #8]
    2fc8:	68ab      	ldr	r3, [r5, #8]
    2fca:	6862      	ldr	r2, [r4, #4]
    2fcc:	6868      	ldr	r0, [r5, #4]
    2fce:	9000      	str	r0, [sp, #0]
    2fd0:	68b0      	ldr	r0, [r6, #8]
    2fd2:	f7ff f9ee 	bl	23b2 <mpn_xor>
    2fd6:	6070      	str	r0, [r6, #4]
        } else {
            dest->len = mpn_xor_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len, 0, 0, 0);
        }
        dest->neg = 0;
    2fd8:	7833      	ldrb	r3, [r6, #0]
    2fda:	f36f 0300 	bfc	r3, #0, #1
    2fde:	7033      	strb	r3, [r6, #0]
    dest->len = mpn_xor_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len,
                             (lhs->neg != rhs->neg), 0 == lhs->neg, 0 == rhs->neg);
    dest->neg = lhs->neg ^ rhs->neg;

    #endif
}
    2fe0:	b005      	add	sp, #20
    2fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            dest->len = mpn_xor_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len, 0, 0, 0);
    2fe4:	68a1      	ldr	r1, [r4, #8]
    2fe6:	68ab      	ldr	r3, [r5, #8]
    2fe8:	6862      	ldr	r2, [r4, #4]
    2fea:	2000      	movs	r0, #0
    2fec:	9003      	str	r0, [sp, #12]
    2fee:	9002      	str	r0, [sp, #8]
    2ff0:	9001      	str	r0, [sp, #4]
    2ff2:	6868      	ldr	r0, [r5, #4]
    2ff4:	9000      	str	r0, [sp, #0]
    2ff6:	68b0      	ldr	r0, [r6, #8]
    2ff8:	f7ff f9f6 	bl	23e8 <mpn_xor_neg>
    2ffc:	6070      	str	r0, [r6, #4]
    2ffe:	e7eb      	b.n	2fd8 <mpz_xor_inpl+0x46>
        mpz_need_dig(dest, lhs->len + 1);
    3000:	6861      	ldr	r1, [r4, #4]
    3002:	3101      	adds	r1, #1
    3004:	4630      	mov	r0, r6
    3006:	f7ff fba7 	bl	2758 <mpz_need_dig>
        dest->len = mpn_xor_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len, 1,
    300a:	68a1      	ldr	r1, [r4, #8]
    300c:	68ab      	ldr	r3, [r5, #8]
                                0 == lhs->neg, 0 == rhs->neg);
    300e:	7820      	ldrb	r0, [r4, #0]
    3010:	782f      	ldrb	r7, [r5, #0]
        dest->len = mpn_xor_neg(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len, 1,
    3012:	6862      	ldr	r2, [r4, #4]
    3014:	f087 0401 	eor.w	r4, r7, #1
    3018:	f004 0401 	and.w	r4, r4, #1
    301c:	9403      	str	r4, [sp, #12]
    301e:	f080 0001 	eor.w	r0, r0, #1
    3022:	f000 0001 	and.w	r0, r0, #1
    3026:	9002      	str	r0, [sp, #8]
    3028:	2001      	movs	r0, #1
    302a:	9001      	str	r0, [sp, #4]
    302c:	6868      	ldr	r0, [r5, #4]
    302e:	9000      	str	r0, [sp, #0]
    3030:	68b0      	ldr	r0, [r6, #8]
    3032:	f7ff f9d9 	bl	23e8 <mpn_xor_neg>
    3036:	6070      	str	r0, [r6, #4]
        dest->neg = 1;
    3038:	7833      	ldrb	r3, [r6, #0]
    303a:	f043 0301 	orr.w	r3, r3, #1
    303e:	7033      	strb	r3, [r6, #0]
}
    3040:	e7ce      	b.n	2fe0 <mpz_xor_inpl+0x4e>

00003042 <mpz_mul_inpl>:

/* computes dest = lhs * rhs
   can have dest, lhs, rhs the same
*/
void mpz_mul_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs) {
    3042:	b5f0      	push	{r4, r5, r6, r7, lr}
    3044:	b083      	sub	sp, #12
    3046:	4604      	mov	r4, r0
    if (lhs->len == 0 || rhs->len == 0) {
    3048:	684b      	ldr	r3, [r1, #4]
    304a:	b36b      	cbz	r3, 30a8 <mpz_mul_inpl+0x66>
    304c:	460d      	mov	r5, r1
    304e:	4616      	mov	r6, r2
    3050:	6853      	ldr	r3, [r2, #4]
    3052:	b34b      	cbz	r3, 30a8 <mpz_mul_inpl+0x66>
        mpz_set_from_int(dest, 0);
        return;
    }

    mpz_t *temp = NULL;
    if (lhs == dest) {
    3054:	4281      	cmp	r1, r0
    3056:	d02d      	beq.n	30b4 <mpz_mul_inpl+0x72>
        lhs = temp = mpz_clone(lhs);
        if (rhs == dest) {
            rhs = lhs;
        }
    } else if (rhs == dest) {
    3058:	4282      	cmp	r2, r0
    305a:	d033      	beq.n	30c4 <mpz_mul_inpl+0x82>
    mpz_t *temp = NULL;
    305c:	2700      	movs	r7, #0
        rhs = temp = mpz_clone(rhs);
    }

    mpz_need_dig(dest, lhs->len + rhs->len); // min mem l+r-1, max mem l+r
    305e:	6869      	ldr	r1, [r5, #4]
    3060:	6873      	ldr	r3, [r6, #4]
    3062:	4419      	add	r1, r3
    3064:	4620      	mov	r0, r4
    3066:	f7ff fb77 	bl	2758 <mpz_need_dig>
    memset(dest->dig, 0, dest->alloc * sizeof(mpz_dig_t));
    306a:	6822      	ldr	r2, [r4, #0]
    306c:	f3c2 029d 	ubfx	r2, r2, #2, #30
    3070:	0052      	lsls	r2, r2, #1
    3072:	2100      	movs	r1, #0
    3074:	68a0      	ldr	r0, [r4, #8]
    3076:	f018 fc01 	bl	1b87c <memset>
    dest->len = mpn_mul(dest->dig, lhs->dig, lhs->len, rhs->dig, rhs->len);
    307a:	68b3      	ldr	r3, [r6, #8]
    307c:	686a      	ldr	r2, [r5, #4]
    307e:	68a9      	ldr	r1, [r5, #8]
    3080:	6870      	ldr	r0, [r6, #4]
    3082:	9000      	str	r0, [sp, #0]
    3084:	68a0      	ldr	r0, [r4, #8]
    3086:	f7ff f9f7 	bl	2478 <mpn_mul>
    308a:	6060      	str	r0, [r4, #4]

    if (lhs->neg == rhs->neg) {
    308c:	782b      	ldrb	r3, [r5, #0]
    308e:	7832      	ldrb	r2, [r6, #0]
    3090:	4053      	eors	r3, r2
    3092:	f013 0f01 	tst.w	r3, #1
    3096:	d11e      	bne.n	30d6 <mpz_mul_inpl+0x94>
        dest->neg = 0;
    3098:	7823      	ldrb	r3, [r4, #0]
    309a:	f36f 0300 	bfc	r3, #0, #1
    309e:	7023      	strb	r3, [r4, #0]
    } else {
        dest->neg = 1;
    }

    mpz_free(temp);
    30a0:	4638      	mov	r0, r7
    30a2:	f7ff fb03 	bl	26ac <mpz_free>
    30a6:	e003      	b.n	30b0 <mpz_mul_inpl+0x6e>
        mpz_set_from_int(dest, 0);
    30a8:	2100      	movs	r1, #0
    30aa:	4620      	mov	r0, r4
    30ac:	f7ff fc1c 	bl	28e8 <mpz_set_from_int>
}
    30b0:	b003      	add	sp, #12
    30b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lhs = temp = mpz_clone(lhs);
    30b4:	4608      	mov	r0, r1
    30b6:	f7ff fbb5 	bl	2824 <mpz_clone>
    30ba:	4605      	mov	r5, r0
        if (rhs == dest) {
    30bc:	42a6      	cmp	r6, r4
    30be:	d007      	beq.n	30d0 <mpz_mul_inpl+0x8e>
        lhs = temp = mpz_clone(lhs);
    30c0:	4607      	mov	r7, r0
    30c2:	e7cc      	b.n	305e <mpz_mul_inpl+0x1c>
        rhs = temp = mpz_clone(rhs);
    30c4:	4610      	mov	r0, r2
    30c6:	f7ff fbad 	bl	2824 <mpz_clone>
    30ca:	4606      	mov	r6, r0
    30cc:	4607      	mov	r7, r0
    30ce:	e7c6      	b.n	305e <mpz_mul_inpl+0x1c>
        lhs = temp = mpz_clone(lhs);
    30d0:	4607      	mov	r7, r0
            rhs = lhs;
    30d2:	4606      	mov	r6, r0
    30d4:	e7c3      	b.n	305e <mpz_mul_inpl+0x1c>
        dest->neg = 1;
    30d6:	7823      	ldrb	r3, [r4, #0]
    30d8:	f043 0301 	orr.w	r3, r3, #1
    30dc:	7023      	strb	r3, [r4, #0]
    30de:	e7df      	b.n	30a0 <mpz_mul_inpl+0x5e>

000030e0 <mpz_pow_inpl>:

/* computes dest = lhs ** rhs
   can have dest, lhs, rhs the same
*/
void mpz_pow_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs) {
    30e0:	b570      	push	{r4, r5, r6, lr}
    30e2:	4606      	mov	r6, r0
    if (lhs->len == 0 || rhs->neg != 0) {
    30e4:	684b      	ldr	r3, [r1, #4]
    30e6:	b19b      	cbz	r3, 3110 <mpz_pow_inpl+0x30>
    30e8:	4614      	mov	r4, r2
    30ea:	7813      	ldrb	r3, [r2, #0]
    30ec:	f013 0f01 	tst.w	r3, #1
    30f0:	d10e      	bne.n	3110 <mpz_pow_inpl+0x30>
        mpz_set_from_int(dest, 0);
        return;
    }

    if (rhs->len == 0) {
    30f2:	6853      	ldr	r3, [r2, #4]
    30f4:	b18b      	cbz	r3, 311a <mpz_pow_inpl+0x3a>
        mpz_set_from_int(dest, 1);
        return;
    }

    mpz_t *x = mpz_clone(lhs);
    30f6:	4608      	mov	r0, r1
    30f8:	f7ff fb94 	bl	2824 <mpz_clone>
    30fc:	4605      	mov	r5, r0
    mpz_t *n = mpz_clone(rhs);
    30fe:	4620      	mov	r0, r4
    3100:	f7ff fb90 	bl	2824 <mpz_clone>
    3104:	4604      	mov	r4, r0

    mpz_set_from_int(dest, 1);
    3106:	2101      	movs	r1, #1
    3108:	4630      	mov	r0, r6
    310a:	f7ff fbed 	bl	28e8 <mpz_set_from_int>

    while (n->len > 0) {
    310e:	e015      	b.n	313c <mpz_pow_inpl+0x5c>
        mpz_set_from_int(dest, 0);
    3110:	2100      	movs	r1, #0
    3112:	4630      	mov	r0, r6
    3114:	f7ff fbe8 	bl	28e8 <mpz_set_from_int>
        mpz_mul_inpl(x, x, x);
    }

    mpz_free(x);
    mpz_free(n);
}
    3118:	bd70      	pop	{r4, r5, r6, pc}
        mpz_set_from_int(dest, 1);
    311a:	2101      	movs	r1, #1
    311c:	f7ff fbe4 	bl	28e8 <mpz_set_from_int>
        return;
    3120:	e7fa      	b.n	3118 <mpz_pow_inpl+0x38>
        n->len = mpn_shr(n->dig, n->dig, n->len, 1);
    3122:	2301      	movs	r3, #1
    3124:	6862      	ldr	r2, [r4, #4]
    3126:	68a1      	ldr	r1, [r4, #8]
    3128:	4608      	mov	r0, r1
    312a:	f7ff f86b 	bl	2204 <mpn_shr>
    312e:	6060      	str	r0, [r4, #4]
        if (n->len == 0) {
    3130:	b188      	cbz	r0, 3156 <mpz_pow_inpl+0x76>
        mpz_mul_inpl(x, x, x);
    3132:	462a      	mov	r2, r5
    3134:	4629      	mov	r1, r5
    3136:	4628      	mov	r0, r5
    3138:	f7ff ff83 	bl	3042 <mpz_mul_inpl>
    while (n->len > 0) {
    313c:	6863      	ldr	r3, [r4, #4]
    313e:	b153      	cbz	r3, 3156 <mpz_pow_inpl+0x76>
        if ((n->dig[0] & 1) != 0) {
    3140:	68a3      	ldr	r3, [r4, #8]
    3142:	881b      	ldrh	r3, [r3, #0]
    3144:	f013 0f01 	tst.w	r3, #1
    3148:	d0eb      	beq.n	3122 <mpz_pow_inpl+0x42>
            mpz_mul_inpl(dest, dest, x);
    314a:	462a      	mov	r2, r5
    314c:	4631      	mov	r1, r6
    314e:	4630      	mov	r0, r6
    3150:	f7ff ff77 	bl	3042 <mpz_mul_inpl>
    3154:	e7e5      	b.n	3122 <mpz_pow_inpl+0x42>
    mpz_free(x);
    3156:	4628      	mov	r0, r5
    3158:	f7ff faa8 	bl	26ac <mpz_free>
    mpz_free(n);
    315c:	4620      	mov	r0, r4
    315e:	f7ff faa5 	bl	26ac <mpz_free>
    3162:	e7d9      	b.n	3118 <mpz_pow_inpl+0x38>

00003164 <mpz_divmod_inpl>:
       quo * rhs + rem = lhs
       0 <= rem < rhs
   can have lhs, rhs the same
   assumes rhs != 0 (undefined behaviour if it is)
*/
void mpz_divmod_inpl(mpz_t *dest_quo, mpz_t *dest_rem, const mpz_t *lhs, const mpz_t *rhs) {
    3164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3168:	b086      	sub	sp, #24
    316a:	461f      	mov	r7, r3
void mpz_set_from_float(mpz_t *z, mp_float_t src);
#endif
size_t mpz_set_from_str(mpz_t *z, const char *str, size_t len, bool neg, unsigned int base);
void mpz_set_from_bytes(mpz_t *z, bool big_endian, size_t len, const byte *buf);

static inline bool mpz_is_zero(const mpz_t *z) { return z->len == 0; }
    316c:	685b      	ldr	r3, [r3, #4]
    assert(!mpz_is_zero(rhs));
    316e:	2b00      	cmp	r3, #0
    3170:	d033      	beq.n	31da <mpz_divmod_inpl+0x76>
    3172:	4604      	mov	r4, r0
    3174:	460e      	mov	r6, r1
    3176:	4615      	mov	r5, r2

    mpz_need_dig(dest_quo, lhs->len + 1); // +1 necessary?
    3178:	6851      	ldr	r1, [r2, #4]
    317a:	3101      	adds	r1, #1
    317c:	f7ff faec 	bl	2758 <mpz_need_dig>
    memset(dest_quo->dig, 0, (lhs->len + 1) * sizeof(mpz_dig_t));
    3180:	686a      	ldr	r2, [r5, #4]
    3182:	3201      	adds	r2, #1
    3184:	0052      	lsls	r2, r2, #1
    3186:	2100      	movs	r1, #0
    3188:	68a0      	ldr	r0, [r4, #8]
    318a:	f018 fb77 	bl	1b87c <memset>
    dest_quo->len = 0;
    318e:	46a0      	mov	r8, r4
    3190:	2300      	movs	r3, #0
    3192:	f848 3f04 	str.w	r3, [r8, #4]!
    mpz_need_dig(dest_rem, lhs->len + 1); // +1 necessary?
    3196:	6869      	ldr	r1, [r5, #4]
    3198:	3101      	adds	r1, #1
    319a:	4630      	mov	r0, r6
    319c:	f7ff fadc 	bl	2758 <mpz_need_dig>
    mpz_set(dest_rem, lhs);
    31a0:	4629      	mov	r1, r5
    31a2:	4630      	mov	r0, r6
    31a4:	f7ff fb8c 	bl	28c0 <mpz_set>
    mpn_div(dest_rem->dig, &dest_rem->len, rhs->dig, rhs->len, dest_quo->dig, &dest_quo->len);
    31a8:	f8cd 8004 	str.w	r8, [sp, #4]
    31ac:	68a3      	ldr	r3, [r4, #8]
    31ae:	9300      	str	r3, [sp, #0]
    31b0:	687b      	ldr	r3, [r7, #4]
    31b2:	68ba      	ldr	r2, [r7, #8]
    31b4:	1d31      	adds	r1, r6, #4
    31b6:	68b0      	ldr	r0, [r6, #8]
    31b8:	f7ff f986 	bl	24c8 <mpn_div>

    // check signs and do Python style modulo
    if (lhs->neg != rhs->neg) {
    31bc:	782b      	ldrb	r3, [r5, #0]
    31be:	783a      	ldrb	r2, [r7, #0]
    31c0:	4053      	eors	r3, r2
    31c2:	f013 0f01 	tst.w	r3, #1
    31c6:	d005      	beq.n	31d4 <mpz_divmod_inpl+0x70>
        dest_quo->neg = 1;
    31c8:	7823      	ldrb	r3, [r4, #0]
    31ca:	f043 0301 	orr.w	r3, r3, #1
    31ce:	7023      	strb	r3, [r4, #0]
    31d0:	6873      	ldr	r3, [r6, #4]
        if (!mpz_is_zero(dest_rem)) {
    31d2:	b94b      	cbnz	r3, 31e8 <mpz_divmod_inpl+0x84>
            mpz_t mpzone; mpz_init_from_int(&mpzone, -1);
            mpz_add_inpl(dest_quo, dest_quo, &mpzone);
            mpz_add_inpl(dest_rem, dest_rem, rhs);
        }
    }
}
    31d4:	b006      	add	sp, #24
    31d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(!mpz_is_zero(rhs));
    31da:	4b0b      	ldr	r3, [pc, #44]	; (3208 <mpz_divmod_inpl+0xa4>)
    31dc:	4a0b      	ldr	r2, [pc, #44]	; (320c <mpz_divmod_inpl+0xa8>)
    31de:	f240 51cf 	movw	r1, #1487	; 0x5cf
    31e2:	480b      	ldr	r0, [pc, #44]	; (3210 <mpz_divmod_inpl+0xac>)
    31e4:	f015 f9ba 	bl	1855c <__assert_func>
            mpz_t mpzone; mpz_init_from_int(&mpzone, -1);
    31e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    31ec:	a803      	add	r0, sp, #12
    31ee:	f7ff fb9e 	bl	292e <mpz_init_from_int>
            mpz_add_inpl(dest_quo, dest_quo, &mpzone);
    31f2:	aa03      	add	r2, sp, #12
    31f4:	4621      	mov	r1, r4
    31f6:	4620      	mov	r0, r4
    31f8:	f7ff fdbc 	bl	2d74 <mpz_add_inpl>
            mpz_add_inpl(dest_rem, dest_rem, rhs);
    31fc:	463a      	mov	r2, r7
    31fe:	4631      	mov	r1, r6
    3200:	4630      	mov	r0, r6
    3202:	f7ff fdb7 	bl	2d74 <mpz_add_inpl>
}
    3206:	e7e5      	b.n	31d4 <mpz_divmod_inpl+0x70>
    3208:	0002385c 	.word	0x0002385c
    320c:	000237ec 	.word	0x000237ec
    3210:	00023818 	.word	0x00023818

00003214 <mpz_hash>:
    return rem;
}
#endif

// must return actual int value if it fits in mp_int_t
mp_int_t mpz_hash(const mpz_t *z) {
    3214:	b410      	push	{r4}
    mp_int_t val = 0;
    mpz_dig_t *d = z->dig + z->len;
    3216:	6884      	ldr	r4, [r0, #8]
    3218:	6843      	ldr	r3, [r0, #4]
    321a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    mp_int_t val = 0;
    321e:	2200      	movs	r2, #0

    while (d-- > z->dig) {
    3220:	e004      	b.n	322c <mpz_hash+0x18>
        val = (val << DIG_SIZE) | *d;
    3222:	f833 3c02 	ldrh.w	r3, [r3, #-2]
    3226:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    while (d-- > z->dig) {
    322a:	460b      	mov	r3, r1
    322c:	1e99      	subs	r1, r3, #2
    322e:	429c      	cmp	r4, r3
    3230:	d3f7      	bcc.n	3222 <mpz_hash+0xe>
    }

    if (z->neg != 0) {
    3232:	7803      	ldrb	r3, [r0, #0]
    3234:	f013 0f01 	tst.w	r3, #1
    3238:	d000      	beq.n	323c <mpz_hash+0x28>
        val = -val;
    323a:	4252      	negs	r2, r2
    }

    return val;
}
    323c:	4610      	mov	r0, r2
    323e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3242:	4770      	bx	lr

00003244 <mpz_as_int_checked>:

bool mpz_as_int_checked(const mpz_t *i, mp_int_t *value) {
    3244:	b430      	push	{r4, r5}
    mp_uint_t val = 0;
    mpz_dig_t *d = i->dig + i->len;
    3246:	6885      	ldr	r5, [r0, #8]
    3248:	6843      	ldr	r3, [r0, #4]
    324a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    mp_uint_t val = 0;
    324e:	2200      	movs	r2, #0

    while (d-- > i->dig) {
    3250:	1e9c      	subs	r4, r3, #2
    3252:	429d      	cmp	r5, r3
    3254:	d208      	bcs.n	3268 <mpz_as_int_checked+0x24>
        if (val > (~(WORD_MSBIT_HIGH) >> DIG_SIZE)) {
    3256:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    325a:	d20e      	bcs.n	327a <mpz_as_int_checked+0x36>
            // will overflow
            return false;
        }
        val = (val << DIG_SIZE) | *d;
    325c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
    3260:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    while (d-- > i->dig) {
    3264:	4623      	mov	r3, r4
    3266:	e7f3      	b.n	3250 <mpz_as_int_checked+0xc>
    }

    if (i->neg != 0) {
    3268:	7803      	ldrb	r3, [r0, #0]
    326a:	f013 0f01 	tst.w	r3, #1
    326e:	d000      	beq.n	3272 <mpz_as_int_checked+0x2e>
        val = -val;
    3270:	4252      	negs	r2, r2
    }

    *value = val;
    3272:	600a      	str	r2, [r1, #0]
    return true;
    3274:	2001      	movs	r0, #1
}
    3276:	bc30      	pop	{r4, r5}
    3278:	4770      	bx	lr
            return false;
    327a:	2000      	movs	r0, #0
    327c:	e7fb      	b.n	3276 <mpz_as_int_checked+0x32>

0000327e <mpz_as_bytes>:
    *value = val;
    return true;
}

// writes at most len bytes to buf (so buf should be zeroed before calling)
void mpz_as_bytes(const mpz_t *z, bool big_endian, size_t len, byte *buf) {
    327e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3282:	4694      	mov	ip, r2
    byte *b = buf;
    if (big_endian) {
    3284:	460a      	mov	r2, r1
    3286:	b191      	cbz	r1, 32ae <mpz_as_bytes+0x30>
        b += len;
    3288:	eb03 060c 	add.w	r6, r3, ip
    }
    mpz_dig_t *zdig = z->dig;
    328c:	6881      	ldr	r1, [r0, #8]
    int bits = 0;
    mpz_dbl_dig_t d = 0;
    mpz_dbl_dig_t carry = 1;
    for (size_t zlen = z->len; zlen > 0; --zlen) {
    328e:	f8d0 e004 	ldr.w	lr, [r0, #4]
    mpz_dbl_dig_t carry = 1;
    3292:	f04f 0901 	mov.w	r9, #1
    mpz_dbl_dig_t d = 0;
    3296:	2400      	movs	r4, #0
    int bits = 0;
    3298:	4625      	mov	r5, r4
    for (size_t zlen = z->len; zlen > 0; --zlen) {
    329a:	f1be 0f00 	cmp.w	lr, #0
    329e:	d025      	beq.n	32ec <mpz_as_bytes+0x6e>
        bits += DIG_SIZE;
    32a0:	3510      	adds	r5, #16
        d = (d << DIG_SIZE) | *zdig++;
    32a2:	f101 0802 	add.w	r8, r1, #2
    32a6:	8809      	ldrh	r1, [r1, #0]
    32a8:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
        for (; bits >= 8; bits -= 8, d >>= 8) {
    32ac:	e00a      	b.n	32c4 <mpz_as_bytes+0x46>
    byte *b = buf;
    32ae:	461e      	mov	r6, r3
    32b0:	e7ec      	b.n	328c <mpz_as_bytes+0xe>
                *--b = val;
                if (b == buf) {
                    return;
                }
            } else {
                *b++ = val;
    32b2:	1c77      	adds	r7, r6, #1
    32b4:	7031      	strb	r1, [r6, #0]
                if (b == buf + len) {
    32b6:	eb03 010c 	add.w	r1, r3, ip
    32ba:	42b9      	cmp	r1, r7
    32bc:	d016      	beq.n	32ec <mpz_as_bytes+0x6e>
        for (; bits >= 8; bits -= 8, d >>= 8) {
    32be:	3d08      	subs	r5, #8
    32c0:	0a24      	lsrs	r4, r4, #8
    32c2:	463e      	mov	r6, r7
    32c4:	2d07      	cmp	r5, #7
    32c6:	dd13      	ble.n	32f0 <mpz_as_bytes+0x72>
            mpz_dig_t val = d;
    32c8:	b2a1      	uxth	r1, r4
            if (z->neg) {
    32ca:	7807      	ldrb	r7, [r0, #0]
    32cc:	f017 0f01 	tst.w	r7, #1
    32d0:	d005      	beq.n	32de <mpz_as_bytes+0x60>
                val = (~val & 0xff) + carry;
    32d2:	43c9      	mvns	r1, r1
    32d4:	fa59 f181 	uxtab	r1, r9, r1
    32d8:	b289      	uxth	r1, r1
                carry = val >> 8;
    32da:	ea4f 2911 	mov.w	r9, r1, lsr #8
            if (big_endian) {
    32de:	2a00      	cmp	r2, #0
    32e0:	d0e7      	beq.n	32b2 <mpz_as_bytes+0x34>
                *--b = val;
    32e2:	1e77      	subs	r7, r6, #1
    32e4:	f806 1c01 	strb.w	r1, [r6, #-1]
                if (b == buf) {
    32e8:	42bb      	cmp	r3, r7
    32ea:	d1e8      	bne.n	32be <mpz_as_bytes+0x40>
                    return;
                }
            }
        }
    }
}
    32ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (size_t zlen = z->len; zlen > 0; --zlen) {
    32f0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
        d = (d << DIG_SIZE) | *zdig++;
    32f4:	4641      	mov	r1, r8
    32f6:	e7d0      	b.n	329a <mpz_as_bytes+0x1c>

000032f8 <mpz_as_float>:

#if MICROPY_PY_BUILTINS_FLOAT
mp_float_t mpz_as_float(const mpz_t *i) {
    mp_float_t val = 0;
    mpz_dig_t *d = i->dig + i->len;
    32f8:	6881      	ldr	r1, [r0, #8]
    32fa:	6843      	ldr	r3, [r0, #4]
    32fc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    mp_float_t val = 0;
    3300:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 3334 <mpz_as_float+0x3c>

    while (d-- > i->dig) {
    3304:	e00c      	b.n	3320 <mpz_as_float+0x28>
        val = val * DIG_BASE + *d;
    3306:	eddf 7a0c 	vldr	s15, [pc, #48]	; 3338 <mpz_as_float+0x40>
    330a:	ee20 0a27 	vmul.f32	s0, s0, s15
    330e:	f833 3c02 	ldrh.w	r3, [r3, #-2]
    3312:	ee07 3a90 	vmov	s15, r3
    3316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    331a:	ee30 0a27 	vadd.f32	s0, s0, s15
    while (d-- > i->dig) {
    331e:	4613      	mov	r3, r2
    3320:	1e9a      	subs	r2, r3, #2
    3322:	4299      	cmp	r1, r3
    3324:	d3ef      	bcc.n	3306 <mpz_as_float+0xe>
    }

    if (i->neg != 0) {
    3326:	7803      	ldrb	r3, [r0, #0]
    3328:	f013 0f01 	tst.w	r3, #1
    332c:	d001      	beq.n	3332 <mpz_as_float+0x3a>
        val = -val;
    332e:	eeb1 0a40 	vneg.f32	s0, s0
    }

    return val;
}
    3332:	4770      	bx	lr
    3334:	00000000 	.word	0x00000000
    3338:	47800000 	.word	0x47800000

0000333c <mpz_as_str_inpl>:
#endif

// assumes enough space in str as calculated by mp_int_format_size
// base must be between 2 and 32 inclusive
// returns length of string, not including null byte
size_t mpz_as_str_inpl(const mpz_t *i, unsigned int base, const char *prefix, char base_char, char comma, char *str) {
    333c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3340:	469b      	mov	fp, r3
    3342:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
    assert(str != NULL);
    3346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3348:	b153      	cbz	r3, 3360 <mpz_as_str_inpl+0x24>
    334a:	4682      	mov	sl, r0
    334c:	460c      	mov	r4, r1
    334e:	4617      	mov	r7, r2
    assert(2 <= base && base <= 32);
    3350:	1e8b      	subs	r3, r1, #2
    3352:	2b1e      	cmp	r3, #30
    3354:	d80b      	bhi.n	336e <mpz_as_str_inpl+0x32>

    size_t ilen = i->len;
    3356:	6843      	ldr	r3, [r0, #4]

    char *s = str;
    if (ilen == 0) {
    3358:	bb0b      	cbnz	r3, 339e <mpz_as_str_inpl+0x62>
        if (prefix) {
    335a:	b17a      	cbz	r2, 337c <mpz_as_str_inpl+0x40>
    char *s = str;
    335c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    335e:	e012      	b.n	3386 <mpz_as_str_inpl+0x4a>
    assert(str != NULL);
    3360:	4b43      	ldr	r3, [pc, #268]	; (3470 <mpz_as_str_inpl+0x134>)
    3362:	4a44      	ldr	r2, [pc, #272]	; (3474 <mpz_as_str_inpl+0x138>)
    3364:	f240 6176 	movw	r1, #1654	; 0x676
    3368:	4843      	ldr	r0, [pc, #268]	; (3478 <mpz_as_str_inpl+0x13c>)
    336a:	f015 f8f7 	bl	1855c <__assert_func>
    assert(2 <= base && base <= 32);
    336e:	4b43      	ldr	r3, [pc, #268]	; (347c <mpz_as_str_inpl+0x140>)
    3370:	4a40      	ldr	r2, [pc, #256]	; (3474 <mpz_as_str_inpl+0x138>)
    3372:	f240 6177 	movw	r1, #1655	; 0x677
    3376:	4840      	ldr	r0, [pc, #256]	; (3478 <mpz_as_str_inpl+0x13c>)
    3378:	f015 f8f0 	bl	1855c <__assert_func>
    char *s = str;
    337c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    337e:	e005      	b.n	338c <mpz_as_str_inpl+0x50>
            while (*prefix)
                *s++ = *prefix++;
    3380:	3701      	adds	r7, #1
    3382:	701a      	strb	r2, [r3, #0]
    3384:	3301      	adds	r3, #1
            while (*prefix)
    3386:	783a      	ldrb	r2, [r7, #0]
    3388:	2a00      	cmp	r2, #0
    338a:	d1f9      	bne.n	3380 <mpz_as_str_inpl+0x44>
        }
        *s++ = '0';
    338c:	1c58      	adds	r0, r3, #1
    338e:	2230      	movs	r2, #48	; 0x30
    3390:	701a      	strb	r2, [r3, #0]
        *s = '\0';
    3392:	2200      	movs	r2, #0
    3394:	705a      	strb	r2, [r3, #1]
        return s - str;
    3396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3398:	1ac0      	subs	r0, r0, r3
    }

    *s = '\0'; // null termination

    return s - str;
}
    339a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mpz_dig_t *dig = m_new(mpz_dig_t, ilen);
    339e:	ea4f 0843 	mov.w	r8, r3, lsl #1
    33a2:	4640      	mov	r0, r8
    33a4:	f7fd fa8a 	bl	8bc <m_malloc>
    33a8:	4605      	mov	r5, r0
    memcpy(dig, i->dig, ilen * sizeof(mpz_dig_t));
    33aa:	4642      	mov	r2, r8
    33ac:	f8da 1008 	ldr.w	r1, [sl, #8]
    33b0:	f018 fa20 	bl	1b7f4 <memcpy>
    char *last_comma = str;
    33b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    char *s = str;
    33b6:	460e      	mov	r6, r1
    33b8:	e02e      	b.n	3418 <mpz_as_str_inpl+0xdc>
            a = (a << DIG_SIZE) | *d;
    33ba:	f8b0 c000 	ldrh.w	ip, [r0]
    33be:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
            *d = a / base;
    33c2:	fbb3 fcf4 	udiv	ip, r3, r4
    33c6:	f8a0 c000 	strh.w	ip, [r0]
            a %= base;
    33ca:	fb04 331c 	mls	r3, r4, ip, r3
        while (--d >= dig) {
    33ce:	3802      	subs	r0, #2
    33d0:	4285      	cmp	r5, r0
    33d2:	d9f2      	bls.n	33ba <mpz_as_str_inpl+0x7e>
        a += '0';
    33d4:	3330      	adds	r3, #48	; 0x30
        if (a > '9') {
    33d6:	2b39      	cmp	r3, #57	; 0x39
    33d8:	d901      	bls.n	33de <mpz_as_str_inpl+0xa2>
            a += base_char - '9' - 1;
    33da:	445b      	add	r3, fp
    33dc:	3b3a      	subs	r3, #58	; 0x3a
        *s++ = a;
    33de:	f106 0c01 	add.w	ip, r6, #1
    33e2:	7033      	strb	r3, [r6, #0]
        for (d = dig; d < dig + ilen; ++d) {
    33e4:	462b      	mov	r3, r5
    33e6:	4293      	cmp	r3, r2
    33e8:	d203      	bcs.n	33f2 <mpz_as_str_inpl+0xb6>
            if (*d != 0) {
    33ea:	8818      	ldrh	r0, [r3, #0]
    33ec:	b958      	cbnz	r0, 3406 <mpz_as_str_inpl+0xca>
        for (d = dig; d < dig + ilen; ++d) {
    33ee:	3302      	adds	r3, #2
    33f0:	e7f9      	b.n	33e6 <mpz_as_str_inpl+0xaa>
        done = true;
    33f2:	2301      	movs	r3, #1
        if (comma && (s - last_comma) == 3) {
    33f4:	f1b9 0f00 	cmp.w	r9, #0
    33f8:	d00c      	beq.n	3414 <mpz_as_str_inpl+0xd8>
    33fa:	ebac 0201 	sub.w	r2, ip, r1
    33fe:	2a03      	cmp	r2, #3
    3400:	d003      	beq.n	340a <mpz_as_str_inpl+0xce>
        *s++ = a;
    3402:	4666      	mov	r6, ip
    3404:	e007      	b.n	3416 <mpz_as_str_inpl+0xda>
                done = false;
    3406:	2300      	movs	r3, #0
    3408:	e7f4      	b.n	33f4 <mpz_as_str_inpl+0xb8>
            *s++ = comma;
    340a:	1cb1      	adds	r1, r6, #2
    340c:	f886 9001 	strb.w	r9, [r6, #1]
    3410:	460e      	mov	r6, r1
    3412:	e000      	b.n	3416 <mpz_as_str_inpl+0xda>
        *s++ = a;
    3414:	4666      	mov	r6, ip
    while (!done);
    3416:	b923      	cbnz	r3, 3422 <mpz_as_str_inpl+0xe6>
        mpz_dig_t *d = dig + ilen;
    3418:	eb05 0208 	add.w	r2, r5, r8
    341c:	4610      	mov	r0, r2
        mpz_dbl_dig_t a = 0;
    341e:	2300      	movs	r3, #0
        while (--d >= dig) {
    3420:	e7d5      	b.n	33ce <mpz_as_str_inpl+0x92>
    m_del(mpz_dig_t, dig, ilen);
    3422:	4628      	mov	r0, r5
    3424:	f7fd fa73 	bl	90e <m_free>
    if (prefix) {
    3428:	b157      	cbz	r7, 3440 <mpz_as_str_inpl+0x104>
        const char *p = &prefix[strlen(prefix)];
    342a:	4638      	mov	r0, r7
    342c:	f018 fa7a 	bl	1b924 <strlen>
    3430:	4438      	add	r0, r7
        while (p > prefix) {
    3432:	e003      	b.n	343c <mpz_as_str_inpl+0x100>
            *s++ = *--p;
    3434:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    3438:	7033      	strb	r3, [r6, #0]
    343a:	3601      	adds	r6, #1
        while (p > prefix) {
    343c:	42b8      	cmp	r0, r7
    343e:	d8f9      	bhi.n	3434 <mpz_as_str_inpl+0xf8>
    if (i->neg != 0) {
    3440:	f89a 3000 	ldrb.w	r3, [sl]
    3444:	f013 0f01 	tst.w	r3, #1
    3448:	d002      	beq.n	3450 <mpz_as_str_inpl+0x114>
        *s++ = '-';
    344a:	232d      	movs	r3, #45	; 0x2d
    344c:	7033      	strb	r3, [r6, #0]
    344e:	3601      	adds	r6, #1
    for (char *u = str, *v = s - 1; u < v; ++u, --v) {
    3450:	1e72      	subs	r2, r6, #1
    3452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3454:	e005      	b.n	3462 <mpz_as_str_inpl+0x126>
        char temp = *u;
    3456:	7819      	ldrb	r1, [r3, #0]
        *u = *v;
    3458:	7810      	ldrb	r0, [r2, #0]
    345a:	f803 0b01 	strb.w	r0, [r3], #1
        *v = temp;
    345e:	f802 1901 	strb.w	r1, [r2], #-1
    for (char *u = str, *v = s - 1; u < v; ++u, --v) {
    3462:	4293      	cmp	r3, r2
    3464:	d3f7      	bcc.n	3456 <mpz_as_str_inpl+0x11a>
    *s = '\0'; // null termination
    3466:	2300      	movs	r3, #0
    3468:	7033      	strb	r3, [r6, #0]
    return s - str;
    346a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    346c:	1af0      	subs	r0, r6, r3
    346e:	e794      	b.n	339a <mpz_as_str_inpl+0x5e>
    3470:	00023828 	.word	0x00023828
    3474:	000237fc 	.word	0x000237fc
    3478:	00023818 	.word	0x00023818
    347c:	00023834 	.word	0x00023834

00003480 <mp_reader_mem_readbyte>:
    const byte *end;
} mp_reader_mem_t;

STATIC mp_uint_t mp_reader_mem_readbyte(void *data) {
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    if (reader->cur < reader->end) {
    3480:	6883      	ldr	r3, [r0, #8]
    3482:	68c2      	ldr	r2, [r0, #12]
    3484:	4293      	cmp	r3, r2
    3486:	d203      	bcs.n	3490 <mp_reader_mem_readbyte+0x10>
        return *reader->cur++;
    3488:	1c5a      	adds	r2, r3, #1
    348a:	6082      	str	r2, [r0, #8]
    348c:	7818      	ldrb	r0, [r3, #0]
    348e:	4770      	bx	lr
    } else {
        return MP_READER_EOF;
    3490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
    3494:	4770      	bx	lr

00003496 <mp_reader_mem_close>:

STATIC void mp_reader_mem_close(void *data) {
    3496:	b510      	push	{r4, lr}
    3498:	4604      	mov	r4, r0
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    if (reader->free_len > 0) {
    349a:	6803      	ldr	r3, [r0, #0]
    349c:	b91b      	cbnz	r3, 34a6 <mp_reader_mem_close+0x10>
        m_del(char, (char*)reader->beg, reader->free_len);
    }
    m_del_obj(mp_reader_mem_t, reader);
    349e:	4620      	mov	r0, r4
    34a0:	f7fd fa35 	bl	90e <m_free>
}
    34a4:	bd10      	pop	{r4, pc}
        m_del(char, (char*)reader->beg, reader->free_len);
    34a6:	6840      	ldr	r0, [r0, #4]
    34a8:	f7fd fa31 	bl	90e <m_free>
    34ac:	e7f7      	b.n	349e <mp_reader_mem_close+0x8>
	...

000034b0 <mp_reader_new_mem>:

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len) {
    34b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34b2:	4605      	mov	r5, r0
    34b4:	460c      	mov	r4, r1
    34b6:	4616      	mov	r6, r2
    34b8:	461f      	mov	r7, r3
    mp_reader_mem_t *rm = m_new_obj(mp_reader_mem_t);
    34ba:	2010      	movs	r0, #16
    34bc:	f7fd f9fe 	bl	8bc <m_malloc>
    rm->free_len = free_len;
    34c0:	6007      	str	r7, [r0, #0]
    rm->beg = buf;
    34c2:	6044      	str	r4, [r0, #4]
    rm->cur = buf;
    34c4:	6084      	str	r4, [r0, #8]
    rm->end = buf + len;
    34c6:	4434      	add	r4, r6
    34c8:	60c4      	str	r4, [r0, #12]
    reader->data = rm;
    34ca:	6028      	str	r0, [r5, #0]
    reader->readbyte = mp_reader_mem_readbyte;
    34cc:	4b02      	ldr	r3, [pc, #8]	; (34d8 <mp_reader_new_mem+0x28>)
    34ce:	606b      	str	r3, [r5, #4]
    reader->close = mp_reader_mem_close;
    34d0:	4b02      	ldr	r3, [pc, #8]	; (34dc <mp_reader_new_mem+0x2c>)
    34d2:	60ab      	str	r3, [r5, #8]
}
    34d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34d6:	bf00      	nop
    34d8:	00003481 	.word	0x00003481
    34dc:	00003497 	.word	0x00003497

000034e0 <is_end>:

#define MP_LEXER_EOF ((unichar)MP_READER_EOF)
#define CUR_CHAR(lex) ((lex)->chr0)

STATIC bool is_end(mp_lexer_t *lex) {
    return lex->chr0 == MP_LEXER_EOF;
    34e0:	6900      	ldr	r0, [r0, #16]
}
    34e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    34e6:	bf14      	ite	ne
    34e8:	2000      	movne	r0, #0
    34ea:	2001      	moveq	r0, #1
    34ec:	4770      	bx	lr

000034ee <is_physical_newline>:

STATIC bool is_physical_newline(mp_lexer_t *lex) {
    return lex->chr0 == '\n';
    34ee:	6900      	ldr	r0, [r0, #16]
}
    34f0:	280a      	cmp	r0, #10
    34f2:	bf14      	ite	ne
    34f4:	2000      	movne	r0, #0
    34f6:	2001      	moveq	r0, #1
    34f8:	4770      	bx	lr

000034fa <is_char>:

STATIC bool is_char(mp_lexer_t *lex, byte c) {
    return lex->chr0 == c;
    34fa:	6900      	ldr	r0, [r0, #16]
}
    34fc:	4281      	cmp	r1, r0
    34fe:	bf14      	ite	ne
    3500:	2000      	movne	r0, #0
    3502:	2001      	moveq	r0, #1
    3504:	4770      	bx	lr

00003506 <is_char_or>:

STATIC bool is_char_or(mp_lexer_t *lex, byte c1, byte c2) {
    return lex->chr0 == c1 || lex->chr0 == c2;
    3506:	6903      	ldr	r3, [r0, #16]
    3508:	428b      	cmp	r3, r1
    350a:	d005      	beq.n	3518 <is_char_or+0x12>
    350c:	4293      	cmp	r3, r2
    350e:	d001      	beq.n	3514 <is_char_or+0xe>
    3510:	2000      	movs	r0, #0
}
    3512:	4770      	bx	lr
    return lex->chr0 == c1 || lex->chr0 == c2;
    3514:	2001      	movs	r0, #1
    3516:	4770      	bx	lr
    3518:	2001      	movs	r0, #1
    351a:	4770      	bx	lr

0000351c <is_char_or3>:

STATIC bool is_char_or3(mp_lexer_t *lex, byte c1, byte c2, byte c3) {
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    351c:	6900      	ldr	r0, [r0, #16]
    351e:	4288      	cmp	r0, r1
    3520:	d007      	beq.n	3532 <is_char_or3+0x16>
    3522:	4290      	cmp	r0, r2
    3524:	d007      	beq.n	3536 <is_char_or3+0x1a>
    3526:	4298      	cmp	r0, r3
    3528:	d001      	beq.n	352e <is_char_or3+0x12>
    352a:	2000      	movs	r0, #0
}
    352c:	4770      	bx	lr
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    352e:	2001      	movs	r0, #1
    3530:	4770      	bx	lr
    3532:	2001      	movs	r0, #1
    3534:	4770      	bx	lr
    3536:	2001      	movs	r0, #1
    3538:	4770      	bx	lr

0000353a <is_char_following>:

STATIC bool is_char_following(mp_lexer_t *lex, byte c) {
    return lex->chr1 == c;
    353a:	6940      	ldr	r0, [r0, #20]
}
    353c:	4281      	cmp	r1, r0
    353e:	bf14      	ite	ne
    3540:	2000      	movne	r0, #0
    3542:	2001      	moveq	r0, #1
    3544:	4770      	bx	lr

00003546 <is_char_following_or>:

STATIC bool is_char_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    return lex->chr1 == c1 || lex->chr1 == c2;
    3546:	6943      	ldr	r3, [r0, #20]
    3548:	428b      	cmp	r3, r1
    354a:	d005      	beq.n	3558 <is_char_following_or+0x12>
    354c:	4293      	cmp	r3, r2
    354e:	d001      	beq.n	3554 <is_char_following_or+0xe>
    3550:	2000      	movs	r0, #0
}
    3552:	4770      	bx	lr
    return lex->chr1 == c1 || lex->chr1 == c2;
    3554:	2001      	movs	r0, #1
    3556:	4770      	bx	lr
    3558:	2001      	movs	r0, #1
    355a:	4770      	bx	lr

0000355c <is_char_following_following_or>:

STATIC bool is_char_following_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    return lex->chr2 == c1 || lex->chr2 == c2;
    355c:	6983      	ldr	r3, [r0, #24]
    355e:	428b      	cmp	r3, r1
    3560:	d005      	beq.n	356e <is_char_following_following_or+0x12>
    3562:	4293      	cmp	r3, r2
    3564:	d001      	beq.n	356a <is_char_following_following_or+0xe>
    3566:	2000      	movs	r0, #0
}
    3568:	4770      	bx	lr
    return lex->chr2 == c1 || lex->chr2 == c2;
    356a:	2001      	movs	r0, #1
    356c:	4770      	bx	lr
    356e:	2001      	movs	r0, #1
    3570:	4770      	bx	lr

00003572 <is_char_and>:

STATIC bool is_char_and(mp_lexer_t *lex, byte c1, byte c2) {
    return lex->chr0 == c1 && lex->chr1 == c2;
    3572:	6903      	ldr	r3, [r0, #16]
    3574:	428b      	cmp	r3, r1
    3576:	d001      	beq.n	357c <is_char_and+0xa>
    3578:	2000      	movs	r0, #0
    357a:	4770      	bx	lr
    357c:	6943      	ldr	r3, [r0, #20]
    357e:	4293      	cmp	r3, r2
    3580:	d001      	beq.n	3586 <is_char_and+0x14>
    3582:	2000      	movs	r0, #0
    3584:	4770      	bx	lr
    3586:	2001      	movs	r0, #1
}
    3588:	4770      	bx	lr

0000358a <is_following_base_char>:
STATIC bool is_following_digit(mp_lexer_t *lex) {
    return unichar_isdigit(lex->chr1);
}

STATIC bool is_following_base_char(mp_lexer_t *lex) {
    const unichar chr1 = lex->chr1 | 0x20;
    358a:	6943      	ldr	r3, [r0, #20]
    358c:	f043 0320 	orr.w	r3, r3, #32
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    3590:	2b62      	cmp	r3, #98	; 0x62
    3592:	d007      	beq.n	35a4 <is_following_base_char+0x1a>
    3594:	2b6f      	cmp	r3, #111	; 0x6f
    3596:	d007      	beq.n	35a8 <is_following_base_char+0x1e>
    3598:	2b78      	cmp	r3, #120	; 0x78
    359a:	d001      	beq.n	35a0 <is_following_base_char+0x16>
    359c:	2000      	movs	r0, #0
}
    359e:	4770      	bx	lr
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    35a0:	2001      	movs	r0, #1
    35a2:	4770      	bx	lr
    35a4:	2001      	movs	r0, #1
    35a6:	4770      	bx	lr
    35a8:	2001      	movs	r0, #1
    35aa:	4770      	bx	lr

000035ac <is_following_odigit>:

STATIC bool is_following_odigit(mp_lexer_t *lex) {
    return lex->chr1 >= '0' && lex->chr1 <= '7';
    35ac:	6940      	ldr	r0, [r0, #20]
    35ae:	3830      	subs	r0, #48	; 0x30
}
    35b0:	2807      	cmp	r0, #7
    35b2:	bf8c      	ite	hi
    35b4:	2000      	movhi	r0, #0
    35b6:	2001      	movls	r0, #1
    35b8:	4770      	bx	lr

000035ba <is_string_or_bytes>:

STATIC bool is_string_or_bytes(mp_lexer_t *lex) {
    35ba:	b510      	push	{r4, lr}
    35bc:	4604      	mov	r4, r0
    return is_char_or(lex, '\'', '\"')
    35be:	2222      	movs	r2, #34	; 0x22
    35c0:	2127      	movs	r1, #39	; 0x27
    35c2:	f7ff ffa0 	bl	3506 <is_char_or>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    35c6:	bb00      	cbnz	r0, 360a <is_string_or_bytes+0x50>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
    35c8:	2362      	movs	r3, #98	; 0x62
    35ca:	2275      	movs	r2, #117	; 0x75
    35cc:	2172      	movs	r1, #114	; 0x72
    35ce:	4620      	mov	r0, r4
    35d0:	f7ff ffa4 	bl	351c <is_char_or3>
    35d4:	b128      	cbz	r0, 35e2 <is_string_or_bytes+0x28>
    35d6:	2222      	movs	r2, #34	; 0x22
    35d8:	2127      	movs	r1, #39	; 0x27
    35da:	4620      	mov	r0, r4
    35dc:	f7ff ffb3 	bl	3546 <is_char_following_or>
    35e0:	b9a8      	cbnz	r0, 360e <is_string_or_bytes+0x54>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    35e2:	2262      	movs	r2, #98	; 0x62
    35e4:	2172      	movs	r1, #114	; 0x72
    35e6:	4620      	mov	r0, r4
    35e8:	f7ff ffc3 	bl	3572 <is_char_and>
    35ec:	b928      	cbnz	r0, 35fa <is_string_or_bytes+0x40>
    35ee:	2272      	movs	r2, #114	; 0x72
    35f0:	2162      	movs	r1, #98	; 0x62
    35f2:	4620      	mov	r0, r4
    35f4:	f7ff ffbd 	bl	3572 <is_char_and>
    35f8:	b158      	cbz	r0, 3612 <is_string_or_bytes+0x58>
            && is_char_following_following_or(lex, '\'', '\"'));
    35fa:	2222      	movs	r2, #34	; 0x22
    35fc:	2127      	movs	r1, #39	; 0x27
    35fe:	4620      	mov	r0, r4
    3600:	f7ff ffac 	bl	355c <is_char_following_following_or>
    3604:	b110      	cbz	r0, 360c <is_string_or_bytes+0x52>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    3606:	2001      	movs	r0, #1
    3608:	e000      	b.n	360c <is_string_or_bytes+0x52>
    360a:	2001      	movs	r0, #1
}
    360c:	bd10      	pop	{r4, pc}
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    360e:	2001      	movs	r0, #1
    3610:	e7fc      	b.n	360c <is_string_or_bytes+0x52>
    3612:	2000      	movs	r0, #0
    3614:	e7fa      	b.n	360c <is_string_or_bytes+0x52>

00003616 <next_char>:

STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    return is_head_of_identifier(lex) || is_digit(lex);
}

STATIC void next_char(mp_lexer_t *lex) {
    3616:	b510      	push	{r4, lr}
    3618:	4604      	mov	r4, r0
    if (lex->chr0 == '\n') {
    361a:	6903      	ldr	r3, [r0, #16]
    361c:	2b0a      	cmp	r3, #10
    361e:	d014      	beq.n	364a <next_char+0x34>
        // a new line
        ++lex->line;
        lex->column = 1;
    } else if (lex->chr0 == '\t') {
    3620:	2b09      	cmp	r3, #9
    3622:	d018      	beq.n	3656 <next_char+0x40>
        // a tab
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    } else {
        // a character worth one column
        ++lex->column;
    3624:	6a03      	ldr	r3, [r0, #32]
    3626:	3301      	adds	r3, #1
    3628:	6203      	str	r3, [r0, #32]
    }

    lex->chr0 = lex->chr1;
    362a:	6963      	ldr	r3, [r4, #20]
    362c:	6123      	str	r3, [r4, #16]
    lex->chr1 = lex->chr2;
    362e:	69a3      	ldr	r3, [r4, #24]
    3630:	6163      	str	r3, [r4, #20]
    lex->chr2 = lex->reader.readbyte(lex->reader.data);
    3632:	68a3      	ldr	r3, [r4, #8]
    3634:	6860      	ldr	r0, [r4, #4]
    3636:	4798      	blx	r3
    3638:	61a0      	str	r0, [r4, #24]

    if (lex->chr1 == '\r') {
    363a:	6963      	ldr	r3, [r4, #20]
    363c:	2b0d      	cmp	r3, #13
    363e:	d011      	beq.n	3664 <next_char+0x4e>
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
        }
    }

    // check if we need to insert a newline at end of file
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    3640:	69a3      	ldr	r3, [r4, #24]
    3642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3646:	d016      	beq.n	3676 <next_char+0x60>
        lex->chr2 = '\n';
    }
}
    3648:	bd10      	pop	{r4, pc}
        ++lex->line;
    364a:	69c3      	ldr	r3, [r0, #28]
    364c:	3301      	adds	r3, #1
    364e:	61c3      	str	r3, [r0, #28]
        lex->column = 1;
    3650:	2301      	movs	r3, #1
    3652:	6203      	str	r3, [r0, #32]
    3654:	e7e9      	b.n	362a <next_char+0x14>
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    3656:	6a03      	ldr	r3, [r0, #32]
    3658:	3307      	adds	r3, #7
    365a:	f023 0307 	bic.w	r3, r3, #7
    365e:	3301      	adds	r3, #1
    3660:	6203      	str	r3, [r0, #32]
    3662:	e7e2      	b.n	362a <next_char+0x14>
        lex->chr1 = '\n';
    3664:	230a      	movs	r3, #10
    3666:	6163      	str	r3, [r4, #20]
        if (lex->chr2 == '\n') {
    3668:	4298      	cmp	r0, r3
    366a:	d1e9      	bne.n	3640 <next_char+0x2a>
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
    366c:	68a3      	ldr	r3, [r4, #8]
    366e:	6860      	ldr	r0, [r4, #4]
    3670:	4798      	blx	r3
    3672:	61a0      	str	r0, [r4, #24]
    3674:	e7e4      	b.n	3640 <next_char+0x2a>
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    3676:	6963      	ldr	r3, [r4, #20]
    3678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    367c:	d0e4      	beq.n	3648 <next_char+0x32>
    367e:	2b0a      	cmp	r3, #10
    3680:	d0e2      	beq.n	3648 <next_char+0x32>
        lex->chr2 = '\n';
    3682:	230a      	movs	r3, #10
    3684:	61a3      	str	r3, [r4, #24]
}
    3686:	e7df      	b.n	3648 <next_char+0x32>

00003688 <indent_top>:
    }
    lex->indent_level[lex->num_indent_level++] = indent;
}

STATIC size_t indent_top(mp_lexer_t *lex) {
    return lex->indent_level[lex->num_indent_level - 1];
    3688:	6b42      	ldr	r2, [r0, #52]	; 0x34
    368a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    368c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    3690:	3b01      	subs	r3, #1
}
    3692:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    3696:	4770      	bx	lr

00003698 <indent_pop>:

STATIC void indent_pop(mp_lexer_t *lex) {
    lex->num_indent_level -= 1;
    3698:	6b03      	ldr	r3, [r0, #48]	; 0x30
    369a:	3b01      	subs	r3, #1
    369c:	6303      	str	r3, [r0, #48]	; 0x30
}
    369e:	4770      	bx	lr

000036a0 <indent_push>:
STATIC void indent_push(mp_lexer_t *lex, size_t indent) {
    36a0:	b538      	push	{r3, r4, r5, lr}
    36a2:	4604      	mov	r4, r0
    36a4:	460d      	mov	r5, r1
    if (lex->num_indent_level >= lex->alloc_indent_level) {
    36a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    36a8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    36aa:	428b      	cmp	r3, r1
    36ac:	d206      	bcs.n	36bc <indent_push+0x1c>
    lex->indent_level[lex->num_indent_level++] = indent;
    36ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
    36b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    36b2:	1c59      	adds	r1, r3, #1
    36b4:	6321      	str	r1, [r4, #48]	; 0x30
    36b6:	f822 5013 	strh.w	r5, [r2, r3, lsl #1]
}
    36ba:	bd38      	pop	{r3, r4, r5, pc}
        lex->indent_level = m_renew(uint16_t, lex->indent_level, lex->alloc_indent_level, lex->alloc_indent_level + MICROPY_ALLOC_LEXEL_INDENT_INC);
    36bc:	3108      	adds	r1, #8
    36be:	0049      	lsls	r1, r1, #1
    36c0:	6b40      	ldr	r0, [r0, #52]	; 0x34
    36c2:	f7fd f912 	bl	8ea <m_realloc>
    36c6:	6360      	str	r0, [r4, #52]	; 0x34
        lex->alloc_indent_level += MICROPY_ALLOC_LEXEL_INDENT_INC;
    36c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    36ca:	3308      	adds	r3, #8
    36cc:	62e3      	str	r3, [r4, #44]	; 0x2c
    36ce:	e7ee      	b.n	36ae <indent_push+0xe>

000036d0 <get_hex>:
};

// This is called with CUR_CHAR() before first hex digit, and should return with
// it pointing to last hex digit
// num_digits must be greater than zero
STATIC bool get_hex(mp_lexer_t *lex, size_t num_digits, mp_uint_t *result) {
    36d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36d4:	4606      	mov	r6, r0
    36d6:	4690      	mov	r8, r2
    mp_uint_t num = 0;
    36d8:	2400      	movs	r4, #0
    while (num_digits-- != 0) {
    36da:	1e4f      	subs	r7, r1, #1
    36dc:	b179      	cbz	r1, 36fe <get_hex+0x2e>
        next_char(lex);
    36de:	4630      	mov	r0, r6
    36e0:	f7ff ff99 	bl	3616 <next_char>
        unichar c = CUR_CHAR(lex);
    36e4:	6935      	ldr	r5, [r6, #16]
        if (!unichar_isxdigit(c)) {
    36e6:	4628      	mov	r0, r5
    36e8:	f7fe fcfe 	bl	20e8 <unichar_isxdigit>
    36ec:	4603      	mov	r3, r0
    36ee:	b148      	cbz	r0, 3704 <get_hex+0x34>
            return false;
        }
        num = (num << 4) + unichar_xdigit_value(c);
    36f0:	0124      	lsls	r4, r4, #4
    36f2:	4628      	mov	r0, r5
    36f4:	f7fe fd50 	bl	2198 <unichar_xdigit_value>
    36f8:	4404      	add	r4, r0
    while (num_digits-- != 0) {
    36fa:	4639      	mov	r1, r7
    36fc:	e7ed      	b.n	36da <get_hex+0xa>
    }
    *result = num;
    36fe:	f8c8 4000 	str.w	r4, [r8]
    return true;
    3702:	2301      	movs	r3, #1
}
    3704:	4618      	mov	r0, r3
    3706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000370c <parse_string_literal>:

STATIC void parse_string_literal(mp_lexer_t *lex, bool is_raw) {
    370c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3710:	b083      	sub	sp, #12
    3712:	4604      	mov	r4, r0
    3714:	4688      	mov	r8, r1
    // get first quoting character
    char quote_char = '\'';
    if (is_char(lex, '\"')) {
    3716:	2122      	movs	r1, #34	; 0x22
    3718:	f7ff feef 	bl	34fa <is_char>
    371c:	b960      	cbnz	r0, 3738 <parse_string_literal+0x2c>
    char quote_char = '\'';
    371e:	2727      	movs	r7, #39	; 0x27
        quote_char = '\"';
    }
    next_char(lex);
    3720:	4620      	mov	r0, r4
    3722:	f7ff ff78 	bl	3616 <next_char>

    // work out if it's a single or triple quoted literal
    size_t num_quotes;
    if (is_char_and(lex, quote_char, quote_char)) {
    3726:	463a      	mov	r2, r7
    3728:	4639      	mov	r1, r7
    372a:	4620      	mov	r0, r4
    372c:	f7ff ff21 	bl	3572 <is_char_and>
    3730:	b920      	cbnz	r0, 373c <parse_string_literal+0x30>
        next_char(lex);
        next_char(lex);
        num_quotes = 3;
    } else {
        // single quotes
        num_quotes = 1;
    3732:	2601      	movs	r6, #1
    }

    size_t n_closing = 0;
    3734:	2500      	movs	r5, #0
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    3736:	e07f      	b.n	3838 <parse_string_literal+0x12c>
        quote_char = '\"';
    3738:	2722      	movs	r7, #34	; 0x22
    373a:	e7f1      	b.n	3720 <parse_string_literal+0x14>
        next_char(lex);
    373c:	4620      	mov	r0, r4
    373e:	f7ff ff6a 	bl	3616 <next_char>
        next_char(lex);
    3742:	4620      	mov	r0, r4
    3744:	f7ff ff67 	bl	3616 <next_char>
        num_quotes = 3;
    3748:	2603      	movs	r6, #3
    374a:	e7f3      	b.n	3734 <parse_string_literal+0x28>
        if (is_char(lex, quote_char)) {
            n_closing += 1;
    374c:	3501      	adds	r5, #1
            vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    374e:	6921      	ldr	r1, [r4, #16]
    3750:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3754:	f7fe f8b0 	bl	18b8 <vstr_add_char>
    3758:	e06b      	b.n	3832 <parse_string_literal+0x126>
            if (is_char(lex, '\\')) {
                next_char(lex);
                unichar c = CUR_CHAR(lex);
                if (is_raw) {
                    // raw strings allow escaping of quotes, but the backslash is also emitted
                    vstr_add_char(&lex->vstr, '\\');
    375a:	215c      	movs	r1, #92	; 0x5c
    375c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3760:	f7fe f8aa 	bl	18b8 <vstr_add_char>
                                vstr_add_char(&lex->vstr, '\\');
                            }
                            break;
                    }
                }
                if (c != MP_LEXER_EOF) {
    3764:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3768:	f000 816e 	beq.w	3a48 <parse_string_literal+0x33c>
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
                        }
                    } else {
                        // without unicode everything is just added as an 8-bit byte
                        if (c < 0x100) {
    376c:	2dff      	cmp	r5, #255	; 0xff
    376e:	d953      	bls.n	3818 <parse_string_literal+0x10c>
                            vstr_add_byte(&lex->vstr, c);
                        } else {
                            // 8-bit character out of range
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
    3770:	2301      	movs	r3, #1
    3772:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            n_closing = 0;
    3776:	2500      	movs	r5, #0
    3778:	e05b      	b.n	3832 <parse_string_literal+0x126>
                        case 'r': c = 0x0d; break;
    377a:	250d      	movs	r5, #13
    377c:	e7f6      	b.n	376c <parse_string_literal+0x60>
                        case 'b': c = 0x08; break;
    377e:	2508      	movs	r5, #8
    3780:	e7f4      	b.n	376c <parse_string_literal+0x60>
                        case 't': c = 0x09; break;
    3782:	2509      	movs	r5, #9
    3784:	e7f2      	b.n	376c <parse_string_literal+0x60>
                        case 'n': c = 0x0a; break;
    3786:	250a      	movs	r5, #10
    3788:	e7f0      	b.n	376c <parse_string_literal+0x60>
                        case 'v': c = 0x0b; break;
    378a:	250b      	movs	r5, #11
    378c:	e7ee      	b.n	376c <parse_string_literal+0x60>
                        case 'f': c = 0x0c; break;
    378e:	250c      	movs	r5, #12
    3790:	e7ec      	b.n	376c <parse_string_literal+0x60>
                            if (lex->tok_kind == MP_TOKEN_BYTES) {
    3792:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    3796:	2b0b      	cmp	r3, #11
    3798:	d010      	beq.n	37bc <parse_string_literal+0xb0>
                            mp_uint_t num = 0;
    379a:	2300      	movs	r3, #0
    379c:	9301      	str	r3, [sp, #4]
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    379e:	2d78      	cmp	r5, #120	; 0x78
    37a0:	d014      	beq.n	37cc <parse_string_literal+0xc0>
    37a2:	2d75      	cmp	r5, #117	; 0x75
    37a4:	d010      	beq.n	37c8 <parse_string_literal+0xbc>
    37a6:	2108      	movs	r1, #8
    37a8:	aa01      	add	r2, sp, #4
    37aa:	4620      	mov	r0, r4
    37ac:	f7ff ff90 	bl	36d0 <get_hex>
    37b0:	b910      	cbnz	r0, 37b8 <parse_string_literal+0xac>
                                lex->tok_kind = MP_TOKEN_INVALID;
    37b2:	2301      	movs	r3, #1
    37b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
                            c = num;
    37b8:	9d01      	ldr	r5, [sp, #4]
    37ba:	e7d3      	b.n	3764 <parse_string_literal+0x58>
                                vstr_add_char(&lex->vstr, '\\');
    37bc:	215c      	movs	r1, #92	; 0x5c
    37be:	f104 0044 	add.w	r0, r4, #68	; 0x44
    37c2:	f7fe f879 	bl	18b8 <vstr_add_char>
                                break;
    37c6:	e7cd      	b.n	3764 <parse_string_literal+0x58>
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    37c8:	2104      	movs	r1, #4
    37ca:	e7ed      	b.n	37a8 <parse_string_literal+0x9c>
    37cc:	2102      	movs	r1, #2
    37ce:	e7eb      	b.n	37a8 <parse_string_literal+0x9c>
                            mp_raise_NotImplementedError("unicode name escapes");
    37d0:	48a8      	ldr	r0, [pc, #672]	; (3a74 <parse_string_literal+0x368>)
    37d2:	f006 ff7d 	bl	a6d0 <mp_raise_NotImplementedError>
                            if (c >= '0' && c <= '7') {
    37d6:	f1a5 0930 	sub.w	r9, r5, #48	; 0x30
    37da:	f1b9 0f07 	cmp.w	r9, #7
    37de:	d811      	bhi.n	3804 <parse_string_literal+0xf8>
                                size_t digits = 3;
    37e0:	2503      	movs	r5, #3
    37e2:	e007      	b.n	37f4 <parse_string_literal+0xe8>
                                    next_char(lex);
    37e4:	4620      	mov	r0, r4
    37e6:	f7ff ff16 	bl	3616 <next_char>
                                    num = num * 8 + (CUR_CHAR(lex) - '0');
    37ea:	6923      	ldr	r3, [r4, #16]
    37ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    37f0:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
                                while (is_following_odigit(lex) && --digits != 0) {
    37f4:	4620      	mov	r0, r4
    37f6:	f7ff fed9 	bl	35ac <is_following_odigit>
    37fa:	b148      	cbz	r0, 3810 <parse_string_literal+0x104>
    37fc:	3d01      	subs	r5, #1
    37fe:	d1f1      	bne.n	37e4 <parse_string_literal+0xd8>
                                c = num;
    3800:	464d      	mov	r5, r9
    3802:	e7af      	b.n	3764 <parse_string_literal+0x58>
                                vstr_add_char(&lex->vstr, '\\');
    3804:	215c      	movs	r1, #92	; 0x5c
    3806:	f104 0044 	add.w	r0, r4, #68	; 0x44
    380a:	f7fe f855 	bl	18b8 <vstr_add_char>
    380e:	e7a9      	b.n	3764 <parse_string_literal+0x58>
                                c = num;
    3810:	464d      	mov	r5, r9
    3812:	e7a7      	b.n	3764 <parse_string_literal+0x58>
                        case 'a': c = 0x07; break;
    3814:	2507      	movs	r5, #7
    3816:	e7a9      	b.n	376c <parse_string_literal+0x60>
                            vstr_add_byte(&lex->vstr, c);
    3818:	b2e9      	uxtb	r1, r5
    381a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    381e:	f7fe f844 	bl	18aa <vstr_add_byte>
            n_closing = 0;
    3822:	2500      	movs	r5, #0
    3824:	e005      	b.n	3832 <parse_string_literal+0x126>
                    }
                }
            } else {
                // Add the "character" as a byte so that we remain 8-bit clean.
                // This way, strings are parsed correctly whether or not they contain utf-8 chars.
                vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    3826:	7c21      	ldrb	r1, [r4, #16]
    3828:	f104 0044 	add.w	r0, r4, #68	; 0x44
    382c:	f7fe f83d 	bl	18aa <vstr_add_byte>
            n_closing = 0;
    3830:	2500      	movs	r5, #0
            }
        }
        next_char(lex);
    3832:	4620      	mov	r0, r4
    3834:	f7ff feef 	bl	3616 <next_char>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    3838:	4620      	mov	r0, r4
    383a:	f7ff fe51 	bl	34e0 <is_end>
    383e:	2800      	cmp	r0, #0
    3840:	f040 810b 	bne.w	3a5a <parse_string_literal+0x34e>
    3844:	2e01      	cmp	r6, #1
    3846:	f240 8101 	bls.w	3a4c <parse_string_literal+0x340>
    384a:	42ae      	cmp	r6, r5
    384c:	f240 8105 	bls.w	3a5a <parse_string_literal+0x34e>
        if (is_char(lex, quote_char)) {
    3850:	4639      	mov	r1, r7
    3852:	4620      	mov	r0, r4
    3854:	f7ff fe51 	bl	34fa <is_char>
    3858:	2800      	cmp	r0, #0
    385a:	f47f af77 	bne.w	374c <parse_string_literal+0x40>
            if (is_char(lex, '\\')) {
    385e:	215c      	movs	r1, #92	; 0x5c
    3860:	4620      	mov	r0, r4
    3862:	f7ff fe4a 	bl	34fa <is_char>
    3866:	2800      	cmp	r0, #0
    3868:	d0dd      	beq.n	3826 <parse_string_literal+0x11a>
                next_char(lex);
    386a:	4620      	mov	r0, r4
    386c:	f7ff fed3 	bl	3616 <next_char>
                unichar c = CUR_CHAR(lex);
    3870:	6925      	ldr	r5, [r4, #16]
                if (is_raw) {
    3872:	f1b8 0f00 	cmp.w	r8, #0
    3876:	f47f af70 	bne.w	375a <parse_string_literal+0x4e>
                    switch (c) {
    387a:	f1a5 030a 	sub.w	r3, r5, #10
    387e:	2b6e      	cmp	r3, #110	; 0x6e
    3880:	d8a9      	bhi.n	37d6 <parse_string_literal+0xca>
    3882:	a201      	add	r2, pc, #4	; (adr r2, 3888 <parse_string_literal+0x17c>)
    3884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3888:	00003a45 	.word	0x00003a45
    388c:	000037d7 	.word	0x000037d7
    3890:	000037d7 	.word	0x000037d7
    3894:	000037d7 	.word	0x000037d7
    3898:	000037d7 	.word	0x000037d7
    389c:	000037d7 	.word	0x000037d7
    38a0:	000037d7 	.word	0x000037d7
    38a4:	000037d7 	.word	0x000037d7
    38a8:	000037d7 	.word	0x000037d7
    38ac:	000037d7 	.word	0x000037d7
    38b0:	000037d7 	.word	0x000037d7
    38b4:	000037d7 	.word	0x000037d7
    38b8:	000037d7 	.word	0x000037d7
    38bc:	000037d7 	.word	0x000037d7
    38c0:	000037d7 	.word	0x000037d7
    38c4:	000037d7 	.word	0x000037d7
    38c8:	000037d7 	.word	0x000037d7
    38cc:	000037d7 	.word	0x000037d7
    38d0:	000037d7 	.word	0x000037d7
    38d4:	000037d7 	.word	0x000037d7
    38d8:	000037d7 	.word	0x000037d7
    38dc:	000037d7 	.word	0x000037d7
    38e0:	000037d7 	.word	0x000037d7
    38e4:	000037d7 	.word	0x000037d7
    38e8:	00003765 	.word	0x00003765
    38ec:	000037d7 	.word	0x000037d7
    38f0:	000037d7 	.word	0x000037d7
    38f4:	000037d7 	.word	0x000037d7
    38f8:	000037d7 	.word	0x000037d7
    38fc:	00003765 	.word	0x00003765
    3900:	000037d7 	.word	0x000037d7
    3904:	000037d7 	.word	0x000037d7
    3908:	000037d7 	.word	0x000037d7
    390c:	000037d7 	.word	0x000037d7
    3910:	000037d7 	.word	0x000037d7
    3914:	000037d7 	.word	0x000037d7
    3918:	000037d7 	.word	0x000037d7
    391c:	000037d7 	.word	0x000037d7
    3920:	000037d7 	.word	0x000037d7
    3924:	000037d7 	.word	0x000037d7
    3928:	000037d7 	.word	0x000037d7
    392c:	000037d7 	.word	0x000037d7
    3930:	000037d7 	.word	0x000037d7
    3934:	000037d7 	.word	0x000037d7
    3938:	000037d7 	.word	0x000037d7
    393c:	000037d7 	.word	0x000037d7
    3940:	000037d7 	.word	0x000037d7
    3944:	000037d7 	.word	0x000037d7
    3948:	000037d7 	.word	0x000037d7
    394c:	000037d7 	.word	0x000037d7
    3950:	000037d7 	.word	0x000037d7
    3954:	000037d7 	.word	0x000037d7
    3958:	000037d7 	.word	0x000037d7
    395c:	000037d7 	.word	0x000037d7
    3960:	000037d7 	.word	0x000037d7
    3964:	000037d7 	.word	0x000037d7
    3968:	000037d7 	.word	0x000037d7
    396c:	000037d7 	.word	0x000037d7
    3970:	000037d7 	.word	0x000037d7
    3974:	000037d7 	.word	0x000037d7
    3978:	000037d7 	.word	0x000037d7
    397c:	000037d7 	.word	0x000037d7
    3980:	000037d7 	.word	0x000037d7
    3984:	000037d7 	.word	0x000037d7
    3988:	000037d7 	.word	0x000037d7
    398c:	000037d7 	.word	0x000037d7
    3990:	000037d7 	.word	0x000037d7
    3994:	000037d7 	.word	0x000037d7
    3998:	000037d1 	.word	0x000037d1
    399c:	000037d7 	.word	0x000037d7
    39a0:	000037d7 	.word	0x000037d7
    39a4:	000037d7 	.word	0x000037d7
    39a8:	000037d7 	.word	0x000037d7
    39ac:	000037d7 	.word	0x000037d7
    39b0:	000037d7 	.word	0x000037d7
    39b4:	00003793 	.word	0x00003793
    39b8:	000037d7 	.word	0x000037d7
    39bc:	000037d7 	.word	0x000037d7
    39c0:	000037d7 	.word	0x000037d7
    39c4:	000037d7 	.word	0x000037d7
    39c8:	000037d7 	.word	0x000037d7
    39cc:	000037d7 	.word	0x000037d7
    39d0:	00003765 	.word	0x00003765
    39d4:	000037d7 	.word	0x000037d7
    39d8:	000037d7 	.word	0x000037d7
    39dc:	000037d7 	.word	0x000037d7
    39e0:	000037d7 	.word	0x000037d7
    39e4:	00003815 	.word	0x00003815
    39e8:	0000377f 	.word	0x0000377f
    39ec:	000037d7 	.word	0x000037d7
    39f0:	000037d7 	.word	0x000037d7
    39f4:	000037d7 	.word	0x000037d7
    39f8:	0000378f 	.word	0x0000378f
    39fc:	000037d7 	.word	0x000037d7
    3a00:	000037d7 	.word	0x000037d7
    3a04:	000037d7 	.word	0x000037d7
    3a08:	000037d7 	.word	0x000037d7
    3a0c:	000037d7 	.word	0x000037d7
    3a10:	000037d7 	.word	0x000037d7
    3a14:	000037d7 	.word	0x000037d7
    3a18:	00003787 	.word	0x00003787
    3a1c:	000037d7 	.word	0x000037d7
    3a20:	000037d7 	.word	0x000037d7
    3a24:	000037d7 	.word	0x000037d7
    3a28:	0000377b 	.word	0x0000377b
    3a2c:	000037d7 	.word	0x000037d7
    3a30:	00003783 	.word	0x00003783
    3a34:	00003793 	.word	0x00003793
    3a38:	0000378b 	.word	0x0000378b
    3a3c:	000037d7 	.word	0x000037d7
    3a40:	0000379b 	.word	0x0000379b
            n_closing = 0;
    3a44:	2500      	movs	r5, #0
    3a46:	e6f4      	b.n	3832 <parse_string_literal+0x126>
    3a48:	2500      	movs	r5, #0
    3a4a:	e6f2      	b.n	3832 <parse_string_literal+0x126>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    3a4c:	210a      	movs	r1, #10
    3a4e:	4620      	mov	r0, r4
    3a50:	f7ff fd53 	bl	34fa <is_char>
    3a54:	2800      	cmp	r0, #0
    3a56:	f43f aef8 	beq.w	384a <parse_string_literal+0x13e>
    }

    // check we got the required end quotes
    if (n_closing < num_quotes) {
    3a5a:	42ae      	cmp	r6, r5
    3a5c:	d902      	bls.n	3a64 <parse_string_literal+0x358>
        lex->tok_kind = MP_TOKEN_LONELY_STRING_OPEN;
    3a5e:	2303      	movs	r3, #3
    3a60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    }

    // cut off the end quotes from the token text
    vstr_cut_tail_bytes(&lex->vstr, n_closing);
    3a64:	4629      	mov	r1, r5
    3a66:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3a6a:	f7fd ff44 	bl	18f6 <vstr_cut_tail_bytes>
}
    3a6e:	b003      	add	sp, #12
    3a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3a74:	000238d0 	.word	0x000238d0

00003a78 <is_whitespace>:
STATIC bool is_whitespace(mp_lexer_t *lex) {
    3a78:	b508      	push	{r3, lr}
    return unichar_isspace(lex->chr0);
    3a7a:	6900      	ldr	r0, [r0, #16]
    3a7c:	f7fe fb04 	bl	2088 <unichar_isspace>
}
    3a80:	bd08      	pop	{r3, pc}

00003a82 <skip_whitespace>:

STATIC bool skip_whitespace(mp_lexer_t *lex, bool stop_at_newline) {
    3a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a84:	4604      	mov	r4, r0
    3a86:	460f      	mov	r7, r1
    bool had_physical_newline = false;
    3a88:	2600      	movs	r6, #0
    while (!is_end(lex)) {
    3a8a:	e003      	b.n	3a94 <skip_whitespace+0x12>
        if (is_physical_newline(lex)) {
            if (stop_at_newline && lex->nested_bracket_level == 0) {
                break;
            }
            had_physical_newline = true;
            next_char(lex);
    3a8c:	4620      	mov	r0, r4
    3a8e:	f7ff fdc2 	bl	3616 <next_char>
            had_physical_newline = true;
    3a92:	462e      	mov	r6, r5
    while (!is_end(lex)) {
    3a94:	4620      	mov	r0, r4
    3a96:	f7ff fd23 	bl	34e0 <is_end>
    3a9a:	b948      	cbnz	r0, 3ab0 <skip_whitespace+0x2e>
        if (is_physical_newline(lex)) {
    3a9c:	4620      	mov	r0, r4
    3a9e:	f7ff fd26 	bl	34ee <is_physical_newline>
    3aa2:	4605      	mov	r5, r0
    3aa4:	b130      	cbz	r0, 3ab4 <skip_whitespace+0x32>
            if (stop_at_newline && lex->nested_bracket_level == 0) {
    3aa6:	2f00      	cmp	r7, #0
    3aa8:	d0f0      	beq.n	3a8c <skip_whitespace+0xa>
    3aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3aac:	2b00      	cmp	r3, #0
    3aae:	d1ed      	bne.n	3a8c <skip_whitespace+0xa>
        } else {
            break;
        }
    }
    return had_physical_newline;
}
    3ab0:	4630      	mov	r0, r6
    3ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        } else if (is_whitespace(lex)) {
    3ab4:	4620      	mov	r0, r4
    3ab6:	f7ff ffdf 	bl	3a78 <is_whitespace>
    3aba:	b990      	cbnz	r0, 3ae2 <skip_whitespace+0x60>
        } else if (is_char(lex, '#')) {
    3abc:	2123      	movs	r1, #35	; 0x23
    3abe:	4620      	mov	r0, r4
    3ac0:	f7ff fd1b 	bl	34fa <is_char>
    3ac4:	b988      	cbnz	r0, 3aea <skip_whitespace+0x68>
        } else if (is_char_and(lex, '\\', '\n')) {
    3ac6:	220a      	movs	r2, #10
    3ac8:	215c      	movs	r1, #92	; 0x5c
    3aca:	4620      	mov	r0, r4
    3acc:	f7ff fd51 	bl	3572 <is_char_and>
    3ad0:	2800      	cmp	r0, #0
    3ad2:	d0ed      	beq.n	3ab0 <skip_whitespace+0x2e>
            next_char(lex);
    3ad4:	4620      	mov	r0, r4
    3ad6:	f7ff fd9e 	bl	3616 <next_char>
            next_char(lex);
    3ada:	4620      	mov	r0, r4
    3adc:	f7ff fd9b 	bl	3616 <next_char>
    3ae0:	e7d8      	b.n	3a94 <skip_whitespace+0x12>
            next_char(lex);
    3ae2:	4620      	mov	r0, r4
    3ae4:	f7ff fd97 	bl	3616 <next_char>
    3ae8:	e7d4      	b.n	3a94 <skip_whitespace+0x12>
            next_char(lex);
    3aea:	4620      	mov	r0, r4
    3aec:	f7ff fd93 	bl	3616 <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3af0:	4620      	mov	r0, r4
    3af2:	f7ff fcf5 	bl	34e0 <is_end>
    3af6:	2800      	cmp	r0, #0
    3af8:	d1cc      	bne.n	3a94 <skip_whitespace+0x12>
    3afa:	4620      	mov	r0, r4
    3afc:	f7ff fcf7 	bl	34ee <is_physical_newline>
    3b00:	2800      	cmp	r0, #0
    3b02:	d1c7      	bne.n	3a94 <skip_whitespace+0x12>
                next_char(lex);
    3b04:	4620      	mov	r0, r4
    3b06:	f7ff fd86 	bl	3616 <next_char>
    3b0a:	e7f1      	b.n	3af0 <skip_whitespace+0x6e>

00003b0c <is_following_digit>:
STATIC bool is_following_digit(mp_lexer_t *lex) {
    3b0c:	b508      	push	{r3, lr}
    return unichar_isdigit(lex->chr1);
    3b0e:	6940      	ldr	r0, [r0, #20]
    3b10:	f7fe fada 	bl	20c8 <unichar_isdigit>
}
    3b14:	bd08      	pop	{r3, pc}

00003b16 <is_digit>:
STATIC bool is_digit(mp_lexer_t *lex) {
    3b16:	b508      	push	{r3, lr}
    return unichar_isdigit(lex->chr0);
    3b18:	6900      	ldr	r0, [r0, #16]
    3b1a:	f7fe fad5 	bl	20c8 <unichar_isdigit>
}
    3b1e:	bd08      	pop	{r3, pc}

00003b20 <is_letter>:
STATIC bool is_letter(mp_lexer_t *lex) {
    3b20:	b508      	push	{r3, lr}
    return unichar_isalpha(lex->chr0);
    3b22:	6900      	ldr	r0, [r0, #16]
    3b24:	f7fe fac0 	bl	20a8 <unichar_isalpha>
}
    3b28:	bd08      	pop	{r3, pc}

00003b2a <is_head_of_identifier>:
STATIC bool is_head_of_identifier(mp_lexer_t *lex) {
    3b2a:	b510      	push	{r4, lr}
    3b2c:	4604      	mov	r4, r0
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    3b2e:	f7ff fff7 	bl	3b20 <is_letter>
    3b32:	b940      	cbnz	r0, 3b46 <is_head_of_identifier+0x1c>
    3b34:	6923      	ldr	r3, [r4, #16]
    3b36:	2b5f      	cmp	r3, #95	; 0x5f
    3b38:	d007      	beq.n	3b4a <is_head_of_identifier+0x20>
    3b3a:	2b7f      	cmp	r3, #127	; 0x7f
    3b3c:	d801      	bhi.n	3b42 <is_head_of_identifier+0x18>
    3b3e:	2000      	movs	r0, #0
    3b40:	e002      	b.n	3b48 <is_head_of_identifier+0x1e>
    3b42:	2001      	movs	r0, #1
    3b44:	e000      	b.n	3b48 <is_head_of_identifier+0x1e>
    3b46:	2001      	movs	r0, #1
}
    3b48:	bd10      	pop	{r4, pc}
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    3b4a:	2001      	movs	r0, #1
    3b4c:	e7fc      	b.n	3b48 <is_head_of_identifier+0x1e>

00003b4e <is_tail_of_identifier>:
STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    3b4e:	b510      	push	{r4, lr}
    3b50:	4604      	mov	r4, r0
    return is_head_of_identifier(lex) || is_digit(lex);
    3b52:	f7ff ffea 	bl	3b2a <is_head_of_identifier>
    3b56:	b108      	cbz	r0, 3b5c <is_tail_of_identifier+0xe>
    3b58:	2001      	movs	r0, #1
}
    3b5a:	bd10      	pop	{r4, pc}
    return is_head_of_identifier(lex) || is_digit(lex);
    3b5c:	4620      	mov	r0, r4
    3b5e:	f7ff ffda 	bl	3b16 <is_digit>
    3b62:	2800      	cmp	r0, #0
    3b64:	d0f9      	beq.n	3b5a <is_tail_of_identifier+0xc>
    3b66:	2001      	movs	r0, #1
    3b68:	e7f7      	b.n	3b5a <is_tail_of_identifier+0xc>
	...

00003b6c <mp_lexer_to_next>:

void mp_lexer_to_next(mp_lexer_t *lex) {
    3b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b70:	4604      	mov	r4, r0
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
    3b72:	2100      	movs	r1, #0
    3b74:	6481      	str	r1, [r0, #72]	; 0x48
    // start new token text
    vstr_reset(&lex->vstr);

    // skip white space and comments
    bool had_physical_newline = skip_whitespace(lex, false);
    3b76:	f7ff ff84 	bl	3a82 <skip_whitespace>

    // set token source information
    lex->tok_line = lex->line;
    3b7a:	69e3      	ldr	r3, [r4, #28]
    3b7c:	63a3      	str	r3, [r4, #56]	; 0x38
    lex->tok_column = lex->column;
    3b7e:	6a25      	ldr	r5, [r4, #32]
    3b80:	63e5      	str	r5, [r4, #60]	; 0x3c

    if (lex->emit_dent < 0) {
    3b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b84:	2b00      	cmp	r3, #0
    3b86:	db08      	blt.n	3b9a <mp_lexer_to_next+0x2e>
        lex->tok_kind = MP_TOKEN_DEDENT;
        lex->emit_dent += 1;

    } else if (lex->emit_dent > 0) {
    3b88:	2b00      	cmp	r3, #0
    3b8a:	dd0c      	ble.n	3ba6 <mp_lexer_to_next+0x3a>
        lex->tok_kind = MP_TOKEN_INDENT;
    3b8c:	2205      	movs	r2, #5
    3b8e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        lex->emit_dent -= 1;
    3b92:	3b01      	subs	r3, #1
    3b94:	6263      	str	r3, [r4, #36]	; 0x24
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
                lex->nested_bracket_level -= 1;
            }
        }
    }
}
    3b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lex->tok_kind = MP_TOKEN_DEDENT;
    3b9a:	2206      	movs	r2, #6
    3b9c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        lex->emit_dent += 1;
    3ba0:	3301      	adds	r3, #1
    3ba2:	6263      	str	r3, [r4, #36]	; 0x24
    3ba4:	e7f7      	b.n	3b96 <mp_lexer_to_next+0x2a>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3ba6:	b318      	cbz	r0, 3bf0 <mp_lexer_to_next+0x84>
    3ba8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3baa:	bb0b      	cbnz	r3, 3bf0 <mp_lexer_to_next+0x84>
        lex->tok_kind = MP_TOKEN_NEWLINE;
    3bac:	2304      	movs	r3, #4
    3bae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        size_t num_spaces = lex->column - 1;
    3bb2:	3d01      	subs	r5, #1
        if (num_spaces == indent_top(lex)) {
    3bb4:	4620      	mov	r0, r4
    3bb6:	f7ff fd67 	bl	3688 <indent_top>
    3bba:	42a8      	cmp	r0, r5
    3bbc:	d0eb      	beq.n	3b96 <mp_lexer_to_next+0x2a>
        } else if (num_spaces > indent_top(lex)) {
    3bbe:	d20d      	bcs.n	3bdc <mp_lexer_to_next+0x70>
            indent_push(lex, num_spaces);
    3bc0:	4629      	mov	r1, r5
    3bc2:	4620      	mov	r0, r4
    3bc4:	f7ff fd6c 	bl	36a0 <indent_push>
            lex->emit_dent += 1;
    3bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3bca:	3301      	adds	r3, #1
    3bcc:	6263      	str	r3, [r4, #36]	; 0x24
    3bce:	e7e2      	b.n	3b96 <mp_lexer_to_next+0x2a>
                indent_pop(lex);
    3bd0:	4620      	mov	r0, r4
    3bd2:	f7ff fd61 	bl	3698 <indent_pop>
                lex->emit_dent -= 1;
    3bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3bd8:	3b01      	subs	r3, #1
    3bda:	6263      	str	r3, [r4, #36]	; 0x24
            while (num_spaces < indent_top(lex)) {
    3bdc:	4620      	mov	r0, r4
    3bde:	f7ff fd53 	bl	3688 <indent_top>
    3be2:	42a8      	cmp	r0, r5
    3be4:	d8f4      	bhi.n	3bd0 <mp_lexer_to_next+0x64>
            if (num_spaces != indent_top(lex)) {
    3be6:	d0d6      	beq.n	3b96 <mp_lexer_to_next+0x2a>
                lex->tok_kind = MP_TOKEN_DEDENT_MISMATCH;
    3be8:	2302      	movs	r3, #2
    3bea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3bee:	e7d2      	b.n	3b96 <mp_lexer_to_next+0x2a>
    } else if (is_end(lex)) {
    3bf0:	4620      	mov	r0, r4
    3bf2:	f7ff fc75 	bl	34e0 <is_end>
    3bf6:	4607      	mov	r7, r0
    3bf8:	b940      	cbnz	r0, 3c0c <mp_lexer_to_next+0xa0>
    } else if (is_string_or_bytes(lex)) {
    3bfa:	4620      	mov	r0, r4
    3bfc:	f7ff fcdd 	bl	35ba <is_string_or_bytes>
    3c00:	2800      	cmp	r0, #0
    3c02:	d056      	beq.n	3cb2 <mp_lexer_to_next+0x146>
        lex->tok_kind = MP_TOKEN_END;
    3c04:	2300      	movs	r3, #0
    3c06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3c0a:	e027      	b.n	3c5c <mp_lexer_to_next+0xf0>
        lex->tok_kind = MP_TOKEN_END;
    3c0c:	2300      	movs	r3, #0
    3c0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3c12:	e7c0      	b.n	3b96 <mp_lexer_to_next+0x2a>
            } else if (is_char(lex, 'r')) {
    3c14:	2172      	movs	r1, #114	; 0x72
    3c16:	4620      	mov	r0, r4
    3c18:	f7ff fc6f 	bl	34fa <is_char>
    3c1c:	4606      	mov	r6, r0
    3c1e:	b3a8      	cbz	r0, 3c8c <mp_lexer_to_next+0x120>
                if (is_char_following(lex, 'b')) {
    3c20:	2162      	movs	r1, #98	; 0x62
    3c22:	4620      	mov	r0, r4
    3c24:	f7ff fc89 	bl	353a <is_char_following>
    3c28:	bb98      	cbnz	r0, 3c92 <mp_lexer_to_next+0x126>
                n_char = 1;
    3c2a:	2501      	movs	r5, #1
            mp_token_kind_t kind = MP_TOKEN_STRING;
    3c2c:	220a      	movs	r2, #10
    3c2e:	e002      	b.n	3c36 <mp_lexer_to_next+0xca>
            bool is_raw = false;
    3c30:	463e      	mov	r6, r7
                n_char = 1;
    3c32:	2501      	movs	r5, #1
            mp_token_kind_t kind = MP_TOKEN_STRING;
    3c34:	220a      	movs	r2, #10
            if (lex->tok_kind == MP_TOKEN_END) {
    3c36:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    3c3a:	bb73      	cbnz	r3, 3c9a <mp_lexer_to_next+0x12e>
                lex->tok_kind = kind;
    3c3c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
            if (n_char != 0) {
    3c40:	bb75      	cbnz	r5, 3ca0 <mp_lexer_to_next+0x134>
            parse_string_literal(lex, is_raw);
    3c42:	4631      	mov	r1, r6
    3c44:	4620      	mov	r0, r4
    3c46:	f7ff fd61 	bl	370c <parse_string_literal>
            skip_whitespace(lex, true);
    3c4a:	2101      	movs	r1, #1
    3c4c:	4620      	mov	r0, r4
    3c4e:	f7ff ff18 	bl	3a82 <skip_whitespace>
        } while (is_string_or_bytes(lex));
    3c52:	4620      	mov	r0, r4
    3c54:	f7ff fcb1 	bl	35ba <is_string_or_bytes>
    3c58:	2800      	cmp	r0, #0
    3c5a:	d09c      	beq.n	3b96 <mp_lexer_to_next+0x2a>
            if (is_char(lex, 'u')) {
    3c5c:	2175      	movs	r1, #117	; 0x75
    3c5e:	4620      	mov	r0, r4
    3c60:	f7ff fc4b 	bl	34fa <is_char>
    3c64:	2800      	cmp	r0, #0
    3c66:	d1e3      	bne.n	3c30 <mp_lexer_to_next+0xc4>
            } else if (is_char(lex, 'b')) {
    3c68:	2162      	movs	r1, #98	; 0x62
    3c6a:	4620      	mov	r0, r4
    3c6c:	f7ff fc45 	bl	34fa <is_char>
    3c70:	2800      	cmp	r0, #0
    3c72:	d0cf      	beq.n	3c14 <mp_lexer_to_next+0xa8>
                if (is_char_following(lex, 'r')) {
    3c74:	2172      	movs	r1, #114	; 0x72
    3c76:	4620      	mov	r0, r4
    3c78:	f7ff fc5f 	bl	353a <is_char_following>
    3c7c:	4606      	mov	r6, r0
    3c7e:	b910      	cbnz	r0, 3c86 <mp_lexer_to_next+0x11a>
                n_char = 1;
    3c80:	2501      	movs	r5, #1
                kind = MP_TOKEN_BYTES;
    3c82:	220b      	movs	r2, #11
    3c84:	e7d7      	b.n	3c36 <mp_lexer_to_next+0xca>
                    n_char = 2;
    3c86:	2502      	movs	r5, #2
                kind = MP_TOKEN_BYTES;
    3c88:	220b      	movs	r2, #11
    3c8a:	e7d4      	b.n	3c36 <mp_lexer_to_next+0xca>
            int n_char = 0;
    3c8c:	2500      	movs	r5, #0
            mp_token_kind_t kind = MP_TOKEN_STRING;
    3c8e:	220a      	movs	r2, #10
    3c90:	e7d1      	b.n	3c36 <mp_lexer_to_next+0xca>
                is_raw = true;
    3c92:	4606      	mov	r6, r0
                    n_char = 2;
    3c94:	2502      	movs	r5, #2
                    kind = MP_TOKEN_BYTES;
    3c96:	220b      	movs	r2, #11
    3c98:	e7cd      	b.n	3c36 <mp_lexer_to_next+0xca>
            } else if (lex->tok_kind != kind) {
    3c9a:	4293      	cmp	r3, r2
    3c9c:	d0d0      	beq.n	3c40 <mp_lexer_to_next+0xd4>
    3c9e:	e77a      	b.n	3b96 <mp_lexer_to_next+0x2a>
                next_char(lex);
    3ca0:	4620      	mov	r0, r4
    3ca2:	f7ff fcb8 	bl	3616 <next_char>
                if (n_char == 2) {
    3ca6:	2d02      	cmp	r5, #2
    3ca8:	d1cb      	bne.n	3c42 <mp_lexer_to_next+0xd6>
                    next_char(lex);
    3caa:	4620      	mov	r0, r4
    3cac:	f7ff fcb3 	bl	3616 <next_char>
    3cb0:	e7c7      	b.n	3c42 <mp_lexer_to_next+0xd6>
    } else if (is_head_of_identifier(lex)) {
    3cb2:	4620      	mov	r0, r4
    3cb4:	f7ff ff39 	bl	3b2a <is_head_of_identifier>
    3cb8:	4605      	mov	r5, r0
    3cba:	2800      	cmp	r0, #0
    3cbc:	d042      	beq.n	3d44 <mp_lexer_to_next+0x1d8>
        lex->tok_kind = MP_TOKEN_NAME;
    3cbe:	2307      	movs	r3, #7
    3cc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    3cc4:	f104 0544 	add.w	r5, r4, #68	; 0x44
    3cc8:	7c21      	ldrb	r1, [r4, #16]
    3cca:	4628      	mov	r0, r5
    3ccc:	f7fd fded 	bl	18aa <vstr_add_byte>
        next_char(lex);
    3cd0:	4620      	mov	r0, r4
    3cd2:	f7ff fca0 	bl	3616 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    3cd6:	e006      	b.n	3ce6 <mp_lexer_to_next+0x17a>
            vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    3cd8:	7c21      	ldrb	r1, [r4, #16]
    3cda:	4628      	mov	r0, r5
    3cdc:	f7fd fde5 	bl	18aa <vstr_add_byte>
            next_char(lex);
    3ce0:	4620      	mov	r0, r4
    3ce2:	f7ff fc98 	bl	3616 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    3ce6:	4620      	mov	r0, r4
    3ce8:	f7ff fbfa 	bl	34e0 <is_end>
    3cec:	b920      	cbnz	r0, 3cf8 <mp_lexer_to_next+0x18c>
    3cee:	4620      	mov	r0, r4
    3cf0:	f7ff ff2d 	bl	3b4e <is_tail_of_identifier>
    3cf4:	2800      	cmp	r0, #0
    3cf6:	d1ef      	bne.n	3cd8 <mp_lexer_to_next+0x16c>
        const char *s = vstr_null_terminated_str(&lex->vstr);
    3cf8:	4628      	mov	r0, r5
    3cfa:	f7fd fdc6 	bl	188a <vstr_null_terminated_str>
    3cfe:	4606      	mov	r6, r0
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    3d00:	2500      	movs	r5, #0
    3d02:	2d21      	cmp	r5, #33	; 0x21
    3d04:	f63f af47 	bhi.w	3b96 <mp_lexer_to_next+0x2a>
            int cmp = strcmp(s, tok_kw[i]);
    3d08:	4b88      	ldr	r3, [pc, #544]	; (3f2c <mp_lexer_to_next+0x3c0>)
    3d0a:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    3d0e:	4630      	mov	r0, r6
    3d10:	f017 fe12 	bl	1b938 <strcmp>
            if (cmp == 0) {
    3d14:	b120      	cbz	r0, 3d20 <mp_lexer_to_next+0x1b4>
            } else if (cmp < 0) {
    3d16:	2800      	cmp	r0, #0
    3d18:	f6ff af3d 	blt.w	3b96 <mp_lexer_to_next+0x2a>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    3d1c:	3501      	adds	r5, #1
    3d1e:	e7f0      	b.n	3d02 <mp_lexer_to_next+0x196>
                lex->tok_kind = MP_TOKEN_KW_FALSE + i;
    3d20:	f105 030d 	add.w	r3, r5, #13
    3d24:	b2db      	uxtb	r3, r3
    3d26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
                if (lex->tok_kind == MP_TOKEN_KW___DEBUG__) {
    3d2a:	2b10      	cmp	r3, #16
    3d2c:	f47f af33 	bne.w	3b96 <mp_lexer_to_next+0x2a>
                    lex->tok_kind = (MP_STATE_VM(mp_optimise_value) == 0 ? MP_TOKEN_KW_TRUE : MP_TOKEN_KW_FALSE);
    3d30:	4b7f      	ldr	r3, [pc, #508]	; (3f30 <mp_lexer_to_next+0x3c4>)
    3d32:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
    3d36:	b11b      	cbz	r3, 3d40 <mp_lexer_to_next+0x1d4>
    3d38:	230d      	movs	r3, #13
    3d3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3d3e:	e72a      	b.n	3b96 <mp_lexer_to_next+0x2a>
    3d40:	230f      	movs	r3, #15
    3d42:	e7fa      	b.n	3d3a <mp_lexer_to_next+0x1ce>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3d44:	4620      	mov	r0, r4
    3d46:	f7ff fee6 	bl	3b16 <is_digit>
    3d4a:	b960      	cbnz	r0, 3d66 <mp_lexer_to_next+0x1fa>
    3d4c:	212e      	movs	r1, #46	; 0x2e
    3d4e:	4620      	mov	r0, r4
    3d50:	f7ff fbd3 	bl	34fa <is_char>
    3d54:	b910      	cbnz	r0, 3d5c <mp_lexer_to_next+0x1f0>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    3d56:	2700      	movs	r7, #0
    3d58:	4d76      	ldr	r5, [pc, #472]	; (3f34 <mp_lexer_to_next+0x3c8>)
    3d5a:	e074      	b.n	3e46 <mp_lexer_to_next+0x2da>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3d5c:	4620      	mov	r0, r4
    3d5e:	f7ff fed5 	bl	3b0c <is_following_digit>
    3d62:	2800      	cmp	r0, #0
    3d64:	d0f7      	beq.n	3d56 <mp_lexer_to_next+0x1ea>
        if (is_char(lex, '.')) {
    3d66:	212e      	movs	r1, #46	; 0x2e
    3d68:	4620      	mov	r0, r4
    3d6a:	f7ff fbc6 	bl	34fa <is_char>
    3d6e:	b160      	cbz	r0, 3d8a <mp_lexer_to_next+0x21e>
            lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3d70:	2309      	movs	r3, #9
    3d72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3d76:	f104 0644 	add.w	r6, r4, #68	; 0x44
    3d7a:	6921      	ldr	r1, [r4, #16]
    3d7c:	4630      	mov	r0, r6
    3d7e:	f7fd fd9b 	bl	18b8 <vstr_add_char>
        next_char(lex);
    3d82:	4620      	mov	r0, r4
    3d84:	f7ff fc47 	bl	3616 <next_char>
        while (!is_end(lex)) {
    3d88:	e03b      	b.n	3e02 <mp_lexer_to_next+0x296>
            lex->tok_kind = MP_TOKEN_INTEGER;
    3d8a:	2308      	movs	r3, #8
    3d8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            if (is_char(lex, '0') && is_following_base_char(lex)) {
    3d90:	2130      	movs	r1, #48	; 0x30
    3d92:	4620      	mov	r0, r4
    3d94:	f7ff fbb1 	bl	34fa <is_char>
    3d98:	4605      	mov	r5, r0
    3d9a:	2800      	cmp	r0, #0
    3d9c:	d0eb      	beq.n	3d76 <mp_lexer_to_next+0x20a>
    3d9e:	4620      	mov	r0, r4
    3da0:	f7ff fbf3 	bl	358a <is_following_base_char>
    3da4:	4605      	mov	r5, r0
    3da6:	e7e6      	b.n	3d76 <mp_lexer_to_next+0x20a>
                lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3da8:	2309      	movs	r3, #9
    3daa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
                vstr_add_char(&lex->vstr, 'e');
    3dae:	2165      	movs	r1, #101	; 0x65
    3db0:	4630      	mov	r0, r6
    3db2:	f7fd fd81 	bl	18b8 <vstr_add_char>
                next_char(lex);
    3db6:	4620      	mov	r0, r4
    3db8:	f7ff fc2d 	bl	3616 <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    3dbc:	212b      	movs	r1, #43	; 0x2b
    3dbe:	4620      	mov	r0, r4
    3dc0:	f7ff fb9b 	bl	34fa <is_char>
    3dc4:	b920      	cbnz	r0, 3dd0 <mp_lexer_to_next+0x264>
    3dc6:	212d      	movs	r1, #45	; 0x2d
    3dc8:	4620      	mov	r0, r4
    3dca:	f7ff fb96 	bl	34fa <is_char>
    3dce:	b1c0      	cbz	r0, 3e02 <mp_lexer_to_next+0x296>
                    vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3dd0:	6921      	ldr	r1, [r4, #16]
    3dd2:	4630      	mov	r0, r6
    3dd4:	f7fd fd70 	bl	18b8 <vstr_add_char>
                    next_char(lex);
    3dd8:	4620      	mov	r0, r4
    3dda:	f7ff fc1c 	bl	3616 <next_char>
    3dde:	e010      	b.n	3e02 <mp_lexer_to_next+0x296>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    3de0:	4620      	mov	r0, r4
    3de2:	f7ff fe98 	bl	3b16 <is_digit>
    3de6:	b9f8      	cbnz	r0, 3e28 <mp_lexer_to_next+0x2bc>
    3de8:	212e      	movs	r1, #46	; 0x2e
    3dea:	4620      	mov	r0, r4
    3dec:	f7ff fb85 	bl	34fa <is_char>
    3df0:	b9d0      	cbnz	r0, 3e28 <mp_lexer_to_next+0x2bc>
    3df2:	e6d0      	b.n	3b96 <mp_lexer_to_next+0x2a>
                vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3df4:	6921      	ldr	r1, [r4, #16]
    3df6:	4630      	mov	r0, r6
    3df8:	f7fd fd5e 	bl	18b8 <vstr_add_char>
                next_char(lex);
    3dfc:	4620      	mov	r0, r4
    3dfe:	f7ff fc0a 	bl	3616 <next_char>
        while (!is_end(lex)) {
    3e02:	4620      	mov	r0, r4
    3e04:	f7ff fb6c 	bl	34e0 <is_end>
    3e08:	2800      	cmp	r0, #0
    3e0a:	f47f aec4 	bne.w	3b96 <mp_lexer_to_next+0x2a>
            if (!forced_integer && is_char_or(lex, 'e', 'E')) {
    3e0e:	b935      	cbnz	r5, 3e1e <mp_lexer_to_next+0x2b2>
    3e10:	2245      	movs	r2, #69	; 0x45
    3e12:	2165      	movs	r1, #101	; 0x65
    3e14:	4620      	mov	r0, r4
    3e16:	f7ff fb76 	bl	3506 <is_char_or>
    3e1a:	2800      	cmp	r0, #0
    3e1c:	d1c4      	bne.n	3da8 <mp_lexer_to_next+0x23c>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    3e1e:	4620      	mov	r0, r4
    3e20:	f7ff fe7e 	bl	3b20 <is_letter>
    3e24:	2800      	cmp	r0, #0
    3e26:	d0db      	beq.n	3de0 <mp_lexer_to_next+0x274>
                if (is_char_or3(lex, '.', 'j', 'J')) {
    3e28:	234a      	movs	r3, #74	; 0x4a
    3e2a:	226a      	movs	r2, #106	; 0x6a
    3e2c:	212e      	movs	r1, #46	; 0x2e
    3e2e:	4620      	mov	r0, r4
    3e30:	f7ff fb74 	bl	351c <is_char_or3>
    3e34:	2800      	cmp	r0, #0
    3e36:	d0dd      	beq.n	3df4 <mp_lexer_to_next+0x288>
                    lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3e38:	2309      	movs	r3, #9
    3e3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3e3e:	e7d9      	b.n	3df4 <mp_lexer_to_next+0x288>
                t += 1;
    3e40:	3501      	adds	r5, #1
            tok_enc_index += 1;
    3e42:	3701      	adds	r7, #1
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    3e44:	3501      	adds	r5, #1
    3e46:	782e      	ldrb	r6, [r5, #0]
    3e48:	b14e      	cbz	r6, 3e5e <mp_lexer_to_next+0x2f2>
    3e4a:	4631      	mov	r1, r6
    3e4c:	4620      	mov	r0, r4
    3e4e:	f7ff fb54 	bl	34fa <is_char>
    3e52:	b920      	cbnz	r0, 3e5e <mp_lexer_to_next+0x2f2>
            if (*t == 'e' || *t == 'c') {
    3e54:	2e65      	cmp	r6, #101	; 0x65
    3e56:	d0f3      	beq.n	3e40 <mp_lexer_to_next+0x2d4>
    3e58:	2e63      	cmp	r6, #99	; 0x63
    3e5a:	d1f2      	bne.n	3e42 <mp_lexer_to_next+0x2d6>
    3e5c:	e7f0      	b.n	3e40 <mp_lexer_to_next+0x2d4>
        next_char(lex);
    3e5e:	4620      	mov	r0, r4
    3e60:	f7ff fbd9 	bl	3616 <next_char>
        if (*t == 0) {
    3e64:	782b      	ldrb	r3, [r5, #0]
    3e66:	b133      	cbz	r3, 3e76 <mp_lexer_to_next+0x30a>
        } else if (*t == '!') {
    3e68:	2b21      	cmp	r3, #33	; 0x21
    3e6a:	d008      	beq.n	3e7e <mp_lexer_to_next+0x312>
        } else if (*t == '.') {
    3e6c:	2b2e      	cmp	r3, #46	; 0x2e
    3e6e:	d016      	beq.n	3e9e <mp_lexer_to_next+0x332>
            t += 1;
    3e70:	3501      	adds	r5, #1
            size_t t_index = tok_enc_index;
    3e72:	46b8      	mov	r8, r7
            while (*t == 'c' || *t == 'e') {
    3e74:	e02f      	b.n	3ed6 <mp_lexer_to_next+0x36a>
            lex->tok_kind = MP_TOKEN_INVALID;
    3e76:	2301      	movs	r3, #1
    3e78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3e7c:	e68b      	b.n	3b96 <mp_lexer_to_next+0x2a>
            if (is_char(lex, '=')) {
    3e7e:	213d      	movs	r1, #61	; 0x3d
    3e80:	4620      	mov	r0, r4
    3e82:	f7ff fb3a 	bl	34fa <is_char>
    3e86:	b918      	cbnz	r0, 3e90 <mp_lexer_to_next+0x324>
                lex->tok_kind = MP_TOKEN_INVALID;
    3e88:	2301      	movs	r3, #1
    3e8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3e8e:	e682      	b.n	3b96 <mp_lexer_to_next+0x2a>
                next_char(lex);
    3e90:	4620      	mov	r0, r4
    3e92:	f7ff fbc0 	bl	3616 <next_char>
                lex->tok_kind = MP_TOKEN_OP_NOT_EQUAL;
    3e96:	2341      	movs	r3, #65	; 0x41
    3e98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3e9c:	e67b      	b.n	3b96 <mp_lexer_to_next+0x2a>
            if (is_char_and(lex, '.', '.')) {
    3e9e:	222e      	movs	r2, #46	; 0x2e
    3ea0:	4611      	mov	r1, r2
    3ea2:	4620      	mov	r0, r4
    3ea4:	f7ff fb65 	bl	3572 <is_char_and>
    3ea8:	b918      	cbnz	r0, 3eb2 <mp_lexer_to_next+0x346>
                lex->tok_kind = MP_TOKEN_DEL_PERIOD;
    3eaa:	234a      	movs	r3, #74	; 0x4a
    3eac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3eb0:	e671      	b.n	3b96 <mp_lexer_to_next+0x2a>
                next_char(lex);
    3eb2:	4620      	mov	r0, r4
    3eb4:	f7ff fbaf 	bl	3616 <next_char>
                next_char(lex);
    3eb8:	4620      	mov	r0, r4
    3eba:	f7ff fbac 	bl	3616 <next_char>
                lex->tok_kind = MP_TOKEN_ELLIPSIS;
    3ebe:	230c      	movs	r3, #12
    3ec0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    3ec4:	e667      	b.n	3b96 <mp_lexer_to_next+0x2a>
                    next_char(lex);
    3ec6:	4620      	mov	r0, r4
    3ec8:	f7ff fba5 	bl	3616 <next_char>
                    if (*t == 'e') {
    3ecc:	782b      	ldrb	r3, [r5, #0]
    3ece:	2b65      	cmp	r3, #101	; 0x65
    3ed0:	d025      	beq.n	3f1e <mp_lexer_to_next+0x3b2>
                    tok_enc_index = t_index;
    3ed2:	4647      	mov	r7, r8
                t += 2;
    3ed4:	3502      	adds	r5, #2
            while (*t == 'c' || *t == 'e') {
    3ed6:	782e      	ldrb	r6, [r5, #0]
    3ed8:	2e63      	cmp	r6, #99	; 0x63
    3eda:	d001      	beq.n	3ee0 <mp_lexer_to_next+0x374>
    3edc:	2e65      	cmp	r6, #101	; 0x65
    3ede:	d109      	bne.n	3ef4 <mp_lexer_to_next+0x388>
                t_index += 1;
    3ee0:	f108 0801 	add.w	r8, r8, #1
                if (is_char(lex, t[1])) {
    3ee4:	7869      	ldrb	r1, [r5, #1]
    3ee6:	4620      	mov	r0, r4
    3ee8:	f7ff fb07 	bl	34fa <is_char>
    3eec:	2800      	cmp	r0, #0
    3eee:	d1ea      	bne.n	3ec6 <mp_lexer_to_next+0x35a>
                } else if (*t == 'c') {
    3ef0:	2e63      	cmp	r6, #99	; 0x63
    3ef2:	d1ef      	bne.n	3ed4 <mp_lexer_to_next+0x368>
            lex->tok_kind = tok_enc_kind[tok_enc_index];
    3ef4:	4b10      	ldr	r3, [pc, #64]	; (3f38 <mp_lexer_to_next+0x3cc>)
    3ef6:	5ddb      	ldrb	r3, [r3, r7]
    3ef8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            if (lex->tok_kind == MP_TOKEN_DEL_PAREN_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACKET_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACE_OPEN) {
    3efc:	2b42      	cmp	r3, #66	; 0x42
    3efe:	d010      	beq.n	3f22 <mp_lexer_to_next+0x3b6>
    3f00:	2b44      	cmp	r3, #68	; 0x44
    3f02:	d00e      	beq.n	3f22 <mp_lexer_to_next+0x3b6>
    3f04:	2b46      	cmp	r3, #70	; 0x46
    3f06:	d00c      	beq.n	3f22 <mp_lexer_to_next+0x3b6>
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
    3f08:	2b43      	cmp	r3, #67	; 0x43
    3f0a:	d004      	beq.n	3f16 <mp_lexer_to_next+0x3aa>
    3f0c:	2b45      	cmp	r3, #69	; 0x45
    3f0e:	d002      	beq.n	3f16 <mp_lexer_to_next+0x3aa>
    3f10:	2b47      	cmp	r3, #71	; 0x47
    3f12:	f47f ae40 	bne.w	3b96 <mp_lexer_to_next+0x2a>
                lex->nested_bracket_level -= 1;
    3f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f18:	3b01      	subs	r3, #1
    3f1a:	62a3      	str	r3, [r4, #40]	; 0x28
}
    3f1c:	e63b      	b.n	3b96 <mp_lexer_to_next+0x2a>
                    tok_enc_index = t_index;
    3f1e:	4647      	mov	r7, r8
    3f20:	e7e8      	b.n	3ef4 <mp_lexer_to_next+0x388>
                lex->nested_bracket_level += 1;
    3f22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f24:	3301      	adds	r3, #1
    3f26:	62a3      	str	r3, [r4, #40]	; 0x28
    3f28:	e635      	b.n	3b96 <mp_lexer_to_next+0x2a>
    3f2a:	bf00      	nop
    3f2c:	000239d4 	.word	0x000239d4
    3f30:	200008a0 	.word	0x200008a0
    3f34:	0002388c 	.word	0x0002388c
    3f38:	000239a8 	.word	0x000239a8

00003f3c <mp_lexer_new>:

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader) {
    3f3c:	b570      	push	{r4, r5, r6, lr}
    3f3e:	b084      	sub	sp, #16
    3f40:	4606      	mov	r6, r0
    3f42:	ad01      	add	r5, sp, #4
    3f44:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    mp_lexer_t *lex = m_new_obj(mp_lexer_t);
    3f48:	2054      	movs	r0, #84	; 0x54
    3f4a:	f7fc fcb7 	bl	8bc <m_malloc>
    3f4e:	4604      	mov	r4, r0

    lex->source_name = src_name;
    3f50:	4603      	mov	r3, r0
    3f52:	f843 6b04 	str.w	r6, [r3], #4
    lex->reader = reader;
    3f56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3f5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lex->line = 1;
    3f5e:	2301      	movs	r3, #1
    3f60:	61e3      	str	r3, [r4, #28]
    lex->column = (size_t)-2; // account for 3 dummy bytes
    3f62:	f06f 0201 	mvn.w	r2, #1
    3f66:	6222      	str	r2, [r4, #32]
    lex->emit_dent = 0;
    3f68:	2500      	movs	r5, #0
    3f6a:	6265      	str	r5, [r4, #36]	; 0x24
    lex->nested_bracket_level = 0;
    3f6c:	62a5      	str	r5, [r4, #40]	; 0x28
    lex->alloc_indent_level = MICROPY_ALLOC_LEXER_INDENT_INIT;
    3f6e:	220a      	movs	r2, #10
    3f70:	62e2      	str	r2, [r4, #44]	; 0x2c
    lex->num_indent_level = 1;
    3f72:	6323      	str	r3, [r4, #48]	; 0x30
    lex->indent_level = m_new(uint16_t, lex->alloc_indent_level);
    3f74:	2014      	movs	r0, #20
    3f76:	f7fc fca1 	bl	8bc <m_malloc>
    3f7a:	6360      	str	r0, [r4, #52]	; 0x34
    vstr_init(&lex->vstr, 32);
    3f7c:	2120      	movs	r1, #32
    3f7e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3f82:	f7fd fc1a 	bl	17ba <vstr_init>

    // store sentinel for first indentation level
    lex->indent_level[0] = 0;
    3f86:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3f88:	801d      	strh	r5, [r3, #0]

    // load lexer with start of file, advancing lex->column to 1
    // start with dummy bytes and use next_char() for proper EOL/EOF handling
    lex->chr0 = lex->chr1 = lex->chr2 = 0;
    3f8a:	61a5      	str	r5, [r4, #24]
    3f8c:	6165      	str	r5, [r4, #20]
    3f8e:	6125      	str	r5, [r4, #16]
    next_char(lex);
    3f90:	4620      	mov	r0, r4
    3f92:	f7ff fb40 	bl	3616 <next_char>
    next_char(lex);
    3f96:	4620      	mov	r0, r4
    3f98:	f7ff fb3d 	bl	3616 <next_char>
    next_char(lex);
    3f9c:	4620      	mov	r0, r4
    3f9e:	f7ff fb3a 	bl	3616 <next_char>

    // preload first token
    mp_lexer_to_next(lex);
    3fa2:	4620      	mov	r0, r4
    3fa4:	f7ff fde2 	bl	3b6c <mp_lexer_to_next>

    // Check that the first token is in the first column.  If it's not then we
    // convert the token kind to INDENT so that the parser gives a syntax error.
    if (lex->tok_column != 1) {
    3fa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3faa:	2b01      	cmp	r3, #1
    3fac:	d002      	beq.n	3fb4 <mp_lexer_new+0x78>
        lex->tok_kind = MP_TOKEN_INDENT;
    3fae:	2305      	movs	r3, #5
    3fb0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    }

    return lex;
}
    3fb4:	4620      	mov	r0, r4
    3fb6:	b004      	add	sp, #16
    3fb8:	bd70      	pop	{r4, r5, r6, pc}

00003fba <mp_lexer_new_from_str_len>:

mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len) {
    3fba:	b530      	push	{r4, r5, lr}
    3fbc:	b085      	sub	sp, #20
    3fbe:	4605      	mov	r5, r0
    mp_reader_t reader;
    mp_reader_new_mem(&reader, (const byte*)str, len, free_len);
    3fc0:	ac01      	add	r4, sp, #4
    3fc2:	4620      	mov	r0, r4
    3fc4:	f7ff fa74 	bl	34b0 <mp_reader_new_mem>
    return mp_lexer_new(src_name, reader);
    3fc8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    3fcc:	4628      	mov	r0, r5
    3fce:	f7ff ffb5 	bl	3f3c <mp_lexer_new>
}
    3fd2:	b005      	add	sp, #20
    3fd4:	bd30      	pop	{r4, r5, pc}

00003fd6 <mp_lexer_new_from_file>:

#if MICROPY_READER_POSIX || MICROPY_READER_VFS

mp_lexer_t *mp_lexer_new_from_file(const char *filename) {
    3fd6:	b530      	push	{r4, r5, lr}
    3fd8:	b085      	sub	sp, #20
    3fda:	4605      	mov	r5, r0
    mp_reader_t reader;
    mp_reader_new_file(&reader, filename);
    3fdc:	ac01      	add	r4, sp, #4
    3fde:	4601      	mov	r1, r0
    3fe0:	4620      	mov	r0, r4
    3fe2:	f013 fc15 	bl	17810 <mp_reader_new_file>
    return mp_lexer_new(qstr_from_str(filename), reader);
    3fe6:	4628      	mov	r0, r5
    3fe8:	f7fd fb40 	bl	166c <qstr_from_str>
    3fec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    3ff0:	f7ff ffa4 	bl	3f3c <mp_lexer_new>
}
    3ff4:	b005      	add	sp, #20
    3ff6:	bd30      	pop	{r4, r5, pc}

00003ff8 <mp_lexer_free>:
#endif

#endif

void mp_lexer_free(mp_lexer_t *lex) {
    if (lex) {
    3ff8:	b178      	cbz	r0, 401a <mp_lexer_free+0x22>
void mp_lexer_free(mp_lexer_t *lex) {
    3ffa:	b510      	push	{r4, lr}
    3ffc:	4604      	mov	r4, r0
        lex->reader.close(lex->reader.data);
    3ffe:	68c3      	ldr	r3, [r0, #12]
    4000:	6840      	ldr	r0, [r0, #4]
    4002:	4798      	blx	r3
        vstr_clear(&lex->vstr);
    4004:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4008:	f7fd fc04 	bl	1814 <vstr_clear>
        m_del(uint16_t, lex->indent_level, lex->alloc_indent_level);
    400c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    400e:	f7fc fc7e 	bl	90e <m_free>
        m_del_obj(mp_lexer_t, lex);
    4012:	4620      	mov	r0, r4
    4014:	f7fc fc7b 	bl	90e <m_free>
    }
}
    4018:	bd10      	pop	{r4, pc}
    401a:	4770      	bx	lr

0000401c <get_rule_arg>:
    mp_map_t consts;
    #endif
} parser_t;

STATIC const uint16_t *get_rule_arg(uint8_t r_id) {
    size_t off = rule_arg_offset_table[r_id];
    401c:	4b04      	ldr	r3, [pc, #16]	; (4030 <get_rule_arg+0x14>)
    401e:	5c1b      	ldrb	r3, [r3, r0]
    if (r_id >= FIRST_RULE_WITH_OFFSET_ABOVE_255) {
    4020:	2865      	cmp	r0, #101	; 0x65
    4022:	d901      	bls.n	4028 <get_rule_arg+0xc>
        off |= 0x100;
    4024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    }
    return &rule_arg_combined_table[off];
}
    4028:	4802      	ldr	r0, [pc, #8]	; (4034 <get_rule_arg+0x18>)
    402a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    402e:	4770      	bx	lr
    4030:	00024064 	.word	0x00024064
    4034:	00023d20 	.word	0x00023d20

00004038 <pop_rule>:
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    size_t rule_id = arg & RULE_ARG_ARG_MASK;
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
}

STATIC uint8_t pop_rule(parser_t *parser, size_t *arg_i, size_t *src_line) {
    4038:	b410      	push	{r4}
    403a:	4603      	mov	r3, r0
    parser->rule_stack_top -= 1;
    403c:	6844      	ldr	r4, [r0, #4]
    403e:	3c01      	subs	r4, #1
    4040:	6044      	str	r4, [r0, #4]
    uint8_t rule_id = parser->rule_stack[parser->rule_stack_top].rule_id;
    4042:	6880      	ldr	r0, [r0, #8]
    4044:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    4048:	78e0      	ldrb	r0, [r4, #3]
    *arg_i = parser->rule_stack[parser->rule_stack_top].arg_i;
    404a:	6864      	ldr	r4, [r4, #4]
    404c:	600c      	str	r4, [r1, #0]
    *src_line = parser->rule_stack[parser->rule_stack_top].src_line;
    404e:	6899      	ldr	r1, [r3, #8]
    4050:	685b      	ldr	r3, [r3, #4]
    4052:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    4056:	f3c3 0317 	ubfx	r3, r3, #0, #24
    405a:	6013      	str	r3, [r2, #0]
    return rule_id;
}
    405c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4060:	4770      	bx	lr

00004062 <mp_parse_node_new_small_int_checked>:
    if (((val ^ (val << 1)) & 0xffffffff80000000) != 0) {
        return make_node_const_object(parser, 0, o_val);
    }
    #endif
    return mp_parse_node_new_small_int(val);
}
    4062:	f041 0001 	orr.w	r0, r1, #1
    4066:	4770      	bx	lr

00004068 <peek_result>:
STATIC mp_parse_node_t peek_result(parser_t *parser, size_t pos) {
    4068:	b508      	push	{r3, lr}
    assert(parser->result_stack_top > pos);
    406a:	6903      	ldr	r3, [r0, #16]
    406c:	428b      	cmp	r3, r1
    406e:	d907      	bls.n	4080 <peek_result+0x18>
    return parser->result_stack[parser->result_stack_top - 1 - pos];
    4070:	6942      	ldr	r2, [r0, #20]
    4072:	1a59      	subs	r1, r3, r1
    4074:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4078:	3901      	subs	r1, #1
}
    407a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    407e:	bd08      	pop	{r3, pc}
    assert(parser->result_stack_top > pos);
    4080:	4b03      	ldr	r3, [pc, #12]	; (4090 <peek_result+0x28>)
    4082:	4a04      	ldr	r2, [pc, #16]	; (4094 <peek_result+0x2c>)
    4084:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    4088:	4803      	ldr	r0, [pc, #12]	; (4098 <peek_result+0x30>)
    408a:	f014 fa67 	bl	1855c <__assert_func>
    408e:	bf00      	nop
    4090:	00023bc8 	.word	0x00023bc8
    4094:	00023a7c 	.word	0x00023a7c
    4098:	00023be8 	.word	0x00023be8

0000409c <pop_result>:
STATIC mp_parse_node_t pop_result(parser_t *parser) {
    409c:	b508      	push	{r3, lr}
    assert(parser->result_stack_top > 0);
    409e:	6903      	ldr	r3, [r0, #16]
    40a0:	b12b      	cbz	r3, 40ae <pop_result+0x12>
    return parser->result_stack[--parser->result_stack_top];
    40a2:	6942      	ldr	r2, [r0, #20]
    40a4:	3b01      	subs	r3, #1
    40a6:	6103      	str	r3, [r0, #16]
}
    40a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    40ac:	bd08      	pop	{r3, pc}
    assert(parser->result_stack_top > 0);
    40ae:	4b03      	ldr	r3, [pc, #12]	; (40bc <pop_result+0x20>)
    40b0:	4a03      	ldr	r2, [pc, #12]	; (40c0 <pop_result+0x24>)
    40b2:	f240 11a9 	movw	r1, #425	; 0x1a9
    40b6:	4803      	ldr	r0, [pc, #12]	; (40c4 <pop_result+0x28>)
    40b8:	f014 fa50 	bl	1855c <__assert_func>
    40bc:	00023bfc 	.word	0x00023bfc
    40c0:	00023a70 	.word	0x00023a70
    40c4:	00023be8 	.word	0x00023be8

000040c8 <parser_alloc>:
STATIC void *parser_alloc(parser_t *parser, size_t num_bytes) {
    40c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ca:	4606      	mov	r6, r0
    40cc:	460d      	mov	r5, r1
    mp_parse_chunk_t *chunk = parser->cur_chunk;
    40ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
    if (chunk != NULL && chunk->union_.used + num_bytes > chunk->alloc) {
    40d0:	b124      	cbz	r4, 40dc <parser_alloc+0x14>
    40d2:	6863      	ldr	r3, [r4, #4]
    40d4:	440b      	add	r3, r1
    40d6:	6821      	ldr	r1, [r4, #0]
    40d8:	428b      	cmp	r3, r1
    40da:	d807      	bhi.n	40ec <parser_alloc+0x24>
    if (chunk == NULL) {
    40dc:	b1e4      	cbz	r4, 4118 <parser_alloc+0x50>
    byte *ret = chunk->data + chunk->union_.used;
    40de:	f104 0008 	add.w	r0, r4, #8
    40e2:	6863      	ldr	r3, [r4, #4]
    chunk->union_.used += num_bytes;
    40e4:	441d      	add	r5, r3
    40e6:	6065      	str	r5, [r4, #4]
}
    40e8:	4418      	add	r0, r3
    40ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mp_parse_chunk_t *new_data = (mp_parse_chunk_t*)m_renew_maybe(byte, chunk,
    40ec:	4429      	add	r1, r5
    40ee:	2200      	movs	r2, #0
    40f0:	3108      	adds	r1, #8
    40f2:	4620      	mov	r0, r4
    40f4:	f7fc fc07 	bl	906 <m_realloc_maybe>
        if (new_data == NULL) {
    40f8:	b118      	cbz	r0, 4102 <parser_alloc+0x3a>
            chunk->alloc += num_bytes;
    40fa:	6823      	ldr	r3, [r4, #0]
    40fc:	442b      	add	r3, r5
    40fe:	6023      	str	r3, [r4, #0]
    4100:	e7ec      	b.n	40dc <parser_alloc+0x14>
            (void)m_renew_maybe(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc,
    4102:	6861      	ldr	r1, [r4, #4]
    4104:	2200      	movs	r2, #0
    4106:	3108      	adds	r1, #8
    4108:	4620      	mov	r0, r4
    410a:	f7fc fbfc 	bl	906 <m_realloc_maybe>
            chunk->alloc = chunk->union_.used;
    410e:	6863      	ldr	r3, [r4, #4]
    4110:	6023      	str	r3, [r4, #0]
            chunk->union_.next = parser->tree.chunk;
    4112:	6a33      	ldr	r3, [r6, #32]
    4114:	6063      	str	r3, [r4, #4]
            parser->tree.chunk = chunk;
    4116:	6234      	str	r4, [r6, #32]
        if (alloc < num_bytes) {
    4118:	2d10      	cmp	r5, #16
    411a:	d80a      	bhi.n	4132 <parser_alloc+0x6a>
        size_t alloc = MICROPY_ALLOC_PARSE_CHUNK_INIT;
    411c:	2710      	movs	r7, #16
        chunk = (mp_parse_chunk_t*)m_new(byte, sizeof(mp_parse_chunk_t) + alloc);
    411e:	f107 0008 	add.w	r0, r7, #8
    4122:	f7fc fbcb 	bl	8bc <m_malloc>
    4126:	4604      	mov	r4, r0
        chunk->alloc = alloc;
    4128:	6007      	str	r7, [r0, #0]
        chunk->union_.used = 0;
    412a:	2300      	movs	r3, #0
    412c:	6043      	str	r3, [r0, #4]
        parser->cur_chunk = chunk;
    412e:	6270      	str	r0, [r6, #36]	; 0x24
    4130:	e7d5      	b.n	40de <parser_alloc+0x16>
            alloc = num_bytes;
    4132:	462f      	mov	r7, r5
    4134:	e7f3      	b.n	411e <parser_alloc+0x56>

00004136 <make_node_const_object>:
STATIC mp_parse_node_t make_node_const_object(parser_t *parser, size_t src_line, mp_obj_t obj) {
    4136:	b538      	push	{r3, r4, r5, lr}
    4138:	460d      	mov	r5, r1
    413a:	4614      	mov	r4, r2
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_obj_t));
    413c:	210c      	movs	r1, #12
    413e:	f7ff ffc3 	bl	40c8 <parser_alloc>
    pn->source_line = src_line;
    4142:	6005      	str	r5, [r0, #0]
    pn->kind_num_nodes = RULE_const_object | (1 << 8);
    4144:	f240 1235 	movw	r2, #309	; 0x135
    4148:	6042      	str	r2, [r0, #4]
    pn->nodes[0] = (uintptr_t)obj;
    414a:	6084      	str	r4, [r0, #8]
}
    414c:	bd38      	pop	{r3, r4, r5, pc}

0000414e <push_result_node>:
STATIC void push_result_node(parser_t *parser, mp_parse_node_t pn) {
    414e:	b538      	push	{r3, r4, r5, lr}
    4150:	4604      	mov	r4, r0
    4152:	460d      	mov	r5, r1
    if (parser->result_stack_top >= parser->result_stack_alloc) {
    4154:	6903      	ldr	r3, [r0, #16]
    4156:	68c1      	ldr	r1, [r0, #12]
    4158:	428b      	cmp	r3, r1
    415a:	d206      	bcs.n	416a <push_result_node+0x1c>
    parser->result_stack[parser->result_stack_top++] = pn;
    415c:	6962      	ldr	r2, [r4, #20]
    415e:	6923      	ldr	r3, [r4, #16]
    4160:	1c59      	adds	r1, r3, #1
    4162:	6121      	str	r1, [r4, #16]
    4164:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
    4168:	bd38      	pop	{r3, r4, r5, pc}
        mp_parse_node_t *stack = m_renew(mp_parse_node_t, parser->result_stack, parser->result_stack_alloc, parser->result_stack_alloc + MICROPY_ALLOC_PARSE_RESULT_INC);
    416a:	3110      	adds	r1, #16
    416c:	0089      	lsls	r1, r1, #2
    416e:	6940      	ldr	r0, [r0, #20]
    4170:	f7fc fbbb 	bl	8ea <m_realloc>
        parser->result_stack = stack;
    4174:	6160      	str	r0, [r4, #20]
        parser->result_stack_alloc += MICROPY_ALLOC_PARSE_RESULT_INC;
    4176:	68e3      	ldr	r3, [r4, #12]
    4178:	3310      	adds	r3, #16
    417a:	60e3      	str	r3, [r4, #12]
    417c:	e7ee      	b.n	415c <push_result_node+0xe>

0000417e <push_rule>:
STATIC void push_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t arg_i) {
    417e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4180:	4604      	mov	r4, r0
    4182:	460f      	mov	r7, r1
    4184:	4616      	mov	r6, r2
    4186:	461d      	mov	r5, r3
    if (parser->rule_stack_top >= parser->rule_stack_alloc) {
    4188:	6843      	ldr	r3, [r0, #4]
    418a:	6801      	ldr	r1, [r0, #0]
    418c:	428b      	cmp	r3, r1
    418e:	d20e      	bcs.n	41ae <push_rule+0x30>
    rule_stack_t *rs = &parser->rule_stack[parser->rule_stack_top++];
    4190:	68a2      	ldr	r2, [r4, #8]
    4192:	6863      	ldr	r3, [r4, #4]
    4194:	1c59      	adds	r1, r3, #1
    4196:	6061      	str	r1, [r4, #4]
    4198:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    rs->src_line = src_line;
    419c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    41a0:	f367 0017 	bfi	r0, r7, #0, #24
    41a4:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    rs->rule_id = rule_id;
    41a8:	70ce      	strb	r6, [r1, #3]
    rs->arg_i = arg_i;
    41aa:	604d      	str	r5, [r1, #4]
}
    41ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rule_stack_t *rs = m_renew(rule_stack_t, parser->rule_stack, parser->rule_stack_alloc, parser->rule_stack_alloc + MICROPY_ALLOC_PARSE_RULE_INC);
    41ae:	3110      	adds	r1, #16
    41b0:	00c9      	lsls	r1, r1, #3
    41b2:	6880      	ldr	r0, [r0, #8]
    41b4:	f7fc fb99 	bl	8ea <m_realloc>
        parser->rule_stack = rs;
    41b8:	60a0      	str	r0, [r4, #8]
        parser->rule_stack_alloc += MICROPY_ALLOC_PARSE_RULE_INC;
    41ba:	6823      	ldr	r3, [r4, #0]
    41bc:	3310      	adds	r3, #16
    41be:	6023      	str	r3, [r4, #0]
    41c0:	e7e6      	b.n	4190 <push_rule+0x12>
	...

000041c4 <push_rule_from_arg>:
STATIC void push_rule_from_arg(parser_t *parser, size_t arg) {
    41c4:	b510      	push	{r4, lr}
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    41c6:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    41ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    41ce:	d002      	beq.n	41d6 <push_rule_from_arg+0x12>
    41d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    41d4:	d106      	bne.n	41e4 <push_rule_from_arg+0x20>
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
    41d6:	6984      	ldr	r4, [r0, #24]
    41d8:	2300      	movs	r3, #0
    41da:	b2ca      	uxtb	r2, r1
    41dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    41de:	f7ff ffce 	bl	417e <push_rule>
}
    41e2:	bd10      	pop	{r4, pc}
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    41e4:	4b03      	ldr	r3, [pc, #12]	; (41f4 <push_rule_from_arg+0x30>)
    41e6:	4a04      	ldr	r2, [pc, #16]	; (41f8 <push_rule_from_arg+0x34>)
    41e8:	f44f 7199 	mov.w	r1, #306	; 0x132
    41ec:	4803      	ldr	r0, [pc, #12]	; (41fc <push_rule_from_arg+0x38>)
    41ee:	f014 f9b5 	bl	1855c <__assert_func>
    41f2:	bf00      	nop
    41f4:	00023c1c 	.word	0x00023c1c
    41f8:	00023a5c 	.word	0x00023a5c
    41fc:	00023be8 	.word	0x00023be8

00004200 <push_result_token>:

STATIC void push_result_token(parser_t *parser, uint8_t rule_id) {
    4200:	b530      	push	{r4, r5, lr}
    4202:	b083      	sub	sp, #12
    4204:	4605      	mov	r5, r0
    mp_parse_node_t pn;
    mp_lexer_t *lex = parser->lexer;
    4206:	6984      	ldr	r4, [r0, #24]
    if (lex->tok_kind == MP_TOKEN_NAME) {
    4208:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    420c:	2807      	cmp	r0, #7
    420e:	d010      	beq.n	4232 <push_result_token+0x32>
        }
        #else
        (void)rule_id;
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
        #endif
    } else if (lex->tok_kind == MP_TOKEN_INTEGER) {
    4210:	2808      	cmp	r0, #8
    4212:	d016      	beq.n	4242 <push_result_token+0x42>
        if (MP_OBJ_IS_SMALL_INT(o)) {
            pn = mp_parse_node_new_small_int_checked(parser, o);
        } else {
            pn = make_node_const_object(parser, lex->tok_line, o);
        }
    } else if (lex->tok_kind == MP_TOKEN_FLOAT_OR_IMAG) {
    4214:	2809      	cmp	r0, #9
    4216:	d02a      	beq.n	426e <push_result_token+0x6e>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
        pn = make_node_const_object(parser, lex->tok_line, o);
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    4218:	f1a0 030a 	sub.w	r3, r0, #10
    421c:	b2db      	uxtb	r3, r3
    421e:	2b01      	cmp	r3, #1
    4220:	d933      	bls.n	428a <push_result_token+0x8a>

static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
}
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
    4222:	0100      	lsls	r0, r0, #4
    4224:	f040 010e 	orr.w	r1, r0, #14
            pn = make_node_const_object(parser, lex->tok_line, o);
        }
    } else {
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, lex->tok_kind);
    }
    push_result_node(parser, pn);
    4228:	4628      	mov	r0, r5
    422a:	f7ff ff90 	bl	414e <push_result_node>
}
    422e:	b003      	add	sp, #12
    4230:	bd30      	pop	{r4, r5, pc}
        qstr id = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    4232:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    4234:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    4236:	f7fd f997 	bl	1568 <qstr_from_strn>
    423a:	0100      	lsls	r0, r0, #4
    423c:	f040 0102 	orr.w	r1, r0, #2
    4240:	e7f2      	b.n	4228 <push_result_token+0x28>
        mp_obj_t o = mp_parse_num_integer(lex->vstr.buf, lex->vstr.len, 0, lex);
    4242:	4623      	mov	r3, r4
    4244:	2200      	movs	r2, #0
    4246:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    4248:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    424a:	f004 fe91 	bl	8f70 <mp_parse_num_integer>
        if (MP_OBJ_IS_SMALL_INT(o)) {
    424e:	f010 0f01 	tst.w	r0, #1
    4252:	d005      	beq.n	4260 <push_result_token+0x60>
            pn = mp_parse_node_new_small_int_checked(parser, o);
    4254:	4601      	mov	r1, r0
    4256:	4628      	mov	r0, r5
    4258:	f7ff ff03 	bl	4062 <mp_parse_node_new_small_int_checked>
    425c:	4601      	mov	r1, r0
    425e:	e7e3      	b.n	4228 <push_result_token+0x28>
            pn = make_node_const_object(parser, lex->tok_line, o);
    4260:	4602      	mov	r2, r0
    4262:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    4264:	4628      	mov	r0, r5
    4266:	f7ff ff66 	bl	4136 <make_node_const_object>
    426a:	4601      	mov	r1, r0
    426c:	e7dc      	b.n	4228 <push_result_token+0x28>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
    426e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    4270:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    4272:	9400      	str	r4, [sp, #0]
    4274:	2300      	movs	r3, #0
    4276:	2201      	movs	r2, #1
    4278:	f004 fef6 	bl	9068 <mp_parse_num_decimal>
        pn = make_node_const_object(parser, lex->tok_line, o);
    427c:	4602      	mov	r2, r0
    427e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    4280:	4628      	mov	r0, r5
    4282:	f7ff ff58 	bl	4136 <make_node_const_object>
    4286:	4601      	mov	r1, r0
    4288:	e7ce      	b.n	4228 <push_result_token+0x28>
        if (lex->vstr.len <= MICROPY_ALLOC_PARSE_INTERN_STRING_LEN) {
    428a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    428c:	290a      	cmp	r1, #10
    428e:	d80b      	bhi.n	42a8 <push_result_token+0xa8>
            qst = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    4290:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    4292:	f7fd f969 	bl	1568 <qstr_from_strn>
        if (qst != MP_QSTR_NULL) {
    4296:	b168      	cbz	r0, 42b4 <push_result_token+0xb4>
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    4298:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    429c:	2b0a      	cmp	r3, #10
    429e:	d007      	beq.n	42b0 <push_result_token+0xb0>
    42a0:	210a      	movs	r1, #10
    42a2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
    42a6:	e7bf      	b.n	4228 <push_result_token+0x28>
            qst = qstr_find_strn(lex->vstr.buf, lex->vstr.len);
    42a8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    42aa:	f7fd f927 	bl	14fc <qstr_find_strn>
    42ae:	e7f2      	b.n	4296 <push_result_token+0x96>
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    42b0:	2106      	movs	r1, #6
    42b2:	e7f6      	b.n	42a2 <push_result_token+0xa2>
                lex->tok_kind == MP_TOKEN_STRING ? &mp_type_str : &mp_type_bytes,
    42b4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
            mp_obj_t o = mp_obj_new_str_copy(
    42b8:	2b0a      	cmp	r3, #10
    42ba:	d00b      	beq.n	42d4 <push_result_token+0xd4>
    42bc:	4806      	ldr	r0, [pc, #24]	; (42d8 <push_result_token+0xd8>)
    42be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    42c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    42c2:	f00b facb 	bl	f85c <mp_obj_new_str_copy>
            pn = make_node_const_object(parser, lex->tok_line, o);
    42c6:	4602      	mov	r2, r0
    42c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    42ca:	4628      	mov	r0, r5
    42cc:	f7ff ff33 	bl	4136 <make_node_const_object>
    42d0:	4601      	mov	r1, r0
    42d2:	e7a9      	b.n	4228 <push_result_token+0x28>
            mp_obj_t o = mp_obj_new_str_copy(
    42d4:	4801      	ldr	r0, [pc, #4]	; (42dc <push_result_token+0xdc>)
    42d6:	e7f2      	b.n	42be <push_result_token+0xbe>
    42d8:	000280c8 	.word	0x000280c8
    42dc:	00028104 	.word	0x00028104

000042e0 <mp_parse_node_is_const_false>:
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) == 0);
    42e0:	28de      	cmp	r0, #222	; 0xde
    42e2:	d006      	beq.n	42f2 <mp_parse_node_is_const_false+0x12>
    42e4:	f010 0f01 	tst.w	r0, #1
    42e8:	d005      	beq.n	42f6 <mp_parse_node_is_const_false+0x16>
    42ea:	0843      	lsrs	r3, r0, #1
    42ec:	d005      	beq.n	42fa <mp_parse_node_is_const_false+0x1a>
    42ee:	2000      	movs	r0, #0
    42f0:	4770      	bx	lr
    42f2:	2001      	movs	r0, #1
    42f4:	4770      	bx	lr
    42f6:	2000      	movs	r0, #0
    42f8:	4770      	bx	lr
    42fa:	2001      	movs	r0, #1
}
    42fc:	4770      	bx	lr

000042fe <mp_parse_node_is_const_true>:
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) != 0);
    42fe:	28fe      	cmp	r0, #254	; 0xfe
    4300:	d006      	beq.n	4310 <mp_parse_node_is_const_true+0x12>
    4302:	f010 0f01 	tst.w	r0, #1
    4306:	d005      	beq.n	4314 <mp_parse_node_is_const_true+0x16>
    4308:	0843      	lsrs	r3, r0, #1
    430a:	d105      	bne.n	4318 <mp_parse_node_is_const_true+0x1a>
    430c:	2000      	movs	r0, #0
    430e:	4770      	bx	lr
    4310:	2001      	movs	r0, #1
    4312:	4770      	bx	lr
    4314:	2000      	movs	r0, #0
    4316:	4770      	bx	lr
    4318:	2001      	movs	r0, #1
}
    431a:	4770      	bx	lr

0000431c <fold_logical_constants>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args);

#if MICROPY_COMP_CONST_FOLDING
STATIC bool fold_logical_constants(parser_t *parser, uint8_t rule_id, size_t *num_args) {
    431c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4320:	4605      	mov	r5, r0
    4322:	4689      	mov	r9, r1
    if (rule_id == RULE_or_test
        || rule_id == RULE_and_test) {
    4324:	f1a1 031c 	sub.w	r3, r1, #28
    4328:	b2db      	uxtb	r3, r3
    if (rule_id == RULE_or_test
    432a:	2b01      	cmp	r3, #1
    432c:	d905      	bls.n	433a <fold_logical_constants+0x1e>
        *num_args -= copy_to;

        // we did a complete folding if there's only 1 arg left
        return *num_args == 1;

    } else if (rule_id == RULE_not_test_2) {
    432e:	291e      	cmp	r1, #30
    4330:	d03c      	beq.n	43ac <fold_logical_constants+0x90>
        pop_result(parser);
        push_result_node(parser, pn);
        return true;
    }

    return false;
    4332:	2700      	movs	r7, #0
}
    4334:	4638      	mov	r0, r7
    4336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    433a:	4690      	mov	r8, r2
        size_t copy_to = *num_args;
    433c:	6817      	ldr	r7, [r2, #0]
        for (size_t i = copy_to; i > 0;) {
    433e:	463c      	mov	r4, r7
    4340:	e007      	b.n	4352 <fold_logical_constants+0x36>
                if (mp_parse_node_is_const_true(pn)) {
    4342:	f7ff ffdc 	bl	42fe <mp_parse_node_is_const_true>
    4346:	b9f0      	cbnz	r0, 4386 <fold_logical_constants+0x6a>
                } else if (!mp_parse_node_is_const_false(pn)) {
    4348:	4630      	mov	r0, r6
    434a:	f7ff ffc9 	bl	42e0 <mp_parse_node_is_const_false>
    434e:	b900      	cbnz	r0, 4352 <fold_logical_constants+0x36>
                    copy_to -= 1;
    4350:	3f01      	subs	r7, #1
        for (size_t i = copy_to; i > 0;) {
    4352:	b1c4      	cbz	r4, 4386 <fold_logical_constants+0x6a>
            mp_parse_node_t pn = peek_result(parser, --i);
    4354:	3c01      	subs	r4, #1
    4356:	4621      	mov	r1, r4
    4358:	4628      	mov	r0, r5
    435a:	f7ff fe85 	bl	4068 <peek_result>
    435e:	4606      	mov	r6, r0
            parser->result_stack[parser->result_stack_top - copy_to] = pn;
    4360:	696a      	ldr	r2, [r5, #20]
    4362:	692b      	ldr	r3, [r5, #16]
    4364:	1bdb      	subs	r3, r3, r7
    4366:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
            if (i == 0) {
    436a:	b164      	cbz	r4, 4386 <fold_logical_constants+0x6a>
            if (rule_id == RULE_or_test) {
    436c:	f1b9 0f1c 	cmp.w	r9, #28
    4370:	d0e7      	beq.n	4342 <fold_logical_constants+0x26>
                if (mp_parse_node_is_const_false(pn)) {
    4372:	f7ff ffb5 	bl	42e0 <mp_parse_node_is_const_false>
    4376:	b930      	cbnz	r0, 4386 <fold_logical_constants+0x6a>
                } else if (!mp_parse_node_is_const_true(pn)) {
    4378:	4630      	mov	r0, r6
    437a:	f7ff ffc0 	bl	42fe <mp_parse_node_is_const_true>
    437e:	2800      	cmp	r0, #0
    4380:	d1e7      	bne.n	4352 <fold_logical_constants+0x36>
                    copy_to -= 1;
    4382:	3f01      	subs	r7, #1
    4384:	e7e5      	b.n	4352 <fold_logical_constants+0x36>
        copy_to -= 1; // copy_to now contains number of args to pop
    4386:	3f01      	subs	r7, #1
        for (size_t i = 0; i < copy_to; ++i) {
    4388:	2400      	movs	r4, #0
    438a:	e003      	b.n	4394 <fold_logical_constants+0x78>
            pop_result(parser);
    438c:	4628      	mov	r0, r5
    438e:	f7ff fe85 	bl	409c <pop_result>
        for (size_t i = 0; i < copy_to; ++i) {
    4392:	3401      	adds	r4, #1
    4394:	42bc      	cmp	r4, r7
    4396:	d3f9      	bcc.n	438c <fold_logical_constants+0x70>
        *num_args -= copy_to;
    4398:	f8d8 3000 	ldr.w	r3, [r8]
    439c:	1bdf      	subs	r7, r3, r7
    439e:	f8c8 7000 	str.w	r7, [r8]
        return *num_args == 1;
    43a2:	2f01      	cmp	r7, #1
    43a4:	bf14      	ite	ne
    43a6:	2700      	movne	r7, #0
    43a8:	2701      	moveq	r7, #1
    43aa:	e7c3      	b.n	4334 <fold_logical_constants+0x18>
        mp_parse_node_t pn = peek_result(parser, 0);
    43ac:	2100      	movs	r1, #0
    43ae:	f7ff fe5b 	bl	4068 <peek_result>
    43b2:	4604      	mov	r4, r0
        if (mp_parse_node_is_const_false(pn)) {
    43b4:	f7ff ff94 	bl	42e0 <mp_parse_node_is_const_false>
    43b8:	b978      	cbnz	r0, 43da <fold_logical_constants+0xbe>
        } else if (mp_parse_node_is_const_true(pn)) {
    43ba:	4620      	mov	r0, r4
    43bc:	f7ff ff9f 	bl	42fe <mp_parse_node_is_const_true>
    43c0:	4607      	mov	r7, r0
    43c2:	2800      	cmp	r0, #0
    43c4:	d0b6      	beq.n	4334 <fold_logical_constants+0x18>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_FALSE);
    43c6:	24de      	movs	r4, #222	; 0xde
        pop_result(parser);
    43c8:	4628      	mov	r0, r5
    43ca:	f7ff fe67 	bl	409c <pop_result>
        push_result_node(parser, pn);
    43ce:	4621      	mov	r1, r4
    43d0:	4628      	mov	r0, r5
    43d2:	f7ff febc 	bl	414e <push_result_node>
        return true;
    43d6:	2701      	movs	r7, #1
    43d8:	e7ac      	b.n	4334 <fold_logical_constants+0x18>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_TRUE);
    43da:	24fe      	movs	r4, #254	; 0xfe
    43dc:	e7f4      	b.n	43c8 <fold_logical_constants+0xac>
	...

000043e0 <mp_parse_node_get_int_maybe>:
    if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    43e0:	f010 0f01 	tst.w	r0, #1
    43e4:	d108      	bne.n	43f8 <mp_parse_node_get_int_maybe+0x18>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_const_object)) {
    43e6:	b300      	cbz	r0, 442a <mp_parse_node_get_int_maybe+0x4a>
    43e8:	f010 0f03 	tst.w	r0, #3
    43ec:	d11f      	bne.n	442e <mp_parse_node_get_int_maybe+0x4e>
    43ee:	7903      	ldrb	r3, [r0, #4]
    43f0:	2b35      	cmp	r3, #53	; 0x35
    43f2:	d006      	beq.n	4402 <mp_parse_node_get_int_maybe+0x22>
        return false;
    43f4:	2000      	movs	r0, #0
}
    43f6:	4770      	bx	lr
        *o = MP_OBJ_NEW_SMALL_INT(MP_PARSE_NODE_LEAF_SMALL_INT(pn));
    43f8:	f040 0001 	orr.w	r0, r0, #1
    43fc:	6008      	str	r0, [r1, #0]
        return true;
    43fe:	2001      	movs	r0, #1
    4400:	4770      	bx	lr
        *o = (mp_obj_t)pns->nodes[0];
    4402:	6883      	ldr	r3, [r0, #8]
    4404:	600b      	str	r3, [r1, #0]
        return MP_OBJ_IS_INT(*o);
    4406:	f013 0001 	ands.w	r0, r3, #1
    440a:	d108      	bne.n	441e <mp_parse_node_get_int_maybe+0x3e>
    440c:	f013 0203 	ands.w	r2, r3, #3
    4410:	d106      	bne.n	4420 <mp_parse_node_get_int_maybe+0x40>
    4412:	6819      	ldr	r1, [r3, #0]
    4414:	4b07      	ldr	r3, [pc, #28]	; (4434 <mp_parse_node_get_int_maybe+0x54>)
    4416:	4299      	cmp	r1, r3
    4418:	d005      	beq.n	4426 <mp_parse_node_get_int_maybe+0x46>
    441a:	4610      	mov	r0, r2
    441c:	e000      	b.n	4420 <mp_parse_node_get_int_maybe+0x40>
    441e:	2001      	movs	r0, #1
    4420:	f000 0001 	and.w	r0, r0, #1
    4424:	4770      	bx	lr
    4426:	2001      	movs	r0, #1
    4428:	e7fa      	b.n	4420 <mp_parse_node_get_int_maybe+0x40>
        return false;
    442a:	2000      	movs	r0, #0
    442c:	4770      	bx	lr
    442e:	2000      	movs	r0, #0
    4430:	4770      	bx	lr
    4432:	bf00      	nop
    4434:	00027498 	.word	0x00027498

00004438 <fold_constants>:

STATIC bool fold_constants(parser_t *parser, uint8_t rule_id, size_t num_args) {
    4438:	b5f0      	push	{r4, r5, r6, r7, lr}
    443a:	b083      	sub	sp, #12
    443c:	4604      	mov	r4, r0
    443e:	460d      	mov	r5, r1
    4440:	4616      	mov	r6, r2
    // it does not do partial folding, eg 1 + 2 + x -> 3 + x

    mp_obj_t arg0;
    if (rule_id == RULE_expr
        || rule_id == RULE_xor_expr
        || rule_id == RULE_and_expr) {
    4442:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
    4446:	b2db      	uxtb	r3, r3
    if (rule_id == RULE_expr
    4448:	2b02      	cmp	r3, #2
    444a:	d90a      	bls.n	4462 <fold_constants+0x2a>
            }
            arg0 = mp_binary_op(op, arg0, arg1);
        }
    } else if (rule_id == RULE_shift_expr
        || rule_id == RULE_arith_expr
        || rule_id == RULE_term) {
    444c:	f1a1 0324 	sub.w	r3, r1, #36	; 0x24
    4450:	b2db      	uxtb	r3, r3
    } else if (rule_id == RULE_shift_expr
    4452:	2b02      	cmp	r3, #2
    4454:	d92c      	bls.n	44b0 <fold_constants+0x78>
                    return false;
                }
            }
            arg0 = mp_binary_op(op, arg0, arg1);
        }
    } else if (rule_id == RULE_factor_2) {
    4456:	2927      	cmp	r1, #39	; 0x27
    4458:	d05d      	beq.n	4516 <fold_constants+0xde>
        }
        arg0 = dest[0];
    #endif

    } else {
        return false;
    445a:	2300      	movs	r3, #0
        // TODO reuse memory for parse node struct?
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    }

    return true;
}
    445c:	4618      	mov	r0, r3
    445e:	b003      	add	sp, #12
    4460:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    4462:	1e51      	subs	r1, r2, #1
    4464:	f7ff fe00 	bl	4068 <peek_result>
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4468:	a901      	add	r1, sp, #4
    446a:	f7ff ffb9 	bl	43e0 <mp_parse_node_get_int_maybe>
    446e:	4603      	mov	r3, r0
    4470:	2800      	cmp	r0, #0
    4472:	d0f3      	beq.n	445c <fold_constants+0x24>
        if (rule_id == RULE_expr) {
    4474:	2d21      	cmp	r5, #33	; 0x21
    4476:	d019      	beq.n	44ac <fold_constants+0x74>
        } else if (rule_id == RULE_xor_expr) {
    4478:	2d22      	cmp	r5, #34	; 0x22
    447a:	d015      	beq.n	44a8 <fold_constants+0x70>
            op = MP_BINARY_OP_AND;
    447c:	2717      	movs	r7, #23
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    447e:	1eb5      	subs	r5, r6, #2
    4480:	2d00      	cmp	r5, #0
    4482:	db72      	blt.n	456a <fold_constants+0x132>
            pn = peek_result(parser, i);
    4484:	4629      	mov	r1, r5
    4486:	4620      	mov	r0, r4
    4488:	f7ff fdee 	bl	4068 <peek_result>
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    448c:	4669      	mov	r1, sp
    448e:	f7ff ffa7 	bl	43e0 <mp_parse_node_get_int_maybe>
    4492:	4603      	mov	r3, r0
    4494:	2800      	cmp	r0, #0
    4496:	d0e1      	beq.n	445c <fold_constants+0x24>
            arg0 = mp_binary_op(op, arg0, arg1);
    4498:	9a00      	ldr	r2, [sp, #0]
    449a:	9901      	ldr	r1, [sp, #4]
    449c:	4638      	mov	r0, r7
    449e:	f005 ff0b 	bl	a2b8 <mp_binary_op>
    44a2:	9001      	str	r0, [sp, #4]
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    44a4:	3d01      	subs	r5, #1
    44a6:	e7eb      	b.n	4480 <fold_constants+0x48>
            op = MP_BINARY_OP_XOR;
    44a8:	2716      	movs	r7, #22
    44aa:	e7e8      	b.n	447e <fold_constants+0x46>
            op = MP_BINARY_OP_OR;
    44ac:	2715      	movs	r7, #21
    44ae:	e7e6      	b.n	447e <fold_constants+0x46>
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    44b0:	1e51      	subs	r1, r2, #1
    44b2:	f7ff fdd9 	bl	4068 <peek_result>
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    44b6:	a901      	add	r1, sp, #4
    44b8:	f7ff ff92 	bl	43e0 <mp_parse_node_get_int_maybe>
    44bc:	4603      	mov	r3, r0
    44be:	2800      	cmp	r0, #0
    44c0:	d0cc      	beq.n	445c <fold_constants+0x24>
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    44c2:	1eb5      	subs	r5, r6, #2
    44c4:	e009      	b.n	44da <fold_constants+0xa2>
            } else if (op >= MP_BINARY_OP_FLOOR_DIVIDE) {
    44c6:	2f1c      	cmp	r7, #28
    44c8:	d900      	bls.n	44cc <fold_constants+0x94>
                if (rhs_sign == 0) {
    44ca:	b310      	cbz	r0, 4512 <fold_constants+0xda>
            arg0 = mp_binary_op(op, arg0, arg1);
    44cc:	9a00      	ldr	r2, [sp, #0]
    44ce:	9901      	ldr	r1, [sp, #4]
    44d0:	4638      	mov	r0, r7
    44d2:	f005 fef1 	bl	a2b8 <mp_binary_op>
    44d6:	9001      	str	r0, [sp, #4]
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    44d8:	3d02      	subs	r5, #2
    44da:	2d00      	cmp	r5, #0
    44dc:	dd45      	ble.n	456a <fold_constants+0x132>
            pn = peek_result(parser, i - 1);
    44de:	1e69      	subs	r1, r5, #1
    44e0:	4620      	mov	r0, r4
    44e2:	f7ff fdc1 	bl	4068 <peek_result>
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    44e6:	4669      	mov	r1, sp
    44e8:	f7ff ff7a 	bl	43e0 <mp_parse_node_get_int_maybe>
    44ec:	b188      	cbz	r0, 4512 <fold_constants+0xda>
            mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, i));
    44ee:	4629      	mov	r1, r5
    44f0:	4620      	mov	r0, r4
    44f2:	f7ff fdb9 	bl	4068 <peek_result>
            mp_binary_op_t op = token_to_op[tok - MP_TOKEN_OP_PLUS];
    44f6:	f3c0 1007 	ubfx	r0, r0, #4, #8
    44fa:	382f      	subs	r0, #47	; 0x2f
    44fc:	4b28      	ldr	r3, [pc, #160]	; (45a0 <fold_constants+0x168>)
    44fe:	5c1f      	ldrb	r7, [r3, r0]
            if (op == (mp_binary_op_t)255) {
    4500:	2fff      	cmp	r7, #255	; 0xff
    4502:	d006      	beq.n	4512 <fold_constants+0xda>
            int rhs_sign = mp_obj_int_sign(arg1);
    4504:	9800      	ldr	r0, [sp, #0]
    4506:	f009 fcaf 	bl	de68 <mp_obj_int_sign>
            if (op <= MP_BINARY_OP_RSHIFT) {
    450a:	2f19      	cmp	r7, #25
    450c:	d8db      	bhi.n	44c6 <fold_constants+0x8e>
                if (rhs_sign < 0) {
    450e:	2800      	cmp	r0, #0
    4510:	dadc      	bge.n	44cc <fold_constants+0x94>
                return false;
    4512:	2300      	movs	r3, #0
    4514:	e7a2      	b.n	445c <fold_constants+0x24>
        mp_parse_node_t pn = peek_result(parser, 0);
    4516:	2100      	movs	r1, #0
    4518:	f7ff fda6 	bl	4068 <peek_result>
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    451c:	a901      	add	r1, sp, #4
    451e:	f7ff ff5f 	bl	43e0 <mp_parse_node_get_int_maybe>
    4522:	4603      	mov	r3, r0
    4524:	2800      	cmp	r0, #0
    4526:	d099      	beq.n	445c <fold_constants+0x24>
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, 1));
    4528:	2101      	movs	r1, #1
    452a:	4620      	mov	r0, r4
    452c:	f7ff fd9c 	bl	4068 <peek_result>
    4530:	f3c0 1007 	ubfx	r0, r0, #4, #8
        if (tok == MP_TOKEN_OP_PLUS) {
    4534:	282f      	cmp	r0, #47	; 0x2f
    4536:	d010      	beq.n	455a <fold_constants+0x122>
        } else if (tok == MP_TOKEN_OP_MINUS) {
    4538:	2830      	cmp	r0, #48	; 0x30
    453a:	d010      	beq.n	455e <fold_constants+0x126>
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    453c:	283d      	cmp	r0, #61	; 0x3d
    453e:	d105      	bne.n	454c <fold_constants+0x114>
            op = MP_UNARY_OP_INVERT;
    4540:	2002      	movs	r0, #2
        arg0 = mp_unary_op(op, arg0);
    4542:	9901      	ldr	r1, [sp, #4]
    4544:	f004 fffe 	bl	9544 <mp_unary_op>
    4548:	9001      	str	r0, [sp, #4]
    454a:	e00e      	b.n	456a <fold_constants+0x132>
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    454c:	4b15      	ldr	r3, [pc, #84]	; (45a4 <fold_constants+0x16c>)
    454e:	4a16      	ldr	r2, [pc, #88]	; (45a8 <fold_constants+0x170>)
    4550:	f240 21b3 	movw	r1, #691	; 0x2b3
    4554:	4815      	ldr	r0, [pc, #84]	; (45ac <fold_constants+0x174>)
    4556:	f014 f801 	bl	1855c <__assert_func>
            op = MP_UNARY_OP_POSITIVE;
    455a:	2000      	movs	r0, #0
    455c:	e7f1      	b.n	4542 <fold_constants+0x10a>
            op = MP_UNARY_OP_NEGATIVE;
    455e:	2001      	movs	r0, #1
    4560:	e7ef      	b.n	4542 <fold_constants+0x10a>
        pop_result(parser);
    4562:	4620      	mov	r0, r4
    4564:	f7ff fd9a 	bl	409c <pop_result>
    for (size_t i = num_args; i > 0; i--) {
    4568:	3e01      	subs	r6, #1
    456a:	2e00      	cmp	r6, #0
    456c:	d1f9      	bne.n	4562 <fold_constants+0x12a>
    if (MP_OBJ_IS_SMALL_INT(arg0)) {
    456e:	9a01      	ldr	r2, [sp, #4]
    4570:	f012 0f01 	tst.w	r2, #1
    4574:	d109      	bne.n	458a <fold_constants+0x152>
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    4576:	2100      	movs	r1, #0
    4578:	4620      	mov	r0, r4
    457a:	f7ff fddc 	bl	4136 <make_node_const_object>
    457e:	4601      	mov	r1, r0
    4580:	4620      	mov	r0, r4
    4582:	f7ff fde4 	bl	414e <push_result_node>
    return true;
    4586:	2301      	movs	r3, #1
    4588:	e768      	b.n	445c <fold_constants+0x24>
        push_result_node(parser, mp_parse_node_new_small_int_checked(parser, arg0));
    458a:	4611      	mov	r1, r2
    458c:	4620      	mov	r0, r4
    458e:	f7ff fd68 	bl	4062 <mp_parse_node_new_small_int_checked>
    4592:	4601      	mov	r1, r0
    4594:	4620      	mov	r0, r4
    4596:	f7ff fdda 	bl	414e <push_result_node>
    return true;
    459a:	2301      	movs	r3, #1
    459c:	e75e      	b.n	445c <fold_constants+0x24>
    459e:	bf00      	nop
    45a0:	00024108 	.word	0x00024108
    45a4:	00023aa4 	.word	0x00023aa4
    45a8:	00023a88 	.word	0x00023a88
    45ac:	00023be8 	.word	0x00023be8

000045b0 <push_result_rule>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args) {
    45b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45b2:	b083      	sub	sp, #12
    45b4:	4605      	mov	r5, r0
    45b6:	460e      	mov	r6, r1
    45b8:	4614      	mov	r4, r2
    45ba:	9301      	str	r3, [sp, #4]
    // optimise away parenthesis around an expression if possible
    if (rule_id == RULE_atom_paren) {
    45bc:	2a2a      	cmp	r2, #42	; 0x2a
    45be:	d007      	beq.n	45d0 <push_result_rule+0x20>
            return;
        }
    }

    #if MICROPY_COMP_CONST_FOLDING
    if (fold_logical_constants(parser, rule_id, &num_args)) {
    45c0:	aa01      	add	r2, sp, #4
    45c2:	4621      	mov	r1, r4
    45c4:	4628      	mov	r0, r5
    45c6:	f7ff fea9 	bl	431c <fold_logical_constants>
    45ca:	b168      	cbz	r0, 45e8 <push_result_rule+0x38>
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    for (size_t i = num_args; i > 0; i--) {
        pn->nodes[i - 1] = pop_result(parser);
    }
    push_result_node(parser, (mp_parse_node_t)pn);
}
    45cc:	b003      	add	sp, #12
    45ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mp_parse_node_t pn = peek_result(parser, 0);
    45d0:	2100      	movs	r1, #0
    45d2:	f7ff fd49 	bl	4068 <peek_result>
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    45d6:	2800      	cmp	r0, #0
    45d8:	d0f2      	beq.n	45c0 <push_result_rule+0x10>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_testlist_comp)) {
    45da:	f010 0f03 	tst.w	r0, #3
    45de:	d1f5      	bne.n	45cc <push_result_rule+0x1c>
    45e0:	7903      	ldrb	r3, [r0, #4]
    45e2:	2b8a      	cmp	r3, #138	; 0x8a
    45e4:	d1f2      	bne.n	45cc <push_result_rule+0x1c>
    45e6:	e7eb      	b.n	45c0 <push_result_rule+0x10>
    if (fold_constants(parser, rule_id, num_args)) {
    45e8:	9a01      	ldr	r2, [sp, #4]
    45ea:	4621      	mov	r1, r4
    45ec:	4628      	mov	r0, r5
    45ee:	f7ff ff23 	bl	4438 <fold_constants>
    45f2:	2800      	cmp	r0, #0
    45f4:	d1ea      	bne.n	45cc <push_result_rule+0x1c>
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_parse_node_t) * num_args);
    45f6:	9901      	ldr	r1, [sp, #4]
    45f8:	3102      	adds	r1, #2
    45fa:	0089      	lsls	r1, r1, #2
    45fc:	4628      	mov	r0, r5
    45fe:	f7ff fd63 	bl	40c8 <parser_alloc>
    4602:	4607      	mov	r7, r0
    pn->source_line = src_line;
    4604:	6006      	str	r6, [r0, #0]
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    4606:	9e01      	ldr	r6, [sp, #4]
    4608:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    460c:	6044      	str	r4, [r0, #4]
    for (size_t i = num_args; i > 0; i--) {
    460e:	e006      	b.n	461e <push_result_rule+0x6e>
        pn->nodes[i - 1] = pop_result(parser);
    4610:	3e01      	subs	r6, #1
    4612:	4628      	mov	r0, r5
    4614:	f7ff fd42 	bl	409c <pop_result>
    4618:	1cb3      	adds	r3, r6, #2
    461a:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
    for (size_t i = num_args; i > 0; i--) {
    461e:	2e00      	cmp	r6, #0
    4620:	d1f6      	bne.n	4610 <push_result_rule+0x60>
    push_result_node(parser, (mp_parse_node_t)pn);
    4622:	4639      	mov	r1, r7
    4624:	4628      	mov	r0, r5
    4626:	f7ff fd92 	bl	414e <push_result_node>
    462a:	e7cf      	b.n	45cc <push_result_rule+0x1c>

0000462c <mp_parse_node_extract_list>:
    if (MP_PARSE_NODE_IS_NULL(*pn)) {
    462c:	6803      	ldr	r3, [r0, #0]
    462e:	b15b      	cbz	r3, 4648 <mp_parse_node_extract_list+0x1c>
    } else if (MP_PARSE_NODE_IS_LEAF(*pn)) {
    4630:	f013 0f03 	tst.w	r3, #3
    4634:	d10b      	bne.n	464e <mp_parse_node_extract_list+0x22>
int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes) {
    4636:	b410      	push	{r4}
        if (MP_PARSE_NODE_STRUCT_KIND(pns) != pn_kind) {
    4638:	791c      	ldrb	r4, [r3, #4]
    463a:	428c      	cmp	r4, r1
    463c:	d00a      	beq.n	4654 <mp_parse_node_extract_list+0x28>
            *nodes = pn;
    463e:	6010      	str	r0, [r2, #0]
            return 1;
    4640:	2001      	movs	r0, #1
}
    4642:	f85d 4b04 	ldr.w	r4, [sp], #4
    4646:	4770      	bx	lr
        *nodes = NULL;
    4648:	2000      	movs	r0, #0
    464a:	6010      	str	r0, [r2, #0]
        return 0;
    464c:	4770      	bx	lr
        *nodes = pn;
    464e:	6010      	str	r0, [r2, #0]
        return 1;
    4650:	2001      	movs	r0, #1
}
    4652:	4770      	bx	lr
            *nodes = pns->nodes;
    4654:	f103 0108 	add.w	r1, r3, #8
    4658:	6011      	str	r1, [r2, #0]
            return MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    465a:	6858      	ldr	r0, [r3, #4]
    465c:	0a00      	lsrs	r0, r0, #8
    465e:	e7f0      	b.n	4642 <mp_parse_node_extract_list+0x16>

00004660 <mp_parse>:

mp_parse_tree_t mp_parse(mp_lexer_t *lex, mp_parse_input_kind_t input_kind) {
    4660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4664:	b08f      	sub	sp, #60	; 0x3c
    4666:	9001      	str	r0, [sp, #4]
    4668:	460e      	mov	r6, r1
    466a:	4615      	mov	r5, r2
    466c:	9200      	str	r2, [sp, #0]

    // initialise parser and allocate memory for its stacks

    parser_t parser;

    parser.rule_stack_alloc = MICROPY_ALLOC_PARSE_RULE_INIT;
    466e:	2340      	movs	r3, #64	; 0x40
    4670:	9304      	str	r3, [sp, #16]
    parser.rule_stack_top = 0;
    4672:	2400      	movs	r4, #0
    4674:	9405      	str	r4, [sp, #20]
    parser.rule_stack = m_new(rule_stack_t, parser.rule_stack_alloc);
    4676:	f44f 7000 	mov.w	r0, #512	; 0x200
    467a:	f7fc f91f 	bl	8bc <m_malloc>
    467e:	9006      	str	r0, [sp, #24]

    parser.result_stack_alloc = MICROPY_ALLOC_PARSE_RESULT_INIT;
    4680:	2320      	movs	r3, #32
    4682:	9307      	str	r3, [sp, #28]
    parser.result_stack_top = 0;
    4684:	9408      	str	r4, [sp, #32]
    parser.result_stack = m_new(mp_parse_node_t, parser.result_stack_alloc);
    4686:	2080      	movs	r0, #128	; 0x80
    4688:	f7fc f918 	bl	8bc <m_malloc>
    468c:	9009      	str	r0, [sp, #36]	; 0x24

    parser.lexer = lex;
    468e:	960a      	str	r6, [sp, #40]	; 0x28

    parser.tree.chunk = NULL;
    4690:	940c      	str	r4, [sp, #48]	; 0x30
    parser.cur_chunk = NULL;
    4692:	940d      	str	r4, [sp, #52]	; 0x34
    mp_map_init(&parser.consts, 0);
    #endif

    // work out the top-level rule to use, and push it on the stack
    size_t top_level_rule;
    switch (input_kind) {
    4694:	b11d      	cbz	r5, 469e <mp_parse+0x3e>
    4696:	2d02      	cmp	r5, #2
    4698:	d00a      	beq.n	46b0 <mp_parse+0x50>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
        default: top_level_rule = RULE_file_input;
    469a:	2200      	movs	r2, #0
    469c:	e000      	b.n	46a0 <mp_parse+0x40>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
    469e:	2236      	movs	r2, #54	; 0x36
    }
    push_rule(&parser, lex->tok_line, top_level_rule, 0);
    46a0:	2300      	movs	r3, #0
    46a2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
    46a4:	a804      	add	r0, sp, #16
    46a6:	f7ff fd6a 	bl	417e <push_rule>

    // parse!

    bool backtrack = false;
    46aa:	f04f 0900 	mov.w	r9, #0
    46ae:	e055      	b.n	475c <mp_parse+0xfc>
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
    46b0:	2238      	movs	r2, #56	; 0x38
    46b2:	e7f5      	b.n	46a0 <mp_parse+0x40>
        printf("%s n=" UINT_FMT " i=" UINT_FMT " bt=%d\n", rule_name_table[rule_id], n, i, backtrack);
        #endif

        switch (rule_act & RULE_ACT_KIND_MASK) {
            case RULE_ACT_OR:
                if (i > 0 && !backtrack) {
    46b4:	9b02      	ldr	r3, [sp, #8]
    46b6:	b113      	cbz	r3, 46be <mp_parse+0x5e>
    46b8:	f1b9 0f00 	cmp.w	r9, #0
    46bc:	d04e      	beq.n	475c <mp_parse+0xfc>
                    goto next_rule;
                } else {
                    backtrack = false;
                }
                for (; i < n; ++i) {
    46be:	9b02      	ldr	r3, [sp, #8]
    46c0:	42a3      	cmp	r3, r4
    46c2:	d235      	bcs.n	4730 <mp_parse+0xd0>
                    uint16_t kind = rule_arg[i] & RULE_ARG_KIND_MASK;
    46c4:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
    46c8:	f402 4170 	and.w	r1, r2, #61440	; 0xf000
                    if (kind == RULE_ARG_TOK) {
    46cc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    46d0:	d112      	bne.n	46f8 <mp_parse+0x98>
                        if (lex->tok_kind == (rule_arg[i] & RULE_ARG_ARG_MASK)) {
    46d2:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    46d6:	f3c2 020b 	ubfx	r2, r2, #0, #12
    46da:	4291      	cmp	r1, r2
    46dc:	d002      	beq.n	46e4 <mp_parse+0x84>
                for (; i < n; ++i) {
    46de:	3301      	adds	r3, #1
    46e0:	9302      	str	r3, [sp, #8]
    46e2:	e7ec      	b.n	46be <mp_parse+0x5e>
                            push_result_token(&parser, rule_id);
    46e4:	4641      	mov	r1, r8
    46e6:	a804      	add	r0, sp, #16
    46e8:	f7ff fd8a 	bl	4200 <push_result_token>
                            mp_lexer_to_next(lex);
    46ec:	4630      	mov	r0, r6
    46ee:	f7ff fa3d 	bl	3b6c <mp_lexer_to_next>
                    backtrack = false;
    46f2:	f04f 0900 	mov.w	r9, #0
                            goto next_rule;
    46f6:	e031      	b.n	475c <mp_parse+0xfc>
                        }
                    } else {
                        assert(kind == RULE_ARG_RULE);
    46f8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    46fc:	d10b      	bne.n	4716 <mp_parse+0xb6>
                        if (i + 1 < n) {
    46fe:	3301      	adds	r3, #1
    4700:	42a3      	cmp	r3, r4
    4702:	d30f      	bcc.n	4724 <mp_parse+0xc4>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
                        }
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of or-rule
    4704:	9b02      	ldr	r3, [sp, #8]
    4706:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
    470a:	a804      	add	r0, sp, #16
    470c:	f7ff fd5a 	bl	41c4 <push_rule_from_arg>
                    backtrack = false;
    4710:	f04f 0900 	mov.w	r9, #0
                        goto next_rule;
    4714:	e022      	b.n	475c <mp_parse+0xfc>
                        assert(kind == RULE_ARG_RULE);
    4716:	4bb5      	ldr	r3, [pc, #724]	; (49ec <mp_parse+0x38c>)
    4718:	4ab5      	ldr	r2, [pc, #724]	; (49f0 <mp_parse+0x390>)
    471a:	f240 318b 	movw	r1, #907	; 0x38b
    471e:	48b5      	ldr	r0, [pc, #724]	; (49f4 <mp_parse+0x394>)
    4720:	f013 ff1c 	bl	1855c <__assert_func>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
    4724:	4642      	mov	r2, r8
    4726:	9903      	ldr	r1, [sp, #12]
    4728:	a804      	add	r0, sp, #16
    472a:	f7ff fd28 	bl	417e <push_rule>
    472e:	e7e9      	b.n	4704 <mp_parse+0xa4>
                    }
                }
                backtrack = true;
    4730:	f04f 0901 	mov.w	r9, #1
    4734:	e012      	b.n	475c <mp_parse+0xfc>
                break;

            case RULE_ACT_AND: {

                // failed, backtrack if we can, else syntax error
                if (backtrack) {
    4736:	f1b9 0f00 	cmp.w	r9, #0
    473a:	d051      	beq.n	47e0 <mp_parse+0x180>
                    assert(i > 0);
    473c:	9a02      	ldr	r2, [sp, #8]
    473e:	2a00      	cmp	r2, #0
    4740:	d03a      	beq.n	47b8 <mp_parse+0x158>
                    if ((rule_arg[i - 1] & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE) {
    4742:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    4746:	3b01      	subs	r3, #1
    4748:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
    474c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4750:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    4754:	d037      	beq.n	47c6 <mp_parse+0x166>
                        // an optional rule that failed, so continue with next arg
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
                        backtrack = false;
                    } else {
                        // a mandatory rule that failed, so propagate backtrack
                        if (i > 1) {
    4756:	2a01      	cmp	r2, #1
    4758:	f200 819e 	bhi.w	4a98 <mp_parse+0x438>
        if (parser.rule_stack_top == 0) {
    475c:	9b05      	ldr	r3, [sp, #20]
    475e:	2b00      	cmp	r3, #0
    4760:	f000 816e 	beq.w	4a40 <mp_parse+0x3e0>
        uint8_t rule_id = pop_rule(&parser, &i, &rule_src_line);
    4764:	aa03      	add	r2, sp, #12
    4766:	a902      	add	r1, sp, #8
    4768:	a804      	add	r0, sp, #16
    476a:	f7ff fc65 	bl	4038 <pop_rule>
    476e:	4680      	mov	r8, r0
        uint8_t rule_act = rule_act_table[rule_id];
    4770:	4ba1      	ldr	r3, [pc, #644]	; (49f8 <mp_parse+0x398>)
    4772:	5c1f      	ldrb	r7, [r3, r0]
        const uint16_t *rule_arg = get_rule_arg(rule_id);
    4774:	f7ff fc52 	bl	401c <get_rule_arg>
    4778:	4605      	mov	r5, r0
        size_t n = rule_act & RULE_ACT_ARG_MASK;
    477a:	f007 040f 	and.w	r4, r7, #15
    477e:	f007 0330 	and.w	r3, r7, #48	; 0x30
        switch (rule_act & RULE_ACT_KIND_MASK) {
    4782:	2b10      	cmp	r3, #16
    4784:	d096      	beq.n	46b4 <mp_parse+0x54>
    4786:	2b20      	cmp	r3, #32
    4788:	d0d5      	beq.n	4736 <mp_parse+0xd6>
                }
                break;
            }

            default: {
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    478a:	2b30      	cmp	r3, #48	; 0x30
    478c:	f040 80d0 	bne.w	4930 <mp_parse+0x2d0>

                // n=2 is: item item*
                // n=1 is: item (sep item)*
                // n=3 is: item (sep item)* [sep]
                bool had_trailing_sep;
                if (backtrack) {
    4790:	f1b9 0f00 	cmp.w	r9, #0
    4794:	f000 80fc 	beq.w	4990 <mp_parse+0x330>
                    list_backtrack:
                    had_trailing_sep = false;
                    if (n == 2) {
    4798:	2c02      	cmp	r4, #2
    479a:	f000 80d0 	beq.w	493e <mp_parse+0x2de>
                        } else {
                            // fail on item, in later rounds; finish with this rule
                            backtrack = false;
                        }
                    } else {
                        if (i == 1) {
    479e:	9b02      	ldr	r3, [sp, #8]
    47a0:	2b01      	cmp	r3, #1
    47a2:	d0db      	beq.n	475c <mp_parse+0xfc>
                            // fail on item, first time round; propagate backtrack
                            goto next_rule;
                        } else if ((i & 1) == 1) {
    47a4:	f013 0f01 	tst.w	r3, #1
    47a8:	f000 8135 	beq.w	4a16 <mp_parse+0x3b6>
                            // fail on item, in later rounds; have eaten tokens so can't backtrack
                            if (n == 3) {
    47ac:	2c03      	cmp	r4, #3
    47ae:	f040 8173 	bne.w	4a98 <mp_parse+0x438>
                                // list allows trailing separator; finish parsing list
                                had_trailing_sep = true;
    47b2:	f04f 0901 	mov.w	r9, #1
    47b6:	e0c8      	b.n	494a <mp_parse+0x2ea>
                    assert(i > 0);
    47b8:	4b90      	ldr	r3, [pc, #576]	; (49fc <mp_parse+0x39c>)
    47ba:	4a8d      	ldr	r2, [pc, #564]	; (49f0 <mp_parse+0x390>)
    47bc:	f240 319a 	movw	r1, #922	; 0x39a
    47c0:	488c      	ldr	r0, [pc, #560]	; (49f4 <mp_parse+0x394>)
    47c2:	f013 fecb 	bl	1855c <__assert_func>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    47c6:	2100      	movs	r1, #0
    47c8:	a804      	add	r0, sp, #16
    47ca:	f7ff fcc0 	bl	414e <push_result_node>
                        backtrack = false;
    47ce:	f04f 0900 	mov.w	r9, #0
    47d2:	e005      	b.n	47e0 <mp_parse+0x180>
                            mp_lexer_to_next(lex);
    47d4:	4630      	mov	r0, r6
    47d6:	f7ff f9c9 	bl	3b6c <mp_lexer_to_next>
                for (; i < n; ++i) {
    47da:	9b02      	ldr	r3, [sp, #8]
    47dc:	3301      	adds	r3, #1
    47de:	9302      	str	r3, [sp, #8]
    47e0:	9b02      	ldr	r3, [sp, #8]
    47e2:	42a3      	cmp	r3, r4
    47e4:	d225      	bcs.n	4832 <mp_parse+0x1d2>
                    if ((rule_arg[i] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    47e6:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
    47ea:	f402 4170 	and.w	r1, r2, #61440	; 0xf000
    47ee:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    47f2:	d111      	bne.n	4818 <mp_parse+0x1b8>
                        mp_token_kind_t tok_kind = rule_arg[i] & RULE_ARG_ARG_MASK;
    47f4:	b2d2      	uxtb	r2, r2
                        if (lex->tok_kind == tok_kind) {
    47f6:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    47fa:	4291      	cmp	r1, r2
    47fc:	d106      	bne.n	480c <mp_parse+0x1ac>
                            if (tok_kind == MP_TOKEN_NAME) {
    47fe:	2a07      	cmp	r2, #7
    4800:	d1e8      	bne.n	47d4 <mp_parse+0x174>
                                push_result_token(&parser, rule_id);
    4802:	4641      	mov	r1, r8
    4804:	a804      	add	r0, sp, #16
    4806:	f7ff fcfb 	bl	4200 <push_result_token>
    480a:	e7e3      	b.n	47d4 <mp_parse+0x174>
                            if (i > 0) {
    480c:	2b00      	cmp	r3, #0
    480e:	f040 8143 	bne.w	4a98 <mp_parse+0x438>
                                backtrack = true;
    4812:	f04f 0901 	mov.w	r9, #1
    4816:	e7a1      	b.n	475c <mp_parse+0xfc>
                        push_rule(&parser, rule_src_line, rule_id, i + 1); // save this and-rule
    4818:	3301      	adds	r3, #1
    481a:	4642      	mov	r2, r8
    481c:	9903      	ldr	r1, [sp, #12]
    481e:	a804      	add	r0, sp, #16
    4820:	f7ff fcad 	bl	417e <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of and-rule
    4824:	9b02      	ldr	r3, [sp, #8]
    4826:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
    482a:	a804      	add	r0, sp, #16
    482c:	f7ff fcca 	bl	41c4 <push_rule_from_arg>
                        goto next_rule;
    4830:	e794      	b.n	475c <mp_parse+0xfc>
                assert(i == n);
    4832:	d108      	bne.n	4846 <mp_parse+0x1e6>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    4834:	9b00      	ldr	r3, [sp, #0]
    4836:	b113      	cbz	r3, 483e <mp_parse+0x1de>
    4838:	f1b8 0f05 	cmp.w	r8, #5
    483c:	d00a      	beq.n	4854 <mp_parse+0x1f4>
                i = 0;
    483e:	2300      	movs	r3, #0
    4840:	9302      	str	r3, [sp, #8]
                size_t num_not_nil = 0;
    4842:	469b      	mov	fp, r3
                for (size_t x = n; x > 0;) {
    4844:	e038      	b.n	48b8 <mp_parse+0x258>
                assert(i == n);
    4846:	4b6e      	ldr	r3, [pc, #440]	; (4a00 <mp_parse+0x3a0>)
    4848:	4a69      	ldr	r2, [pc, #420]	; (49f0 <mp_parse+0x390>)
    484a:	f240 31c7 	movw	r1, #967	; 0x3c7
    484e:	4869      	ldr	r0, [pc, #420]	; (49f4 <mp_parse+0x394>)
    4850:	f013 fe84 	bl	1855c <__assert_func>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    4854:	2100      	movs	r1, #0
    4856:	a804      	add	r0, sp, #16
    4858:	f7ff fc06 	bl	4068 <peek_result>
    485c:	2800      	cmp	r0, #0
    485e:	d1ee      	bne.n	483e <mp_parse+0x1de>
                    mp_parse_node_t p = peek_result(&parser, 1);
    4860:	2101      	movs	r1, #1
    4862:	a804      	add	r0, sp, #16
    4864:	f7ff fc00 	bl	4068 <peek_result>
                    if ((MP_PARSE_NODE_IS_LEAF(p) && !MP_PARSE_NODE_IS_ID(p))
    4868:	f010 0303 	ands.w	r3, r0, #3
    486c:	d010      	beq.n	4890 <mp_parse+0x230>
    486e:	f000 020f 	and.w	r2, r0, #15
    4872:	2a02      	cmp	r2, #2
    4874:	d00c      	beq.n	4890 <mp_parse+0x230>
                        pop_result(&parser); // MP_PARSE_NODE_NULL
    4876:	a804      	add	r0, sp, #16
    4878:	f7ff fc10 	bl	409c <pop_result>
                        pop_result(&parser); // const expression (leaf or RULE_const_object)
    487c:	a804      	add	r0, sp, #16
    487e:	f7ff fc0d 	bl	409c <pop_result>
                        push_result_rule(&parser, rule_src_line, RULE_pass_stmt, 0);
    4882:	2300      	movs	r3, #0
    4884:	2208      	movs	r2, #8
    4886:	9903      	ldr	r1, [sp, #12]
    4888:	a804      	add	r0, sp, #16
    488a:	f7ff fe91 	bl	45b0 <push_result_rule>
                        break;
    488e:	e765      	b.n	475c <mp_parse+0xfc>
                        || MP_PARSE_NODE_IS_STRUCT_KIND(p, RULE_const_object)) {
    4890:	2800      	cmp	r0, #0
    4892:	d0d4      	beq.n	483e <mp_parse+0x1de>
    4894:	2b00      	cmp	r3, #0
    4896:	d1d2      	bne.n	483e <mp_parse+0x1de>
    4898:	7903      	ldrb	r3, [r0, #4]
    489a:	2b35      	cmp	r3, #53	; 0x35
    489c:	d1cf      	bne.n	483e <mp_parse+0x1de>
    489e:	e7ea      	b.n	4876 <mp_parse+0x216>
                        if (peek_result(&parser, i) != MP_PARSE_NODE_NULL) {
    48a0:	f8dd a008 	ldr.w	sl, [sp, #8]
    48a4:	4651      	mov	r1, sl
    48a6:	a804      	add	r0, sp, #16
    48a8:	f7ff fbde 	bl	4068 <peek_result>
    48ac:	b108      	cbz	r0, 48b2 <mp_parse+0x252>
                            num_not_nil += 1;
    48ae:	f10b 0b01 	add.w	fp, fp, #1
                        i += 1;
    48b2:	f10a 0301 	add.w	r3, sl, #1
    48b6:	9302      	str	r3, [sp, #8]
                for (size_t x = n; x > 0;) {
    48b8:	b184      	cbz	r4, 48dc <mp_parse+0x27c>
                    --x;
    48ba:	3c01      	subs	r4, #1
                    if ((rule_arg[x] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    48bc:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    48c0:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
    48c4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    48c8:	d1ea      	bne.n	48a0 <mp_parse+0x240>
                        mp_token_kind_t tok_kind = rule_arg[x] & RULE_ARG_ARG_MASK;
    48ca:	b2db      	uxtb	r3, r3
                        if (tok_kind == MP_TOKEN_NAME) {
    48cc:	2b07      	cmp	r3, #7
    48ce:	d1f3      	bne.n	48b8 <mp_parse+0x258>
                            i += 1;
    48d0:	9b02      	ldr	r3, [sp, #8]
    48d2:	3301      	adds	r3, #1
    48d4:	9302      	str	r3, [sp, #8]
                            num_not_nil += 1;
    48d6:	f10b 0b01 	add.w	fp, fp, #1
    48da:	e7ed      	b.n	48b8 <mp_parse+0x258>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    48dc:	f1bb 0f01 	cmp.w	fp, #1
    48e0:	d009      	beq.n	48f6 <mp_parse+0x296>
                    if (rule_act & RULE_ACT_ADD_BLANK) {
    48e2:	f017 0f80 	tst.w	r7, #128	; 0x80
    48e6:	d11b      	bne.n	4920 <mp_parse+0x2c0>
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    48e8:	9b02      	ldr	r3, [sp, #8]
    48ea:	4642      	mov	r2, r8
    48ec:	9903      	ldr	r1, [sp, #12]
    48ee:	a804      	add	r0, sp, #16
    48f0:	f7ff fe5e 	bl	45b0 <push_result_rule>
    48f4:	e732      	b.n	475c <mp_parse+0xfc>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    48f6:	f017 0f40 	tst.w	r7, #64	; 0x40
    48fa:	d0f2      	beq.n	48e2 <mp_parse+0x282>
                    mp_parse_node_t pn = MP_PARSE_NODE_NULL;
    48fc:	2500      	movs	r5, #0
    48fe:	e000      	b.n	4902 <mp_parse+0x2a2>
                    for (size_t x = 0; x < i; ++x) {
    4900:	3401      	adds	r4, #1
    4902:	9b02      	ldr	r3, [sp, #8]
    4904:	42a3      	cmp	r3, r4
    4906:	d906      	bls.n	4916 <mp_parse+0x2b6>
                        mp_parse_node_t pn2 = pop_result(&parser);
    4908:	a804      	add	r0, sp, #16
    490a:	f7ff fbc7 	bl	409c <pop_result>
                        if (pn2 != MP_PARSE_NODE_NULL) {
    490e:	2800      	cmp	r0, #0
    4910:	d0f6      	beq.n	4900 <mp_parse+0x2a0>
                            pn = pn2;
    4912:	4605      	mov	r5, r0
    4914:	e7f4      	b.n	4900 <mp_parse+0x2a0>
                    push_result_node(&parser, pn);
    4916:	4629      	mov	r1, r5
    4918:	a804      	add	r0, sp, #16
    491a:	f7ff fc18 	bl	414e <push_result_node>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    491e:	e71d      	b.n	475c <mp_parse+0xfc>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    4920:	2100      	movs	r1, #0
    4922:	a804      	add	r0, sp, #16
    4924:	f7ff fc13 	bl	414e <push_result_node>
                        i += 1;
    4928:	9b02      	ldr	r3, [sp, #8]
    492a:	3301      	adds	r3, #1
    492c:	9302      	str	r3, [sp, #8]
    492e:	e7db      	b.n	48e8 <mp_parse+0x288>
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    4930:	4b34      	ldr	r3, [pc, #208]	; (4a04 <mp_parse+0x3a4>)
    4932:	4a2f      	ldr	r2, [pc, #188]	; (49f0 <mp_parse+0x390>)
    4934:	f240 410a 	movw	r1, #1034	; 0x40a
    4938:	482e      	ldr	r0, [pc, #184]	; (49f4 <mp_parse+0x394>)
    493a:	f013 fe0f 	bl	1855c <__assert_func>
                        if (i == 1) {
    493e:	9b02      	ldr	r3, [sp, #8]
    4940:	2b01      	cmp	r3, #1
    4942:	f43f af0b 	beq.w	475c <mp_parse+0xfc>
                    had_trailing_sep = false;
    4946:	f04f 0900 	mov.w	r9, #0
                            push_rule_from_arg(&parser, arg); // push child of list-rule
                            goto next_rule;
                        }
                    }
                }
                assert(i >= 1);
    494a:	9b02      	ldr	r3, [sp, #8]
    494c:	2b00      	cmp	r3, #0
    494e:	d065      	beq.n	4a1c <mp_parse+0x3bc>

                // compute number of elements in list, result in i
                i -= 1;
    4950:	1e5a      	subs	r2, r3, #1
    4952:	9202      	str	r2, [sp, #8]
                if ((n & 1) && (rule_arg[1] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4954:	f017 0f01 	tst.w	r7, #1
    4958:	d005      	beq.n	4966 <mp_parse+0x306>
    495a:	886a      	ldrh	r2, [r5, #2]
    495c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    4960:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    4964:	d061      	beq.n	4a2a <mp_parse+0x3ca>
                    // don't count separators when they are tokens
                    i = (i + 1) / 2;
                }

                if (i == 1) {
    4966:	9b02      	ldr	r3, [sp, #8]
    4968:	2b01      	cmp	r3, #1
    496a:	d161      	bne.n	4a30 <mp_parse+0x3d0>
                    // list matched single item
                    if (had_trailing_sep) {
    496c:	f1b9 0f00 	cmp.w	r9, #0
    4970:	f43f aef4 	beq.w	475c <mp_parse+0xfc>
                        // if there was a trailing separator, make a list of a single item
                        push_result_rule(&parser, rule_src_line, rule_id, i);
    4974:	4642      	mov	r2, r8
    4976:	9903      	ldr	r1, [sp, #12]
    4978:	a804      	add	r0, sp, #16
    497a:	f7ff fe19 	bl	45b0 <push_result_rule>
    497e:	f04f 0900 	mov.w	r9, #0
    4982:	e6eb      	b.n	475c <mp_parse+0xfc>
                                mp_lexer_to_next(lex);
    4984:	4630      	mov	r0, r6
    4986:	f7ff f8f1 	bl	3b6c <mp_lexer_to_next>
                                i += 1;
    498a:	9b02      	ldr	r3, [sp, #8]
    498c:	3301      	adds	r3, #1
    498e:	9302      	str	r3, [sp, #8]
                        size_t arg = rule_arg[i & 1 & n];
    4990:	9b02      	ldr	r3, [sp, #8]
    4992:	ea03 0104 	and.w	r1, r3, r4
    4996:	f001 0101 	and.w	r1, r1, #1
    499a:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
    499e:	4692      	mov	sl, r2
    49a0:	f402 4070 	and.w	r0, r2, #61440	; 0xf000
                        if ((arg & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    49a4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    49a8:	d111      	bne.n	49ce <mp_parse+0x36e>
                            if (lex->tok_kind == (arg & RULE_ARG_ARG_MASK)) {
    49aa:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
    49ae:	f3c2 020b 	ubfx	r2, r2, #0, #12
    49b2:	4290      	cmp	r0, r2
    49b4:	d106      	bne.n	49c4 <mp_parse+0x364>
                                if (i & 1 & n) {
    49b6:	2900      	cmp	r1, #0
    49b8:	d1e4      	bne.n	4984 <mp_parse+0x324>
                                    push_result_token(&parser, rule_id);
    49ba:	4641      	mov	r1, r8
    49bc:	a804      	add	r0, sp, #16
    49be:	f7ff fc1f 	bl	4200 <push_result_token>
    49c2:	e7df      	b.n	4984 <mp_parse+0x324>
                                i += 1;
    49c4:	3301      	adds	r3, #1
    49c6:	9302      	str	r3, [sp, #8]
                                backtrack = true;
    49c8:	f04f 0901 	mov.w	r9, #1
                                goto list_backtrack;
    49cc:	e6e4      	b.n	4798 <mp_parse+0x138>
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    49ce:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    49d2:	d119      	bne.n	4a08 <mp_parse+0x3a8>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this list-rule
    49d4:	3301      	adds	r3, #1
    49d6:	4642      	mov	r2, r8
    49d8:	9903      	ldr	r1, [sp, #12]
    49da:	a804      	add	r0, sp, #16
    49dc:	f7ff fbcf 	bl	417e <push_rule>
                            push_rule_from_arg(&parser, arg); // push child of list-rule
    49e0:	4651      	mov	r1, sl
    49e2:	a804      	add	r0, sp, #16
    49e4:	f7ff fbee 	bl	41c4 <push_rule_from_arg>
                            goto next_rule;
    49e8:	e6b8      	b.n	475c <mp_parse+0xfc>
    49ea:	bf00      	nop
    49ec:	00023ac0 	.word	0x00023ac0
    49f0:	00023a98 	.word	0x00023a98
    49f4:	00023be8 	.word	0x00023be8
    49f8:	00023c7c 	.word	0x00023c7c
    49fc:	00023ad8 	.word	0x00023ad8
    4a00:	00023ae0 	.word	0x00023ae0
    4a04:	00023ae8 	.word	0x00023ae8
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    4a08:	4b37      	ldr	r3, [pc, #220]	; (4ae8 <mp_parse+0x488>)
    4a0a:	4a38      	ldr	r2, [pc, #224]	; (4aec <mp_parse+0x48c>)
    4a0c:	f240 4142 	movw	r1, #1090	; 0x442
    4a10:	4837      	ldr	r0, [pc, #220]	; (4af0 <mp_parse+0x490>)
    4a12:	f013 fda3 	bl	1855c <__assert_func>
                    had_trailing_sep = false;
    4a16:	f04f 0900 	mov.w	r9, #0
    4a1a:	e796      	b.n	494a <mp_parse+0x2ea>
                assert(i >= 1);
    4a1c:	4b35      	ldr	r3, [pc, #212]	; (4af4 <mp_parse+0x494>)
    4a1e:	4a33      	ldr	r2, [pc, #204]	; (4aec <mp_parse+0x48c>)
    4a20:	f240 4149 	movw	r1, #1097	; 0x449
    4a24:	4832      	ldr	r0, [pc, #200]	; (4af0 <mp_parse+0x490>)
    4a26:	f013 fd99 	bl	1855c <__assert_func>
                    i = (i + 1) / 2;
    4a2a:	085b      	lsrs	r3, r3, #1
    4a2c:	9302      	str	r3, [sp, #8]
    4a2e:	e79a      	b.n	4966 <mp_parse+0x306>
                    } else {
                        // just leave single item on stack (ie don't wrap in a list)
                    }
                } else {
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    4a30:	4642      	mov	r2, r8
    4a32:	9903      	ldr	r1, [sp, #12]
    4a34:	a804      	add	r0, sp, #16
    4a36:	f7ff fdbb 	bl	45b0 <push_result_rule>
    4a3a:	f04f 0900 	mov.w	r9, #0
    for (;;) {
    4a3e:	e68d      	b.n	475c <mp_parse+0xfc>
    #if MICROPY_COMP_CONST
    mp_map_deinit(&parser.consts);
    #endif

    // truncate final chunk and link into chain of chunks
    if (parser.cur_chunk != NULL) {
    4a40:	980d      	ldr	r0, [sp, #52]	; 0x34
    4a42:	b160      	cbz	r0, 4a5e <mp_parse+0x3fe>
        (void)m_renew_maybe(byte, parser.cur_chunk,
    4a44:	6841      	ldr	r1, [r0, #4]
    4a46:	2200      	movs	r2, #0
    4a48:	3108      	adds	r1, #8
    4a4a:	f7fb ff5c 	bl	906 <m_realloc_maybe>
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->alloc,
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->union_.used,
            false);
        parser.cur_chunk->alloc = parser.cur_chunk->union_.used;
    4a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a50:	685a      	ldr	r2, [r3, #4]
    4a52:	601a      	str	r2, [r3, #0]
        parser.cur_chunk->union_.next = parser.tree.chunk;
    4a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4a58:	605a      	str	r2, [r3, #4]
        parser.tree.chunk = parser.cur_chunk;
    4a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a5c:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (
        lex->tok_kind != MP_TOKEN_END // check we are at the end of the token stream
    4a5e:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    if (
    4a62:	b9cb      	cbnz	r3, 4a98 <mp_parse+0x438>
        || parser.result_stack_top == 0 // check that we got a node (can fail on empty input)
    4a64:	9b08      	ldr	r3, [sp, #32]
    4a66:	b1bb      	cbz	r3, 4a98 <mp_parse+0x438>
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
        nlr_raise(exc);
    }

    // get the root parse node that we created
    assert(parser.result_stack_top == 1);
    4a68:	2b01      	cmp	r3, #1
    4a6a:	d135      	bne.n	4ad8 <mp_parse+0x478>
    parser.tree.root = parser.result_stack[0];
    4a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	930b      	str	r3, [sp, #44]	; 0x2c

    // free the memory that we don't need anymore
    m_del(rule_stack_t, parser.rule_stack, parser.rule_stack_alloc);
    4a72:	9806      	ldr	r0, [sp, #24]
    4a74:	f7fb ff4b 	bl	90e <m_free>
    m_del(mp_parse_node_t, parser.result_stack, parser.result_stack_alloc);
    4a78:	9809      	ldr	r0, [sp, #36]	; 0x24
    4a7a:	f7fb ff48 	bl	90e <m_free>

    // we also free the lexer on behalf of the caller
    mp_lexer_free(lex);
    4a7e:	4630      	mov	r0, r6
    4a80:	f7ff faba 	bl	3ff8 <mp_lexer_free>

    return parser.tree;
    4a84:	ab0b      	add	r3, sp, #44	; 0x2c
    4a86:	e893 0003 	ldmia.w	r3, {r0, r1}
    4a8a:	9b01      	ldr	r3, [sp, #4]
    4a8c:	e9c3 0100 	strd	r0, r1, [r3]
}
    4a90:	4618      	mov	r0, r3
    4a92:	b00f      	add	sp, #60	; 0x3c
    4a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (lex->tok_kind == MP_TOKEN_INDENT) {
    4a98:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    4a9c:	2b05      	cmp	r3, #5
    4a9e:	d00f      	beq.n	4ac0 <mp_parse+0x460>
        } else if (lex->tok_kind == MP_TOKEN_DEDENT_MISMATCH) {
    4aa0:	2b02      	cmp	r3, #2
    4aa2:	d013      	beq.n	4acc <mp_parse+0x46c>
            exc = mp_obj_new_exception_msg(&mp_type_SyntaxError,
    4aa4:	4914      	ldr	r1, [pc, #80]	; (4af8 <mp_parse+0x498>)
    4aa6:	4815      	ldr	r0, [pc, #84]	; (4afc <mp_parse+0x49c>)
    4aa8:	f008 f880 	bl	cbac <mp_obj_new_exception_msg>
    4aac:	4604      	mov	r4, r0
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    4aae:	2300      	movs	r3, #0
    4ab0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    4ab2:	6831      	ldr	r1, [r6, #0]
    4ab4:	4620      	mov	r0, r4
    4ab6:	f008 f8cb 	bl	cc50 <mp_obj_exception_add_traceback>
        nlr_raise(exc);
    4aba:	4620      	mov	r0, r4
    4abc:	f7fb fee0 	bl	880 <nlr_jump>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4ac0:	490f      	ldr	r1, [pc, #60]	; (4b00 <mp_parse+0x4a0>)
    4ac2:	4810      	ldr	r0, [pc, #64]	; (4b04 <mp_parse+0x4a4>)
    4ac4:	f008 f872 	bl	cbac <mp_obj_new_exception_msg>
    4ac8:	4604      	mov	r4, r0
    4aca:	e7f0      	b.n	4aae <mp_parse+0x44e>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4acc:	490e      	ldr	r1, [pc, #56]	; (4b08 <mp_parse+0x4a8>)
    4ace:	480d      	ldr	r0, [pc, #52]	; (4b04 <mp_parse+0x4a4>)
    4ad0:	f008 f86c 	bl	cbac <mp_obj_new_exception_msg>
    4ad4:	4604      	mov	r4, r0
    4ad6:	e7ea      	b.n	4aae <mp_parse+0x44e>
    assert(parser.result_stack_top == 1);
    4ad8:	4b0c      	ldr	r3, [pc, #48]	; (4b0c <mp_parse+0x4ac>)
    4ada:	4a04      	ldr	r2, [pc, #16]	; (4aec <mp_parse+0x48c>)
    4adc:	f44f 6191 	mov.w	r1, #1160	; 0x488
    4ae0:	4803      	ldr	r0, [pc, #12]	; (4af0 <mp_parse+0x490>)
    4ae2:	f013 fd3b 	bl	1855c <__assert_func>
    4ae6:	bf00      	nop
    4ae8:	00023b1c 	.word	0x00023b1c
    4aec:	00023a98 	.word	0x00023a98
    4af0:	00023be8 	.word	0x00023be8
    4af4:	00023b48 	.word	0x00023b48
    4af8:	00023b98 	.word	0x00023b98
    4afc:	00026c0c 	.word	0x00026c0c
    4b00:	00023b50 	.word	0x00023b50
    4b04:	0002693c 	.word	0x0002693c
    4b08:	00023b64 	.word	0x00023b64
    4b0c:	00023ba8 	.word	0x00023ba8

00004b10 <mp_parse_tree_clear>:

void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    mp_parse_chunk_t *chunk = tree->chunk;
    4b10:	6840      	ldr	r0, [r0, #4]
    while (chunk != NULL) {
    4b12:	b138      	cbz	r0, 4b24 <mp_parse_tree_clear+0x14>
void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    4b14:	b510      	push	{r4, lr}
        mp_parse_chunk_t *next = chunk->union_.next;
    4b16:	6844      	ldr	r4, [r0, #4]
        m_del(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc);
    4b18:	f7fb fef9 	bl	90e <m_free>
        chunk = next;
    4b1c:	4620      	mov	r0, r4
    while (chunk != NULL) {
    4b1e:	2c00      	cmp	r4, #0
    4b20:	d1f9      	bne.n	4b16 <mp_parse_tree_clear+0x6>
    }
}
    4b22:	bd10      	pop	{r4, pc}
    4b24:	4770      	bx	lr
	...

00004b28 <scope_new>:
    [SCOPE_DICT_COMP] = MP_QSTR__lt_dictcomp_gt_,
    [SCOPE_SET_COMP] = MP_QSTR__lt_setcomp_gt_,
    [SCOPE_GEN_EXPR] = MP_QSTR__lt_genexpr_gt_,
};

scope_t *scope_new(scope_kind_t kind, mp_parse_node_t pn, qstr source_file, mp_uint_t emit_options) {
    4b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b2c:	4605      	mov	r5, r0
    4b2e:	460e      	mov	r6, r1
    4b30:	4617      	mov	r7, r2
    4b32:	4698      	mov	r8, r3
    scope_t *scope = m_new0(scope_t, 1);
    4b34:	2030      	movs	r0, #48	; 0x30
    4b36:	f7fb fed4 	bl	8e2 <m_malloc0>
    4b3a:	4604      	mov	r4, r0
    scope->kind = kind;
    4b3c:	7005      	strb	r5, [r0, #0]
    scope->pn = pn;
    4b3e:	60c6      	str	r6, [r0, #12]
    scope->source_file = source_file;
    4b40:	8207      	strh	r7, [r0, #16]
    if (kind == SCOPE_FUNCTION || kind == SCOPE_CLASS) {
    4b42:	2d07      	cmp	r5, #7
    4b44:	d005      	beq.n	4b52 <scope_new+0x2a>
    4b46:	2d01      	cmp	r5, #1
    4b48:	d003      	beq.n	4b52 <scope_new+0x2a>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    } else {
        scope->simple_name = scope_simple_name_table[kind];
    4b4a:	4b0f      	ldr	r3, [pc, #60]	; (4b88 <scope_new+0x60>)
    4b4c:	5d5b      	ldrb	r3, [r3, r5]
    4b4e:	8243      	strh	r3, [r0, #18]
    4b50:	e006      	b.n	4b60 <scope_new+0x38>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4b52:	b19e      	cbz	r6, 4b7c <scope_new+0x54>
    4b54:	f016 0f03 	tst.w	r6, #3
    4b58:	d110      	bne.n	4b7c <scope_new+0x54>
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    4b5a:	68b3      	ldr	r3, [r6, #8]
    4b5c:	091b      	lsrs	r3, r3, #4
    4b5e:	8263      	strh	r3, [r4, #18]
    }
    scope->raw_code = mp_emit_glue_new_raw_code();
    4b60:	f004 fbc2 	bl	92e8 <mp_emit_glue_new_raw_code>
    4b64:	6160      	str	r0, [r4, #20]
    scope->emit_options = emit_options;
    4b66:	f884 8019 	strb.w	r8, [r4, #25]
    scope->id_info_alloc = MICROPY_ALLOC_SCOPE_ID_INIT;
    4b6a:	2304      	movs	r3, #4
    4b6c:	84e3      	strh	r3, [r4, #38]	; 0x26
    scope->id_info = m_new(id_info_t, scope->id_info_alloc);
    4b6e:	2020      	movs	r0, #32
    4b70:	f7fb fea4 	bl	8bc <m_malloc>
    4b74:	62e0      	str	r0, [r4, #44]	; 0x2c

    return scope;
}
    4b76:	4620      	mov	r0, r4
    4b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4b7c:	4b03      	ldr	r3, [pc, #12]	; (4b8c <scope_new+0x64>)
    4b7e:	4a04      	ldr	r2, [pc, #16]	; (4b90 <scope_new+0x68>)
    4b80:	2131      	movs	r1, #49	; 0x31
    4b82:	4804      	ldr	r0, [pc, #16]	; (4b94 <scope_new+0x6c>)
    4b84:	f013 fcea 	bl	1855c <__assert_func>
    4b88:	000241d8 	.word	0x000241d8
    4b8c:	000241a8 	.word	0x000241a8
    4b90:	00024114 	.word	0x00024114
    4b94:	000241c4 	.word	0x000241c4

00004b98 <scope_free>:

void scope_free(scope_t *scope) {
    4b98:	b510      	push	{r4, lr}
    4b9a:	4604      	mov	r4, r0
    m_del(id_info_t, scope->id_info, scope->id_info_alloc);
    4b9c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4b9e:	f7fb feb6 	bl	90e <m_free>
    m_del(scope_t, scope, 1);
    4ba2:	4620      	mov	r0, r4
    4ba4:	f7fb feb3 	bl	90e <m_free>
}
    4ba8:	bd10      	pop	{r4, pc}

00004baa <scope_find>:
    *added = true;
    return id_info;
}

id_info_t *scope_find(scope_t *scope, qstr qst) {
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4baa:	2200      	movs	r2, #0
    4bac:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    4bae:	4293      	cmp	r3, r2
    4bb0:	d90f      	bls.n	4bd2 <scope_find+0x28>
id_info_t *scope_find(scope_t *scope, qstr qst) {
    4bb2:	b410      	push	{r4}
        if (scope->id_info[i].qst == qst) {
    4bb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4bba:	685c      	ldr	r4, [r3, #4]
    4bbc:	428c      	cmp	r4, r1
    4bbe:	d004      	beq.n	4bca <scope_find+0x20>
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4bc0:	3201      	adds	r2, #1
    4bc2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    4bc4:	4293      	cmp	r3, r2
    4bc6:	d8f5      	bhi.n	4bb4 <scope_find+0xa>
            return &scope->id_info[i];
        }
    }
    return NULL;
    4bc8:	2300      	movs	r3, #0
}
    4bca:	4618      	mov	r0, r3
    4bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
    4bd0:	4770      	bx	lr
    return NULL;
    4bd2:	2300      	movs	r3, #0
}
    4bd4:	4618      	mov	r0, r3
    4bd6:	4770      	bx	lr

00004bd8 <scope_find_or_add_id>:
id_info_t *scope_find_or_add_id(scope_t *scope, qstr qst, bool *added) {
    4bd8:	b570      	push	{r4, r5, r6, lr}
    4bda:	4604      	mov	r4, r0
    4bdc:	460e      	mov	r6, r1
    4bde:	4615      	mov	r5, r2
    id_info_t *id_info = scope_find(scope, qst);
    4be0:	f7ff ffe3 	bl	4baa <scope_find>
    if (id_info != NULL) {
    4be4:	b120      	cbz	r0, 4bf0 <scope_find_or_add_id+0x18>
    4be6:	4603      	mov	r3, r0
        *added = false;
    4be8:	2200      	movs	r2, #0
    4bea:	702a      	strb	r2, [r5, #0]
}
    4bec:	4618      	mov	r0, r3
    4bee:	bd70      	pop	{r4, r5, r6, pc}
    if (scope->id_info_len >= scope->id_info_alloc) {
    4bf0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4bf2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    4bf4:	428b      	cmp	r3, r1
    4bf6:	d20e      	bcs.n	4c16 <scope_find_or_add_id+0x3e>
    id_info = &scope->id_info[scope->id_info_len++];
    4bf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4bfa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    4bfc:	1c4b      	adds	r3, r1, #1
    4bfe:	8523      	strh	r3, [r4, #40]	; 0x28
    4c00:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    id_info->kind = 0;
    4c04:	2200      	movs	r2, #0
    4c06:	f800 2031 	strb.w	r2, [r0, r1, lsl #3]
    id_info->flags = 0;
    4c0a:	705a      	strb	r2, [r3, #1]
    id_info->local_num = 0;
    4c0c:	805a      	strh	r2, [r3, #2]
    id_info->qst = qst;
    4c0e:	605e      	str	r6, [r3, #4]
    *added = true;
    4c10:	2201      	movs	r2, #1
    4c12:	702a      	strb	r2, [r5, #0]
    return id_info;
    4c14:	e7ea      	b.n	4bec <scope_find_or_add_id+0x14>
        scope->id_info = m_renew(id_info_t, scope->id_info, scope->id_info_alloc, scope->id_info_alloc + MICROPY_ALLOC_SCOPE_ID_INC);
    4c16:	3106      	adds	r1, #6
    4c18:	00c9      	lsls	r1, r1, #3
    4c1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4c1c:	f7fb fe65 	bl	8ea <m_realloc>
    4c20:	62e0      	str	r0, [r4, #44]	; 0x2c
        scope->id_info_alloc += MICROPY_ALLOC_SCOPE_ID_INC;
    4c22:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    4c24:	3306      	adds	r3, #6
    4c26:	84e3      	strh	r3, [r4, #38]	; 0x26
    4c28:	e7e6      	b.n	4bf8 <scope_find_or_add_id+0x20>
	...

00004c2c <scope_close_over_in_parents>:
        scope = scope->parent;
    }
    return scope_find(scope, qst);
}

STATIC void scope_close_over_in_parents(scope_t *scope, qstr qst) {
    4c2c:	b530      	push	{r4, r5, lr}
    4c2e:	b083      	sub	sp, #12
    4c30:	460d      	mov	r5, r1
    assert(scope->parent != NULL); // we should have at least 1 parent
    4c32:	6844      	ldr	r4, [r0, #4]
    4c34:	b174      	cbz	r4, 4c54 <scope_close_over_in_parents+0x28>
    for (scope_t *s = scope->parent;; s = s->parent) {
        assert(s->parent != NULL); // we should not get to the outer scope
    4c36:	6863      	ldr	r3, [r4, #4]
    4c38:	b193      	cbz	r3, 4c60 <scope_close_over_in_parents+0x34>
        bool added;
        id_info_t *id = scope_find_or_add_id(s, qst, &added);
    4c3a:	f10d 0207 	add.w	r2, sp, #7
    4c3e:	4629      	mov	r1, r5
    4c40:	4620      	mov	r0, r4
    4c42:	f7ff ffc9 	bl	4bd8 <scope_find_or_add_id>
        if (added) {
    4c46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4c4a:	b17b      	cbz	r3, 4c6c <scope_close_over_in_parents+0x40>
            // variable not previously declared in this scope, so declare it as free and keep searching parents
            id->kind = ID_INFO_KIND_FREE;
    4c4c:	2304      	movs	r3, #4
    4c4e:	7003      	strb	r3, [r0, #0]
    for (scope_t *s = scope->parent;; s = s->parent) {
    4c50:	6864      	ldr	r4, [r4, #4]
    4c52:	e7f0      	b.n	4c36 <scope_close_over_in_parents+0xa>
    assert(scope->parent != NULL); // we should have at least 1 parent
    4c54:	4b0e      	ldr	r3, [pc, #56]	; (4c90 <scope_close_over_in_parents+0x64>)
    4c56:	4a0f      	ldr	r2, [pc, #60]	; (4c94 <scope_close_over_in_parents+0x68>)
    4c58:	216e      	movs	r1, #110	; 0x6e
    4c5a:	480f      	ldr	r0, [pc, #60]	; (4c98 <scope_close_over_in_parents+0x6c>)
    4c5c:	f013 fc7e 	bl	1855c <__assert_func>
        assert(s->parent != NULL); // we should not get to the outer scope
    4c60:	4b0e      	ldr	r3, [pc, #56]	; (4c9c <scope_close_over_in_parents+0x70>)
    4c62:	4a0c      	ldr	r2, [pc, #48]	; (4c94 <scope_close_over_in_parents+0x68>)
    4c64:	2170      	movs	r1, #112	; 0x70
    4c66:	480c      	ldr	r0, [pc, #48]	; (4c98 <scope_close_over_in_parents+0x6c>)
    4c68:	f013 fc78 	bl	1855c <__assert_func>
        } else {
            // variable is declared in this scope, so finish
            if (id->kind == ID_INFO_KIND_LOCAL) {
    4c6c:	7803      	ldrb	r3, [r0, #0]
    4c6e:	2b02      	cmp	r3, #2
    4c70:	d005      	beq.n	4c7e <scope_close_over_in_parents+0x52>
                // variable local to this scope, close it over
                id->kind = ID_INFO_KIND_CELL;
            } else {
                // ID_INFO_KIND_FREE: variable already closed over in a parent scope
                // ID_INFO_KIND_CELL: variable already closed over in this scope
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4c72:	3b03      	subs	r3, #3
    4c74:	b2db      	uxtb	r3, r3
    4c76:	2b01      	cmp	r3, #1
    4c78:	d804      	bhi.n	4c84 <scope_close_over_in_parents+0x58>
            }
            return;
        }
    }
}
    4c7a:	b003      	add	sp, #12
    4c7c:	bd30      	pop	{r4, r5, pc}
                id->kind = ID_INFO_KIND_CELL;
    4c7e:	2303      	movs	r3, #3
    4c80:	7003      	strb	r3, [r0, #0]
    4c82:	e7fa      	b.n	4c7a <scope_close_over_in_parents+0x4e>
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4c84:	4b06      	ldr	r3, [pc, #24]	; (4ca0 <scope_close_over_in_parents+0x74>)
    4c86:	4a03      	ldr	r2, [pc, #12]	; (4c94 <scope_close_over_in_parents+0x68>)
    4c88:	217e      	movs	r1, #126	; 0x7e
    4c8a:	4803      	ldr	r0, [pc, #12]	; (4c98 <scope_close_over_in_parents+0x6c>)
    4c8c:	f013 fc66 	bl	1855c <__assert_func>
    4c90:	0002413c 	.word	0x0002413c
    4c94:	00024120 	.word	0x00024120
    4c98:	000241c4 	.word	0x000241c4
    4c9c:	00024154 	.word	0x00024154
    4ca0:	00024168 	.word	0x00024168

00004ca4 <scope_find_global>:
id_info_t *scope_find_global(scope_t *scope, qstr qst) {
    4ca4:	b508      	push	{r3, lr}
    while (scope->parent != NULL) {
    4ca6:	e000      	b.n	4caa <scope_find_global+0x6>
        scope = scope->parent;
    4ca8:	4618      	mov	r0, r3
    while (scope->parent != NULL) {
    4caa:	6843      	ldr	r3, [r0, #4]
    4cac:	2b00      	cmp	r3, #0
    4cae:	d1fb      	bne.n	4ca8 <scope_find_global+0x4>
    return scope_find(scope, qst);
    4cb0:	f7ff ff7b 	bl	4baa <scope_find>
}
    4cb4:	bd08      	pop	{r3, pc}

00004cb6 <scope_find_local_and_close_over>:

void scope_find_local_and_close_over(scope_t *scope, id_info_t *id, qstr qst) {
    4cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cb8:	4606      	mov	r6, r0
    4cba:	460f      	mov	r7, r1
    4cbc:	4615      	mov	r5, r2
    if (scope->parent != NULL) {
    4cbe:	6843      	ldr	r3, [r0, #4]
    4cc0:	b16b      	cbz	r3, 4cde <scope_find_local_and_close_over+0x28>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4cc2:	685c      	ldr	r4, [r3, #4]
    4cc4:	b15c      	cbz	r4, 4cde <scope_find_local_and_close_over+0x28>
            id_info_t *id2 = scope_find(s, qst);
    4cc6:	4629      	mov	r1, r5
    4cc8:	4618      	mov	r0, r3
    4cca:	f7ff ff6e 	bl	4baa <scope_find>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4cce:	4623      	mov	r3, r4
            if (id2 != NULL) {
    4cd0:	2800      	cmp	r0, #0
    4cd2:	d0f6      	beq.n	4cc2 <scope_find_local_and_close_over+0xc>
                if (id2->kind == ID_INFO_KIND_LOCAL || id2->kind == ID_INFO_KIND_CELL || id2->kind == ID_INFO_KIND_FREE) {
    4cd4:	7803      	ldrb	r3, [r0, #0]
    4cd6:	3b02      	subs	r3, #2
    4cd8:	b2db      	uxtb	r3, r3
    4cda:	2b02      	cmp	r3, #2
    4cdc:	d902      	bls.n	4ce4 <scope_find_local_and_close_over+0x2e>
                }
                break;
            }
        }
    }
    id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    4cde:	2300      	movs	r3, #0
    4ce0:	703b      	strb	r3, [r7, #0]
}
    4ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    id->kind = ID_INFO_KIND_FREE;
    4ce4:	2304      	movs	r3, #4
    4ce6:	703b      	strb	r3, [r7, #0]
                    scope_close_over_in_parents(scope, qst);
    4ce8:	4629      	mov	r1, r5
    4cea:	4630      	mov	r0, r6
    4cec:	f7ff ff9e 	bl	4c2c <scope_close_over_in_parents>
                    return;
    4cf0:	e7f7      	b.n	4ce2 <scope_find_local_and_close_over+0x2c>

00004cf2 <compile_error_set_line>:
    #endif
} compiler_t;

STATIC void compile_error_set_line(compiler_t *comp, mp_parse_node_t pn) {
    // if the line of the error is unknown then try to update it from the pn
    if (comp->compile_error_line == 0 && MP_PARSE_NODE_IS_STRUCT(pn)) {
    4cf2:	68c3      	ldr	r3, [r0, #12]
    4cf4:	b92b      	cbnz	r3, 4d02 <compile_error_set_line+0x10>
    4cf6:	b121      	cbz	r1, 4d02 <compile_error_set_line+0x10>
    4cf8:	f011 0f03 	tst.w	r1, #3
    4cfc:	d101      	bne.n	4d02 <compile_error_set_line+0x10>
        comp->compile_error_line = ((mp_parse_node_struct_t*)pn)->source_line;
    4cfe:	680b      	ldr	r3, [r1, #0]
    4d00:	60c3      	str	r3, [r0, #12]
    }
}
    4d02:	4770      	bx	lr

00004d04 <comp_next_label>:
STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra);
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind);
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn);

STATIC uint comp_next_label(compiler_t *comp) {
    return comp->next_label++;
    4d04:	6903      	ldr	r3, [r0, #16]
    4d06:	1c5a      	adds	r2, r3, #1
    4d08:	6102      	str	r2, [r0, #16]
}
    4d0a:	4618      	mov	r0, r3
    4d0c:	4770      	bx	lr

00004d0e <compile_increase_except_level>:

STATIC void compile_increase_except_level(compiler_t *comp) {
    comp->cur_except_level += 1;
    4d0e:	8b83      	ldrh	r3, [r0, #28]
    4d10:	3301      	adds	r3, #1
    4d12:	b29b      	uxth	r3, r3
    4d14:	8383      	strh	r3, [r0, #28]
    if (comp->cur_except_level > comp->scope_cur->exc_stack_size) {
    4d16:	6a42      	ldr	r2, [r0, #36]	; 0x24
    4d18:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    4d1a:	428b      	cmp	r3, r1
    4d1c:	d900      	bls.n	4d20 <compile_increase_except_level+0x12>
        comp->scope_cur->exc_stack_size = comp->cur_except_level;
    4d1e:	8493      	strh	r3, [r2, #36]	; 0x24
    }
}
    4d20:	4770      	bx	lr

00004d22 <apply_to_single_or_list>:
    return scope;
}

typedef void (*apply_list_fun_t)(compiler_t *comp, mp_parse_node_t pn);

STATIC void apply_to_single_or_list(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_list_kind, apply_list_fun_t f) {
    4d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d26:	4605      	mov	r5, r0
    4d28:	461c      	mov	r4, r3
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4d2a:	460b      	mov	r3, r1
    4d2c:	b139      	cbz	r1, 4d3e <apply_to_single_or_list+0x1c>
    4d2e:	f011 0f03 	tst.w	r1, #3
    4d32:	d104      	bne.n	4d3e <apply_to_single_or_list+0x1c>
    4d34:	4688      	mov	r8, r1
    4d36:	684f      	ldr	r7, [r1, #4]
    4d38:	b2f9      	uxtb	r1, r7
    4d3a:	4291      	cmp	r1, r2
    4d3c:	d005      	beq.n	4d4a <apply_to_single_or_list+0x28>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
        for (int i = 0; i < num_nodes; i++) {
            f(comp, pns->nodes[i]);
        }
    } else if (!MP_PARSE_NODE_IS_NULL(pn)) {
    4d3e:	b113      	cbz	r3, 4d46 <apply_to_single_or_list+0x24>
        f(comp, pn);
    4d40:	4619      	mov	r1, r3
    4d42:	4628      	mov	r0, r5
    4d44:	47a0      	blx	r4
    }
}
    4d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4d4a:	0a3f      	lsrs	r7, r7, #8
        for (int i = 0; i < num_nodes; i++) {
    4d4c:	2600      	movs	r6, #0
    4d4e:	e005      	b.n	4d5c <apply_to_single_or_list+0x3a>
            f(comp, pns->nodes[i]);
    4d50:	1cb3      	adds	r3, r6, #2
    4d52:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    4d56:	4628      	mov	r0, r5
    4d58:	47a0      	blx	r4
        for (int i = 0; i < num_nodes; i++) {
    4d5a:	3601      	adds	r6, #1
    4d5c:	42be      	cmp	r6, r7
    4d5e:	dbf7      	blt.n	4d50 <apply_to_single_or_list+0x2e>
    4d60:	e7f1      	b.n	4d46 <apply_to_single_or_list+0x24>
	...

00004d64 <compile_del_stmt>:

cannot_delete:
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
}

STATIC void compile_del_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    4d64:	b508      	push	{r3, lr}
    apply_to_single_or_list(comp, pns->nodes[0], PN_exprlist, c_del_stmt);
    4d66:	4b03      	ldr	r3, [pc, #12]	; (4d74 <compile_del_stmt+0x10>)
    4d68:	2290      	movs	r2, #144	; 0x90
    4d6a:	6889      	ldr	r1, [r1, #8]
    4d6c:	f7ff ffd9 	bl	4d22 <apply_to_single_or_list>
}
    4d70:	bd08      	pop	{r3, pc}
    4d72:	bf00      	nop
    4d74:	00007a6d 	.word	0x00007a6d

00004d78 <compile_import_name>:
    qstr q_base;
    do_import_name(comp, pn, &q_base);
    compile_store_id(comp, q_base);
}

STATIC void compile_import_name(compiler_t *comp, mp_parse_node_struct_t *pns) {
    4d78:	b508      	push	{r3, lr}
    apply_to_single_or_list(comp, pns->nodes[0], PN_dotted_as_names, compile_dotted_as_name);
    4d7a:	4b03      	ldr	r3, [pc, #12]	; (4d88 <compile_import_name+0x10>)
    4d7c:	2265      	movs	r2, #101	; 0x65
    4d7e:	6889      	ldr	r1, [r1, #8]
    4d80:	f7ff ffcf 	bl	4d22 <apply_to_single_or_list>
}
    4d84:	bd08      	pop	{r3, pc}
    4d86:	bf00      	nop
    4d88:	000079ad 	.word	0x000079ad

00004d8c <get_const_object>:
    // nodes are 32-bit pointers, but need to extract 64-bit object
    return (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
    #else
    return (mp_obj_t)pns->nodes[0];
    #endif
}
    4d8c:	6880      	ldr	r0, [r0, #8]
    4d8e:	4770      	bx	lr

00004d90 <scope_new_and_link>:
STATIC scope_t *scope_new_and_link(compiler_t *comp, scope_kind_t kind, mp_parse_node_t pn, uint emit_options) {
    4d90:	b510      	push	{r4, lr}
    4d92:	4604      	mov	r4, r0
    4d94:	4608      	mov	r0, r1
    4d96:	4611      	mov	r1, r2
    scope_t *scope = scope_new(kind, pn, comp->source_file, emit_options);
    4d98:	6822      	ldr	r2, [r4, #0]
    4d9a:	f7ff fec5 	bl	4b28 <scope_new>
    scope->parent = comp->scope_cur;
    4d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4da0:	6043      	str	r3, [r0, #4]
    scope->next = NULL;
    4da2:	2300      	movs	r3, #0
    4da4:	6083      	str	r3, [r0, #8]
    if (comp->scope_head == NULL) {
    4da6:	6a22      	ldr	r2, [r4, #32]
    4da8:	b912      	cbnz	r2, 4db0 <scope_new_and_link+0x20>
        comp->scope_head = scope;
    4daa:	6220      	str	r0, [r4, #32]
    4dac:	e004      	b.n	4db8 <scope_new_and_link+0x28>
            s = s->next;
    4dae:	461a      	mov	r2, r3
        while (s->next != NULL) {
    4db0:	6893      	ldr	r3, [r2, #8]
    4db2:	2b00      	cmp	r3, #0
    4db4:	d1fb      	bne.n	4dae <scope_new_and_link+0x1e>
        s->next = scope;
    4db6:	6090      	str	r0, [r2, #8]
}
    4db8:	bd10      	pop	{r4, pc}
	...

00004dbc <scope_compute_things>:
        comp->compile_error_line = pns->source_line;
    }
}
#endif

STATIC void scope_compute_things(scope_t *scope) {
    4dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dbe:	b083      	sub	sp, #12
    4dc0:	4602      	mov	r2, r0
    // in MicroPython we put the *x parameter after all other parameters (except **y)
    if (scope->scope_flags & MP_SCOPE_FLAG_VARARGS) {
    4dc2:	7e03      	ldrb	r3, [r0, #24]
    4dc4:	f013 0f01 	tst.w	r3, #1
    4dc8:	d011      	beq.n	4dee <scope_compute_things+0x32>
        id_info_t *id_param = NULL;
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    4dca:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    4dcc:	3b01      	subs	r3, #1
        id_info_t *id_param = NULL;
    4dce:	2500      	movs	r5, #0
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    4dd0:	e011      	b.n	4df6 <scope_compute_things+0x3a>
            id_info_t *id = &scope->id_info[i];
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
                if (id_param != NULL) {
    4dd2:	b165      	cbz	r5, 4dee <scope_compute_things+0x32>
                    // swap star param with last param
                    id_info_t temp = *id_param; *id_param = *id; *id = temp;
    4dd4:	466b      	mov	r3, sp
    4dd6:	e895 0003 	ldmia.w	r5, {r0, r1}
    4dda:	e883 0003 	stmia.w	r3, {r0, r1}
    4dde:	e894 0003 	ldmia.w	r4, {r0, r1}
    4de2:	e885 0003 	stmia.w	r5, {r0, r1}
    4de6:	e893 0003 	ldmia.w	r3, {r0, r1}
    4dea:	e884 0003 	stmia.w	r4, {r0, r1}
        }
    }

    // in functions, turn implicit globals into explicit globals
    // compute the index of each local
    scope->num_locals = 0;
    4dee:	2300      	movs	r3, #0
    4df0:	8413      	strh	r3, [r2, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    4df2:	e01f      	b.n	4e34 <scope_compute_things+0x78>
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    4df4:	3b01      	subs	r3, #1
    4df6:	2b00      	cmp	r3, #0
    4df8:	dbf9      	blt.n	4dee <scope_compute_things+0x32>
            id_info_t *id = &scope->id_info[i];
    4dfa:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    4dfc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
    4e00:	7861      	ldrb	r1, [r4, #1]
    4e02:	f011 0f02 	tst.w	r1, #2
    4e06:	d1e4      	bne.n	4dd2 <scope_compute_things+0x16>
            } else if (id_param == NULL && id->flags == ID_FLAG_IS_PARAM) {
    4e08:	2d00      	cmp	r5, #0
    4e0a:	d1f3      	bne.n	4df4 <scope_compute_things+0x38>
    4e0c:	2901      	cmp	r1, #1
    4e0e:	d1f1      	bne.n	4df4 <scope_compute_things+0x38>
                id_param = id;
    4e10:	4625      	mov	r5, r4
    4e12:	e7ef      	b.n	4df4 <scope_compute_things+0x38>
        id_info_t *id = &scope->id_info[i];
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    4e14:	686e      	ldr	r6, [r5, #4]
    4e16:	2e06      	cmp	r6, #6
    4e18:	d115      	bne.n	4e46 <scope_compute_things+0x8a>
    4e1a:	e00a      	b.n	4e32 <scope_compute_things+0x76>
        }
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
        }
        // params always count for 1 local, even if they are a cell
        if (id->kind == ID_INFO_KIND_LOCAL || (id->flags & ID_FLAG_IS_PARAM)) {
    4e1c:	5c41      	ldrb	r1, [r0, r1]
    4e1e:	2902      	cmp	r1, #2
    4e20:	d003      	beq.n	4e2a <scope_compute_things+0x6e>
    4e22:	7869      	ldrb	r1, [r5, #1]
    4e24:	f011 0f01 	tst.w	r1, #1
    4e28:	d003      	beq.n	4e32 <scope_compute_things+0x76>
            id->local_num = scope->num_locals++;
    4e2a:	8c11      	ldrh	r1, [r2, #32]
    4e2c:	1c48      	adds	r0, r1, #1
    4e2e:	8410      	strh	r0, [r2, #32]
    4e30:	8069      	strh	r1, [r5, #2]
    for (int i = 0; i < scope->id_info_len; i++) {
    4e32:	3301      	adds	r3, #1
    4e34:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    4e36:	4299      	cmp	r1, r3
    4e38:	dd0d      	ble.n	4e56 <scope_compute_things+0x9a>
        id_info_t *id = &scope->id_info[i];
    4e3a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    4e3c:	00d9      	lsls	r1, r3, #3
    4e3e:	1845      	adds	r5, r0, r1
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    4e40:	7814      	ldrb	r4, [r2, #0]
    4e42:	2c01      	cmp	r4, #1
    4e44:	d0e6      	beq.n	4e14 <scope_compute_things+0x58>
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    4e46:	2c01      	cmp	r4, #1
    4e48:	d9e8      	bls.n	4e1c <scope_compute_things+0x60>
    4e4a:	5c44      	ldrb	r4, [r0, r1]
    4e4c:	2c00      	cmp	r4, #0
    4e4e:	d1e5      	bne.n	4e1c <scope_compute_things+0x60>
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    4e50:	2401      	movs	r4, #1
    4e52:	5444      	strb	r4, [r0, r1]
    4e54:	e7e2      	b.n	4e1c <scope_compute_things+0x60>
        }
    }

    // compute the index of cell vars
    for (int i = 0; i < scope->id_info_len; i++) {
    4e56:	2300      	movs	r3, #0
    4e58:	e000      	b.n	4e5c <scope_compute_things+0xa0>
    4e5a:	3301      	adds	r3, #1
    4e5c:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    4e5e:	4299      	cmp	r1, r3
    4e60:	dd10      	ble.n	4e84 <scope_compute_things+0xc8>
        id_info_t *id = &scope->id_info[i];
    4e62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4e64:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
        // in MicroPython the cells come right after the fast locals
        // parameters are not counted here, since they remain at the start
        // of the locals, even if they are cell vars
        if (id->kind == ID_INFO_KIND_CELL && !(id->flags & ID_FLAG_IS_PARAM)) {
    4e68:	f811 1033 	ldrb.w	r1, [r1, r3, lsl #3]
    4e6c:	2903      	cmp	r1, #3
    4e6e:	d1f4      	bne.n	4e5a <scope_compute_things+0x9e>
    4e70:	7841      	ldrb	r1, [r0, #1]
    4e72:	f011 0f01 	tst.w	r1, #1
    4e76:	d1f0      	bne.n	4e5a <scope_compute_things+0x9e>
            id->local_num = scope->num_locals;
    4e78:	8c11      	ldrh	r1, [r2, #32]
    4e7a:	8041      	strh	r1, [r0, #2]
            scope->num_locals += 1;
    4e7c:	8c11      	ldrh	r1, [r2, #32]
    4e7e:	3101      	adds	r1, #1
    4e80:	8411      	strh	r1, [r2, #32]
    4e82:	e7ea      	b.n	4e5a <scope_compute_things+0x9e>
        }
    }

    // compute the index of free vars
    // make sure they are in the order of the parent scope
    if (scope->parent != NULL) {
    4e84:	6853      	ldr	r3, [r2, #4]
    4e86:	2b00      	cmp	r3, #0
    4e88:	d04d      	beq.n	4f26 <scope_compute_things+0x16a>
        int num_free = 0;
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    4e8a:	2000      	movs	r0, #0
        int num_free = 0;
    4e8c:	4605      	mov	r5, r0
    4e8e:	e01d      	b.n	4ecc <scope_compute_things+0x110>
            id_info_t *id = &scope->parent->id_info[i];
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
                for (int j = 0; j < scope->id_info_len; j++) {
                    id_info_t *id2 = &scope->id_info[j];
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    4e90:	4b26      	ldr	r3, [pc, #152]	; (4f2c <scope_compute_things+0x170>)
    4e92:	4a27      	ldr	r2, [pc, #156]	; (4f30 <scope_compute_things+0x174>)
    4e94:	f640 41ff 	movw	r1, #3327	; 0xcff
    4e98:	4826      	ldr	r0, [pc, #152]	; (4f34 <scope_compute_things+0x178>)
    4e9a:	f013 fb5f 	bl	1855c <__assert_func>
                for (int j = 0; j < scope->id_info_len; j++) {
    4e9e:	3301      	adds	r3, #1
    4ea0:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    4ea2:	4299      	cmp	r1, r3
    4ea4:	dd11      	ble.n	4eca <scope_compute_things+0x10e>
                    id_info_t *id2 = &scope->id_info[j];
    4ea6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4ea8:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    4eac:	f811 1033 	ldrb.w	r1, [r1, r3, lsl #3]
    4eb0:	2904      	cmp	r1, #4
    4eb2:	d1f4      	bne.n	4e9e <scope_compute_things+0xe2>
    4eb4:	6877      	ldr	r7, [r6, #4]
    4eb6:	6861      	ldr	r1, [r4, #4]
    4eb8:	428f      	cmp	r7, r1
    4eba:	d1f0      	bne.n	4e9e <scope_compute_things+0xe2>
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    4ebc:	7861      	ldrb	r1, [r4, #1]
    4ebe:	f011 0f01 	tst.w	r1, #1
    4ec2:	d1e5      	bne.n	4e90 <scope_compute_things+0xd4>
                        // in MicroPython the frees come first, before the params
                        id2->local_num = num_free;
    4ec4:	8065      	strh	r5, [r4, #2]
                        num_free += 1;
    4ec6:	3501      	adds	r5, #1
    4ec8:	e7e9      	b.n	4e9e <scope_compute_things+0xe2>
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    4eca:	3001      	adds	r0, #1
    4ecc:	6853      	ldr	r3, [r2, #4]
    4ece:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    4ed0:	4281      	cmp	r1, r0
    4ed2:	dd0a      	ble.n	4eea <scope_compute_things+0x12e>
            id_info_t *id = &scope->parent->id_info[i];
    4ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ed6:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    4eda:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
    4ede:	3b03      	subs	r3, #3
    4ee0:	b2db      	uxtb	r3, r3
    4ee2:	2b01      	cmp	r3, #1
    4ee4:	d8f1      	bhi.n	4eca <scope_compute_things+0x10e>
                for (int j = 0; j < scope->id_info_len; j++) {
    4ee6:	2300      	movs	r3, #0
    4ee8:	e7da      	b.n	4ea0 <scope_compute_things+0xe4>
                    }
                }
            }
        }
        // in MicroPython shift all other locals after the free locals
        if (num_free > 0) {
    4eea:	2d00      	cmp	r5, #0
    4eec:	dd1b      	ble.n	4f26 <scope_compute_things+0x16a>
            for (int i = 0; i < scope->id_info_len; i++) {
    4eee:	2300      	movs	r3, #0
    4ef0:	e003      	b.n	4efa <scope_compute_things+0x13e>
                id_info_t *id = &scope->id_info[i];
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
                    id->local_num += num_free;
    4ef2:	8841      	ldrh	r1, [r0, #2]
    4ef4:	4429      	add	r1, r5
    4ef6:	8041      	strh	r1, [r0, #2]
            for (int i = 0; i < scope->id_info_len; i++) {
    4ef8:	3301      	adds	r3, #1
    4efa:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    4efc:	4299      	cmp	r1, r3
    4efe:	dd0b      	ble.n	4f18 <scope_compute_things+0x15c>
                id_info_t *id = &scope->id_info[i];
    4f00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4f02:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
    4f06:	f811 1033 	ldrb.w	r1, [r1, r3, lsl #3]
    4f0a:	2904      	cmp	r1, #4
    4f0c:	d1f1      	bne.n	4ef2 <scope_compute_things+0x136>
    4f0e:	7841      	ldrb	r1, [r0, #1]
    4f10:	f011 0f01 	tst.w	r1, #1
    4f14:	d0f0      	beq.n	4ef8 <scope_compute_things+0x13c>
    4f16:	e7ec      	b.n	4ef2 <scope_compute_things+0x136>
                }
            }
            scope->num_pos_args += num_free; // free vars are counted as params for passing them into the function
    4f18:	b2ad      	uxth	r5, r5
    4f1a:	8b53      	ldrh	r3, [r2, #26]
    4f1c:	442b      	add	r3, r5
    4f1e:	8353      	strh	r3, [r2, #26]
            scope->num_locals += num_free;
    4f20:	8c13      	ldrh	r3, [r2, #32]
    4f22:	441d      	add	r5, r3
    4f24:	8415      	strh	r5, [r2, #32]
        }
    }
}
    4f26:	b003      	add	sp, #12
    4f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f2a:	bf00      	nop
    4f2c:	00024fb8 	.word	0x00024fb8
    4f30:	00024470 	.word	0x00024470
    4f34:	00024fdc 	.word	0x00024fdc

00004f38 <compile_decrease_except_level>:
STATIC void compile_decrease_except_level(compiler_t *comp) {
    4f38:	b508      	push	{r3, lr}
    assert(comp->cur_except_level > 0);
    4f3a:	8b83      	ldrh	r3, [r0, #28]
    4f3c:	b113      	cbz	r3, 4f44 <compile_decrease_except_level+0xc>
    comp->cur_except_level -= 1;
    4f3e:	3b01      	subs	r3, #1
    4f40:	8383      	strh	r3, [r0, #28]
}
    4f42:	bd08      	pop	{r3, pc}
    assert(comp->cur_except_level > 0);
    4f44:	4b02      	ldr	r3, [pc, #8]	; (4f50 <compile_decrease_except_level+0x18>)
    4f46:	4a03      	ldr	r2, [pc, #12]	; (4f54 <compile_decrease_except_level+0x1c>)
    4f48:	21b5      	movs	r1, #181	; 0xb5
    4f4a:	4803      	ldr	r0, [pc, #12]	; (4f58 <compile_decrease_except_level+0x20>)
    4f4c:	f013 fb06 	bl	1855c <__assert_func>
    4f50:	000248d0 	.word	0x000248d0
    4f54:	000241e0 	.word	0x000241e0
    4f58:	00024fdc 	.word	0x00024fdc

00004f5c <compile_syntax_error>:
STATIC void compile_syntax_error(compiler_t *comp, mp_parse_node_t pn, const char *msg) {
    4f5c:	b538      	push	{r3, r4, r5, lr}
    if (comp->compile_error == MP_OBJ_NULL) {
    4f5e:	6883      	ldr	r3, [r0, #8]
    4f60:	b103      	cbz	r3, 4f64 <compile_syntax_error+0x8>
}
    4f62:	bd38      	pop	{r3, r4, r5, pc}
    4f64:	460d      	mov	r5, r1
    4f66:	4604      	mov	r4, r0
        comp->compile_error = mp_obj_new_exception_msg(&mp_type_SyntaxError, msg);
    4f68:	4611      	mov	r1, r2
    4f6a:	4804      	ldr	r0, [pc, #16]	; (4f7c <compile_syntax_error+0x20>)
    4f6c:	f007 fe1e 	bl	cbac <mp_obj_new_exception_msg>
    4f70:	60a0      	str	r0, [r4, #8]
        compile_error_set_line(comp, pn);
    4f72:	4629      	mov	r1, r5
    4f74:	4620      	mov	r0, r4
    4f76:	f7ff febc 	bl	4cf2 <compile_error_set_line>
}
    4f7a:	e7f2      	b.n	4f62 <compile_syntax_error+0x6>
    4f7c:	00026c0c 	.word	0x00026c0c

00004f80 <compile_scope_func_lambda_param>:
STATIC void compile_scope_func_lambda_param(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_name, pn_kind_t pn_star, pn_kind_t pn_dbl_star) {
    4f80:	b570      	push	{r4, r5, r6, lr}
    4f82:	b082      	sub	sp, #8
    4f84:	4605      	mov	r5, r0
    4f86:	460c      	mov	r4, r1
    if ((comp->scope_cur->scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
    4f88:	6a40      	ldr	r0, [r0, #36]	; 0x24
    4f8a:	7e06      	ldrb	r6, [r0, #24]
    4f8c:	f016 0f02 	tst.w	r6, #2
    4f90:	d11a      	bne.n	4fc8 <compile_scope_func_lambda_param+0x48>
    if (MP_PARSE_NODE_IS_ID(pn)) {
    4f92:	f001 010f 	and.w	r1, r1, #15
    4f96:	2902      	cmp	r1, #2
    4f98:	d01b      	beq.n	4fd2 <compile_scope_func_lambda_param+0x52>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4f9a:	b33c      	cbz	r4, 4fec <compile_scope_func_lambda_param+0x6c>
    4f9c:	f014 0f03 	tst.w	r4, #3
    4fa0:	d124      	bne.n	4fec <compile_scope_func_lambda_param+0x6c>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_name) {
    4fa2:	7921      	ldrb	r1, [r4, #4]
    4fa4:	4291      	cmp	r1, r2
    4fa6:	d028      	beq.n	4ffa <compile_scope_func_lambda_param+0x7a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_star) {
    4fa8:	4299      	cmp	r1, r3
    4faa:	d034      	beq.n	5016 <compile_scope_func_lambda_param+0x96>
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    4fac:	f89d 3018 	ldrb.w	r3, [sp, #24]
    4fb0:	4299      	cmp	r1, r3
    4fb2:	d15f      	bne.n	5074 <compile_scope_func_lambda_param+0xf4>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    4fb4:	68a1      	ldr	r1, [r4, #8]
    4fb6:	0909      	lsrs	r1, r1, #4
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARKEYWORDS;
    4fb8:	f046 0602 	orr.w	r6, r6, #2
    4fbc:	7606      	strb	r6, [r0, #24]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_DBL_STAR_PARAM;
    4fbe:	2605      	movs	r6, #5
    if (param_name != MP_QSTR_NULL) {
    4fc0:	2900      	cmp	r1, #0
    4fc2:	d15e      	bne.n	5082 <compile_scope_func_lambda_param+0x102>
}
    4fc4:	b002      	add	sp, #8
    4fc6:	bd70      	pop	{r4, r5, r6, pc}
        compile_syntax_error(comp, pn, "invalid syntax");
    4fc8:	4a37      	ldr	r2, [pc, #220]	; (50a8 <compile_scope_func_lambda_param+0x128>)
    4fca:	4628      	mov	r0, r5
    4fcc:	f7ff ffc6 	bl	4f5c <compile_syntax_error>
        return;
    4fd0:	e7f8      	b.n	4fc4 <compile_scope_func_lambda_param+0x44>
        param_name = MP_PARSE_NODE_LEAF_ARG(pn);
    4fd2:	0921      	lsrs	r1, r4, #4
        if (comp->have_star) {
    4fd4:	79ab      	ldrb	r3, [r5, #6]
    4fd6:	b123      	cbz	r3, 4fe2 <compile_scope_func_lambda_param+0x62>
            comp->scope_cur->num_kwonly_args += 1;
    4fd8:	8b83      	ldrh	r3, [r0, #28]
    4fda:	3301      	adds	r3, #1
    4fdc:	8383      	strh	r3, [r0, #28]
    uint param_flag = ID_FLAG_IS_PARAM;
    4fde:	2601      	movs	r6, #1
    4fe0:	e7ee      	b.n	4fc0 <compile_scope_func_lambda_param+0x40>
            comp->scope_cur->num_pos_args += 1;
    4fe2:	8b43      	ldrh	r3, [r0, #26]
    4fe4:	3301      	adds	r3, #1
    4fe6:	8343      	strh	r3, [r0, #26]
    uint param_flag = ID_FLAG_IS_PARAM;
    4fe8:	2601      	movs	r6, #1
    4fea:	e7e9      	b.n	4fc0 <compile_scope_func_lambda_param+0x40>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4fec:	4b2f      	ldr	r3, [pc, #188]	; (50ac <compile_scope_func_lambda_param+0x12c>)
    4fee:	4a30      	ldr	r2, [pc, #192]	; (50b0 <compile_scope_func_lambda_param+0x130>)
    4ff0:	f640 21bb 	movw	r1, #2747	; 0xabb
    4ff4:	482f      	ldr	r0, [pc, #188]	; (50b4 <compile_scope_func_lambda_param+0x134>)
    4ff6:	f013 fab1 	bl	1855c <__assert_func>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    4ffa:	68a1      	ldr	r1, [r4, #8]
    4ffc:	0909      	lsrs	r1, r1, #4
            if (comp->have_star) {
    4ffe:	79ab      	ldrb	r3, [r5, #6]
    5000:	b123      	cbz	r3, 500c <compile_scope_func_lambda_param+0x8c>
                comp->scope_cur->num_kwonly_args += 1;
    5002:	8b83      	ldrh	r3, [r0, #28]
    5004:	3301      	adds	r3, #1
    5006:	8383      	strh	r3, [r0, #28]
    uint param_flag = ID_FLAG_IS_PARAM;
    5008:	2601      	movs	r6, #1
    500a:	e7d9      	b.n	4fc0 <compile_scope_func_lambda_param+0x40>
                comp->scope_cur->num_pos_args += 1;
    500c:	8b43      	ldrh	r3, [r0, #26]
    500e:	3301      	adds	r3, #1
    5010:	8343      	strh	r3, [r0, #26]
    uint param_flag = ID_FLAG_IS_PARAM;
    5012:	2601      	movs	r6, #1
    5014:	e7d4      	b.n	4fc0 <compile_scope_func_lambda_param+0x40>
            if (comp->have_star) {
    5016:	79ab      	ldrb	r3, [r5, #6]
    5018:	b9bb      	cbnz	r3, 504a <compile_scope_func_lambda_param+0xca>
            comp->have_star = true;
    501a:	2301      	movs	r3, #1
    501c:	71ab      	strb	r3, [r5, #6]
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    501e:	68a3      	ldr	r3, [r4, #8]
    5020:	2b00      	cmp	r3, #0
    5022:	d0cf      	beq.n	4fc4 <compile_scope_func_lambda_param+0x44>
            } else if (MP_PARSE_NODE_IS_ID(pns->nodes[0])) {
    5024:	f003 020f 	and.w	r2, r3, #15
    5028:	2a02      	cmp	r2, #2
    502a:	d014      	beq.n	5056 <compile_scope_func_lambda_param+0xd6>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    502c:	f013 0f03 	tst.w	r3, #3
    5030:	d119      	bne.n	5066 <compile_scope_func_lambda_param+0xe6>
    5032:	791b      	ldrb	r3, [r3, #4]
    5034:	2b45      	cmp	r3, #69	; 0x45
    5036:	d116      	bne.n	5066 <compile_scope_func_lambda_param+0xe6>
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    5038:	7e03      	ldrb	r3, [r0, #24]
    503a:	f043 0301 	orr.w	r3, r3, #1
    503e:	7603      	strb	r3, [r0, #24]
                pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5040:	68a3      	ldr	r3, [r4, #8]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    5042:	6899      	ldr	r1, [r3, #8]
    5044:	0909      	lsrs	r1, r1, #4
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    5046:	2603      	movs	r6, #3
    5048:	e7ba      	b.n	4fc0 <compile_scope_func_lambda_param+0x40>
                compile_syntax_error(comp, pn, "invalid syntax");
    504a:	4a17      	ldr	r2, [pc, #92]	; (50a8 <compile_scope_func_lambda_param+0x128>)
    504c:	4621      	mov	r1, r4
    504e:	4628      	mov	r0, r5
    5050:	f7ff ff84 	bl	4f5c <compile_syntax_error>
                return;
    5054:	e7b6      	b.n	4fc4 <compile_scope_func_lambda_param+0x44>
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    5056:	7e03      	ldrb	r3, [r0, #24]
    5058:	f043 0301 	orr.w	r3, r3, #1
    505c:	7603      	strb	r3, [r0, #24]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    505e:	68a1      	ldr	r1, [r4, #8]
    5060:	0909      	lsrs	r1, r1, #4
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    5062:	2603      	movs	r6, #3
    5064:	e7ac      	b.n	4fc0 <compile_scope_func_lambda_param+0x40>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    5066:	4b14      	ldr	r3, [pc, #80]	; (50b8 <compile_scope_func_lambda_param+0x138>)
    5068:	4a11      	ldr	r2, [pc, #68]	; (50b0 <compile_scope_func_lambda_param+0x130>)
    506a:	f640 21d7 	movw	r1, #2775	; 0xad7
    506e:	4811      	ldr	r0, [pc, #68]	; (50b4 <compile_scope_func_lambda_param+0x134>)
    5070:	f013 fa74 	bl	1855c <__assert_func>
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    5074:	4b11      	ldr	r3, [pc, #68]	; (50bc <compile_scope_func_lambda_param+0x13c>)
    5076:	4a0e      	ldr	r2, [pc, #56]	; (50b0 <compile_scope_func_lambda_param+0x130>)
    5078:	f640 21de 	movw	r1, #2782	; 0xade
    507c:	480d      	ldr	r0, [pc, #52]	; (50b4 <compile_scope_func_lambda_param+0x134>)
    507e:	f013 fa6d 	bl	1855c <__assert_func>
        id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, param_name, &added);
    5082:	f10d 0207 	add.w	r2, sp, #7
    5086:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5088:	f7ff fda6 	bl	4bd8 <scope_find_or_add_id>
        if (!added) {
    508c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5090:	b11b      	cbz	r3, 509a <compile_scope_func_lambda_param+0x11a>
        id_info->kind = ID_INFO_KIND_LOCAL;
    5092:	2302      	movs	r3, #2
    5094:	7003      	strb	r3, [r0, #0]
        id_info->flags = param_flag;
    5096:	7046      	strb	r6, [r0, #1]
    5098:	e794      	b.n	4fc4 <compile_scope_func_lambda_param+0x44>
            compile_syntax_error(comp, pn, "name reused for argument");
    509a:	4a09      	ldr	r2, [pc, #36]	; (50c0 <compile_scope_func_lambda_param+0x140>)
    509c:	4621      	mov	r1, r4
    509e:	4628      	mov	r0, r5
    50a0:	f7ff ff5c 	bl	4f5c <compile_syntax_error>
    50a4:	e78e      	b.n	4fc4 <compile_scope_func_lambda_param+0x44>
    50a6:	bf00      	nop
    50a8:	00023b98 	.word	0x00023b98
    50ac:	000241a8 	.word	0x000241a8
    50b0:	00024428 	.word	0x00024428
    50b4:	00024fdc 	.word	0x00024fdc
    50b8:	00024d4c 	.word	0x00024d4c
    50bc:	00024d84 	.word	0x00024d84
    50c0:	00024db4 	.word	0x00024db4

000050c4 <compile_scope_lambda_param>:
STATIC void compile_scope_lambda_param(compiler_t *comp, mp_parse_node_t pn) {
    50c4:	b500      	push	{lr}
    50c6:	b083      	sub	sp, #12
    compile_scope_func_lambda_param(comp, pn, PN_varargslist_name, PN_varargslist_star, PN_varargslist_dbl_star);
    50c8:	234a      	movs	r3, #74	; 0x4a
    50ca:	9300      	str	r3, [sp, #0]
    50cc:	2349      	movs	r3, #73	; 0x49
    50ce:	2248      	movs	r2, #72	; 0x48
    50d0:	f7ff ff56 	bl	4f80 <compile_scope_func_lambda_param>
}
    50d4:	b003      	add	sp, #12
    50d6:	f85d fb04 	ldr.w	pc, [sp], #4

000050da <compile_scope_func_param>:
STATIC void compile_scope_func_param(compiler_t *comp, mp_parse_node_t pn) {
    50da:	b500      	push	{lr}
    50dc:	b083      	sub	sp, #12
    compile_scope_func_lambda_param(comp, pn, PN_typedargslist_name, PN_typedargslist_star, PN_typedargslist_dbl_star);
    50de:	2342      	movs	r3, #66	; 0x42
    50e0:	9300      	str	r3, [sp, #0]
    50e2:	2341      	movs	r3, #65	; 0x41
    50e4:	2240      	movs	r2, #64	; 0x40
    50e6:	f7ff ff4b 	bl	4f80 <compile_scope_func_lambda_param>
}
    50ea:	b003      	add	sp, #12
    50ec:	f85d fb04 	ldr.w	pc, [sp], #4

000050f0 <compile_star_expr>:
STATIC void compile_star_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    50f0:	b508      	push	{r3, lr}
    compile_syntax_error(comp, (mp_parse_node_t)pns, "*x must be assignment target");
    50f2:	4a02      	ldr	r2, [pc, #8]	; (50fc <compile_star_expr+0xc>)
    50f4:	f7ff ff32 	bl	4f5c <compile_syntax_error>
}
    50f8:	bd08      	pop	{r3, pc}
    50fa:	bf00      	nop
    50fc:	00024dd0 	.word	0x00024dd0

00005100 <compile_built_in_decorator>:
STATIC bool compile_built_in_decorator(compiler_t *comp, int name_len, mp_parse_node_t *name_nodes, uint *emit_options) {
    5100:	b538      	push	{r3, r4, r5, lr}
    if (MP_PARSE_NODE_LEAF_ARG(name_nodes[0]) != MP_QSTR_micropython) {
    5102:	6814      	ldr	r4, [r2, #0]
    5104:	0925      	lsrs	r5, r4, #4
    5106:	f5b5 7ff3 	cmp.w	r5, #486	; 0x1e6
    510a:	d001      	beq.n	5110 <compile_built_in_decorator+0x10>
        return false;
    510c:	2000      	movs	r0, #0
}
    510e:	bd38      	pop	{r3, r4, r5, pc}
    if (name_len != 2) {
    5110:	2902      	cmp	r1, #2
    5112:	d109      	bne.n	5128 <compile_built_in_decorator+0x28>
    qstr attr = MP_PARSE_NODE_LEAF_ARG(name_nodes[1]);
    5114:	6851      	ldr	r1, [r2, #4]
    5116:	090a      	lsrs	r2, r1, #4
    if (attr == MP_QSTR_bytecode) {
    5118:	f5b2 7fb6 	cmp.w	r2, #364	; 0x16c
    511c:	d00a      	beq.n	5134 <compile_built_in_decorator+0x34>
        compile_syntax_error(comp, name_nodes[1], "invalid micropython decorator");
    511e:	4a07      	ldr	r2, [pc, #28]	; (513c <compile_built_in_decorator+0x3c>)
    5120:	f7ff ff1c 	bl	4f5c <compile_syntax_error>
    return true;
    5124:	2001      	movs	r0, #1
    5126:	e7f2      	b.n	510e <compile_built_in_decorator+0xe>
        compile_syntax_error(comp, name_nodes[0], "invalid micropython decorator");
    5128:	4a04      	ldr	r2, [pc, #16]	; (513c <compile_built_in_decorator+0x3c>)
    512a:	4621      	mov	r1, r4
    512c:	f7ff ff16 	bl	4f5c <compile_syntax_error>
        return true;
    5130:	2001      	movs	r0, #1
    5132:	e7ec      	b.n	510e <compile_built_in_decorator+0xe>
        *emit_options = MP_EMIT_OPT_BYTECODE;
    5134:	2001      	movs	r0, #1
    5136:	6018      	str	r0, [r3, #0]
    5138:	e7e9      	b.n	510e <compile_built_in_decorator+0xe>
    513a:	bf00      	nop
    513c:	00024728 	.word	0x00024728

00005140 <compile_trailer_period>:
STATIC void compile_trailer_period(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5140:	b508      	push	{r3, lr}
    EMIT_ARG(load_attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // attribute to get
    5142:	6889      	ldr	r1, [r1, #8]
    5144:	0909      	lsrs	r1, r1, #4
    5146:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5148:	f003 f9a3 	bl	8492 <mp_emit_bc_load_attr>
}
    514c:	bd08      	pop	{r3, pc}
	...

00005150 <compile_load_id>:
STATIC void compile_load_id(compiler_t *comp, qstr qst) {
    5150:	b508      	push	{r3, lr}
    if (comp->pass == MP_PASS_SCOPE) {
    5152:	7943      	ldrb	r3, [r0, #5]
    5154:	2b01      	cmp	r3, #1
    5156:	d006      	beq.n	5166 <compile_load_id+0x16>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
    5158:	460b      	mov	r3, r1
    515a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    515c:	4904      	ldr	r1, [pc, #16]	; (5170 <compile_load_id+0x20>)
    515e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5160:	f002 fd82 	bl	7c68 <mp_emit_common_id_op>
}
    5164:	bd08      	pop	{r3, pc}
        mp_emit_common_get_id_for_load(comp->scope_cur, qst);
    5166:	6a40      	ldr	r0, [r0, #36]	; 0x24
    5168:	f002 fd4e 	bl	7c08 <mp_emit_common_get_id_for_load>
    516c:	e7fa      	b.n	5164 <compile_load_id+0x14>
    516e:	bf00      	nop
    5170:	00025370 	.word	0x00025370

00005174 <compile_store_id>:
STATIC void compile_store_id(compiler_t *comp, qstr qst) {
    5174:	b508      	push	{r3, lr}
    if (comp->pass == MP_PASS_SCOPE) {
    5176:	7943      	ldrb	r3, [r0, #5]
    5178:	2b01      	cmp	r3, #1
    517a:	d006      	beq.n	518a <compile_store_id+0x16>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
    517c:	460b      	mov	r3, r1
    517e:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5180:	4904      	ldr	r1, [pc, #16]	; (5194 <compile_store_id+0x20>)
    5182:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5184:	f002 fd70 	bl	7c68 <mp_emit_common_id_op>
}
    5188:	bd08      	pop	{r3, pc}
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    518a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    518c:	f002 fd4f 	bl	7c2e <mp_emit_common_get_id_for_modification>
    5190:	e7fa      	b.n	5188 <compile_store_id+0x14>
    5192:	bf00      	nop
    5194:	00025380 	.word	0x00025380

00005198 <compile_delete_id>:
STATIC void compile_delete_id(compiler_t *comp, qstr qst) {
    5198:	b508      	push	{r3, lr}
    if (comp->pass == MP_PASS_SCOPE) {
    519a:	7943      	ldrb	r3, [r0, #5]
    519c:	2b01      	cmp	r3, #1
    519e:	d006      	beq.n	51ae <compile_delete_id+0x16>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
    51a0:	460b      	mov	r3, r1
    51a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
    51a4:	4904      	ldr	r1, [pc, #16]	; (51b8 <compile_delete_id+0x20>)
    51a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    51a8:	f002 fd5e 	bl	7c68 <mp_emit_common_id_op>
}
    51ac:	bd08      	pop	{r3, pc}
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    51ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
    51b0:	f002 fd3d 	bl	7c2e <mp_emit_common_get_id_for_modification>
    51b4:	e7fa      	b.n	51ac <compile_delete_id+0x14>
    51b6:	bf00      	nop
    51b8:	00025360 	.word	0x00025360

000051bc <compile_const_object>:
STATIC void compile_const_object(compiler_t *comp, mp_parse_node_struct_t *pns) {
    51bc:	b510      	push	{r4, lr}
    51be:	4604      	mov	r4, r0
    EMIT_ARG(load_const_obj, get_const_object(pns));
    51c0:	4608      	mov	r0, r1
    51c2:	f7ff fde3 	bl	4d8c <get_const_object>
    51c6:	4601      	mov	r1, r0
    51c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    51ca:	f003 f94c 	bl	8466 <mp_emit_bc_load_const_obj>
}
    51ce:	bd10      	pop	{r4, pc}

000051d0 <compile_node>:
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    51d0:	2900      	cmp	r1, #0
    51d2:	d052      	beq.n	527a <compile_node+0xaa>
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn) {
    51d4:	b530      	push	{r4, r5, lr}
    51d6:	b083      	sub	sp, #12
    51d8:	460c      	mov	r4, r1
    51da:	4605      	mov	r5, r0
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    51dc:	f011 0f01 	tst.w	r1, #1
    51e0:	d112      	bne.n	5208 <compile_node+0x38>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    51e2:	f011 0f03 	tst.w	r1, #3
    51e6:	d033      	beq.n	5250 <compile_node+0x80>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    51e8:	0908      	lsrs	r0, r1, #4
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    51ea:	f001 040f 	and.w	r4, r1, #15
    51ee:	2c06      	cmp	r4, #6
    51f0:	d015      	beq.n	521e <compile_node+0x4e>
    51f2:	2c0a      	cmp	r4, #10
    51f4:	d018      	beq.n	5228 <compile_node+0x58>
    51f6:	2c02      	cmp	r4, #2
    51f8:	d00c      	beq.n	5214 <compile_node+0x44>
                if (arg == MP_TOKEN_NEWLINE) {
    51fa:	2804      	cmp	r0, #4
    51fc:	d008      	beq.n	5210 <compile_node+0x40>
                  EMIT_ARG(load_const_tok, arg);
    51fe:	b2c1      	uxtb	r1, r0
    5200:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5202:	f003 f8db 	bl	83bc <mp_emit_bc_load_const_tok>
    5206:	e003      	b.n	5210 <compile_node+0x40>
        EMIT_ARG(load_const_small_int, arg);
    5208:	1049      	asrs	r1, r1, #1
    520a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    520c:	f003 f908 	bl	8420 <mp_emit_bc_load_const_small_int>
}
    5210:	b003      	add	sp, #12
    5212:	bd30      	pop	{r4, r5, pc}
            case MP_PARSE_NODE_ID: compile_load_id(comp, arg); break;
    5214:	4601      	mov	r1, r0
    5216:	4628      	mov	r0, r5
    5218:	f7ff ff9a 	bl	5150 <compile_load_id>
    521c:	e7f8      	b.n	5210 <compile_node+0x40>
            case MP_PARSE_NODE_STRING: EMIT_ARG(load_const_str, arg); break;
    521e:	4601      	mov	r1, r0
    5220:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5222:	f003 f914 	bl	844e <mp_emit_bc_load_const_str>
    5226:	e7f3      	b.n	5210 <compile_node+0x40>
                if (comp->pass != MP_PASS_EMIT) {
    5228:	796b      	ldrb	r3, [r5, #5]
    522a:	2b04      	cmp	r3, #4
    522c:	d004      	beq.n	5238 <compile_node+0x68>
                    EMIT_ARG(load_const_obj, mp_const_none);
    522e:	4913      	ldr	r1, [pc, #76]	; (527c <compile_node+0xac>)
    5230:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5232:	f003 f918 	bl	8466 <mp_emit_bc_load_const_obj>
    5236:	e7eb      	b.n	5210 <compile_node+0x40>
                    const byte *data = qstr_data(arg, &len);
    5238:	a901      	add	r1, sp, #4
    523a:	f7fc fa2f 	bl	169c <qstr_data>
                    EMIT_ARG(load_const_obj, mp_obj_new_bytes(data, len));
    523e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    5240:	9901      	ldr	r1, [sp, #4]
    5242:	f00a fe0b 	bl	fe5c <mp_obj_new_bytes>
    5246:	4601      	mov	r1, r0
    5248:	4620      	mov	r0, r4
    524a:	f003 f90c 	bl	8466 <mp_emit_bc_load_const_obj>
    524e:	e7df      	b.n	5210 <compile_node+0x40>
        EMIT_ARG(set_source_line, pns->source_line);
    5250:	6809      	ldr	r1, [r1, #0]
    5252:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5254:	f003 f84f 	bl	82f6 <mp_emit_bc_set_source_line>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    5258:	7923      	ldrb	r3, [r4, #4]
    525a:	2b35      	cmp	r3, #53	; 0x35
    525c:	d806      	bhi.n	526c <compile_node+0x9c>
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
    525e:	4a08      	ldr	r2, [pc, #32]	; (5280 <compile_node+0xb0>)
    5260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        f(comp, pns);
    5264:	4621      	mov	r1, r4
    5266:	4628      	mov	r0, r5
    5268:	4798      	blx	r3
}
    526a:	e7d1      	b.n	5210 <compile_node+0x40>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    526c:	4b05      	ldr	r3, [pc, #20]	; (5284 <compile_node+0xb4>)
    526e:	4a06      	ldr	r2, [pc, #24]	; (5288 <compile_node+0xb8>)
    5270:	f640 21a2 	movw	r1, #2722	; 0xaa2
    5274:	4805      	ldr	r0, [pc, #20]	; (528c <compile_node+0xbc>)
    5276:	f013 f971 	bl	1855c <__assert_func>
    527a:	4770      	bx	lr
    527c:	00027b40 	.word	0x00027b40
    5280:	00024988 	.word	0x00024988
    5284:	00024b08 	.word	0x00024b08
    5288:	00024418 	.word	0x00024418
    528c:	00024fdc 	.word	0x00024fdc

00005290 <c_assign_atom_expr>:
STATIC void c_assign_atom_expr(compiler_t *comp, mp_parse_node_struct_t *pns, assign_kind_t assign_kind) {
    5290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5294:	4606      	mov	r6, r0
    5296:	460d      	mov	r5, r1
    5298:	4617      	mov	r7, r2
    if (assign_kind != ASSIGN_AUG_STORE) {
    529a:	2a02      	cmp	r2, #2
    529c:	d116      	bne.n	52cc <c_assign_atom_expr+0x3c>
    if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    529e:	68ec      	ldr	r4, [r5, #12]
    52a0:	b16c      	cbz	r4, 52be <c_assign_atom_expr+0x2e>
    52a2:	f014 0f03 	tst.w	r4, #3
    52a6:	d10a      	bne.n	52be <c_assign_atom_expr+0x2e>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    52a8:	46a0      	mov	r8, r4
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    52aa:	6863      	ldr	r3, [r4, #4]
    52ac:	b2da      	uxtb	r2, r3
    52ae:	2a86      	cmp	r2, #134	; 0x86
    52b0:	d010      	beq.n	52d4 <c_assign_atom_expr+0x44>
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    52b2:	f898 3004 	ldrb.w	r3, [r8, #4]
    52b6:	2b2e      	cmp	r3, #46	; 0x2e
    52b8:	d031      	beq.n	531e <c_assign_atom_expr+0x8e>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    52ba:	2b2f      	cmp	r3, #47	; 0x2f
    52bc:	d04a      	beq.n	5354 <c_assign_atom_expr+0xc4>
    compile_syntax_error(comp, (mp_parse_node_t)pns, "can't assign to expression");
    52be:	4a38      	ldr	r2, [pc, #224]	; (53a0 <c_assign_atom_expr+0x110>)
    52c0:	4629      	mov	r1, r5
    52c2:	4630      	mov	r0, r6
    52c4:	f7ff fe4a 	bl	4f5c <compile_syntax_error>
}
    52c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        compile_node(comp, pns->nodes[0]);
    52cc:	6889      	ldr	r1, [r1, #8]
    52ce:	f7ff ff7f 	bl	51d0 <compile_node>
    52d2:	e7e4      	b.n	529e <c_assign_atom_expr+0xe>
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    52d4:	ea4f 2a13 	mov.w	sl, r3, lsr #8
            if (assign_kind != ASSIGN_AUG_STORE) {
    52d8:	2f02      	cmp	r7, #2
    52da:	d00f      	beq.n	52fc <c_assign_atom_expr+0x6c>
                for (int i = 0; i < n - 1; i++) {
    52dc:	f04f 0900 	mov.w	r9, #0
    52e0:	e008      	b.n	52f4 <c_assign_atom_expr+0x64>
                    compile_node(comp, pns1->nodes[i]);
    52e2:	f109 0302 	add.w	r3, r9, #2
    52e6:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    52ea:	4630      	mov	r0, r6
    52ec:	f7ff ff70 	bl	51d0 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    52f0:	f109 0901 	add.w	r9, r9, #1
    52f4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    52f8:	454b      	cmp	r3, r9
    52fa:	dcf2      	bgt.n	52e2 <c_assign_atom_expr+0x52>
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    52fc:	f10a 0a01 	add.w	sl, sl, #1
    5300:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
    5304:	b123      	cbz	r3, 5310 <c_assign_atom_expr+0x80>
    5306:	f013 0f03 	tst.w	r3, #3
    530a:	d101      	bne.n	5310 <c_assign_atom_expr+0x80>
            pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    530c:	4698      	mov	r8, r3
    530e:	e7d0      	b.n	52b2 <c_assign_atom_expr+0x22>
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5310:	4b24      	ldr	r3, [pc, #144]	; (53a4 <c_assign_atom_expr+0x114>)
    5312:	4a25      	ldr	r2, [pc, #148]	; (53a8 <c_assign_atom_expr+0x118>)
    5314:	f240 116b 	movw	r1, #363	; 0x16b
    5318:	4824      	ldr	r0, [pc, #144]	; (53ac <c_assign_atom_expr+0x11c>)
    531a:	f013 f91f 	bl	1855c <__assert_func>
            if (assign_kind == ASSIGN_AUG_STORE) {
    531e:	2f02      	cmp	r7, #2
    5320:	d00a      	beq.n	5338 <c_assign_atom_expr+0xa8>
                compile_node(comp, pns1->nodes[0]);
    5322:	f8d8 1008 	ldr.w	r1, [r8, #8]
    5326:	4630      	mov	r0, r6
    5328:	f7ff ff52 	bl	51d0 <compile_node>
                if (assign_kind == ASSIGN_AUG_LOAD) {
    532c:	2f01      	cmp	r7, #1
    532e:	d00a      	beq.n	5346 <c_assign_atom_expr+0xb6>
                    EMIT(store_subscr);
    5330:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5332:	f003 f8ee 	bl	8512 <mp_emit_bc_store_subscr>
    5336:	e7c7      	b.n	52c8 <c_assign_atom_expr+0x38>
                EMIT(rot_three);
    5338:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    533a:	f003 f92b 	bl	8594 <mp_emit_bc_rot_three>
                EMIT(store_subscr);
    533e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5340:	f003 f8e7 	bl	8512 <mp_emit_bc_store_subscr>
    5344:	e7c0      	b.n	52c8 <c_assign_atom_expr+0x38>
                    EMIT(dup_top_two);
    5346:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5348:	f003 f8f8 	bl	853c <mp_emit_bc_dup_top_two>
                    EMIT(load_subscr);
    534c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    534e:	f003 f8c8 	bl	84e2 <mp_emit_bc_load_subscr>
    5352:	e7b9      	b.n	52c8 <c_assign_atom_expr+0x38>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    5354:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5358:	f003 030f 	and.w	r3, r3, #15
    535c:	2b02      	cmp	r3, #2
    535e:	d10a      	bne.n	5376 <c_assign_atom_expr+0xe6>
            if (assign_kind == ASSIGN_AUG_LOAD) {
    5360:	2f01      	cmp	r7, #1
    5362:	d00f      	beq.n	5384 <c_assign_atom_expr+0xf4>
                if (assign_kind == ASSIGN_AUG_STORE) {
    5364:	2f02      	cmp	r7, #2
    5366:	d017      	beq.n	5398 <c_assign_atom_expr+0x108>
                EMIT_ARG(store_attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]));
    5368:	f8d8 1008 	ldr.w	r1, [r8, #8]
    536c:	0909      	lsrs	r1, r1, #4
    536e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5370:	f003 f8c2 	bl	84f8 <mp_emit_bc_store_attr>
    5374:	e7a8      	b.n	52c8 <c_assign_atom_expr+0x38>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    5376:	4b0e      	ldr	r3, [pc, #56]	; (53b0 <c_assign_atom_expr+0x120>)
    5378:	4a0b      	ldr	r2, [pc, #44]	; (53a8 <c_assign_atom_expr+0x118>)
    537a:	f240 117d 	movw	r1, #381	; 0x17d
    537e:	480b      	ldr	r0, [pc, #44]	; (53ac <c_assign_atom_expr+0x11c>)
    5380:	f013 f8ec 	bl	1855c <__assert_func>
                EMIT(dup_top);
    5384:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5386:	f003 f8cf 	bl	8528 <mp_emit_bc_dup_top>
                EMIT_ARG(load_attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]));
    538a:	f8d8 1008 	ldr.w	r1, [r8, #8]
    538e:	0909      	lsrs	r1, r1, #4
    5390:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5392:	f003 f87e 	bl	8492 <mp_emit_bc_load_attr>
    5396:	e797      	b.n	52c8 <c_assign_atom_expr+0x38>
                    EMIT(rot_two);
    5398:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    539a:	f003 f8e4 	bl	8566 <mp_emit_bc_rot_two>
    539e:	e7e3      	b.n	5368 <c_assign_atom_expr+0xd8>
    53a0:	0002455c 	.word	0x0002455c
    53a4:	0002450c 	.word	0x0002450c
    53a8:	0002420c 	.word	0x0002420c
    53ac:	00024fdc 	.word	0x00024fdc
    53b0:	00024538 	.word	0x00024538

000053b4 <c_assign>:
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t assign_kind) {
    53b4:	b538      	push	{r3, r4, r5, lr}
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    53b6:	b161      	cbz	r1, 53d2 <c_assign+0x1e>
    53b8:	460b      	mov	r3, r1
    if (MP_PARSE_NODE_IS_LEAF(pn)) {
    53ba:	f011 0f03 	tst.w	r1, #3
    53be:	d019      	beq.n	53f4 <c_assign+0x40>
        if (MP_PARSE_NODE_IS_ID(pn)) {
    53c0:	f001 010f 	and.w	r1, r1, #15
    53c4:	2902      	cmp	r1, #2
    53c6:	d00b      	beq.n	53e0 <c_assign+0x2c>
    compile_syntax_error(comp, pn, "can't assign to expression");
    53c8:	4a40      	ldr	r2, [pc, #256]	; (54cc <c_assign+0x118>)
    53ca:	4619      	mov	r1, r3
    53cc:	f7ff fdc6 	bl	4f5c <compile_syntax_error>
}
    53d0:	bd38      	pop	{r3, r4, r5, pc}
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    53d2:	4b3f      	ldr	r3, [pc, #252]	; (54d0 <c_assign+0x11c>)
    53d4:	4a3f      	ldr	r2, [pc, #252]	; (54d4 <c_assign+0x120>)
    53d6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    53da:	483f      	ldr	r0, [pc, #252]	; (54d8 <c_assign+0x124>)
    53dc:	f013 f8be 	bl	1855c <__assert_func>
            qstr arg = MP_PARSE_NODE_LEAF_ARG(pn);
    53e0:	0919      	lsrs	r1, r3, #4
            switch (assign_kind) {
    53e2:	b122      	cbz	r2, 53ee <c_assign+0x3a>
    53e4:	2a02      	cmp	r2, #2
    53e6:	d002      	beq.n	53ee <c_assign+0x3a>
                    compile_load_id(comp, arg);
    53e8:	f7ff feb2 	bl	5150 <compile_load_id>
                    break;
    53ec:	e7f0      	b.n	53d0 <c_assign+0x1c>
                    compile_store_id(comp, arg);
    53ee:	f7ff fec1 	bl	5174 <compile_store_id>
                    break;
    53f2:	e7ed      	b.n	53d0 <c_assign+0x1c>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    53f4:	684c      	ldr	r4, [r1, #4]
    53f6:	b2e1      	uxtb	r1, r4
    53f8:	292a      	cmp	r1, #42	; 0x2a
    53fa:	d014      	beq.n	5426 <c_assign+0x72>
    53fc:	d807      	bhi.n	540e <c_assign+0x5a>
    53fe:	2906      	cmp	r1, #6
    5400:	d009      	beq.n	5416 <c_assign+0x62>
    5402:	2929      	cmp	r1, #41	; 0x29
    5404:	d1e0      	bne.n	53c8 <c_assign+0x14>
                c_assign_atom_expr(comp, pns, assign_kind);
    5406:	4619      	mov	r1, r3
    5408:	f7ff ff42 	bl	5290 <c_assign_atom_expr>
                break;
    540c:	e7e0      	b.n	53d0 <c_assign+0x1c>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    540e:	292b      	cmp	r1, #43	; 0x2b
    5410:	d030      	beq.n	5474 <c_assign+0xc0>
    5412:	2990      	cmp	r1, #144	; 0x90
    5414:	d1d8      	bne.n	53c8 <c_assign+0x14>
                if (assign_kind != ASSIGN_STORE) {
    5416:	2a00      	cmp	r2, #0
    5418:	d1d6      	bne.n	53c8 <c_assign+0x14>
                c_assign_tuple(comp, MP_PARSE_NODE_NULL, MP_PARSE_NODE_STRUCT_NUM_NODES(pns), pns->nodes);
    541a:	3308      	adds	r3, #8
    541c:	0a22      	lsrs	r2, r4, #8
    541e:	2100      	movs	r1, #0
    5420:	f000 f860 	bl	54e4 <c_assign_tuple>
                break;
    5424:	e7d4      	b.n	53d0 <c_assign+0x1c>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5426:	6899      	ldr	r1, [r3, #8]
    5428:	2900      	cmp	r1, #0
    542a:	d0cd      	beq.n	53c8 <c_assign+0x14>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    542c:	f011 0f03 	tst.w	r1, #3
    5430:	d119      	bne.n	5466 <c_assign+0xb2>
    5432:	460c      	mov	r4, r1
    5434:	7909      	ldrb	r1, [r1, #4]
    5436:	298a      	cmp	r1, #138	; 0x8a
    5438:	d115      	bne.n	5466 <c_assign+0xb2>
                    if (assign_kind != ASSIGN_STORE) {
    543a:	2a00      	cmp	r2, #0
    543c:	d1c4      	bne.n	53c8 <c_assign+0x14>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    543e:	68e1      	ldr	r1, [r4, #12]
    5440:	b151      	cbz	r1, 5458 <c_assign+0xa4>
    5442:	f011 0f03 	tst.w	r1, #3
    5446:	d107      	bne.n	5458 <c_assign+0xa4>
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    5448:	684a      	ldr	r2, [r1, #4]
    544a:	b2d5      	uxtb	r5, r2
    544c:	2d8d      	cmp	r5, #141	; 0x8d
    544e:	d027      	beq.n	54a0 <c_assign+0xec>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    5450:	2d8e      	cmp	r5, #142	; 0x8e
    5452:	d034      	beq.n	54be <c_assign+0x10a>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    5454:	2d9f      	cmp	r5, #159	; 0x9f
    5456:	d0b7      	beq.n	53c8 <c_assign+0x14>
            c_assign_tuple(comp, MP_PARSE_NODE_NULL, 2, pns->nodes);
    5458:	f104 0308 	add.w	r3, r4, #8
    545c:	2202      	movs	r2, #2
    545e:	2100      	movs	r1, #0
    5460:	f000 f840 	bl	54e4 <c_assign_tuple>
    5464:	e7b4      	b.n	53d0 <c_assign+0x1c>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    5466:	4b1d      	ldr	r3, [pc, #116]	; (54dc <c_assign+0x128>)
    5468:	4a1a      	ldr	r2, [pc, #104]	; (54d4 <c_assign+0x120>)
    546a:	f240 11e1 	movw	r1, #481	; 0x1e1
    546e:	481a      	ldr	r0, [pc, #104]	; (54d8 <c_assign+0x124>)
    5470:	f013 f874 	bl	1855c <__assert_func>
                if (assign_kind != ASSIGN_STORE) {
    5474:	2a00      	cmp	r2, #0
    5476:	d1a7      	bne.n	53c8 <c_assign+0x14>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5478:	6899      	ldr	r1, [r3, #8]
    547a:	b159      	cbz	r1, 5494 <c_assign+0xe0>
                } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    547c:	f011 0f03 	tst.w	r1, #3
    5480:	d103      	bne.n	548a <c_assign+0xd6>
    5482:	460c      	mov	r4, r1
    5484:	790a      	ldrb	r2, [r1, #4]
    5486:	2a8a      	cmp	r2, #138	; 0x8a
    5488:	d0d9      	beq.n	543e <c_assign+0x8a>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    548a:	2300      	movs	r3, #0
    548c:	461a      	mov	r2, r3
    548e:	f000 f829 	bl	54e4 <c_assign_tuple>
    5492:	e79d      	b.n	53d0 <c_assign+0x1c>
                    c_assign_tuple(comp, MP_PARSE_NODE_NULL, 0, NULL);
    5494:	2300      	movs	r3, #0
    5496:	461a      	mov	r2, r3
    5498:	4619      	mov	r1, r3
    549a:	f000 f823 	bl	54e4 <c_assign_tuple>
    549e:	e797      	b.n	53d0 <c_assign+0x1c>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    54a0:	688b      	ldr	r3, [r1, #8]
    54a2:	b92b      	cbnz	r3, 54b0 <c_assign+0xfc>
                c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    54a4:	2300      	movs	r3, #0
    54a6:	461a      	mov	r2, r3
    54a8:	68a1      	ldr	r1, [r4, #8]
    54aa:	f000 f81b 	bl	54e4 <c_assign_tuple>
    54ae:	e78f      	b.n	53d0 <c_assign+0x1c>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    54b0:	4b0b      	ldr	r3, [pc, #44]	; (54e0 <c_assign+0x12c>)
    54b2:	4a08      	ldr	r2, [pc, #32]	; (54d4 <c_assign+0x120>)
    54b4:	f240 2106 	movw	r1, #518	; 0x206
    54b8:	4807      	ldr	r0, [pc, #28]	; (54d8 <c_assign+0x124>)
    54ba:	f013 f84f 	bl	1855c <__assert_func>
                c_assign_tuple(comp, pns->nodes[0], n, pns2->nodes);
    54be:	f101 0308 	add.w	r3, r1, #8
    54c2:	0a12      	lsrs	r2, r2, #8
    54c4:	68a1      	ldr	r1, [r4, #8]
    54c6:	f000 f80d 	bl	54e4 <c_assign_tuple>
    54ca:	e781      	b.n	53d0 <c_assign+0x1c>
    54cc:	0002455c 	.word	0x0002455c
    54d0:	00024488 	.word	0x00024488
    54d4:	00024220 	.word	0x00024220
    54d8:	00024fdc 	.word	0x00024fdc
    54dc:	000244a4 	.word	0x000244a4
    54e0:	000244e4 	.word	0x000244e4

000054e4 <c_assign_tuple>:
STATIC void c_assign_tuple(compiler_t *comp, mp_parse_node_t node_head, uint num_tail, mp_parse_node_t *nodes_tail) {
    54e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54e8:	4680      	mov	r8, r0
    54ea:	4615      	mov	r5, r2
    54ec:	461e      	mov	r6, r3
    uint num_head = (node_head == MP_PARSE_NODE_NULL) ? 0 : 1;
    54ee:	f1b1 0a00 	subs.w	sl, r1, #0
    54f2:	bf14      	ite	ne
    54f4:	f04f 0901 	movne.w	r9, #1
    54f8:	f04f 0900 	moveq.w	r9, #0
    if (num_head != 0 && MP_PARSE_NODE_IS_STRUCT_KIND(node_head, PN_star_expr)) {
    54fc:	d00f      	beq.n	551e <c_assign_tuple+0x3a>
    54fe:	f01a 0f03 	tst.w	sl, #3
    5502:	d110      	bne.n	5526 <c_assign_tuple+0x42>
    5504:	f89a 3004 	ldrb.w	r3, [sl, #4]
    5508:	2b20      	cmp	r3, #32
    550a:	d002      	beq.n	5512 <c_assign_tuple+0x2e>
    uint have_star_index = -1;
    550c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    5510:	e007      	b.n	5522 <c_assign_tuple+0x3e>
        EMIT_ARG(unpack_ex, 0, num_tail);
    5512:	2100      	movs	r1, #0
    5514:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5516:	f003 f9ba 	bl	888e <mp_emit_bc_unpack_ex>
        have_star_index = 0;
    551a:	2700      	movs	r7, #0
    551c:	e001      	b.n	5522 <c_assign_tuple+0x3e>
    uint have_star_index = -1;
    551e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    5522:	2400      	movs	r4, #0
    5524:	e009      	b.n	553a <c_assign_tuple+0x56>
    5526:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    552a:	e7fa      	b.n	5522 <c_assign_tuple+0x3e>
                compile_syntax_error(comp, nodes_tail[i], "multiple *x in assignment");
    552c:	4a28      	ldr	r2, [pc, #160]	; (55d0 <c_assign_tuple+0xec>)
    552e:	4640      	mov	r0, r8
    5530:	f7ff fd14 	bl	4f5c <compile_syntax_error>
}
    5534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (uint i = 0; i < num_tail; i++) {
    5538:	3401      	adds	r4, #1
    553a:	42ac      	cmp	r4, r5
    553c:	d216      	bcs.n	556c <c_assign_tuple+0x88>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes_tail[i], PN_star_expr)) {
    553e:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    5542:	2900      	cmp	r1, #0
    5544:	d0f8      	beq.n	5538 <c_assign_tuple+0x54>
    5546:	f011 0f03 	tst.w	r1, #3
    554a:	d1f5      	bne.n	5538 <c_assign_tuple+0x54>
    554c:	790b      	ldrb	r3, [r1, #4]
    554e:	2b20      	cmp	r3, #32
    5550:	d1f2      	bne.n	5538 <c_assign_tuple+0x54>
            if (have_star_index == (uint)-1) {
    5552:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    5556:	d1e9      	bne.n	552c <c_assign_tuple+0x48>
                EMIT_ARG(unpack_ex, num_head + i, num_tail - i - 1);
    5558:	eb04 0709 	add.w	r7, r4, r9
    555c:	1b2a      	subs	r2, r5, r4
    555e:	3a01      	subs	r2, #1
    5560:	4639      	mov	r1, r7
    5562:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    5566:	f003 f992 	bl	888e <mp_emit_bc_unpack_ex>
    556a:	e7e5      	b.n	5538 <c_assign_tuple+0x54>
    if (have_star_index == (uint)-1) {
    556c:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    5570:	d00b      	beq.n	558a <c_assign_tuple+0xa6>
    if (num_head != 0) {
    5572:	f1ba 0f00 	cmp.w	sl, #0
    5576:	d006      	beq.n	5586 <c_assign_tuple+0xa2>
        if (0 == have_star_index) {
    5578:	b977      	cbnz	r7, 5598 <c_assign_tuple+0xb4>
            c_assign(comp, ((mp_parse_node_struct_t*)node_head)->nodes[0], ASSIGN_STORE);
    557a:	2200      	movs	r2, #0
    557c:	f8da 1008 	ldr.w	r1, [sl, #8]
    5580:	4640      	mov	r0, r8
    5582:	f7ff ff17 	bl	53b4 <c_assign>
    uint have_star_index = -1;
    5586:	2400      	movs	r4, #0
    5588:	e014      	b.n	55b4 <c_assign_tuple+0xd0>
        EMIT_ARG(unpack_sequence, num_head + num_tail);
    558a:	eb09 0105 	add.w	r1, r9, r5
    558e:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    5592:	f003 f970 	bl	8876 <mp_emit_bc_unpack_sequence>
    5596:	e7ec      	b.n	5572 <c_assign_tuple+0x8e>
            c_assign(comp, node_head, ASSIGN_STORE);
    5598:	2200      	movs	r2, #0
    559a:	4651      	mov	r1, sl
    559c:	4640      	mov	r0, r8
    559e:	f7ff ff09 	bl	53b4 <c_assign>
    55a2:	e7f0      	b.n	5586 <c_assign_tuple+0xa2>
            c_assign(comp, ((mp_parse_node_struct_t*)nodes_tail[i])->nodes[0], ASSIGN_STORE);
    55a4:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    55a8:	2200      	movs	r2, #0
    55aa:	6899      	ldr	r1, [r3, #8]
    55ac:	4640      	mov	r0, r8
    55ae:	f7ff ff01 	bl	53b4 <c_assign>
    for (uint i = 0; i < num_tail; i++) {
    55b2:	3401      	adds	r4, #1
    55b4:	42ac      	cmp	r4, r5
    55b6:	d2bd      	bcs.n	5534 <c_assign_tuple+0x50>
        if (num_head + i == have_star_index) {
    55b8:	eb04 0309 	add.w	r3, r4, r9
    55bc:	42bb      	cmp	r3, r7
    55be:	d0f1      	beq.n	55a4 <c_assign_tuple+0xc0>
            c_assign(comp, nodes_tail[i], ASSIGN_STORE);
    55c0:	2200      	movs	r2, #0
    55c2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    55c6:	4640      	mov	r0, r8
    55c8:	f7ff fef4 	bl	53b4 <c_assign>
    55cc:	e7f1      	b.n	55b2 <c_assign_tuple+0xce>
    55ce:	bf00      	nop
    55d0:	00024578 	.word	0x00024578

000055d4 <c_if_cond>:
STATIC void c_if_cond(compiler_t *comp, mp_parse_node_t pn, bool jump_if, int label) {
    55d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55d8:	4606      	mov	r6, r0
    55da:	460c      	mov	r4, r1
    55dc:	4615      	mov	r5, r2
    55de:	461f      	mov	r7, r3
    if (mp_parse_node_is_const_false(pn)) {
    55e0:	4608      	mov	r0, r1
    55e2:	f7fe fe7d 	bl	42e0 <mp_parse_node_is_const_false>
    55e6:	b138      	cbz	r0, 55f8 <c_if_cond+0x24>
        if (jump_if == false) {
    55e8:	b10d      	cbz	r5, 55ee <c_if_cond+0x1a>
}
    55ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EMIT_ARG(jump, label);
    55ee:	4639      	mov	r1, r7
    55f0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    55f2:	f002 ffe4 	bl	85be <mp_emit_bc_jump>
    55f6:	e7f8      	b.n	55ea <c_if_cond+0x16>
    } else if (mp_parse_node_is_const_true(pn)) {
    55f8:	4620      	mov	r0, r4
    55fa:	f7fe fe80 	bl	42fe <mp_parse_node_is_const_true>
    55fe:	b130      	cbz	r0, 560e <c_if_cond+0x3a>
        if (jump_if == true) {
    5600:	2d00      	cmp	r5, #0
    5602:	d0f2      	beq.n	55ea <c_if_cond+0x16>
            EMIT_ARG(jump, label);
    5604:	4639      	mov	r1, r7
    5606:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5608:	f002 ffd9 	bl	85be <mp_emit_bc_jump>
    560c:	e7ed      	b.n	55ea <c_if_cond+0x16>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    560e:	b17c      	cbz	r4, 5630 <c_if_cond+0x5c>
    5610:	f014 0f03 	tst.w	r4, #3
    5614:	d10c      	bne.n	5630 <c_if_cond+0x5c>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5616:	46a1      	mov	r9, r4
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5618:	6863      	ldr	r3, [r4, #4]
    561a:	ea4f 2813 	mov.w	r8, r3, lsr #8
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test) {
    561e:	b2db      	uxtb	r3, r3
    5620:	2b1c      	cmp	r3, #28
    5622:	d00f      	beq.n	5644 <c_if_cond+0x70>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
    5624:	2b1d      	cmp	r3, #29
    5626:	d041      	beq.n	56ac <c_if_cond+0xd8>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_not_test_2) {
    5628:	2b1e      	cmp	r3, #30
    562a:	d043      	beq.n	56b4 <c_if_cond+0xe0>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_atom_paren) {
    562c:	2b2a      	cmp	r3, #42	; 0x2a
    562e:	d049      	beq.n	56c4 <c_if_cond+0xf0>
    compile_node(comp, pn);
    5630:	4621      	mov	r1, r4
    5632:	4630      	mov	r0, r6
    5634:	f7ff fdcc 	bl	51d0 <compile_node>
    EMIT_ARG(pop_jump_if, jump_if, label);
    5638:	463a      	mov	r2, r7
    563a:	4629      	mov	r1, r5
    563c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    563e:	f002 ffca 	bl	85d6 <mp_emit_bc_pop_jump_if>
    5642:	e7d2      	b.n	55ea <c_if_cond+0x16>
            if (jump_if == false) {
    5644:	b10d      	cbz	r5, 564a <c_if_cond+0x76>
            and_or_logic2:
    5646:	2400      	movs	r4, #0
    5648:	e02d      	b.n	56a6 <c_if_cond+0xd2>
                uint label2 = comp_next_label(comp);
    564a:	4630      	mov	r0, r6
    564c:	f7ff fb5a 	bl	4d04 <comp_next_label>
    5650:	4683      	mov	fp, r0
                for (int i = 0; i < n - 1; i++) {
    5652:	f04f 0a00 	mov.w	sl, #0
    5656:	e00b      	b.n	5670 <c_if_cond+0x9c>
                    c_if_cond(comp, pns->nodes[i], !jump_if, label2);
    5658:	f10a 0102 	add.w	r1, sl, #2
    565c:	465b      	mov	r3, fp
    565e:	f085 0201 	eor.w	r2, r5, #1
    5662:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
    5666:	4630      	mov	r0, r6
    5668:	f7ff ffb4 	bl	55d4 <c_if_cond>
                for (int i = 0; i < n - 1; i++) {
    566c:	f10a 0a01 	add.w	sl, sl, #1
    5670:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    5674:	4553      	cmp	r3, sl
    5676:	dcef      	bgt.n	5658 <c_if_cond+0x84>
                c_if_cond(comp, pns->nodes[n - 1], jump_if, label);
    5678:	f108 0101 	add.w	r1, r8, #1
    567c:	463b      	mov	r3, r7
    567e:	462a      	mov	r2, r5
    5680:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    5684:	4630      	mov	r0, r6
    5686:	f7ff ffa5 	bl	55d4 <c_if_cond>
                EMIT_ARG(label_assign, label2);
    568a:	4659      	mov	r1, fp
    568c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    568e:	f002 fe33 	bl	82f8 <mp_emit_bc_label_assign>
    5692:	e7aa      	b.n	55ea <c_if_cond+0x16>
                    c_if_cond(comp, pns->nodes[i], jump_if, label);
    5694:	1ca1      	adds	r1, r4, #2
    5696:	463b      	mov	r3, r7
    5698:	462a      	mov	r2, r5
    569a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
    569e:	4630      	mov	r0, r6
    56a0:	f7ff ff98 	bl	55d4 <c_if_cond>
                for (int i = 0; i < n; i++) {
    56a4:	3401      	adds	r4, #1
    56a6:	4544      	cmp	r4, r8
    56a8:	dbf4      	blt.n	5694 <c_if_cond+0xc0>
    56aa:	e79e      	b.n	55ea <c_if_cond+0x16>
            if (jump_if == false) {
    56ac:	2d00      	cmp	r5, #0
    56ae:	d1cc      	bne.n	564a <c_if_cond+0x76>
            and_or_logic2:
    56b0:	2400      	movs	r4, #0
    56b2:	e7f8      	b.n	56a6 <c_if_cond+0xd2>
            c_if_cond(comp, pns->nodes[0], !jump_if, label);
    56b4:	463b      	mov	r3, r7
    56b6:	f085 0201 	eor.w	r2, r5, #1
    56ba:	68a1      	ldr	r1, [r4, #8]
    56bc:	4630      	mov	r0, r6
    56be:	f7ff ff89 	bl	55d4 <c_if_cond>
            return;
    56c2:	e792      	b.n	55ea <c_if_cond+0x16>
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    56c4:	68a3      	ldr	r3, [r4, #8]
    56c6:	b933      	cbnz	r3, 56d6 <c_if_cond+0x102>
                if (jump_if == false) {
    56c8:	2d00      	cmp	r5, #0
    56ca:	d18e      	bne.n	55ea <c_if_cond+0x16>
                    EMIT_ARG(jump, label);
    56cc:	4639      	mov	r1, r7
    56ce:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    56d0:	f002 ff75 	bl	85be <mp_emit_bc_jump>
    56d4:	e789      	b.n	55ea <c_if_cond+0x16>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    56d6:	f013 0f03 	tst.w	r3, #3
    56da:	d109      	bne.n	56f0 <c_if_cond+0x11c>
    56dc:	791b      	ldrb	r3, [r3, #4]
    56de:	2b8a      	cmp	r3, #138	; 0x8a
    56e0:	d106      	bne.n	56f0 <c_if_cond+0x11c>
                if (jump_if == true) {
    56e2:	2d00      	cmp	r5, #0
    56e4:	d081      	beq.n	55ea <c_if_cond+0x16>
                    EMIT_ARG(jump, label);
    56e6:	4639      	mov	r1, r7
    56e8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    56ea:	f002 ff68 	bl	85be <mp_emit_bc_jump>
    56ee:	e77c      	b.n	55ea <c_if_cond+0x16>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    56f0:	4b03      	ldr	r3, [pc, #12]	; (5700 <c_if_cond+0x12c>)
    56f2:	4a04      	ldr	r2, [pc, #16]	; (5704 <c_if_cond+0x130>)
    56f4:	f240 114b 	movw	r1, #331	; 0x14b
    56f8:	4803      	ldr	r0, [pc, #12]	; (5708 <c_if_cond+0x134>)
    56fa:	f012 ff2f 	bl	1855c <__assert_func>
    56fe:	bf00      	nop
    5700:	000244a4 	.word	0x000244a4
    5704:	00024200 	.word	0x00024200
    5708:	00024fdc 	.word	0x00024fdc

0000570c <compile_scope_comp_iter>:
STATIC void compile_scope_comp_iter(compiler_t *comp, mp_parse_node_struct_t *pns_comp_for, mp_parse_node_t pn_inner_expr, int for_depth) {
    570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5710:	4605      	mov	r5, r0
    5712:	460c      	mov	r4, r1
    5714:	4692      	mov	sl, r2
    5716:	4699      	mov	r9, r3
    uint l_top = comp_next_label(comp);
    5718:	f7ff faf4 	bl	4d04 <comp_next_label>
    571c:	4606      	mov	r6, r0
    uint l_end = comp_next_label(comp);
    571e:	4628      	mov	r0, r5
    5720:	f7ff faf0 	bl	4d04 <comp_next_label>
    5724:	4680      	mov	r8, r0
    EMIT_ARG(label_assign, l_top);
    5726:	4631      	mov	r1, r6
    5728:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    572a:	f002 fde5 	bl	82f8 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, l_end);
    572e:	4641      	mov	r1, r8
    5730:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5732:	f002 ffe9 	bl	8708 <mp_emit_bc_for_iter>
    c_assign(comp, pns_comp_for->nodes[0], ASSIGN_STORE);
    5736:	2200      	movs	r2, #0
    5738:	68a1      	ldr	r1, [r4, #8]
    573a:	4628      	mov	r0, r5
    573c:	f7ff fe3a 	bl	53b4 <c_assign>
    mp_parse_node_t pn_iter = pns_comp_for->nodes[2];
    5740:	6924      	ldr	r4, [r4, #16]
    if (MP_PARSE_NODE_IS_NULL(pn_iter)) {
    5742:	b154      	cbz	r4, 575a <compile_scope_comp_iter+0x4e>
    } else if (MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_if) {
    5744:	7923      	ldrb	r3, [r4, #4]
    5746:	2ba0      	cmp	r3, #160	; 0xa0
    5748:	d11d      	bne.n	5786 <compile_scope_comp_iter+0x7a>
        c_if_cond(comp, pns_comp_if->nodes[0], false, l_top);
    574a:	4633      	mov	r3, r6
    574c:	2200      	movs	r2, #0
    574e:	68a1      	ldr	r1, [r4, #8]
    5750:	4628      	mov	r0, r5
    5752:	f7ff ff3f 	bl	55d4 <c_if_cond>
        pn_iter = pns_comp_if->nodes[1];
    5756:	68e4      	ldr	r4, [r4, #12]
        goto tail_recursion;
    5758:	e7f3      	b.n	5742 <compile_scope_comp_iter+0x36>
        compile_node(comp, pn_inner_expr);
    575a:	4651      	mov	r1, sl
    575c:	4628      	mov	r0, r5
    575e:	f7ff fd37 	bl	51d0 <compile_node>
        if (comp->scope_cur->kind == SCOPE_GEN_EXPR) {
    5762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5764:	7819      	ldrb	r1, [r3, #0]
    5766:	2906      	cmp	r1, #6
    5768:	d006      	beq.n	5778 <compile_scope_comp_iter+0x6c>
            EMIT_ARG(store_comp, comp->scope_cur->kind, 4 * for_depth + 5);
    576a:	ea4f 0289 	mov.w	r2, r9, lsl #2
    576e:	3205      	adds	r2, #5
    5770:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5772:	f003 f86c 	bl	884e <mp_emit_bc_store_comp>
    5776:	e017      	b.n	57a8 <compile_scope_comp_iter+0x9c>
            EMIT(yield_value);
    5778:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    577a:	f003 f923 	bl	89c4 <mp_emit_bc_yield_value>
            EMIT(pop_top);
    577e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5780:	f002 fee6 	bl	8550 <mp_emit_bc_pop_top>
    5784:	e010      	b.n	57a8 <compile_scope_comp_iter+0x9c>
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    5786:	2b9f      	cmp	r3, #159	; 0x9f
    5788:	d11b      	bne.n	57c2 <compile_scope_comp_iter+0xb6>
        compile_node(comp, pns_comp_for2->nodes[1]);
    578a:	68e1      	ldr	r1, [r4, #12]
    578c:	4628      	mov	r0, r5
    578e:	f7ff fd1f 	bl	51d0 <compile_node>
        EMIT_ARG(get_iter, true);
    5792:	2101      	movs	r1, #1
    5794:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5796:	f002 ffa5 	bl	86e4 <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for2, pn_inner_expr, for_depth + 1);
    579a:	f109 0301 	add.w	r3, r9, #1
    579e:	4652      	mov	r2, sl
    57a0:	4621      	mov	r1, r4
    57a2:	4628      	mov	r0, r5
    57a4:	f7ff ffb2 	bl	570c <compile_scope_comp_iter>
    EMIT_ARG(jump, l_top);
    57a8:	4631      	mov	r1, r6
    57aa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    57ac:	f002 ff07 	bl	85be <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_end);
    57b0:	4641      	mov	r1, r8
    57b2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    57b4:	f002 fda0 	bl	82f8 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    57b8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    57ba:	f002 ffb1 	bl	8720 <mp_emit_bc_for_iter_end>
}
    57be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    57c2:	4b03      	ldr	r3, [pc, #12]	; (57d0 <compile_scope_comp_iter+0xc4>)
    57c4:	4a03      	ldr	r2, [pc, #12]	; (57d4 <compile_scope_comp_iter+0xc8>)
    57c6:	f640 313d 	movw	r1, #2877	; 0xb3d
    57ca:	4803      	ldr	r0, [pc, #12]	; (57d8 <compile_scope_comp_iter+0xcc>)
    57cc:	f012 fec6 	bl	1855c <__assert_func>
    57d0:	00024d00 	.word	0x00024d00
    57d4:	00024448 	.word	0x00024448
    57d8:	00024fdc 	.word	0x00024fdc

000057dc <compile_scope>:
STATIC void compile_scope(compiler_t *comp, scope_t *scope, pass_kind_t pass) {
    57dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    57de:	b083      	sub	sp, #12
    57e0:	4604      	mov	r4, r0
    57e2:	460d      	mov	r5, r1
    57e4:	4611      	mov	r1, r2
    comp->pass = pass;
    57e6:	7142      	strb	r2, [r0, #5]
    comp->scope_cur = scope;
    57e8:	6245      	str	r5, [r0, #36]	; 0x24
    comp->next_label = 0;
    57ea:	2300      	movs	r3, #0
    57ec:	6103      	str	r3, [r0, #16]
    EMIT_ARG(start_pass, pass, scope);
    57ee:	462a      	mov	r2, r5
    57f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    57f2:	f002 fbd9 	bl	7fa8 <mp_emit_bc_start_pass>
    if (comp->pass == MP_PASS_SCOPE) {
    57f6:	7963      	ldrb	r3, [r4, #5]
    57f8:	2b01      	cmp	r3, #1
    57fa:	d051      	beq.n	58a0 <compile_scope+0xc4>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    57fc:	68ee      	ldr	r6, [r5, #12]
    57fe:	b12e      	cbz	r6, 580c <compile_scope+0x30>
    5800:	f016 0f03 	tst.w	r6, #3
    5804:	d102      	bne.n	580c <compile_scope+0x30>
    5806:	7933      	ldrb	r3, [r6, #4]
    5808:	2b38      	cmp	r3, #56	; 0x38
    580a:	d04d      	beq.n	58a8 <compile_scope+0xcc>
    } else if (scope->kind == SCOPE_MODULE) {
    580c:	782b      	ldrb	r3, [r5, #0]
    580e:	2b00      	cmp	r3, #0
    5810:	d05b      	beq.n	58ca <compile_scope+0xee>
    } else if (scope->kind == SCOPE_FUNCTION) {
    5812:	2b07      	cmp	r3, #7
    5814:	d06d      	beq.n	58f2 <compile_scope+0x116>
    } else if (scope->kind == SCOPE_LAMBDA) {
    5816:	2b02      	cmp	r3, #2
    5818:	f000 809d 	beq.w	5956 <compile_scope+0x17a>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    581c:	1eda      	subs	r2, r3, #3
    581e:	b2d2      	uxtb	r2, r2
    5820:	2a03      	cmp	r2, #3
    5822:	f200 8115 	bhi.w	5a50 <compile_scope+0x274>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    5826:	2e00      	cmp	r6, #0
    5828:	f000 80cb 	beq.w	59c2 <compile_scope+0x1e6>
    582c:	f016 0f03 	tst.w	r6, #3
    5830:	f040 80c7 	bne.w	59c2 <compile_scope+0x1e6>
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    5834:	6873      	ldr	r3, [r6, #4]
    5836:	0a1b      	lsrs	r3, r3, #8
    5838:	2b02      	cmp	r3, #2
    583a:	f040 80c9 	bne.w	59d0 <compile_scope+0x1f4>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    583e:	68f7      	ldr	r7, [r6, #12]
    5840:	2f00      	cmp	r7, #0
    5842:	f000 80cc 	beq.w	59de <compile_scope+0x202>
    5846:	f017 0f03 	tst.w	r7, #3
    584a:	f040 80c8 	bne.w	59de <compile_scope+0x202>
    584e:	793b      	ldrb	r3, [r7, #4]
    5850:	2b9f      	cmp	r3, #159	; 0x9f
    5852:	f040 80c4 	bne.w	59de <compile_scope+0x202>
        if (comp->pass == MP_PASS_SCOPE) {
    5856:	7963      	ldrb	r3, [r4, #5]
    5858:	2b01      	cmp	r3, #1
    585a:	f000 80c7 	beq.w	59ec <compile_scope+0x210>
        if (scope->kind == SCOPE_LIST_COMP) {
    585e:	782b      	ldrb	r3, [r5, #0]
    5860:	2b03      	cmp	r3, #3
    5862:	f000 80d8 	beq.w	5a16 <compile_scope+0x23a>
        } else if (scope->kind == SCOPE_DICT_COMP) {
    5866:	2b04      	cmp	r3, #4
    5868:	f000 80da 	beq.w	5a20 <compile_scope+0x244>
        if (scope->kind == SCOPE_GEN_EXPR) {
    586c:	782b      	ldrb	r3, [r5, #0]
    586e:	2b06      	cmp	r3, #6
    5870:	f000 80db 	beq.w	5a2a <compile_scope+0x24e>
            compile_load_id(comp, qstr_arg);
    5874:	2101      	movs	r1, #1
    5876:	4620      	mov	r0, r4
    5878:	f7ff fc6a 	bl	5150 <compile_load_id>
            EMIT_ARG(get_iter, true);
    587c:	2101      	movs	r1, #1
    587e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5880:	f002 ff30 	bl	86e4 <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for, pns->nodes[0], 0);
    5884:	2300      	movs	r3, #0
    5886:	68b2      	ldr	r2, [r6, #8]
    5888:	4639      	mov	r1, r7
    588a:	4620      	mov	r0, r4
    588c:	f7ff ff3e 	bl	570c <compile_scope_comp_iter>
        if (scope->kind == SCOPE_GEN_EXPR) {
    5890:	782b      	ldrb	r3, [r5, #0]
    5892:	2b06      	cmp	r3, #6
    5894:	f000 80d7 	beq.w	5a46 <compile_scope+0x26a>
        EMIT(return_value);
    5898:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    589a:	f003 f86a 	bl	8972 <mp_emit_bc_return_value>
    589e:	e01f      	b.n	58e0 <compile_scope+0x104>
        scope->stack_size = 0;
    58a0:	2300      	movs	r3, #0
    58a2:	846b      	strh	r3, [r5, #34]	; 0x22
        scope->exc_stack_size = 0;
    58a4:	84ab      	strh	r3, [r5, #36]	; 0x24
    58a6:	e7a9      	b.n	57fc <compile_scope+0x20>
        assert(scope->kind == SCOPE_MODULE);
    58a8:	782b      	ldrb	r3, [r5, #0]
    58aa:	b93b      	cbnz	r3, 58bc <compile_scope+0xe0>
        compile_node(comp, pns->nodes[0]); // compile the expression
    58ac:	68b1      	ldr	r1, [r6, #8]
    58ae:	4620      	mov	r0, r4
    58b0:	f7ff fc8e 	bl	51d0 <compile_node>
        EMIT(return_value);
    58b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    58b6:	f003 f85c 	bl	8972 <mp_emit_bc_return_value>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    58ba:	e011      	b.n	58e0 <compile_scope+0x104>
        assert(scope->kind == SCOPE_MODULE);
    58bc:	4b9c      	ldr	r3, [pc, #624]	; (5b30 <compile_scope+0x354>)
    58be:	4a9d      	ldr	r2, [pc, #628]	; (5b34 <compile_scope+0x358>)
    58c0:	f640 3186 	movw	r1, #2950	; 0xb86
    58c4:	489c      	ldr	r0, [pc, #624]	; (5b38 <compile_scope+0x35c>)
    58c6:	f012 fe49 	bl	1855c <__assert_func>
        compile_node(comp, scope->pn);
    58ca:	4631      	mov	r1, r6
    58cc:	4620      	mov	r0, r4
    58ce:	f7ff fc7f 	bl	51d0 <compile_node>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    58d2:	210e      	movs	r1, #14
    58d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    58d6:	f002 fd71 	bl	83bc <mp_emit_bc_load_const_tok>
        EMIT(return_value);
    58da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    58dc:	f003 f849 	bl	8972 <mp_emit_bc_return_value>
    EMIT(end_pass);
    58e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    58e2:	f002 fbf9 	bl	80d8 <mp_emit_bc_end_pass>
    assert(comp->cur_except_level == 0);
    58e6:	8ba3      	ldrh	r3, [r4, #28]
    58e8:	2b00      	cmp	r3, #0
    58ea:	f040 8119 	bne.w	5b20 <compile_scope+0x344>
}
    58ee:	b003      	add	sp, #12
    58f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    58f2:	b1ce      	cbz	r6, 5928 <compile_scope+0x14c>
    58f4:	f016 0f03 	tst.w	r6, #3
    58f8:	d116      	bne.n	5928 <compile_scope+0x14c>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    58fa:	7933      	ldrb	r3, [r6, #4]
    58fc:	2b03      	cmp	r3, #3
    58fe:	d11a      	bne.n	5936 <compile_scope+0x15a>
        if (comp->pass == MP_PASS_SCOPE) {
    5900:	7963      	ldrb	r3, [r4, #5]
    5902:	2b01      	cmp	r3, #1
    5904:	d01e      	beq.n	5944 <compile_scope+0x168>
        compile_node(comp, pns->nodes[3]); // 3 is function body
    5906:	6971      	ldr	r1, [r6, #20]
    5908:	4620      	mov	r0, r4
    590a:	f7ff fc61 	bl	51d0 <compile_node>
        if (!EMIT(last_emit_was_return_value)) {
    590e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5910:	f002 fc1e 	bl	8150 <mp_emit_bc_last_emit_was_return_value>
    5914:	2800      	cmp	r0, #0
    5916:	d1e3      	bne.n	58e0 <compile_scope+0x104>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    5918:	210e      	movs	r1, #14
    591a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    591c:	f002 fd4e 	bl	83bc <mp_emit_bc_load_const_tok>
            EMIT(return_value);
    5920:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5922:	f003 f826 	bl	8972 <mp_emit_bc_return_value>
    5926:	e7db      	b.n	58e0 <compile_scope+0x104>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    5928:	4b84      	ldr	r3, [pc, #528]	; (5b3c <compile_scope+0x360>)
    592a:	4a82      	ldr	r2, [pc, #520]	; (5b34 <compile_scope+0x358>)
    592c:	f640 3192 	movw	r1, #2962	; 0xb92
    5930:	4881      	ldr	r0, [pc, #516]	; (5b38 <compile_scope+0x35c>)
    5932:	f012 fe13 	bl	1855c <__assert_func>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    5936:	4b82      	ldr	r3, [pc, #520]	; (5b40 <compile_scope+0x364>)
    5938:	4a7e      	ldr	r2, [pc, #504]	; (5b34 <compile_scope+0x358>)
    593a:	f640 3194 	movw	r1, #2964	; 0xb94
    593e:	487e      	ldr	r0, [pc, #504]	; (5b38 <compile_scope+0x35c>)
    5940:	f012 fe0c 	bl	1855c <__assert_func>
            comp->have_star = false;
    5944:	2300      	movs	r3, #0
    5946:	71a3      	strb	r3, [r4, #6]
            apply_to_single_or_list(comp, pns->nodes[1], PN_typedargslist, compile_scope_func_param);
    5948:	4b7e      	ldr	r3, [pc, #504]	; (5b44 <compile_scope+0x368>)
    594a:	223e      	movs	r2, #62	; 0x3e
    594c:	68f1      	ldr	r1, [r6, #12]
    594e:	4620      	mov	r0, r4
    5950:	f7ff f9e7 	bl	4d22 <apply_to_single_or_list>
    5954:	e7d7      	b.n	5906 <compile_scope+0x12a>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    5956:	b1ae      	cbz	r6, 5984 <compile_scope+0x1a8>
    5958:	f016 0f03 	tst.w	r6, #3
    595c:	d112      	bne.n	5984 <compile_scope+0x1a8>
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    595e:	6873      	ldr	r3, [r6, #4]
    5960:	0a1b      	lsrs	r3, r3, #8
    5962:	2b03      	cmp	r3, #3
    5964:	d115      	bne.n	5992 <compile_scope+0x1b6>
        if (comp->pass == MP_PASS_SCOPE) {
    5966:	7963      	ldrb	r3, [r4, #5]
    5968:	2b01      	cmp	r3, #1
    596a:	d019      	beq.n	59a0 <compile_scope+0x1c4>
        compile_node(comp, pns->nodes[1]); // 1 is lambda body
    596c:	68f1      	ldr	r1, [r6, #12]
    596e:	4620      	mov	r0, r4
    5970:	f7ff fc2e 	bl	51d0 <compile_node>
        if (scope->scope_flags & MP_SCOPE_FLAG_GENERATOR) {
    5974:	7e2b      	ldrb	r3, [r5, #24]
    5976:	f013 0f04 	tst.w	r3, #4
    597a:	d11a      	bne.n	59b2 <compile_scope+0x1d6>
        EMIT(return_value);
    597c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    597e:	f002 fff8 	bl	8972 <mp_emit_bc_return_value>
    5982:	e7ad      	b.n	58e0 <compile_scope+0x104>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    5984:	4b6d      	ldr	r3, [pc, #436]	; (5b3c <compile_scope+0x360>)
    5986:	4a6b      	ldr	r2, [pc, #428]	; (5b34 <compile_scope+0x358>)
    5988:	f640 31b9 	movw	r1, #3001	; 0xbb9
    598c:	486a      	ldr	r0, [pc, #424]	; (5b38 <compile_scope+0x35c>)
    598e:	f012 fde5 	bl	1855c <__assert_func>
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    5992:	4b6d      	ldr	r3, [pc, #436]	; (5b48 <compile_scope+0x36c>)
    5994:	4a67      	ldr	r2, [pc, #412]	; (5b34 <compile_scope+0x358>)
    5996:	f640 31bb 	movw	r1, #3003	; 0xbbb
    599a:	4867      	ldr	r0, [pc, #412]	; (5b38 <compile_scope+0x35c>)
    599c:	f012 fdde 	bl	1855c <__assert_func>
            comp->have_star = false;
    59a0:	2300      	movs	r3, #0
    59a2:	71a3      	strb	r3, [r4, #6]
            apply_to_single_or_list(comp, pns->nodes[0], PN_varargslist, compile_scope_lambda_param);
    59a4:	4b69      	ldr	r3, [pc, #420]	; (5b4c <compile_scope+0x370>)
    59a6:	2246      	movs	r2, #70	; 0x46
    59a8:	68b1      	ldr	r1, [r6, #8]
    59aa:	4620      	mov	r0, r4
    59ac:	f7ff f9b9 	bl	4d22 <apply_to_single_or_list>
    59b0:	e7dc      	b.n	596c <compile_scope+0x190>
            EMIT(pop_top);
    59b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    59b4:	f002 fdcc 	bl	8550 <mp_emit_bc_pop_top>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    59b8:	210e      	movs	r1, #14
    59ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    59bc:	f002 fcfe 	bl	83bc <mp_emit_bc_load_const_tok>
    59c0:	e7dc      	b.n	597c <compile_scope+0x1a0>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    59c2:	4b5e      	ldr	r3, [pc, #376]	; (5b3c <compile_scope+0x360>)
    59c4:	4a5b      	ldr	r2, [pc, #364]	; (5b34 <compile_scope+0x358>)
    59c6:	f640 31cf 	movw	r1, #3023	; 0xbcf
    59ca:	485b      	ldr	r0, [pc, #364]	; (5b38 <compile_scope+0x35c>)
    59cc:	f012 fdc6 	bl	1855c <__assert_func>
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    59d0:	4b5f      	ldr	r3, [pc, #380]	; (5b50 <compile_scope+0x374>)
    59d2:	4a58      	ldr	r2, [pc, #352]	; (5b34 <compile_scope+0x358>)
    59d4:	f640 31d1 	movw	r1, #3025	; 0xbd1
    59d8:	4857      	ldr	r0, [pc, #348]	; (5b38 <compile_scope+0x35c>)
    59da:	f012 fdbf 	bl	1855c <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    59de:	4b5d      	ldr	r3, [pc, #372]	; (5b54 <compile_scope+0x378>)
    59e0:	4a54      	ldr	r2, [pc, #336]	; (5b34 <compile_scope+0x358>)
    59e2:	f640 31d2 	movw	r1, #3026	; 0xbd2
    59e6:	4854      	ldr	r0, [pc, #336]	; (5b38 <compile_scope+0x35c>)
    59e8:	f012 fdb8 	bl	1855c <__assert_func>
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qstr_arg, &added);
    59ec:	f10d 0207 	add.w	r2, sp, #7
    59f0:	2101      	movs	r1, #1
    59f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    59f4:	f7ff f8f0 	bl	4bd8 <scope_find_or_add_id>
            assert(added);
    59f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    59fc:	b123      	cbz	r3, 5a08 <compile_scope+0x22c>
            id_info->kind = ID_INFO_KIND_LOCAL;
    59fe:	2302      	movs	r3, #2
    5a00:	7003      	strb	r3, [r0, #0]
            scope->num_pos_args = 1;
    5a02:	2301      	movs	r3, #1
    5a04:	836b      	strh	r3, [r5, #26]
    5a06:	e72a      	b.n	585e <compile_scope+0x82>
            assert(added);
    5a08:	4b53      	ldr	r3, [pc, #332]	; (5b58 <compile_scope+0x37c>)
    5a0a:	4a4a      	ldr	r2, [pc, #296]	; (5b34 <compile_scope+0x358>)
    5a0c:	f640 31dd 	movw	r1, #3037	; 0xbdd
    5a10:	4849      	ldr	r0, [pc, #292]	; (5b38 <compile_scope+0x35c>)
    5a12:	f012 fda3 	bl	1855c <__assert_func>
            EMIT_ARG(build_list, 0);
    5a16:	2100      	movs	r1, #0
    5a18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a1a:	f002 fef4 	bl	8806 <mp_emit_bc_build_list>
    5a1e:	e725      	b.n	586c <compile_scope+0x90>
            EMIT_ARG(build_map, 0);
    5a20:	2100      	movs	r1, #0
    5a22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a24:	f002 fefc 	bl	8820 <mp_emit_bc_build_map>
    5a28:	e720      	b.n	586c <compile_scope+0x90>
            EMIT(load_null);
    5a2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a2c:	f002 fd27 	bl	847e <mp_emit_bc_load_null>
            compile_load_id(comp, qstr_arg);
    5a30:	2101      	movs	r1, #1
    5a32:	4620      	mov	r0, r4
    5a34:	f7ff fb8c 	bl	5150 <compile_load_id>
            EMIT(load_null);
    5a38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a3a:	f002 fd20 	bl	847e <mp_emit_bc_load_null>
            EMIT(load_null);
    5a3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a40:	f002 fd1d 	bl	847e <mp_emit_bc_load_null>
    5a44:	e71e      	b.n	5884 <compile_scope+0xa8>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    5a46:	210e      	movs	r1, #14
    5a48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a4a:	f002 fcb7 	bl	83bc <mp_emit_bc_load_const_tok>
    5a4e:	e723      	b.n	5898 <compile_scope+0xbc>
        assert(scope->kind == SCOPE_CLASS);
    5a50:	2b01      	cmp	r3, #1
    5a52:	d131      	bne.n	5ab8 <compile_scope+0x2dc>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    5a54:	2e00      	cmp	r6, #0
    5a56:	d036      	beq.n	5ac6 <compile_scope+0x2ea>
    5a58:	f016 0f03 	tst.w	r6, #3
    5a5c:	d133      	bne.n	5ac6 <compile_scope+0x2ea>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    5a5e:	7933      	ldrb	r3, [r6, #4]
    5a60:	2b33      	cmp	r3, #51	; 0x33
    5a62:	d137      	bne.n	5ad4 <compile_scope+0x2f8>
        if (comp->pass == MP_PASS_SCOPE) {
    5a64:	7963      	ldrb	r3, [r4, #5]
    5a66:	2b01      	cmp	r3, #1
    5a68:	d03b      	beq.n	5ae2 <compile_scope+0x306>
        compile_load_id(comp, MP_QSTR___name__);
    5a6a:	211c      	movs	r1, #28
    5a6c:	4620      	mov	r0, r4
    5a6e:	f7ff fb6f 	bl	5150 <compile_load_id>
        compile_store_id(comp, MP_QSTR___module__);
    5a72:	211b      	movs	r1, #27
    5a74:	4620      	mov	r0, r4
    5a76:	f7ff fb7d 	bl	5174 <compile_store_id>
        EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // 0 is class name
    5a7a:	68b1      	ldr	r1, [r6, #8]
    5a7c:	0909      	lsrs	r1, r1, #4
    5a7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a80:	f002 fce5 	bl	844e <mp_emit_bc_load_const_str>
        compile_store_id(comp, MP_QSTR___qualname__);
    5a84:	2120      	movs	r1, #32
    5a86:	4620      	mov	r0, r4
    5a88:	f7ff fb74 	bl	5174 <compile_store_id>
        compile_node(comp, pns->nodes[2]); // 2 is class body
    5a8c:	6931      	ldr	r1, [r6, #16]
    5a8e:	4620      	mov	r0, r4
    5a90:	f7ff fb9e 	bl	51d0 <compile_node>
        id_info_t *id = scope_find(scope, MP_QSTR___class__);
    5a94:	2106      	movs	r1, #6
    5a96:	4628      	mov	r0, r5
    5a98:	f7ff f887 	bl	4baa <scope_find>
        assert(id != NULL);
    5a9c:	2800      	cmp	r0, #0
    5a9e:	d033      	beq.n	5b08 <compile_scope+0x32c>
        if (id->kind == ID_INFO_KIND_LOCAL) {
    5aa0:	7802      	ldrb	r2, [r0, #0]
    5aa2:	2a02      	cmp	r2, #2
    5aa4:	d037      	beq.n	5b16 <compile_scope+0x33a>
            EMIT_LOAD_FAST(MP_QSTR___class__, id->local_num);
    5aa6:	8842      	ldrh	r2, [r0, #2]
    5aa8:	2106      	movs	r1, #6
    5aaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5aac:	f002 fb74 	bl	8198 <mp_emit_bc_load_fast>
        EMIT(return_value);
    5ab0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5ab2:	f002 ff5e 	bl	8972 <mp_emit_bc_return_value>
    5ab6:	e713      	b.n	58e0 <compile_scope+0x104>
        assert(scope->kind == SCOPE_CLASS);
    5ab8:	4b28      	ldr	r3, [pc, #160]	; (5b5c <compile_scope+0x380>)
    5aba:	4a1e      	ldr	r2, [pc, #120]	; (5b34 <compile_scope+0x358>)
    5abc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    5ac0:	481d      	ldr	r0, [pc, #116]	; (5b38 <compile_scope+0x35c>)
    5ac2:	f012 fd4b 	bl	1855c <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    5ac6:	4b1d      	ldr	r3, [pc, #116]	; (5b3c <compile_scope+0x360>)
    5ac8:	4a1a      	ldr	r2, [pc, #104]	; (5b34 <compile_scope+0x358>)
    5aca:	f640 4101 	movw	r1, #3073	; 0xc01
    5ace:	481a      	ldr	r0, [pc, #104]	; (5b38 <compile_scope+0x35c>)
    5ad0:	f012 fd44 	bl	1855c <__assert_func>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    5ad4:	4b22      	ldr	r3, [pc, #136]	; (5b60 <compile_scope+0x384>)
    5ad6:	4a17      	ldr	r2, [pc, #92]	; (5b34 <compile_scope+0x358>)
    5ad8:	f640 4103 	movw	r1, #3075	; 0xc03
    5adc:	4816      	ldr	r0, [pc, #88]	; (5b38 <compile_scope+0x35c>)
    5ade:	f012 fd3d 	bl	1855c <__assert_func>
            id_info_t *id_info = scope_find_or_add_id(scope, MP_QSTR___class__, &added);
    5ae2:	f10d 0207 	add.w	r2, sp, #7
    5ae6:	2106      	movs	r1, #6
    5ae8:	4628      	mov	r0, r5
    5aea:	f7ff f875 	bl	4bd8 <scope_find_or_add_id>
            assert(added);
    5aee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5af2:	b113      	cbz	r3, 5afa <compile_scope+0x31e>
            id_info->kind = ID_INFO_KIND_LOCAL;
    5af4:	2302      	movs	r3, #2
    5af6:	7003      	strb	r3, [r0, #0]
    5af8:	e7b7      	b.n	5a6a <compile_scope+0x28e>
            assert(added);
    5afa:	4b17      	ldr	r3, [pc, #92]	; (5b58 <compile_scope+0x37c>)
    5afc:	4a0d      	ldr	r2, [pc, #52]	; (5b34 <compile_scope+0x358>)
    5afe:	f640 4108 	movw	r1, #3080	; 0xc08
    5b02:	480d      	ldr	r0, [pc, #52]	; (5b38 <compile_scope+0x35c>)
    5b04:	f012 fd2a 	bl	1855c <__assert_func>
        assert(id != NULL);
    5b08:	4b16      	ldr	r3, [pc, #88]	; (5b64 <compile_scope+0x388>)
    5b0a:	4a0a      	ldr	r2, [pc, #40]	; (5b34 <compile_scope+0x358>)
    5b0c:	f640 4115 	movw	r1, #3093	; 0xc15
    5b10:	4809      	ldr	r0, [pc, #36]	; (5b38 <compile_scope+0x35c>)
    5b12:	f012 fd23 	bl	1855c <__assert_func>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    5b16:	210e      	movs	r1, #14
    5b18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5b1a:	f002 fc4f 	bl	83bc <mp_emit_bc_load_const_tok>
    5b1e:	e7c7      	b.n	5ab0 <compile_scope+0x2d4>
    assert(comp->cur_except_level == 0);
    5b20:	4b11      	ldr	r3, [pc, #68]	; (5b68 <compile_scope+0x38c>)
    5b22:	4a04      	ldr	r2, [pc, #16]	; (5b34 <compile_scope+0x358>)
    5b24:	f640 4121 	movw	r1, #3105	; 0xc21
    5b28:	4803      	ldr	r0, [pc, #12]	; (5b38 <compile_scope+0x35c>)
    5b2a:	f012 fd17 	bl	1855c <__assert_func>
    5b2e:	bf00      	nop
    5b30:	00024b80 	.word	0x00024b80
    5b34:	00024460 	.word	0x00024460
    5b38:	00024fdc 	.word	0x00024fdc
    5b3c:	00024b9c 	.word	0x00024b9c
    5b40:	00024bc0 	.word	0x00024bc0
    5b44:	000050db 	.word	0x000050db
    5b48:	00024bf0 	.word	0x00024bf0
    5b4c:	000050c5 	.word	0x000050c5
    5b50:	00024c1c 	.word	0x00024c1c
    5b54:	00024c48 	.word	0x00024c48
    5b58:	00024c84 	.word	0x00024c84
    5b5c:	00024c8c 	.word	0x00024c8c
    5b60:	00024ca8 	.word	0x00024ca8
    5b64:	00024cd8 	.word	0x00024cd8
    5b68:	00024ce4 	.word	0x00024ce4

00005b6c <mp_compile_to_raw_code>:

#if !MICROPY_PERSISTENT_CODE_SAVE
STATIC
#endif
mp_raw_code_t *mp_compile_to_raw_code(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    5b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b70:	b08c      	sub	sp, #48	; 0x30
    5b72:	4607      	mov	r7, r0
    5b74:	460e      	mov	r6, r1
    5b76:	4614      	mov	r4, r2
    5b78:	461d      	mov	r5, r3
    // put compiler state on the stack, it's relatively small
    compiler_t comp_state = {0};
    5b7a:	2228      	movs	r2, #40	; 0x28
    5b7c:	2100      	movs	r1, #0
    5b7e:	a802      	add	r0, sp, #8
    5b80:	f015 fe7c 	bl	1b87c <memset>
    compiler_t *comp = &comp_state;

    comp->source_file = source_file;
    5b84:	9601      	str	r6, [sp, #4]
    comp->is_repl = is_repl;
    5b86:	f88d 5008 	strb.w	r5, [sp, #8]
    comp->break_label = INVALID_LABEL;
    5b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5b8e:	f8ad 301c 	strh.w	r3, [sp, #28]
    comp->continue_label = INVALID_LABEL;
    5b92:	f8ad 301e 	strh.w	r3, [sp, #30]

    // create the module scope
    scope_t *module_scope = scope_new_and_link(comp, SCOPE_MODULE, parse_tree->root, emit_opt);
    5b96:	4623      	mov	r3, r4
    5b98:	683a      	ldr	r2, [r7, #0]
    5b9a:	2100      	movs	r1, #0
    5b9c:	a801      	add	r0, sp, #4
    5b9e:	f7ff f8f7 	bl	4d90 <scope_new_and_link>
    5ba2:	4605      	mov	r5, r0

    // create standard emitter; it's used at least for MP_PASS_SCOPE
    emit_t *emit_bc = emit_bc_new();
    5ba4:	f002 f9ea 	bl	7f7c <emit_bc_new>
    5ba8:	4606      	mov	r6, r0

    // compile pass 1
    comp->emit = emit_bc;
    5baa:	900b      	str	r0, [sp, #44]	; 0x2c
    #if MICROPY_EMIT_NATIVE
    comp->emit_method_table = &emit_bc_method_table;
    #endif
    uint max_num_labels = 0;
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    5bac:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint max_num_labels = 0;
    5bae:	f04f 0800 	mov.w	r8, #0
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    5bb2:	e000      	b.n	5bb6 <mp_compile_to_raw_code+0x4a>
    5bb4:	68a4      	ldr	r4, [r4, #8]
    5bb6:	b15c      	cbz	r4, 5bd0 <mp_compile_to_raw_code+0x64>
    5bb8:	9b03      	ldr	r3, [sp, #12]
    5bba:	b94b      	cbnz	r3, 5bd0 <mp_compile_to_raw_code+0x64>
        #if MICROPY_EMIT_INLINE_ASM
        } else if (s->emit_options == MP_EMIT_OPT_ASM) {
            compile_scope_inline_asm(comp, s, MP_PASS_SCOPE);
        #endif
        } else {
            compile_scope(comp, s, MP_PASS_SCOPE);
    5bbc:	2201      	movs	r2, #1
    5bbe:	4621      	mov	r1, r4
    5bc0:	a801      	add	r0, sp, #4
    5bc2:	f7ff fe0b 	bl	57dc <compile_scope>
        }

        // update maximim number of labels needed
        if (comp->next_label > max_num_labels) {
    5bc6:	9b05      	ldr	r3, [sp, #20]
    5bc8:	4543      	cmp	r3, r8
    5bca:	d9f3      	bls.n	5bb4 <mp_compile_to_raw_code+0x48>
            max_num_labels = comp->next_label;
    5bcc:	4698      	mov	r8, r3
    5bce:	e7f1      	b.n	5bb4 <mp_compile_to_raw_code+0x48>
        }
    }

    // compute some things related to scope and identifiers
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    5bd0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5bd2:	e003      	b.n	5bdc <mp_compile_to_raw_code+0x70>
        scope_compute_things(s);
    5bd4:	4620      	mov	r0, r4
    5bd6:	f7ff f8f1 	bl	4dbc <scope_compute_things>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    5bda:	68a4      	ldr	r4, [r4, #8]
    5bdc:	b114      	cbz	r4, 5be4 <mp_compile_to_raw_code+0x78>
    5bde:	9b03      	ldr	r3, [sp, #12]
    5be0:	2b00      	cmp	r3, #0
    5be2:	d0f7      	beq.n	5bd4 <mp_compile_to_raw_code+0x68>
    }

    // set max number of labels now that it's calculated
    emit_bc_set_max_num_labels(emit_bc, max_num_labels);
    5be4:	4641      	mov	r1, r8
    5be6:	4630      	mov	r0, r6
    5be8:	f002 f9cd 	bl	7f86 <emit_bc_set_max_num_labels>

    // compile pass 2 and 3
#if MICROPY_EMIT_NATIVE
    emit_t *emit_native = NULL;
#endif
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    5bec:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5bee:	e006      	b.n	5bfe <mp_compile_to_raw_code+0x92>
            // need a pass to compute stack size
            compile_scope(comp, s, MP_PASS_STACK_SIZE);

            // second last pass: compute code size
            if (comp->compile_error == MP_OBJ_NULL) {
                compile_scope(comp, s, MP_PASS_CODE_SIZE);
    5bf0:	2203      	movs	r2, #3
    5bf2:	4621      	mov	r1, r4
    5bf4:	a801      	add	r0, sp, #4
    5bf6:	f7ff fdf1 	bl	57dc <compile_scope>
    5bfa:	e00c      	b.n	5c16 <mp_compile_to_raw_code+0xaa>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    5bfc:	68a4      	ldr	r4, [r4, #8]
    5bfe:	b1a4      	cbz	r4, 5c2a <mp_compile_to_raw_code+0xbe>
    5c00:	9b03      	ldr	r3, [sp, #12]
    5c02:	b993      	cbnz	r3, 5c2a <mp_compile_to_raw_code+0xbe>
                    comp->emit = emit_bc;
    5c04:	960b      	str	r6, [sp, #44]	; 0x2c
            compile_scope(comp, s, MP_PASS_STACK_SIZE);
    5c06:	2202      	movs	r2, #2
    5c08:	4621      	mov	r1, r4
    5c0a:	a801      	add	r0, sp, #4
    5c0c:	f7ff fde6 	bl	57dc <compile_scope>
            if (comp->compile_error == MP_OBJ_NULL) {
    5c10:	9b03      	ldr	r3, [sp, #12]
    5c12:	2b00      	cmp	r3, #0
    5c14:	d0ec      	beq.n	5bf0 <mp_compile_to_raw_code+0x84>
            }

            // final pass: emit code
            if (comp->compile_error == MP_OBJ_NULL) {
    5c16:	9b03      	ldr	r3, [sp, #12]
    5c18:	2b00      	cmp	r3, #0
    5c1a:	d1ef      	bne.n	5bfc <mp_compile_to_raw_code+0x90>
                compile_scope(comp, s, MP_PASS_EMIT);
    5c1c:	2204      	movs	r2, #4
    5c1e:	4621      	mov	r1, r4
    5c20:	eb0d 0002 	add.w	r0, sp, r2
    5c24:	f7ff fdda 	bl	57dc <compile_scope>
    5c28:	e7e8      	b.n	5bfc <mp_compile_to_raw_code+0x90>
            }
        }
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    5c2a:	9b03      	ldr	r3, [sp, #12]
    5c2c:	b15b      	cbz	r3, 5c46 <mp_compile_to_raw_code+0xda>
        // if there is no line number for the error then use the line
        // number for the start of this scope
        compile_error_set_line(comp, comp->scope_cur->pn);
    5c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c30:	68d9      	ldr	r1, [r3, #12]
    5c32:	a801      	add	r0, sp, #4
    5c34:	f7ff f85d 	bl	4cf2 <compile_error_set_line>
        // add a traceback to the exception using relevant source info
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    5c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c3a:	8a5b      	ldrh	r3, [r3, #18]
    5c3c:	9a04      	ldr	r2, [sp, #16]
    5c3e:	9901      	ldr	r1, [sp, #4]
    5c40:	9803      	ldr	r0, [sp, #12]
    5c42:	f007 f805 	bl	cc50 <mp_obj_exception_add_traceback>
            comp->compile_error_line, comp->scope_cur->simple_name);
    }

    // free the emitters

    emit_bc_free(emit_bc);
    5c46:	4630      	mov	r0, r6
    5c48:	f002 f9a5 	bl	7f96 <emit_bc_free>
        ASM_EMITTER(free)(comp->emit_inline_asm);
    }
    #endif

    // free the parse tree
    mp_parse_tree_clear(parse_tree);
    5c4c:	4638      	mov	r0, r7
    5c4e:	f7fe ff5f 	bl	4b10 <mp_parse_tree_clear>

    // free the scopes
    mp_raw_code_t *outer_raw_code = module_scope->raw_code;
    5c52:	696e      	ldr	r6, [r5, #20]
    for (scope_t *s = module_scope; s;) {
    5c54:	e004      	b.n	5c60 <mp_compile_to_raw_code+0xf4>
        scope_t *next = s->next;
    5c56:	68ac      	ldr	r4, [r5, #8]
        scope_free(s);
    5c58:	4628      	mov	r0, r5
    5c5a:	f7fe ff9d 	bl	4b98 <scope_free>
        s = next;
    5c5e:	4625      	mov	r5, r4
    for (scope_t *s = module_scope; s;) {
    5c60:	2d00      	cmp	r5, #0
    5c62:	d1f8      	bne.n	5c56 <mp_compile_to_raw_code+0xea>
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    5c64:	9803      	ldr	r0, [sp, #12]
    5c66:	b918      	cbnz	r0, 5c70 <mp_compile_to_raw_code+0x104>
        nlr_raise(comp->compile_error);
    } else {
        return outer_raw_code;
    }
}
    5c68:	4630      	mov	r0, r6
    5c6a:	b00c      	add	sp, #48	; 0x30
    5c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nlr_raise(comp->compile_error);
    5c70:	f7fa fe06 	bl	880 <nlr_jump>

00005c74 <compile_dictorsetmaker_item>:
STATIC void compile_dictorsetmaker_item(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5c74:	b538      	push	{r3, r4, r5, lr}
    5c76:	4605      	mov	r5, r0
    5c78:	460c      	mov	r4, r1
    compile_node(comp, pns->nodes[1]); // value
    5c7a:	68c9      	ldr	r1, [r1, #12]
    5c7c:	f7ff faa8 	bl	51d0 <compile_node>
    compile_node(comp, pns->nodes[0]); // key
    5c80:	68a1      	ldr	r1, [r4, #8]
    5c82:	4628      	mov	r0, r5
    5c84:	f7ff faa4 	bl	51d0 <compile_node>
}
    5c88:	bd38      	pop	{r3, r4, r5, pc}

00005c8a <compile_trailer_bracket>:
STATIC void compile_trailer_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5c8a:	b510      	push	{r4, lr}
    5c8c:	4604      	mov	r4, r0
    compile_node(comp, pns->nodes[0]); // the index
    5c8e:	6889      	ldr	r1, [r1, #8]
    5c90:	f7ff fa9e 	bl	51d0 <compile_node>
    EMIT(load_subscr);
    5c94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5c96:	f002 fc24 	bl	84e2 <mp_emit_bc_load_subscr>
}
    5c9a:	bd10      	pop	{r4, pc}

00005c9c <compile_while_stmt>:
STATIC void compile_while_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ca0:	4604      	mov	r4, r0
    5ca2:	460d      	mov	r5, r1
    START_BREAK_CONTINUE_BLOCK
    5ca4:	f8b0 a018 	ldrh.w	sl, [r0, #24]
    5ca8:	f8b0 901a 	ldrh.w	r9, [r0, #26]
    5cac:	f8b0 801e 	ldrh.w	r8, [r0, #30]
    5cb0:	f7ff f828 	bl	4d04 <comp_next_label>
    5cb4:	4606      	mov	r6, r0
    5cb6:	4620      	mov	r0, r4
    5cb8:	f7ff f824 	bl	4d04 <comp_next_label>
    5cbc:	4607      	mov	r7, r0
    5cbe:	8326      	strh	r6, [r4, #24]
    5cc0:	8360      	strh	r0, [r4, #26]
    5cc2:	8ba3      	ldrh	r3, [r4, #28]
    5cc4:	83e3      	strh	r3, [r4, #30]
    if (!mp_parse_node_is_const_false(pns->nodes[0])) { // optimisation: don't emit anything for "while False"
    5cc6:	68a8      	ldr	r0, [r5, #8]
    5cc8:	f7fe fb0a 	bl	42e0 <mp_parse_node_is_const_false>
    5ccc:	b178      	cbz	r0, 5cee <compile_while_stmt+0x52>
    END_BREAK_CONTINUE_BLOCK
    5cce:	f8a4 a018 	strh.w	sl, [r4, #24]
    5cd2:	f8a4 901a 	strh.w	r9, [r4, #26]
    5cd6:	f8a4 801e 	strh.w	r8, [r4, #30]
    compile_node(comp, pns->nodes[2]); // else
    5cda:	6929      	ldr	r1, [r5, #16]
    5cdc:	4620      	mov	r0, r4
    5cde:	f7ff fa77 	bl	51d0 <compile_node>
    EMIT_ARG(label_assign, break_label);
    5ce2:	4631      	mov	r1, r6
    5ce4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5ce6:	f002 fb07 	bl	82f8 <mp_emit_bc_label_assign>
}
    5cea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint top_label = comp_next_label(comp);
    5cee:	4620      	mov	r0, r4
    5cf0:	f7ff f808 	bl	4d04 <comp_next_label>
    5cf4:	4683      	mov	fp, r0
        if (!mp_parse_node_is_const_true(pns->nodes[0])) { // optimisation: don't jump to cond for "while True"
    5cf6:	68a8      	ldr	r0, [r5, #8]
    5cf8:	f7fe fb01 	bl	42fe <mp_parse_node_is_const_true>
    5cfc:	b190      	cbz	r0, 5d24 <compile_while_stmt+0x88>
        EMIT_ARG(label_assign, top_label);
    5cfe:	4659      	mov	r1, fp
    5d00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5d02:	f002 faf9 	bl	82f8 <mp_emit_bc_label_assign>
        compile_node(comp, pns->nodes[1]); // body
    5d06:	68e9      	ldr	r1, [r5, #12]
    5d08:	4620      	mov	r0, r4
    5d0a:	f7ff fa61 	bl	51d0 <compile_node>
        EMIT_ARG(label_assign, continue_label);
    5d0e:	4639      	mov	r1, r7
    5d10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5d12:	f002 faf1 	bl	82f8 <mp_emit_bc_label_assign>
        c_if_cond(comp, pns->nodes[0], true, top_label); // condition
    5d16:	465b      	mov	r3, fp
    5d18:	2201      	movs	r2, #1
    5d1a:	68a9      	ldr	r1, [r5, #8]
    5d1c:	4620      	mov	r0, r4
    5d1e:	f7ff fc59 	bl	55d4 <c_if_cond>
    5d22:	e7d4      	b.n	5cce <compile_while_stmt+0x32>
            EMIT_ARG(jump, continue_label);
    5d24:	4639      	mov	r1, r7
    5d26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5d28:	f002 fc49 	bl	85be <mp_emit_bc_jump>
    5d2c:	e7e7      	b.n	5cfe <compile_while_stmt+0x62>

00005d2e <compile_yield_stmt>:
STATIC void compile_yield_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5d2e:	b510      	push	{r4, lr}
    5d30:	4604      	mov	r4, r0
    compile_node(comp, pns->nodes[0]);
    5d32:	6889      	ldr	r1, [r1, #8]
    5d34:	f7ff fa4c 	bl	51d0 <compile_node>
    EMIT(pop_top);
    5d38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5d3a:	f002 fc09 	bl	8550 <mp_emit_bc_pop_top>
}
    5d3e:	bd10      	pop	{r4, pc}

00005d40 <compile_return_stmt>:
STATIC void compile_return_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5d40:	b510      	push	{r4, lr}
    5d42:	4604      	mov	r4, r0
    if (comp->scope_cur->kind != SCOPE_FUNCTION) {
    5d44:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5d46:	781b      	ldrb	r3, [r3, #0]
    5d48:	2b07      	cmp	r3, #7
    5d4a:	d109      	bne.n	5d60 <compile_return_stmt+0x20>
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5d4c:	6889      	ldr	r1, [r1, #8]
    5d4e:	b959      	cbnz	r1, 5d68 <compile_return_stmt+0x28>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    5d50:	210e      	movs	r1, #14
    5d52:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5d54:	f002 fb32 	bl	83bc <mp_emit_bc_load_const_tok>
    EMIT(return_value);
    5d58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5d5a:	f002 fe0a 	bl	8972 <mp_emit_bc_return_value>
}
    5d5e:	bd10      	pop	{r4, pc}
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'return' outside function");
    5d60:	4a03      	ldr	r2, [pc, #12]	; (5d70 <compile_return_stmt+0x30>)
    5d62:	f7ff f8fb 	bl	4f5c <compile_syntax_error>
        return;
    5d66:	e7fa      	b.n	5d5e <compile_return_stmt+0x1e>
        compile_node(comp, pns->nodes[0]);
    5d68:	f7ff fa32 	bl	51d0 <compile_node>
    5d6c:	e7f4      	b.n	5d58 <compile_return_stmt+0x18>
    5d6e:	bf00      	nop
    5d70:	00024b64 	.word	0x00024b64

00005d74 <compile_generic_all_nodes>:
STATIC void compile_generic_all_nodes(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d76:	4605      	mov	r5, r0
    5d78:	460f      	mov	r7, r1
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5d7a:	684e      	ldr	r6, [r1, #4]
    5d7c:	0a36      	lsrs	r6, r6, #8
    for (int i = 0; i < num_nodes; i++) {
    5d7e:	2400      	movs	r4, #0
    5d80:	42b4      	cmp	r4, r6
    5d82:	da0f      	bge.n	5da4 <compile_generic_all_nodes+0x30>
        compile_node(comp, pns->nodes[i]);
    5d84:	1ca3      	adds	r3, r4, #2
    5d86:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    5d8a:	4628      	mov	r0, r5
    5d8c:	f7ff fa20 	bl	51d0 <compile_node>
        if (comp->compile_error != MP_OBJ_NULL) {
    5d90:	68ab      	ldr	r3, [r5, #8]
    5d92:	b90b      	cbnz	r3, 5d98 <compile_generic_all_nodes+0x24>
    for (int i = 0; i < num_nodes; i++) {
    5d94:	3401      	adds	r4, #1
    5d96:	e7f3      	b.n	5d80 <compile_generic_all_nodes+0xc>
            compile_error_set_line(comp, pns->nodes[i]);
    5d98:	3402      	adds	r4, #2
    5d9a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
    5d9e:	4628      	mov	r0, r5
    5da0:	f7fe ffa7 	bl	4cf2 <compile_error_set_line>
}
    5da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005da6 <compile_yield_from>:
STATIC void compile_yield_from(compiler_t *comp) {
    5da6:	b510      	push	{r4, lr}
    5da8:	4604      	mov	r4, r0
    EMIT_ARG(get_iter, false);
    5daa:	2100      	movs	r1, #0
    5dac:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5dae:	f002 fc99 	bl	86e4 <mp_emit_bc_get_iter>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    5db2:	210e      	movs	r1, #14
    5db4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5db6:	f002 fb01 	bl	83bc <mp_emit_bc_load_const_tok>
    EMIT(yield_from);
    5dba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5dbc:	f002 fe11 	bl	89e2 <mp_emit_bc_yield_from>
}
    5dc0:	bd10      	pop	{r4, pc}
	...

00005dc4 <compile_yield_expr>:
STATIC void compile_yield_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5dc4:	b510      	push	{r4, lr}
    5dc6:	4604      	mov	r4, r0
    if (comp->scope_cur->kind != SCOPE_FUNCTION && comp->scope_cur->kind != SCOPE_LAMBDA) {
    5dc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5dca:	781b      	ldrb	r3, [r3, #0]
    5dcc:	2b07      	cmp	r3, #7
    5dce:	d001      	beq.n	5dd4 <compile_yield_expr+0x10>
    5dd0:	2b02      	cmp	r3, #2
    5dd2:	d10e      	bne.n	5df2 <compile_yield_expr+0x2e>
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5dd4:	6889      	ldr	r1, [r1, #8]
    5dd6:	b181      	cbz	r1, 5dfa <compile_yield_expr+0x36>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_yield_arg_from)) {
    5dd8:	f011 0f03 	tst.w	r1, #3
    5ddc:	d102      	bne.n	5de4 <compile_yield_expr+0x20>
    5dde:	790b      	ldrb	r3, [r1, #4]
    5de0:	2ba2      	cmp	r3, #162	; 0xa2
    5de2:	d012      	beq.n	5e0a <compile_yield_expr+0x46>
        compile_node(comp, pns->nodes[0]);
    5de4:	4620      	mov	r0, r4
    5de6:	f7ff f9f3 	bl	51d0 <compile_node>
        EMIT(yield_value);
    5dea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5dec:	f002 fdea 	bl	89c4 <mp_emit_bc_yield_value>
}
    5df0:	bd10      	pop	{r4, pc}
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'yield' outside function");
    5df2:	4a0a      	ldr	r2, [pc, #40]	; (5e1c <compile_yield_expr+0x58>)
    5df4:	f7ff f8b2 	bl	4f5c <compile_syntax_error>
        return;
    5df8:	e7fa      	b.n	5df0 <compile_yield_expr+0x2c>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    5dfa:	210e      	movs	r1, #14
    5dfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5dfe:	f002 fadd 	bl	83bc <mp_emit_bc_load_const_tok>
        EMIT(yield_value);
    5e02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5e04:	f002 fdde 	bl	89c4 <mp_emit_bc_yield_value>
    5e08:	e7f2      	b.n	5df0 <compile_yield_expr+0x2c>
        compile_node(comp, pns->nodes[0]);
    5e0a:	6889      	ldr	r1, [r1, #8]
    5e0c:	4620      	mov	r0, r4
    5e0e:	f7ff f9df 	bl	51d0 <compile_node>
        compile_yield_from(comp);
    5e12:	4620      	mov	r0, r4
    5e14:	f7ff ffc7 	bl	5da6 <compile_yield_from>
    5e18:	e7ea      	b.n	5df0 <compile_yield_expr+0x2c>
    5e1a:	bf00      	nop
    5e1c:	00024f68 	.word	0x00024f68

00005e20 <close_over_variables_etc>:
STATIC void close_over_variables_etc(compiler_t *comp, scope_t *this_scope, int n_pos_defaults, int n_kw_defaults) {
    5e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e24:	b083      	sub	sp, #12
    assert(n_pos_defaults >= 0);
    5e26:	f1b2 0a00 	subs.w	sl, r2, #0
    5e2a:	db13      	blt.n	5e54 <close_over_variables_etc+0x34>
    5e2c:	4607      	mov	r7, r0
    5e2e:	460e      	mov	r6, r1
    5e30:	4699      	mov	r9, r3
    assert(n_kw_defaults >= 0);
    5e32:	2b00      	cmp	r3, #0
    5e34:	db15      	blt.n	5e62 <close_over_variables_etc+0x42>
    if (n_kw_defaults > 0) {
    5e36:	2b00      	cmp	r3, #0
    5e38:	dd03      	ble.n	5e42 <close_over_variables_etc+0x22>
        this_scope->scope_flags |= MP_SCOPE_FLAG_DEFKWARGS;
    5e3a:	7e0b      	ldrb	r3, [r1, #24]
    5e3c:	f043 0308 	orr.w	r3, r3, #8
    5e40:	760b      	strb	r3, [r1, #24]
    this_scope->num_def_pos_args = n_pos_defaults;
    5e42:	f8a6 a01e 	strh.w	sl, [r6, #30]
    if (comp->scope_cur->kind != SCOPE_MODULE) {
    5e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e48:	781b      	ldrb	r3, [r3, #0]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d03b      	beq.n	5ec6 <close_over_variables_etc+0xa6>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5e4e:	2500      	movs	r5, #0
    int nfree = 0;
    5e50:	46ab      	mov	fp, r5
    5e52:	e026      	b.n	5ea2 <close_over_variables_etc+0x82>
    assert(n_pos_defaults >= 0);
    5e54:	4b25      	ldr	r3, [pc, #148]	; (5eec <close_over_variables_etc+0xcc>)
    5e56:	4a26      	ldr	r2, [pc, #152]	; (5ef0 <close_over_variables_etc+0xd0>)
    5e58:	f44f 7109 	mov.w	r1, #548	; 0x224
    5e5c:	4825      	ldr	r0, [pc, #148]	; (5ef4 <close_over_variables_etc+0xd4>)
    5e5e:	f012 fb7d 	bl	1855c <__assert_func>
    assert(n_kw_defaults >= 0);
    5e62:	4b25      	ldr	r3, [pc, #148]	; (5ef8 <close_over_variables_etc+0xd8>)
    5e64:	4a22      	ldr	r2, [pc, #136]	; (5ef0 <close_over_variables_etc+0xd0>)
    5e66:	f240 2125 	movw	r1, #549	; 0x225
    5e6a:	4822      	ldr	r0, [pc, #136]	; (5ef4 <close_over_variables_etc+0xd4>)
    5e6c:	f012 fb76 	bl	1855c <__assert_func>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5e70:	3401      	adds	r4, #1
    5e72:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    5e74:	42a3      	cmp	r3, r4
    5e76:	dd13      	ble.n	5ea0 <close_over_variables_etc+0x80>
                    id_info_t *id2 = &this_scope->id_info[j];
    5e78:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    5e7a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    5e7e:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
    5e82:	2b04      	cmp	r3, #4
    5e84:	d1f4      	bne.n	5e70 <close_over_variables_etc+0x50>
    5e86:	f8d8 1004 	ldr.w	r1, [r8, #4]
    5e8a:	6853      	ldr	r3, [r2, #4]
    5e8c:	4299      	cmp	r1, r3
    5e8e:	d1ef      	bne.n	5e70 <close_over_variables_etc+0x50>
                        EMIT_LOAD_FAST(id->qst, id->local_num);
    5e90:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    5e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5e96:	f002 f97f 	bl	8198 <mp_emit_bc_load_fast>
                        nfree += 1;
    5e9a:	f10b 0b01 	add.w	fp, fp, #1
    5e9e:	e7e7      	b.n	5e70 <close_over_variables_etc+0x50>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5ea0:	3501      	adds	r5, #1
    5ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ea4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5ea6:	42aa      	cmp	r2, r5
    5ea8:	dd0a      	ble.n	5ec0 <close_over_variables_etc+0xa0>
            id_info_t *id = &comp->scope_cur->id_info[i];
    5eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5eac:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    5eb0:	f813 3035 	ldrb.w	r3, [r3, r5, lsl #3]
    5eb4:	3b03      	subs	r3, #3
    5eb6:	b2db      	uxtb	r3, r3
    5eb8:	2b01      	cmp	r3, #1
    5eba:	d8f1      	bhi.n	5ea0 <close_over_variables_etc+0x80>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5ebc:	2400      	movs	r4, #0
    5ebe:	e7d8      	b.n	5e72 <close_over_variables_etc+0x52>
    if (nfree == 0) {
    5ec0:	f1bb 0f00 	cmp.w	fp, #0
    5ec4:	d108      	bne.n	5ed8 <close_over_variables_etc+0xb8>
        EMIT_ARG(make_function, this_scope, n_pos_defaults, n_kw_defaults);
    5ec6:	464b      	mov	r3, r9
    5ec8:	4652      	mov	r2, sl
    5eca:	4631      	mov	r1, r6
    5ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5ece:	f002 fcec 	bl	88aa <mp_emit_bc_make_function>
}
    5ed2:	b003      	add	sp, #12
    5ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    5ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5eda:	f8cd 9000 	str.w	r9, [sp]
    5ede:	4653      	mov	r3, sl
    5ee0:	465a      	mov	r2, fp
    5ee2:	4631      	mov	r1, r6
    5ee4:	f002 fcfa 	bl	88dc <mp_emit_bc_make_closure>
}
    5ee8:	e7f3      	b.n	5ed2 <close_over_variables_etc+0xb2>
    5eea:	bf00      	nop
    5eec:	00024608 	.word	0x00024608
    5ef0:	0002422c 	.word	0x0002422c
    5ef4:	00024fdc 	.word	0x00024fdc
    5ef8:	0002461c 	.word	0x0002461c

00005efc <compile_if_stmt>:
STATIC void compile_if_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f00:	b082      	sub	sp, #8
    5f02:	4606      	mov	r6, r0
    5f04:	4688      	mov	r8, r1
    uint l_end = comp_next_label(comp);
    5f06:	f7fe fefd 	bl	4d04 <comp_next_label>
    5f0a:	4681      	mov	r9, r0
    if (!mp_parse_node_is_const_false(pns->nodes[0])) {
    5f0c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    5f10:	f7fe f9e6 	bl	42e0 <mp_parse_node_is_const_false>
    5f14:	bb18      	cbnz	r0, 5f5e <compile_if_stmt+0x62>
        uint l_fail = comp_next_label(comp);
    5f16:	4630      	mov	r0, r6
    5f18:	f7fe fef4 	bl	4d04 <comp_next_label>
    5f1c:	4604      	mov	r4, r0
        c_if_cond(comp, pns->nodes[0], false, l_fail); // if condition
    5f1e:	4603      	mov	r3, r0
    5f20:	2200      	movs	r2, #0
    5f22:	f8d8 1008 	ldr.w	r1, [r8, #8]
    5f26:	4630      	mov	r0, r6
    5f28:	f7ff fb54 	bl	55d4 <c_if_cond>
        compile_node(comp, pns->nodes[1]); // if block
    5f2c:	f8d8 100c 	ldr.w	r1, [r8, #12]
    5f30:	4630      	mov	r0, r6
    5f32:	f7ff f94d 	bl	51d0 <compile_node>
        if (mp_parse_node_is_const_true(pns->nodes[0])) {
    5f36:	f8d8 0008 	ldr.w	r0, [r8, #8]
    5f3a:	f7fe f9e0 	bl	42fe <mp_parse_node_is_const_true>
    5f3e:	2800      	cmp	r0, #0
    5f40:	d15a      	bne.n	5ff8 <compile_if_stmt+0xfc>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    5f42:	f8d8 3010 	ldr.w	r3, [r8, #16]
        if (
    5f46:	b913      	cbnz	r3, 5f4e <compile_if_stmt+0x52>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    5f48:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5f4c:	b11b      	cbz	r3, 5f56 <compile_if_stmt+0x5a>
            && !EMIT(last_emit_was_return_value)
    5f4e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5f50:	f002 f8fe 	bl	8150 <mp_emit_bc_last_emit_was_return_value>
    5f54:	b160      	cbz	r0, 5f70 <compile_if_stmt+0x74>
        EMIT_ARG(label_assign, l_fail);
    5f56:	4621      	mov	r1, r4
    5f58:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5f5a:	f002 f9cd 	bl	82f8 <mp_emit_bc_label_assign>
    int n_elif = mp_parse_node_extract_list(&pns->nodes[2], PN_if_stmt_elif_list, &pn_elif);
    5f5e:	aa01      	add	r2, sp, #4
    5f60:	216a      	movs	r1, #106	; 0x6a
    5f62:	f108 0010 	add.w	r0, r8, #16
    5f66:	f7fe fb61 	bl	462c <mp_parse_node_extract_list>
    5f6a:	4607      	mov	r7, r0
    for (int i = 0; i < n_elif; i++) {
    5f6c:	2500      	movs	r5, #0
    5f6e:	e010      	b.n	5f92 <compile_if_stmt+0x96>
            EMIT_ARG(jump, l_end);
    5f70:	4649      	mov	r1, r9
    5f72:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5f74:	f002 fb23 	bl	85be <mp_emit_bc_jump>
    5f78:	e7ed      	b.n	5f56 <compile_if_stmt+0x5a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    5f7a:	4b23      	ldr	r3, [pc, #140]	; (6008 <_Heapsize+0x8>)
    5f7c:	4a23      	ldr	r2, [pc, #140]	; (600c <_Heapsize+0xc>)
    5f7e:	f240 41f3 	movw	r1, #1267	; 0x4f3
    5f82:	4823      	ldr	r0, [pc, #140]	; (6010 <_Heapsize+0x10>)
    5f84:	f012 faea 	bl	1855c <__assert_func>
            EMIT_ARG(label_assign, l_fail);
    5f88:	4651      	mov	r1, sl
    5f8a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5f8c:	f002 f9b4 	bl	82f8 <mp_emit_bc_label_assign>
    for (int i = 0; i < n_elif; i++) {
    5f90:	3501      	adds	r5, #1
    5f92:	42bd      	cmp	r5, r7
    5f94:	da2b      	bge.n	5fee <compile_if_stmt+0xf2>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    5f96:	9b01      	ldr	r3, [sp, #4]
    5f98:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
    5f9c:	2c00      	cmp	r4, #0
    5f9e:	d0ec      	beq.n	5f7a <compile_if_stmt+0x7e>
    5fa0:	f014 0f03 	tst.w	r4, #3
    5fa4:	d1e9      	bne.n	5f7a <compile_if_stmt+0x7e>
    5fa6:	7923      	ldrb	r3, [r4, #4]
    5fa8:	2b6b      	cmp	r3, #107	; 0x6b
    5faa:	d1e6      	bne.n	5f7a <compile_if_stmt+0x7e>
        if (!mp_parse_node_is_const_false(pns_elif->nodes[0])) {
    5fac:	68a0      	ldr	r0, [r4, #8]
    5fae:	f7fe f997 	bl	42e0 <mp_parse_node_is_const_false>
    5fb2:	2800      	cmp	r0, #0
    5fb4:	d1ec      	bne.n	5f90 <compile_if_stmt+0x94>
            uint l_fail = comp_next_label(comp);
    5fb6:	4630      	mov	r0, r6
    5fb8:	f7fe fea4 	bl	4d04 <comp_next_label>
    5fbc:	4682      	mov	sl, r0
            c_if_cond(comp, pns_elif->nodes[0], false, l_fail); // elif condition
    5fbe:	4603      	mov	r3, r0
    5fc0:	2200      	movs	r2, #0
    5fc2:	68a1      	ldr	r1, [r4, #8]
    5fc4:	4630      	mov	r0, r6
    5fc6:	f7ff fb05 	bl	55d4 <c_if_cond>
            compile_node(comp, pns_elif->nodes[1]); // elif block
    5fca:	68e1      	ldr	r1, [r4, #12]
    5fcc:	4630      	mov	r0, r6
    5fce:	f7ff f8ff 	bl	51d0 <compile_node>
            if (mp_parse_node_is_const_true(pns_elif->nodes[0])) {
    5fd2:	68a0      	ldr	r0, [r4, #8]
    5fd4:	f7fe f993 	bl	42fe <mp_parse_node_is_const_true>
    5fd8:	b970      	cbnz	r0, 5ff8 <compile_if_stmt+0xfc>
            if (!EMIT(last_emit_was_return_value)) {
    5fda:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5fdc:	f002 f8b8 	bl	8150 <mp_emit_bc_last_emit_was_return_value>
    5fe0:	2800      	cmp	r0, #0
    5fe2:	d1d1      	bne.n	5f88 <compile_if_stmt+0x8c>
                EMIT_ARG(jump, l_end);
    5fe4:	4649      	mov	r1, r9
    5fe6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5fe8:	f002 fae9 	bl	85be <mp_emit_bc_jump>
    5fec:	e7cc      	b.n	5f88 <compile_if_stmt+0x8c>
    compile_node(comp, pns->nodes[3]); // can be null
    5fee:	f8d8 1014 	ldr.w	r1, [r8, #20]
    5ff2:	4630      	mov	r0, r6
    5ff4:	f7ff f8ec 	bl	51d0 <compile_node>
    EMIT_ARG(label_assign, l_end);
    5ff8:	4649      	mov	r1, r9
    5ffa:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    5ffc:	f002 f97c 	bl	82f8 <mp_emit_bc_label_assign>
}
    6000:	b002      	add	sp, #8
    6002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6006:	bf00      	nop
    6008:	00024a60 	.word	0x00024a60
    600c:	000242d8 	.word	0x000242d8
    6010:	00024fdc 	.word	0x00024fdc

00006014 <compile_comprehension>:
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind) {
    6014:	b570      	push	{r4, r5, r6, lr}
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    6016:	684b      	ldr	r3, [r1, #4]
    6018:	0a1b      	lsrs	r3, r3, #8
    601a:	2b02      	cmp	r3, #2
    601c:	d11f      	bne.n	605e <compile_comprehension+0x4a>
    601e:	4605      	mov	r5, r0
    6020:	4616      	mov	r6, r2
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    6022:	68cc      	ldr	r4, [r1, #12]
    6024:	b314      	cbz	r4, 606c <compile_comprehension+0x58>
    6026:	f014 0f03 	tst.w	r4, #3
    602a:	d11f      	bne.n	606c <compile_comprehension+0x58>
    602c:	7923      	ldrb	r3, [r4, #4]
    602e:	2b9f      	cmp	r3, #159	; 0x9f
    6030:	d11c      	bne.n	606c <compile_comprehension+0x58>
    if (comp->pass == MP_PASS_SCOPE) {
    6032:	7943      	ldrb	r3, [r0, #5]
    6034:	2b01      	cmp	r3, #1
    6036:	d020      	beq.n	607a <compile_comprehension+0x66>
    close_over_variables_etc(comp, this_scope, 0, 0);
    6038:	2300      	movs	r3, #0
    603a:	461a      	mov	r2, r3
    603c:	6961      	ldr	r1, [r4, #20]
    603e:	4628      	mov	r0, r5
    6040:	f7ff feee 	bl	5e20 <close_over_variables_etc>
    compile_node(comp, pns_comp_for->nodes[1]); // source of the iterator
    6044:	68e1      	ldr	r1, [r4, #12]
    6046:	4628      	mov	r0, r5
    6048:	f7ff f8c2 	bl	51d0 <compile_node>
    if (kind == SCOPE_GEN_EXPR) {
    604c:	2e06      	cmp	r6, #6
    604e:	d01c      	beq.n	608a <compile_comprehension+0x76>
    EMIT_ARG(call_function, 1, 0, 0);
    6050:	2300      	movs	r3, #0
    6052:	461a      	mov	r2, r3
    6054:	2101      	movs	r1, #1
    6056:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6058:	f002 fc72 	bl	8940 <mp_emit_bc_call_function>
}
    605c:	bd70      	pop	{r4, r5, r6, pc}
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    605e:	4b0d      	ldr	r3, [pc, #52]	; (6094 <compile_comprehension+0x80>)
    6060:	4a0d      	ldr	r2, [pc, #52]	; (6098 <compile_comprehension+0x84>)
    6062:	f640 1125 	movw	r1, #2341	; 0x925
    6066:	480d      	ldr	r0, [pc, #52]	; (609c <compile_comprehension+0x88>)
    6068:	f012 fa78 	bl	1855c <__assert_func>
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    606c:	4b0c      	ldr	r3, [pc, #48]	; (60a0 <compile_comprehension+0x8c>)
    606e:	4a0a      	ldr	r2, [pc, #40]	; (6098 <compile_comprehension+0x84>)
    6070:	f640 1126 	movw	r1, #2342	; 0x926
    6074:	4809      	ldr	r0, [pc, #36]	; (609c <compile_comprehension+0x88>)
    6076:	f012 fa71 	bl	1855c <__assert_func>
        scope_t *s = scope_new_and_link(comp, kind, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    607a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    607c:	7e5b      	ldrb	r3, [r3, #25]
    607e:	460a      	mov	r2, r1
    6080:	4631      	mov	r1, r6
    6082:	f7fe fe85 	bl	4d90 <scope_new_and_link>
        pns_comp_for->nodes[3] = (mp_parse_node_t)s;
    6086:	6160      	str	r0, [r4, #20]
    6088:	e7d6      	b.n	6038 <compile_comprehension+0x24>
        EMIT_ARG(get_iter, false);
    608a:	2100      	movs	r1, #0
    608c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    608e:	f002 fb29 	bl	86e4 <mp_emit_bc_get_iter>
    6092:	e7dd      	b.n	6050 <compile_comprehension+0x3c>
    6094:	00024c1c 	.word	0x00024c1c
    6098:	000243c0 	.word	0x000243c0
    609c:	00024fdc 	.word	0x00024fdc
    60a0:	00024c48 	.word	0x00024c48

000060a4 <compile_atom_bracket>:
STATIC void compile_atom_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    60a4:	b570      	push	{r4, r5, r6, lr}
    60a6:	4605      	mov	r5, r0
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    60a8:	688c      	ldr	r4, [r1, #8]
    60aa:	b174      	cbz	r4, 60ca <compile_atom_bracket+0x26>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    60ac:	f014 0f03 	tst.w	r4, #3
    60b0:	d102      	bne.n	60b8 <compile_atom_bracket+0x14>
    60b2:	7923      	ldrb	r3, [r4, #4]
    60b4:	2b8a      	cmp	r3, #138	; 0x8a
    60b6:	d00d      	beq.n	60d4 <compile_atom_bracket+0x30>
        compile_node(comp, pns->nodes[0]);
    60b8:	4621      	mov	r1, r4
    60ba:	4628      	mov	r0, r5
    60bc:	f7ff f888 	bl	51d0 <compile_node>
        EMIT_ARG(build_list, 1);
    60c0:	2101      	movs	r1, #1
    60c2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    60c4:	f002 fb9f 	bl	8806 <mp_emit_bc_build_list>
}
    60c8:	bd70      	pop	{r4, r5, r6, pc}
        EMIT_ARG(build_list, 0);
    60ca:	2100      	movs	r1, #0
    60cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
    60ce:	f002 fb9a 	bl	8806 <mp_emit_bc_build_list>
    60d2:	e7f9      	b.n	60c8 <compile_atom_bracket+0x24>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    60d4:	68e6      	ldr	r6, [r4, #12]
    60d6:	b14e      	cbz	r6, 60ec <compile_atom_bracket+0x48>
    60d8:	f016 0f03 	tst.w	r6, #3
    60dc:	d106      	bne.n	60ec <compile_atom_bracket+0x48>
            if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3b) {
    60de:	7933      	ldrb	r3, [r6, #4]
    60e0:	2b8d      	cmp	r3, #141	; 0x8d
    60e2:	d010      	beq.n	6106 <compile_atom_bracket+0x62>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3c) {
    60e4:	2b8e      	cmp	r3, #142	; 0x8e
    60e6:	d01f      	beq.n	6128 <compile_atom_bracket+0x84>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_comp_for) {
    60e8:	2b9f      	cmp	r3, #159	; 0x9f
    60ea:	d02b      	beq.n	6144 <compile_atom_bracket+0xa0>
            compile_node(comp, pns2->nodes[0]);
    60ec:	68a1      	ldr	r1, [r4, #8]
    60ee:	4628      	mov	r0, r5
    60f0:	f7ff f86e 	bl	51d0 <compile_node>
            compile_node(comp, pns2->nodes[1]);
    60f4:	68e1      	ldr	r1, [r4, #12]
    60f6:	4628      	mov	r0, r5
    60f8:	f7ff f86a 	bl	51d0 <compile_node>
            EMIT_ARG(build_list, 2);
    60fc:	2102      	movs	r1, #2
    60fe:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6100:	f002 fb81 	bl	8806 <mp_emit_bc_build_list>
    6104:	e7e0      	b.n	60c8 <compile_atom_bracket+0x24>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    6106:	68b3      	ldr	r3, [r6, #8]
    6108:	b93b      	cbnz	r3, 611a <compile_atom_bracket+0x76>
                compile_node(comp, pns2->nodes[0]);
    610a:	68a1      	ldr	r1, [r4, #8]
    610c:	f7ff f860 	bl	51d0 <compile_node>
                EMIT_ARG(build_list, 1);
    6110:	2101      	movs	r1, #1
    6112:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6114:	f002 fb77 	bl	8806 <mp_emit_bc_build_list>
    6118:	e7d6      	b.n	60c8 <compile_atom_bracket+0x24>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    611a:	4b0d      	ldr	r3, [pc, #52]	; (6150 <compile_atom_bracket+0xac>)
    611c:	4a0d      	ldr	r2, [pc, #52]	; (6154 <compile_atom_bracket+0xb0>)
    611e:	f640 1167 	movw	r1, #2407	; 0x967
    6122:	480d      	ldr	r0, [pc, #52]	; (6158 <compile_atom_bracket+0xb4>)
    6124:	f012 fa1a 	bl	1855c <__assert_func>
                compile_node(comp, pns2->nodes[0]);
    6128:	68a1      	ldr	r1, [r4, #8]
    612a:	f7ff f851 	bl	51d0 <compile_node>
                compile_generic_all_nodes(comp, pns3);
    612e:	4631      	mov	r1, r6
    6130:	4628      	mov	r0, r5
    6132:	f7ff fe1f 	bl	5d74 <compile_generic_all_nodes>
                EMIT_ARG(build_list, 1 + MP_PARSE_NODE_STRUCT_NUM_NODES(pns3));
    6136:	6871      	ldr	r1, [r6, #4]
    6138:	0a09      	lsrs	r1, r1, #8
    613a:	3101      	adds	r1, #1
    613c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    613e:	f002 fb62 	bl	8806 <mp_emit_bc_build_list>
    6142:	e7c1      	b.n	60c8 <compile_atom_bracket+0x24>
                compile_comprehension(comp, pns2, SCOPE_LIST_COMP);
    6144:	2203      	movs	r2, #3
    6146:	4621      	mov	r1, r4
    6148:	f7ff ff64 	bl	6014 <compile_comprehension>
    614c:	e7bc      	b.n	60c8 <compile_atom_bracket+0x24>
    614e:	bf00      	nop
    6150:	000246a8 	.word	0x000246a8
    6154:	000243ec 	.word	0x000243ec
    6158:	00024fdc 	.word	0x00024fdc

0000615c <compile_trailer_paren_helper>:
STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra) {
    615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6160:	b087      	sub	sp, #28
    6162:	4681      	mov	r9, r0
    6164:	9103      	str	r1, [sp, #12]
    6166:	9202      	str	r2, [sp, #8]
    6168:	461e      	mov	r6, r3
    int n_args = mp_parse_node_extract_list(&pn_arglist, PN_arglist, &args);
    616a:	aa05      	add	r2, sp, #20
    616c:	2197      	movs	r1, #151	; 0x97
    616e:	a803      	add	r0, sp, #12
    6170:	f7fe fa5c 	bl	462c <mp_parse_node_extract_list>
    6174:	4680      	mov	r8, r0
    for (int i = 0; i < n_args; i++) {
    6176:	2400      	movs	r4, #0
    mp_parse_node_struct_t *star_args_node = NULL, *dblstar_args_node = NULL;
    6178:	9401      	str	r4, [sp, #4]
    617a:	46a3      	mov	fp, r4
    uint star_flags = 0;
    617c:	4627      	mov	r7, r4
    uint n_keyword = 0;
    617e:	46a2      	mov	sl, r4
    for (int i = 0; i < n_args; i++) {
    6180:	e030      	b.n	61e4 <compile_trailer_paren_helper+0x88>
                if (star_flags & MP_EMIT_STAR_FLAG_SINGLE) {
    6182:	f017 0f01 	tst.w	r7, #1
    6186:	d103      	bne.n	6190 <compile_trailer_paren_helper+0x34>
                star_flags |= MP_EMIT_STAR_FLAG_SINGLE;
    6188:	f047 0701 	orr.w	r7, r7, #1
                star_args_node = pns_arg;
    618c:	46ab      	mov	fp, r5
    618e:	e028      	b.n	61e2 <compile_trailer_paren_helper+0x86>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple *x");
    6190:	4a46      	ldr	r2, [pc, #280]	; (62ac <compile_trailer_paren_helper+0x150>)
    6192:	4629      	mov	r1, r5
    6194:	4648      	mov	r0, r9
    6196:	f7fe fee1 	bl	4f5c <compile_syntax_error>
                    return;
    619a:	e052      	b.n	6242 <compile_trailer_paren_helper+0xe6>
                if (star_flags & MP_EMIT_STAR_FLAG_DOUBLE) {
    619c:	f017 0f02 	tst.w	r7, #2
    61a0:	d103      	bne.n	61aa <compile_trailer_paren_helper+0x4e>
                star_flags |= MP_EMIT_STAR_FLAG_DOUBLE;
    61a2:	f047 0702 	orr.w	r7, r7, #2
                dblstar_args_node = pns_arg;
    61a6:	9501      	str	r5, [sp, #4]
    61a8:	e01b      	b.n	61e2 <compile_trailer_paren_helper+0x86>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple **x");
    61aa:	4a41      	ldr	r2, [pc, #260]	; (62b0 <compile_trailer_paren_helper+0x154>)
    61ac:	4629      	mov	r1, r5
    61ae:	4648      	mov	r0, r9
    61b0:	f7fe fed4 	bl	4f5c <compile_syntax_error>
                    return;
    61b4:	e045      	b.n	6242 <compile_trailer_paren_helper+0xe6>
                        compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "LHS of keyword arg must be an id");
    61b6:	4a3f      	ldr	r2, [pc, #252]	; (62b4 <compile_trailer_paren_helper+0x158>)
    61b8:	4629      	mov	r1, r5
    61ba:	4648      	mov	r0, r9
    61bc:	f7fe fece 	bl	4f5c <compile_syntax_error>
                        return;
    61c0:	e03f      	b.n	6242 <compile_trailer_paren_helper+0xe6>
                    compile_comprehension(comp, pns_arg, SCOPE_GEN_EXPR);
    61c2:	2206      	movs	r2, #6
    61c4:	4629      	mov	r1, r5
    61c6:	4648      	mov	r0, r9
    61c8:	f7ff ff24 	bl	6014 <compile_comprehension>
                    n_positional++;
    61cc:	3601      	adds	r6, #1
    61ce:	e008      	b.n	61e2 <compile_trailer_paren_helper+0x86>
            if (star_flags) {
    61d0:	bb97      	cbnz	r7, 6238 <compile_trailer_paren_helper+0xdc>
            if (n_keyword > 0) {
    61d2:	f1ba 0f00 	cmp.w	sl, #0
    61d6:	d137      	bne.n	6248 <compile_trailer_paren_helper+0xec>
            compile_node(comp, args[i]);
    61d8:	4629      	mov	r1, r5
    61da:	4648      	mov	r0, r9
    61dc:	f7fe fff8 	bl	51d0 <compile_node>
            n_positional++;
    61e0:	3601      	adds	r6, #1
    for (int i = 0; i < n_args; i++) {
    61e2:	3401      	adds	r4, #1
    61e4:	4544      	cmp	r4, r8
    61e6:	da35      	bge.n	6254 <compile_trailer_paren_helper+0xf8>
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    61e8:	9b05      	ldr	r3, [sp, #20]
    61ea:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    61ee:	2d00      	cmp	r5, #0
    61f0:	d0ee      	beq.n	61d0 <compile_trailer_paren_helper+0x74>
    61f2:	f015 0f03 	tst.w	r5, #3
    61f6:	d1eb      	bne.n	61d0 <compile_trailer_paren_helper+0x74>
            if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_star) {
    61f8:	792b      	ldrb	r3, [r5, #4]
    61fa:	2b99      	cmp	r3, #153	; 0x99
    61fc:	d0c1      	beq.n	6182 <compile_trailer_paren_helper+0x26>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_dbl_star) {
    61fe:	2b9a      	cmp	r3, #154	; 0x9a
    6200:	d0cc      	beq.n	619c <compile_trailer_paren_helper+0x40>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_argument) {
    6202:	2b9b      	cmp	r3, #155	; 0x9b
    6204:	d1e4      	bne.n	61d0 <compile_trailer_paren_helper+0x74>
                if (!MP_PARSE_NODE_IS_STRUCT_KIND(pns_arg->nodes[1], PN_comp_for)) {
    6206:	68eb      	ldr	r3, [r5, #12]
    6208:	b12b      	cbz	r3, 6216 <compile_trailer_paren_helper+0xba>
    620a:	f013 0f03 	tst.w	r3, #3
    620e:	d102      	bne.n	6216 <compile_trailer_paren_helper+0xba>
    6210:	791b      	ldrb	r3, [r3, #4]
    6212:	2b9f      	cmp	r3, #159	; 0x9f
    6214:	d0d5      	beq.n	61c2 <compile_trailer_paren_helper+0x66>
                    if (!MP_PARSE_NODE_IS_ID(pns_arg->nodes[0])) {
    6216:	68a9      	ldr	r1, [r5, #8]
    6218:	f001 030f 	and.w	r3, r1, #15
    621c:	2b02      	cmp	r3, #2
    621e:	d1ca      	bne.n	61b6 <compile_trailer_paren_helper+0x5a>
                    EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns_arg->nodes[0]));
    6220:	0909      	lsrs	r1, r1, #4
    6222:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    6226:	f002 f912 	bl	844e <mp_emit_bc_load_const_str>
                    compile_node(comp, pns_arg->nodes[1]);
    622a:	68e9      	ldr	r1, [r5, #12]
    622c:	4648      	mov	r0, r9
    622e:	f7fe ffcf 	bl	51d0 <compile_node>
                    n_keyword += 1;
    6232:	f10a 0a01 	add.w	sl, sl, #1
    6236:	e7d4      	b.n	61e2 <compile_trailer_paren_helper+0x86>
                compile_syntax_error(comp, args[i], "non-keyword arg after */**");
    6238:	4a1f      	ldr	r2, [pc, #124]	; (62b8 <compile_trailer_paren_helper+0x15c>)
    623a:	4629      	mov	r1, r5
    623c:	4648      	mov	r0, r9
    623e:	f7fe fe8d 	bl	4f5c <compile_syntax_error>
}
    6242:	b007      	add	sp, #28
    6244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                compile_syntax_error(comp, args[i], "non-keyword arg after keyword arg");
    6248:	4a1c      	ldr	r2, [pc, #112]	; (62bc <compile_trailer_paren_helper+0x160>)
    624a:	4629      	mov	r1, r5
    624c:	4648      	mov	r0, r9
    624e:	f7fe fe85 	bl	4f5c <compile_syntax_error>
                return;
    6252:	e7f6      	b.n	6242 <compile_trailer_paren_helper+0xe6>
    if (star_flags != 0) {
    6254:	b177      	cbz	r7, 6274 <compile_trailer_paren_helper+0x118>
        if (star_args_node == NULL) {
    6256:	f1bb 0f00 	cmp.w	fp, #0
    625a:	d015      	beq.n	6288 <compile_trailer_paren_helper+0x12c>
            compile_node(comp, star_args_node->nodes[0]);
    625c:	f8db 1008 	ldr.w	r1, [fp, #8]
    6260:	4648      	mov	r0, r9
    6262:	f7fe ffb5 	bl	51d0 <compile_node>
        if (dblstar_args_node == NULL) {
    6266:	9b01      	ldr	r3, [sp, #4]
    6268:	b19b      	cbz	r3, 6292 <compile_trailer_paren_helper+0x136>
            compile_node(comp, dblstar_args_node->nodes[0]);
    626a:	9b01      	ldr	r3, [sp, #4]
    626c:	6899      	ldr	r1, [r3, #8]
    626e:	4648      	mov	r0, r9
    6270:	f7fe ffae 	bl	51d0 <compile_node>
    if (is_method_call) {
    6274:	9b02      	ldr	r3, [sp, #8]
    6276:	b18b      	cbz	r3, 629c <compile_trailer_paren_helper+0x140>
        EMIT_ARG(call_method, n_positional, n_keyword, star_flags);
    6278:	463b      	mov	r3, r7
    627a:	4652      	mov	r2, sl
    627c:	4631      	mov	r1, r6
    627e:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    6282:	f002 fb69 	bl	8958 <mp_emit_bc_call_method>
    6286:	e7dc      	b.n	6242 <compile_trailer_paren_helper+0xe6>
            EMIT(load_null);
    6288:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    628c:	f002 f8f7 	bl	847e <mp_emit_bc_load_null>
    6290:	e7e9      	b.n	6266 <compile_trailer_paren_helper+0x10a>
            EMIT(load_null);
    6292:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    6296:	f002 f8f2 	bl	847e <mp_emit_bc_load_null>
    629a:	e7eb      	b.n	6274 <compile_trailer_paren_helper+0x118>
        EMIT_ARG(call_function, n_positional, n_keyword, star_flags);
    629c:	463b      	mov	r3, r7
    629e:	4652      	mov	r2, sl
    62a0:	4631      	mov	r1, r6
    62a2:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    62a6:	f002 fb4b 	bl	8940 <mp_emit_bc_call_function>
    62aa:	e7ca      	b.n	6242 <compile_trailer_paren_helper+0xe6>
    62ac:	00024e4c 	.word	0x00024e4c
    62b0:	00024e64 	.word	0x00024e64
    62b4:	00024e7c 	.word	0x00024e7c
    62b8:	00024ea0 	.word	0x00024ea0
    62bc:	00024ebc 	.word	0x00024ebc

000062c0 <compile_classdef_helper>:
STATIC qstr compile_classdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    62c0:	b570      	push	{r4, r5, r6, lr}
    62c2:	4604      	mov	r4, r0
    62c4:	460e      	mov	r6, r1
    if (comp->pass == MP_PASS_SCOPE) {
    62c6:	7941      	ldrb	r1, [r0, #5]
    62c8:	2901      	cmp	r1, #1
    62ca:	d01c      	beq.n	6306 <compile_classdef_helper+0x46>
    EMIT(load_build_class);
    62cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    62ce:	f002 f8fe 	bl	84ce <mp_emit_bc_load_build_class>
    scope_t *cscope = (scope_t*)pns->nodes[3];
    62d2:	6975      	ldr	r5, [r6, #20]
    close_over_variables_etc(comp, cscope, 0, 0);
    62d4:	2300      	movs	r3, #0
    62d6:	461a      	mov	r2, r3
    62d8:	4629      	mov	r1, r5
    62da:	4620      	mov	r0, r4
    62dc:	f7ff fda0 	bl	5e20 <close_over_variables_etc>
    EMIT_ARG(load_const_str, cscope->simple_name);
    62e0:	8a69      	ldrh	r1, [r5, #18]
    62e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    62e4:	f002 f8b3 	bl	844e <mp_emit_bc_load_const_str>
    mp_parse_node_t parents = pns->nodes[1];
    62e8:	68f1      	ldr	r1, [r6, #12]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(parents, PN_classdef_2)) {
    62ea:	b129      	cbz	r1, 62f8 <compile_classdef_helper+0x38>
    62ec:	f011 0303 	ands.w	r3, r1, #3
    62f0:	d102      	bne.n	62f8 <compile_classdef_helper+0x38>
    62f2:	790a      	ldrb	r2, [r1, #4]
    62f4:	2a96      	cmp	r2, #150	; 0x96
    62f6:	d00c      	beq.n	6312 <compile_classdef_helper+0x52>
    compile_trailer_paren_helper(comp, parents, false, 2);
    62f8:	2302      	movs	r3, #2
    62fa:	2200      	movs	r2, #0
    62fc:	4620      	mov	r0, r4
    62fe:	f7ff ff2d 	bl	615c <compile_trailer_paren_helper>
}
    6302:	8a68      	ldrh	r0, [r5, #18]
    6304:	bd70      	pop	{r4, r5, r6, pc}
        scope_t *s = scope_new_and_link(comp, SCOPE_CLASS, (mp_parse_node_t)pns, emit_options);
    6306:	4613      	mov	r3, r2
    6308:	4632      	mov	r2, r6
    630a:	f7fe fd41 	bl	4d90 <scope_new_and_link>
        pns->nodes[3] = (mp_parse_node_t)s;
    630e:	6170      	str	r0, [r6, #20]
    6310:	e7dc      	b.n	62cc <compile_classdef_helper+0xc>
        parents = MP_PARSE_NODE_NULL;
    6312:	4619      	mov	r1, r3
    6314:	e7f0      	b.n	62f8 <compile_classdef_helper+0x38>

00006316 <compile_classdef>:
STATIC void compile_classdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6316:	b510      	push	{r4, lr}
    6318:	4604      	mov	r4, r0
    qstr cname = compile_classdef_helper(comp, pns, comp->scope_cur->emit_options);
    631a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    631c:	7e5a      	ldrb	r2, [r3, #25]
    631e:	f7ff ffcf 	bl	62c0 <compile_classdef_helper>
    compile_store_id(comp, cname);
    6322:	4601      	mov	r1, r0
    6324:	4620      	mov	r0, r4
    6326:	f7fe ff25 	bl	5174 <compile_store_id>
}
    632a:	bd10      	pop	{r4, pc}

0000632c <compile_trailer_paren>:
STATIC void compile_trailer_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    632c:	b508      	push	{r3, lr}
    compile_trailer_paren_helper(comp, pns->nodes[0], false, 0);
    632e:	2300      	movs	r3, #0
    6330:	461a      	mov	r2, r3
    6332:	6889      	ldr	r1, [r1, #8]
    6334:	f7ff ff12 	bl	615c <compile_trailer_paren_helper>
}
    6338:	bd08      	pop	{r3, pc}
	...

0000633c <compile_atom_brace>:
STATIC void compile_atom_brace(compiler_t *comp, mp_parse_node_struct_t *pns) {
    633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6340:	b082      	sub	sp, #8
    6342:	4605      	mov	r5, r0
    mp_parse_node_t pn = pns->nodes[0];
    6344:	688c      	ldr	r4, [r1, #8]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    6346:	b1cc      	cbz	r4, 637c <compile_atom_brace+0x40>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    6348:	f014 0f03 	tst.w	r4, #3
    634c:	d16a      	bne.n	6424 <compile_atom_brace+0xe8>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    634e:	7923      	ldrb	r3, [r4, #4]
    6350:	2b32      	cmp	r3, #50	; 0x32
    6352:	d018      	beq.n	6386 <compile_atom_brace+0x4a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker) {
    6354:	2b92      	cmp	r3, #146	; 0x92
    6356:	d165      	bne.n	6424 <compile_atom_brace+0xe8>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    6358:	68e0      	ldr	r0, [r4, #12]
    635a:	b300      	cbz	r0, 639e <compile_atom_brace+0x62>
    635c:	f010 0f03 	tst.w	r0, #3
    6360:	d11d      	bne.n	639e <compile_atom_brace+0x62>
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_dictorsetmaker_list) {
    6362:	7903      	ldrb	r3, [r0, #4]
    6364:	2b94      	cmp	r3, #148	; 0x94
    6366:	d021      	beq.n	63ac <compile_atom_brace+0x70>
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    6368:	2b9f      	cmp	r3, #159	; 0x9f
    636a:	d154      	bne.n	6416 <compile_atom_brace+0xda>
                    compile_comprehension(comp, pns, SCOPE_DICT_COMP);
    636c:	2204      	movs	r2, #4
    636e:	4621      	mov	r1, r4
    6370:	4628      	mov	r0, r5
    6372:	f7ff fe4f 	bl	6014 <compile_comprehension>
}
    6376:	b002      	add	sp, #8
    6378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        EMIT_ARG(build_map, 0);
    637c:	2100      	movs	r1, #0
    637e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6380:	f002 fa4e 	bl	8820 <mp_emit_bc_build_map>
    6384:	e7f7      	b.n	6376 <compile_atom_brace+0x3a>
            EMIT_ARG(build_map, 1);
    6386:	2101      	movs	r1, #1
    6388:	6a80      	ldr	r0, [r0, #40]	; 0x28
    638a:	f002 fa49 	bl	8820 <mp_emit_bc_build_map>
            compile_node(comp, pn);
    638e:	4621      	mov	r1, r4
    6390:	4628      	mov	r0, r5
    6392:	f7fe ff1d 	bl	51d0 <compile_node>
            EMIT(store_map);
    6396:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6398:	f002 fa4e 	bl	8838 <mp_emit_bc_store_map>
    639c:	e7eb      	b.n	6376 <compile_atom_brace+0x3a>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    639e:	4b25      	ldr	r3, [pc, #148]	; (6434 <compile_atom_brace+0xf8>)
    63a0:	4a25      	ldr	r2, [pc, #148]	; (6438 <compile_atom_brace+0xfc>)
    63a2:	f640 1191 	movw	r1, #2449	; 0x991
    63a6:	4825      	ldr	r0, [pc, #148]	; (643c <compile_atom_brace+0x100>)
    63a8:	f012 f8d8 	bl	1855c <__assert_func>
                int n = mp_parse_node_extract_list(&pns1->nodes[0], PN_dictorsetmaker_list2, &nodes);
    63ac:	aa01      	add	r2, sp, #4
    63ae:	2195      	movs	r1, #149	; 0x95
    63b0:	3008      	adds	r0, #8
    63b2:	f7fe f93b 	bl	462c <mp_parse_node_extract_list>
    63b6:	4680      	mov	r8, r0
                    EMIT_ARG(build_map, 1 + n);
    63b8:	1c41      	adds	r1, r0, #1
    63ba:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    63bc:	f002 fa30 	bl	8820 <mp_emit_bc_build_map>
                    compile_node(comp, pns->nodes[0]);
    63c0:	68a1      	ldr	r1, [r4, #8]
    63c2:	4628      	mov	r0, r5
    63c4:	f7fe ff04 	bl	51d0 <compile_node>
                    EMIT(store_map);
    63c8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    63ca:	f002 fa35 	bl	8838 <mp_emit_bc_store_map>
                for (int i = 0; i < n; i++) {
    63ce:	2600      	movs	r6, #0
    63d0:	e008      	b.n	63e4 <compile_atom_brace+0xa8>
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    63d2:	2700      	movs	r7, #0
                    compile_node(comp, pn_i);
    63d4:	4628      	mov	r0, r5
    63d6:	f7fe fefb 	bl	51d0 <compile_node>
                        if (!is_key_value) {
    63da:	b1b7      	cbz	r7, 640a <compile_atom_brace+0xce>
                        EMIT(store_map);
    63dc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    63de:	f002 fa2b 	bl	8838 <mp_emit_bc_store_map>
                for (int i = 0; i < n; i++) {
    63e2:	3601      	adds	r6, #1
    63e4:	4546      	cmp	r6, r8
    63e6:	dac6      	bge.n	6376 <compile_atom_brace+0x3a>
                    mp_parse_node_t pn_i = nodes[i];
    63e8:	9b01      	ldr	r3, [sp, #4]
    63ea:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    63ee:	2900      	cmp	r1, #0
    63f0:	d0ef      	beq.n	63d2 <compile_atom_brace+0x96>
    63f2:	f011 0f03 	tst.w	r1, #3
    63f6:	d104      	bne.n	6402 <compile_atom_brace+0xc6>
    63f8:	790b      	ldrb	r3, [r1, #4]
    63fa:	2b32      	cmp	r3, #50	; 0x32
    63fc:	d003      	beq.n	6406 <compile_atom_brace+0xca>
    63fe:	2700      	movs	r7, #0
    6400:	e7e8      	b.n	63d4 <compile_atom_brace+0x98>
    6402:	2700      	movs	r7, #0
    6404:	e7e6      	b.n	63d4 <compile_atom_brace+0x98>
    6406:	2701      	movs	r7, #1
    6408:	e7e4      	b.n	63d4 <compile_atom_brace+0x98>
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting key:value for dict");
    640a:	4a0d      	ldr	r2, [pc, #52]	; (6440 <compile_atom_brace+0x104>)
    640c:	4621      	mov	r1, r4
    640e:	4628      	mov	r0, r5
    6410:	f7fe fda4 	bl	4f5c <compile_syntax_error>
    6414:	e7af      	b.n	6376 <compile_atom_brace+0x3a>
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    6416:	4b0b      	ldr	r3, [pc, #44]	; (6444 <compile_atom_brace+0x108>)
    6418:	4a07      	ldr	r2, [pc, #28]	; (6438 <compile_atom_brace+0xfc>)
    641a:	f640 11ca 	movw	r1, #2506	; 0x9ca
    641e:	4807      	ldr	r0, [pc, #28]	; (643c <compile_atom_brace+0x100>)
    6420:	f012 f89c 	bl	1855c <__assert_func>
        assert(0);
    6424:	4b08      	ldr	r3, [pc, #32]	; (6448 <compile_atom_brace+0x10c>)
    6426:	4a04      	ldr	r2, [pc, #16]	; (6438 <compile_atom_brace+0xfc>)
    6428:	f640 11df 	movw	r1, #2527	; 0x9df
    642c:	4803      	ldr	r0, [pc, #12]	; (643c <compile_atom_brace+0x100>)
    642e:	f012 f895 	bl	1855c <__assert_func>
    6432:	bf00      	nop
    6434:	00024630 	.word	0x00024630
    6438:	00024404 	.word	0x00024404
    643c:	00024fdc 	.word	0x00024fdc
    6440:	00024658 	.word	0x00024658
    6444:	00024678 	.word	0x00024678
    6448:	000252b4 	.word	0x000252b4

0000644c <c_tuple>:
STATIC void c_tuple(compiler_t *comp, mp_parse_node_t pn, mp_parse_node_struct_t *pns_list) {
    644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6450:	4607      	mov	r7, r0
    6452:	4616      	mov	r6, r2
    if (!MP_PARSE_NODE_IS_NULL(pn)) {
    6454:	b931      	cbnz	r1, 6464 <c_tuple+0x18>
    int total = 0;
    6456:	f04f 0800 	mov.w	r8, #0
    if (pns_list != NULL) {
    645a:	b196      	cbz	r6, 6482 <c_tuple+0x36>
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_list);
    645c:	6875      	ldr	r5, [r6, #4]
    645e:	0a2d      	lsrs	r5, r5, #8
        for (int i = 0; i < n; i++) {
    6460:	2400      	movs	r4, #0
    6462:	e00b      	b.n	647c <c_tuple+0x30>
        compile_node(comp, pn);
    6464:	f7fe feb4 	bl	51d0 <compile_node>
        total += 1;
    6468:	f04f 0801 	mov.w	r8, #1
    646c:	e7f5      	b.n	645a <c_tuple+0xe>
            compile_node(comp, pns_list->nodes[i]);
    646e:	1ca3      	adds	r3, r4, #2
    6470:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    6474:	4638      	mov	r0, r7
    6476:	f7fe feab 	bl	51d0 <compile_node>
        for (int i = 0; i < n; i++) {
    647a:	3401      	adds	r4, #1
    647c:	42ac      	cmp	r4, r5
    647e:	dbf6      	blt.n	646e <c_tuple+0x22>
        total += n;
    6480:	44a8      	add	r8, r5
    EMIT_ARG(build_tuple, total);
    6482:	4641      	mov	r1, r8
    6484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6486:	f002 f9b1 	bl	87ec <mp_emit_bc_build_tuple>
}
    648a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00006490 <compile_atom_paren>:
STATIC void compile_atom_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6490:	b508      	push	{r3, lr}
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    6492:	6889      	ldr	r1, [r1, #8]
    6494:	b1b1      	cbz	r1, 64c4 <compile_atom_paren+0x34>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    6496:	f011 0f03 	tst.w	r1, #3
    649a:	d118      	bne.n	64ce <compile_atom_paren+0x3e>
    649c:	790b      	ldrb	r3, [r1, #4]
    649e:	2b8a      	cmp	r3, #138	; 0x8a
    64a0:	d115      	bne.n	64ce <compile_atom_paren+0x3e>
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    64a2:	68ca      	ldr	r2, [r1, #12]
    64a4:	b1d2      	cbz	r2, 64dc <compile_atom_paren+0x4c>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    64a6:	f012 0f03 	tst.w	r2, #3
    64aa:	d106      	bne.n	64ba <compile_atom_paren+0x2a>
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    64ac:	7913      	ldrb	r3, [r2, #4]
    64ae:	2b8d      	cmp	r3, #141	; 0x8d
    64b0:	d01b      	beq.n	64ea <compile_atom_paren+0x5a>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    64b2:	2b8e      	cmp	r3, #142	; 0x8e
    64b4:	d027      	beq.n	6506 <compile_atom_paren+0x76>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    64b6:	2b9f      	cmp	r3, #159	; 0x9f
    64b8:	d029      	beq.n	650e <compile_atom_paren+0x7e>
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    64ba:	460a      	mov	r2, r1
    64bc:	2100      	movs	r1, #0
    64be:	f7ff ffc5 	bl	644c <c_tuple>
}
    64c2:	bd08      	pop	{r3, pc}
        c_tuple(comp, MP_PARSE_NODE_NULL, NULL);
    64c4:	2200      	movs	r2, #0
    64c6:	4611      	mov	r1, r2
    64c8:	f7ff ffc0 	bl	644c <c_tuple>
    64cc:	e7f9      	b.n	64c2 <compile_atom_paren+0x32>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    64ce:	4b12      	ldr	r3, [pc, #72]	; (6518 <compile_atom_paren+0x88>)
    64d0:	4a12      	ldr	r2, [pc, #72]	; (651c <compile_atom_paren+0x8c>)
    64d2:	f640 1142 	movw	r1, #2370	; 0x942
    64d6:	4812      	ldr	r0, [pc, #72]	; (6520 <compile_atom_paren+0x90>)
    64d8:	f012 f840 	bl	1855c <__assert_func>
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    64dc:	4b11      	ldr	r3, [pc, #68]	; (6524 <compile_atom_paren+0x94>)
    64de:	4a0f      	ldr	r2, [pc, #60]	; (651c <compile_atom_paren+0x8c>)
    64e0:	f640 1144 	movw	r1, #2372	; 0x944
    64e4:	480e      	ldr	r0, [pc, #56]	; (6520 <compile_atom_paren+0x90>)
    64e6:	f012 f839 	bl	1855c <__assert_func>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    64ea:	6893      	ldr	r3, [r2, #8]
    64ec:	b923      	cbnz	r3, 64f8 <compile_atom_paren+0x68>
                c_tuple(comp, pns->nodes[0], NULL);
    64ee:	2200      	movs	r2, #0
    64f0:	6889      	ldr	r1, [r1, #8]
    64f2:	f7ff ffab 	bl	644c <c_tuple>
    64f6:	e7e4      	b.n	64c2 <compile_atom_paren+0x32>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    64f8:	4b0b      	ldr	r3, [pc, #44]	; (6528 <compile_atom_paren+0x98>)
    64fa:	4a08      	ldr	r2, [pc, #32]	; (651c <compile_atom_paren+0x8c>)
    64fc:	f640 1149 	movw	r1, #2377	; 0x949
    6500:	4807      	ldr	r0, [pc, #28]	; (6520 <compile_atom_paren+0x90>)
    6502:	f012 f82b 	bl	1855c <__assert_func>
                c_tuple(comp, pns->nodes[0], pns2);
    6506:	6889      	ldr	r1, [r1, #8]
    6508:	f7ff ffa0 	bl	644c <c_tuple>
    650c:	e7d9      	b.n	64c2 <compile_atom_paren+0x32>
                compile_comprehension(comp, pns, SCOPE_GEN_EXPR);
    650e:	2206      	movs	r2, #6
    6510:	f7ff fd80 	bl	6014 <compile_comprehension>
    6514:	e7d5      	b.n	64c2 <compile_atom_paren+0x32>
    6516:	bf00      	nop
    6518:	000244a4 	.word	0x000244a4
    651c:	000243d8 	.word	0x000243d8
    6520:	00024fdc 	.word	0x00024fdc
    6524:	000246e8 	.word	0x000246e8
    6528:	000244e4 	.word	0x000244e4

0000652c <compile_generic_tuple>:
STATIC void compile_generic_tuple(compiler_t *comp, mp_parse_node_struct_t *pns) {
    652c:	b508      	push	{r3, lr}
    c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    652e:	460a      	mov	r2, r1
    6530:	2100      	movs	r1, #0
    6532:	f7ff ff8b 	bl	644c <c_tuple>
}
    6536:	bd08      	pop	{r3, pc}

00006538 <compile_funcdef_lambdef>:
STATIC void compile_funcdef_lambdef(compiler_t *comp, scope_t *scope, mp_parse_node_t pn_params, pn_kind_t pn_list_kind) {
    6538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    653c:	4604      	mov	r4, r0
    653e:	4688      	mov	r8, r1
    6540:	4611      	mov	r1, r2
    6542:	461a      	mov	r2, r3
    bool orig_have_star = comp->have_star;
    6544:	7985      	ldrb	r5, [r0, #6]
    6546:	3500      	adds	r5, #0
    6548:	bf18      	it	ne
    654a:	2501      	movne	r5, #1
    uint16_t orig_num_dict_params = comp->num_dict_params;
    654c:	8a87      	ldrh	r7, [r0, #20]
    uint16_t orig_num_default_params = comp->num_default_params;
    654e:	8ac6      	ldrh	r6, [r0, #22]
    comp->have_star = false;
    6550:	2300      	movs	r3, #0
    6552:	7183      	strb	r3, [r0, #6]
    comp->num_dict_params = 0;
    6554:	8283      	strh	r3, [r0, #20]
    comp->num_default_params = 0;
    6556:	82c3      	strh	r3, [r0, #22]
    apply_to_single_or_list(comp, pn_params, pn_list_kind, compile_funcdef_lambdef_param);
    6558:	4b0d      	ldr	r3, [pc, #52]	; (6590 <compile_funcdef_lambdef+0x58>)
    655a:	f7fe fbe2 	bl	4d22 <apply_to_single_or_list>
    if (comp->compile_error != MP_OBJ_NULL) {
    655e:	68a3      	ldr	r3, [r4, #8]
    6560:	b10b      	cbz	r3, 6566 <compile_funcdef_lambdef+0x2e>
}
    6562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (comp->num_default_params > 0 && comp->num_dict_params == 0) {
    6566:	8ae1      	ldrh	r1, [r4, #22]
    6568:	b109      	cbz	r1, 656e <compile_funcdef_lambdef+0x36>
    656a:	8aa3      	ldrh	r3, [r4, #20]
    656c:	b14b      	cbz	r3, 6582 <compile_funcdef_lambdef+0x4a>
    close_over_variables_etc(comp, scope, comp->num_default_params, comp->num_dict_params);
    656e:	8aa3      	ldrh	r3, [r4, #20]
    6570:	8ae2      	ldrh	r2, [r4, #22]
    6572:	4641      	mov	r1, r8
    6574:	4620      	mov	r0, r4
    6576:	f7ff fc53 	bl	5e20 <close_over_variables_etc>
    comp->have_star = orig_have_star;
    657a:	71a5      	strb	r5, [r4, #6]
    comp->num_dict_params = orig_num_dict_params;
    657c:	82a7      	strh	r7, [r4, #20]
    comp->num_default_params = orig_num_default_params;
    657e:	82e6      	strh	r6, [r4, #22]
    6580:	e7ef      	b.n	6562 <compile_funcdef_lambdef+0x2a>
        EMIT_ARG(build_tuple, comp->num_default_params);
    6582:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6584:	f002 f932 	bl	87ec <mp_emit_bc_build_tuple>
        EMIT(load_null); // sentinel indicating empty default keyword args
    6588:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    658a:	f001 ff78 	bl	847e <mp_emit_bc_load_null>
    658e:	e7ee      	b.n	656e <compile_funcdef_lambdef+0x36>
    6590:	0000672d 	.word	0x0000672d

00006594 <compile_lambdef>:
STATIC void compile_lambdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6594:	b538      	push	{r3, r4, r5, lr}
    6596:	4604      	mov	r4, r0
    6598:	460d      	mov	r5, r1
    if (comp->pass == MP_PASS_SCOPE) {
    659a:	7943      	ldrb	r3, [r0, #5]
    659c:	2b01      	cmp	r3, #1
    659e:	d006      	beq.n	65ae <compile_lambdef+0x1a>
    compile_funcdef_lambdef(comp, this_scope, pns->nodes[0], PN_varargslist);
    65a0:	2346      	movs	r3, #70	; 0x46
    65a2:	68aa      	ldr	r2, [r5, #8]
    65a4:	6929      	ldr	r1, [r5, #16]
    65a6:	4620      	mov	r0, r4
    65a8:	f7ff ffc6 	bl	6538 <compile_funcdef_lambdef>
}
    65ac:	bd38      	pop	{r3, r4, r5, pc}
        scope_t *s = scope_new_and_link(comp, SCOPE_LAMBDA, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    65ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
    65b0:	7e5b      	ldrb	r3, [r3, #25]
    65b2:	460a      	mov	r2, r1
    65b4:	2102      	movs	r1, #2
    65b6:	f7fe fbeb 	bl	4d90 <scope_new_and_link>
        pns->nodes[2] = (mp_parse_node_t)s;
    65ba:	6128      	str	r0, [r5, #16]
    65bc:	e7f0      	b.n	65a0 <compile_lambdef+0xc>

000065be <compile_funcdef_helper>:
STATIC qstr compile_funcdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    65be:	b570      	push	{r4, r5, r6, lr}
    65c0:	4605      	mov	r5, r0
    65c2:	460c      	mov	r4, r1
    if (comp->pass == MP_PASS_SCOPE) {
    65c4:	7941      	ldrb	r1, [r0, #5]
    65c6:	2901      	cmp	r1, #1
    65c8:	d008      	beq.n	65dc <compile_funcdef_helper+0x1e>
    scope_t *fscope = (scope_t*)pns->nodes[4];
    65ca:	69a6      	ldr	r6, [r4, #24]
    compile_funcdef_lambdef(comp, fscope, pns->nodes[1], PN_typedargslist);
    65cc:	233e      	movs	r3, #62	; 0x3e
    65ce:	68e2      	ldr	r2, [r4, #12]
    65d0:	4631      	mov	r1, r6
    65d2:	4628      	mov	r0, r5
    65d4:	f7ff ffb0 	bl	6538 <compile_funcdef_lambdef>
}
    65d8:	8a70      	ldrh	r0, [r6, #18]
    65da:	bd70      	pop	{r4, r5, r6, pc}
        scope_t *s = scope_new_and_link(comp, SCOPE_FUNCTION, (mp_parse_node_t)pns, emit_options);
    65dc:	4613      	mov	r3, r2
    65de:	4622      	mov	r2, r4
    65e0:	2107      	movs	r1, #7
    65e2:	f7fe fbd5 	bl	4d90 <scope_new_and_link>
        pns->nodes[4] = (mp_parse_node_t)s;
    65e6:	61a0      	str	r0, [r4, #24]
    65e8:	e7ef      	b.n	65ca <compile_funcdef_helper+0xc>

000065ea <compile_funcdef>:
STATIC void compile_funcdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    65ea:	b510      	push	{r4, lr}
    65ec:	4604      	mov	r4, r0
    qstr fname = compile_funcdef_helper(comp, pns, comp->scope_cur->emit_options);
    65ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
    65f0:	7e5a      	ldrb	r2, [r3, #25]
    65f2:	f7ff ffe4 	bl	65be <compile_funcdef_helper>
    compile_store_id(comp, fname);
    65f6:	4601      	mov	r1, r0
    65f8:	4620      	mov	r0, r4
    65fa:	f7fe fdbb 	bl	5174 <compile_store_id>
}
    65fe:	bd10      	pop	{r4, pc}

00006600 <compile_decorated>:
STATIC void compile_decorated(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6604:	b085      	sub	sp, #20
    6606:	4680      	mov	r8, r0
    6608:	468b      	mov	fp, r1
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_decorators, &nodes);
    660a:	aa03      	add	r2, sp, #12
    660c:	213b      	movs	r1, #59	; 0x3b
    660e:	f10b 0008 	add.w	r0, fp, #8
    6612:	f7fe f80b 	bl	462c <mp_parse_node_extract_list>
    6616:	4682      	mov	sl, r0
    uint emit_options = comp->scope_cur->emit_options;
    6618:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    661c:	7e5b      	ldrb	r3, [r3, #25]
    661e:	9302      	str	r3, [sp, #8]
    for (int i = 0; i < n; i++) {
    6620:	2700      	movs	r7, #0
    int num_built_in_decorators = 0;
    6622:	46b9      	mov	r9, r7
    for (int i = 0; i < n; i++) {
    6624:	e026      	b.n	6674 <compile_decorated+0x74>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    6626:	4b3c      	ldr	r3, [pc, #240]	; (6718 <compile_decorated+0x118>)
    6628:	4a3c      	ldr	r2, [pc, #240]	; (671c <compile_decorated+0x11c>)
    662a:	f44f 7149 	mov.w	r1, #804	; 0x324
    662e:	483c      	ldr	r0, [pc, #240]	; (6720 <compile_decorated+0x120>)
    6630:	f011 ff94 	bl	1855c <__assert_func>
            compile_node(comp, name_nodes[0]);
    6634:	9b01      	ldr	r3, [sp, #4]
    6636:	6819      	ldr	r1, [r3, #0]
    6638:	4640      	mov	r0, r8
    663a:	f7fe fdc9 	bl	51d0 <compile_node>
            for (int j = 1; j < name_len; j++) {
    663e:	2401      	movs	r4, #1
    6640:	42b4      	cmp	r4, r6
    6642:	da14      	bge.n	666e <compile_decorated+0x6e>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    6644:	9b01      	ldr	r3, [sp, #4]
    6646:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    664a:	f001 030f 	and.w	r3, r1, #15
    664e:	2b02      	cmp	r3, #2
    6650:	d106      	bne.n	6660 <compile_decorated+0x60>
                EMIT_ARG(load_attr, MP_PARSE_NODE_LEAF_ARG(name_nodes[j]));
    6652:	0909      	lsrs	r1, r1, #4
    6654:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    6658:	f001 ff1b 	bl	8492 <mp_emit_bc_load_attr>
            for (int j = 1; j < name_len; j++) {
    665c:	3401      	adds	r4, #1
    665e:	e7ef      	b.n	6640 <compile_decorated+0x40>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    6660:	4b30      	ldr	r3, [pc, #192]	; (6724 <compile_decorated+0x124>)
    6662:	4a2e      	ldr	r2, [pc, #184]	; (671c <compile_decorated+0x11c>)
    6664:	f240 3136 	movw	r1, #822	; 0x336
    6668:	482d      	ldr	r0, [pc, #180]	; (6720 <compile_decorated+0x120>)
    666a:	f011 ff77 	bl	1855c <__assert_func>
            if (!MP_PARSE_NODE_IS_NULL(pns_decorator->nodes[1])) {
    666e:	68e9      	ldr	r1, [r5, #12]
    6670:	b9f9      	cbnz	r1, 66b2 <compile_decorated+0xb2>
    for (int i = 0; i < n; i++) {
    6672:	3701      	adds	r7, #1
    6674:	4557      	cmp	r7, sl
    6676:	da20      	bge.n	66ba <compile_decorated+0xba>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    6678:	9b03      	ldr	r3, [sp, #12]
    667a:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
    667e:	2d00      	cmp	r5, #0
    6680:	d0d1      	beq.n	6626 <compile_decorated+0x26>
    6682:	f015 0f03 	tst.w	r5, #3
    6686:	d1ce      	bne.n	6626 <compile_decorated+0x26>
    6688:	792b      	ldrb	r3, [r5, #4]
    668a:	2b3a      	cmp	r3, #58	; 0x3a
    668c:	d1cb      	bne.n	6626 <compile_decorated+0x26>
        int name_len = mp_parse_node_extract_list(&pns_decorator->nodes[0], PN_dotted_name, &name_nodes);
    668e:	aa01      	add	r2, sp, #4
    6690:	2166      	movs	r1, #102	; 0x66
    6692:	f105 0008 	add.w	r0, r5, #8
    6696:	f7fd ffc9 	bl	462c <mp_parse_node_extract_list>
    669a:	4606      	mov	r6, r0
        if (compile_built_in_decorator(comp, name_len, name_nodes, &emit_options)) {
    669c:	ab02      	add	r3, sp, #8
    669e:	9a01      	ldr	r2, [sp, #4]
    66a0:	4601      	mov	r1, r0
    66a2:	4640      	mov	r0, r8
    66a4:	f7fe fd2c 	bl	5100 <compile_built_in_decorator>
    66a8:	2800      	cmp	r0, #0
    66aa:	d0c3      	beq.n	6634 <compile_decorated+0x34>
            num_built_in_decorators += 1;
    66ac:	f109 0901 	add.w	r9, r9, #1
    66b0:	e7df      	b.n	6672 <compile_decorated+0x72>
                compile_node(comp, pns_decorator->nodes[1]);
    66b2:	4640      	mov	r0, r8
    66b4:	f7fe fd8c 	bl	51d0 <compile_node>
    66b8:	e7db      	b.n	6672 <compile_decorated+0x72>
    mp_parse_node_struct_t *pns_body = (mp_parse_node_struct_t*)pns->nodes[1];
    66ba:	f8db 100c 	ldr.w	r1, [fp, #12]
    if (MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_funcdef) {
    66be:	790b      	ldrb	r3, [r1, #4]
    66c0:	2b03      	cmp	r3, #3
    66c2:	d008      	beq.n	66d6 <compile_decorated+0xd6>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    66c4:	2b33      	cmp	r3, #51	; 0x33
    66c6:	d10c      	bne.n	66e2 <compile_decorated+0xe2>
        body_name = compile_classdef_helper(comp, pns_body, emit_options);
    66c8:	9a02      	ldr	r2, [sp, #8]
    66ca:	4640      	mov	r0, r8
    66cc:	f7ff fdf8 	bl	62c0 <compile_classdef_helper>
    66d0:	4605      	mov	r5, r0
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    66d2:	2400      	movs	r4, #0
    66d4:	e014      	b.n	6700 <compile_decorated+0x100>
        body_name = compile_funcdef_helper(comp, pns_body, emit_options);
    66d6:	9a02      	ldr	r2, [sp, #8]
    66d8:	4640      	mov	r0, r8
    66da:	f7ff ff70 	bl	65be <compile_funcdef_helper>
    66de:	4605      	mov	r5, r0
    66e0:	e7f7      	b.n	66d2 <compile_decorated+0xd2>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    66e2:	4b11      	ldr	r3, [pc, #68]	; (6728 <compile_decorated+0x128>)
    66e4:	4a0d      	ldr	r2, [pc, #52]	; (671c <compile_decorated+0x11c>)
    66e6:	f44f 7154 	mov.w	r1, #848	; 0x350
    66ea:	480d      	ldr	r0, [pc, #52]	; (6720 <compile_decorated+0x120>)
    66ec:	f011 ff36 	bl	1855c <__assert_func>
        EMIT_ARG(call_function, 1, 0, 0);
    66f0:	2300      	movs	r3, #0
    66f2:	461a      	mov	r2, r3
    66f4:	2101      	movs	r1, #1
    66f6:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    66fa:	f002 f921 	bl	8940 <mp_emit_bc_call_function>
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    66fe:	3401      	adds	r4, #1
    6700:	ebaa 0309 	sub.w	r3, sl, r9
    6704:	42a3      	cmp	r3, r4
    6706:	dcf3      	bgt.n	66f0 <compile_decorated+0xf0>
    compile_store_id(comp, body_name);
    6708:	4629      	mov	r1, r5
    670a:	4640      	mov	r0, r8
    670c:	f7fe fd32 	bl	5174 <compile_store_id>
}
    6710:	b005      	add	sp, #20
    6712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6716:	bf00      	nop
    6718:	00024840 	.word	0x00024840
    671c:	00024268 	.word	0x00024268
    6720:	00024fdc 	.word	0x00024fdc
    6724:	00024878 	.word	0x00024878
    6728:	0002489c 	.word	0x0002489c

0000672c <compile_funcdef_lambdef_param>:
STATIC void compile_funcdef_lambdef_param(compiler_t *comp, mp_parse_node_t pn) {
    672c:	b570      	push	{r4, r5, r6, lr}
    672e:	4604      	mov	r4, r0
    if (MP_PARSE_NODE_IS_ID(pn)) {
    6730:	f001 030f 	and.w	r3, r1, #15
    6734:	2b02      	cmp	r3, #2
    6736:	d026      	beq.n	6786 <compile_funcdef_lambdef_param+0x5a>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    6738:	b1f1      	cbz	r1, 6778 <compile_funcdef_lambdef_param+0x4c>
    673a:	f011 0f03 	tst.w	r1, #3
    673e:	d11b      	bne.n	6778 <compile_funcdef_lambdef_param+0x4c>
        pn_kind = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn);
    6740:	790b      	ldrb	r3, [r1, #4]
    if (pn_kind == PN_typedargslist_star || pn_kind == PN_varargslist_star) {
    6742:	2b41      	cmp	r3, #65	; 0x41
    6744:	d022      	beq.n	678c <compile_funcdef_lambdef_param+0x60>
    6746:	2b49      	cmp	r3, #73	; 0x49
    6748:	d020      	beq.n	678c <compile_funcdef_lambdef_param+0x60>
    } else if (pn_kind == PN_typedargslist_dbl_star || pn_kind == PN_varargslist_dbl_star) {
    674a:	2b42      	cmp	r3, #66	; 0x42
    674c:	d020      	beq.n	6790 <compile_funcdef_lambdef_param+0x64>
    674e:	2b4a      	cmp	r3, #74	; 0x4a
    6750:	d01e      	beq.n	6790 <compile_funcdef_lambdef_param+0x64>
        if (pn_kind == -1) {
    6752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6756:	d006      	beq.n	6766 <compile_funcdef_lambdef_param+0x3a>
        } else if (pn_kind == PN_typedargslist_name) {
    6758:	2b40      	cmp	r3, #64	; 0x40
    675a:	d01a      	beq.n	6792 <compile_funcdef_lambdef_param+0x66>
            assert(pn_kind == PN_varargslist_name); // should be
    675c:	2b48      	cmp	r3, #72	; 0x48
    675e:	d11b      	bne.n	6798 <compile_funcdef_lambdef_param+0x6c>
            pn_id = pns->nodes[0];
    6760:	688e      	ldr	r6, [r1, #8]
            pn_equal = pns->nodes[1];
    6762:	68cd      	ldr	r5, [r1, #12]
        if (MP_PARSE_NODE_IS_NULL(pn_equal)) {
    6764:	b9fd      	cbnz	r5, 67a6 <compile_funcdef_lambdef_param+0x7a>
            if (!comp->have_star && comp->num_default_params != 0) {
    6766:	79a3      	ldrb	r3, [r4, #6]
    6768:	b993      	cbnz	r3, 6790 <compile_funcdef_lambdef_param+0x64>
    676a:	8ae3      	ldrh	r3, [r4, #22]
    676c:	b183      	cbz	r3, 6790 <compile_funcdef_lambdef_param+0x64>
                compile_syntax_error(comp, pn, "non-default argument follows default argument");
    676e:	4a23      	ldr	r2, [pc, #140]	; (67fc <compile_funcdef_lambdef_param+0xd0>)
    6770:	4620      	mov	r0, r4
    6772:	f7fe fbf3 	bl	4f5c <compile_syntax_error>
                return;
    6776:	e00b      	b.n	6790 <compile_funcdef_lambdef_param+0x64>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    6778:	4b21      	ldr	r3, [pc, #132]	; (6800 <compile_funcdef_lambdef_param+0xd4>)
    677a:	4a22      	ldr	r2, [pc, #136]	; (6804 <compile_funcdef_lambdef_param+0xd8>)
    677c:	f240 214e 	movw	r1, #590	; 0x24e
    6780:	4821      	ldr	r0, [pc, #132]	; (6808 <compile_funcdef_lambdef_param+0xdc>)
    6782:	f011 feeb 	bl	1855c <__assert_func>
        pn_kind = -1;
    6786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    678a:	e7dc      	b.n	6746 <compile_funcdef_lambdef_param+0x1a>
        comp->have_star = true;
    678c:	2301      	movs	r3, #1
    678e:	71a3      	strb	r3, [r4, #6]
}
    6790:	bd70      	pop	{r4, r5, r6, pc}
            pn_id = pns->nodes[0];
    6792:	688e      	ldr	r6, [r1, #8]
            pn_equal = pns->nodes[2];
    6794:	690d      	ldr	r5, [r1, #16]
    6796:	e7e5      	b.n	6764 <compile_funcdef_lambdef_param+0x38>
            assert(pn_kind == PN_varargslist_name); // should be
    6798:	4b1c      	ldr	r3, [pc, #112]	; (680c <compile_funcdef_lambdef_param+0xe0>)
    679a:	4a1a      	ldr	r2, [pc, #104]	; (6804 <compile_funcdef_lambdef_param+0xd8>)
    679c:	f240 2173 	movw	r1, #627	; 0x273
    67a0:	4819      	ldr	r0, [pc, #100]	; (6808 <compile_funcdef_lambdef_param+0xdc>)
    67a2:	f011 fedb 	bl	1855c <__assert_func>
            if (comp->have_star) {
    67a6:	79a3      	ldrb	r3, [r4, #6]
    67a8:	b1fb      	cbz	r3, 67ea <compile_funcdef_lambdef_param+0xbe>
                comp->num_dict_params += 1;
    67aa:	8aa3      	ldrh	r3, [r4, #20]
    67ac:	3301      	adds	r3, #1
    67ae:	b29b      	uxth	r3, r3
    67b0:	82a3      	strh	r3, [r4, #20]
                if (comp->num_dict_params == 1) {
    67b2:	2b01      	cmp	r3, #1
    67b4:	d00b      	beq.n	67ce <compile_funcdef_lambdef_param+0xa2>
                compile_node(comp, pn_equal);
    67b6:	4629      	mov	r1, r5
    67b8:	4620      	mov	r0, r4
    67ba:	f7fe fd09 	bl	51d0 <compile_node>
                EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pn_id));
    67be:	0931      	lsrs	r1, r6, #4
    67c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    67c2:	f001 fe44 	bl	844e <mp_emit_bc_load_const_str>
                EMIT(store_map);
    67c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    67c8:	f002 f836 	bl	8838 <mp_emit_bc_store_map>
    67cc:	e7e0      	b.n	6790 <compile_funcdef_lambdef_param+0x64>
                    if (comp->num_default_params > 0) {
    67ce:	8ae1      	ldrh	r1, [r4, #22]
    67d0:	b139      	cbz	r1, 67e2 <compile_funcdef_lambdef_param+0xb6>
                        EMIT_ARG(build_tuple, comp->num_default_params);
    67d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    67d4:	f002 f80a 	bl	87ec <mp_emit_bc_build_tuple>
                    EMIT_ARG(build_map, 0);
    67d8:	2100      	movs	r1, #0
    67da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    67dc:	f002 f820 	bl	8820 <mp_emit_bc_build_map>
    67e0:	e7e9      	b.n	67b6 <compile_funcdef_lambdef_param+0x8a>
                        EMIT(load_null); // sentinel indicating empty default positional args
    67e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    67e4:	f001 fe4b 	bl	847e <mp_emit_bc_load_null>
    67e8:	e7f6      	b.n	67d8 <compile_funcdef_lambdef_param+0xac>
                comp->num_default_params += 1;
    67ea:	8ae3      	ldrh	r3, [r4, #22]
    67ec:	3301      	adds	r3, #1
    67ee:	82e3      	strh	r3, [r4, #22]
                compile_node(comp, pn_equal);
    67f0:	4629      	mov	r1, r5
    67f2:	4620      	mov	r0, r4
    67f4:	f7fe fcec 	bl	51d0 <compile_node>
    67f8:	e7ca      	b.n	6790 <compile_funcdef_lambdef_param+0x64>
    67fa:	bf00      	nop
    67fc:	00024958 	.word	0x00024958
    6800:	000241a8 	.word	0x000241a8
    6804:	00024248 	.word	0x00024248
    6808:	00024fdc 	.word	0x00024fdc
    680c:	00024938 	.word	0x00024938

00006810 <compile_atom_expr_normal>:
STATIC void compile_atom_expr_normal(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6814:	4680      	mov	r8, r0
    6816:	460c      	mov	r4, r1
    compile_node(comp, pns->nodes[0]);
    6818:	6889      	ldr	r1, [r1, #8]
    681a:	f7fe fcd9 	bl	51d0 <compile_node>
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    681e:	68e3      	ldr	r3, [r4, #12]
    6820:	2b00      	cmp	r3, #0
    6822:	d055      	beq.n	68d0 <compile_atom_expr_normal+0xc0>
    mp_parse_node_struct_t **pns_trail = (mp_parse_node_struct_t**)&pns->nodes[1];
    6824:	f104 070c 	add.w	r7, r4, #12
    if (MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_atom_expr_trailers) {
    6828:	685d      	ldr	r5, [r3, #4]
    682a:	b2ea      	uxtb	r2, r5
    682c:	2a86      	cmp	r2, #134	; 0x86
    682e:	d007      	beq.n	6840 <compile_atom_expr_normal+0x30>
    size_t num_trail = 1;
    6830:	2501      	movs	r5, #1
    if (comp->scope_cur->kind == SCOPE_FUNCTION
    6832:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    6836:	781b      	ldrb	r3, [r3, #0]
    6838:	2b07      	cmp	r3, #7
    683a:	d005      	beq.n	6848 <compile_atom_expr_normal+0x38>
    size_t i = 0;
    683c:	2400      	movs	r4, #0
    683e:	e05e      	b.n	68fe <compile_atom_expr_normal+0xee>
        num_trail = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_trail[0]);
    6840:	0a2d      	lsrs	r5, r5, #8
        pns_trail = (mp_parse_node_struct_t**)&pns_trail[0]->nodes[0];
    6842:	f103 0708 	add.w	r7, r3, #8
    6846:	e7f4      	b.n	6832 <compile_atom_expr_normal+0x22>
        && MP_PARSE_NODE_IS_ID(pns->nodes[0])
    6848:	68a3      	ldr	r3, [r4, #8]
    684a:	f003 020f 	and.w	r2, r3, #15
    684e:	2a02      	cmp	r2, #2
    6850:	d001      	beq.n	6856 <compile_atom_expr_normal+0x46>
    size_t i = 0;
    6852:	2400      	movs	r4, #0
    6854:	e053      	b.n	68fe <compile_atom_expr_normal+0xee>
        && MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]) == MP_QSTR_super
    6856:	f240 224f 	movw	r2, #591	; 0x24f
    685a:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
    685e:	d001      	beq.n	6864 <compile_atom_expr_normal+0x54>
    size_t i = 0;
    6860:	2400      	movs	r4, #0
    6862:	e04c      	b.n	68fe <compile_atom_expr_normal+0xee>
        && MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_trailer_paren
    6864:	683b      	ldr	r3, [r7, #0]
    6866:	791a      	ldrb	r2, [r3, #4]
    6868:	2a2d      	cmp	r2, #45	; 0x2d
    686a:	d001      	beq.n	6870 <compile_atom_expr_normal+0x60>
    size_t i = 0;
    686c:	2400      	movs	r4, #0
    686e:	e046      	b.n	68fe <compile_atom_expr_normal+0xee>
        && MP_PARSE_NODE_IS_NULL(pns_trail[0]->nodes[0])) {
    6870:	689b      	ldr	r3, [r3, #8]
    6872:	b10b      	cbz	r3, 6878 <compile_atom_expr_normal+0x68>
    size_t i = 0;
    6874:	2400      	movs	r4, #0
    6876:	e042      	b.n	68fe <compile_atom_expr_normal+0xee>
        compile_load_id(comp, MP_QSTR___class__);
    6878:	2106      	movs	r1, #6
    687a:	4640      	mov	r0, r8
    687c:	f7fe fc68 	bl	5150 <compile_load_id>
        id_info_t *id = &comp->scope_cur->id_info[0];
    6880:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    6884:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    6886:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    6888:	b1ea      	cbz	r2, 68c6 <compile_atom_expr_normal+0xb6>
            if (id->flags & ID_FLAG_IS_PARAM) {
    688a:	7859      	ldrb	r1, [r3, #1]
    688c:	f011 0f01 	tst.w	r1, #1
    6890:	d102      	bne.n	6898 <compile_atom_expr_normal+0x88>
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    6892:	3a01      	subs	r2, #1
    6894:	3308      	adds	r3, #8
    6896:	e7f7      	b.n	6888 <compile_atom_expr_normal+0x78>
                compile_load_id(comp, id->qst);
    6898:	6859      	ldr	r1, [r3, #4]
    689a:	4640      	mov	r0, r8
    689c:	f7fe fc58 	bl	5150 <compile_load_id>
        if (num_trail >= 3
    68a0:	2d02      	cmp	r5, #2
    68a2:	d907      	bls.n	68b4 <compile_atom_expr_normal+0xa4>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[1]) == PN_trailer_period
    68a4:	687b      	ldr	r3, [r7, #4]
    68a6:	791a      	ldrb	r2, [r3, #4]
    68a8:	2a2f      	cmp	r2, #47	; 0x2f
    68aa:	d103      	bne.n	68b4 <compile_atom_expr_normal+0xa4>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    68ac:	68bc      	ldr	r4, [r7, #8]
    68ae:	7922      	ldrb	r2, [r4, #4]
    68b0:	2a2d      	cmp	r2, #45	; 0x2d
    68b2:	d00f      	beq.n	68d4 <compile_atom_expr_normal+0xc4>
            EMIT_ARG(call_function, 2, 0, 0);
    68b4:	2300      	movs	r3, #0
    68b6:	461a      	mov	r2, r3
    68b8:	2102      	movs	r1, #2
    68ba:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    68be:	f002 f83f 	bl	8940 <mp_emit_bc_call_function>
            i = 1;
    68c2:	2401      	movs	r4, #1
    68c4:	e01b      	b.n	68fe <compile_atom_expr_normal+0xee>
            compile_syntax_error(comp, (mp_parse_node_t)pns_trail[0],
    68c6:	4a1e      	ldr	r2, [pc, #120]	; (6940 <compile_atom_expr_normal+0x130>)
    68c8:	6839      	ldr	r1, [r7, #0]
    68ca:	4640      	mov	r0, r8
    68cc:	f7fe fb46 	bl	4f5c <compile_syntax_error>
}
    68d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), true);
    68d4:	6899      	ldr	r1, [r3, #8]
    68d6:	2201      	movs	r2, #1
    68d8:	0909      	lsrs	r1, r1, #4
    68da:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    68de:	f001 fde4 	bl	84aa <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    68e2:	2300      	movs	r3, #0
    68e4:	2201      	movs	r2, #1
    68e6:	68a1      	ldr	r1, [r4, #8]
    68e8:	4640      	mov	r0, r8
    68ea:	f7ff fc37 	bl	615c <compile_trailer_paren_helper>
            i = 3;
    68ee:	2403      	movs	r4, #3
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    68f0:	e005      	b.n	68fe <compile_atom_expr_normal+0xee>
            compile_node(comp, (mp_parse_node_t)pns_trail[i]);
    68f2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
    68f6:	4640      	mov	r0, r8
    68f8:	f7fe fc6a 	bl	51d0 <compile_node>
    for (; i < num_trail; i++) {
    68fc:	3401      	adds	r4, #1
    68fe:	42a5      	cmp	r5, r4
    6900:	d9e6      	bls.n	68d0 <compile_atom_expr_normal+0xc0>
        if (i + 1 < num_trail
    6902:	1c66      	adds	r6, r4, #1
    6904:	42ae      	cmp	r6, r5
    6906:	d2f4      	bcs.n	68f2 <compile_atom_expr_normal+0xe2>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i]) == PN_trailer_period
    6908:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    690c:	791a      	ldrb	r2, [r3, #4]
    690e:	2a2f      	cmp	r2, #47	; 0x2f
    6910:	d1ef      	bne.n	68f2 <compile_atom_expr_normal+0xe2>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    6912:	f857 9026 	ldr.w	r9, [r7, r6, lsl #2]
    6916:	f899 2004 	ldrb.w	r2, [r9, #4]
    691a:	2a2d      	cmp	r2, #45	; 0x2d
    691c:	d1e9      	bne.n	68f2 <compile_atom_expr_normal+0xe2>
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), false);
    691e:	6899      	ldr	r1, [r3, #8]
    6920:	2200      	movs	r2, #0
    6922:	0909      	lsrs	r1, r1, #4
    6924:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    6928:	f001 fdbf 	bl	84aa <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    692c:	2300      	movs	r3, #0
    692e:	2201      	movs	r2, #1
    6930:	f8d9 1008 	ldr.w	r1, [r9, #8]
    6934:	4640      	mov	r0, r8
    6936:	f7ff fc11 	bl	615c <compile_trailer_paren_helper>
            i += 1;
    693a:	4634      	mov	r4, r6
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    693c:	e7de      	b.n	68fc <compile_atom_expr_normal+0xec>
    693e:	bf00      	nop
    6940:	000246d0 	.word	0x000246d0

00006944 <compile_power>:
STATIC void compile_power(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6944:	b510      	push	{r4, lr}
    6946:	4604      	mov	r4, r0
    compile_generic_all_nodes(comp, pns); // 2 nodes, arguments of power
    6948:	f7ff fa14 	bl	5d74 <compile_generic_all_nodes>
    EMIT_ARG(binary_op, MP_BINARY_OP_POWER);
    694c:	2120      	movs	r1, #32
    694e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6950:	f001 ff28 	bl	87a4 <mp_emit_bc_binary_op>
}
    6954:	bd10      	pop	{r4, pc}
	...

00006958 <compile_term>:
STATIC void compile_term(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    695a:	4606      	mov	r6, r0
    695c:	460d      	mov	r5, r1
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    695e:	684f      	ldr	r7, [r1, #4]
    6960:	0a3f      	lsrs	r7, r7, #8
    compile_node(comp, pns->nodes[0]);
    6962:	6889      	ldr	r1, [r1, #8]
    6964:	f7fe fc34 	bl	51d0 <compile_node>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    6968:	2401      	movs	r4, #1
    696a:	e01b      	b.n	69a4 <compile_term+0x4c>
            case MP_TOKEN_OP_STAR:      op = MP_BINARY_OP_MULTIPLY; break;
    696c:	211c      	movs	r1, #28
    696e:	e015      	b.n	699c <compile_term+0x44>
            case MP_TOKEN_OP_DBL_SLASH: op = MP_BINARY_OP_FLOOR_DIVIDE; break;
    6970:	211d      	movs	r1, #29
    6972:	e013      	b.n	699c <compile_term+0x44>
            case MP_TOKEN_OP_SLASH:     op = MP_BINARY_OP_TRUE_DIVIDE; break;
    6974:	211e      	movs	r1, #30
    6976:	e011      	b.n	699c <compile_term+0x44>
            case MP_TOKEN_OP_PERCENT:   op = MP_BINARY_OP_MODULO; break;
    6978:	211f      	movs	r1, #31
    697a:	e00f      	b.n	699c <compile_term+0x44>
            case MP_TOKEN_OP_DBL_LESS:  op = MP_BINARY_OP_LSHIFT; break;
    697c:	2118      	movs	r1, #24
    697e:	e00d      	b.n	699c <compile_term+0x44>
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    6980:	2b39      	cmp	r3, #57	; 0x39
    6982:	d101      	bne.n	6988 <compile_term+0x30>
                op = MP_BINARY_OP_RSHIFT;
    6984:	2119      	movs	r1, #25
    6986:	e009      	b.n	699c <compile_term+0x44>
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    6988:	4b1b      	ldr	r3, [pc, #108]	; (69f8 <compile_term+0xa0>)
    698a:	4a1c      	ldr	r2, [pc, #112]	; (69fc <compile_term+0xa4>)
    698c:	f640 015f 	movw	r1, #2143	; 0x85f
    6990:	481b      	ldr	r0, [pc, #108]	; (6a00 <compile_term+0xa8>)
    6992:	f011 fde3 	bl	1855c <__assert_func>
            case MP_TOKEN_OP_PLUS:      op = MP_BINARY_OP_ADD; break;
    6996:	211a      	movs	r1, #26
    6998:	e000      	b.n	699c <compile_term+0x44>
            case MP_TOKEN_OP_MINUS:     op = MP_BINARY_OP_SUBTRACT; break;
    699a:	211b      	movs	r1, #27
        EMIT_ARG(binary_op, op);
    699c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    699e:	f001 ff01 	bl	87a4 <mp_emit_bc_binary_op>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    69a2:	3402      	adds	r4, #2
    69a4:	1c63      	adds	r3, r4, #1
    69a6:	42bb      	cmp	r3, r7
    69a8:	da24      	bge.n	69f4 <compile_term+0x9c>
        compile_node(comp, pns->nodes[i + 1]);
    69aa:	3302      	adds	r3, #2
    69ac:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    69b0:	4630      	mov	r0, r6
    69b2:	f7fe fc0d 	bl	51d0 <compile_node>
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]);
    69b6:	1ca3      	adds	r3, r4, #2
    69b8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    69bc:	f3c3 1307 	ubfx	r3, r3, #4, #8
        switch (tok) {
    69c0:	f1a3 022f 	sub.w	r2, r3, #47	; 0x2f
    69c4:	2a08      	cmp	r2, #8
    69c6:	d8db      	bhi.n	6980 <compile_term+0x28>
    69c8:	a101      	add	r1, pc, #4	; (adr r1, 69d0 <compile_term+0x78>)
    69ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    69ce:	bf00      	nop
    69d0:	00006997 	.word	0x00006997
    69d4:	0000699b 	.word	0x0000699b
    69d8:	0000696d 	.word	0x0000696d
    69dc:	00006981 	.word	0x00006981
    69e0:	00006975 	.word	0x00006975
    69e4:	00006971 	.word	0x00006971
    69e8:	00006979 	.word	0x00006979
    69ec:	00006981 	.word	0x00006981
    69f0:	0000697d 	.word	0x0000697d
}
    69f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69f6:	bf00      	nop
    69f8:	00024df0 	.word	0x00024df0
    69fc:	0002439c 	.word	0x0002439c
    6a00:	00024fdc 	.word	0x00024fdc

00006a04 <c_binary_op>:
STATIC void c_binary_op(compiler_t *comp, mp_parse_node_struct_t *pns, mp_binary_op_t binary_op) {
    6a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a08:	4605      	mov	r5, r0
    6a0a:	460f      	mov	r7, r1
    6a0c:	4690      	mov	r8, r2
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    6a0e:	684e      	ldr	r6, [r1, #4]
    6a10:	0a36      	lsrs	r6, r6, #8
    compile_node(comp, pns->nodes[0]);
    6a12:	6889      	ldr	r1, [r1, #8]
    6a14:	f7fe fbdc 	bl	51d0 <compile_node>
    for (int i = 1; i < num_nodes; i += 1) {
    6a18:	2401      	movs	r4, #1
    6a1a:	e00a      	b.n	6a32 <c_binary_op+0x2e>
        compile_node(comp, pns->nodes[i]);
    6a1c:	1ca3      	adds	r3, r4, #2
    6a1e:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    6a22:	4628      	mov	r0, r5
    6a24:	f7fe fbd4 	bl	51d0 <compile_node>
        EMIT_ARG(binary_op, binary_op);
    6a28:	4641      	mov	r1, r8
    6a2a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6a2c:	f001 feba 	bl	87a4 <mp_emit_bc_binary_op>
    for (int i = 1; i < num_nodes; i += 1) {
    6a30:	3401      	adds	r4, #1
    6a32:	42b4      	cmp	r4, r6
    6a34:	dbf2      	blt.n	6a1c <c_binary_op+0x18>
}
    6a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006a3a <compile_and_expr>:
STATIC void compile_and_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6a3a:	b508      	push	{r3, lr}
    c_binary_op(comp, pns, MP_BINARY_OP_AND);
    6a3c:	2217      	movs	r2, #23
    6a3e:	f7ff ffe1 	bl	6a04 <c_binary_op>
}
    6a42:	bd08      	pop	{r3, pc}

00006a44 <compile_xor_expr>:
STATIC void compile_xor_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6a44:	b508      	push	{r3, lr}
    c_binary_op(comp, pns, MP_BINARY_OP_XOR);
    6a46:	2216      	movs	r2, #22
    6a48:	f7ff ffdc 	bl	6a04 <c_binary_op>
}
    6a4c:	bd08      	pop	{r3, pc}

00006a4e <compile_expr>:
STATIC void compile_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6a4e:	b508      	push	{r3, lr}
    c_binary_op(comp, pns, MP_BINARY_OP_OR);
    6a50:	2215      	movs	r2, #21
    6a52:	f7ff ffd7 	bl	6a04 <c_binary_op>
}
    6a56:	bd08      	pop	{r3, pc}

00006a58 <compile_expr_stmt>:
STATIC void compile_expr_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a5c:	4604      	mov	r4, r0
    6a5e:	460e      	mov	r6, r1
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    6a60:	68cd      	ldr	r5, [r1, #12]
    6a62:	bb4d      	cbnz	r5, 6ab8 <compile_expr_stmt+0x60>
        if (comp->is_repl && comp->scope_cur->kind == SCOPE_MODULE) {
    6a64:	7903      	ldrb	r3, [r0, #4]
    6a66:	b113      	cbz	r3, 6a6e <compile_expr_stmt+0x16>
    6a68:	6a43      	ldr	r3, [r0, #36]	; 0x24
    6a6a:	781b      	ldrb	r3, [r3, #0]
    6a6c:	b19b      	cbz	r3, 6a96 <compile_expr_stmt+0x3e>
            if ((MP_PARSE_NODE_IS_LEAF(pns->nodes[0]) && !MP_PARSE_NODE_IS_ID(pns->nodes[0]))
    6a6e:	68b1      	ldr	r1, [r6, #8]
    6a70:	f011 0303 	ands.w	r3, r1, #3
    6a74:	d003      	beq.n	6a7e <compile_expr_stmt+0x26>
    6a76:	f001 020f 	and.w	r2, r1, #15
    6a7a:	2a02      	cmp	r2, #2
    6a7c:	d12f      	bne.n	6ade <compile_expr_stmt+0x86>
                || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_const_object)) {
    6a7e:	b119      	cbz	r1, 6a88 <compile_expr_stmt+0x30>
    6a80:	b913      	cbnz	r3, 6a88 <compile_expr_stmt+0x30>
    6a82:	790b      	ldrb	r3, [r1, #4]
    6a84:	2b35      	cmp	r3, #53	; 0x35
    6a86:	d02a      	beq.n	6ade <compile_expr_stmt+0x86>
                compile_node(comp, pns->nodes[0]); // just an expression
    6a88:	4620      	mov	r0, r4
    6a8a:	f7fe fba1 	bl	51d0 <compile_node>
                EMIT(pop_top); // discard last result since this is a statement and leaves nothing on the stack
    6a8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6a90:	f001 fd5e 	bl	8550 <mp_emit_bc_pop_top>
    6a94:	e023      	b.n	6ade <compile_expr_stmt+0x86>
            compile_load_id(comp, MP_QSTR___repl_print__);
    6a96:	2121      	movs	r1, #33	; 0x21
    6a98:	f7fe fb5a 	bl	5150 <compile_load_id>
            compile_node(comp, pns->nodes[0]);
    6a9c:	68b1      	ldr	r1, [r6, #8]
    6a9e:	4620      	mov	r0, r4
    6aa0:	f7fe fb96 	bl	51d0 <compile_node>
            EMIT_ARG(call_function, 1, 0, 0);
    6aa4:	2300      	movs	r3, #0
    6aa6:	461a      	mov	r2, r3
    6aa8:	2101      	movs	r1, #1
    6aaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6aac:	f001 ff48 	bl	8940 <mp_emit_bc_call_function>
            EMIT(pop_top);
    6ab0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6ab2:	f001 fd4d 	bl	8550 <mp_emit_bc_pop_top>
    6ab6:	e012      	b.n	6ade <compile_expr_stmt+0x86>
    } else if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6ab8:	f015 0f03 	tst.w	r5, #3
    6abc:	d106      	bne.n	6acc <compile_expr_stmt+0x74>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    6abe:	462f      	mov	r7, r5
        int kind = MP_PARSE_NODE_STRUCT_KIND(pns1);
    6ac0:	686b      	ldr	r3, [r5, #4]
    6ac2:	b2da      	uxtb	r2, r3
        if (kind == PN_expr_stmt_augassign) {
    6ac4:	2a51      	cmp	r2, #81	; 0x51
    6ac6:	d00c      	beq.n	6ae2 <compile_expr_stmt+0x8a>
        } else if (kind == PN_expr_stmt_assign_list) {
    6ac8:	2a52      	cmp	r2, #82	; 0x52
    6aca:	d04a      	beq.n	6b62 <compile_expr_stmt+0x10a>
            compile_node(comp, pns->nodes[1]); // rhs
    6acc:	4629      	mov	r1, r5
    6ace:	4620      	mov	r0, r4
    6ad0:	f7fe fb7e 	bl	51d0 <compile_node>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    6ad4:	2200      	movs	r2, #0
    6ad6:	68b1      	ldr	r1, [r6, #8]
    6ad8:	4620      	mov	r0, r4
    6ada:	f7fe fc6b 	bl	53b4 <c_assign>
}
    6ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_LOAD); // lhs load for aug assign
    6ae2:	2201      	movs	r2, #1
    6ae4:	6889      	ldr	r1, [r1, #8]
    6ae6:	f7fe fc65 	bl	53b4 <c_assign>
            compile_node(comp, pns1->nodes[1]); // rhs
    6aea:	68e9      	ldr	r1, [r5, #12]
    6aec:	4620      	mov	r0, r4
    6aee:	f7fe fb6f 	bl	51d0 <compile_node>
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    6af2:	68ab      	ldr	r3, [r5, #8]
    6af4:	f003 020f 	and.w	r2, r3, #15
    6af8:	2a0e      	cmp	r2, #14
    6afa:	d10b      	bne.n	6b14 <compile_expr_stmt+0xbc>
            switch (MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0])) {
    6afc:	091b      	lsrs	r3, r3, #4
    6afe:	3b4e      	subs	r3, #78	; 0x4e
    6b00:	2b0a      	cmp	r3, #10
    6b02:	d822      	bhi.n	6b4a <compile_expr_stmt+0xf2>
    6b04:	e8df f003 	tbb	[pc, r3]
    6b08:	1d191715 	.word	0x1d191715
    6b0c:	0d0f1f1b 	.word	0x0d0f1f1b
    6b10:	1323      	.short	0x1323
    6b12:	11          	.byte	0x11
    6b13:	00          	.byte	0x00
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    6b14:	4b26      	ldr	r3, [pc, #152]	; (6bb0 <compile_expr_stmt+0x158>)
    6b16:	4a27      	ldr	r2, [pc, #156]	; (6bb4 <compile_expr_stmt+0x15c>)
    6b18:	f240 7171 	movw	r1, #1905	; 0x771
    6b1c:	4826      	ldr	r0, [pc, #152]	; (6bb8 <compile_expr_stmt+0x160>)
    6b1e:	f011 fd1d 	bl	1855c <__assert_func>
                case MP_TOKEN_DEL_PIPE_EQUAL: op = MP_BINARY_OP_INPLACE_OR; break;
    6b22:	2109      	movs	r1, #9
    6b24:	e014      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_AMPERSAND_EQUAL: op = MP_BINARY_OP_INPLACE_AND; break;
    6b26:	210b      	movs	r1, #11
    6b28:	e012      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_DBL_LESS_EQUAL: op = MP_BINARY_OP_INPLACE_LSHIFT; break;
    6b2a:	210c      	movs	r1, #12
    6b2c:	e010      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_DBL_MORE_EQUAL: op = MP_BINARY_OP_INPLACE_RSHIFT; break;
    6b2e:	210d      	movs	r1, #13
    6b30:	e00e      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_PLUS_EQUAL: op = MP_BINARY_OP_INPLACE_ADD; break;
    6b32:	210e      	movs	r1, #14
    6b34:	e00c      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_MINUS_EQUAL: op = MP_BINARY_OP_INPLACE_SUBTRACT; break;
    6b36:	210f      	movs	r1, #15
    6b38:	e00a      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_STAR_EQUAL: op = MP_BINARY_OP_INPLACE_MULTIPLY; break;
    6b3a:	2110      	movs	r1, #16
    6b3c:	e008      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_DBL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_FLOOR_DIVIDE; break;
    6b3e:	2111      	movs	r1, #17
    6b40:	e006      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_TRUE_DIVIDE; break;
    6b42:	2112      	movs	r1, #18
    6b44:	e004      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_PERCENT_EQUAL: op = MP_BINARY_OP_INPLACE_MODULO; break;
    6b46:	2113      	movs	r1, #19
    6b48:	e002      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_DBL_STAR_EQUAL: default: op = MP_BINARY_OP_INPLACE_POWER; break;
    6b4a:	2114      	movs	r1, #20
    6b4c:	e000      	b.n	6b50 <compile_expr_stmt+0xf8>
                case MP_TOKEN_DEL_CARET_EQUAL: op = MP_BINARY_OP_INPLACE_XOR; break;
    6b4e:	210a      	movs	r1, #10
            EMIT_ARG(binary_op, op);
    6b50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6b52:	f001 fe27 	bl	87a4 <mp_emit_bc_binary_op>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_STORE); // lhs store for aug assign
    6b56:	2202      	movs	r2, #2
    6b58:	68b1      	ldr	r1, [r6, #8]
    6b5a:	4620      	mov	r0, r4
    6b5c:	f7fe fc2a 	bl	53b4 <c_assign>
    6b60:	e7bd      	b.n	6ade <compile_expr_stmt+0x86>
            int rhs = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1) - 1;
    6b62:	0a1b      	lsrs	r3, r3, #8
    6b64:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
            compile_node(comp, pns1->nodes[rhs]); // rhs
    6b68:	3301      	adds	r3, #1
    6b6a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    6b6e:	f7fe fb2f 	bl	51d0 <compile_node>
            if (rhs > 0) {
    6b72:	f1b8 0f00 	cmp.w	r8, #0
    6b76:	dc06      	bgt.n	6b86 <compile_expr_stmt+0x12e>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    6b78:	2200      	movs	r2, #0
    6b7a:	68b1      	ldr	r1, [r6, #8]
    6b7c:	4620      	mov	r0, r4
    6b7e:	f7fe fc19 	bl	53b4 <c_assign>
            for (int i = 0; i < rhs; i++) {
    6b82:	2500      	movs	r5, #0
    6b84:	e00b      	b.n	6b9e <compile_expr_stmt+0x146>
                EMIT(dup_top);
    6b86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6b88:	f001 fcce 	bl	8528 <mp_emit_bc_dup_top>
    6b8c:	e7f4      	b.n	6b78 <compile_expr_stmt+0x120>
                c_assign(comp, pns1->nodes[i], ASSIGN_STORE); // middle store
    6b8e:	3502      	adds	r5, #2
    6b90:	2200      	movs	r2, #0
    6b92:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
    6b96:	4620      	mov	r0, r4
    6b98:	f7fe fc0c 	bl	53b4 <c_assign>
            for (int i = 0; i < rhs; i++) {
    6b9c:	4635      	mov	r5, r6
    6b9e:	4545      	cmp	r5, r8
    6ba0:	da9d      	bge.n	6ade <compile_expr_stmt+0x86>
                if (i + 1 < rhs) {
    6ba2:	1c6e      	adds	r6, r5, #1
    6ba4:	4546      	cmp	r6, r8
    6ba6:	daf2      	bge.n	6b8e <compile_expr_stmt+0x136>
                    EMIT(dup_top);
    6ba8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6baa:	f001 fcbd 	bl	8528 <mp_emit_bc_dup_top>
    6bae:	e7ee      	b.n	6b8e <compile_expr_stmt+0x136>
    6bb0:	000248ec 	.word	0x000248ec
    6bb4:	0002435c 	.word	0x0002435c
    6bb8:	00024fdc 	.word	0x00024fdc

00006bbc <compile_factor_2>:
STATIC void compile_factor_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6bbc:	b538      	push	{r3, r4, r5, lr}
    6bbe:	4605      	mov	r5, r0
    6bc0:	460c      	mov	r4, r1
    compile_node(comp, pns->nodes[1]);
    6bc2:	68c9      	ldr	r1, [r1, #12]
    6bc4:	f7fe fb04 	bl	51d0 <compile_node>
    mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    6bc8:	68a3      	ldr	r3, [r4, #8]
    6bca:	f3c3 1307 	ubfx	r3, r3, #4, #8
    switch (tok) {
    6bce:	2b2f      	cmp	r3, #47	; 0x2f
    6bd0:	d00c      	beq.n	6bec <compile_factor_2+0x30>
    6bd2:	2b30      	cmp	r3, #48	; 0x30
    6bd4:	d00f      	beq.n	6bf6 <compile_factor_2+0x3a>
            assert(tok == MP_TOKEN_OP_TILDE);
    6bd6:	2b3d      	cmp	r3, #61	; 0x3d
    6bd8:	d101      	bne.n	6bde <compile_factor_2+0x22>
            op = MP_UNARY_OP_INVERT;
    6bda:	2102      	movs	r1, #2
    6bdc:	e007      	b.n	6bee <compile_factor_2+0x32>
            assert(tok == MP_TOKEN_OP_TILDE);
    6bde:	4b07      	ldr	r3, [pc, #28]	; (6bfc <compile_factor_2+0x40>)
    6be0:	4a07      	ldr	r2, [pc, #28]	; (6c00 <compile_factor_2+0x44>)
    6be2:	f640 016f 	movw	r1, #2159	; 0x86f
    6be6:	4807      	ldr	r0, [pc, #28]	; (6c04 <compile_factor_2+0x48>)
    6be8:	f011 fcb8 	bl	1855c <__assert_func>
        case MP_TOKEN_OP_PLUS:  op = MP_UNARY_OP_POSITIVE; break;
    6bec:	2100      	movs	r1, #0
    EMIT_ARG(unary_op, op);
    6bee:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6bf0:	f001 fdcb 	bl	878a <mp_emit_bc_unary_op>
}
    6bf4:	bd38      	pop	{r3, r4, r5, pc}
        case MP_TOKEN_OP_MINUS: op = MP_UNARY_OP_NEGATIVE; break;
    6bf6:	2101      	movs	r1, #1
    6bf8:	e7f9      	b.n	6bee <compile_factor_2+0x32>
    6bfa:	bf00      	nop
    6bfc:	00023aa4 	.word	0x00023aa4
    6c00:	000243ac 	.word	0x000243ac
    6c04:	00024fdc 	.word	0x00024fdc

00006c08 <compile_not_test_2>:
STATIC void compile_not_test_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6c08:	b510      	push	{r4, lr}
    6c0a:	4604      	mov	r4, r0
    compile_node(comp, pns->nodes[0]);
    6c0c:	6889      	ldr	r1, [r1, #8]
    6c0e:	f7fe fadf 	bl	51d0 <compile_node>
    EMIT_ARG(unary_op, MP_UNARY_OP_NOT);
    6c12:	2103      	movs	r1, #3
    6c14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6c16:	f001 fdb8 	bl	878a <mp_emit_bc_unary_op>
}
    6c1a:	bd10      	pop	{r4, pc}

00006c1c <compile_or_and_test>:
STATIC void compile_or_and_test(compiler_t *comp, mp_parse_node_struct_t *pns, bool cond) {
    6c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c20:	4606      	mov	r6, r0
    6c22:	460f      	mov	r7, r1
    6c24:	4691      	mov	r9, r2
    uint l_end = comp_next_label(comp);
    6c26:	f7fe f86d 	bl	4d04 <comp_next_label>
    6c2a:	4680      	mov	r8, r0
    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    6c2c:	687d      	ldr	r5, [r7, #4]
    6c2e:	0a2d      	lsrs	r5, r5, #8
    for (int i = 0; i < n; i += 1) {
    6c30:	2400      	movs	r4, #0
    6c32:	42ac      	cmp	r4, r5
    6c34:	da0e      	bge.n	6c54 <compile_or_and_test+0x38>
        compile_node(comp, pns->nodes[i]);
    6c36:	1ca3      	adds	r3, r4, #2
    6c38:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    6c3c:	4630      	mov	r0, r6
    6c3e:	f7fe fac7 	bl	51d0 <compile_node>
        if (i + 1 < n) {
    6c42:	3401      	adds	r4, #1
    6c44:	42ac      	cmp	r4, r5
    6c46:	daf4      	bge.n	6c32 <compile_or_and_test+0x16>
            EMIT_ARG(jump_if_or_pop, cond, l_end);
    6c48:	4642      	mov	r2, r8
    6c4a:	4649      	mov	r1, r9
    6c4c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    6c4e:	f001 fcd7 	bl	8600 <mp_emit_bc_jump_if_or_pop>
    6c52:	e7ee      	b.n	6c32 <compile_or_and_test+0x16>
    EMIT_ARG(label_assign, l_end);
    6c54:	4641      	mov	r1, r8
    6c56:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    6c58:	f001 fb4e 	bl	82f8 <mp_emit_bc_label_assign>
}
    6c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006c60 <compile_and_test>:
STATIC void compile_and_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6c60:	b508      	push	{r3, lr}
    compile_or_and_test(comp, pns, false);
    6c62:	2200      	movs	r2, #0
    6c64:	f7ff ffda 	bl	6c1c <compile_or_and_test>
}
    6c68:	bd08      	pop	{r3, pc}

00006c6a <compile_or_test>:
STATIC void compile_or_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6c6a:	b508      	push	{r3, lr}
    compile_or_and_test(comp, pns, true);
    6c6c:	2201      	movs	r2, #1
    6c6e:	f7ff ffd5 	bl	6c1c <compile_or_and_test>
}
    6c72:	bd08      	pop	{r3, pc}

00006c74 <compile_comparison>:
STATIC void compile_comparison(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c78:	4604      	mov	r4, r0
    6c7a:	460f      	mov	r7, r1
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    6c7c:	684e      	ldr	r6, [r1, #4]
    6c7e:	0a36      	lsrs	r6, r6, #8
    compile_node(comp, pns->nodes[0]);
    6c80:	6889      	ldr	r1, [r1, #8]
    6c82:	f7fe faa5 	bl	51d0 <compile_node>
    if (multi) {
    6c86:	2e03      	cmp	r6, #3
    6c88:	dc04      	bgt.n	6c94 <compile_comparison+0x20>
    uint l_fail = 0;
    6c8a:	f04f 0800 	mov.w	r8, #0
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    6c8e:	f04f 0901 	mov.w	r9, #1
    6c92:	e028      	b.n	6ce6 <compile_comparison+0x72>
        l_fail = comp_next_label(comp);
    6c94:	4620      	mov	r0, r4
    6c96:	f7fe f835 	bl	4d04 <comp_next_label>
    6c9a:	4680      	mov	r8, r0
    6c9c:	e7f7      	b.n	6c8e <compile_comparison+0x1a>
            switch (MP_PARSE_NODE_LEAF_ARG(pns->nodes[i])) {
    6c9e:	091b      	lsrs	r3, r3, #4
    6ca0:	3b36      	subs	r3, #54	; 0x36
    6ca2:	2b0b      	cmp	r3, #11
    6ca4:	d811      	bhi.n	6cca <compile_comparison+0x56>
    6ca6:	e8df f003 	tbb	[pc, r3]
    6caa:	1006      	.short	0x1006
    6cac:	10101012 	.word	0x10101012
    6cb0:	0c0a1010 	.word	0x0c0a1010
    6cb4:	0e08      	.short	0x0e08
                case MP_TOKEN_OP_LESS: op = MP_BINARY_OP_LESS; break;
    6cb6:	2100      	movs	r1, #0
    6cb8:	e00a      	b.n	6cd0 <compile_comparison+0x5c>
                case MP_TOKEN_OP_DBL_EQUAL: op = MP_BINARY_OP_EQUAL; break;
    6cba:	2102      	movs	r1, #2
    6cbc:	e008      	b.n	6cd0 <compile_comparison+0x5c>
                case MP_TOKEN_OP_LESS_EQUAL: op = MP_BINARY_OP_LESS_EQUAL; break;
    6cbe:	2103      	movs	r1, #3
    6cc0:	e006      	b.n	6cd0 <compile_comparison+0x5c>
                case MP_TOKEN_OP_MORE_EQUAL: op = MP_BINARY_OP_MORE_EQUAL; break;
    6cc2:	2104      	movs	r1, #4
    6cc4:	e004      	b.n	6cd0 <compile_comparison+0x5c>
                case MP_TOKEN_OP_NOT_EQUAL: op = MP_BINARY_OP_NOT_EQUAL; break;
    6cc6:	2105      	movs	r1, #5
    6cc8:	e002      	b.n	6cd0 <compile_comparison+0x5c>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    6cca:	2106      	movs	r1, #6
    6ccc:	e000      	b.n	6cd0 <compile_comparison+0x5c>
                case MP_TOKEN_OP_MORE: op = MP_BINARY_OP_MORE; break;
    6cce:	2101      	movs	r1, #1
            EMIT_ARG(binary_op, op);
    6cd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6cd2:	f001 fd67 	bl	87a4 <mp_emit_bc_binary_op>
        if (i + 2 < num_nodes) {
    6cd6:	42b5      	cmp	r5, r6
    6cd8:	da04      	bge.n	6ce4 <compile_comparison+0x70>
            EMIT_ARG(jump_if_or_pop, false, l_fail);
    6cda:	4642      	mov	r2, r8
    6cdc:	2100      	movs	r1, #0
    6cde:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6ce0:	f001 fc8e 	bl	8600 <mp_emit_bc_jump_if_or_pop>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    6ce4:	46a9      	mov	r9, r5
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    6ce6:	f109 0301 	add.w	r3, r9, #1
    6cea:	42b3      	cmp	r3, r6
    6cec:	da3f      	bge.n	6d6e <compile_comparison+0xfa>
        compile_node(comp, pns->nodes[i + 1]);
    6cee:	3302      	adds	r3, #2
    6cf0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    6cf4:	4620      	mov	r0, r4
    6cf6:	f7fe fa6b 	bl	51d0 <compile_node>
        if (i + 2 < num_nodes) {
    6cfa:	f109 0502 	add.w	r5, r9, #2
    6cfe:	42b5      	cmp	r5, r6
    6d00:	da05      	bge.n	6d0e <compile_comparison+0x9a>
            EMIT(dup_top);
    6d02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d04:	f001 fc10 	bl	8528 <mp_emit_bc_dup_top>
            EMIT(rot_three);
    6d08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d0a:	f001 fc43 	bl	8594 <mp_emit_bc_rot_three>
        if (MP_PARSE_NODE_IS_TOKEN(pns->nodes[i])) {
    6d0e:	f109 0902 	add.w	r9, r9, #2
    6d12:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
    6d16:	f003 020f 	and.w	r2, r3, #15
    6d1a:	2a0e      	cmp	r2, #14
    6d1c:	d0bf      	beq.n	6c9e <compile_comparison+0x2a>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    6d1e:	b173      	cbz	r3, 6d3e <compile_comparison+0xca>
    6d20:	f013 0f03 	tst.w	r3, #3
    6d24:	d10b      	bne.n	6d3e <compile_comparison+0xca>
            int kind = MP_PARSE_NODE_STRUCT_KIND(pns2);
    6d26:	791a      	ldrb	r2, [r3, #4]
            if (kind == PN_comp_op_not_in) {
    6d28:	2a7d      	cmp	r2, #125	; 0x7d
    6d2a:	d00f      	beq.n	6d4c <compile_comparison+0xd8>
                assert(kind == PN_comp_op_is); // should be
    6d2c:	2a7e      	cmp	r2, #126	; 0x7e
    6d2e:	d112      	bne.n	6d56 <compile_comparison+0xe2>
                if (MP_PARSE_NODE_IS_NULL(pns2->nodes[0])) {
    6d30:	689b      	ldr	r3, [r3, #8]
    6d32:	b9bb      	cbnz	r3, 6d64 <compile_comparison+0xf0>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS);
    6d34:	2107      	movs	r1, #7
    6d36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d38:	f001 fd34 	bl	87a4 <mp_emit_bc_binary_op>
    6d3c:	e7cb      	b.n	6cd6 <compile_comparison+0x62>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    6d3e:	4b1b      	ldr	r3, [pc, #108]	; (6dac <compile_comparison+0x138>)
    6d40:	4a1b      	ldr	r2, [pc, #108]	; (6db0 <compile_comparison+0x13c>)
    6d42:	f640 0122 	movw	r1, #2082	; 0x822
    6d46:	481b      	ldr	r0, [pc, #108]	; (6db4 <compile_comparison+0x140>)
    6d48:	f011 fc08 	bl	1855c <__assert_func>
                EMIT_ARG(binary_op, MP_BINARY_OP_NOT_IN);
    6d4c:	2124      	movs	r1, #36	; 0x24
    6d4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d50:	f001 fd28 	bl	87a4 <mp_emit_bc_binary_op>
    6d54:	e7bf      	b.n	6cd6 <compile_comparison+0x62>
                assert(kind == PN_comp_op_is); // should be
    6d56:	4b18      	ldr	r3, [pc, #96]	; (6db8 <compile_comparison+0x144>)
    6d58:	4a15      	ldr	r2, [pc, #84]	; (6db0 <compile_comparison+0x13c>)
    6d5a:	f640 0128 	movw	r1, #2088	; 0x828
    6d5e:	4815      	ldr	r0, [pc, #84]	; (6db4 <compile_comparison+0x140>)
    6d60:	f011 fbfc 	bl	1855c <__assert_func>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS_NOT);
    6d64:	2125      	movs	r1, #37	; 0x25
    6d66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d68:	f001 fd1c 	bl	87a4 <mp_emit_bc_binary_op>
    6d6c:	e7b3      	b.n	6cd6 <compile_comparison+0x62>
    if (multi) {
    6d6e:	2e03      	cmp	r6, #3
    6d70:	dc01      	bgt.n	6d76 <compile_comparison+0x102>
}
    6d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        uint l_end = comp_next_label(comp);
    6d76:	4620      	mov	r0, r4
    6d78:	f7fd ffc4 	bl	4d04 <comp_next_label>
    6d7c:	4605      	mov	r5, r0
        EMIT_ARG(jump, l_end);
    6d7e:	4601      	mov	r1, r0
    6d80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d82:	f001 fc1c 	bl	85be <mp_emit_bc_jump>
        EMIT_ARG(label_assign, l_fail);
    6d86:	4641      	mov	r1, r8
    6d88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d8a:	f001 fab5 	bl	82f8 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1);
    6d8e:	2101      	movs	r1, #1
    6d90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d92:	f001 f9e3 	bl	815c <mp_emit_bc_adjust_stack_size>
        EMIT(rot_two);
    6d96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d98:	f001 fbe5 	bl	8566 <mp_emit_bc_rot_two>
        EMIT(pop_top);
    6d9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6d9e:	f001 fbd7 	bl	8550 <mp_emit_bc_pop_top>
        EMIT_ARG(label_assign, l_end);
    6da2:	4629      	mov	r1, r5
    6da4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6da6:	f001 faa7 	bl	82f8 <mp_emit_bc_label_assign>
}
    6daa:	e7e2      	b.n	6d72 <compile_comparison+0xfe>
    6dac:	00024748 	.word	0x00024748
    6db0:	00024388 	.word	0x00024388
    6db4:	00024fdc 	.word	0x00024fdc
    6db8:	00024770 	.word	0x00024770

00006dbc <compile_test_if_expr>:
STATIC void compile_test_if_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    6dc0:	68cd      	ldr	r5, [r1, #12]
    6dc2:	b37d      	cbz	r5, 6e24 <compile_test_if_expr+0x68>
    6dc4:	4604      	mov	r4, r0
    6dc6:	460e      	mov	r6, r1
    6dc8:	f015 0f03 	tst.w	r5, #3
    6dcc:	d12a      	bne.n	6e24 <compile_test_if_expr+0x68>
    6dce:	792b      	ldrb	r3, [r5, #4]
    6dd0:	2b79      	cmp	r3, #121	; 0x79
    6dd2:	d127      	bne.n	6e24 <compile_test_if_expr+0x68>
    uint l_fail = comp_next_label(comp);
    6dd4:	f7fd ff96 	bl	4d04 <comp_next_label>
    6dd8:	4680      	mov	r8, r0
    uint l_end = comp_next_label(comp);
    6dda:	4620      	mov	r0, r4
    6ddc:	f7fd ff92 	bl	4d04 <comp_next_label>
    6de0:	4607      	mov	r7, r0
    c_if_cond(comp, pns_test_if_else->nodes[0], false, l_fail); // condition
    6de2:	4643      	mov	r3, r8
    6de4:	2200      	movs	r2, #0
    6de6:	68a9      	ldr	r1, [r5, #8]
    6de8:	4620      	mov	r0, r4
    6dea:	f7fe fbf3 	bl	55d4 <c_if_cond>
    compile_node(comp, pns->nodes[0]); // success value
    6dee:	68b1      	ldr	r1, [r6, #8]
    6df0:	4620      	mov	r0, r4
    6df2:	f7fe f9ed 	bl	51d0 <compile_node>
    EMIT_ARG(jump, l_end);
    6df6:	4639      	mov	r1, r7
    6df8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6dfa:	f001 fbe0 	bl	85be <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_fail);
    6dfe:	4641      	mov	r1, r8
    6e00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6e02:	f001 fa79 	bl	82f8 <mp_emit_bc_label_assign>
    EMIT_ARG(adjust_stack_size, -1); // adjust stack size
    6e06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6e0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6e0c:	f001 f9a6 	bl	815c <mp_emit_bc_adjust_stack_size>
    compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    6e10:	68e9      	ldr	r1, [r5, #12]
    6e12:	4620      	mov	r0, r4
    6e14:	f7fe f9dc 	bl	51d0 <compile_node>
    EMIT_ARG(label_assign, l_end);
    6e18:	4639      	mov	r1, r7
    6e1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6e1c:	f001 fa6c 	bl	82f8 <mp_emit_bc_label_assign>
}
    6e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    6e24:	4b03      	ldr	r3, [pc, #12]	; (6e34 <compile_test_if_expr+0x78>)
    6e26:	4a04      	ldr	r2, [pc, #16]	; (6e38 <compile_test_if_expr+0x7c>)
    6e28:	f240 71d1 	movw	r1, #2001	; 0x7d1
    6e2c:	4803      	ldr	r0, [pc, #12]	; (6e3c <compile_test_if_expr+0x80>)
    6e2e:	f011 fb95 	bl	1855c <__assert_func>
    6e32:	bf00      	nop
    6e34:	00024e0c 	.word	0x00024e0c
    6e38:	00024370 	.word	0x00024370
    6e3c:	00024fdc 	.word	0x00024fdc

00006e40 <compile_for_stmt_optimised_range>:
STATIC void compile_for_stmt_optimised_range(compiler_t *comp, mp_parse_node_t pn_var, mp_parse_node_t pn_start, mp_parse_node_t pn_end, mp_parse_node_t pn_step, mp_parse_node_t pn_body, mp_parse_node_t pn_else) {
    6e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e44:	b087      	sub	sp, #28
    6e46:	4604      	mov	r4, r0
    6e48:	9104      	str	r1, [sp, #16]
    6e4a:	9205      	str	r2, [sp, #20]
    6e4c:	461e      	mov	r6, r3
    START_BREAK_CONTINUE_BLOCK
    6e4e:	f8b0 a018 	ldrh.w	sl, [r0, #24]
    6e52:	f8b0 901a 	ldrh.w	r9, [r0, #26]
    6e56:	f8b0 801e 	ldrh.w	r8, [r0, #30]
    6e5a:	f7fd ff53 	bl	4d04 <comp_next_label>
    6e5e:	4683      	mov	fp, r0
    6e60:	4620      	mov	r0, r4
    6e62:	f7fd ff4f 	bl	4d04 <comp_next_label>
    6e66:	9001      	str	r0, [sp, #4]
    6e68:	f8a4 b018 	strh.w	fp, [r4, #24]
    6e6c:	8360      	strh	r0, [r4, #26]
    6e6e:	8ba3      	ldrh	r3, [r4, #28]
    6e70:	83e3      	strh	r3, [r4, #30]
    uint top_label = comp_next_label(comp);
    6e72:	4620      	mov	r0, r4
    6e74:	f7fd ff46 	bl	4d04 <comp_next_label>
    6e78:	9002      	str	r0, [sp, #8]
    uint entry_label = comp_next_label(comp);
    6e7a:	4620      	mov	r0, r4
    6e7c:	f7fd ff42 	bl	4d04 <comp_next_label>
    6e80:	9003      	str	r0, [sp, #12]
    bool end_on_stack = !MP_PARSE_NODE_IS_SMALL_INT(pn_end);
    6e82:	f006 0501 	and.w	r5, r6, #1
    6e86:	2d00      	cmp	r5, #0
    6e88:	bf0c      	ite	eq
    6e8a:	2701      	moveq	r7, #1
    6e8c:	2700      	movne	r7, #0
    if (end_on_stack) {
    6e8e:	d103      	bne.n	6e98 <compile_for_stmt_optimised_range+0x58>
        compile_node(comp, pn_end);
    6e90:	4631      	mov	r1, r6
    6e92:	4620      	mov	r0, r4
    6e94:	f7fe f99c 	bl	51d0 <compile_node>
    compile_node(comp, pn_start);
    6e98:	9905      	ldr	r1, [sp, #20]
    6e9a:	4620      	mov	r0, r4
    6e9c:	f7fe f998 	bl	51d0 <compile_node>
    EMIT_ARG(jump, entry_label);
    6ea0:	9903      	ldr	r1, [sp, #12]
    6ea2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6ea4:	f001 fb8b 	bl	85be <mp_emit_bc_jump>
    EMIT_ARG(label_assign, top_label);
    6ea8:	9902      	ldr	r1, [sp, #8]
    6eaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6eac:	f001 fa24 	bl	82f8 <mp_emit_bc_label_assign>
    EMIT(dup_top);
    6eb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6eb2:	f001 fb39 	bl	8528 <mp_emit_bc_dup_top>
    c_assign(comp, pn_var, ASSIGN_STORE);
    6eb6:	2200      	movs	r2, #0
    6eb8:	9904      	ldr	r1, [sp, #16]
    6eba:	4620      	mov	r0, r4
    6ebc:	f7fe fa7a 	bl	53b4 <c_assign>
    compile_node(comp, pn_body);
    6ec0:	9911      	ldr	r1, [sp, #68]	; 0x44
    6ec2:	4620      	mov	r0, r4
    6ec4:	f7fe f984 	bl	51d0 <compile_node>
    EMIT_ARG(label_assign, continue_label);
    6ec8:	9901      	ldr	r1, [sp, #4]
    6eca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6ecc:	f001 fa14 	bl	82f8 <mp_emit_bc_label_assign>
    compile_node(comp, pn_step);
    6ed0:	9910      	ldr	r1, [sp, #64]	; 0x40
    6ed2:	4620      	mov	r0, r4
    6ed4:	f7fe f97c 	bl	51d0 <compile_node>
    EMIT_ARG(binary_op, MP_BINARY_OP_INPLACE_ADD);
    6ed8:	210e      	movs	r1, #14
    6eda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6edc:	f001 fc62 	bl	87a4 <mp_emit_bc_binary_op>
    EMIT_ARG(label_assign, entry_label);
    6ee0:	9903      	ldr	r1, [sp, #12]
    6ee2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6ee4:	f001 fa08 	bl	82f8 <mp_emit_bc_label_assign>
    if (end_on_stack) {
    6ee8:	b985      	cbnz	r5, 6f0c <compile_for_stmt_optimised_range+0xcc>
        EMIT(dup_top_two);
    6eea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6eec:	f001 fb26 	bl	853c <mp_emit_bc_dup_top_two>
        EMIT(rot_two);
    6ef0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6ef2:	f001 fb38 	bl	8566 <mp_emit_bc_rot_two>
    assert(MP_PARSE_NODE_IS_SMALL_INT(pn_step));
    6ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6ef8:	f013 0f01 	tst.w	r3, #1
    6efc:	d10e      	bne.n	6f1c <compile_for_stmt_optimised_range+0xdc>
    6efe:	4b2a      	ldr	r3, [pc, #168]	; (6fa8 <compile_for_stmt_optimised_range+0x168>)
    6f00:	4a2a      	ldr	r2, [pc, #168]	; (6fac <compile_for_stmt_optimised_range+0x16c>)
    6f02:	f240 516f 	movw	r1, #1391	; 0x56f
    6f06:	482a      	ldr	r0, [pc, #168]	; (6fb0 <compile_for_stmt_optimised_range+0x170>)
    6f08:	f011 fb28 	bl	1855c <__assert_func>
        EMIT(dup_top);
    6f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f0e:	f001 fb0b 	bl	8528 <mp_emit_bc_dup_top>
        compile_node(comp, pn_end);
    6f12:	4631      	mov	r1, r6
    6f14:	4620      	mov	r0, r4
    6f16:	f7fe f95b 	bl	51d0 <compile_node>
    6f1a:	e7ec      	b.n	6ef6 <compile_for_stmt_optimised_range+0xb6>
    if (MP_PARSE_NODE_LEAF_SMALL_INT(pn_step) >= 0) {
    6f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6f1e:	2b00      	cmp	r3, #0
    6f20:	db3b      	blt.n	6f9a <compile_for_stmt_optimised_range+0x15a>
        EMIT_ARG(binary_op, MP_BINARY_OP_LESS);
    6f22:	2100      	movs	r1, #0
    6f24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f26:	f001 fc3d 	bl	87a4 <mp_emit_bc_binary_op>
    EMIT_ARG(pop_jump_if, true, top_label);
    6f2a:	9a02      	ldr	r2, [sp, #8]
    6f2c:	2101      	movs	r1, #1
    6f2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f30:	f001 fb51 	bl	85d6 <mp_emit_bc_pop_jump_if>
    END_BREAK_CONTINUE_BLOCK
    6f34:	f8a4 a018 	strh.w	sl, [r4, #24]
    6f38:	f8a4 901a 	strh.w	r9, [r4, #26]
    6f3c:	f8a4 801e 	strh.w	r8, [r4, #30]
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6f40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f42:	b37b      	cbz	r3, 6fa4 <compile_for_stmt_optimised_range+0x164>
        EMIT(pop_top);
    6f44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f46:	f001 fb03 	bl	8550 <mp_emit_bc_pop_top>
        if (end_on_stack) {
    6f4a:	b915      	cbnz	r5, 6f52 <compile_for_stmt_optimised_range+0x112>
            EMIT(pop_top);
    6f4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f4e:	f001 faff 	bl	8550 <mp_emit_bc_pop_top>
        compile_node(comp, pn_else);
    6f52:	9912      	ldr	r1, [sp, #72]	; 0x48
    6f54:	4620      	mov	r0, r4
    6f56:	f7fe f93b 	bl	51d0 <compile_node>
        end_label = comp_next_label(comp);
    6f5a:	4620      	mov	r0, r4
    6f5c:	f7fd fed2 	bl	4d04 <comp_next_label>
    6f60:	4606      	mov	r6, r0
        EMIT_ARG(jump, end_label);
    6f62:	4601      	mov	r1, r0
    6f64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f66:	f001 fb2a 	bl	85be <mp_emit_bc_jump>
        EMIT_ARG(adjust_stack_size, 1 + end_on_stack);
    6f6a:	1c79      	adds	r1, r7, #1
    6f6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f6e:	f001 f8f5 	bl	815c <mp_emit_bc_adjust_stack_size>
    EMIT_ARG(label_assign, break_label);
    6f72:	4659      	mov	r1, fp
    6f74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f76:	f001 f9bf 	bl	82f8 <mp_emit_bc_label_assign>
    EMIT(pop_top);
    6f7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f7c:	f001 fae8 	bl	8550 <mp_emit_bc_pop_top>
    if (end_on_stack) {
    6f80:	b915      	cbnz	r5, 6f88 <compile_for_stmt_optimised_range+0x148>
        EMIT(pop_top);
    6f82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f84:	f001 fae4 	bl	8550 <mp_emit_bc_pop_top>
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f8a:	b11b      	cbz	r3, 6f94 <compile_for_stmt_optimised_range+0x154>
        EMIT_ARG(label_assign, end_label);
    6f8c:	4631      	mov	r1, r6
    6f8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f90:	f001 f9b2 	bl	82f8 <mp_emit_bc_label_assign>
}
    6f94:	b007      	add	sp, #28
    6f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        EMIT_ARG(binary_op, MP_BINARY_OP_MORE);
    6f9a:	2101      	movs	r1, #1
    6f9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f9e:	f001 fc01 	bl	87a4 <mp_emit_bc_binary_op>
    6fa2:	e7c2      	b.n	6f2a <compile_for_stmt_optimised_range+0xea>
    uint end_label = 0;
    6fa4:	2600      	movs	r6, #0
    6fa6:	e7e4      	b.n	6f72 <compile_for_stmt_optimised_range+0x132>
    6fa8:	00024914 	.word	0x00024914
    6fac:	000242e8 	.word	0x000242e8
    6fb0:	00024fdc 	.word	0x00024fdc

00006fb4 <compile_for_stmt>:
STATIC void compile_for_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fb8:	b087      	sub	sp, #28
    6fba:	4604      	mov	r4, r0
    6fbc:	460d      	mov	r5, r1
    if (/*comp->scope_cur->emit_options == MP_EMIT_OPT_VIPER &&*/ MP_PARSE_NODE_IS_ID(pns->nodes[0]) && MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_atom_expr_normal)) {
    6fbe:	688b      	ldr	r3, [r1, #8]
    6fc0:	f003 030f 	and.w	r3, r3, #15
    6fc4:	2b02      	cmp	r3, #2
    6fc6:	d107      	bne.n	6fd8 <compile_for_stmt+0x24>
    6fc8:	68cb      	ldr	r3, [r1, #12]
    6fca:	b12b      	cbz	r3, 6fd8 <compile_for_stmt+0x24>
    6fcc:	f013 0f03 	tst.w	r3, #3
    6fd0:	d102      	bne.n	6fd8 <compile_for_stmt+0x24>
    6fd2:	791a      	ldrb	r2, [r3, #4]
    6fd4:	2a29      	cmp	r2, #41	; 0x29
    6fd6:	d04f      	beq.n	7078 <compile_for_stmt+0xc4>
    START_BREAK_CONTINUE_BLOCK
    6fd8:	f8b4 a018 	ldrh.w	sl, [r4, #24]
    6fdc:	f8b4 901a 	ldrh.w	r9, [r4, #26]
    6fe0:	f8b4 801e 	ldrh.w	r8, [r4, #30]
    6fe4:	4620      	mov	r0, r4
    6fe6:	f7fd fe8d 	bl	4d04 <comp_next_label>
    6fea:	4607      	mov	r7, r0
    6fec:	4620      	mov	r0, r4
    6fee:	f7fd fe89 	bl	4d04 <comp_next_label>
    6ff2:	4606      	mov	r6, r0
    6ff4:	8360      	strh	r0, [r4, #26]
    6ff6:	8ba3      	ldrh	r3, [r4, #28]
    6ff8:	83e3      	strh	r3, [r4, #30]
    comp->break_label |= MP_EMIT_BREAK_FROM_FOR;
    6ffa:	ea6f 4347 	mvn.w	r3, r7, lsl #17
    6ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    7002:	8323      	strh	r3, [r4, #24]
    uint pop_label = comp_next_label(comp);
    7004:	4620      	mov	r0, r4
    7006:	f7fd fe7d 	bl	4d04 <comp_next_label>
    700a:	4683      	mov	fp, r0
    compile_node(comp, pns->nodes[1]); // iterator
    700c:	68e9      	ldr	r1, [r5, #12]
    700e:	4620      	mov	r0, r4
    7010:	f7fe f8de 	bl	51d0 <compile_node>
    EMIT_ARG(get_iter, true);
    7014:	2101      	movs	r1, #1
    7016:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7018:	f001 fb64 	bl	86e4 <mp_emit_bc_get_iter>
    EMIT_ARG(label_assign, continue_label);
    701c:	4631      	mov	r1, r6
    701e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7020:	f001 f96a 	bl	82f8 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, pop_label);
    7024:	4659      	mov	r1, fp
    7026:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7028:	f001 fb6e 	bl	8708 <mp_emit_bc_for_iter>
    c_assign(comp, pns->nodes[0], ASSIGN_STORE); // variable
    702c:	2200      	movs	r2, #0
    702e:	68a9      	ldr	r1, [r5, #8]
    7030:	4620      	mov	r0, r4
    7032:	f7fe f9bf 	bl	53b4 <c_assign>
    compile_node(comp, pns->nodes[2]); // body
    7036:	6929      	ldr	r1, [r5, #16]
    7038:	4620      	mov	r0, r4
    703a:	f7fe f8c9 	bl	51d0 <compile_node>
    if (!EMIT(last_emit_was_return_value)) {
    703e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7040:	f001 f886 	bl	8150 <mp_emit_bc_last_emit_was_return_value>
    7044:	2800      	cmp	r0, #0
    7046:	d078      	beq.n	713a <compile_for_stmt+0x186>
    EMIT_ARG(label_assign, pop_label);
    7048:	4659      	mov	r1, fp
    704a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    704c:	f001 f954 	bl	82f8 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    7050:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7052:	f001 fb65 	bl	8720 <mp_emit_bc_for_iter_end>
    END_BREAK_CONTINUE_BLOCK
    7056:	f8a4 a018 	strh.w	sl, [r4, #24]
    705a:	f8a4 901a 	strh.w	r9, [r4, #26]
    705e:	f8a4 801e 	strh.w	r8, [r4, #30]
    compile_node(comp, pns->nodes[3]); // else (may be empty)
    7062:	6969      	ldr	r1, [r5, #20]
    7064:	4620      	mov	r0, r4
    7066:	f7fe f8b3 	bl	51d0 <compile_node>
    EMIT_ARG(label_assign, break_label);
    706a:	4639      	mov	r1, r7
    706c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    706e:	f001 f943 	bl	82f8 <mp_emit_bc_label_assign>
}
    7072:	b007      	add	sp, #28
    7074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (MP_PARSE_NODE_IS_ID(pns_it->nodes[0])
    7078:	689a      	ldr	r2, [r3, #8]
    707a:	f002 010f 	and.w	r1, r2, #15
    707e:	2902      	cmp	r1, #2
    7080:	d1aa      	bne.n	6fd8 <compile_for_stmt+0x24>
            && MP_PARSE_NODE_LEAF_ARG(pns_it->nodes[0]) == MP_QSTR_range
    7082:	f240 2115 	movw	r1, #533	; 0x215
    7086:	ebb1 1f12 	cmp.w	r1, r2, lsr #4
    708a:	d1a5      	bne.n	6fd8 <compile_for_stmt+0x24>
            && MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pns_it->nodes[1]) == PN_trailer_paren) {
    708c:	68db      	ldr	r3, [r3, #12]
    708e:	791a      	ldrb	r2, [r3, #4]
    7090:	2a2d      	cmp	r2, #45	; 0x2d
    7092:	d1a1      	bne.n	6fd8 <compile_for_stmt+0x24>
            mp_parse_node_t pn_range_args = ((mp_parse_node_struct_t*)pns_it->nodes[1])->nodes[0];
    7094:	689b      	ldr	r3, [r3, #8]
    7096:	9304      	str	r3, [sp, #16]
            int n_args = mp_parse_node_extract_list(&pn_range_args, PN_arglist, &args);
    7098:	aa05      	add	r2, sp, #20
    709a:	2197      	movs	r1, #151	; 0x97
    709c:	a804      	add	r0, sp, #16
    709e:	f7fd fac5 	bl	462c <mp_parse_node_extract_list>
            if (1 <= n_args && n_args <= 3) {
    70a2:	1e43      	subs	r3, r0, #1
    70a4:	2b02      	cmp	r3, #2
    70a6:	d835      	bhi.n	7114 <compile_for_stmt+0x160>
                if (n_args == 1) {
    70a8:	2801      	cmp	r0, #1
    70aa:	d00e      	beq.n	70ca <compile_for_stmt+0x116>
                } else if (n_args == 2) {
    70ac:	2802      	cmp	r0, #2
    70ae:	d026      	beq.n	70fe <compile_for_stmt+0x14a>
                    pn_range_start = args[0];
    70b0:	9b05      	ldr	r3, [sp, #20]
    70b2:	681e      	ldr	r6, [r3, #0]
                    pn_range_end = args[1];
    70b4:	685f      	ldr	r7, [r3, #4]
                    pn_range_step = args[2];
    70b6:	f8d3 8008 	ldr.w	r8, [r3, #8]
                    if (!MP_PARSE_NODE_IS_SMALL_INT(pn_range_step)
    70ba:	f018 0f01 	tst.w	r8, #1
    70be:	d025      	beq.n	710c <compile_for_stmt+0x158>
                        || MP_PARSE_NODE_LEAF_SMALL_INT(pn_range_step) == 0) {
    70c0:	ea5f 0358 	movs.w	r3, r8, lsr #1
    70c4:	d024      	beq.n	7110 <compile_for_stmt+0x15c>
                optimize = true;
    70c6:	2301      	movs	r3, #1
    70c8:	e005      	b.n	70d6 <compile_for_stmt+0x122>
                    pn_range_end = args[0];
    70ca:	9b05      	ldr	r3, [sp, #20]
    70cc:	681f      	ldr	r7, [r3, #0]
                optimize = true;
    70ce:	2301      	movs	r3, #1
                    pn_range_step = mp_parse_node_new_small_int(1);
    70d0:	f04f 0803 	mov.w	r8, #3
                    pn_range_start = mp_parse_node_new_small_int(0);
    70d4:	461e      	mov	r6, r3
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_start)) {
    70d6:	b13b      	cbz	r3, 70e8 <compile_for_stmt+0x134>
    70d8:	b136      	cbz	r6, 70e8 <compile_for_stmt+0x134>
    70da:	f016 0f03 	tst.w	r6, #3
    70de:	d103      	bne.n	70e8 <compile_for_stmt+0x134>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_start);
    70e0:	7932      	ldrb	r2, [r6, #4]
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    70e2:	3a99      	subs	r2, #153	; 0x99
    70e4:	2a02      	cmp	r2, #2
    70e6:	d926      	bls.n	7136 <compile_for_stmt+0x182>
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_end)) {
    70e8:	b1ab      	cbz	r3, 7116 <compile_for_stmt+0x162>
    70ea:	b1a7      	cbz	r7, 7116 <compile_for_stmt+0x162>
    70ec:	f017 0f03 	tst.w	r7, #3
    70f0:	d111      	bne.n	7116 <compile_for_stmt+0x162>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_end);
    70f2:	793a      	ldrb	r2, [r7, #4]
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    70f4:	3a99      	subs	r2, #153	; 0x99
    70f6:	2a02      	cmp	r2, #2
    70f8:	d80d      	bhi.n	7116 <compile_for_stmt+0x162>
                        optimize = false;
    70fa:	2300      	movs	r3, #0
    70fc:	e00b      	b.n	7116 <compile_for_stmt+0x162>
                    pn_range_start = args[0];
    70fe:	9b05      	ldr	r3, [sp, #20]
    7100:	681e      	ldr	r6, [r3, #0]
                    pn_range_end = args[1];
    7102:	685f      	ldr	r7, [r3, #4]
                optimize = true;
    7104:	2301      	movs	r3, #1
                    pn_range_step = mp_parse_node_new_small_int(1);
    7106:	f04f 0803 	mov.w	r8, #3
    710a:	e7e4      	b.n	70d6 <compile_for_stmt+0x122>
                        optimize = false;
    710c:	2300      	movs	r3, #0
    710e:	e7e2      	b.n	70d6 <compile_for_stmt+0x122>
    7110:	2300      	movs	r3, #0
    7112:	e7e0      	b.n	70d6 <compile_for_stmt+0x122>
            bool optimize = false;
    7114:	2300      	movs	r3, #0
            if (optimize) {
    7116:	2b00      	cmp	r3, #0
    7118:	f43f af5e 	beq.w	6fd8 <compile_for_stmt+0x24>
                compile_for_stmt_optimised_range(comp, pns->nodes[0], pn_range_start, pn_range_end, pn_range_step, pns->nodes[2], pns->nodes[3]);
    711c:	696b      	ldr	r3, [r5, #20]
    711e:	9302      	str	r3, [sp, #8]
    7120:	692b      	ldr	r3, [r5, #16]
    7122:	9301      	str	r3, [sp, #4]
    7124:	f8cd 8000 	str.w	r8, [sp]
    7128:	463b      	mov	r3, r7
    712a:	4632      	mov	r2, r6
    712c:	68a9      	ldr	r1, [r5, #8]
    712e:	4620      	mov	r0, r4
    7130:	f7ff fe86 	bl	6e40 <compile_for_stmt_optimised_range>
    7134:	e79d      	b.n	7072 <compile_for_stmt+0xbe>
                        optimize = false;
    7136:	2300      	movs	r3, #0
    7138:	e7ed      	b.n	7116 <compile_for_stmt+0x162>
        EMIT_ARG(jump, continue_label);
    713a:	4631      	mov	r1, r6
    713c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    713e:	f001 fa3e 	bl	85be <mp_emit_bc_jump>
    7142:	e781      	b.n	7048 <compile_for_stmt+0x94>

00007144 <compile_with_stmt_helper>:
STATIC void compile_with_stmt_helper(compiler_t *comp, int n, mp_parse_node_t *nodes, mp_parse_node_t body) {
    7144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7148:	4604      	mov	r4, r0
    714a:	461d      	mov	r5, r3
    if (n == 0) {
    714c:	b921      	cbnz	r1, 7158 <compile_with_stmt_helper+0x14>
        compile_node(comp, body);
    714e:	4619      	mov	r1, r3
    7150:	f7fe f83e 	bl	51d0 <compile_node>
}
    7154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7158:	4616      	mov	r6, r2
    715a:	460f      	mov	r7, r1
        uint l_end = comp_next_label(comp);
    715c:	f7fd fdd2 	bl	4d04 <comp_next_label>
    7160:	4681      	mov	r9, r0
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    7162:	f8d6 8000 	ldr.w	r8, [r6]
    7166:	f1b8 0f00 	cmp.w	r8, #0
    716a:	d006      	beq.n	717a <compile_with_stmt_helper+0x36>
    716c:	f018 0f03 	tst.w	r8, #3
    7170:	d103      	bne.n	717a <compile_with_stmt_helper+0x36>
    7172:	f898 3004 	ldrb.w	r3, [r8, #4]
    7176:	2b74      	cmp	r3, #116	; 0x74
    7178:	d01e      	beq.n	71b8 <compile_with_stmt_helper+0x74>
            compile_node(comp, nodes[0]);
    717a:	4641      	mov	r1, r8
    717c:	4620      	mov	r0, r4
    717e:	f7fe f827 	bl	51d0 <compile_node>
            EMIT_ARG(setup_with, l_end);
    7182:	4649      	mov	r1, r9
    7184:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7186:	f001 fa7e 	bl	8686 <mp_emit_bc_setup_with>
            EMIT(pop_top);
    718a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    718c:	f001 f9e0 	bl	8550 <mp_emit_bc_pop_top>
        compile_increase_except_level(comp);
    7190:	4620      	mov	r0, r4
    7192:	f7fd fdbc 	bl	4d0e <compile_increase_except_level>
        compile_with_stmt_helper(comp, n - 1, nodes + 1, body);
    7196:	462b      	mov	r3, r5
    7198:	1d32      	adds	r2, r6, #4
    719a:	1e79      	subs	r1, r7, #1
    719c:	4620      	mov	r0, r4
    719e:	f7ff ffd1 	bl	7144 <compile_with_stmt_helper>
        EMIT_ARG(with_cleanup, l_end);
    71a2:	4649      	mov	r1, r9
    71a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    71a6:	f001 facb 	bl	8740 <mp_emit_bc_with_cleanup>
        compile_decrease_except_level(comp);
    71aa:	4620      	mov	r0, r4
    71ac:	f7fd fec4 	bl	4f38 <compile_decrease_except_level>
        EMIT(end_finally);
    71b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    71b2:	f001 fa8c 	bl	86ce <mp_emit_bc_end_finally>
}
    71b6:	e7cd      	b.n	7154 <compile_with_stmt_helper+0x10>
            compile_node(comp, pns->nodes[0]);
    71b8:	f8d8 1008 	ldr.w	r1, [r8, #8]
    71bc:	4620      	mov	r0, r4
    71be:	f7fe f807 	bl	51d0 <compile_node>
            EMIT_ARG(setup_with, l_end);
    71c2:	4649      	mov	r1, r9
    71c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    71c6:	f001 fa5e 	bl	8686 <mp_emit_bc_setup_with>
            c_assign(comp, pns->nodes[1], ASSIGN_STORE);
    71ca:	2200      	movs	r2, #0
    71cc:	f8d8 100c 	ldr.w	r1, [r8, #12]
    71d0:	4620      	mov	r0, r4
    71d2:	f7fe f8ef 	bl	53b4 <c_assign>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    71d6:	e7db      	b.n	7190 <compile_with_stmt_helper+0x4c>

000071d8 <compile_with_stmt>:
STATIC void compile_with_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    71d8:	b530      	push	{r4, r5, lr}
    71da:	b083      	sub	sp, #12
    71dc:	4605      	mov	r5, r0
    71de:	460c      	mov	r4, r1
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_with_stmt_list, &nodes);
    71e0:	aa01      	add	r2, sp, #4
    71e2:	2173      	movs	r1, #115	; 0x73
    71e4:	f104 0008 	add.w	r0, r4, #8
    71e8:	f7fd fa20 	bl	462c <mp_parse_node_extract_list>
    assert(n > 0);
    71ec:	1e01      	subs	r1, r0, #0
    71ee:	dd06      	ble.n	71fe <compile_with_stmt+0x26>
    compile_with_stmt_helper(comp, n, nodes, pns->nodes[1]);
    71f0:	68e3      	ldr	r3, [r4, #12]
    71f2:	9a01      	ldr	r2, [sp, #4]
    71f4:	4628      	mov	r0, r5
    71f6:	f7ff ffa5 	bl	7144 <compile_with_stmt_helper>
}
    71fa:	b003      	add	sp, #12
    71fc:	bd30      	pop	{r4, r5, pc}
    assert(n > 0);
    71fe:	4b03      	ldr	r3, [pc, #12]	; (720c <compile_with_stmt+0x34>)
    7200:	4a03      	ldr	r2, [pc, #12]	; (7210 <compile_with_stmt+0x38>)
    7202:	f240 619d 	movw	r1, #1693	; 0x69d
    7206:	4803      	ldr	r0, [pc, #12]	; (7214 <compile_with_stmt+0x3c>)
    7208:	f011 f9a8 	bl	1855c <__assert_func>
    720c:	00024f60 	.word	0x00024f60
    7210:	00024348 	.word	0x00024348
    7214:	00024fdc 	.word	0x00024fdc

00007218 <compile_try_except>:
STATIC void compile_try_except(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_excepts, mp_parse_node_t pn_else) {
    7218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    721c:	b083      	sub	sp, #12
    721e:	4604      	mov	r4, r0
    7220:	460e      	mov	r6, r1
    7222:	4693      	mov	fp, r2
    7224:	469a      	mov	sl, r3
    uint l1 = comp_next_label(comp);
    7226:	f7fd fd6d 	bl	4d04 <comp_next_label>
    722a:	4605      	mov	r5, r0
    uint success_label = comp_next_label(comp);
    722c:	4620      	mov	r0, r4
    722e:	f7fd fd69 	bl	4d04 <comp_next_label>
    7232:	4607      	mov	r7, r0
    7234:	9001      	str	r0, [sp, #4]
    EMIT_ARG(setup_except, l1);
    7236:	4629      	mov	r1, r5
    7238:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    723a:	f001 fa30 	bl	869e <mp_emit_bc_setup_except>
    compile_increase_except_level(comp);
    723e:	4620      	mov	r0, r4
    7240:	f7fd fd65 	bl	4d0e <compile_increase_except_level>
    compile_node(comp, pn_body); // body
    7244:	4631      	mov	r1, r6
    7246:	4620      	mov	r0, r4
    7248:	f7fd ffc2 	bl	51d0 <compile_node>
    EMIT(pop_block);
    724c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    724e:	f001 fa6d 	bl	872c <mp_emit_bc_pop_block>
    EMIT_ARG(jump, success_label); // jump over exception handler
    7252:	4639      	mov	r1, r7
    7254:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7256:	f001 f9b2 	bl	85be <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l1); // start of exception handler
    725a:	4629      	mov	r1, r5
    725c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    725e:	f001 f84b 	bl	82f8 <mp_emit_bc_label_assign>
    EMIT(start_except_handler);
    7262:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7264:	f001 fbcd 	bl	8a02 <mp_emit_bc_start_except_handler>
    uint l2 = comp_next_label(comp);
    7268:	4620      	mov	r0, r4
    726a:	f7fd fd4b 	bl	4d04 <comp_next_label>
    726e:	9000      	str	r0, [sp, #0]
    for (int i = 0; i < n_except; i++) {
    7270:	2600      	movs	r6, #0
    7272:	e050      	b.n	7316 <compile_try_except+0xfe>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    7274:	4b5a      	ldr	r3, [pc, #360]	; (73e0 <compile_try_except+0x1c8>)
    7276:	4a5b      	ldr	r2, [pc, #364]	; (73e4 <compile_try_except+0x1cc>)
    7278:	f240 51fe 	movw	r1, #1534	; 0x5fe
    727c:	485a      	ldr	r0, [pc, #360]	; (73e8 <compile_try_except+0x1d0>)
    727e:	f011 f96d 	bl	1855c <__assert_func>
                compile_syntax_error(comp, pn_excepts[i], "default 'except' must be last");
    7282:	4a5a      	ldr	r2, [pc, #360]	; (73ec <compile_try_except+0x1d4>)
    7284:	6839      	ldr	r1, [r7, #0]
    7286:	4620      	mov	r0, r4
    7288:	f7fd fe68 	bl	4f5c <compile_syntax_error>
                compile_decrease_except_level(comp);
    728c:	4620      	mov	r0, r4
    728e:	f7fd fe53 	bl	4f38 <compile_decrease_except_level>
                return;
    7292:	e0a1      	b.n	73d8 <compile_try_except+0x1c0>
            if (MP_PARSE_NODE_IS_STRUCT(pns_exception_expr)) {
    7294:	f018 0f03 	tst.w	r8, #3
    7298:	d10b      	bne.n	72b2 <compile_try_except+0x9a>
                mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns_exception_expr;
    729a:	4642      	mov	r2, r8
                if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_try_stmt_as_name) {
    729c:	f898 3004 	ldrb.w	r3, [r8, #4]
    72a0:	2b6f      	cmp	r3, #111	; 0x6f
    72a2:	d001      	beq.n	72a8 <compile_try_except+0x90>
        qstr qstr_exception_local = 0;
    72a4:	2700      	movs	r7, #0
    72a6:	e005      	b.n	72b4 <compile_try_except+0x9c>
                    pns_exception_expr = pns3->nodes[0];
    72a8:	f8d8 8008 	ldr.w	r8, [r8, #8]
                    qstr_exception_local = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]);
    72ac:	68d7      	ldr	r7, [r2, #12]
    72ae:	093f      	lsrs	r7, r7, #4
    72b0:	e000      	b.n	72b4 <compile_try_except+0x9c>
        qstr qstr_exception_local = 0;
    72b2:	2700      	movs	r7, #0
            EMIT(dup_top);
    72b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    72b6:	f001 f937 	bl	8528 <mp_emit_bc_dup_top>
            compile_node(comp, pns_exception_expr);
    72ba:	4641      	mov	r1, r8
    72bc:	4620      	mov	r0, r4
    72be:	f7fd ff87 	bl	51d0 <compile_node>
            EMIT_ARG(binary_op, MP_BINARY_OP_EXCEPTION_MATCH);
    72c2:	2108      	movs	r1, #8
    72c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    72c6:	f001 fa6d 	bl	87a4 <mp_emit_bc_binary_op>
            EMIT_ARG(pop_jump_if, false, end_finally_label);
    72ca:	464a      	mov	r2, r9
    72cc:	2100      	movs	r1, #0
    72ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    72d0:	f001 f981 	bl	85d6 <mp_emit_bc_pop_jump_if>
        if (qstr_exception_local == 0) {
    72d4:	2f00      	cmp	r7, #0
    72d6:	d13a      	bne.n	734e <compile_try_except+0x136>
            EMIT(pop_top);
    72d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    72da:	f001 f939 	bl	8550 <mp_emit_bc_pop_top>
        if (qstr_exception_local != 0) {
    72de:	2f00      	cmp	r7, #0
    72e0:	d13a      	bne.n	7358 <compile_try_except+0x140>
        uint l3 = 0;
    72e2:	f04f 0800 	mov.w	r8, #0
        compile_node(comp, pns_except->nodes[1]);
    72e6:	68e9      	ldr	r1, [r5, #12]
    72e8:	4620      	mov	r0, r4
    72ea:	f7fd ff71 	bl	51d0 <compile_node>
        if (qstr_exception_local != 0) {
    72ee:	2f00      	cmp	r7, #0
    72f0:	d13e      	bne.n	7370 <compile_try_except+0x158>
        EMIT(pop_except);
    72f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    72f4:	f001 fa3f 	bl	8776 <mp_emit_bc_pop_except>
        if (qstr_exception_local != 0) {
    72f8:	2f00      	cmp	r7, #0
    72fa:	d13d      	bne.n	7378 <compile_try_except+0x160>
        EMIT_ARG(jump, l2);
    72fc:	9900      	ldr	r1, [sp, #0]
    72fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7300:	f001 f95d 	bl	85be <mp_emit_bc_jump>
        EMIT_ARG(label_assign, end_finally_label);
    7304:	4649      	mov	r1, r9
    7306:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7308:	f000 fff6 	bl	82f8 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1); // stack adjust for the exception instance
    730c:	2101      	movs	r1, #1
    730e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7310:	f000 ff24 	bl	815c <mp_emit_bc_adjust_stack_size>
    for (int i = 0; i < n_except; i++) {
    7314:	3601      	adds	r6, #1
    7316:	455e      	cmp	r6, fp
    7318:	da49      	bge.n	73ae <compile_try_except+0x196>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    731a:	eb0a 0786 	add.w	r7, sl, r6, lsl #2
    731e:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
    7322:	2d00      	cmp	r5, #0
    7324:	d0a6      	beq.n	7274 <compile_try_except+0x5c>
    7326:	f015 0f03 	tst.w	r5, #3
    732a:	d1a3      	bne.n	7274 <compile_try_except+0x5c>
    732c:	792b      	ldrb	r3, [r5, #4]
    732e:	2b6e      	cmp	r3, #110	; 0x6e
    7330:	d1a0      	bne.n	7274 <compile_try_except+0x5c>
        uint end_finally_label = comp_next_label(comp);
    7332:	4620      	mov	r0, r4
    7334:	f7fd fce6 	bl	4d04 <comp_next_label>
    7338:	4681      	mov	r9, r0
        if (MP_PARSE_NODE_IS_NULL(pns_except->nodes[0])) {
    733a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    733e:	f1b8 0f00 	cmp.w	r8, #0
    7342:	d1a7      	bne.n	7294 <compile_try_except+0x7c>
            if (i + 1 != n_except) {
    7344:	1c73      	adds	r3, r6, #1
    7346:	455b      	cmp	r3, fp
    7348:	d19b      	bne.n	7282 <compile_try_except+0x6a>
        qstr qstr_exception_local = 0;
    734a:	2700      	movs	r7, #0
    734c:	e7c4      	b.n	72d8 <compile_try_except+0xc0>
            compile_store_id(comp, qstr_exception_local);
    734e:	4639      	mov	r1, r7
    7350:	4620      	mov	r0, r4
    7352:	f7fd ff0f 	bl	5174 <compile_store_id>
    7356:	e7c2      	b.n	72de <compile_try_except+0xc6>
            l3 = comp_next_label(comp);
    7358:	4620      	mov	r0, r4
    735a:	f7fd fcd3 	bl	4d04 <comp_next_label>
    735e:	4680      	mov	r8, r0
            EMIT_ARG(setup_finally, l3);
    7360:	4601      	mov	r1, r0
    7362:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7364:	f001 f9a7 	bl	86b6 <mp_emit_bc_setup_finally>
            compile_increase_except_level(comp);
    7368:	4620      	mov	r0, r4
    736a:	f7fd fcd0 	bl	4d0e <compile_increase_except_level>
    736e:	e7ba      	b.n	72e6 <compile_try_except+0xce>
            EMIT(pop_block);
    7370:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7372:	f001 f9db 	bl	872c <mp_emit_bc_pop_block>
    7376:	e7bc      	b.n	72f2 <compile_try_except+0xda>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7378:	210e      	movs	r1, #14
    737a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    737c:	f001 f81e 	bl	83bc <mp_emit_bc_load_const_tok>
            EMIT_ARG(label_assign, l3);
    7380:	4641      	mov	r1, r8
    7382:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7384:	f000 ffb8 	bl	82f8 <mp_emit_bc_label_assign>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7388:	210e      	movs	r1, #14
    738a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    738c:	f001 f816 	bl	83bc <mp_emit_bc_load_const_tok>
            compile_store_id(comp, qstr_exception_local);
    7390:	4639      	mov	r1, r7
    7392:	4620      	mov	r0, r4
    7394:	f7fd feee 	bl	5174 <compile_store_id>
            compile_delete_id(comp, qstr_exception_local);
    7398:	4639      	mov	r1, r7
    739a:	4620      	mov	r0, r4
    739c:	f7fd fefc 	bl	5198 <compile_delete_id>
            compile_decrease_except_level(comp);
    73a0:	4620      	mov	r0, r4
    73a2:	f7fd fdc9 	bl	4f38 <compile_decrease_except_level>
            EMIT(end_finally);
    73a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    73a8:	f001 f991 	bl	86ce <mp_emit_bc_end_finally>
    73ac:	e7a6      	b.n	72fc <compile_try_except+0xe4>
    compile_decrease_except_level(comp);
    73ae:	4620      	mov	r0, r4
    73b0:	f7fd fdc2 	bl	4f38 <compile_decrease_except_level>
    EMIT(end_finally);
    73b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    73b6:	f001 f98a 	bl	86ce <mp_emit_bc_end_finally>
    EMIT(end_except_handler);
    73ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    73bc:	f001 fb26 	bl	8a0c <mp_emit_bc_end_except_handler>
    EMIT_ARG(label_assign, success_label);
    73c0:	9901      	ldr	r1, [sp, #4]
    73c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    73c4:	f000 ff98 	bl	82f8 <mp_emit_bc_label_assign>
    compile_node(comp, pn_else); // else block, can be null
    73c8:	990c      	ldr	r1, [sp, #48]	; 0x30
    73ca:	4620      	mov	r0, r4
    73cc:	f7fd ff00 	bl	51d0 <compile_node>
    EMIT_ARG(label_assign, l2);
    73d0:	9900      	ldr	r1, [sp, #0]
    73d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    73d4:	f000 ff90 	bl	82f8 <mp_emit_bc_label_assign>
}
    73d8:	b003      	add	sp, #12
    73da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    73de:	bf00      	nop
    73e0:	00024ee0 	.word	0x00024ee0
    73e4:	0002430c 	.word	0x0002430c
    73e8:	00024fdc 	.word	0x00024fdc
    73ec:	00024f20 	.word	0x00024f20

000073f0 <compile_try_finally>:
STATIC void compile_try_finally(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_except, mp_parse_node_t pn_else, mp_parse_node_t pn_finally) {
    73f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    73f4:	b083      	sub	sp, #12
    73f6:	4604      	mov	r4, r0
    73f8:	4688      	mov	r8, r1
    73fa:	4616      	mov	r6, r2
    73fc:	4699      	mov	r9, r3
    73fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    uint l_finally_block = comp_next_label(comp);
    7400:	f7fd fc80 	bl	4d04 <comp_next_label>
    7404:	4605      	mov	r5, r0
    EMIT_ARG(setup_finally, l_finally_block);
    7406:	4601      	mov	r1, r0
    7408:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    740a:	f001 f954 	bl	86b6 <mp_emit_bc_setup_finally>
    compile_increase_except_level(comp);
    740e:	4620      	mov	r0, r4
    7410:	f7fd fc7d 	bl	4d0e <compile_increase_except_level>
    if (n_except == 0) {
    7414:	bb66      	cbnz	r6, 7470 <compile_try_finally+0x80>
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    7416:	bb27      	cbnz	r7, 7462 <compile_try_finally+0x72>
        EMIT_ARG(adjust_stack_size, 3); // stack adjust for possible UNWIND_JUMP state
    7418:	2103      	movs	r1, #3
    741a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    741c:	f000 fe9e 	bl	815c <mp_emit_bc_adjust_stack_size>
        compile_node(comp, pn_body);
    7420:	4641      	mov	r1, r8
    7422:	4620      	mov	r0, r4
    7424:	f7fd fed4 	bl	51d0 <compile_node>
        EMIT_ARG(adjust_stack_size, -3);
    7428:	f06f 0102 	mvn.w	r1, #2
    742c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    742e:	f000 fe95 	bl	815c <mp_emit_bc_adjust_stack_size>
    EMIT(pop_block);
    7432:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7434:	f001 f97a 	bl	872c <mp_emit_bc_pop_block>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7438:	210e      	movs	r1, #14
    743a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    743c:	f000 ffbe 	bl	83bc <mp_emit_bc_load_const_tok>
    EMIT_ARG(label_assign, l_finally_block);
    7440:	4629      	mov	r1, r5
    7442:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7444:	f000 ff58 	bl	82f8 <mp_emit_bc_label_assign>
    compile_node(comp, pn_finally);
    7448:	990b      	ldr	r1, [sp, #44]	; 0x2c
    744a:	4620      	mov	r0, r4
    744c:	f7fd fec0 	bl	51d0 <compile_node>
    compile_decrease_except_level(comp);
    7450:	4620      	mov	r0, r4
    7452:	f7fd fd71 	bl	4f38 <compile_decrease_except_level>
    EMIT(end_finally);
    7456:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7458:	f001 f939 	bl	86ce <mp_emit_bc_end_finally>
}
    745c:	b003      	add	sp, #12
    745e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    7462:	4b07      	ldr	r3, [pc, #28]	; (7480 <compile_try_finally+0x90>)
    7464:	4a07      	ldr	r2, [pc, #28]	; (7484 <compile_try_finally+0x94>)
    7466:	f240 614d 	movw	r1, #1613	; 0x64d
    746a:	4807      	ldr	r0, [pc, #28]	; (7488 <compile_try_finally+0x98>)
    746c:	f011 f876 	bl	1855c <__assert_func>
        compile_try_except(comp, pn_body, n_except, pn_except, pn_else);
    7470:	9700      	str	r7, [sp, #0]
    7472:	464b      	mov	r3, r9
    7474:	4632      	mov	r2, r6
    7476:	4641      	mov	r1, r8
    7478:	4620      	mov	r0, r4
    747a:	f7ff fecd 	bl	7218 <compile_try_except>
    747e:	e7d8      	b.n	7432 <compile_try_finally+0x42>
    7480:	00024f40 	.word	0x00024f40
    7484:	00024320 	.word	0x00024320
    7488:	00024fdc 	.word	0x00024fdc

0000748c <compile_try_stmt>:
STATIC void compile_try_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    748c:	b570      	push	{r4, r5, r6, lr}
    748e:	b084      	sub	sp, #16
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    7490:	68cc      	ldr	r4, [r1, #12]
    7492:	b1cc      	cbz	r4, 74c8 <compile_try_stmt+0x3c>
    7494:	4606      	mov	r6, r0
    7496:	460d      	mov	r5, r1
    7498:	f014 0f03 	tst.w	r4, #3
    749c:	d114      	bne.n	74c8 <compile_try_stmt+0x3c>
        if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_finally) {
    749e:	7923      	ldrb	r3, [r4, #4]
    74a0:	2b71      	cmp	r3, #113	; 0x71
    74a2:	d018      	beq.n	74d6 <compile_try_stmt+0x4a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_except_and_more) {
    74a4:	2b6d      	cmp	r3, #109	; 0x6d
    74a6:	d01f      	beq.n	74e8 <compile_try_stmt+0x5c>
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
    74a8:	aa03      	add	r2, sp, #12
    74aa:	2170      	movs	r1, #112	; 0x70
    74ac:	f105 000c 	add.w	r0, r5, #12
    74b0:	f7fd f8bc 	bl	462c <mp_parse_node_extract_list>
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
    74b4:	68a9      	ldr	r1, [r5, #8]
    74b6:	2300      	movs	r3, #0
    74b8:	9300      	str	r3, [sp, #0]
    74ba:	9b03      	ldr	r3, [sp, #12]
    74bc:	4602      	mov	r2, r0
    74be:	4630      	mov	r0, r6
    74c0:	f7ff feaa 	bl	7218 <compile_try_except>
}
    74c4:	b004      	add	sp, #16
    74c6:	bd70      	pop	{r4, r5, r6, pc}
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    74c8:	4b15      	ldr	r3, [pc, #84]	; (7520 <compile_try_stmt+0x94>)
    74ca:	4a16      	ldr	r2, [pc, #88]	; (7524 <compile_try_stmt+0x98>)
    74cc:	f240 615e 	movw	r1, #1630	; 0x65e
    74d0:	4815      	ldr	r0, [pc, #84]	; (7528 <compile_try_stmt+0x9c>)
    74d2:	f011 f843 	bl	1855c <__assert_func>
            compile_try_finally(comp, pns->nodes[0], 0, NULL, MP_PARSE_NODE_NULL, pns2->nodes[0]);
    74d6:	6889      	ldr	r1, [r1, #8]
    74d8:	68a3      	ldr	r3, [r4, #8]
    74da:	9301      	str	r3, [sp, #4]
    74dc:	2200      	movs	r2, #0
    74de:	9200      	str	r2, [sp, #0]
    74e0:	4613      	mov	r3, r2
    74e2:	f7ff ff85 	bl	73f0 <compile_try_finally>
    74e6:	e7ed      	b.n	74c4 <compile_try_stmt+0x38>
            int n_except = mp_parse_node_extract_list(&pns2->nodes[0], PN_try_stmt_except_list, &pn_excepts);
    74e8:	aa03      	add	r2, sp, #12
    74ea:	2170      	movs	r1, #112	; 0x70
    74ec:	f104 0008 	add.w	r0, r4, #8
    74f0:	f7fd f89c 	bl	462c <mp_parse_node_extract_list>
            if (MP_PARSE_NODE_IS_NULL(pns2->nodes[2])) {
    74f4:	6923      	ldr	r3, [r4, #16]
    74f6:	b943      	cbnz	r3, 750a <compile_try_stmt+0x7e>
                compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1]);
    74f8:	68a9      	ldr	r1, [r5, #8]
    74fa:	68e3      	ldr	r3, [r4, #12]
    74fc:	9300      	str	r3, [sp, #0]
    74fe:	9b03      	ldr	r3, [sp, #12]
    7500:	4602      	mov	r2, r0
    7502:	4630      	mov	r0, r6
    7504:	f7ff fe88 	bl	7218 <compile_try_except>
    7508:	e7dc      	b.n	74c4 <compile_try_stmt+0x38>
                compile_try_finally(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1], ((mp_parse_node_struct_t*)pns2->nodes[2])->nodes[0]);
    750a:	68a9      	ldr	r1, [r5, #8]
    750c:	689b      	ldr	r3, [r3, #8]
    750e:	9301      	str	r3, [sp, #4]
    7510:	68e3      	ldr	r3, [r4, #12]
    7512:	9300      	str	r3, [sp, #0]
    7514:	9b03      	ldr	r3, [sp, #12]
    7516:	4602      	mov	r2, r0
    7518:	4630      	mov	r0, r6
    751a:	f7ff ff69 	bl	73f0 <compile_try_finally>
    751e:	e7d1      	b.n	74c4 <compile_try_stmt+0x38>
    7520:	00024630 	.word	0x00024630
    7524:	00024334 	.word	0x00024334
    7528:	00024fdc 	.word	0x00024fdc

0000752c <compile_assert_stmt>:
    if (MP_STATE_VM(mp_optimise_value) != 0) {
    752c:	4b14      	ldr	r3, [pc, #80]	; (7580 <compile_assert_stmt+0x54>)
    752e:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
    7532:	b103      	cbz	r3, 7536 <compile_assert_stmt+0xa>
    7534:	4770      	bx	lr
STATIC void compile_assert_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7536:	b570      	push	{r4, r5, r6, lr}
    7538:	460d      	mov	r5, r1
    753a:	4604      	mov	r4, r0
    uint l_end = comp_next_label(comp);
    753c:	f7fd fbe2 	bl	4d04 <comp_next_label>
    7540:	4606      	mov	r6, r0
    c_if_cond(comp, pns->nodes[0], true, l_end);
    7542:	4603      	mov	r3, r0
    7544:	2201      	movs	r2, #1
    7546:	68a9      	ldr	r1, [r5, #8]
    7548:	4620      	mov	r0, r4
    754a:	f7fe f843 	bl	55d4 <c_if_cond>
    EMIT_LOAD_GLOBAL(MP_QSTR_AssertionError); // we load_global instead of load_id, to be consistent with CPython
    754e:	21e5      	movs	r1, #229	; 0xe5
    7550:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7552:	f000 fe4e 	bl	81f2 <mp_emit_bc_load_global>
    if (!MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7556:	68e9      	ldr	r1, [r5, #12]
    7558:	b941      	cbnz	r1, 756c <compile_assert_stmt+0x40>
    EMIT_ARG(raise_varargs, 1);
    755a:	2101      	movs	r1, #1
    755c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    755e:	f001 fa15 	bl	898c <mp_emit_bc_raise_varargs>
    EMIT_ARG(label_assign, l_end);
    7562:	4631      	mov	r1, r6
    7564:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7566:	f000 fec7 	bl	82f8 <mp_emit_bc_label_assign>
}
    756a:	bd70      	pop	{r4, r5, r6, pc}
        compile_node(comp, pns->nodes[1]);
    756c:	4620      	mov	r0, r4
    756e:	f7fd fe2f 	bl	51d0 <compile_node>
        EMIT_ARG(call_function, 1, 0, 0);
    7572:	2300      	movs	r3, #0
    7574:	461a      	mov	r2, r3
    7576:	2101      	movs	r1, #1
    7578:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    757a:	f001 f9e1 	bl	8940 <mp_emit_bc_call_function>
    757e:	e7ec      	b.n	755a <compile_assert_stmt+0x2e>
    7580:	200008a0 	.word	0x200008a0

00007584 <compile_raise_stmt>:
STATIC void compile_raise_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7584:	b538      	push	{r3, r4, r5, lr}
    7586:	4605      	mov	r5, r0
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    7588:	688c      	ldr	r4, [r1, #8]
    758a:	b174      	cbz	r4, 75aa <compile_raise_stmt+0x26>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_raise_stmt_arg)) {
    758c:	f014 0f03 	tst.w	r4, #3
    7590:	d102      	bne.n	7598 <compile_raise_stmt+0x14>
    7592:	7923      	ldrb	r3, [r4, #4]
    7594:	2b58      	cmp	r3, #88	; 0x58
    7596:	d00d      	beq.n	75b4 <compile_raise_stmt+0x30>
        compile_node(comp, pns->nodes[0]);
    7598:	4621      	mov	r1, r4
    759a:	4628      	mov	r0, r5
    759c:	f7fd fe18 	bl	51d0 <compile_node>
        EMIT_ARG(raise_varargs, 1);
    75a0:	2101      	movs	r1, #1
    75a2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    75a4:	f001 f9f2 	bl	898c <mp_emit_bc_raise_varargs>
}
    75a8:	bd38      	pop	{r3, r4, r5, pc}
        EMIT_ARG(raise_varargs, 0);
    75aa:	2100      	movs	r1, #0
    75ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
    75ae:	f001 f9ed 	bl	898c <mp_emit_bc_raise_varargs>
    75b2:	e7f9      	b.n	75a8 <compile_raise_stmt+0x24>
        compile_node(comp, pns->nodes[0]);
    75b4:	68a1      	ldr	r1, [r4, #8]
    75b6:	f7fd fe0b 	bl	51d0 <compile_node>
        compile_node(comp, pns->nodes[1]);
    75ba:	68e1      	ldr	r1, [r4, #12]
    75bc:	4628      	mov	r0, r5
    75be:	f7fd fe07 	bl	51d0 <compile_node>
        EMIT_ARG(raise_varargs, 2);
    75c2:	2102      	movs	r1, #2
    75c4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    75c6:	f001 f9e1 	bl	898c <mp_emit_bc_raise_varargs>
    75ca:	e7ed      	b.n	75a8 <compile_raise_stmt+0x24>

000075cc <compile_declare_nonlocal>:
STATIC void compile_declare_nonlocal(compiler_t *comp, mp_parse_node_t pn, qstr qst) {
    75cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75ce:	b083      	sub	sp, #12
    75d0:	4604      	mov	r4, r0
    75d2:	460f      	mov	r7, r1
    75d4:	4616      	mov	r6, r2
    id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    75d6:	f10d 0207 	add.w	r2, sp, #7
    75da:	4631      	mov	r1, r6
    75dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    75de:	f7fd fafb 	bl	4bd8 <scope_find_or_add_id>
    75e2:	4605      	mov	r5, r0
    if (added) {
    75e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75e8:	b94b      	cbnz	r3, 75fe <compile_declare_nonlocal+0x32>
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
    75ea:	7803      	ldrb	r3, [r0, #0]
    75ec:	2b04      	cmp	r3, #4
    75ee:	d004      	beq.n	75fa <compile_declare_nonlocal+0x2e>
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    75f0:	4a0a      	ldr	r2, [pc, #40]	; (761c <compile_declare_nonlocal+0x50>)
    75f2:	4639      	mov	r1, r7
    75f4:	4620      	mov	r0, r4
    75f6:	f7fd fcb1 	bl	4f5c <compile_syntax_error>
}
    75fa:	b003      	add	sp, #12
    75fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        scope_find_local_and_close_over(comp->scope_cur, id_info, qst);
    75fe:	4632      	mov	r2, r6
    7600:	4601      	mov	r1, r0
    7602:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7604:	f7fd fb57 	bl	4cb6 <scope_find_local_and_close_over>
        if (id_info->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    7608:	782b      	ldrb	r3, [r5, #0]
    760a:	2b00      	cmp	r3, #0
    760c:	d1f5      	bne.n	75fa <compile_declare_nonlocal+0x2e>
            compile_syntax_error(comp, pn, "no binding for nonlocal found");
    760e:	4a04      	ldr	r2, [pc, #16]	; (7620 <compile_declare_nonlocal+0x54>)
    7610:	4639      	mov	r1, r7
    7612:	4620      	mov	r0, r4
    7614:	f7fd fca2 	bl	4f5c <compile_syntax_error>
    7618:	e7ef      	b.n	75fa <compile_declare_nonlocal+0x2e>
    761a:	bf00      	nop
    761c:	0002481c 	.word	0x0002481c
    7620:	000247fc 	.word	0x000247fc

00007624 <compile_nonlocal_stmt>:
    if (comp->pass == MP_PASS_SCOPE) {
    7624:	7943      	ldrb	r3, [r0, #5]
    7626:	2b01      	cmp	r3, #1
    7628:	d000      	beq.n	762c <compile_nonlocal_stmt+0x8>
    762a:	4770      	bx	lr
STATIC void compile_nonlocal_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    762c:	b5f0      	push	{r4, r5, r6, r7, lr}
    762e:	b083      	sub	sp, #12
    7630:	460e      	mov	r6, r1
    7632:	4605      	mov	r5, r0
        if (comp->scope_cur->kind == SCOPE_MODULE) {
    7634:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7636:	781b      	ldrb	r3, [r3, #0]
    7638:	b143      	cbz	r3, 764c <compile_nonlocal_stmt+0x28>
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    763a:	aa01      	add	r2, sp, #4
    763c:	2167      	movs	r1, #103	; 0x67
    763e:	f106 0008 	add.w	r0, r6, #8
    7642:	f7fc fff3 	bl	462c <mp_parse_node_extract_list>
    7646:	4607      	mov	r7, r0
        for (int i = 0; i < n; i++) {
    7648:	2400      	movs	r4, #0
    764a:	e00c      	b.n	7666 <compile_nonlocal_stmt+0x42>
            compile_syntax_error(comp, (mp_parse_node_t)pns, "can't declare nonlocal in outer code");
    764c:	4a08      	ldr	r2, [pc, #32]	; (7670 <compile_nonlocal_stmt+0x4c>)
    764e:	f7fd fc85 	bl	4f5c <compile_syntax_error>
    7652:	e00a      	b.n	766a <compile_nonlocal_stmt+0x46>
            compile_declare_nonlocal(comp, (mp_parse_node_t)pns, MP_PARSE_NODE_LEAF_ARG(nodes[i]));
    7654:	9b01      	ldr	r3, [sp, #4]
    7656:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    765a:	0912      	lsrs	r2, r2, #4
    765c:	4631      	mov	r1, r6
    765e:	4628      	mov	r0, r5
    7660:	f7ff ffb4 	bl	75cc <compile_declare_nonlocal>
        for (int i = 0; i < n; i++) {
    7664:	3401      	adds	r4, #1
    7666:	42bc      	cmp	r4, r7
    7668:	dbf4      	blt.n	7654 <compile_nonlocal_stmt+0x30>
}
    766a:	b003      	add	sp, #12
    766c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    766e:	bf00      	nop
    7670:	00024b3c 	.word	0x00024b3c

00007674 <compile_declare_global>:
STATIC void compile_declare_global(compiler_t *comp, mp_parse_node_t pn, qstr qst) {
    7674:	b570      	push	{r4, r5, r6, lr}
    7676:	b082      	sub	sp, #8
    7678:	4604      	mov	r4, r0
    767a:	460e      	mov	r6, r1
    767c:	4615      	mov	r5, r2
    id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    767e:	f10d 0207 	add.w	r2, sp, #7
    7682:	4629      	mov	r1, r5
    7684:	6a40      	ldr	r0, [r0, #36]	; 0x24
    7686:	f7fd faa7 	bl	4bd8 <scope_find_or_add_id>
    if (!added && id_info->kind != ID_INFO_KIND_GLOBAL_EXPLICIT) {
    768a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    768e:	b913      	cbnz	r3, 7696 <compile_declare_global+0x22>
    7690:	7803      	ldrb	r3, [r0, #0]
    7692:	2b01      	cmp	r3, #1
    7694:	d10a      	bne.n	76ac <compile_declare_global+0x38>
    id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    7696:	2301      	movs	r3, #1
    7698:	7003      	strb	r3, [r0, #0]
    id_info = scope_find_global(comp->scope_cur, qst);
    769a:	4629      	mov	r1, r5
    769c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    769e:	f7fd fb01 	bl	4ca4 <scope_find_global>
    if (id_info != NULL) {
    76a2:	b108      	cbz	r0, 76a8 <compile_declare_global+0x34>
        id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    76a4:	2201      	movs	r2, #1
    76a6:	7002      	strb	r2, [r0, #0]
}
    76a8:	b002      	add	sp, #8
    76aa:	bd70      	pop	{r4, r5, r6, pc}
        compile_syntax_error(comp, pn, "identifier redefined as global");
    76ac:	4a02      	ldr	r2, [pc, #8]	; (76b8 <compile_declare_global+0x44>)
    76ae:	4631      	mov	r1, r6
    76b0:	4620      	mov	r0, r4
    76b2:	f7fd fc53 	bl	4f5c <compile_syntax_error>
    76b6:	e7f7      	b.n	76a8 <compile_declare_global+0x34>
    76b8:	000247dc 	.word	0x000247dc

000076bc <compile_global_stmt>:
    if (comp->pass == MP_PASS_SCOPE) {
    76bc:	7943      	ldrb	r3, [r0, #5]
    76be:	2b01      	cmp	r3, #1
    76c0:	d000      	beq.n	76c4 <compile_global_stmt+0x8>
    76c2:	4770      	bx	lr
STATIC void compile_global_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    76c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    76c6:	b083      	sub	sp, #12
    76c8:	460e      	mov	r6, r1
    76ca:	4605      	mov	r5, r0
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    76cc:	aa01      	add	r2, sp, #4
    76ce:	2167      	movs	r1, #103	; 0x67
    76d0:	f106 0008 	add.w	r0, r6, #8
    76d4:	f7fc ffaa 	bl	462c <mp_parse_node_extract_list>
    76d8:	4607      	mov	r7, r0
        for (int i = 0; i < n; i++) {
    76da:	2400      	movs	r4, #0
    76dc:	e008      	b.n	76f0 <compile_global_stmt+0x34>
            compile_declare_global(comp, (mp_parse_node_t)pns, MP_PARSE_NODE_LEAF_ARG(nodes[i]));
    76de:	9b01      	ldr	r3, [sp, #4]
    76e0:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    76e4:	0912      	lsrs	r2, r2, #4
    76e6:	4631      	mov	r1, r6
    76e8:	4628      	mov	r0, r5
    76ea:	f7ff ffc3 	bl	7674 <compile_declare_global>
        for (int i = 0; i < n; i++) {
    76ee:	3401      	adds	r4, #1
    76f0:	42bc      	cmp	r4, r7
    76f2:	dbf4      	blt.n	76de <compile_global_stmt+0x22>
}
    76f4:	b003      	add	sp, #12
    76f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000076f8 <do_import_name>:
STATIC void do_import_name(compiler_t *comp, mp_parse_node_t pn, qstr *q_base) {
    76f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76fc:	b085      	sub	sp, #20
    76fe:	af00      	add	r7, sp, #0
    7700:	4681      	mov	r9, r0
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_as_name)) {
    7702:	460b      	mov	r3, r1
    7704:	b179      	cbz	r1, 7726 <do_import_name+0x2e>
    7706:	f011 0f03 	tst.w	r1, #3
    770a:	d127      	bne.n	775c <do_import_name+0x64>
    770c:	7909      	ldrb	r1, [r1, #4]
    770e:	2962      	cmp	r1, #98	; 0x62
    7710:	d002      	beq.n	7718 <do_import_name+0x20>
    bool is_as = false;
    7712:	f04f 0a00 	mov.w	sl, #0
    7716:	e008      	b.n	772a <do_import_name+0x32>
        *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[1]);
    7718:	68d9      	ldr	r1, [r3, #12]
    771a:	0909      	lsrs	r1, r1, #4
    771c:	6011      	str	r1, [r2, #0]
        pn = pns->nodes[0];
    771e:	689b      	ldr	r3, [r3, #8]
        is_as = true;
    7720:	f04f 0a01 	mov.w	sl, #1
    7724:	e001      	b.n	772a <do_import_name+0x32>
    bool is_as = false;
    7726:	f04f 0a00 	mov.w	sl, #0
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    772a:	b1d3      	cbz	r3, 7762 <do_import_name+0x6a>
    } else if (MP_PARSE_NODE_IS_ID(pn)) {
    772c:	f003 010f 	and.w	r1, r3, #15
    7730:	2902      	cmp	r1, #2
    7732:	d020      	beq.n	7776 <do_import_name+0x7e>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    7734:	f013 0f03 	tst.w	r3, #3
    7738:	d127      	bne.n	778a <do_import_name+0x92>
    773a:	4698      	mov	r8, r3
    773c:	791b      	ldrb	r3, [r3, #4]
    773e:	2b66      	cmp	r3, #102	; 0x66
    7740:	d123      	bne.n	778a <do_import_name+0x92>
            if (!is_as) {
    7742:	f1ba 0f00 	cmp.w	sl, #0
    7746:	d103      	bne.n	7750 <do_import_name+0x58>
                *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    7748:	f8d8 3008 	ldr.w	r3, [r8, #8]
    774c:	091b      	lsrs	r3, r3, #4
    774e:	6013      	str	r3, [r2, #0]
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7750:	f8d8 5004 	ldr.w	r5, [r8, #4]
    7754:	0a2d      	lsrs	r5, r5, #8
            int len = n - 1;
    7756:	1e6e      	subs	r6, r5, #1
            for (int i = 0; i < n; i++) {
    7758:	2400      	movs	r4, #0
    775a:	e025      	b.n	77a8 <do_import_name+0xb0>
    bool is_as = false;
    775c:	f04f 0a00 	mov.w	sl, #0
    7760:	e7e3      	b.n	772a <do_import_name+0x32>
        *q_base = MP_QSTR_;
    7762:	2101      	movs	r1, #1
    7764:	6011      	str	r1, [r2, #0]
        EMIT_ARG(import_name, MP_QSTR_); // import the empty string
    7766:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    776a:	f000 fe03 	bl	8374 <mp_emit_bc_import_name>
}
    776e:	3714      	adds	r7, #20
    7770:	46bd      	mov	sp, r7
    7772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        qstr q_full = MP_PARSE_NODE_LEAF_ARG(pn);
    7776:	0919      	lsrs	r1, r3, #4
        if (!is_as) {
    7778:	f1ba 0f00 	cmp.w	sl, #0
    777c:	d100      	bne.n	7780 <do_import_name+0x88>
            *q_base = q_full;
    777e:	6011      	str	r1, [r2, #0]
        EMIT_ARG(import_name, q_full);
    7780:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    7784:	f000 fdf6 	bl	8374 <mp_emit_bc_import_name>
    7788:	e7f1      	b.n	776e <do_import_name+0x76>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    778a:	4b27      	ldr	r3, [pc, #156]	; (7828 <do_import_name+0x130>)
    778c:	4a27      	ldr	r2, [pc, #156]	; (782c <do_import_name+0x134>)
    778e:	f240 410c 	movw	r1, #1036	; 0x40c
    7792:	4827      	ldr	r0, [pc, #156]	; (7830 <do_import_name+0x138>)
    7794:	f010 fee2 	bl	1855c <__assert_func>
                len += qstr_len(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    7798:	1ca3      	adds	r3, r4, #2
    779a:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
    779e:	0900      	lsrs	r0, r0, #4
    77a0:	f7f9 ff72 	bl	1688 <qstr_len>
    77a4:	4406      	add	r6, r0
            for (int i = 0; i < n; i++) {
    77a6:	3401      	adds	r4, #1
    77a8:	42ac      	cmp	r4, r5
    77aa:	dbf5      	blt.n	7798 <do_import_name+0xa0>
            char *q_ptr = mp_local_alloc(len);
    77ac:	607e      	str	r6, [r7, #4]
    77ae:	360e      	adds	r6, #14
    77b0:	f026 0607 	bic.w	r6, r6, #7
    77b4:	ebad 0d06 	sub.w	sp, sp, r6
    77b8:	46eb      	mov	fp, sp
            char *str_dest = q_ptr;
    77ba:	465b      	mov	r3, fp
            for (int i = 0; i < n; i++) {
    77bc:	2400      	movs	r4, #0
    77be:	e010      	b.n	77e2 <do_import_name+0xea>
    77c0:	461e      	mov	r6, r3
                const byte *str_src = qstr_data(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), &str_src_len);
    77c2:	1ca3      	adds	r3, r4, #2
    77c4:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
    77c8:	f107 010c 	add.w	r1, r7, #12
    77cc:	0900      	lsrs	r0, r0, #4
    77ce:	f7f9 ff65 	bl	169c <qstr_data>
                memcpy(str_dest, str_src, str_src_len);
    77d2:	68fa      	ldr	r2, [r7, #12]
    77d4:	4601      	mov	r1, r0
    77d6:	4630      	mov	r0, r6
    77d8:	f014 f80c 	bl	1b7f4 <memcpy>
                str_dest += str_src_len;
    77dc:	68fb      	ldr	r3, [r7, #12]
    77de:	4433      	add	r3, r6
            for (int i = 0; i < n; i++) {
    77e0:	3401      	adds	r4, #1
    77e2:	42ac      	cmp	r4, r5
    77e4:	da05      	bge.n	77f2 <do_import_name+0xfa>
                if (i > 0) {
    77e6:	2c00      	cmp	r4, #0
    77e8:	ddea      	ble.n	77c0 <do_import_name+0xc8>
                    *str_dest++ = '.';
    77ea:	1c5e      	adds	r6, r3, #1
    77ec:	222e      	movs	r2, #46	; 0x2e
    77ee:	701a      	strb	r2, [r3, #0]
    77f0:	e7e7      	b.n	77c2 <do_import_name+0xca>
            qstr q_full = qstr_from_strn(q_ptr, len);
    77f2:	6879      	ldr	r1, [r7, #4]
    77f4:	4658      	mov	r0, fp
    77f6:	f7f9 feb7 	bl	1568 <qstr_from_strn>
            EMIT_ARG(import_name, q_full);
    77fa:	4601      	mov	r1, r0
    77fc:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    7800:	f000 fdb8 	bl	8374 <mp_emit_bc_import_name>
            if (is_as) {
    7804:	f1ba 0f00 	cmp.w	sl, #0
    7808:	d0b1      	beq.n	776e <do_import_name+0x76>
                for (int i = 1; i < n; i++) {
    780a:	2401      	movs	r4, #1
    780c:	e008      	b.n	7820 <do_import_name+0x128>
                    EMIT_ARG(load_attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    780e:	1ca3      	adds	r3, r4, #2
    7810:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    7814:	0909      	lsrs	r1, r1, #4
    7816:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    781a:	f000 fe3a 	bl	8492 <mp_emit_bc_load_attr>
                for (int i = 1; i < n; i++) {
    781e:	3401      	adds	r4, #1
    7820:	42ac      	cmp	r4, r5
    7822:	dbf4      	blt.n	780e <do_import_name+0x116>
    7824:	e7a3      	b.n	776e <do_import_name+0x76>
    7826:	bf00      	nop
    7828:	00024f84 	.word	0x00024f84
    782c:	000242b4 	.word	0x000242b4
    7830:	00024fdc 	.word	0x00024fdc

00007834 <compile_import_from>:
STATIC void compile_import_from(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7838:	b082      	sub	sp, #8
    783a:	4607      	mov	r7, r0
    783c:	460e      	mov	r6, r1
    mp_parse_node_t pn_import_source = pns->nodes[0];
    783e:	688d      	ldr	r5, [r1, #8]
        if (MP_PARSE_NODE_IS_TOKEN(pn_import_source) || MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_one_or_more_period_or_ellipsis)) {
    7840:	f005 030f 	and.w	r3, r5, #15
    7844:	2b0e      	cmp	r3, #14
    7846:	d032      	beq.n	78ae <compile_import_from+0x7a>
    7848:	b12d      	cbz	r5, 7856 <compile_import_from+0x22>
    784a:	f015 0f03 	tst.w	r5, #3
    784e:	d102      	bne.n	7856 <compile_import_from+0x22>
    7850:	792b      	ldrb	r3, [r5, #4]
    7852:	2b5f      	cmp	r3, #95	; 0x5f
    7854:	d02b      	beq.n	78ae <compile_import_from+0x7a>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_import_from_2b)) {
    7856:	b12d      	cbz	r5, 7864 <compile_import_from+0x30>
    7858:	f015 0f03 	tst.w	r5, #3
    785c:	d102      	bne.n	7864 <compile_import_from+0x30>
    785e:	792b      	ldrb	r3, [r5, #4]
    7860:	2b5c      	cmp	r3, #92	; 0x5c
    7862:	d02e      	beq.n	78c2 <compile_import_from+0x8e>
    uint import_level = 0;
    7864:	2100      	movs	r1, #0
    if (MP_PARSE_NODE_IS_TOKEN_KIND(pns->nodes[1], MP_TOKEN_OP_STAR)) {
    7866:	68f2      	ldr	r2, [r6, #12]
    7868:	f240 331e 	movw	r3, #798	; 0x31e
    786c:	429a      	cmp	r2, r3
    786e:	d041      	beq.n	78f4 <compile_import_from+0xc0>
        EMIT_ARG(load_const_small_int, import_level);
    7870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7872:	f000 fdd5 	bl	8420 <mp_emit_bc_load_const_small_int>
        int n = mp_parse_node_extract_list(&pns->nodes[1], PN_import_as_names, &pn_nodes);
    7876:	466a      	mov	r2, sp
    7878:	2164      	movs	r1, #100	; 0x64
    787a:	f106 000c 	add.w	r0, r6, #12
    787e:	f7fc fed5 	bl	462c <mp_parse_node_extract_list>
    7882:	4680      	mov	r8, r0
        for (int i = 0; i < n; i++) {
    7884:	2400      	movs	r4, #0
    7886:	4544      	cmp	r4, r8
    7888:	da4f      	bge.n	792a <compile_import_from+0xf6>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    788a:	9b00      	ldr	r3, [sp, #0]
    788c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7890:	2b00      	cmp	r3, #0
    7892:	d043      	beq.n	791c <compile_import_from+0xe8>
    7894:	f013 0f03 	tst.w	r3, #3
    7898:	d140      	bne.n	791c <compile_import_from+0xe8>
    789a:	791a      	ldrb	r2, [r3, #4]
    789c:	2a61      	cmp	r2, #97	; 0x61
    789e:	d13d      	bne.n	791c <compile_import_from+0xe8>
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    78a0:	6899      	ldr	r1, [r3, #8]
            EMIT_ARG(load_const_str, id2);
    78a2:	0909      	lsrs	r1, r1, #4
    78a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    78a6:	f000 fdd2 	bl	844e <mp_emit_bc_load_const_str>
        for (int i = 0; i < n; i++) {
    78aa:	3401      	adds	r4, #1
    78ac:	e7eb      	b.n	7886 <compile_import_from+0x52>
            pn_rel = pn_import_source;
    78ae:	9500      	str	r5, [sp, #0]
            pn_import_source = MP_PARSE_NODE_NULL;
    78b0:	2500      	movs	r5, #0
        int n = mp_parse_node_extract_list(&pn_rel, PN_one_or_more_period_or_ellipsis, &nodes);
    78b2:	aa01      	add	r2, sp, #4
    78b4:	215f      	movs	r1, #95	; 0x5f
    78b6:	4668      	mov	r0, sp
    78b8:	f7fc feb8 	bl	462c <mp_parse_node_extract_list>
        for (int i = 0; i < n; i++) {
    78bc:	2300      	movs	r3, #0
    uint import_level = 0;
    78be:	4619      	mov	r1, r3
        for (int i = 0; i < n; i++) {
    78c0:	e00d      	b.n	78de <compile_import_from+0xaa>
            pn_rel = pns_2b->nodes[0];
    78c2:	68ab      	ldr	r3, [r5, #8]
    78c4:	9300      	str	r3, [sp, #0]
            pn_import_source = pns_2b->nodes[1];
    78c6:	68ed      	ldr	r5, [r5, #12]
            assert(!MP_PARSE_NODE_IS_NULL(pn_import_source)); // should not be
    78c8:	2d00      	cmp	r5, #0
    78ca:	d1f2      	bne.n	78b2 <compile_import_from+0x7e>
    78cc:	4b33      	ldr	r3, [pc, #204]	; (799c <compile_import_from+0x168>)
    78ce:	4a34      	ldr	r2, [pc, #208]	; (79a0 <compile_import_from+0x16c>)
    78d0:	f240 414b 	movw	r1, #1099	; 0x44b
    78d4:	4833      	ldr	r0, [pc, #204]	; (79a4 <compile_import_from+0x170>)
    78d6:	f010 fe41 	bl	1855c <__assert_func>
                import_level++;
    78da:	3101      	adds	r1, #1
        for (int i = 0; i < n; i++) {
    78dc:	3301      	adds	r3, #1
    78de:	4283      	cmp	r3, r0
    78e0:	dac1      	bge.n	7866 <compile_import_from+0x32>
            if (MP_PARSE_NODE_IS_TOKEN_KIND(nodes[i], MP_TOKEN_DEL_PERIOD)) {
    78e2:	9a01      	ldr	r2, [sp, #4]
    78e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    78e8:	f240 42ae 	movw	r2, #1198	; 0x4ae
    78ec:	4294      	cmp	r4, r2
    78ee:	d0f4      	beq.n	78da <compile_import_from+0xa6>
                import_level += 3;
    78f0:	3103      	adds	r1, #3
    78f2:	e7f3      	b.n	78dc <compile_import_from+0xa8>
        EMIT_ARG(load_const_small_int, import_level);
    78f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    78f6:	f000 fd93 	bl	8420 <mp_emit_bc_load_const_small_int>
        EMIT_ARG(load_const_str, MP_QSTR__star_);
    78fa:	2127      	movs	r1, #39	; 0x27
    78fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    78fe:	f000 fda6 	bl	844e <mp_emit_bc_load_const_str>
        EMIT_ARG(build_tuple, 1);
    7902:	2101      	movs	r1, #1
    7904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7906:	f000 ff71 	bl	87ec <mp_emit_bc_build_tuple>
        do_import_name(comp, pn_import_source, &dummy_q);
    790a:	aa01      	add	r2, sp, #4
    790c:	4629      	mov	r1, r5
    790e:	4638      	mov	r0, r7
    7910:	f7ff fef2 	bl	76f8 <do_import_name>
        EMIT(import_star);
    7914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7916:	f000 fd46 	bl	83a6 <mp_emit_bc_import_star>
    791a:	e03b      	b.n	7994 <compile_import_from+0x160>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    791c:	4b22      	ldr	r3, [pc, #136]	; (79a8 <compile_import_from+0x174>)
    791e:	4a20      	ldr	r2, [pc, #128]	; (79a0 <compile_import_from+0x16c>)
    7920:	f240 4173 	movw	r1, #1139	; 0x473
    7924:	481f      	ldr	r0, [pc, #124]	; (79a4 <compile_import_from+0x170>)
    7926:	f010 fe19 	bl	1855c <__assert_func>
        EMIT_ARG(build_tuple, n);
    792a:	4641      	mov	r1, r8
    792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    792e:	f000 ff5d 	bl	87ec <mp_emit_bc_build_tuple>
        do_import_name(comp, pn_import_source, &dummy_q);
    7932:	aa01      	add	r2, sp, #4
    7934:	4629      	mov	r1, r5
    7936:	4638      	mov	r0, r7
    7938:	f7ff fede 	bl	76f8 <do_import_name>
        for (int i = 0; i < n; i++) {
    793c:	2600      	movs	r6, #0
    793e:	e00b      	b.n	7958 <compile_import_from+0x124>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    7940:	4b19      	ldr	r3, [pc, #100]	; (79a8 <compile_import_from+0x174>)
    7942:	4a17      	ldr	r2, [pc, #92]	; (79a0 <compile_import_from+0x16c>)
    7944:	f240 417e 	movw	r1, #1150	; 0x47e
    7948:	4816      	ldr	r0, [pc, #88]	; (79a4 <compile_import_from+0x170>)
    794a:	f010 fe07 	bl	1855c <__assert_func>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
    794e:	0909      	lsrs	r1, r1, #4
    7950:	4638      	mov	r0, r7
    7952:	f7fd fc0f 	bl	5174 <compile_store_id>
        for (int i = 0; i < n; i++) {
    7956:	3601      	adds	r6, #1
    7958:	4546      	cmp	r6, r8
    795a:	da18      	bge.n	798e <compile_import_from+0x15a>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    795c:	9b00      	ldr	r3, [sp, #0]
    795e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
    7962:	2c00      	cmp	r4, #0
    7964:	d0ec      	beq.n	7940 <compile_import_from+0x10c>
    7966:	f014 0f03 	tst.w	r4, #3
    796a:	d1e9      	bne.n	7940 <compile_import_from+0x10c>
    796c:	7923      	ldrb	r3, [r4, #4]
    796e:	2b61      	cmp	r3, #97	; 0x61
    7970:	d1e6      	bne.n	7940 <compile_import_from+0x10c>
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    7972:	68a5      	ldr	r5, [r4, #8]
    7974:	092d      	lsrs	r5, r5, #4
            EMIT_ARG(import_from, id2);
    7976:	4629      	mov	r1, r5
    7978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    797a:	f000 fd08 	bl	838e <mp_emit_bc_import_from>
            if (MP_PARSE_NODE_IS_NULL(pns3->nodes[1])) {
    797e:	68e1      	ldr	r1, [r4, #12]
    7980:	2900      	cmp	r1, #0
    7982:	d1e4      	bne.n	794e <compile_import_from+0x11a>
                compile_store_id(comp, id2);
    7984:	4629      	mov	r1, r5
    7986:	4638      	mov	r0, r7
    7988:	f7fd fbf4 	bl	5174 <compile_store_id>
    798c:	e7e3      	b.n	7956 <compile_import_from+0x122>
        EMIT(pop_top);
    798e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7990:	f000 fdde 	bl	8550 <mp_emit_bc_pop_top>
}
    7994:	b002      	add	sp, #8
    7996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    799a:	bf00      	nop
    799c:	00024a9c 	.word	0x00024a9c
    79a0:	000242c4 	.word	0x000242c4
    79a4:	00024fdc 	.word	0x00024fdc
    79a8:	00024ac8 	.word	0x00024ac8

000079ac <compile_dotted_as_name>:
STATIC void compile_dotted_as_name(compiler_t *comp, mp_parse_node_t pn) {
    79ac:	b530      	push	{r4, r5, lr}
    79ae:	b083      	sub	sp, #12
    79b0:	4604      	mov	r4, r0
    79b2:	460d      	mov	r5, r1
    EMIT_ARG(load_const_small_int, 0); // level 0 import
    79b4:	2100      	movs	r1, #0
    79b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    79b8:	f000 fd32 	bl	8420 <mp_emit_bc_load_const_small_int>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE); // not importing from anything
    79bc:	210e      	movs	r1, #14
    79be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    79c0:	f000 fcfc 	bl	83bc <mp_emit_bc_load_const_tok>
    do_import_name(comp, pn, &q_base);
    79c4:	aa01      	add	r2, sp, #4
    79c6:	4629      	mov	r1, r5
    79c8:	4620      	mov	r0, r4
    79ca:	f7ff fe95 	bl	76f8 <do_import_name>
    compile_store_id(comp, q_base);
    79ce:	9901      	ldr	r1, [sp, #4]
    79d0:	4620      	mov	r0, r4
    79d2:	f7fd fbcf 	bl	5174 <compile_store_id>
}
    79d6:	b003      	add	sp, #12
    79d8:	bd30      	pop	{r4, r5, pc}
	...

000079dc <compile_continue_stmt>:
STATIC void compile_continue_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    79dc:	b510      	push	{r4, lr}
    79de:	4604      	mov	r4, r0
    if (comp->continue_label == INVALID_LABEL) {
    79e0:	8b42      	ldrh	r2, [r0, #26]
    79e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    79e6:	429a      	cmp	r2, r3
    79e8:	d009      	beq.n	79fe <compile_continue_stmt+0x22>
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    79ea:	8ba2      	ldrh	r2, [r4, #28]
    79ec:	8be3      	ldrh	r3, [r4, #30]
    79ee:	429a      	cmp	r2, r3
    79f0:	d309      	bcc.n	7a06 <compile_continue_stmt+0x2a>
    EMIT_ARG(continue_loop, comp->continue_label, comp->cur_except_level - comp->break_continue_except_level);
    79f2:	1ad2      	subs	r2, r2, r3
    79f4:	8b61      	ldrh	r1, [r4, #26]
    79f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    79f8:	f000 fe17 	bl	862a <mp_emit_bc_unwind_jump>
}
    79fc:	bd10      	pop	{r4, pc}
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'continue' outside loop");
    79fe:	4a05      	ldr	r2, [pc, #20]	; (7a14 <compile_continue_stmt+0x38>)
    7a00:	f7fd faac 	bl	4f5c <compile_syntax_error>
    7a04:	e7f1      	b.n	79ea <compile_continue_stmt+0xe>
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    7a06:	4b04      	ldr	r3, [pc, #16]	; (7a18 <compile_continue_stmt+0x3c>)
    7a08:	4a04      	ldr	r2, [pc, #16]	; (7a1c <compile_continue_stmt+0x40>)
    7a0a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    7a0e:	4804      	ldr	r0, [pc, #16]	; (7a20 <compile_continue_stmt+0x44>)
    7a10:	f010 fda4 	bl	1855c <__assert_func>
    7a14:	00024788 	.word	0x00024788
    7a18:	000247a0 	.word	0x000247a0
    7a1c:	0002429c 	.word	0x0002429c
    7a20:	00024fdc 	.word	0x00024fdc

00007a24 <compile_break_stmt>:
STATIC void compile_break_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7a24:	b510      	push	{r4, lr}
    7a26:	4604      	mov	r4, r0
    if (comp->break_label == INVALID_LABEL) {
    7a28:	8b02      	ldrh	r2, [r0, #24]
    7a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7a2e:	429a      	cmp	r2, r3
    7a30:	d009      	beq.n	7a46 <compile_break_stmt+0x22>
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    7a32:	8ba2      	ldrh	r2, [r4, #28]
    7a34:	8be3      	ldrh	r3, [r4, #30]
    7a36:	429a      	cmp	r2, r3
    7a38:	d309      	bcc.n	7a4e <compile_break_stmt+0x2a>
    EMIT_ARG(break_loop, comp->break_label, comp->cur_except_level - comp->break_continue_except_level);
    7a3a:	1ad2      	subs	r2, r2, r3
    7a3c:	8b21      	ldrh	r1, [r4, #24]
    7a3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7a40:	f000 fdf3 	bl	862a <mp_emit_bc_unwind_jump>
}
    7a44:	bd10      	pop	{r4, pc}
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'break' outside loop");
    7a46:	4a05      	ldr	r2, [pc, #20]	; (7a5c <compile_break_stmt+0x38>)
    7a48:	f7fd fa88 	bl	4f5c <compile_syntax_error>
    7a4c:	e7f1      	b.n	7a32 <compile_break_stmt+0xe>
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    7a4e:	4b04      	ldr	r3, [pc, #16]	; (7a60 <compile_break_stmt+0x3c>)
    7a50:	4a04      	ldr	r2, [pc, #16]	; (7a64 <compile_break_stmt+0x40>)
    7a52:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    7a56:	4804      	ldr	r0, [pc, #16]	; (7a68 <compile_break_stmt+0x44>)
    7a58:	f010 fd80 	bl	1855c <__assert_func>
    7a5c:	00024710 	.word	0x00024710
    7a60:	000247a0 	.word	0x000247a0
    7a64:	00024288 	.word	0x00024288
    7a68:	00024fdc 	.word	0x00024fdc

00007a6c <c_del_stmt>:
STATIC void c_del_stmt(compiler_t *comp, mp_parse_node_t pn) {
    7a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7a70:	4605      	mov	r5, r0
    7a72:	460c      	mov	r4, r1
    if (MP_PARSE_NODE_IS_ID(pn)) {
    7a74:	f001 030f 	and.w	r3, r1, #15
    7a78:	2b02      	cmp	r3, #2
    7a7a:	d014      	beq.n	7aa6 <c_del_stmt+0x3a>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    7a7c:	b129      	cbz	r1, 7a8a <c_del_stmt+0x1e>
    7a7e:	f011 0f03 	tst.w	r1, #3
    7a82:	d102      	bne.n	7a8a <c_del_stmt+0x1e>
    7a84:	790b      	ldrb	r3, [r1, #4]
    7a86:	2b29      	cmp	r3, #41	; 0x29
    7a88:	d011      	beq.n	7aae <c_del_stmt+0x42>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_paren)) {
    7a8a:	b12c      	cbz	r4, 7a98 <c_del_stmt+0x2c>
    7a8c:	f014 0f03 	tst.w	r4, #3
    7a90:	d102      	bne.n	7a98 <c_del_stmt+0x2c>
    7a92:	7923      	ldrb	r3, [r4, #4]
    7a94:	2b2a      	cmp	r3, #42	; 0x2a
    7a96:	d059      	beq.n	7b4c <c_del_stmt+0xe0>
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
    7a98:	4a50      	ldr	r2, [pc, #320]	; (7bdc <c_del_stmt+0x170>)
    7a9a:	4621      	mov	r1, r4
    7a9c:	4628      	mov	r0, r5
    7a9e:	f7fd fa5d 	bl	4f5c <compile_syntax_error>
}
    7aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        compile_delete_id(comp, MP_PARSE_NODE_LEAF_ARG(pn));
    7aa6:	0909      	lsrs	r1, r1, #4
    7aa8:	f7fd fb76 	bl	5198 <compile_delete_id>
    7aac:	e7f9      	b.n	7aa2 <c_del_stmt+0x36>
        compile_node(comp, pns->nodes[0]); // base of the atom_expr_normal node
    7aae:	6889      	ldr	r1, [r1, #8]
    7ab0:	f7fd fb8e 	bl	51d0 <compile_node>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    7ab4:	68e6      	ldr	r6, [r4, #12]
    7ab6:	2e00      	cmp	r6, #0
    7ab8:	d0ee      	beq.n	7a98 <c_del_stmt+0x2c>
    7aba:	f016 0f03 	tst.w	r6, #3
    7abe:	d1eb      	bne.n	7a98 <c_del_stmt+0x2c>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    7ac0:	46b0      	mov	r8, r6
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    7ac2:	6873      	ldr	r3, [r6, #4]
    7ac4:	b2da      	uxtb	r2, r3
    7ac6:	2a86      	cmp	r2, #134	; 0x86
    7ac8:	d010      	beq.n	7aec <c_del_stmt+0x80>
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    7aca:	f898 3004 	ldrb.w	r3, [r8, #4]
    7ace:	2b2e      	cmp	r3, #46	; 0x2e
    7ad0:	d02c      	beq.n	7b2c <c_del_stmt+0xc0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    7ad2:	2b2f      	cmp	r3, #47	; 0x2f
    7ad4:	d1e0      	bne.n	7a98 <c_del_stmt+0x2c>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    7ad6:	f8d8 1008 	ldr.w	r1, [r8, #8]
    7ada:	f001 030f 	and.w	r3, r1, #15
    7ade:	2b02      	cmp	r3, #2
    7ae0:	d12d      	bne.n	7b3e <c_del_stmt+0xd2>
                EMIT_ARG(delete_attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]));
    7ae2:	0909      	lsrs	r1, r1, #4
    7ae4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    7ae6:	f000 fd48 	bl	857a <mp_emit_bc_delete_attr>
    7aea:	e7da      	b.n	7aa2 <c_del_stmt+0x36>
                int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    7aec:	ea4f 2913 	mov.w	r9, r3, lsr #8
                for (int i = 0; i < n - 1; i++) {
    7af0:	2700      	movs	r7, #0
    7af2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    7af6:	42bb      	cmp	r3, r7
    7af8:	dd07      	ble.n	7b0a <c_del_stmt+0x9e>
                    compile_node(comp, pns1->nodes[i]);
    7afa:	1cbb      	adds	r3, r7, #2
    7afc:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    7b00:	4628      	mov	r0, r5
    7b02:	f7fd fb65 	bl	51d0 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    7b06:	3701      	adds	r7, #1
    7b08:	e7f3      	b.n	7af2 <c_del_stmt+0x86>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    7b0a:	f109 0301 	add.w	r3, r9, #1
    7b0e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    7b12:	b123      	cbz	r3, 7b1e <c_del_stmt+0xb2>
    7b14:	f013 0f03 	tst.w	r3, #3
    7b18:	d101      	bne.n	7b1e <c_del_stmt+0xb2>
                pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    7b1a:	4698      	mov	r8, r3
    7b1c:	e7d5      	b.n	7aca <c_del_stmt+0x5e>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    7b1e:	4b30      	ldr	r3, [pc, #192]	; (7be0 <c_del_stmt+0x174>)
    7b20:	4a30      	ldr	r2, [pc, #192]	; (7be4 <c_del_stmt+0x178>)
    7b22:	f240 3172 	movw	r1, #882	; 0x372
    7b26:	4830      	ldr	r0, [pc, #192]	; (7be8 <c_del_stmt+0x17c>)
    7b28:	f010 fd18 	bl	1855c <__assert_func>
                compile_node(comp, pns1->nodes[0]);
    7b2c:	f8d8 1008 	ldr.w	r1, [r8, #8]
    7b30:	4628      	mov	r0, r5
    7b32:	f7fd fb4d 	bl	51d0 <compile_node>
                EMIT(delete_subscr);
    7b36:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    7b38:	f000 fd36 	bl	85a8 <mp_emit_bc_delete_subscr>
    7b3c:	e7b1      	b.n	7aa2 <c_del_stmt+0x36>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    7b3e:	4b2b      	ldr	r3, [pc, #172]	; (7bec <c_del_stmt+0x180>)
    7b40:	4a28      	ldr	r2, [pc, #160]	; (7be4 <c_del_stmt+0x178>)
    7b42:	f240 3179 	movw	r1, #889	; 0x379
    7b46:	4828      	ldr	r0, [pc, #160]	; (7be8 <c_del_stmt+0x17c>)
    7b48:	f010 fd08 	bl	1855c <__assert_func>
        pn = ((mp_parse_node_struct_t*)pn)->nodes[0];
    7b4c:	68a4      	ldr	r4, [r4, #8]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    7b4e:	2c00      	cmp	r4, #0
    7b50:	d0a2      	beq.n	7a98 <c_del_stmt+0x2c>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    7b52:	f014 0f03 	tst.w	r4, #3
    7b56:	d11a      	bne.n	7b8e <c_del_stmt+0x122>
    7b58:	4626      	mov	r6, r4
    7b5a:	7923      	ldrb	r3, [r4, #4]
    7b5c:	2b8a      	cmp	r3, #138	; 0x8a
    7b5e:	d116      	bne.n	7b8e <c_del_stmt+0x122>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    7b60:	68e3      	ldr	r3, [r4, #12]
    7b62:	b15b      	cbz	r3, 7b7c <c_del_stmt+0x110>
    7b64:	f013 0f03 	tst.w	r3, #3
    7b68:	d108      	bne.n	7b7c <c_del_stmt+0x110>
                mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    7b6a:	461f      	mov	r7, r3
                if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3b) {
    7b6c:	6859      	ldr	r1, [r3, #4]
    7b6e:	b2ca      	uxtb	r2, r1
    7b70:	2a8d      	cmp	r2, #141	; 0x8d
    7b72:	d013      	beq.n	7b9c <c_del_stmt+0x130>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3c) {
    7b74:	2a8e      	cmp	r2, #142	; 0x8e
    7b76:	d01f      	beq.n	7bb8 <c_del_stmt+0x14c>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for) {
    7b78:	2a9f      	cmp	r2, #159	; 0x9f
    7b7a:	d08d      	beq.n	7a98 <c_del_stmt+0x2c>
                c_del_stmt(comp, pns->nodes[0]);
    7b7c:	68b1      	ldr	r1, [r6, #8]
    7b7e:	4628      	mov	r0, r5
    7b80:	f7ff ff74 	bl	7a6c <c_del_stmt>
                c_del_stmt(comp, pns->nodes[1]);
    7b84:	68f1      	ldr	r1, [r6, #12]
    7b86:	4628      	mov	r0, r5
    7b88:	f7ff ff70 	bl	7a6c <c_del_stmt>
    7b8c:	e789      	b.n	7aa2 <c_del_stmt+0x36>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    7b8e:	4b18      	ldr	r3, [pc, #96]	; (7bf0 <c_del_stmt+0x184>)
    7b90:	4a14      	ldr	r2, [pc, #80]	; (7be4 <c_del_stmt+0x178>)
    7b92:	f240 3187 	movw	r1, #903	; 0x387
    7b96:	4814      	ldr	r0, [pc, #80]	; (7be8 <c_del_stmt+0x17c>)
    7b98:	f010 fce0 	bl	1855c <__assert_func>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    7b9c:	689b      	ldr	r3, [r3, #8]
    7b9e:	b923      	cbnz	r3, 7baa <c_del_stmt+0x13e>
                    c_del_stmt(comp, pns->nodes[0]);
    7ba0:	68a1      	ldr	r1, [r4, #8]
    7ba2:	4628      	mov	r0, r5
    7ba4:	f7ff ff62 	bl	7a6c <c_del_stmt>
    7ba8:	e77b      	b.n	7aa2 <c_del_stmt+0x36>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    7baa:	4b12      	ldr	r3, [pc, #72]	; (7bf4 <c_del_stmt+0x188>)
    7bac:	4a0d      	ldr	r2, [pc, #52]	; (7be4 <c_del_stmt+0x178>)
    7bae:	f240 318f 	movw	r1, #911	; 0x38f
    7bb2:	480d      	ldr	r0, [pc, #52]	; (7be8 <c_del_stmt+0x17c>)
    7bb4:	f010 fcd2 	bl	1855c <__assert_func>
                    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    7bb8:	0a0c      	lsrs	r4, r1, #8
                    c_del_stmt(comp, pns->nodes[0]);
    7bba:	68b1      	ldr	r1, [r6, #8]
    7bbc:	4628      	mov	r0, r5
    7bbe:	f7ff ff55 	bl	7a6c <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    7bc2:	2600      	movs	r6, #0
    7bc4:	e006      	b.n	7bd4 <c_del_stmt+0x168>
                        c_del_stmt(comp, pns1->nodes[i]);
    7bc6:	1cb3      	adds	r3, r6, #2
    7bc8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    7bcc:	4628      	mov	r0, r5
    7bce:	f7ff ff4d 	bl	7a6c <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    7bd2:	3601      	adds	r6, #1
    7bd4:	42a6      	cmp	r6, r4
    7bd6:	dbf6      	blt.n	7bc6 <c_del_stmt+0x15a>
    7bd8:	e763      	b.n	7aa2 <c_del_stmt+0x36>
    7bda:	bf00      	nop
    7bdc:	000245f0 	.word	0x000245f0
    7be0:	0002450c 	.word	0x0002450c
    7be4:	0002427c 	.word	0x0002427c
    7be8:	00024fdc 	.word	0x00024fdc
    7bec:	00024538 	.word	0x00024538
    7bf0:	00024594 	.word	0x00024594
    7bf4:	000245c8 	.word	0x000245c8

00007bf8 <mp_compile>:

mp_obj_t mp_compile(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    7bf8:	b508      	push	{r3, lr}
    mp_raw_code_t *rc = mp_compile_to_raw_code(parse_tree, source_file, emit_opt, is_repl);
    7bfa:	f7fd ffb7 	bl	5b6c <mp_compile_to_raw_code>
    // return function that executes the outer module
    return mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    7bfe:	2200      	movs	r2, #0
    7c00:	4611      	mov	r1, r2
    7c02:	f001 fb89 	bl	9318 <mp_make_function_from_raw_code>
}
    7c06:	bd08      	pop	{r3, pc}

00007c08 <mp_emit_common_get_id_for_load>:

#include "py/emit.h"

#if MICROPY_ENABLE_COMPILER

void mp_emit_common_get_id_for_load(scope_t *scope, qstr qst) {
    7c08:	b530      	push	{r4, r5, lr}
    7c0a:	b083      	sub	sp, #12
    7c0c:	4604      	mov	r4, r0
    7c0e:	460d      	mov	r5, r1
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    7c10:	f10d 0207 	add.w	r2, sp, #7
    7c14:	f7fc ffe0 	bl	4bd8 <scope_find_or_add_id>
    if (added) {
    7c18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c1c:	b90b      	cbnz	r3, 7c22 <mp_emit_common_get_id_for_load+0x1a>
        scope_find_local_and_close_over(scope, id, qst);
    }
}
    7c1e:	b003      	add	sp, #12
    7c20:	bd30      	pop	{r4, r5, pc}
        scope_find_local_and_close_over(scope, id, qst);
    7c22:	462a      	mov	r2, r5
    7c24:	4601      	mov	r1, r0
    7c26:	4620      	mov	r0, r4
    7c28:	f7fd f845 	bl	4cb6 <scope_find_local_and_close_over>
}
    7c2c:	e7f7      	b.n	7c1e <mp_emit_common_get_id_for_load+0x16>

00007c2e <mp_emit_common_get_id_for_modification>:

void mp_emit_common_get_id_for_modification(scope_t *scope, qstr qst) {
    7c2e:	b510      	push	{r4, lr}
    7c30:	b082      	sub	sp, #8
    7c32:	4604      	mov	r4, r0
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    7c34:	f10d 0207 	add.w	r2, sp, #7
    7c38:	f7fc ffce 	bl	4bd8 <scope_find_or_add_id>
    if (added) {
    7c3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c40:	b14b      	cbz	r3, 7c56 <mp_emit_common_get_id_for_modification+0x28>
        if (SCOPE_IS_FUNC_LIKE(scope->kind)) {
    7c42:	7823      	ldrb	r3, [r4, #0]
    7c44:	2b01      	cmp	r3, #1
    7c46:	d903      	bls.n	7c50 <mp_emit_common_get_id_for_modification+0x22>
            id->kind = ID_INFO_KIND_LOCAL;
    7c48:	2302      	movs	r3, #2
    7c4a:	7003      	strb	r3, [r0, #0]
        }
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
        // rebind as a local variable
        id->kind = ID_INFO_KIND_LOCAL;
    }
}
    7c4c:	b002      	add	sp, #8
    7c4e:	bd10      	pop	{r4, pc}
            id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    7c50:	2300      	movs	r3, #0
    7c52:	7003      	strb	r3, [r0, #0]
    7c54:	e7fa      	b.n	7c4c <mp_emit_common_get_id_for_modification+0x1e>
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    7c56:	7823      	ldrb	r3, [r4, #0]
    7c58:	2b01      	cmp	r3, #1
    7c5a:	d9f7      	bls.n	7c4c <mp_emit_common_get_id_for_modification+0x1e>
    7c5c:	7803      	ldrb	r3, [r0, #0]
    7c5e:	2b00      	cmp	r3, #0
    7c60:	d1f4      	bne.n	7c4c <mp_emit_common_get_id_for_modification+0x1e>
        id->kind = ID_INFO_KIND_LOCAL;
    7c62:	2302      	movs	r3, #2
    7c64:	7003      	strb	r3, [r0, #0]
}
    7c66:	e7f1      	b.n	7c4c <mp_emit_common_get_id_for_modification+0x1e>

00007c68 <mp_emit_common_id_op>:

void mp_emit_common_id_op(emit_t *emit, const mp_emit_method_table_id_ops_t *emit_method_table, scope_t *scope, qstr qst) {
    7c68:	b570      	push	{r4, r5, r6, lr}
    7c6a:	4605      	mov	r5, r0
    7c6c:	460e      	mov	r6, r1
    7c6e:	461c      	mov	r4, r3
    // assumes pass is greater than 1, ie that all identifiers are defined in the scope

    id_info_t *id = scope_find(scope, qst);
    7c70:	4619      	mov	r1, r3
    7c72:	4610      	mov	r0, r2
    7c74:	f7fc ff99 	bl	4baa <scope_find>
    assert(id != NULL);
    7c78:	b130      	cbz	r0, 7c88 <mp_emit_common_id_op+0x20>

    // call the emit backend with the correct code
    if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    7c7a:	7803      	ldrb	r3, [r0, #0]
    7c7c:	b953      	cbnz	r3, 7c94 <mp_emit_common_id_op+0x2c>
        emit_method_table->name(emit, qst);
    7c7e:	68b3      	ldr	r3, [r6, #8]
    7c80:	4621      	mov	r1, r4
    7c82:	4628      	mov	r0, r5
    7c84:	4798      	blx	r3
        emit_method_table->fast(emit, qst, id->local_num);
    } else {
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
        emit_method_table->deref(emit, qst, id->local_num);
    }
}
    7c86:	bd70      	pop	{r4, r5, r6, pc}
    assert(id != NULL);
    7c88:	4b12      	ldr	r3, [pc, #72]	; (7cd4 <mp_emit_common_id_op+0x6c>)
    7c8a:	4a13      	ldr	r2, [pc, #76]	; (7cd8 <mp_emit_common_id_op+0x70>)
    7c8c:	213e      	movs	r1, #62	; 0x3e
    7c8e:	4813      	ldr	r0, [pc, #76]	; (7cdc <mp_emit_common_id_op+0x74>)
    7c90:	f010 fc64 	bl	1855c <__assert_func>
    } else if (id->kind == ID_INFO_KIND_GLOBAL_EXPLICIT) {
    7c94:	2b01      	cmp	r3, #1
    7c96:	d104      	bne.n	7ca2 <mp_emit_common_id_op+0x3a>
        emit_method_table->global(emit, qst);
    7c98:	68f3      	ldr	r3, [r6, #12]
    7c9a:	4621      	mov	r1, r4
    7c9c:	4628      	mov	r0, r5
    7c9e:	4798      	blx	r3
    7ca0:	e7f1      	b.n	7c86 <mp_emit_common_id_op+0x1e>
    } else if (id->kind == ID_INFO_KIND_LOCAL) {
    7ca2:	2b02      	cmp	r3, #2
    7ca4:	d105      	bne.n	7cb2 <mp_emit_common_id_op+0x4a>
        emit_method_table->fast(emit, qst, id->local_num);
    7ca6:	6833      	ldr	r3, [r6, #0]
    7ca8:	8842      	ldrh	r2, [r0, #2]
    7caa:	4621      	mov	r1, r4
    7cac:	4628      	mov	r0, r5
    7cae:	4798      	blx	r3
    7cb0:	e7e9      	b.n	7c86 <mp_emit_common_id_op+0x1e>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    7cb2:	3b03      	subs	r3, #3
    7cb4:	b2db      	uxtb	r3, r3
    7cb6:	2b01      	cmp	r3, #1
    7cb8:	d805      	bhi.n	7cc6 <mp_emit_common_id_op+0x5e>
        emit_method_table->deref(emit, qst, id->local_num);
    7cba:	6873      	ldr	r3, [r6, #4]
    7cbc:	8842      	ldrh	r2, [r0, #2]
    7cbe:	4621      	mov	r1, r4
    7cc0:	4628      	mov	r0, r5
    7cc2:	4798      	blx	r3
}
    7cc4:	e7df      	b.n	7c86 <mp_emit_common_id_op+0x1e>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    7cc6:	4b06      	ldr	r3, [pc, #24]	; (7ce0 <mp_emit_common_id_op+0x78>)
    7cc8:	4a03      	ldr	r2, [pc, #12]	; (7cd8 <mp_emit_common_id_op+0x70>)
    7cca:	2148      	movs	r1, #72	; 0x48
    7ccc:	4803      	ldr	r0, [pc, #12]	; (7cdc <mp_emit_common_id_op+0x74>)
    7cce:	f010 fc45 	bl	1855c <__assert_func>
    7cd2:	bf00      	nop
    7cd4:	00024cd8 	.word	0x00024cd8
    7cd8:	00024ff0 	.word	0x00024ff0
    7cdc:	00025008 	.word	0x00025008
    7ce0:	00025020 	.word	0x00025020

00007ce4 <emit_write_uint>:
    m_del_obj(emit_t, emit);
}

typedef byte *(*emit_allocator_t)(emit_t *emit, int nbytes);

STATIC void emit_write_uint(emit_t *emit, emit_allocator_t allocator, mp_uint_t val) {
    7ce4:	b530      	push	{r4, r5, lr}
    7ce6:	b083      	sub	sp, #12
    7ce8:	460d      	mov	r5, r1
    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    7cea:	f10d 0405 	add.w	r4, sp, #5
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = val & 0x7f;
    7cee:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    7cf2:	f804 3d01 	strb.w	r3, [r4, #-1]!
        val >>= 7;
    } while (val != 0);
    7cf6:	09d2      	lsrs	r2, r2, #7
    7cf8:	d1f9      	bne.n	7cee <emit_write_uint+0xa>
    byte *c = allocator(emit, buf + sizeof(buf) - p);
    7cfa:	f10d 0105 	add.w	r1, sp, #5
    7cfe:	1b09      	subs	r1, r1, r4
    7d00:	47a8      	blx	r5
    while (p != buf + sizeof(buf) - 1) {
    7d02:	e005      	b.n	7d10 <emit_write_uint+0x2c>
        *c++ = *p++ | 0x80;
    7d04:	7823      	ldrb	r3, [r4, #0]
    7d06:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7d0a:	7003      	strb	r3, [r0, #0]
    7d0c:	3001      	adds	r0, #1
    7d0e:	3401      	adds	r4, #1
    while (p != buf + sizeof(buf) - 1) {
    7d10:	ab01      	add	r3, sp, #4
    7d12:	429c      	cmp	r4, r3
    7d14:	d1f6      	bne.n	7d04 <emit_write_uint+0x20>
    }
    *c = *p;
    7d16:	7823      	ldrb	r3, [r4, #0]
    7d18:	7003      	strb	r3, [r0, #0]
}
    7d1a:	b003      	add	sp, #12
    7d1c:	bd30      	pop	{r4, r5, pc}
	...

00007d20 <emit_write_code_info_uint>:

STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    *emit_get_cur_to_write_code_info(emit, 1) = val;
}

STATIC void emit_write_code_info_uint(emit_t* emit, mp_uint_t val) {
    7d20:	b508      	push	{r3, lr}
    emit_write_uint(emit, emit_get_cur_to_write_code_info, val);
    7d22:	460a      	mov	r2, r1
    7d24:	4901      	ldr	r1, [pc, #4]	; (7d2c <emit_write_code_info_uint+0xc>)
    7d26:	f7ff ffdd 	bl	7ce4 <emit_write_uint>
}
    7d2a:	bd08      	pop	{r3, pc}
    7d2c:	00007d41 	.word	0x00007d41

00007d30 <emit_write_code_info_qstr>:

STATIC void emit_write_code_info_qstr(emit_t *emit, qstr qst) {
    7d30:	b508      	push	{r3, lr}
    assert((qst >> 16) == 0);
    byte *c = emit_get_cur_to_write_code_info(emit, 2);
    c[0] = qst;
    c[1] = qst >> 8;
    #else
    emit_write_uint(emit, emit_get_cur_to_write_code_info, qst);
    7d32:	460a      	mov	r2, r1
    7d34:	4901      	ldr	r1, [pc, #4]	; (7d3c <emit_write_code_info_qstr+0xc>)
    7d36:	f7ff ffd5 	bl	7ce4 <emit_write_uint>
    #endif
}
    7d3a:	bd08      	pop	{r3, pc}
    7d3c:	00007d41 	.word	0x00007d41

00007d40 <emit_get_cur_to_write_code_info>:
STATIC byte *emit_get_cur_to_write_code_info(emit_t *emit, int num_bytes_to_write) {
    7d40:	b508      	push	{r3, lr}
    7d42:	4603      	mov	r3, r0
    if (emit->pass < MP_PASS_EMIT) {
    7d44:	7942      	ldrb	r2, [r0, #5]
    7d46:	2a03      	cmp	r2, #3
    7d48:	d908      	bls.n	7d5c <emit_get_cur_to_write_code_info+0x1c>
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    7d4a:	6a02      	ldr	r2, [r0, #32]
    7d4c:	4411      	add	r1, r2
    7d4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
    7d50:	4281      	cmp	r1, r0
    7d52:	d807      	bhi.n	7d64 <emit_get_cur_to_write_code_info+0x24>
        byte *c = emit->code_base + emit->code_info_offset;
    7d54:	6b18      	ldr	r0, [r3, #48]	; 0x30
    7d56:	4410      	add	r0, r2
        emit->code_info_offset += num_bytes_to_write;
    7d58:	6219      	str	r1, [r3, #32]
}
    7d5a:	bd08      	pop	{r3, pc}
        emit->code_info_offset += num_bytes_to_write;
    7d5c:	6a02      	ldr	r2, [r0, #32]
    7d5e:	4411      	add	r1, r2
    7d60:	6201      	str	r1, [r0, #32]
        return emit->dummy_data;
    7d62:	e7fa      	b.n	7d5a <emit_get_cur_to_write_code_info+0x1a>
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    7d64:	4b02      	ldr	r3, [pc, #8]	; (7d70 <emit_get_cur_to_write_code_info+0x30>)
    7d66:	4a03      	ldr	r2, [pc, #12]	; (7d74 <emit_get_cur_to_write_code_info+0x34>)
    7d68:	2173      	movs	r1, #115	; 0x73
    7d6a:	4803      	ldr	r0, [pc, #12]	; (7d78 <emit_get_cur_to_write_code_info+0x38>)
    7d6c:	f010 fbf6 	bl	1855c <__assert_func>
    7d70:	000251dc 	.word	0x000251dc
    7d74:	00025094 	.word	0x00025094
    7d78:	00025220 	.word	0x00025220

00007d7c <emit_write_code_info_byte>:
STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    7d7c:	b510      	push	{r4, lr}
    7d7e:	460c      	mov	r4, r1
    *emit_get_cur_to_write_code_info(emit, 1) = val;
    7d80:	2101      	movs	r1, #1
    7d82:	f7ff ffdd 	bl	7d40 <emit_get_cur_to_write_code_info>
    7d86:	7004      	strb	r4, [r0, #0]
}
    7d88:	bd10      	pop	{r4, pc}
	...

00007d8c <emit_get_cur_to_write_bytecode>:
    }
}
#endif

// all functions must go through this one to emit byte code
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    7d8c:	4603      	mov	r3, r0
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    7d8e:	7942      	ldrb	r2, [r0, #5]
    7d90:	2a03      	cmp	r2, #3
    7d92:	d90b      	bls.n	7dac <emit_get_cur_to_write_bytecode+0x20>
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    7d94:	b510      	push	{r4, lr}
        emit->bytecode_offset += num_bytes_to_write;
        return emit->dummy_data;
    } else {
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    7d96:	6a82      	ldr	r2, [r0, #40]	; 0x28
    7d98:	4411      	add	r1, r2
    7d9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    7d9c:	4281      	cmp	r1, r0
    7d9e:	d809      	bhi.n	7db4 <emit_get_cur_to_write_bytecode+0x28>
        byte *c = emit->code_base + emit->code_info_size + emit->bytecode_offset;
    7da0:	6b18      	ldr	r0, [r3, #48]	; 0x30
    7da2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    7da4:	4422      	add	r2, r4
    7da6:	4410      	add	r0, r2
        emit->bytecode_offset += num_bytes_to_write;
    7da8:	6299      	str	r1, [r3, #40]	; 0x28
        return c;
    }
}
    7daa:	bd10      	pop	{r4, pc}
        emit->bytecode_offset += num_bytes_to_write;
    7dac:	6a82      	ldr	r2, [r0, #40]	; 0x28
    7dae:	4411      	add	r1, r2
    7db0:	6281      	str	r1, [r0, #40]	; 0x28
}
    7db2:	4770      	bx	lr
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    7db4:	4b02      	ldr	r3, [pc, #8]	; (7dc0 <emit_get_cur_to_write_bytecode+0x34>)
    7db6:	4a03      	ldr	r2, [pc, #12]	; (7dc4 <emit_get_cur_to_write_bytecode+0x38>)
    7db8:	21b2      	movs	r1, #178	; 0xb2
    7dba:	4803      	ldr	r0, [pc, #12]	; (7dc8 <emit_get_cur_to_write_bytecode+0x3c>)
    7dbc:	f010 fbce 	bl	1855c <__assert_func>
    7dc0:	00025198 	.word	0x00025198
    7dc4:	000250b4 	.word	0x000250b4
    7dc8:	00025220 	.word	0x00025220

00007dcc <emit_write_bytecode_byte>:

STATIC void emit_write_bytecode_byte(emit_t *emit, byte b1) {
    7dcc:	b510      	push	{r4, lr}
    7dce:	460c      	mov	r4, r1
    byte *c = emit_get_cur_to_write_bytecode(emit, 1);
    7dd0:	2101      	movs	r1, #1
    7dd2:	f7ff ffdb 	bl	7d8c <emit_get_cur_to_write_bytecode>
    c[0] = b1;
    7dd6:	7004      	strb	r4, [r0, #0]
}
    7dd8:	bd10      	pop	{r4, pc}
	...

00007ddc <emit_write_bytecode_byte_uint>:
        *c++ = *p++ | 0x80;
    }
    *c = *p;
}

STATIC void emit_write_bytecode_byte_uint(emit_t *emit, byte b, mp_uint_t val) {
    7ddc:	b538      	push	{r3, r4, r5, lr}
    7dde:	4604      	mov	r4, r0
    7de0:	4615      	mov	r5, r2
    emit_write_bytecode_byte(emit, b);
    7de2:	f7ff fff3 	bl	7dcc <emit_write_bytecode_byte>
    emit_write_uint(emit, emit_get_cur_to_write_bytecode, val);
    7de6:	462a      	mov	r2, r5
    7de8:	4902      	ldr	r1, [pc, #8]	; (7df4 <emit_write_bytecode_byte_uint+0x18>)
    7dea:	4620      	mov	r0, r4
    7dec:	f7ff ff7a 	bl	7ce4 <emit_write_uint>
}
    7df0:	bd38      	pop	{r3, r4, r5, pc}
    7df2:	bf00      	nop
    7df4:	00007d8d 	.word	0x00007d8d

00007df8 <emit_write_bytecode_byte_qstr>:
    }
    emit_write_bytecode_byte_uint(emit, b, n);
}
#endif

STATIC void emit_write_bytecode_byte_qstr(emit_t* emit, byte b, qstr qst) {
    7df8:	b508      	push	{r3, lr}
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    c[0] = b;
    c[1] = qst;
    c[2] = qst >> 8;
    #else
    emit_write_bytecode_byte_uint(emit, b, qst);
    7dfa:	f7ff ffef 	bl	7ddc <emit_write_bytecode_byte_uint>
    #endif
}
    7dfe:	bd08      	pop	{r3, pc}

00007e00 <mp_emit_bc_delete_fast>:
void mp_emit_bc_store_subscr(emit_t *emit) {
    emit_bc_pre(emit, -3);
    emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
}

void mp_emit_bc_delete_fast(emit_t *emit, qstr qst, mp_uint_t local_num) {
    7e00:	b508      	push	{r3, lr}
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_FAST, local_num);
    7e02:	2128      	movs	r1, #40	; 0x28
    7e04:	f7ff ffea 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    7e08:	bd08      	pop	{r3, pc}

00007e0a <mp_emit_bc_delete_deref>:

void mp_emit_bc_delete_deref(emit_t *emit, qstr qst, mp_uint_t local_num) {
    7e0a:	b508      	push	{r3, lr}
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_DEREF, local_num);
    7e0c:	2129      	movs	r1, #41	; 0x29
    7e0e:	f7ff ffe5 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    7e12:	bd08      	pop	{r3, pc}

00007e14 <emit_write_bytecode_byte_int>:
STATIC void emit_write_bytecode_byte_int(emit_t *emit, byte b1, mp_int_t num) {
    7e14:	b570      	push	{r4, r5, r6, lr}
    7e16:	b082      	sub	sp, #8
    7e18:	4606      	mov	r6, r0
    7e1a:	4615      	mov	r5, r2
    emit_write_bytecode_byte(emit, b1);
    7e1c:	f7ff ffd6 	bl	7dcc <emit_write_bytecode_byte>
    byte *p = buf + sizeof(buf);
    7e20:	f10d 0305 	add.w	r3, sp, #5
    7e24:	e000      	b.n	7e28 <emit_write_bytecode_byte_int+0x14>
        *--p = num & 0x7f;
    7e26:	4623      	mov	r3, r4
    7e28:	1e5c      	subs	r4, r3, #1
    7e2a:	f005 027f 	and.w	r2, r5, #127	; 0x7f
    7e2e:	f803 2c01 	strb.w	r2, [r3, #-1]
        num >>= 7;
    7e32:	11ed      	asrs	r5, r5, #7
    } while (num != 0 && num != -1);
    7e34:	1c69      	adds	r1, r5, #1
    7e36:	2901      	cmp	r1, #1
    7e38:	d8f5      	bhi.n	7e26 <emit_write_bytecode_byte_int+0x12>
    if (num == -1 && (*p & 0x40) == 0) {
    7e3a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    7e3e:	d00e      	beq.n	7e5e <emit_write_bytecode_byte_int+0x4a>
    } else if (num == 0 && (*p & 0x40) != 0) {
    7e40:	b935      	cbnz	r5, 7e50 <emit_write_bytecode_byte_int+0x3c>
    7e42:	f012 0f40 	tst.w	r2, #64	; 0x40
    7e46:	d003      	beq.n	7e50 <emit_write_bytecode_byte_int+0x3c>
        *--p = 0;
    7e48:	2200      	movs	r2, #0
    7e4a:	f804 2c01 	strb.w	r2, [r4, #-1]
    7e4e:	1e9c      	subs	r4, r3, #2
    byte *c = emit_get_cur_to_write_bytecode(emit, buf + sizeof(buf) - p);
    7e50:	f10d 0105 	add.w	r1, sp, #5
    7e54:	1b09      	subs	r1, r1, r4
    7e56:	4630      	mov	r0, r6
    7e58:	f7ff ff98 	bl	7d8c <emit_get_cur_to_write_bytecode>
    while (p != buf + sizeof(buf) - 1) {
    7e5c:	e00d      	b.n	7e7a <emit_write_bytecode_byte_int+0x66>
    if (num == -1 && (*p & 0x40) == 0) {
    7e5e:	f012 0f40 	tst.w	r2, #64	; 0x40
    7e62:	d1ed      	bne.n	7e40 <emit_write_bytecode_byte_int+0x2c>
        *--p = 0x7f;
    7e64:	227f      	movs	r2, #127	; 0x7f
    7e66:	f804 2c01 	strb.w	r2, [r4, #-1]
    7e6a:	1e9c      	subs	r4, r3, #2
    7e6c:	e7f0      	b.n	7e50 <emit_write_bytecode_byte_int+0x3c>
        *c++ = *p++ | 0x80;
    7e6e:	7823      	ldrb	r3, [r4, #0]
    7e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7e74:	7003      	strb	r3, [r0, #0]
    7e76:	3001      	adds	r0, #1
    7e78:	3401      	adds	r4, #1
    while (p != buf + sizeof(buf) - 1) {
    7e7a:	ab01      	add	r3, sp, #4
    7e7c:	429c      	cmp	r4, r3
    7e7e:	d1f6      	bne.n	7e6e <emit_write_bytecode_byte_int+0x5a>
    *c = *p;
    7e80:	7823      	ldrb	r3, [r4, #0]
    7e82:	7003      	strb	r3, [r0, #0]
}
    7e84:	b002      	add	sp, #8
    7e86:	bd70      	pop	{r4, r5, r6, pc}

00007e88 <emit_write_bytecode_byte_signed_label>:
STATIC void emit_write_bytecode_byte_signed_label(emit_t *emit, byte b1, mp_uint_t label) {
    7e88:	b538      	push	{r3, r4, r5, lr}
    7e8a:	460d      	mov	r5, r1
    if (emit->pass < MP_PASS_EMIT) {
    7e8c:	7943      	ldrb	r3, [r0, #5]
    7e8e:	2b03      	cmp	r3, #3
    7e90:	d90f      	bls.n	7eb2 <emit_write_bytecode_byte_signed_label+0x2a>
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3 + 0x8000;
    7e92:	69c3      	ldr	r3, [r0, #28]
    7e94:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    7e98:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7e9a:	1ae4      	subs	r4, r4, r3
    7e9c:	f504 44ff 	add.w	r4, r4, #32640	; 0x7f80
    7ea0:	347d      	adds	r4, #125	; 0x7d
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    7ea2:	2103      	movs	r1, #3
    7ea4:	f7ff ff72 	bl	7d8c <emit_get_cur_to_write_bytecode>
    c[0] = b1;
    7ea8:	7005      	strb	r5, [r0, #0]
    c[1] = bytecode_offset;
    7eaa:	7044      	strb	r4, [r0, #1]
    c[2] = bytecode_offset >> 8;
    7eac:	1224      	asrs	r4, r4, #8
    7eae:	7084      	strb	r4, [r0, #2]
}
    7eb0:	bd38      	pop	{r3, r4, r5, pc}
        bytecode_offset = 0;
    7eb2:	2400      	movs	r4, #0
    7eb4:	e7f5      	b.n	7ea2 <emit_write_bytecode_byte_signed_label+0x1a>

00007eb6 <emit_write_bytecode_byte_unsigned_label>:
STATIC void emit_write_bytecode_byte_unsigned_label(emit_t *emit, byte b1, mp_uint_t label) {
    7eb6:	b538      	push	{r3, r4, r5, lr}
    7eb8:	460d      	mov	r5, r1
    if (emit->pass < MP_PASS_EMIT) {
    7eba:	7943      	ldrb	r3, [r0, #5]
    7ebc:	2b03      	cmp	r3, #3
    7ebe:	d90d      	bls.n	7edc <emit_write_bytecode_byte_unsigned_label+0x26>
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3;
    7ec0:	69c3      	ldr	r3, [r0, #28]
    7ec2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    7ec6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7ec8:	1ae4      	subs	r4, r4, r3
    7eca:	3c03      	subs	r4, #3
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    7ecc:	2103      	movs	r1, #3
    7ece:	f7ff ff5d 	bl	7d8c <emit_get_cur_to_write_bytecode>
    c[0] = b1;
    7ed2:	7005      	strb	r5, [r0, #0]
    c[1] = bytecode_offset;
    7ed4:	7044      	strb	r4, [r0, #1]
    c[2] = bytecode_offset >> 8;
    7ed6:	0a24      	lsrs	r4, r4, #8
    7ed8:	7084      	strb	r4, [r0, #2]
}
    7eda:	bd38      	pop	{r3, r4, r5, pc}
        bytecode_offset = 0;
    7edc:	2400      	movs	r4, #0
    7ede:	e7f5      	b.n	7ecc <emit_write_bytecode_byte_unsigned_label+0x16>

00007ee0 <emit_write_bytecode_byte_byte>:
STATIC void emit_write_bytecode_byte_byte(emit_t* emit, byte b1, byte b2) {
    7ee0:	b538      	push	{r3, r4, r5, lr}
    7ee2:	460d      	mov	r5, r1
    7ee4:	4614      	mov	r4, r2
    byte *c = emit_get_cur_to_write_bytecode(emit, 2);
    7ee6:	2102      	movs	r1, #2
    7ee8:	f7ff ff50 	bl	7d8c <emit_get_cur_to_write_bytecode>
    c[0] = b1;
    7eec:	7005      	strb	r5, [r0, #0]
    c[1] = b2;
    7eee:	7044      	strb	r4, [r0, #1]
}
    7ef0:	bd38      	pop	{r3, r4, r5, pc}
	...

00007ef4 <emit_write_bytecode_byte_obj>:
STATIC void emit_write_bytecode_byte_obj(emit_t *emit, byte b, mp_obj_t obj) {
    7ef4:	b538      	push	{r3, r4, r5, lr}
    7ef6:	4604      	mov	r4, r0
    7ef8:	4615      	mov	r5, r2
    emit_write_bytecode_byte(emit, b);
    7efa:	f7ff ff67 	bl	7dcc <emit_write_bytecode_byte>
    emit->bytecode_offset = (size_t)MP_ALIGN(emit->bytecode_offset, sizeof(mp_obj_t));
    7efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7f00:	3303      	adds	r3, #3
    7f02:	f023 0303 	bic.w	r3, r3, #3
    7f06:	62a3      	str	r3, [r4, #40]	; 0x28
    mp_obj_t *c = (mp_obj_t*)emit_get_cur_to_write_bytecode(emit, sizeof(mp_obj_t));
    7f08:	2104      	movs	r1, #4
    7f0a:	4620      	mov	r0, r4
    7f0c:	f7ff ff3e 	bl	7d8c <emit_get_cur_to_write_bytecode>
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    7f10:	1cc3      	adds	r3, r0, #3
    7f12:	f023 0303 	bic.w	r3, r3, #3
    7f16:	4283      	cmp	r3, r0
    7f18:	d101      	bne.n	7f1e <emit_write_bytecode_byte_obj+0x2a>
    *c = obj;
    7f1a:	6005      	str	r5, [r0, #0]
}
    7f1c:	bd38      	pop	{r3, r4, r5, pc}
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    7f1e:	4b03      	ldr	r3, [pc, #12]	; (7f2c <emit_write_bytecode_byte_obj+0x38>)
    7f20:	4a03      	ldr	r2, [pc, #12]	; (7f30 <emit_write_bytecode_byte_obj+0x3c>)
    7f22:	f44f 7182 	mov.w	r1, #260	; 0x104
    7f26:	4803      	ldr	r0, [pc, #12]	; (7f34 <emit_write_bytecode_byte_obj+0x40>)
    7f28:	f010 fb18 	bl	1855c <__assert_func>
    7f2c:	00025234 	.word	0x00025234
    7f30:	000250d4 	.word	0x000250d4
    7f34:	00025220 	.word	0x00025220

00007f38 <emit_write_bytecode_byte_raw_code>:
STATIC void emit_write_bytecode_byte_raw_code(emit_t *emit, byte b, mp_raw_code_t *rc) {
    7f38:	b538      	push	{r3, r4, r5, lr}
    7f3a:	4604      	mov	r4, r0
    7f3c:	4615      	mov	r5, r2
    emit_write_bytecode_byte(emit, b);
    7f3e:	f7ff ff45 	bl	7dcc <emit_write_bytecode_byte>
    emit->bytecode_offset = (size_t)MP_ALIGN(emit->bytecode_offset, sizeof(void*));
    7f42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7f44:	3303      	adds	r3, #3
    7f46:	f023 0303 	bic.w	r3, r3, #3
    7f4a:	62a3      	str	r3, [r4, #40]	; 0x28
    void **c = (void**)emit_get_cur_to_write_bytecode(emit, sizeof(void*));
    7f4c:	2104      	movs	r1, #4
    7f4e:	4620      	mov	r0, r4
    7f50:	f7ff ff1c 	bl	7d8c <emit_get_cur_to_write_bytecode>
    assert(c == MP_ALIGN(c, sizeof(void*)));
    7f54:	1cc3      	adds	r3, r0, #3
    7f56:	f023 0303 	bic.w	r3, r3, #3
    7f5a:	4283      	cmp	r3, r0
    7f5c:	d101      	bne.n	7f62 <emit_write_bytecode_byte_raw_code+0x2a>
    *c = rc;
    7f5e:	6005      	str	r5, [r0, #0]
}
    7f60:	bd38      	pop	{r3, r4, r5, pc}
    assert(c == MP_ALIGN(c, sizeof(void*)));
    7f62:	4b03      	ldr	r3, [pc, #12]	; (7f70 <emit_write_bytecode_byte_raw_code+0x38>)
    7f64:	4a03      	ldr	r2, [pc, #12]	; (7f74 <emit_write_bytecode_byte_raw_code+0x3c>)
    7f66:	f44f 718a 	mov.w	r1, #276	; 0x114
    7f6a:	4803      	ldr	r0, [pc, #12]	; (7f78 <emit_write_bytecode_byte_raw_code+0x40>)
    7f6c:	f010 faf6 	bl	1855c <__assert_func>
    7f70:	00025258 	.word	0x00025258
    7f74:	000250f4 	.word	0x000250f4
    7f78:	00025220 	.word	0x00025220

00007f7c <emit_bc_new>:
emit_t *emit_bc_new(void) {
    7f7c:	b508      	push	{r3, lr}
    emit_t *emit = m_new0(emit_t, 1);
    7f7e:	2038      	movs	r0, #56	; 0x38
    7f80:	f7f8 fcaf 	bl	8e2 <m_malloc0>
}
    7f84:	bd08      	pop	{r3, pc}

00007f86 <emit_bc_set_max_num_labels>:
void emit_bc_set_max_num_labels(emit_t *emit, mp_uint_t max_num_labels) {
    7f86:	b510      	push	{r4, lr}
    7f88:	4604      	mov	r4, r0
    emit->max_num_labels = max_num_labels;
    7f8a:	6181      	str	r1, [r0, #24]
    emit->label_offsets = m_new(mp_uint_t, emit->max_num_labels);
    7f8c:	0088      	lsls	r0, r1, #2
    7f8e:	f7f8 fc95 	bl	8bc <m_malloc>
    7f92:	61e0      	str	r0, [r4, #28]
}
    7f94:	bd10      	pop	{r4, pc}

00007f96 <emit_bc_free>:
void emit_bc_free(emit_t *emit) {
    7f96:	b510      	push	{r4, lr}
    7f98:	4604      	mov	r4, r0
    m_del(mp_uint_t, emit->label_offsets, emit->max_num_labels);
    7f9a:	69c0      	ldr	r0, [r0, #28]
    7f9c:	f7f8 fcb7 	bl	90e <m_free>
    m_del_obj(emit_t, emit);
    7fa0:	4620      	mov	r0, r4
    7fa2:	f7f8 fcb4 	bl	90e <m_free>
}
    7fa6:	bd10      	pop	{r4, pc}

00007fa8 <mp_emit_bc_start_pass>:
void mp_emit_bc_start_pass(emit_t *emit, pass_kind_t pass, scope_t *scope) {
    7fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7faa:	4606      	mov	r6, r0
    7fac:	460f      	mov	r7, r1
    7fae:	4614      	mov	r4, r2
    emit->pass = pass;
    7fb0:	7141      	strb	r1, [r0, #5]
    emit->stack_size = 0;
    7fb2:	2300      	movs	r3, #0
    7fb4:	6083      	str	r3, [r0, #8]
    emit->last_emit_was_return_value = false;
    7fb6:	7183      	strb	r3, [r0, #6]
    emit->scope = scope;
    7fb8:	60c2      	str	r2, [r0, #12]
    emit->last_source_line_offset = 0;
    7fba:	6103      	str	r3, [r0, #16]
    emit->last_source_line = 1;
    7fbc:	2301      	movs	r3, #1
    7fbe:	6143      	str	r3, [r0, #20]
    if (pass < MP_PASS_EMIT) {
    7fc0:	2903      	cmp	r1, #3
    7fc2:	d932      	bls.n	802a <mp_emit_bc_start_pass+0x82>
    emit->bytecode_offset = 0;
    7fc4:	2300      	movs	r3, #0
    7fc6:	62b3      	str	r3, [r6, #40]	; 0x28
    emit->code_info_offset = 0;
    7fc8:	6233      	str	r3, [r6, #32]
        mp_uint_t n_state = scope->num_locals + scope->stack_size;
    7fca:	8c21      	ldrh	r1, [r4, #32]
    7fcc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
        if (n_state == 0) {
    7fce:	18c9      	adds	r1, r1, r3
    7fd0:	d100      	bne.n	7fd4 <mp_emit_bc_start_pass+0x2c>
            n_state = 1;
    7fd2:	2101      	movs	r1, #1
        emit_write_code_info_uint(emit, n_state);
    7fd4:	4630      	mov	r0, r6
    7fd6:	f7ff fea3 	bl	7d20 <emit_write_code_info_uint>
        emit_write_code_info_uint(emit, scope->exc_stack_size);
    7fda:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7fdc:	4630      	mov	r0, r6
    7fde:	f7ff fe9f 	bl	7d20 <emit_write_code_info_uint>
    emit_write_code_info_byte(emit, emit->scope->scope_flags);
    7fe2:	68f3      	ldr	r3, [r6, #12]
    7fe4:	7e19      	ldrb	r1, [r3, #24]
    7fe6:	4630      	mov	r0, r6
    7fe8:	f7ff fec8 	bl	7d7c <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_pos_args);
    7fec:	68f3      	ldr	r3, [r6, #12]
    7fee:	7e99      	ldrb	r1, [r3, #26]
    7ff0:	4630      	mov	r0, r6
    7ff2:	f7ff fec3 	bl	7d7c <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_kwonly_args);
    7ff6:	68f3      	ldr	r3, [r6, #12]
    7ff8:	7f19      	ldrb	r1, [r3, #28]
    7ffa:	4630      	mov	r0, r6
    7ffc:	f7ff febe 	bl	7d7c <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_def_pos_args);
    8000:	68f3      	ldr	r3, [r6, #12]
    8002:	7f99      	ldrb	r1, [r3, #30]
    8004:	4630      	mov	r0, r6
    8006:	f7ff feb9 	bl	7d7c <emit_write_code_info_byte>
    if (pass == MP_PASS_EMIT) {
    800a:	2f04      	cmp	r7, #4
    800c:	d015      	beq.n	803a <mp_emit_bc_start_pass+0x92>
        emit_get_cur_to_write_code_info(emit, 2);
    800e:	2102      	movs	r1, #2
    8010:	4630      	mov	r0, r6
    8012:	f7ff fe95 	bl	7d40 <emit_get_cur_to_write_code_info>
    emit_write_code_info_qstr(emit, scope->simple_name);
    8016:	8a61      	ldrh	r1, [r4, #18]
    8018:	4630      	mov	r0, r6
    801a:	f7ff fe89 	bl	7d30 <emit_write_code_info_qstr>
    emit_write_code_info_qstr(emit, scope->source_file);
    801e:	8a21      	ldrh	r1, [r4, #16]
    8020:	4630      	mov	r0, r6
    8022:	f7ff fe85 	bl	7d30 <emit_write_code_info_qstr>
    for (int i = 0; i < scope->id_info_len; i++) {
    8026:	2500      	movs	r5, #0
    8028:	e016      	b.n	8058 <mp_emit_bc_start_pass+0xb0>
        memset(emit->label_offsets, -1, emit->max_num_labels * sizeof(mp_uint_t));
    802a:	6982      	ldr	r2, [r0, #24]
    802c:	0092      	lsls	r2, r2, #2
    802e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8032:	69c0      	ldr	r0, [r0, #28]
    8034:	f013 fc22 	bl	1b87c <memset>
    8038:	e7c4      	b.n	7fc4 <mp_emit_bc_start_pass+0x1c>
        emit_write_code_info_uint(emit, emit->code_info_size - emit->code_info_offset);
    803a:	6a71      	ldr	r1, [r6, #36]	; 0x24
    803c:	6a33      	ldr	r3, [r6, #32]
    803e:	1ac9      	subs	r1, r1, r3
    8040:	4630      	mov	r0, r6
    8042:	f7ff fe6d 	bl	7d20 <emit_write_code_info_uint>
    8046:	e7e6      	b.n	8016 <mp_emit_bc_start_pass+0x6e>
            assert(id->local_num < 255);
    8048:	4b20      	ldr	r3, [pc, #128]	; (80cc <mp_emit_bc_start_pass+0x124>)
    804a:	4a21      	ldr	r2, [pc, #132]	; (80d0 <mp_emit_bc_start_pass+0x128>)
    804c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    8050:	4820      	ldr	r0, [pc, #128]	; (80d4 <mp_emit_bc_start_pass+0x12c>)
    8052:	f010 fa83 	bl	1855c <__assert_func>
    for (int i = 0; i < scope->id_info_len; i++) {
    8056:	3501      	adds	r5, #1
    8058:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    805a:	42ab      	cmp	r3, r5
    805c:	dd0e      	ble.n	807c <mp_emit_bc_start_pass+0xd4>
        id_info_t *id = &scope->id_info[i];
    805e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8060:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
        if (id->kind == ID_INFO_KIND_CELL) {
    8064:	f813 3035 	ldrb.w	r3, [r3, r5, lsl #3]
    8068:	2b03      	cmp	r3, #3
    806a:	d1f4      	bne.n	8056 <mp_emit_bc_start_pass+0xae>
            assert(id->local_num < 255);
    806c:	8851      	ldrh	r1, [r2, #2]
    806e:	29fe      	cmp	r1, #254	; 0xfe
    8070:	d8ea      	bhi.n	8048 <mp_emit_bc_start_pass+0xa0>
            emit_write_bytecode_byte(emit, id->local_num); // write the local which should be converted to a cell
    8072:	b2c9      	uxtb	r1, r1
    8074:	4630      	mov	r0, r6
    8076:	f7ff fea9 	bl	7dcc <emit_write_bytecode_byte>
    807a:	e7ec      	b.n	8056 <mp_emit_bc_start_pass+0xae>
    emit_write_bytecode_byte(emit, 255); // end of list sentinel
    807c:	21ff      	movs	r1, #255	; 0xff
    807e:	4630      	mov	r0, r6
    8080:	f7ff fea4 	bl	7dcc <emit_write_bytecode_byte>
    if (pass == MP_PASS_EMIT) {
    8084:	2f04      	cmp	r7, #4
    8086:	d01f      	beq.n	80c8 <mp_emit_bc_start_pass+0x120>
}
    8088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (int j = 0; j < scope->id_info_len; ++j) {
    808a:	3201      	adds	r2, #1
    808c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    808e:	4293      	cmp	r3, r2
    8090:	dd0b      	ble.n	80aa <mp_emit_bc_start_pass+0x102>
                id_info_t *id = &scope->id_info[j];
    8092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
                if ((id->flags & ID_FLAG_IS_PARAM) && id->local_num == i) {
    8098:	7859      	ldrb	r1, [r3, #1]
    809a:	f011 0f01 	tst.w	r1, #1
    809e:	d0f4      	beq.n	808a <mp_emit_bc_start_pass+0xe2>
    80a0:	8859      	ldrh	r1, [r3, #2]
    80a2:	4281      	cmp	r1, r0
    80a4:	d1f1      	bne.n	808a <mp_emit_bc_start_pass+0xe2>
                    qst = id->qst;
    80a6:	685b      	ldr	r3, [r3, #4]
                    break;
    80a8:	e000      	b.n	80ac <mp_emit_bc_start_pass+0x104>
            qstr qst = MP_QSTR__star_;
    80aa:	2327      	movs	r3, #39	; 0x27
            emit->const_table[i] = (mp_uint_t)MP_OBJ_NEW_QSTR(qst);
    80ac:	009b      	lsls	r3, r3, #2
    80ae:	6b72      	ldr	r2, [r6, #52]	; 0x34
    80b0:	f043 0302 	orr.w	r3, r3, #2
    80b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    80b8:	3001      	adds	r0, #1
    80ba:	8b63      	ldrh	r3, [r4, #26]
    80bc:	8ba2      	ldrh	r2, [r4, #28]
    80be:	4413      	add	r3, r2
    80c0:	4283      	cmp	r3, r0
    80c2:	dde1      	ble.n	8088 <mp_emit_bc_start_pass+0xe0>
            for (int j = 0; j < scope->id_info_len; ++j) {
    80c4:	2200      	movs	r2, #0
    80c6:	e7e1      	b.n	808c <mp_emit_bc_start_pass+0xe4>
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    80c8:	2000      	movs	r0, #0
    80ca:	e7f6      	b.n	80ba <mp_emit_bc_start_pass+0x112>
    80cc:	0002539c 	.word	0x0002539c
    80d0:	00025118 	.word	0x00025118
    80d4:	00025220 	.word	0x00025220

000080d8 <mp_emit_bc_end_pass>:
    if (emit->pass == MP_PASS_SCOPE) {
    80d8:	7943      	ldrb	r3, [r0, #5]
    80da:	2b01      	cmp	r3, #1
    80dc:	d030      	beq.n	8140 <mp_emit_bc_end_pass+0x68>
void mp_emit_bc_end_pass(emit_t *emit) {
    80de:	b510      	push	{r4, lr}
    80e0:	4604      	mov	r4, r0
    assert(emit->stack_size == 0);
    80e2:	6883      	ldr	r3, [r0, #8]
    80e4:	b943      	cbnz	r3, 80f8 <mp_emit_bc_end_pass+0x20>
    emit_write_code_info_byte(emit, 0); // end of line number info
    80e6:	2100      	movs	r1, #0
    80e8:	f7ff fe48 	bl	7d7c <emit_write_code_info_byte>
    if (emit->pass == MP_PASS_CODE_SIZE) {
    80ec:	7963      	ldrb	r3, [r4, #5]
    80ee:	2b03      	cmp	r3, #3
    80f0:	d009      	beq.n	8106 <mp_emit_bc_end_pass+0x2e>
    } else if (emit->pass == MP_PASS_EMIT) {
    80f2:	2b04      	cmp	r3, #4
    80f4:	d01c      	beq.n	8130 <mp_emit_bc_end_pass+0x58>
}
    80f6:	bd10      	pop	{r4, pc}
    assert(emit->stack_size == 0);
    80f8:	4b12      	ldr	r3, [pc, #72]	; (8144 <mp_emit_bc_end_pass+0x6c>)
    80fa:	4a13      	ldr	r2, [pc, #76]	; (8148 <mp_emit_bc_end_pass+0x70>)
    80fc:	f240 1199 	movw	r1, #409	; 0x199
    8100:	4812      	ldr	r0, [pc, #72]	; (814c <mp_emit_bc_end_pass+0x74>)
    8102:	f010 fa2b 	bl	1855c <__assert_func>
        emit->code_info_offset = (size_t)MP_ALIGN(emit->code_info_offset, sizeof(mp_uint_t));
    8106:	6a23      	ldr	r3, [r4, #32]
    8108:	3303      	adds	r3, #3
    810a:	f023 0303 	bic.w	r3, r3, #3
    810e:	6223      	str	r3, [r4, #32]
        emit->code_info_size = emit->code_info_offset;
    8110:	6263      	str	r3, [r4, #36]	; 0x24
        emit->bytecode_size = emit->bytecode_offset;
    8112:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8114:	62e0      	str	r0, [r4, #44]	; 0x2c
        emit->code_base = m_new0(byte, emit->code_info_size + emit->bytecode_size);
    8116:	4418      	add	r0, r3
    8118:	f7f8 fbe3 	bl	8e2 <m_malloc0>
    811c:	6320      	str	r0, [r4, #48]	; 0x30
        emit->const_table = m_new0(mp_uint_t,
    811e:	68e3      	ldr	r3, [r4, #12]
    8120:	8b58      	ldrh	r0, [r3, #26]
    8122:	8b9b      	ldrh	r3, [r3, #28]
    8124:	4418      	add	r0, r3
    8126:	0080      	lsls	r0, r0, #2
    8128:	f7f8 fbdb 	bl	8e2 <m_malloc0>
    812c:	6360      	str	r0, [r4, #52]	; 0x34
    812e:	e7e2      	b.n	80f6 <mp_emit_bc_end_pass+0x1e>
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    8130:	68e0      	ldr	r0, [r4, #12]
    8132:	7e03      	ldrb	r3, [r0, #24]
    8134:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8136:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8138:	6940      	ldr	r0, [r0, #20]
    813a:	f001 f8df 	bl	92fc <mp_emit_glue_assign_bytecode>
    813e:	e7da      	b.n	80f6 <mp_emit_bc_end_pass+0x1e>
    8140:	4770      	bx	lr
    8142:	bf00      	nop
    8144:	000252a0 	.word	0x000252a0
    8148:	00025130 	.word	0x00025130
    814c:	00025220 	.word	0x00025220

00008150 <mp_emit_bc_last_emit_was_return_value>:
    return emit->last_emit_was_return_value;
    8150:	7980      	ldrb	r0, [r0, #6]
}
    8152:	3000      	adds	r0, #0
    8154:	bf18      	it	ne
    8156:	2001      	movne	r0, #1
    8158:	4770      	bx	lr
	...

0000815c <mp_emit_bc_adjust_stack_size>:
void mp_emit_bc_adjust_stack_size(emit_t *emit, mp_int_t delta) {
    815c:	b508      	push	{r3, lr}
    if (emit->pass == MP_PASS_SCOPE) {
    815e:	7943      	ldrb	r3, [r0, #5]
    8160:	2b01      	cmp	r3, #1
    8162:	d00a      	beq.n	817a <mp_emit_bc_adjust_stack_size+0x1e>
    assert((mp_int_t)emit->stack_size + delta >= 0);
    8164:	6883      	ldr	r3, [r0, #8]
    8166:	1859      	adds	r1, r3, r1
    8168:	d408      	bmi.n	817c <mp_emit_bc_adjust_stack_size+0x20>
    emit->stack_size += delta;
    816a:	6081      	str	r1, [r0, #8]
    if (emit->stack_size > emit->scope->stack_size) {
    816c:	68c3      	ldr	r3, [r0, #12]
    816e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    8170:	4291      	cmp	r1, r2
    8172:	dd00      	ble.n	8176 <mp_emit_bc_adjust_stack_size+0x1a>
        emit->scope->stack_size = emit->stack_size;
    8174:	8459      	strh	r1, [r3, #34]	; 0x22
    emit->last_emit_was_return_value = false;
    8176:	2300      	movs	r3, #0
    8178:	7183      	strb	r3, [r0, #6]
}
    817a:	bd08      	pop	{r3, pc}
    assert((mp_int_t)emit->stack_size + delta >= 0);
    817c:	4b03      	ldr	r3, [pc, #12]	; (818c <mp_emit_bc_adjust_stack_size+0x30>)
    817e:	4a04      	ldr	r2, [pc, #16]	; (8190 <mp_emit_bc_adjust_stack_size+0x34>)
    8180:	f240 11cb 	movw	r1, #459	; 0x1cb
    8184:	4803      	ldr	r0, [pc, #12]	; (8194 <mp_emit_bc_adjust_stack_size+0x38>)
    8186:	f010 f9e9 	bl	1855c <__assert_func>
    818a:	bf00      	nop
    818c:	00025278 	.word	0x00025278
    8190:	00025144 	.word	0x00025144
    8194:	00025220 	.word	0x00025220

00008198 <mp_emit_bc_load_fast>:
void mp_emit_bc_load_fast(emit_t *emit, qstr qst, mp_uint_t local_num) {
    8198:	b538      	push	{r3, r4, r5, lr}
    819a:	4605      	mov	r5, r0
    819c:	4614      	mov	r4, r2
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    819e:	2101      	movs	r1, #1
    81a0:	f7ff ffdc 	bl	815c <mp_emit_bc_adjust_stack_size>
    if (local_num <= 15) {
    81a4:	2c0f      	cmp	r4, #15
    81a6:	d905      	bls.n	81b4 <mp_emit_bc_load_fast+0x1c>
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N, local_num);
    81a8:	4622      	mov	r2, r4
    81aa:	2119      	movs	r1, #25
    81ac:	4628      	mov	r0, r5
    81ae:	f7ff fe15 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    81b2:	bd38      	pop	{r3, r4, r5, pc}
        emit_write_bytecode_byte(emit, MP_BC_LOAD_FAST_MULTI + local_num);
    81b4:	f1a4 0150 	sub.w	r1, r4, #80	; 0x50
    81b8:	b2c9      	uxtb	r1, r1
    81ba:	4628      	mov	r0, r5
    81bc:	f7ff fe06 	bl	7dcc <emit_write_bytecode_byte>
    81c0:	e7f7      	b.n	81b2 <mp_emit_bc_load_fast+0x1a>

000081c2 <mp_emit_bc_load_deref>:
void mp_emit_bc_load_deref(emit_t *emit, qstr qst, mp_uint_t local_num) {
    81c2:	b538      	push	{r3, r4, r5, lr}
    81c4:	4604      	mov	r4, r0
    81c6:	4615      	mov	r5, r2
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    81c8:	2101      	movs	r1, #1
    81ca:	f7ff ffc7 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_DEREF, local_num);
    81ce:	462a      	mov	r2, r5
    81d0:	211a      	movs	r1, #26
    81d2:	4620      	mov	r0, r4
    81d4:	f7ff fe02 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    81d8:	bd38      	pop	{r3, r4, r5, pc}

000081da <mp_emit_bc_load_name>:
void mp_emit_bc_load_name(emit_t *emit, qstr qst) {
    81da:	b538      	push	{r3, r4, r5, lr}
    81dc:	4604      	mov	r4, r0
    81de:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    81e0:	2101      	movs	r1, #1
    81e2:	f7ff ffbb 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_NAME, qst);
    81e6:	462a      	mov	r2, r5
    81e8:	211b      	movs	r1, #27
    81ea:	4620      	mov	r0, r4
    81ec:	f7ff fe04 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    81f0:	bd38      	pop	{r3, r4, r5, pc}

000081f2 <mp_emit_bc_load_global>:
void mp_emit_bc_load_global(emit_t *emit, qstr qst) {
    81f2:	b538      	push	{r3, r4, r5, lr}
    81f4:	4604      	mov	r4, r0
    81f6:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    81f8:	2101      	movs	r1, #1
    81fa:	f7ff ffaf 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_GLOBAL, qst);
    81fe:	462a      	mov	r2, r5
    8200:	211c      	movs	r1, #28
    8202:	4620      	mov	r0, r4
    8204:	f7ff fdf8 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    8208:	bd38      	pop	{r3, r4, r5, pc}

0000820a <mp_emit_bc_store_fast>:
void mp_emit_bc_store_fast(emit_t *emit, qstr qst, mp_uint_t local_num) {
    820a:	b538      	push	{r3, r4, r5, lr}
    820c:	4605      	mov	r5, r0
    820e:	4614      	mov	r4, r2
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8214:	f7ff ffa2 	bl	815c <mp_emit_bc_adjust_stack_size>
    if (local_num <= 15) {
    8218:	2c0f      	cmp	r4, #15
    821a:	d905      	bls.n	8228 <mp_emit_bc_store_fast+0x1e>
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N, local_num);
    821c:	4622      	mov	r2, r4
    821e:	2122      	movs	r1, #34	; 0x22
    8220:	4628      	mov	r0, r5
    8222:	f7ff fddb 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    8226:	bd38      	pop	{r3, r4, r5, pc}
        emit_write_bytecode_byte(emit, MP_BC_STORE_FAST_MULTI + local_num);
    8228:	f1a4 0140 	sub.w	r1, r4, #64	; 0x40
    822c:	b2c9      	uxtb	r1, r1
    822e:	4628      	mov	r0, r5
    8230:	f7ff fdcc 	bl	7dcc <emit_write_bytecode_byte>
    8234:	e7f7      	b.n	8226 <mp_emit_bc_store_fast+0x1c>

00008236 <mp_emit_bc_store_deref>:
void mp_emit_bc_store_deref(emit_t *emit, qstr qst, mp_uint_t local_num) {
    8236:	b538      	push	{r3, r4, r5, lr}
    8238:	4604      	mov	r4, r0
    823a:	4615      	mov	r5, r2
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    823c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8240:	f7ff ff8c 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_DEREF, local_num);
    8244:	462a      	mov	r2, r5
    8246:	2123      	movs	r1, #35	; 0x23
    8248:	4620      	mov	r0, r4
    824a:	f7ff fdc7 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    824e:	bd38      	pop	{r3, r4, r5, pc}

00008250 <mp_emit_bc_store_name>:
void mp_emit_bc_store_name(emit_t *emit, qstr qst) {
    8250:	b538      	push	{r3, r4, r5, lr}
    8252:	4604      	mov	r4, r0
    8254:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8256:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    825a:	f7ff ff7f 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_NAME, qst);
    825e:	462a      	mov	r2, r5
    8260:	2124      	movs	r1, #36	; 0x24
    8262:	4620      	mov	r0, r4
    8264:	f7ff fdc8 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    8268:	bd38      	pop	{r3, r4, r5, pc}

0000826a <mp_emit_bc_store_global>:
void mp_emit_bc_store_global(emit_t *emit, qstr qst) {
    826a:	b538      	push	{r3, r4, r5, lr}
    826c:	4604      	mov	r4, r0
    826e:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8270:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8274:	f7ff ff72 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_GLOBAL, qst);
    8278:	462a      	mov	r2, r5
    827a:	2125      	movs	r1, #37	; 0x25
    827c:	4620      	mov	r0, r4
    827e:	f7ff fdbb 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    8282:	bd38      	pop	{r3, r4, r5, pc}

00008284 <mp_emit_bc_delete_name>:

void mp_emit_bc_delete_name(emit_t *emit, qstr qst) {
    8284:	b538      	push	{r3, r4, r5, lr}
    8286:	4604      	mov	r4, r0
    8288:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    828a:	2100      	movs	r1, #0
    828c:	f7ff ff66 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_bc_pre(emit, 0);
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_NAME, qst);
    8290:	462a      	mov	r2, r5
    8292:	212a      	movs	r1, #42	; 0x2a
    8294:	4620      	mov	r0, r4
    8296:	f7ff fdaf 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    829a:	bd38      	pop	{r3, r4, r5, pc}

0000829c <mp_emit_bc_delete_global>:

void mp_emit_bc_delete_global(emit_t *emit, qstr qst) {
    829c:	b538      	push	{r3, r4, r5, lr}
    829e:	4604      	mov	r4, r0
    82a0:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    82a2:	2100      	movs	r1, #0
    82a4:	f7ff ff5a 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_bc_pre(emit, 0);
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_GLOBAL, qst);
    82a8:	462a      	mov	r2, r5
    82aa:	212b      	movs	r1, #43	; 0x2b
    82ac:	4620      	mov	r0, r4
    82ae:	f7ff fda3 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    82b2:	bd38      	pop	{r3, r4, r5, pc}

000082b4 <emit_bc_call_function_method_helper>:
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
        emit_write_bytecode_byte(emit, n_closed_over);
    }
}

STATIC void emit_bc_call_function_method_helper(emit_t *emit, mp_int_t stack_adj, mp_uint_t bytecode_base, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    82b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82b6:	4604      	mov	r4, r0
    82b8:	4617      	mov	r7, r2
    82ba:	461d      	mov	r5, r3
    82bc:	9e06      	ldr	r6, [sp, #24]
    82be:	9b07      	ldr	r3, [sp, #28]
    if (star_flags) {
    82c0:	b95b      	cbnz	r3, 82da <emit_bc_call_function_method_helper+0x26>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    } else {
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
    82c2:	1b49      	subs	r1, r1, r5
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    82c4:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    82c8:	f7ff ff48 	bl	815c <mp_emit_bc_adjust_stack_size>
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    82cc:	ea45 2206 	orr.w	r2, r5, r6, lsl #8
    82d0:	b2f9      	uxtb	r1, r7
    82d2:	4620      	mov	r0, r4
    82d4:	f7ff fd82 	bl	7ddc <emit_write_bytecode_byte_uint>
    }
}
    82d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
    82da:	1b49      	subs	r1, r1, r5
    82dc:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    82e0:	3902      	subs	r1, #2
    82e2:	f7ff ff3b 	bl	815c <mp_emit_bc_adjust_stack_size>
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    82e6:	1c79      	adds	r1, r7, #1
    82e8:	ea45 2206 	orr.w	r2, r5, r6, lsl #8
    82ec:	b2c9      	uxtb	r1, r1
    82ee:	4620      	mov	r0, r4
    82f0:	f7ff fd74 	bl	7ddc <emit_write_bytecode_byte_uint>
    82f4:	e7f0      	b.n	82d8 <emit_bc_call_function_method_helper+0x24>

000082f6 <mp_emit_bc_set_source_line>:
}
    82f6:	4770      	bx	lr

000082f8 <mp_emit_bc_label_assign>:
void mp_emit_bc_label_assign(emit_t *emit, mp_uint_t l) {
    82f8:	b538      	push	{r3, r4, r5, lr}
    82fa:	4604      	mov	r4, r0
    82fc:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    82fe:	2100      	movs	r1, #0
    8300:	f7ff ff2c 	bl	815c <mp_emit_bc_adjust_stack_size>
    if (emit->pass == MP_PASS_SCOPE) {
    8304:	7963      	ldrb	r3, [r4, #5]
    8306:	2b01      	cmp	r3, #1
    8308:	d022      	beq.n	8350 <mp_emit_bc_label_assign+0x58>
    assert(l < emit->max_num_labels);
    830a:	69a2      	ldr	r2, [r4, #24]
    830c:	42aa      	cmp	r2, r5
    830e:	d90b      	bls.n	8328 <mp_emit_bc_label_assign+0x30>
    if (emit->pass < MP_PASS_EMIT) {
    8310:	2b03      	cmp	r3, #3
    8312:	d817      	bhi.n	8344 <mp_emit_bc_label_assign+0x4c>
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    8314:	69e3      	ldr	r3, [r4, #28]
    8316:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    831a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    831e:	d10a      	bne.n	8336 <mp_emit_bc_label_assign+0x3e>
        emit->label_offsets[l] = emit->bytecode_offset;
    8320:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8322:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    8326:	e013      	b.n	8350 <mp_emit_bc_label_assign+0x58>
    assert(l < emit->max_num_labels);
    8328:	4b0d      	ldr	r3, [pc, #52]	; (8360 <mp_emit_bc_label_assign+0x68>)
    832a:	4a0e      	ldr	r2, [pc, #56]	; (8364 <mp_emit_bc_label_assign+0x6c>)
    832c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    8330:	480d      	ldr	r0, [pc, #52]	; (8368 <mp_emit_bc_label_assign+0x70>)
    8332:	f010 f913 	bl	1855c <__assert_func>
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    8336:	4b0d      	ldr	r3, [pc, #52]	; (836c <mp_emit_bc_label_assign+0x74>)
    8338:	4a0a      	ldr	r2, [pc, #40]	; (8364 <mp_emit_bc_label_assign+0x6c>)
    833a:	f240 11f3 	movw	r1, #499	; 0x1f3
    833e:	480a      	ldr	r0, [pc, #40]	; (8368 <mp_emit_bc_label_assign+0x70>)
    8340:	f010 f90c 	bl	1855c <__assert_func>
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    8344:	69e3      	ldr	r3, [r4, #28]
    8346:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    834a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    834c:	429a      	cmp	r2, r3
    834e:	d100      	bne.n	8352 <mp_emit_bc_label_assign+0x5a>
}
    8350:	bd38      	pop	{r3, r4, r5, pc}
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    8352:	4b07      	ldr	r3, [pc, #28]	; (8370 <mp_emit_bc_label_assign+0x78>)
    8354:	4a03      	ldr	r2, [pc, #12]	; (8364 <mp_emit_bc_label_assign+0x6c>)
    8356:	f240 11f7 	movw	r1, #503	; 0x1f7
    835a:	4803      	ldr	r0, [pc, #12]	; (8368 <mp_emit_bc_label_assign+0x70>)
    835c:	f010 f8fe 	bl	1855c <__assert_func>
    8360:	000252b8 	.word	0x000252b8
    8364:	00025164 	.word	0x00025164
    8368:	00025220 	.word	0x00025220
    836c:	000252d4 	.word	0x000252d4
    8370:	000252fc 	.word	0x000252fc

00008374 <mp_emit_bc_import_name>:
void mp_emit_bc_import_name(emit_t *emit, qstr qst) {
    8374:	b538      	push	{r3, r4, r5, lr}
    8376:	4604      	mov	r4, r0
    8378:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    837a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    837e:	f7ff feed 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME, qst);
    8382:	462a      	mov	r2, r5
    8384:	2168      	movs	r1, #104	; 0x68
    8386:	4620      	mov	r0, r4
    8388:	f7ff fd36 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    838c:	bd38      	pop	{r3, r4, r5, pc}

0000838e <mp_emit_bc_import_from>:
void mp_emit_bc_import_from(emit_t *emit, qstr qst) {
    838e:	b538      	push	{r3, r4, r5, lr}
    8390:	4604      	mov	r4, r0
    8392:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8394:	2101      	movs	r1, #1
    8396:	f7ff fee1 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_FROM, qst);
    839a:	462a      	mov	r2, r5
    839c:	2169      	movs	r1, #105	; 0x69
    839e:	4620      	mov	r0, r4
    83a0:	f7ff fd2a 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    83a4:	bd38      	pop	{r3, r4, r5, pc}

000083a6 <mp_emit_bc_import_star>:
void mp_emit_bc_import_star(emit_t *emit) {
    83a6:	b510      	push	{r4, lr}
    83a8:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    83aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    83ae:	f7ff fed5 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_IMPORT_STAR);
    83b2:	216a      	movs	r1, #106	; 0x6a
    83b4:	4620      	mov	r0, r4
    83b6:	f7ff fd09 	bl	7dcc <emit_write_bytecode_byte>
}
    83ba:	bd10      	pop	{r4, pc}

000083bc <mp_emit_bc_load_const_tok>:
void mp_emit_bc_load_const_tok(emit_t *emit, mp_token_kind_t tok) {
    83bc:	b538      	push	{r3, r4, r5, lr}
    83be:	4605      	mov	r5, r0
    83c0:	460c      	mov	r4, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    83c2:	2101      	movs	r1, #1
    83c4:	f7ff feca 	bl	815c <mp_emit_bc_adjust_stack_size>
    switch (tok) {
    83c8:	2c0e      	cmp	r4, #14
    83ca:	d010      	beq.n	83ee <mp_emit_bc_load_const_tok+0x32>
    83cc:	2c0f      	cmp	r4, #15
    83ce:	d013      	beq.n	83f8 <mp_emit_bc_load_const_tok+0x3c>
    83d0:	2c0d      	cmp	r4, #13
    83d2:	d007      	beq.n	83e4 <mp_emit_bc_load_const_tok+0x28>
            assert(tok == MP_TOKEN_ELLIPSIS);
    83d4:	2c0c      	cmp	r4, #12
    83d6:	d114      	bne.n	8402 <mp_emit_bc_load_const_tok+0x46>
            emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, MP_OBJ_FROM_PTR(&mp_const_ellipsis_obj));
    83d8:	4a0d      	ldr	r2, [pc, #52]	; (8410 <mp_emit_bc_load_const_tok+0x54>)
    83da:	2117      	movs	r1, #23
    83dc:	4628      	mov	r0, r5
    83de:	f7ff fd89 	bl	7ef4 <emit_write_bytecode_byte_obj>
}
    83e2:	e003      	b.n	83ec <mp_emit_bc_load_const_tok+0x30>
        case MP_TOKEN_KW_FALSE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_FALSE); break;
    83e4:	2110      	movs	r1, #16
    83e6:	4628      	mov	r0, r5
    83e8:	f7ff fcf0 	bl	7dcc <emit_write_bytecode_byte>
}
    83ec:	bd38      	pop	{r3, r4, r5, pc}
        case MP_TOKEN_KW_NONE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_NONE); break;
    83ee:	2111      	movs	r1, #17
    83f0:	4628      	mov	r0, r5
    83f2:	f7ff fceb 	bl	7dcc <emit_write_bytecode_byte>
    83f6:	e7f9      	b.n	83ec <mp_emit_bc_load_const_tok+0x30>
        case MP_TOKEN_KW_TRUE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_TRUE); break;
    83f8:	2112      	movs	r1, #18
    83fa:	4628      	mov	r0, r5
    83fc:	f7ff fce6 	bl	7dcc <emit_write_bytecode_byte>
    8400:	e7f4      	b.n	83ec <mp_emit_bc_load_const_tok+0x30>
            assert(tok == MP_TOKEN_ELLIPSIS);
    8402:	4b04      	ldr	r3, [pc, #16]	; (8414 <mp_emit_bc_load_const_tok+0x58>)
    8404:	4a04      	ldr	r2, [pc, #16]	; (8418 <mp_emit_bc_load_const_tok+0x5c>)
    8406:	f240 2111 	movw	r1, #529	; 0x211
    840a:	4804      	ldr	r0, [pc, #16]	; (841c <mp_emit_bc_load_const_tok+0x60>)
    840c:	f010 f8a6 	bl	1855c <__assert_func>
    8410:	00027c90 	.word	0x00027c90
    8414:	0002532c 	.word	0x0002532c
    8418:	0002517c 	.word	0x0002517c
    841c:	00025220 	.word	0x00025220

00008420 <mp_emit_bc_load_const_small_int>:
void mp_emit_bc_load_const_small_int(emit_t *emit, mp_int_t arg) {
    8420:	b538      	push	{r3, r4, r5, lr}
    8422:	4605      	mov	r5, r0
    8424:	460c      	mov	r4, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8426:	2101      	movs	r1, #1
    8428:	f7ff fe98 	bl	815c <mp_emit_bc_adjust_stack_size>
    if (-16 <= arg && arg <= 47) {
    842c:	f104 0310 	add.w	r3, r4, #16
    8430:	2b3f      	cmp	r3, #63	; 0x3f
    8432:	d905      	bls.n	8440 <mp_emit_bc_load_const_small_int+0x20>
        emit_write_bytecode_byte_int(emit, MP_BC_LOAD_CONST_SMALL_INT, arg);
    8434:	4622      	mov	r2, r4
    8436:	2114      	movs	r1, #20
    8438:	4628      	mov	r0, r5
    843a:	f7ff fceb 	bl	7e14 <emit_write_bytecode_byte_int>
}
    843e:	bd38      	pop	{r3, r4, r5, pc}
        emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_SMALL_INT_MULTI + 16 + arg);
    8440:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    8444:	b2c9      	uxtb	r1, r1
    8446:	4628      	mov	r0, r5
    8448:	f7ff fcc0 	bl	7dcc <emit_write_bytecode_byte>
    844c:	e7f7      	b.n	843e <mp_emit_bc_load_const_small_int+0x1e>

0000844e <mp_emit_bc_load_const_str>:
void mp_emit_bc_load_const_str(emit_t *emit, qstr qst) {
    844e:	b538      	push	{r3, r4, r5, lr}
    8450:	4604      	mov	r4, r0
    8452:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8454:	2101      	movs	r1, #1
    8456:	f7ff fe81 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_CONST_STRING, qst);
    845a:	462a      	mov	r2, r5
    845c:	2116      	movs	r1, #22
    845e:	4620      	mov	r0, r4
    8460:	f7ff fcca 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    8464:	bd38      	pop	{r3, r4, r5, pc}

00008466 <mp_emit_bc_load_const_obj>:
void mp_emit_bc_load_const_obj(emit_t *emit, mp_obj_t obj) {
    8466:	b538      	push	{r3, r4, r5, lr}
    8468:	4604      	mov	r4, r0
    846a:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    846c:	2101      	movs	r1, #1
    846e:	f7ff fe75 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, obj);
    8472:	462a      	mov	r2, r5
    8474:	2117      	movs	r1, #23
    8476:	4620      	mov	r0, r4
    8478:	f7ff fd3c 	bl	7ef4 <emit_write_bytecode_byte_obj>
}
    847c:	bd38      	pop	{r3, r4, r5, pc}

0000847e <mp_emit_bc_load_null>:
void mp_emit_bc_load_null(emit_t *emit) {
    847e:	b510      	push	{r4, lr}
    8480:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8482:	2101      	movs	r1, #1
    8484:	f7ff fe6a 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_NULL);
    8488:	2118      	movs	r1, #24
    848a:	4620      	mov	r0, r4
    848c:	f7ff fc9e 	bl	7dcc <emit_write_bytecode_byte>
}
    8490:	bd10      	pop	{r4, pc}

00008492 <mp_emit_bc_load_attr>:
void mp_emit_bc_load_attr(emit_t *emit, qstr qst) {
    8492:	b538      	push	{r3, r4, r5, lr}
    8494:	4604      	mov	r4, r0
    8496:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8498:	2100      	movs	r1, #0
    849a:	f7ff fe5f 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_ATTR, qst);
    849e:	462a      	mov	r2, r5
    84a0:	211d      	movs	r1, #29
    84a2:	4620      	mov	r0, r4
    84a4:	f7ff fca8 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    84a8:	bd38      	pop	{r3, r4, r5, pc}

000084aa <mp_emit_bc_load_method>:
void mp_emit_bc_load_method(emit_t *emit, qstr qst, bool is_super) {
    84aa:	b570      	push	{r4, r5, r6, lr}
    84ac:	4605      	mov	r5, r0
    84ae:	460e      	mov	r6, r1
    84b0:	4614      	mov	r4, r2
    emit_bc_pre(emit, 1 - 2 * is_super);
    84b2:	0051      	lsls	r1, r2, #1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    84b4:	f1c1 0101 	rsb	r1, r1, #1
    84b8:	f7ff fe50 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    84bc:	b92c      	cbnz	r4, 84ca <mp_emit_bc_load_method+0x20>
    84be:	211e      	movs	r1, #30
    84c0:	4632      	mov	r2, r6
    84c2:	4628      	mov	r0, r5
    84c4:	f7ff fc98 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    84c8:	bd70      	pop	{r4, r5, r6, pc}
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    84ca:	211f      	movs	r1, #31
    84cc:	e7f8      	b.n	84c0 <mp_emit_bc_load_method+0x16>

000084ce <mp_emit_bc_load_build_class>:
void mp_emit_bc_load_build_class(emit_t *emit) {
    84ce:	b510      	push	{r4, lr}
    84d0:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    84d2:	2101      	movs	r1, #1
    84d4:	f7ff fe42 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_BUILD_CLASS);
    84d8:	2120      	movs	r1, #32
    84da:	4620      	mov	r0, r4
    84dc:	f7ff fc76 	bl	7dcc <emit_write_bytecode_byte>
}
    84e0:	bd10      	pop	{r4, pc}

000084e2 <mp_emit_bc_load_subscr>:
void mp_emit_bc_load_subscr(emit_t *emit) {
    84e2:	b510      	push	{r4, lr}
    84e4:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    84e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    84ea:	f7ff fe37 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_SUBSCR);
    84ee:	2121      	movs	r1, #33	; 0x21
    84f0:	4620      	mov	r0, r4
    84f2:	f7ff fc6b 	bl	7dcc <emit_write_bytecode_byte>
}
    84f6:	bd10      	pop	{r4, pc}

000084f8 <mp_emit_bc_store_attr>:
void mp_emit_bc_store_attr(emit_t *emit, qstr qst) {
    84f8:	b538      	push	{r3, r4, r5, lr}
    84fa:	4604      	mov	r4, r0
    84fc:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    84fe:	f06f 0101 	mvn.w	r1, #1
    8502:	f7ff fe2b 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    8506:	462a      	mov	r2, r5
    8508:	2126      	movs	r1, #38	; 0x26
    850a:	4620      	mov	r0, r4
    850c:	f7ff fc74 	bl	7df8 <emit_write_bytecode_byte_qstr>
}
    8510:	bd38      	pop	{r3, r4, r5, pc}

00008512 <mp_emit_bc_store_subscr>:
void mp_emit_bc_store_subscr(emit_t *emit) {
    8512:	b510      	push	{r4, lr}
    8514:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8516:	f06f 0102 	mvn.w	r1, #2
    851a:	f7ff fe1f 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    851e:	2127      	movs	r1, #39	; 0x27
    8520:	4620      	mov	r0, r4
    8522:	f7ff fc53 	bl	7dcc <emit_write_bytecode_byte>
}
    8526:	bd10      	pop	{r4, pc}

00008528 <mp_emit_bc_dup_top>:
void mp_emit_bc_dup_top(emit_t *emit) {
    8528:	b510      	push	{r4, lr}
    852a:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    852c:	2101      	movs	r1, #1
    852e:	f7ff fe15 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP);
    8532:	2130      	movs	r1, #48	; 0x30
    8534:	4620      	mov	r0, r4
    8536:	f7ff fc49 	bl	7dcc <emit_write_bytecode_byte>
}
    853a:	bd10      	pop	{r4, pc}

0000853c <mp_emit_bc_dup_top_two>:
void mp_emit_bc_dup_top_two(emit_t *emit) {
    853c:	b510      	push	{r4, lr}
    853e:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8540:	2102      	movs	r1, #2
    8542:	f7ff fe0b 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP_TWO);
    8546:	2131      	movs	r1, #49	; 0x31
    8548:	4620      	mov	r0, r4
    854a:	f7ff fc3f 	bl	7dcc <emit_write_bytecode_byte>
}
    854e:	bd10      	pop	{r4, pc}

00008550 <mp_emit_bc_pop_top>:
void mp_emit_bc_pop_top(emit_t *emit) {
    8550:	b510      	push	{r4, lr}
    8552:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8558:	f7ff fe00 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    855c:	2132      	movs	r1, #50	; 0x32
    855e:	4620      	mov	r0, r4
    8560:	f7ff fc34 	bl	7dcc <emit_write_bytecode_byte>
}
    8564:	bd10      	pop	{r4, pc}

00008566 <mp_emit_bc_rot_two>:
void mp_emit_bc_rot_two(emit_t *emit) {
    8566:	b510      	push	{r4, lr}
    8568:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    856a:	2100      	movs	r1, #0
    856c:	f7ff fdf6 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_ROT_TWO);
    8570:	2133      	movs	r1, #51	; 0x33
    8572:	4620      	mov	r0, r4
    8574:	f7ff fc2a 	bl	7dcc <emit_write_bytecode_byte>
}
    8578:	bd10      	pop	{r4, pc}

0000857a <mp_emit_bc_delete_attr>:
void mp_emit_bc_delete_attr(emit_t *emit, qstr qst) {
    857a:	b538      	push	{r3, r4, r5, lr}
    857c:	4604      	mov	r4, r0
    857e:	460d      	mov	r5, r1
    mp_emit_bc_load_null(emit);
    8580:	f7ff ff7d 	bl	847e <mp_emit_bc_load_null>
    mp_emit_bc_rot_two(emit);
    8584:	4620      	mov	r0, r4
    8586:	f7ff ffee 	bl	8566 <mp_emit_bc_rot_two>
    mp_emit_bc_store_attr(emit, qst);
    858a:	4629      	mov	r1, r5
    858c:	4620      	mov	r0, r4
    858e:	f7ff ffb3 	bl	84f8 <mp_emit_bc_store_attr>
}
    8592:	bd38      	pop	{r3, r4, r5, pc}

00008594 <mp_emit_bc_rot_three>:
void mp_emit_bc_rot_three(emit_t *emit) {
    8594:	b510      	push	{r4, lr}
    8596:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8598:	2100      	movs	r1, #0
    859a:	f7ff fddf 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_ROT_THREE);
    859e:	2134      	movs	r1, #52	; 0x34
    85a0:	4620      	mov	r0, r4
    85a2:	f7ff fc13 	bl	7dcc <emit_write_bytecode_byte>
}
    85a6:	bd10      	pop	{r4, pc}

000085a8 <mp_emit_bc_delete_subscr>:
void mp_emit_bc_delete_subscr(emit_t *emit) {
    85a8:	b510      	push	{r4, lr}
    85aa:	4604      	mov	r4, r0
    mp_emit_bc_load_null(emit);
    85ac:	f7ff ff67 	bl	847e <mp_emit_bc_load_null>
    mp_emit_bc_rot_three(emit);
    85b0:	4620      	mov	r0, r4
    85b2:	f7ff ffef 	bl	8594 <mp_emit_bc_rot_three>
    mp_emit_bc_store_subscr(emit);
    85b6:	4620      	mov	r0, r4
    85b8:	f7ff ffab 	bl	8512 <mp_emit_bc_store_subscr>
}
    85bc:	bd10      	pop	{r4, pc}

000085be <mp_emit_bc_jump>:
void mp_emit_bc_jump(emit_t *emit, mp_uint_t label) {
    85be:	b538      	push	{r3, r4, r5, lr}
    85c0:	4604      	mov	r4, r0
    85c2:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    85c4:	2100      	movs	r1, #0
    85c6:	f7ff fdc9 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label);
    85ca:	462a      	mov	r2, r5
    85cc:	2135      	movs	r1, #53	; 0x35
    85ce:	4620      	mov	r0, r4
    85d0:	f7ff fc5a 	bl	7e88 <emit_write_bytecode_byte_signed_label>
}
    85d4:	bd38      	pop	{r3, r4, r5, pc}

000085d6 <mp_emit_bc_pop_jump_if>:
void mp_emit_bc_pop_jump_if(emit_t *emit, bool cond, mp_uint_t label) {
    85d6:	b570      	push	{r4, r5, r6, lr}
    85d8:	4604      	mov	r4, r0
    85da:	460e      	mov	r6, r1
    85dc:	4615      	mov	r5, r2
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    85de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    85e2:	f7ff fdbb 	bl	815c <mp_emit_bc_adjust_stack_size>
    if (cond) {
    85e6:	b92e      	cbnz	r6, 85f4 <mp_emit_bc_pop_jump_if+0x1e>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    85e8:	462a      	mov	r2, r5
    85ea:	2137      	movs	r1, #55	; 0x37
    85ec:	4620      	mov	r0, r4
    85ee:	f7ff fc4b 	bl	7e88 <emit_write_bytecode_byte_signed_label>
}
    85f2:	bd70      	pop	{r4, r5, r6, pc}
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_TRUE, label);
    85f4:	462a      	mov	r2, r5
    85f6:	2136      	movs	r1, #54	; 0x36
    85f8:	4620      	mov	r0, r4
    85fa:	f7ff fc45 	bl	7e88 <emit_write_bytecode_byte_signed_label>
    85fe:	e7f8      	b.n	85f2 <mp_emit_bc_pop_jump_if+0x1c>

00008600 <mp_emit_bc_jump_if_or_pop>:
void mp_emit_bc_jump_if_or_pop(emit_t *emit, bool cond, mp_uint_t label) {
    8600:	b570      	push	{r4, r5, r6, lr}
    8602:	4604      	mov	r4, r0
    8604:	460e      	mov	r6, r1
    8606:	4615      	mov	r5, r2
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    860c:	f7ff fda6 	bl	815c <mp_emit_bc_adjust_stack_size>
    if (cond) {
    8610:	b92e      	cbnz	r6, 861e <mp_emit_bc_jump_if_or_pop+0x1e>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    8612:	462a      	mov	r2, r5
    8614:	2139      	movs	r1, #57	; 0x39
    8616:	4620      	mov	r0, r4
    8618:	f7ff fc36 	bl	7e88 <emit_write_bytecode_byte_signed_label>
}
    861c:	bd70      	pop	{r4, r5, r6, pc}
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_TRUE_OR_POP, label);
    861e:	462a      	mov	r2, r5
    8620:	2138      	movs	r1, #56	; 0x38
    8622:	4620      	mov	r0, r4
    8624:	f7ff fc30 	bl	7e88 <emit_write_bytecode_byte_signed_label>
    8628:	e7f8      	b.n	861c <mp_emit_bc_jump_if_or_pop+0x1c>

0000862a <mp_emit_bc_unwind_jump>:
void mp_emit_bc_unwind_jump(emit_t *emit, mp_uint_t label, mp_uint_t except_depth) {
    862a:	b570      	push	{r4, r5, r6, lr}
    862c:	4605      	mov	r5, r0
    862e:	460c      	mov	r4, r1
    if (except_depth == 0) {
    8630:	b9d2      	cbnz	r2, 8668 <mp_emit_bc_unwind_jump+0x3e>
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8632:	2100      	movs	r1, #0
    8634:	f7ff fd92 	bl	815c <mp_emit_bc_adjust_stack_size>
        if (label & MP_EMIT_BREAK_FROM_FOR) {
    8638:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    863c:	d106      	bne.n	864c <mp_emit_bc_unwind_jump+0x22>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    863e:	f424 4200 	bic.w	r2, r4, #32768	; 0x8000
    8642:	2135      	movs	r1, #53	; 0x35
    8644:	4628      	mov	r0, r5
    8646:	f7ff fc1f 	bl	7e88 <emit_write_bytecode_byte_signed_label>
}
    864a:	bd70      	pop	{r4, r5, r6, pc}
            emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    864c:	2132      	movs	r1, #50	; 0x32
    864e:	4628      	mov	r0, r5
    8650:	f7ff fbbc 	bl	7dcc <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    8654:	2600      	movs	r6, #0
    8656:	e004      	b.n	8662 <mp_emit_bc_unwind_jump+0x38>
                emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    8658:	2132      	movs	r1, #50	; 0x32
    865a:	4628      	mov	r0, r5
    865c:	f7ff fbb6 	bl	7dcc <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    8660:	3601      	adds	r6, #1
    8662:	2e02      	cmp	r6, #2
    8664:	d9f8      	bls.n	8658 <mp_emit_bc_unwind_jump+0x2e>
    8666:	e7ea      	b.n	863e <mp_emit_bc_unwind_jump+0x14>
    8668:	4616      	mov	r6, r2
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    866a:	f421 4200 	bic.w	r2, r1, #32768	; 0x8000
    866e:	2146      	movs	r1, #70	; 0x46
    8670:	f7ff fc0a 	bl	7e88 <emit_write_bytecode_byte_signed_label>
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    8674:	0a21      	lsrs	r1, r4, #8
    8676:	f001 0180 	and.w	r1, r1, #128	; 0x80
    867a:	4331      	orrs	r1, r6
    867c:	b2c9      	uxtb	r1, r1
    867e:	4628      	mov	r0, r5
    8680:	f7ff fba4 	bl	7dcc <emit_write_bytecode_byte>
}
    8684:	e7e1      	b.n	864a <mp_emit_bc_unwind_jump+0x20>

00008686 <mp_emit_bc_setup_with>:
void mp_emit_bc_setup_with(emit_t *emit, mp_uint_t label) {
    8686:	b538      	push	{r3, r4, r5, lr}
    8688:	4604      	mov	r4, r0
    868a:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    868c:	2102      	movs	r1, #2
    868e:	f7ff fd65 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_WITH, label);
    8692:	462a      	mov	r2, r5
    8694:	213d      	movs	r1, #61	; 0x3d
    8696:	4620      	mov	r0, r4
    8698:	f7ff fc0d 	bl	7eb6 <emit_write_bytecode_byte_unsigned_label>
}
    869c:	bd38      	pop	{r3, r4, r5, pc}

0000869e <mp_emit_bc_setup_except>:
void mp_emit_bc_setup_except(emit_t *emit, mp_uint_t label) {
    869e:	b538      	push	{r3, r4, r5, lr}
    86a0:	4604      	mov	r4, r0
    86a2:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    86a4:	2100      	movs	r1, #0
    86a6:	f7ff fd59 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_EXCEPT, label);
    86aa:	462a      	mov	r2, r5
    86ac:	213f      	movs	r1, #63	; 0x3f
    86ae:	4620      	mov	r0, r4
    86b0:	f7ff fc01 	bl	7eb6 <emit_write_bytecode_byte_unsigned_label>
}
    86b4:	bd38      	pop	{r3, r4, r5, pc}

000086b6 <mp_emit_bc_setup_finally>:
void mp_emit_bc_setup_finally(emit_t *emit, mp_uint_t label) {
    86b6:	b538      	push	{r3, r4, r5, lr}
    86b8:	4604      	mov	r4, r0
    86ba:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    86bc:	2100      	movs	r1, #0
    86be:	f7ff fd4d 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_FINALLY, label);
    86c2:	462a      	mov	r2, r5
    86c4:	2140      	movs	r1, #64	; 0x40
    86c6:	4620      	mov	r0, r4
    86c8:	f7ff fbf5 	bl	7eb6 <emit_write_bytecode_byte_unsigned_label>
}
    86cc:	bd38      	pop	{r3, r4, r5, pc}

000086ce <mp_emit_bc_end_finally>:
void mp_emit_bc_end_finally(emit_t *emit) {
    86ce:	b510      	push	{r4, lr}
    86d0:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    86d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    86d6:	f7ff fd41 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_END_FINALLY);
    86da:	2141      	movs	r1, #65	; 0x41
    86dc:	4620      	mov	r0, r4
    86de:	f7ff fb75 	bl	7dcc <emit_write_bytecode_byte>
}
    86e2:	bd10      	pop	{r4, pc}

000086e4 <mp_emit_bc_get_iter>:
void mp_emit_bc_get_iter(emit_t *emit, bool use_stack) {
    86e4:	b538      	push	{r3, r4, r5, lr}
    86e6:	4604      	mov	r4, r0
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    86e8:	460d      	mov	r5, r1
    86ea:	b149      	cbz	r1, 8700 <mp_emit_bc_get_iter+0x1c>
    86ec:	2103      	movs	r1, #3
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    86ee:	4620      	mov	r0, r4
    86f0:	f7ff fd34 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    86f4:	b935      	cbnz	r5, 8704 <mp_emit_bc_get_iter+0x20>
    86f6:	2142      	movs	r1, #66	; 0x42
    86f8:	4620      	mov	r0, r4
    86fa:	f7ff fb67 	bl	7dcc <emit_write_bytecode_byte>
}
    86fe:	bd38      	pop	{r3, r4, r5, pc}
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    8700:	2100      	movs	r1, #0
    8702:	e7f4      	b.n	86ee <mp_emit_bc_get_iter+0xa>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    8704:	2147      	movs	r1, #71	; 0x47
    8706:	e7f7      	b.n	86f8 <mp_emit_bc_get_iter+0x14>

00008708 <mp_emit_bc_for_iter>:
void mp_emit_bc_for_iter(emit_t *emit, mp_uint_t label) {
    8708:	b538      	push	{r3, r4, r5, lr}
    870a:	4604      	mov	r4, r0
    870c:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    870e:	2101      	movs	r1, #1
    8710:	f7ff fd24 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_FOR_ITER, label);
    8714:	462a      	mov	r2, r5
    8716:	2143      	movs	r1, #67	; 0x43
    8718:	4620      	mov	r0, r4
    871a:	f7ff fbcc 	bl	7eb6 <emit_write_bytecode_byte_unsigned_label>
}
    871e:	bd38      	pop	{r3, r4, r5, pc}

00008720 <mp_emit_bc_for_iter_end>:
void mp_emit_bc_for_iter_end(emit_t *emit) {
    8720:	b508      	push	{r3, lr}
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8722:	f06f 0103 	mvn.w	r1, #3
    8726:	f7ff fd19 	bl	815c <mp_emit_bc_adjust_stack_size>
}
    872a:	bd08      	pop	{r3, pc}

0000872c <mp_emit_bc_pop_block>:
void mp_emit_bc_pop_block(emit_t *emit) {
    872c:	b510      	push	{r4, lr}
    872e:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8730:	2100      	movs	r1, #0
    8732:	f7ff fd13 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_POP_BLOCK);
    8736:	2144      	movs	r1, #68	; 0x44
    8738:	4620      	mov	r0, r4
    873a:	f7ff fb47 	bl	7dcc <emit_write_bytecode_byte>
}
    873e:	bd10      	pop	{r4, pc}

00008740 <mp_emit_bc_with_cleanup>:
void mp_emit_bc_with_cleanup(emit_t *emit, mp_uint_t label) {
    8740:	b538      	push	{r3, r4, r5, lr}
    8742:	4604      	mov	r4, r0
    8744:	460d      	mov	r5, r1
    mp_emit_bc_pop_block(emit);
    8746:	f7ff fff1 	bl	872c <mp_emit_bc_pop_block>
    mp_emit_bc_load_const_tok(emit, MP_TOKEN_KW_NONE);
    874a:	210e      	movs	r1, #14
    874c:	4620      	mov	r0, r4
    874e:	f7ff fe35 	bl	83bc <mp_emit_bc_load_const_tok>
    mp_emit_bc_label_assign(emit, label);
    8752:	4629      	mov	r1, r5
    8754:	4620      	mov	r0, r4
    8756:	f7ff fdcf 	bl	82f8 <mp_emit_bc_label_assign>
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    875a:	2102      	movs	r1, #2
    875c:	4620      	mov	r0, r4
    875e:	f7ff fcfd 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_WITH_CLEANUP);
    8762:	213e      	movs	r1, #62	; 0x3e
    8764:	4620      	mov	r0, r4
    8766:	f7ff fb31 	bl	7dcc <emit_write_bytecode_byte>
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    876a:	f06f 0103 	mvn.w	r1, #3
    876e:	4620      	mov	r0, r4
    8770:	f7ff fcf4 	bl	815c <mp_emit_bc_adjust_stack_size>
}
    8774:	bd38      	pop	{r3, r4, r5, pc}

00008776 <mp_emit_bc_pop_except>:
void mp_emit_bc_pop_except(emit_t *emit) {
    8776:	b510      	push	{r4, lr}
    8778:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    877a:	2100      	movs	r1, #0
    877c:	f7ff fcee 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_POP_EXCEPT);
    8780:	2145      	movs	r1, #69	; 0x45
    8782:	4620      	mov	r0, r4
    8784:	f7ff fb22 	bl	7dcc <emit_write_bytecode_byte>
}
    8788:	bd10      	pop	{r4, pc}

0000878a <mp_emit_bc_unary_op>:
void mp_emit_bc_unary_op(emit_t *emit, mp_unary_op_t op) {
    878a:	b538      	push	{r3, r4, r5, lr}
    878c:	4605      	mov	r5, r0
    878e:	460c      	mov	r4, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8790:	2100      	movs	r1, #0
    8792:	f7ff fce3 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + op);
    8796:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    879a:	b2c9      	uxtb	r1, r1
    879c:	4628      	mov	r0, r5
    879e:	f7ff fb15 	bl	7dcc <emit_write_bytecode_byte>
}
    87a2:	bd38      	pop	{r3, r4, r5, pc}

000087a4 <mp_emit_bc_binary_op>:
void mp_emit_bc_binary_op(emit_t *emit, mp_binary_op_t op) {
    87a4:	b570      	push	{r4, r5, r6, lr}
    87a6:	4605      	mov	r5, r0
    if (op == MP_BINARY_OP_NOT_IN) {
    87a8:	2924      	cmp	r1, #36	; 0x24
    87aa:	d010      	beq.n	87ce <mp_emit_bc_binary_op+0x2a>
    87ac:	460c      	mov	r4, r1
    } else if (op == MP_BINARY_OP_IS_NOT) {
    87ae:	2925      	cmp	r1, #37	; 0x25
    87b0:	d010      	beq.n	87d4 <mp_emit_bc_binary_op+0x30>
    bool invert = false;
    87b2:	2600      	movs	r6, #0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    87b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    87b8:	4628      	mov	r0, r5
    87ba:	f7ff fccf 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_BINARY_OP_MULTI + op);
    87be:	f1a4 0129 	sub.w	r1, r4, #41	; 0x29
    87c2:	b2c9      	uxtb	r1, r1
    87c4:	4628      	mov	r0, r5
    87c6:	f7ff fb01 	bl	7dcc <emit_write_bytecode_byte>
    if (invert) {
    87ca:	b936      	cbnz	r6, 87da <mp_emit_bc_binary_op+0x36>
}
    87cc:	bd70      	pop	{r4, r5, r6, pc}
        invert = true;
    87ce:	2601      	movs	r6, #1
        op = MP_BINARY_OP_IN;
    87d0:	2406      	movs	r4, #6
    87d2:	e7ef      	b.n	87b4 <mp_emit_bc_binary_op+0x10>
        invert = true;
    87d4:	2601      	movs	r6, #1
        op = MP_BINARY_OP_IS;
    87d6:	2407      	movs	r4, #7
    87d8:	e7ec      	b.n	87b4 <mp_emit_bc_binary_op+0x10>
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    87da:	2100      	movs	r1, #0
    87dc:	4628      	mov	r0, r5
    87de:	f7ff fcbd 	bl	815c <mp_emit_bc_adjust_stack_size>
        emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NOT);
    87e2:	21d3      	movs	r1, #211	; 0xd3
    87e4:	4628      	mov	r0, r5
    87e6:	f7ff faf1 	bl	7dcc <emit_write_bytecode_byte>
}
    87ea:	e7ef      	b.n	87cc <mp_emit_bc_binary_op+0x28>

000087ec <mp_emit_bc_build_tuple>:
void mp_emit_bc_build_tuple(emit_t *emit, mp_uint_t n_args) {
    87ec:	b538      	push	{r3, r4, r5, lr}
    87ee:	4605      	mov	r5, r0
    87f0:	460c      	mov	r4, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    87f2:	f1c1 0101 	rsb	r1, r1, #1
    87f6:	f7ff fcb1 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_TUPLE, n_args);
    87fa:	4622      	mov	r2, r4
    87fc:	2150      	movs	r1, #80	; 0x50
    87fe:	4628      	mov	r0, r5
    8800:	f7ff faec 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    8804:	bd38      	pop	{r3, r4, r5, pc}

00008806 <mp_emit_bc_build_list>:
void mp_emit_bc_build_list(emit_t *emit, mp_uint_t n_args) {
    8806:	b538      	push	{r3, r4, r5, lr}
    8808:	4605      	mov	r5, r0
    880a:	460c      	mov	r4, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    880c:	f1c1 0101 	rsb	r1, r1, #1
    8810:	f7ff fca4 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_LIST, n_args);
    8814:	4622      	mov	r2, r4
    8816:	2151      	movs	r1, #81	; 0x51
    8818:	4628      	mov	r0, r5
    881a:	f7ff fadf 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    881e:	bd38      	pop	{r3, r4, r5, pc}

00008820 <mp_emit_bc_build_map>:
void mp_emit_bc_build_map(emit_t *emit, mp_uint_t n_args) {
    8820:	b538      	push	{r3, r4, r5, lr}
    8822:	4604      	mov	r4, r0
    8824:	460d      	mov	r5, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8826:	2101      	movs	r1, #1
    8828:	f7ff fc98 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_MAP, n_args);
    882c:	462a      	mov	r2, r5
    882e:	2153      	movs	r1, #83	; 0x53
    8830:	4620      	mov	r0, r4
    8832:	f7ff fad3 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    8836:	bd38      	pop	{r3, r4, r5, pc}

00008838 <mp_emit_bc_store_map>:
void mp_emit_bc_store_map(emit_t *emit) {
    8838:	b510      	push	{r4, lr}
    883a:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    883c:	f06f 0101 	mvn.w	r1, #1
    8840:	f7ff fc8c 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte(emit, MP_BC_STORE_MAP);
    8844:	2154      	movs	r1, #84	; 0x54
    8846:	4620      	mov	r0, r4
    8848:	f7ff fac0 	bl	7dcc <emit_write_bytecode_byte>
}
    884c:	bd10      	pop	{r4, pc}

0000884e <mp_emit_bc_store_comp>:
void mp_emit_bc_store_comp(emit_t *emit, scope_kind_t kind, mp_uint_t collection_stack_index) {
    884e:	b570      	push	{r4, r5, r6, lr}
    8850:	4606      	mov	r6, r0
    8852:	4615      	mov	r5, r2
    if (kind == SCOPE_LIST_COMP) {
    8854:	2903      	cmp	r1, #3
    8856:	d00c      	beq.n	8872 <mp_emit_bc_store_comp+0x24>
        t = 1;
    8858:	2401      	movs	r4, #1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    885a:	43e1      	mvns	r1, r4
    885c:	4630      	mov	r0, r6
    885e:	f7ff fc7d 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_COMP, ((collection_stack_index + n) << 2) | t);
    8862:	1962      	adds	r2, r4, r5
    8864:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
    8868:	2157      	movs	r1, #87	; 0x57
    886a:	4630      	mov	r0, r6
    886c:	f7ff fab6 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    8870:	bd70      	pop	{r4, r5, r6, pc}
        t = 0;
    8872:	2400      	movs	r4, #0
    8874:	e7f1      	b.n	885a <mp_emit_bc_store_comp+0xc>

00008876 <mp_emit_bc_unpack_sequence>:
void mp_emit_bc_unpack_sequence(emit_t *emit, mp_uint_t n_args) {
    8876:	b538      	push	{r3, r4, r5, lr}
    8878:	4605      	mov	r5, r0
    887a:	460c      	mov	r4, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    887c:	3901      	subs	r1, #1
    887e:	f7ff fc6d 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_SEQUENCE, n_args);
    8882:	4622      	mov	r2, r4
    8884:	2159      	movs	r1, #89	; 0x59
    8886:	4628      	mov	r0, r5
    8888:	f7ff faa8 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    888c:	bd38      	pop	{r3, r4, r5, pc}

0000888e <mp_emit_bc_unpack_ex>:
void mp_emit_bc_unpack_ex(emit_t *emit, mp_uint_t n_left, mp_uint_t n_right) {
    888e:	b570      	push	{r4, r5, r6, lr}
    8890:	4606      	mov	r6, r0
    8892:	460c      	mov	r4, r1
    8894:	4615      	mov	r5, r2
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8896:	4411      	add	r1, r2
    8898:	f7ff fc60 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_EX, n_left | (n_right << 8));
    889c:	ea44 2205 	orr.w	r2, r4, r5, lsl #8
    88a0:	215a      	movs	r1, #90	; 0x5a
    88a2:	4630      	mov	r0, r6
    88a4:	f7ff fa9a 	bl	7ddc <emit_write_bytecode_byte_uint>
}
    88a8:	bd70      	pop	{r4, r5, r6, pc}

000088aa <mp_emit_bc_make_function>:
void mp_emit_bc_make_function(emit_t *emit, scope_t *scope, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    88aa:	b538      	push	{r3, r4, r5, lr}
    88ac:	4604      	mov	r4, r0
    88ae:	460d      	mov	r5, r1
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    88b0:	b902      	cbnz	r2, 88b4 <mp_emit_bc_make_function+0xa>
    88b2:	b153      	cbz	r3, 88ca <mp_emit_bc_make_function+0x20>
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    88b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    88b8:	4620      	mov	r0, r4
    88ba:	f7ff fc4f 	bl	815c <mp_emit_bc_adjust_stack_size>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION_DEFARGS, scope->raw_code);
    88be:	696a      	ldr	r2, [r5, #20]
    88c0:	2161      	movs	r1, #97	; 0x61
    88c2:	4620      	mov	r0, r4
    88c4:	f7ff fb38 	bl	7f38 <emit_write_bytecode_byte_raw_code>
}
    88c8:	bd38      	pop	{r3, r4, r5, pc}
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    88ca:	2101      	movs	r1, #1
    88cc:	f7ff fc46 	bl	815c <mp_emit_bc_adjust_stack_size>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION, scope->raw_code);
    88d0:	696a      	ldr	r2, [r5, #20]
    88d2:	2160      	movs	r1, #96	; 0x60
    88d4:	4620      	mov	r0, r4
    88d6:	f7ff fb2f 	bl	7f38 <emit_write_bytecode_byte_raw_code>
    88da:	e7f5      	b.n	88c8 <mp_emit_bc_make_function+0x1e>

000088dc <mp_emit_bc_make_closure>:
void mp_emit_bc_make_closure(emit_t *emit, scope_t *scope, mp_uint_t n_closed_over, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    88dc:	b570      	push	{r4, r5, r6, lr}
    88de:	4604      	mov	r4, r0
    88e0:	460e      	mov	r6, r1
    88e2:	4615      	mov	r5, r2
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    88e4:	b90b      	cbnz	r3, 88ea <mp_emit_bc_make_closure+0xe>
    88e6:	9b04      	ldr	r3, [sp, #16]
    88e8:	b17b      	cbz	r3, 890a <mp_emit_bc_make_closure+0x2e>
        assert(n_closed_over <= 255);
    88ea:	2dff      	cmp	r5, #255	; 0xff
    88ec:	d81b      	bhi.n	8926 <mp_emit_bc_make_closure+0x4a>
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    88ee:	43e9      	mvns	r1, r5
    88f0:	4620      	mov	r0, r4
    88f2:	f7ff fc33 	bl	815c <mp_emit_bc_adjust_stack_size>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
    88f6:	6972      	ldr	r2, [r6, #20]
    88f8:	2163      	movs	r1, #99	; 0x63
    88fa:	4620      	mov	r0, r4
    88fc:	f7ff fb1c 	bl	7f38 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    8900:	b2e9      	uxtb	r1, r5
    8902:	4620      	mov	r0, r4
    8904:	f7ff fa62 	bl	7dcc <emit_write_bytecode_byte>
}
    8908:	bd70      	pop	{r4, r5, r6, pc}
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    890a:	f1c2 0101 	rsb	r1, r2, #1
    890e:	f7ff fc25 	bl	815c <mp_emit_bc_adjust_stack_size>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE, scope->raw_code);
    8912:	6972      	ldr	r2, [r6, #20]
    8914:	2162      	movs	r1, #98	; 0x62
    8916:	4620      	mov	r0, r4
    8918:	f7ff fb0e 	bl	7f38 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    891c:	b2e9      	uxtb	r1, r5
    891e:	4620      	mov	r0, r4
    8920:	f7ff fa54 	bl	7dcc <emit_write_bytecode_byte>
    8924:	e7f0      	b.n	8908 <mp_emit_bc_make_closure+0x2c>
        assert(n_closed_over <= 255);
    8926:	4b03      	ldr	r3, [pc, #12]	; (8934 <mp_emit_bc_make_closure+0x58>)
    8928:	4a03      	ldr	r2, [pc, #12]	; (8938 <mp_emit_bc_make_closure+0x5c>)
    892a:	f44f 7163 	mov.w	r1, #908	; 0x38c
    892e:	4803      	ldr	r0, [pc, #12]	; (893c <mp_emit_bc_make_closure+0x60>)
    8930:	f00f fe14 	bl	1855c <__assert_func>
    8934:	00025348 	.word	0x00025348
    8938:	00025060 	.word	0x00025060
    893c:	00025220 	.word	0x00025220

00008940 <mp_emit_bc_call_function>:

void mp_emit_bc_call_function(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    8940:	b500      	push	{lr}
    8942:	b083      	sub	sp, #12
    emit_bc_call_function_method_helper(emit, 0, MP_BC_CALL_FUNCTION, n_positional, n_keyword, star_flags);
    8944:	9301      	str	r3, [sp, #4]
    8946:	9200      	str	r2, [sp, #0]
    8948:	460b      	mov	r3, r1
    894a:	2264      	movs	r2, #100	; 0x64
    894c:	2100      	movs	r1, #0
    894e:	f7ff fcb1 	bl	82b4 <emit_bc_call_function_method_helper>
}
    8952:	b003      	add	sp, #12
    8954:	f85d fb04 	ldr.w	pc, [sp], #4

00008958 <mp_emit_bc_call_method>:

void mp_emit_bc_call_method(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    8958:	b500      	push	{lr}
    895a:	b083      	sub	sp, #12
    emit_bc_call_function_method_helper(emit, -1, MP_BC_CALL_METHOD, n_positional, n_keyword, star_flags);
    895c:	9301      	str	r3, [sp, #4]
    895e:	9200      	str	r2, [sp, #0]
    8960:	460b      	mov	r3, r1
    8962:	2266      	movs	r2, #102	; 0x66
    8964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8968:	f7ff fca4 	bl	82b4 <emit_bc_call_function_method_helper>
}
    896c:	b003      	add	sp, #12
    896e:	f85d fb04 	ldr.w	pc, [sp], #4

00008972 <mp_emit_bc_return_value>:

void mp_emit_bc_return_value(emit_t *emit) {
    8972:	b510      	push	{r4, lr}
    8974:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8976:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    897a:	f7ff fbef 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_bc_pre(emit, -1);
    emit->last_emit_was_return_value = true;
    897e:	2301      	movs	r3, #1
    8980:	71a3      	strb	r3, [r4, #6]
    emit_write_bytecode_byte(emit, MP_BC_RETURN_VALUE);
    8982:	215b      	movs	r1, #91	; 0x5b
    8984:	4620      	mov	r0, r4
    8986:	f7ff fa21 	bl	7dcc <emit_write_bytecode_byte>
}
    898a:	bd10      	pop	{r4, pc}

0000898c <mp_emit_bc_raise_varargs>:

void mp_emit_bc_raise_varargs(emit_t *emit, mp_uint_t n_args) {
    898c:	b538      	push	{r3, r4, r5, lr}
    assert(n_args <= 2);
    898e:	2902      	cmp	r1, #2
    8990:	d80a      	bhi.n	89a8 <mp_emit_bc_raise_varargs+0x1c>
    8992:	4605      	mov	r5, r0
    8994:	460c      	mov	r4, r1
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    8996:	4249      	negs	r1, r1
    8998:	f7ff fbe0 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_bc_pre(emit, -n_args);
    emit_write_bytecode_byte_byte(emit, MP_BC_RAISE_VARARGS, n_args);
    899c:	b2e2      	uxtb	r2, r4
    899e:	215c      	movs	r1, #92	; 0x5c
    89a0:	4628      	mov	r0, r5
    89a2:	f7ff fa9d 	bl	7ee0 <emit_write_bytecode_byte_byte>
}
    89a6:	bd38      	pop	{r3, r4, r5, pc}
    assert(n_args <= 2);
    89a8:	4b03      	ldr	r3, [pc, #12]	; (89b8 <mp_emit_bc_raise_varargs+0x2c>)
    89aa:	4a04      	ldr	r2, [pc, #16]	; (89bc <mp_emit_bc_raise_varargs+0x30>)
    89ac:	f44f 716b 	mov.w	r1, #940	; 0x3ac
    89b0:	4803      	ldr	r0, [pc, #12]	; (89c0 <mp_emit_bc_raise_varargs+0x34>)
    89b2:	f00f fdd3 	bl	1855c <__assert_func>
    89b6:	bf00      	nop
    89b8:	00025390 	.word	0x00025390
    89bc:	00025078 	.word	0x00025078
    89c0:	00025220 	.word	0x00025220

000089c4 <mp_emit_bc_yield_value>:

void mp_emit_bc_yield_value(emit_t *emit) {
    89c4:	b510      	push	{r4, lr}
    89c6:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    89c8:	2100      	movs	r1, #0
    89ca:	f7ff fbc7 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_bc_pre(emit, 0);
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    89ce:	68e2      	ldr	r2, [r4, #12]
    89d0:	7e13      	ldrb	r3, [r2, #24]
    89d2:	f043 0304 	orr.w	r3, r3, #4
    89d6:	7613      	strb	r3, [r2, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_VALUE);
    89d8:	215d      	movs	r1, #93	; 0x5d
    89da:	4620      	mov	r0, r4
    89dc:	f7ff f9f6 	bl	7dcc <emit_write_bytecode_byte>
}
    89e0:	bd10      	pop	{r4, pc}

000089e2 <mp_emit_bc_yield_from>:

void mp_emit_bc_yield_from(emit_t *emit) {
    89e2:	b510      	push	{r4, lr}
    89e4:	4604      	mov	r4, r0
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    89e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    89ea:	f7ff fbb7 	bl	815c <mp_emit_bc_adjust_stack_size>
    emit_bc_pre(emit, -1);
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    89ee:	68e2      	ldr	r2, [r4, #12]
    89f0:	7e13      	ldrb	r3, [r2, #24]
    89f2:	f043 0304 	orr.w	r3, r3, #4
    89f6:	7613      	strb	r3, [r2, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_FROM);
    89f8:	215e      	movs	r1, #94	; 0x5e
    89fa:	4620      	mov	r0, r4
    89fc:	f7ff f9e6 	bl	7dcc <emit_write_bytecode_byte>
}
    8a00:	bd10      	pop	{r4, pc}

00008a02 <mp_emit_bc_start_except_handler>:

void mp_emit_bc_start_except_handler(emit_t *emit) {
    8a02:	b508      	push	{r3, lr}
    mp_emit_bc_adjust_stack_size(emit, 4); // stack adjust for the exception instance, +3 for possible UNWIND_JUMP state
    8a04:	2104      	movs	r1, #4
    8a06:	f7ff fba9 	bl	815c <mp_emit_bc_adjust_stack_size>
}
    8a0a:	bd08      	pop	{r3, pc}

00008a0c <mp_emit_bc_end_except_handler>:

void mp_emit_bc_end_except_handler(emit_t *emit) {
    8a0c:	b508      	push	{r3, lr}
    mp_emit_bc_adjust_stack_size(emit, -3); // stack adjust
    8a0e:	f06f 0102 	mvn.w	r1, #2
    8a12:	f7ff fba3 	bl	815c <mp_emit_bc_adjust_stack_size>
}
    8a16:	bd08      	pop	{r3, pc}

00008a18 <mp_format_float>:
    1e-256, 1e-128, 1e-64,
    #endif
    1e-32, 1e-16, 1e-8, 1e-4, 1e-2, 1e-1
};

int mp_format_float(FPTYPE f, char *buf, size_t buf_size, char fmt, int prec, char sign) {
    8a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a1c:	b085      	sub	sp, #20

    char *s = buf;

    if (buf_size <= FPMIN_BUF_SIZE) {
    8a1e:	2906      	cmp	r1, #6
int mp_format_float(FPTYPE f, char *buf, size_t buf_size, char fmt, int prec, char sign) {
    8a20:	9101      	str	r1, [sp, #4]
    8a22:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
    if (buf_size <= FPMIN_BUF_SIZE) {
    8a26:	d812      	bhi.n	8a4e <mp_format_float+0x36>
        // FPMIN_BUF_SIZE is the minimum size needed to store any FP number.
        // If the buffer does not have enough room for this (plus null terminator)
        // then don't try to format the float.

        if (buf_size >= 2) {
    8a28:	2901      	cmp	r1, #1
    8a2a:	d905      	bls.n	8a38 <mp_format_float+0x20>
            *s++ = '?';
    8a2c:	233f      	movs	r3, #63	; 0x3f
    8a2e:	7003      	strb	r3, [r0, #0]
    8a30:	3001      	adds	r0, #1
        }
        if (buf_size >= 1) {
            *s = '\0';
    8a32:	2300      	movs	r3, #0
    8a34:	7003      	strb	r3, [r0, #0]
    8a36:	e002      	b.n	8a3e <mp_format_float+0x26>
        if (buf_size >= 1) {
    8a38:	9b01      	ldr	r3, [sp, #4]
    8a3a:	2b00      	cmp	r3, #0
    8a3c:	d1f9      	bne.n	8a32 <mp_format_float+0x1a>
        }
        return buf_size >= 2;
    8a3e:	9b01      	ldr	r3, [sp, #4]
    8a40:	2b01      	cmp	r3, #1
    8a42:	bf94      	ite	ls
    8a44:	2000      	movls	r0, #0
    8a46:	2001      	movhi	r0, #1

    // verify that we did not overrun the input buffer
    assert((size_t)(s + 1 - buf) <= buf_size);

    return s - buf;
}
    8a48:	b005      	add	sp, #20
    8a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (fp_signbit(f) && !fp_isnan(f)) {
    8a4e:	ee10 4a10 	vmov	r4, s0
    8a52:	2c00      	cmp	r4, #0
    8a54:	da26      	bge.n	8aa4 <mp_format_float+0x8c>
    8a56:	eeb4 0a40 	vcmp.f32	s0, s0
    8a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a5e:	d621      	bvs.n	8aa4 <mp_format_float+0x8c>
        *s++ = '-';
    8a60:	252d      	movs	r5, #45	; 0x2d
    8a62:	1c44      	adds	r4, r0, #1
    8a64:	7005      	strb	r5, [r0, #0]
        f = -f;
    8a66:	eeb1 0a40 	vneg.f32	s0, s0
        if (fp_isinf(f)) {
    8a6a:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8dc0 <mp_format_float+0x3a8>
    int buf_remaining = buf_size - 1 - (s - buf);
    8a6e:	9002      	str	r0, [sp, #8]
        if (fp_isinf(f)) {
    8a70:	eef0 7ac0 	vabs.f32	s15, s0
        char uc = fmt & 0x20;
    8a74:	f002 0520 	and.w	r5, r2, #32
        if (fp_isinf(f)) {
    8a78:	eef4 7a47 	vcmp.f32	s15, s14
        char uc = fmt & 0x20;
    8a7c:	9503      	str	r5, [sp, #12]
        if (fp_isinf(f)) {
    8a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        char uc = fmt & 0x20;
    8a82:	f89d 500c 	ldrb.w	r5, [sp, #12]
        if (fp_isinf(f)) {
    8a86:	dd13      	ble.n	8ab0 <mp_format_float+0x98>
            *s++ = 'I' ^ uc;
    8a88:	f085 0349 	eor.w	r3, r5, #73	; 0x49
    8a8c:	7023      	strb	r3, [r4, #0]
            *s++ = 'N' ^ uc;
    8a8e:	f085 034e 	eor.w	r3, r5, #78	; 0x4e
            *s++ = 'F' ^ uc;
    8a92:	f085 0546 	eor.w	r5, r5, #70	; 0x46
            *s++ = 'N' ^ uc;
    8a96:	7063      	strb	r3, [r4, #1]
            *s++ = 'F' ^ uc;
    8a98:	1ce1      	adds	r1, r4, #3
    8a9a:	70a5      	strb	r5, [r4, #2]
            *s = '\0';
    8a9c:	2300      	movs	r3, #0
    8a9e:	700b      	strb	r3, [r1, #0]
            return s - buf;
    8aa0:	1a08      	subs	r0, r1, r0
    8aa2:	e7d1      	b.n	8a48 <mp_format_float+0x30>
        if (sign) {
    8aa4:	b115      	cbz	r5, 8aac <mp_format_float+0x94>
            *s++ = sign;
    8aa6:	1c44      	adds	r4, r0, #1
    8aa8:	7005      	strb	r5, [r0, #0]
    8aaa:	e7de      	b.n	8a6a <mp_format_float+0x52>
    8aac:	4604      	mov	r4, r0
    8aae:	e7dc      	b.n	8a6a <mp_format_float+0x52>
        } else if (fp_isnan(f)) {
    8ab0:	eeb4 0a40 	vcmp.f32	s0, s0
    8ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8ab8:	d708      	bvc.n	8acc <mp_format_float+0xb4>
            *s++ = 'N' ^ uc;
    8aba:	f045 034e 	orr.w	r3, r5, #78	; 0x4e
            *s++ = 'A' ^ uc;
    8abe:	f085 0541 	eor.w	r5, r5, #65	; 0x41
            *s++ = 'N' ^ uc;
    8ac2:	7023      	strb	r3, [r4, #0]
            *s++ = 'A' ^ uc;
    8ac4:	7065      	strb	r5, [r4, #1]
            *s++ = 'N' ^ uc;
    8ac6:	1ce1      	adds	r1, r4, #3
    8ac8:	70a3      	strb	r3, [r4, #2]
    8aca:	e7e7      	b.n	8a9c <mp_format_float+0x84>
        prec = 6;
    8acc:	2b00      	cmp	r3, #0
    fmt |= 0x20; // Force fmt to be lowercase
    8ace:	f042 0220 	orr.w	r2, r2, #32
        prec = 6;
    8ad2:	bfb8      	it	lt
    8ad4:	2306      	movlt	r3, #6
    if (fmt == 'g' && prec == 0) {
    8ad6:	2a67      	cmp	r2, #103	; 0x67
    8ad8:	d102      	bne.n	8ae0 <mp_format_float+0xc8>
        prec = 1;
    8ada:	2b00      	cmp	r3, #0
    8adc:	bf08      	it	eq
    8ade:	2301      	moveq	r3, #1
    int buf_remaining = buf_size - 1 - (s - buf);
    8ae0:	9901      	ldr	r1, [sp, #4]
    8ae2:	1e4f      	subs	r7, r1, #1
    if (fp_iszero(f)) {
    8ae4:	ee10 1a10 	vmov	r1, s0
    int buf_remaining = buf_size - 1 - (s - buf);
    8ae8:	1a25      	subs	r5, r4, r0
    8aea:	1b7f      	subs	r7, r7, r5
    if (fp_iszero(f)) {
    8aec:	1e0d      	subs	r5, r1, #0
    8aee:	d14b      	bne.n	8b88 <mp_format_float+0x170>
        if (fmt == 'f') {
    8af0:	2a66      	cmp	r2, #102	; 0x66
    8af2:	d13b      	bne.n	8b6c <mp_format_float+0x154>
            if (prec + 2 > buf_remaining) {
    8af4:	1c5d      	adds	r5, r3, #1
    8af6:	42bd      	cmp	r5, r7
                prec = buf_remaining - 2;
    8af8:	bfa8      	it	ge
    8afa:	1ebb      	subge	r3, r7, #2
    char e_sign = '\0';
    8afc:	2600      	movs	r6, #0
            num_digits = prec + 1;
    8afe:	f103 0e01 	add.w	lr, r3, #1
    fmt |= 0x20; // Force fmt to be lowercase
    8b02:	2766      	movs	r7, #102	; 0x66
    int dec = 0;
    8b04:	46b0      	mov	r8, r6
        e = 0;
    8b06:	4635      	mov	r5, r6
    8b08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    if (fmt == 'e') {
    8b0c:	2f65      	cmp	r7, #101	; 0x65
    8b0e:	f040 8175 	bne.w	8dfc <mp_format_float+0x3e4>
        num_digits = prec + 1;
    8b12:	f103 0e01 	add.w	lr, r3, #1
    for (int i = 0; i < num_digits; ++i, --dec) {
    8b16:	f04f 0900 	mov.w	r9, #0
            *s++ = '.';
    8b1a:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
        f *= FPCONST(10.0);
    8b1e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    for (int i = 0; i < num_digits; ++i, --dec) {
    8b22:	45ce      	cmp	lr, r9
    8b24:	f104 0c01 	add.w	ip, r4, #1
    8b28:	f340 8084 	ble.w	8c34 <mp_format_float+0x21c>
        int32_t d = (int32_t)f;
    8b2c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        if (d < 0) {
    8b30:	ee17 1a90 	vmov	r1, s15
    8b34:	2900      	cmp	r1, #0
            *s++ = '0' + d;
    8b36:	bfab      	itete	ge
    8b38:	ee17 1a90 	vmovge	r1, s15
            *s++ = '0';
    8b3c:	2130      	movlt	r1, #48	; 0x30
            *s++ = '0' + d;
    8b3e:	f101 0a30 	addge.w	sl, r1, #48	; 0x30
            *s++ = '0';
    8b42:	7021      	strblt	r1, [r4, #0]
            *s++ = '0' + d;
    8b44:	bfa8      	it	ge
    8b46:	f884 a000 	strbge.w	sl, [r4]
        if (dec == 0 && prec > 0) {
    8b4a:	45c1      	cmp	r9, r8
    8b4c:	d104      	bne.n	8b58 <mp_format_float+0x140>
    8b4e:	b11b      	cbz	r3, 8b58 <mp_format_float+0x140>
    8b50:	f104 0c02 	add.w	ip, r4, #2
            *s++ = '.';
    8b54:	f884 b001 	strb.w	fp, [r4, #1]
        f -= (FPTYPE)d;
    8b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (int i = 0; i < num_digits; ++i, --dec) {
    8b5c:	f109 0901 	add.w	r9, r9, #1
        f -= (FPTYPE)d;
    8b60:	ee30 0a67 	vsub.f32	s0, s0, s15
    for (int i = 0; i < num_digits; ++i, --dec) {
    8b64:	4664      	mov	r4, ip
        f *= FPCONST(10.0);
    8b66:	ee20 0a07 	vmul.f32	s0, s0, s14
    8b6a:	e7da      	b.n	8b22 <mp_format_float+0x10a>
            if (prec + 6 > buf_remaining) {
    8b6c:	1d5d      	adds	r5, r3, #5
    8b6e:	42bd      	cmp	r5, r7
                prec = buf_remaining - 6;
    8b70:	bfa8      	it	ge
    8b72:	1fbb      	subge	r3, r7, #6
            if (fmt == 'e') {
    8b74:	2a65      	cmp	r2, #101	; 0x65
    fmt |= 0x20; // Force fmt to be lowercase
    8b76:	4617      	mov	r7, r2
    int num_digits = 0;
    8b78:	f04f 0e00 	mov.w	lr, #0
            if (fmt == 'e') {
    8b7c:	f000 8133 	beq.w	8de6 <mp_format_float+0x3ce>
    char e_sign = '\0';
    8b80:	4676      	mov	r6, lr
    int dec = 0;
    8b82:	46f0      	mov	r8, lr
        e = 0;
    8b84:	4675      	mov	r5, lr
    8b86:	e7bf      	b.n	8b08 <mp_format_float+0xf0>
    } else if (fp_isless1(f)) {
    8b88:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
    8b8c:	f080 80c3 	bcs.w	8d16 <mp_format_float+0x2fe>
        if (f >= FPROUND_TO_ONE) {
    8b90:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8dc4 <mp_format_float+0x3ac>
    8b94:	f8df e240 	ldr.w	lr, [pc, #576]	; 8dd8 <mp_format_float+0x3c0>
                f *= *pos_pow;
    8b98:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8ddc <mp_format_float+0x3c4>
        char first_dig = '0';
    8b9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
    8ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            first_dig = '1';
    8ba4:	f04f 0600 	mov.w	r6, #0
        char first_dig = '0';
    8ba8:	bfac      	ite	ge
    8baa:	f04f 0831 	movge.w	r8, #49	; 0x31
    8bae:	f04f 0830 	movlt.w	r8, #48	; 0x30
        for (e = 0, e1 = FPDECEXP; e1; e1 >>= 1, pos_pow++, neg_pow++) {
    8bb2:	f04f 0c20 	mov.w	ip, #32
    8bb6:	4635      	mov	r5, r6
            if (*neg_pow > f) {
    8bb8:	ecbe 7a01 	vldmia	lr!, {s14}
    8bbc:	eeb4 7ac0 	vcmpe.f32	s14, s0
    8bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                f *= *pos_pow;
    8bc4:	bfc4      	itt	gt
    8bc6:	eb09 0a06 	addgt.w	sl, r9, r6
    8bca:	ed9a 7a00 	vldrgt	s14, [sl]
    8bce:	f106 0604 	add.w	r6, r6, #4
                e += e1;
    8bd2:	bfc4      	itt	gt
    8bd4:	4465      	addgt	r5, ip
                f *= *pos_pow;
    8bd6:	ee20 0a07 	vmulgt.f32	s0, s0, s14
        for (e = 0, e1 = FPDECEXP; e1; e1 >>= 1, pos_pow++, neg_pow++) {
    8bda:	2e18      	cmp	r6, #24
    8bdc:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    8be0:	d1ea      	bne.n	8bb8 <mp_format_float+0x1a0>
        if (fp_isless1(f) && f >= FPROUND_TO_ONE) {
    8be2:	ee10 1a10 	vmov	r1, s0
    8be6:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
    8bea:	d272      	bcs.n	8cd2 <mp_format_float+0x2ba>
    8bec:	eeb4 0ae7 	vcmpe.f32	s0, s15
    8bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8bf4:	db68      	blt.n	8cc8 <mp_format_float+0x2b0>
        char e_sign_char = '-';
    8bf6:	2d00      	cmp	r5, #0
    8bf8:	bf0c      	ite	eq
    8bfa:	262b      	moveq	r6, #43	; 0x2b
    8bfc:	262d      	movne	r6, #45	; 0x2d
    8bfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
        if (fmt == 'f' || (fmt == 'g' && e <= 4)) {
    8c02:	2a66      	cmp	r2, #102	; 0x66
    8c04:	d003      	beq.n	8c0e <mp_format_float+0x1f6>
    8c06:	2a67      	cmp	r2, #103	; 0x67
    8c08:	d179      	bne.n	8cfe <mp_format_float+0x2e6>
    8c0a:	2d04      	cmp	r5, #4
    8c0c:	dc77      	bgt.n	8cfe <mp_format_float+0x2e6>
            if (org_fmt == 'g') {
    8c0e:	2a67      	cmp	r2, #103	; 0x67
                prec += (e - 1);
    8c10:	bf04      	itt	eq
    8c12:	f105 36ff 	addeq.w	r6, r5, #4294967295	; 0xffffffff
    8c16:	199b      	addeq	r3, r3, r6
            if (prec + 2 > buf_remaining) {
    8c18:	1c5e      	adds	r6, r3, #1
    8c1a:	42be      	cmp	r6, r7
                prec = buf_remaining - 2;
    8c1c:	bfa8      	it	ge
    8c1e:	1ebb      	subge	r3, r7, #2
            *s++ = first_dig;
    8c20:	f884 8000 	strb.w	r8, [r4]
    8c24:	f104 0c02 	add.w	ip, r4, #2
            if (num_digits) {
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d154      	bne.n	8cd6 <mp_format_float+0x2be>
            *s++ = first_dig;
    8c2c:	3401      	adds	r4, #1
    8c2e:	469e      	mov	lr, r3
            fmt = 'f';
    8c30:	2766      	movs	r7, #102	; 0x66
    char e_sign = '\0';
    8c32:	461e      	mov	r6, r3
    if ((org_fmt != 'f' || e <= num_digits) && f >= FPCONST(5.0)) {
    8c34:	2a66      	cmp	r2, #102	; 0x66
    8c36:	d101      	bne.n	8c3c <mp_format_float+0x224>
    8c38:	45ae      	cmp	lr, r5
    8c3a:	db37      	blt.n	8cac <mp_format_float+0x294>
    8c3c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    8c40:	eeb4 0ae7 	vcmpe.f32	s0, s15
    8c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8c48:	db30      	blt.n	8cac <mp_format_float+0x294>
        rs--;
    8c4a:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
            *rs = '0';
    8c4e:	f04f 0a30 	mov.w	sl, #48	; 0x30
            if (*rs == '.') {
    8c52:	46f1      	mov	r9, lr
    8c54:	f819 8901 	ldrb.w	r8, [r9], #-1
    8c58:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
    8c5c:	f000 80e6 	beq.w	8e2c <mp_format_float+0x414>
            if (*rs < '0' || *rs > '9') {
    8c60:	f1a8 0b30 	sub.w	fp, r8, #48	; 0x30
    8c64:	f1bb 0f09 	cmp.w	fp, #9
    8c68:	f240 80d2 	bls.w	8e10 <mp_format_float+0x3f8>
                rs++; // So we sit on the digit to the right of the sign
    8c6c:	f10e 0001 	add.w	r0, lr, #1
        if (*rs == '0') {
    8c70:	f890 e000 	ldrb.w	lr, [r0]
    8c74:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    8c78:	d118      	bne.n	8cac <mp_format_float+0x294>
            if (rs[1] == '.' && fmt != 'f') {
    8c7a:	f890 8001 	ldrb.w	r8, [r0, #1]
    8c7e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
    8c82:	f040 80d7 	bne.w	8e34 <mp_format_float+0x41c>
    8c86:	2f66      	cmp	r7, #102	; 0x66
    8c88:	f000 80d4 	beq.w	8e34 <mp_format_float+0x41c>
                if (e_sign == '-') {
    8c8c:	2e2d      	cmp	r6, #45	; 0x2d
                rs[0] = '.';
    8c8e:	f880 8000 	strb.w	r8, [r0]
                rs[1] = '0';
    8c92:	f880 e001 	strb.w	lr, [r0, #1]
                if (e_sign == '-') {
    8c96:	f040 80cb 	bne.w	8e30 <mp_format_float+0x418>
                        e_sign = '+';
    8c9a:	3d01      	subs	r5, #1
    8c9c:	bf08      	it	eq
    8c9e:	262b      	moveq	r6, #43	; 0x2b
            char *ss = s;
    8ca0:	4627      	mov	r7, r4
            while (ss > rs) {
    8ca2:	42b8      	cmp	r0, r7
    8ca4:	f0c0 80c8 	bcc.w	8e38 <mp_format_float+0x420>
            *rs = '1';
    8ca8:	2731      	movs	r7, #49	; 0x31
    8caa:	7007      	strb	r7, [r0, #0]
    assert((size_t)(s + 1 - buf) <= buf_size);
    8cac:	9902      	ldr	r1, [sp, #8]
    8cae:	1c60      	adds	r0, r4, #1
    8cb0:	1a40      	subs	r0, r0, r1
    8cb2:	9901      	ldr	r1, [sp, #4]
    8cb4:	4288      	cmp	r0, r1
    8cb6:	f240 80c4 	bls.w	8e42 <mp_format_float+0x42a>
    8cba:	4b43      	ldr	r3, [pc, #268]	; (8dc8 <mp_format_float+0x3b0>)
    8cbc:	4a43      	ldr	r2, [pc, #268]	; (8dcc <mp_format_float+0x3b4>)
    8cbe:	f44f 71c8 	mov.w	r1, #400	; 0x190
    assert((size_t)(s + 1 - buf) <= buf_size);
    8cc2:	4843      	ldr	r0, [pc, #268]	; (8dd0 <mp_format_float+0x3b8>)
    8cc4:	f00f fc4a 	bl	1855c <__assert_func>
            f *= FPCONST(10.0);
    8cc8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    8ccc:	ee20 0a27 	vmul.f32	s0, s0, s15
            e++;
    8cd0:	3501      	adds	r5, #1
        char e_sign_char = '-';
    8cd2:	262d      	movs	r6, #45	; 0x2d
    8cd4:	e795      	b.n	8c02 <mp_format_float+0x1ea>
                *s++ = '.';
    8cd6:	262e      	movs	r6, #46	; 0x2e
    8cd8:	7066      	strb	r6, [r4, #1]
                while (--e && num_digits) {
    8cda:	469e      	mov	lr, r3
                    *s++ = '0';
    8cdc:	2630      	movs	r6, #48	; 0x30
                while (--e && num_digits) {
    8cde:	3d01      	subs	r5, #1
    8ce0:	4664      	mov	r4, ip
    8ce2:	f000 8082 	beq.w	8dea <mp_format_float+0x3d2>
    8ce6:	f1be 0f00 	cmp.w	lr, #0
    8cea:	d103      	bne.n	8cf4 <mp_format_float+0x2dc>
    char e_sign = '\0';
    8cec:	4676      	mov	r6, lr
            dec = -1;
    8cee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    8cf2:	e04b      	b.n	8d8c <mp_format_float+0x374>
                    *s++ = '0';
    8cf4:	f80c 6b01 	strb.w	r6, [ip], #1
                    num_digits--;
    8cf8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    8cfc:	e7ef      	b.n	8cde <mp_format_float+0x2c6>
            if (prec > (buf_remaining - FPMIN_BUF_SIZE)) {
    8cfe:	f1a7 0c05 	sub.w	ip, r7, #5
    8d02:	459c      	cmp	ip, r3
    8d04:	dc75      	bgt.n	8df2 <mp_format_float+0x3da>
                if (fmt == 'g') {
    8d06:	2a67      	cmp	r2, #103	; 0x67
    8d08:	d071      	beq.n	8dee <mp_format_float+0x3d6>
                prec = buf_remaining - FPMIN_BUF_SIZE;
    8d0a:	1fbb      	subs	r3, r7, #6
    fmt |= 0x20; // Force fmt to be lowercase
    8d0c:	4617      	mov	r7, r2
    int num_digits = 0;
    8d0e:	f04f 0e00 	mov.w	lr, #0
    int dec = 0;
    8d12:	46f0      	mov	r8, lr
    8d14:	e6f8      	b.n	8b08 <mp_format_float+0xf0>
    } else if (fp_isless1(f)) {
    8d16:	2600      	movs	r6, #0
    8d18:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8ddc <mp_format_float+0x3c4>
                f *= *neg_pow;
    8d1c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8dd8 <mp_format_float+0x3c0>
        for (e = 0, e1 = FPDECEXP; e1; e1 >>= 1, pos_pow++, neg_pow++) {
    8d20:	f04f 0c20 	mov.w	ip, #32
    8d24:	4635      	mov	r5, r6
            if (*pos_pow <= f) {
    8d26:	ecfe 7a01 	vldmia	lr!, {s15}
    8d2a:	eef4 7ac0 	vcmpe.f32	s15, s0
    8d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                f *= *neg_pow;
    8d32:	bf9c      	itt	ls
    8d34:	eb08 0906 	addls.w	r9, r8, r6
    8d38:	edd9 7a00 	vldrls	s15, [r9]
    8d3c:	f106 0604 	add.w	r6, r6, #4
                e += e1;
    8d40:	bf9c      	itt	ls
    8d42:	4465      	addls	r5, ip
                f *= *neg_pow;
    8d44:	ee20 0a27 	vmulls.f32	s0, s0, s15
        for (e = 0, e1 = FPDECEXP; e1; e1 >>= 1, pos_pow++, neg_pow++) {
    8d48:	2e18      	cmp	r6, #24
    8d4a:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    8d4e:	d1ea      	bne.n	8d26 <mp_format_float+0x30e>
        if ((int)f >= 10) {
    8d50:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    8d54:	ee17 6a90 	vmov	r6, s15
    8d58:	2e09      	cmp	r6, #9
            f *= FPCONST(0.1);
    8d5a:	bfc2      	ittt	gt
    8d5c:	eddf 7a1d 	vldrgt	s15, [pc, #116]	; 8dd4 <mp_format_float+0x3bc>
            e += 1;
    8d60:	3501      	addgt	r5, #1
            f *= FPCONST(0.1);
    8d62:	ee20 0a27 	vmulgt.f32	s0, s0, s15
        if (fmt == 'f') {
    8d66:	2a66      	cmp	r2, #102	; 0x66
    8d68:	d112      	bne.n	8d90 <mp_format_float+0x378>
            if (e >= buf_remaining) {
    8d6a:	42bd      	cmp	r5, r7
    8d6c:	da13      	bge.n	8d96 <mp_format_float+0x37e>
            } else if ((e + prec + 2) > buf_remaining) {
    8d6e:	195e      	adds	r6, r3, r5
    8d70:	3601      	adds	r6, #1
    8d72:	42be      	cmp	r6, r7
    8d74:	db04      	blt.n	8d80 <mp_format_float+0x368>
                prec = buf_remaining - e - 2;
    8d76:	1b7b      	subs	r3, r7, r5
    8d78:	3b02      	subs	r3, #2
                    prec++;
    8d7a:	1c59      	adds	r1, r3, #1
    8d7c:	bf08      	it	eq
    8d7e:	2300      	moveq	r3, #0
            num_digits = prec + e + 1;
    8d80:	eb05 0e03 	add.w	lr, r5, r3
    8d84:	f10e 0e01 	add.w	lr, lr, #1
    8d88:	46a8      	mov	r8, r5
    char e_sign = '\0';
    8d8a:	2600      	movs	r6, #0
            fmt = 'f';
    8d8c:	2766      	movs	r7, #102	; 0x66
    8d8e:	e6bb      	b.n	8b08 <mp_format_float+0xf0>
        if (fmt == 'e' && prec > (buf_remaining - FPMIN_BUF_SIZE)) {
    8d90:	2a65      	cmp	r2, #101	; 0x65
    8d92:	f040 8088 	bne.w	8ea6 <mp_format_float+0x48e>
    8d96:	1f7e      	subs	r6, r7, #5
    8d98:	429e      	cmp	r6, r3
    8d9a:	dc00      	bgt.n	8d9e <mp_format_float+0x386>
            prec = buf_remaining - FPMIN_BUF_SIZE;
    8d9c:	1fbb      	subs	r3, r7, #6
    int num_digits = 0;
    8d9e:	f04f 0e00 	mov.w	lr, #0
            e_sign = '+';
    8da2:	262b      	movs	r6, #43	; 0x2b
    int dec = 0;
    8da4:	46f0      	mov	r8, lr
    8da6:	2765      	movs	r7, #101	; 0x65
    8da8:	e6ae      	b.n	8b08 <mp_format_float+0xf0>
            if (prec + (FPMIN_BUF_SIZE - 1) > buf_remaining) {
    8daa:	1d1e      	adds	r6, r3, #4
    8dac:	42be      	cmp	r6, r7
    8dae:	db00      	blt.n	8db2 <mp_format_float+0x39a>
                prec = buf_remaining - (FPMIN_BUF_SIZE - 1);
    8db0:	1f7b      	subs	r3, r7, #5
        if (fmt == 'g' && e < prec) {
    8db2:	429d      	cmp	r5, r3
    8db4:	db14      	blt.n	8de0 <mp_format_float+0x3c8>
    8db6:	2767      	movs	r7, #103	; 0x67
    int num_digits = 0;
    8db8:	f04f 0e00 	mov.w	lr, #0
            e_sign = '+';
    8dbc:	262b      	movs	r6, #43	; 0x2b
    8dbe:	e7a8      	b.n	8d12 <mp_format_float+0x2fa>
    8dc0:	7f7fffff 	.word	0x7f7fffff
    8dc4:	3f7ffff8 	.word	0x3f7ffff8
    8dc8:	000253f0 	.word	0x000253f0
    8dcc:	000253b0 	.word	0x000253b0
    8dd0:	00025412 	.word	0x00025412
    8dd4:	3dcccccd 	.word	0x3dcccccd
    8dd8:	000253c0 	.word	0x000253c0
    8ddc:	000253d8 	.word	0x000253d8
            prec -= (e + 1);
    8de0:	1c6e      	adds	r6, r5, #1
    8de2:	1b9b      	subs	r3, r3, r6
    8de4:	e7cc      	b.n	8d80 <mp_format_float+0x368>
                e_sign = '+';
    8de6:	262b      	movs	r6, #43	; 0x2b
    8de8:	e6cb      	b.n	8b82 <mp_format_float+0x16a>
    char e_sign = '\0';
    8dea:	462e      	mov	r6, r5
    8dec:	e77f      	b.n	8cee <mp_format_float+0x2d6>
    8dee:	4663      	mov	r3, ip
    8df0:	e78c      	b.n	8d0c <mp_format_float+0x2f4>
    8df2:	f04f 0e00 	mov.w	lr, #0
    8df6:	4617      	mov	r7, r2
            dec = 0;
    8df8:	46f0      	mov	r8, lr
    8dfa:	e687      	b.n	8b0c <mp_format_float+0xf4>
    } else if (fmt == 'g') {
    8dfc:	2f67      	cmp	r7, #103	; 0x67
    8dfe:	f47f ae8a 	bne.w	8b16 <mp_format_float+0xfe>
        if (prec == 0) {
    8e02:	b10b      	cbz	r3, 8e08 <mp_format_float+0x3f0>
    8e04:	469e      	mov	lr, r3
    8e06:	e686      	b.n	8b16 <mp_format_float+0xfe>
            prec = 1;
    8e08:	f04f 0e01 	mov.w	lr, #1
    8e0c:	4673      	mov	r3, lr
    8e0e:	e682      	b.n	8b16 <mp_format_float+0xfe>
            if (*rs < '9') {
    8e10:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
    8e14:	d005      	beq.n	8e22 <mp_format_float+0x40a>
                (*rs)++;
    8e16:	f108 0801 	add.w	r8, r8, #1
    8e1a:	f88e 8000 	strb.w	r8, [lr]
                break;
    8e1e:	4670      	mov	r0, lr
    8e20:	e726      	b.n	8c70 <mp_format_float+0x258>
            if (rs == buf) {
    8e22:	4570      	cmp	r0, lr
            *rs = '0';
    8e24:	f889 a001 	strb.w	sl, [r9, #1]
            if (rs == buf) {
    8e28:	f43f af22 	beq.w	8c70 <mp_format_float+0x258>
    char e_sign = '\0';
    8e2c:	46ce      	mov	lr, r9
    8e2e:	e710      	b.n	8c52 <mp_format_float+0x23a>
                    e++;
    8e30:	3501      	adds	r5, #1
    8e32:	e735      	b.n	8ca0 <mp_format_float+0x288>
    8e34:	4664      	mov	r4, ip
    8e36:	e733      	b.n	8ca0 <mp_format_float+0x288>
                *ss = ss[-1];
    8e38:	f817 cc01 	ldrb.w	ip, [r7, #-1]
    8e3c:	f807 c901 	strb.w	ip, [r7], #-1
    8e40:	e72f      	b.n	8ca2 <mp_format_float+0x28a>
    if (org_fmt == 'g' && prec > 0) {
    8e42:	2a67      	cmp	r2, #103	; 0x67
    8e44:	d10a      	bne.n	8e5c <mp_format_float+0x444>
    8e46:	b14b      	cbz	r3, 8e5c <mp_format_float+0x444>
    8e48:	4623      	mov	r3, r4
    8e4a:	461c      	mov	r4, r3
    8e4c:	3b01      	subs	r3, #1
        while (s[-1] == '0') {
    8e4e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    8e52:	2a30      	cmp	r2, #48	; 0x30
    8e54:	d0f9      	beq.n	8e4a <mp_format_float+0x432>
            s--;
    8e56:	2a2e      	cmp	r2, #46	; 0x2e
    8e58:	bf08      	it	eq
    8e5a:	461c      	moveq	r4, r3
    if (e_sign) {
    8e5c:	b196      	cbz	r6, 8e84 <mp_format_float+0x46c>
    char e_char = 'E' | (fmt & 0x20);   // e_char will match case of fmt
    8e5e:	9b03      	ldr	r3, [sp, #12]
        *s++ = e_sign;
    8e60:	7066      	strb	r6, [r4, #1]
        *s++ = '0' + ((e / 10) % 10);
    8e62:	200a      	movs	r0, #10
    char e_char = 'E' | (fmt & 0x20);   // e_char will match case of fmt
    8e64:	f043 0345 	orr.w	r3, r3, #69	; 0x45
        *s++ = e_char;
    8e68:	7023      	strb	r3, [r4, #0]
        *s++ = '0' + ((e / 10) % 10);
    8e6a:	fb95 f3f0 	sdiv	r3, r5, r0
    8e6e:	fb93 f2f0 	sdiv	r2, r3, r0
        *s++ = '0' + (e % 10);
    8e72:	fb00 5513 	mls	r5, r0, r3, r5
        *s++ = '0' + ((e / 10) % 10);
    8e76:	fb00 3212 	mls	r2, r0, r2, r3
    8e7a:	3230      	adds	r2, #48	; 0x30
        *s++ = '0' + (e % 10);
    8e7c:	3530      	adds	r5, #48	; 0x30
        *s++ = '0' + ((e / 10) % 10);
    8e7e:	70a2      	strb	r2, [r4, #2]
        *s++ = '0' + (e % 10);
    8e80:	70e5      	strb	r5, [r4, #3]
    8e82:	3404      	adds	r4, #4
    *s = '\0';
    8e84:	4623      	mov	r3, r4
    8e86:	2200      	movs	r2, #0
    8e88:	f803 2b01 	strb.w	r2, [r3], #1
    assert((size_t)(s + 1 - buf) <= buf_size);
    8e8c:	9a02      	ldr	r2, [sp, #8]
    8e8e:	1a9b      	subs	r3, r3, r2
    8e90:	9a01      	ldr	r2, [sp, #4]
    8e92:	4293      	cmp	r3, r2
    8e94:	d904      	bls.n	8ea0 <mp_format_float+0x488>
    8e96:	4b06      	ldr	r3, [pc, #24]	; (8eb0 <mp_format_float+0x498>)
    8e98:	4a06      	ldr	r2, [pc, #24]	; (8eb4 <mp_format_float+0x49c>)
    8e9a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    8e9e:	e710      	b.n	8cc2 <mp_format_float+0x2aa>
    return s - buf;
    8ea0:	9b02      	ldr	r3, [sp, #8]
    8ea2:	1ae0      	subs	r0, r4, r3
    8ea4:	e5d0      	b.n	8a48 <mp_format_float+0x30>
        if (fmt == 'g'){
    8ea6:	2a67      	cmp	r2, #103	; 0x67
    8ea8:	f43f af7f 	beq.w	8daa <mp_format_float+0x392>
    8eac:	4617      	mov	r7, r2
    8eae:	e783      	b.n	8db8 <mp_format_float+0x3a0>
    8eb0:	000253f0 	.word	0x000253f0
    8eb4:	000253b0 	.word	0x000253b0

00008eb8 <mp_parse_num_base>:

// find real radix base, and strip preceding '0x', '0o' and '0b'
// puts base in *base, and returns number of bytes to skip the prefix
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    const byte *p = (const byte*)str;
    if (len <= 1) {
    8eb8:	2901      	cmp	r1, #1
    8eba:	d90a      	bls.n	8ed2 <mp_parse_num_base+0x1a>
        goto no_prefix;
    }
    unichar c = *(p++);
    8ebc:	7801      	ldrb	r1, [r0, #0]
    if ((*base == 0 || *base == 16) && c == '0') {
    8ebe:	6813      	ldr	r3, [r2, #0]
    8ec0:	b10b      	cbz	r3, 8ec6 <mp_parse_num_base+0xe>
    8ec2:	2b10      	cmp	r3, #16
    8ec4:	d101      	bne.n	8eca <mp_parse_num_base+0x12>
    8ec6:	2930      	cmp	r1, #48	; 0x30
    8ec8:	d00b      	beq.n	8ee2 <mp_parse_num_base+0x2a>
            if (*base == 0) {
                *base = 10;
            }
            p -= 2;
        }
    } else if (*base == 8 && c == '0') {
    8eca:	2b08      	cmp	r3, #8
    8ecc:	d027      	beq.n	8f1e <mp_parse_num_base+0x66>
        c = *(p++);
        if ((c | 32) != 'o') {
            p -= 2;
        }
    } else if (*base == 2 && c == '0') {
    8ece:	2b02      	cmp	r3, #2
    8ed0:	d02f      	beq.n	8f32 <mp_parse_num_base+0x7a>
            p -= 2;
        }
    } else {
        p--;
    no_prefix:
        if (*base == 0) {
    8ed2:	6813      	ldr	r3, [r2, #0]
    8ed4:	2b00      	cmp	r3, #0
    8ed6:	d138      	bne.n	8f4a <mp_parse_num_base+0x92>
            *base = 10;
    8ed8:	230a      	movs	r3, #10
    8eda:	6013      	str	r3, [r2, #0]
    8edc:	4601      	mov	r1, r0
        }
    }
    return p - (const byte*)str;
}
    8ede:	1a08      	subs	r0, r1, r0
    8ee0:	4770      	bx	lr
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    8ee2:	b410      	push	{r4}
        c = *(p++);
    8ee4:	1c81      	adds	r1, r0, #2
    8ee6:	7844      	ldrb	r4, [r0, #1]
    8ee8:	f044 0420 	orr.w	r4, r4, #32
        if ((c | 32) == 'x') {
    8eec:	2c78      	cmp	r4, #120	; 0x78
    8eee:	d00a      	beq.n	8f06 <mp_parse_num_base+0x4e>
        } else if (*base == 0 && (c | 32) == 'o') {
    8ef0:	b90b      	cbnz	r3, 8ef6 <mp_parse_num_base+0x3e>
    8ef2:	2c6f      	cmp	r4, #111	; 0x6f
    8ef4:	d00d      	beq.n	8f12 <mp_parse_num_base+0x5a>
        } else if (*base == 0 && (c | 32) == 'b') {
    8ef6:	b90b      	cbnz	r3, 8efc <mp_parse_num_base+0x44>
    8ef8:	2c62      	cmp	r4, #98	; 0x62
    8efa:	d00d      	beq.n	8f18 <mp_parse_num_base+0x60>
            if (*base == 0) {
    8efc:	bb1b      	cbnz	r3, 8f46 <mp_parse_num_base+0x8e>
                *base = 10;
    8efe:	230a      	movs	r3, #10
    8f00:	6013      	str	r3, [r2, #0]
            p -= 2;
    8f02:	4601      	mov	r1, r0
    8f04:	e001      	b.n	8f0a <mp_parse_num_base+0x52>
            *base = 16;
    8f06:	2310      	movs	r3, #16
    8f08:	6013      	str	r3, [r2, #0]
}
    8f0a:	1a08      	subs	r0, r1, r0
    8f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    8f10:	4770      	bx	lr
            *base = 8;
    8f12:	2308      	movs	r3, #8
    8f14:	6013      	str	r3, [r2, #0]
    8f16:	e7f8      	b.n	8f0a <mp_parse_num_base+0x52>
            *base = 2;
    8f18:	2302      	movs	r3, #2
    8f1a:	6013      	str	r3, [r2, #0]
    8f1c:	e7f5      	b.n	8f0a <mp_parse_num_base+0x52>
    } else if (*base == 8 && c == '0') {
    8f1e:	2930      	cmp	r1, #48	; 0x30
    8f20:	d1d5      	bne.n	8ece <mp_parse_num_base+0x16>
        c = *(p++);
    8f22:	1c81      	adds	r1, r0, #2
    8f24:	7843      	ldrb	r3, [r0, #1]
        if ((c | 32) != 'o') {
    8f26:	f043 0320 	orr.w	r3, r3, #32
    8f2a:	2b6f      	cmp	r3, #111	; 0x6f
    8f2c:	d0d7      	beq.n	8ede <mp_parse_num_base+0x26>
            p -= 2;
    8f2e:	4601      	mov	r1, r0
    8f30:	e7d5      	b.n	8ede <mp_parse_num_base+0x26>
    } else if (*base == 2 && c == '0') {
    8f32:	2930      	cmp	r1, #48	; 0x30
    8f34:	d1cd      	bne.n	8ed2 <mp_parse_num_base+0x1a>
        c = *(p++);
    8f36:	1c81      	adds	r1, r0, #2
    8f38:	7843      	ldrb	r3, [r0, #1]
        if ((c | 32) != 'b') {
    8f3a:	f043 0320 	orr.w	r3, r3, #32
    8f3e:	2b62      	cmp	r3, #98	; 0x62
    8f40:	d0cd      	beq.n	8ede <mp_parse_num_base+0x26>
            p -= 2;
    8f42:	4601      	mov	r1, r0
    8f44:	e7cb      	b.n	8ede <mp_parse_num_base+0x26>
            p -= 2;
    8f46:	4601      	mov	r1, r0
    8f48:	e7df      	b.n	8f0a <mp_parse_num_base+0x52>
    8f4a:	4601      	mov	r1, r0
    8f4c:	e7c7      	b.n	8ede <mp_parse_num_base+0x26>
	...

00008f50 <raise_exc>:

#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

STATIC NORETURN void raise_exc(mp_obj_t exc, mp_lexer_t *lex) {
    8f50:	b508      	push	{r3, lr}
    8f52:	4604      	mov	r4, r0
    // if lex!=NULL then the parser called us and we need to convert the
    // exception's type from ValueError to SyntaxError and add traceback info
    if (lex != NULL) {
    8f54:	b131      	cbz	r1, 8f64 <raise_exc+0x14>
        ((mp_obj_base_t*)MP_OBJ_TO_PTR(exc))->type = &mp_type_SyntaxError;
    8f56:	4b05      	ldr	r3, [pc, #20]	; (8f6c <raise_exc+0x1c>)
    8f58:	6003      	str	r3, [r0, #0]
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    8f5a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    8f5c:	6809      	ldr	r1, [r1, #0]
    8f5e:	2300      	movs	r3, #0
    8f60:	f003 fe76 	bl	cc50 <mp_obj_exception_add_traceback>
    }
    nlr_raise(exc);
    8f64:	4620      	mov	r0, r4
    8f66:	f7f7 fc8b 	bl	880 <nlr_jump>
    8f6a:	bf00      	nop
    8f6c:	00026c0c 	.word	0x00026c0c

00008f70 <mp_parse_num_integer>:
}

mp_obj_t mp_parse_num_integer(const char *restrict str_, size_t len, int base, mp_lexer_t *lex) {
    8f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    8f74:	461f      	mov	r7, r3
    8f76:	9201      	str	r2, [sp, #4]
    const byte *restrict str = (const byte *)str_;
    const byte *restrict top = str + len;
    8f78:	1846      	adds	r6, r0, r1
    bool neg = false;
    mp_obj_t ret_val;

    // check radix base
    if ((base != 0 && base < 2) || base > 36) {
    8f7a:	b112      	cbz	r2, 8f82 <mp_parse_num_integer+0x12>
    8f7c:	3a02      	subs	r2, #2
    8f7e:	2a22      	cmp	r2, #34	; 0x22
    8f80:	d834      	bhi.n	8fec <mp_parse_num_integer+0x7c>
    8f82:	4605      	mov	r5, r0
        // this won't be reached if lex!=NULL
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    }

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    8f84:	42b5      	cmp	r5, r6
    8f86:	462c      	mov	r4, r5
    8f88:	d239      	bcs.n	8ffe <mp_parse_num_integer+0x8e>
    8f8a:	7820      	ldrb	r0, [r4, #0]
    8f8c:	f7f9 f87c 	bl	2088 <unichar_isspace>
    8f90:	3501      	adds	r5, #1
    8f92:	4680      	mov	r8, r0
    8f94:	2800      	cmp	r0, #0
    8f96:	d1f5      	bne.n	8f84 <mp_parse_num_integer+0x14>
    }

    // parse optional sign
    if (str < top) {
        if (*str == '+') {
    8f98:	7823      	ldrb	r3, [r4, #0]
    8f9a:	2b2b      	cmp	r3, #43	; 0x2b
    8f9c:	d129      	bne.n	8ff2 <mp_parse_num_integer+0x82>
            str++;
    8f9e:	462c      	mov	r4, r5
            neg = true;
        }
    }

    // parse optional base prefix
    str += mp_parse_num_base((const char*)str, top - str, &base);
    8fa0:	1b31      	subs	r1, r6, r4
    8fa2:	4620      	mov	r0, r4
    8fa4:	aa01      	add	r2, sp, #4
    8fa6:	f7ff ff87 	bl	8eb8 <mp_parse_num_base>
    8faa:	1825      	adds	r5, r4, r0
    8fac:	46a9      	mov	r9, r5

    // string should be an integer number
    mp_int_t int_val = 0;
    8fae:	2400      	movs	r4, #0
    const byte *restrict str_val_start = str;
    for (; str < top; str++) {
    8fb0:	45b1      	cmp	r9, r6
    8fb2:	464b      	mov	r3, r9
    8fb4:	d326      	bcc.n	9004 <mp_parse_num_integer+0x94>
            goto overflow;
        }
    }

    // negate value if needed
    if (neg) {
    8fb6:	f1b8 0f00 	cmp.w	r8, #0
    8fba:	d000      	beq.n	8fbe <mp_parse_num_integer+0x4e>
        int_val = -int_val;
    8fbc:	4264      	negs	r4, r4
    }

    // create the small int
    ret_val = MP_OBJ_NEW_SMALL_INT(int_val);
    8fbe:	0064      	lsls	r4, r4, #1
    8fc0:	f044 0401 	orr.w	r4, r4, #1

have_ret_val:
    // check we parsed something
    if (str == str_val_start) {
    8fc4:	42ab      	cmp	r3, r5
    8fc6:	d009      	beq.n	8fdc <mp_parse_num_integer+0x6c>
    8fc8:	461d      	mov	r5, r3
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    8fca:	42b5      	cmp	r5, r6
    8fcc:	462b      	mov	r3, r5
    8fce:	d240      	bcs.n	9052 <mp_parse_num_integer+0xe2>
    8fd0:	7818      	ldrb	r0, [r3, #0]
    8fd2:	3501      	adds	r5, #1
    8fd4:	f7f9 f858 	bl	2088 <unichar_isspace>
    8fd8:	2800      	cmp	r0, #0
    8fda:	d1f6      	bne.n	8fca <mp_parse_num_integer+0x5a>
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_obj_t exc = mp_obj_new_exception_msg(&mp_type_ValueError,
            "invalid syntax for integer");
        raise_exc(exc, lex);
    } else if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_NORMAL) {
        mp_obj_t exc = mp_obj_new_exception_msg_varg(&mp_type_ValueError,
    8fdc:	491f      	ldr	r1, [pc, #124]	; (905c <mp_parse_num_integer+0xec>)
    8fde:	9a01      	ldr	r2, [sp, #4]
    8fe0:	481f      	ldr	r0, [pc, #124]	; (9060 <mp_parse_num_integer+0xf0>)
    8fe2:	f003 fd73 	bl	cacc <mp_obj_new_exception_msg_varg>
            "invalid syntax for integer with base %d", base);
        raise_exc(exc, lex);
    8fe6:	4639      	mov	r1, r7
    8fe8:	f7ff ffb2 	bl	8f50 <raise_exc>
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    8fec:	481d      	ldr	r0, [pc, #116]	; (9064 <mp_parse_num_integer+0xf4>)
    8fee:	f001 f95b 	bl	a2a8 <mp_raise_ValueError>
            str++;
    8ff2:	2b2d      	cmp	r3, #45	; 0x2d
    8ff4:	bf04      	itt	eq
    8ff6:	462c      	moveq	r4, r5
    8ff8:	f04f 0801 	moveq.w	r8, #1
    8ffc:	e7d0      	b.n	8fa0 <mp_parse_num_integer+0x30>
    bool neg = false;
    8ffe:	f04f 0800 	mov.w	r8, #0
    9002:	e7cd      	b.n	8fa0 <mp_parse_num_integer+0x30>
        mp_uint_t dig = *str;
    9004:	f819 2b01 	ldrb.w	r2, [r9], #1
        if ('0' <= dig && dig <= '9') {
    9008:	f1a2 0a30 	sub.w	sl, r2, #48	; 0x30
    900c:	f1ba 0f09 	cmp.w	sl, #9
    9010:	d907      	bls.n	9022 <mp_parse_num_integer+0xb2>
            dig |= 0x20; // make digit lower-case
    9012:	f042 0220 	orr.w	r2, r2, #32
            if ('a' <= dig && dig <= 'z') {
    9016:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    901a:	2919      	cmp	r1, #25
    901c:	d8cb      	bhi.n	8fb6 <mp_parse_num_integer+0x46>
                dig -= 'a' - 10;
    901e:	f1a2 0a57 	sub.w	sl, r2, #87	; 0x57
        if (dig >= (mp_uint_t)base) {
    9022:	9901      	ldr	r1, [sp, #4]
    9024:	4551      	cmp	r1, sl
    9026:	d9c6      	bls.n	8fb6 <mp_parse_num_integer+0x46>
        if (mp_small_int_mul_overflow(int_val, base)) {
    9028:	4620      	mov	r0, r4
    902a:	f00d f839 	bl	160a0 <mp_small_int_mul_overflow>
    902e:	b928      	cbnz	r0, 903c <mp_parse_num_integer+0xcc>
        int_val = int_val * base + dig;
    9030:	9b01      	ldr	r3, [sp, #4]
    9032:	fb03 a404 	mla	r4, r3, r4, sl
        if (!MP_SMALL_INT_FITS(int_val)) {
    9036:	ea94 0344 	eors.w	r3, r4, r4, lsl #1
    903a:	d5b9      	bpl.n	8fb0 <mp_parse_num_integer+0x40>
        const char *s2 = (const char*)str_val_start;
    903c:	a804      	add	r0, sp, #16
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    903e:	9b01      	ldr	r3, [sp, #4]
        const char *s2 = (const char*)str_val_start;
    9040:	f840 5d04 	str.w	r5, [r0, #-4]!
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    9044:	4642      	mov	r2, r8
    9046:	1b71      	subs	r1, r6, r5
    9048:	f004 ffa0 	bl	df8c <mp_obj_new_int_from_str_len>
        str = (const byte*)s2;
    904c:	9b03      	ldr	r3, [sp, #12]
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    904e:	4604      	mov	r4, r0
    9050:	e7b8      	b.n	8fc4 <mp_parse_num_integer+0x54>
    if (str != top) {
    9052:	d1c3      	bne.n	8fdc <mp_parse_num_integer+0x6c>
        mp_str_print_quoted(&print, str_val_start, top - str_val_start, true);
        mp_obj_t exc = mp_obj_new_exception_arg1(&mp_type_ValueError,
            mp_obj_new_str_from_vstr(&mp_type_str, &vstr));
        raise_exc(exc, lex);
    }
}
    9054:	4620      	mov	r0, r4
    9056:	b004      	add	sp, #16
    9058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    905c:	00025466 	.word	0x00025466
    9060:	00026cc0 	.word	0x00026cc0
    9064:	00025443 	.word	0x00025443

00009068 <mp_parse_num_decimal>:
    PARSE_DEC_IN_INTG,
    PARSE_DEC_IN_FRAC,
    PARSE_DEC_IN_EXP,
} parse_dec_in_t;

mp_obj_t mp_parse_num_decimal(const char *str, size_t len, bool allow_imag, bool force_complex, mp_lexer_t *lex) {
    9068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    906c:	ed2d 8b02 	vpush	{d8}
    9070:	b083      	sub	sp, #12
    9072:	4617      	mov	r7, r2
    9074:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    9078:	9301      	str	r3, [sp, #4]
#define DEC_VAL_MAX 1e200
#define SMALL_NORMAL_VAL (1e-307)
#define SMALL_NORMAL_EXP (-307)
#endif

    const char *top = str + len;
    907a:	1846      	adds	r6, r0, r1
    907c:	4604      	mov	r4, r0
    mp_float_t dec_val = 0;
    bool dec_neg = false;
    bool imag = false;

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    907e:	42b4      	cmp	r4, r6
    9080:	4625      	mov	r5, r4
    9082:	f080 8115 	bcs.w	92b0 <mp_parse_num_decimal+0x248>
    9086:	7828      	ldrb	r0, [r5, #0]
    9088:	f7f8 fffe 	bl	2088 <unichar_isspace>
    908c:	3401      	adds	r4, #1
    908e:	4682      	mov	sl, r0
    9090:	2800      	cmp	r0, #0
    9092:	d1f4      	bne.n	907e <mp_parse_num_decimal+0x16>
    }

    // parse optional sign
    if (str < top) {
        if (*str == '+') {
    9094:	782b      	ldrb	r3, [r5, #0]
    9096:	2b2b      	cmp	r3, #43	; 0x2b
    9098:	d109      	bne.n	90ae <mp_parse_num_decimal+0x46>
            str++;
    909a:	4625      	mov	r5, r4
    bool dec_neg = false;
    909c:	4681      	mov	r9, r0
    }

    const char *str_val_start = str;

    // determine what the string is
    if (str < top && (str[0] | 0x20) == 'i') {
    909e:	42b4      	cmp	r4, r6
    90a0:	d30c      	bcc.n	90bc <mp_parse_num_decimal+0x54>
    bool imag = false;
    90a2:	2700      	movs	r7, #0
    90a4:	ed9f 8a89 	vldr	s16, [pc, #548]	; 92cc <mp_parse_num_decimal+0x264>
    90a8:	463b      	mov	r3, r7
    90aa:	463a      	mov	r2, r7
    90ac:	e0ca      	b.n	9244 <mp_parse_num_decimal+0x1dc>
        } else if (*str == '-') {
    90ae:	2b2d      	cmp	r3, #45	; 0x2d
    90b0:	d103      	bne.n	90ba <mp_parse_num_decimal+0x52>
            str++;
    90b2:	4625      	mov	r5, r4
            dec_neg = true;
    90b4:	f04f 0901 	mov.w	r9, #1
    90b8:	e7f1      	b.n	909e <mp_parse_num_decimal+0x36>
    bool dec_neg = false;
    90ba:	4681      	mov	r9, r0
    if (str < top && (str[0] | 0x20) == 'i') {
    90bc:	782b      	ldrb	r3, [r5, #0]
    90be:	f043 0320 	orr.w	r3, r3, #32
    90c2:	2b69      	cmp	r3, #105	; 0x69
    90c4:	d132      	bne.n	912c <mp_parse_num_decimal+0xc4>
        // string starts with 'i', should be 'inf' or 'infinity' (case insensitive)
        if (str + 2 < top && (str[1] | 0x20) == 'n' && (str[2] | 0x20) == 'f') {
    90c6:	1cab      	adds	r3, r5, #2
    90c8:	429e      	cmp	r6, r3
    90ca:	f240 80f4 	bls.w	92b6 <mp_parse_num_decimal+0x24e>
    90ce:	786b      	ldrb	r3, [r5, #1]
    90d0:	f043 0320 	orr.w	r3, r3, #32
    90d4:	2b6e      	cmp	r3, #110	; 0x6e
    90d6:	f040 80ee 	bne.w	92b6 <mp_parse_num_decimal+0x24e>
    90da:	78ab      	ldrb	r3, [r5, #2]
    90dc:	f043 0320 	orr.w	r3, r3, #32
    90e0:	2b66      	cmp	r3, #102	; 0x66
    90e2:	f040 80e8 	bne.w	92b6 <mp_parse_num_decimal+0x24e>
            // inf
            str += 3;
            dec_val = INFINITY;
            if (str + 4 < top && (str[0] | 0x20) == 'i' && (str[1] | 0x20) == 'n' && (str[2] | 0x20) == 'i' && (str[3] | 0x20) == 't' && (str[4] | 0x20) == 'y') {
    90e6:	1deb      	adds	r3, r5, #7
    90e8:	429e      	cmp	r6, r3
            str += 3;
    90ea:	f105 0403 	add.w	r4, r5, #3
            if (str + 4 < top && (str[0] | 0x20) == 'i' && (str[1] | 0x20) == 'n' && (str[2] | 0x20) == 'i' && (str[3] | 0x20) == 't' && (str[4] | 0x20) == 'y') {
    90ee:	d91a      	bls.n	9126 <mp_parse_num_decimal+0xbe>
    90f0:	78eb      	ldrb	r3, [r5, #3]
    90f2:	f043 0320 	orr.w	r3, r3, #32
    90f6:	2b69      	cmp	r3, #105	; 0x69
    90f8:	d115      	bne.n	9126 <mp_parse_num_decimal+0xbe>
    90fa:	792b      	ldrb	r3, [r5, #4]
    90fc:	f043 0320 	orr.w	r3, r3, #32
    9100:	2b6e      	cmp	r3, #110	; 0x6e
    9102:	d110      	bne.n	9126 <mp_parse_num_decimal+0xbe>
    9104:	796b      	ldrb	r3, [r5, #5]
    9106:	f043 0320 	orr.w	r3, r3, #32
    910a:	2b69      	cmp	r3, #105	; 0x69
    910c:	d10b      	bne.n	9126 <mp_parse_num_decimal+0xbe>
    910e:	79ab      	ldrb	r3, [r5, #6]
    9110:	f043 0320 	orr.w	r3, r3, #32
    9114:	2b74      	cmp	r3, #116	; 0x74
    9116:	d106      	bne.n	9126 <mp_parse_num_decimal+0xbe>
    9118:	79eb      	ldrb	r3, [r5, #7]
    911a:	f043 0320 	orr.w	r3, r3, #32
    911e:	2b79      	cmp	r3, #121	; 0x79
    9120:	d101      	bne.n	9126 <mp_parse_num_decimal+0xbe>
                // infinity
                str += 5;
    9122:	f105 0408 	add.w	r4, r5, #8
            dec_val = INFINITY;
    9126:	ed9f 8a6a 	vldr	s16, [pc, #424]	; 92d0 <mp_parse_num_decimal+0x268>
    912a:	e014      	b.n	9156 <mp_parse_num_decimal+0xee>
            }
        }
    } else if (str < top && (str[0] | 0x20) == 'n') {
    912c:	2b6e      	cmp	r3, #110	; 0x6e
    912e:	d13e      	bne.n	91ae <mp_parse_num_decimal+0x146>
        // string starts with 'n', should be 'nan' (case insensitive)
        if (str + 2 < top && (str[1] | 0x20) == 'a' && (str[2] | 0x20) == 'n') {
    9130:	1cab      	adds	r3, r5, #2
    9132:	429e      	cmp	r6, r3
    9134:	f240 80bf 	bls.w	92b6 <mp_parse_num_decimal+0x24e>
    9138:	786b      	ldrb	r3, [r5, #1]
    913a:	f043 0320 	orr.w	r3, r3, #32
    913e:	2b61      	cmp	r3, #97	; 0x61
    9140:	f040 80b9 	bne.w	92b6 <mp_parse_num_decimal+0x24e>
    9144:	78ab      	ldrb	r3, [r5, #2]
    9146:	f043 0320 	orr.w	r3, r3, #32
    914a:	2b6e      	cmp	r3, #110	; 0x6e
    914c:	f040 80b3 	bne.w	92b6 <mp_parse_num_decimal+0x24e>
            // NaN
            str += 3;
            dec_val = MICROPY_FLOAT_C_FUN(nan)("");
    9150:	ed9f 8a60 	vldr	s16, [pc, #384]	; 92d4 <mp_parse_num_decimal+0x26c>
            str += 3;
    9154:	1cec      	adds	r4, r5, #3
        }
        dec_val *= MICROPY_FLOAT_C_FUN(pow)(10, exp_val);
    }

    // negate value if needed
    if (dec_neg) {
    9156:	f1b9 0f00 	cmp.w	r9, #0
    915a:	d001      	beq.n	9160 <mp_parse_num_decimal+0xf8>
        dec_val = -dec_val;
    915c:	eeb1 8a48 	vneg.f32	s16, s16
    }

    // check we parsed something
    if (str == str_val_start) {
    9160:	42ac      	cmp	r4, r5
    9162:	d009      	beq.n	9178 <mp_parse_num_decimal+0x110>
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    9164:	42b4      	cmp	r4, r6
    9166:	4623      	mov	r3, r4
    9168:	f080 8083 	bcs.w	9272 <mp_parse_num_decimal+0x20a>
    916c:	7818      	ldrb	r0, [r3, #0]
    916e:	3401      	adds	r4, #1
    9170:	f7f8 ff8a 	bl	2088 <unichar_isspace>
    9174:	2800      	cmp	r0, #0
    9176:	d1f5      	bne.n	9164 <mp_parse_num_decimal+0xfc>
    } else {
        return mp_obj_new_float(dec_val);
    }

value_error:
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid syntax for number"), lex);
    9178:	4957      	ldr	r1, [pc, #348]	; (92d8 <mp_parse_num_decimal+0x270>)
    917a:	4858      	ldr	r0, [pc, #352]	; (92dc <mp_parse_num_decimal+0x274>)
    917c:	f003 fd16 	bl	cbac <mp_obj_new_exception_msg>
    9180:	4641      	mov	r1, r8
    9182:	f7ff fee5 	bl	8f50 <raise_exc>
                in = PARSE_DEC_IN_EXP;
    9186:	2002      	movs	r0, #2
    9188:	460c      	mov	r4, r1
            mp_uint_t dig = *str++;
    918a:	f894 c000 	ldrb.w	ip, [r4]
            if ('0' <= dig && dig <= '9') {
    918e:	f1ac 0a30 	sub.w	sl, ip, #48	; 0x30
    9192:	f1ba 0f09 	cmp.w	sl, #9
            mp_uint_t dig = *str++;
    9196:	f104 0101 	add.w	r1, r4, #1
            if ('0' <= dig && dig <= '9') {
    919a:	d82b      	bhi.n	91f4 <mp_parse_num_decimal+0x18c>
                if (in == PARSE_DEC_IN_EXP) {
    919c:	2802      	cmp	r0, #2
    919e:	d115      	bne.n	91cc <mp_parse_num_decimal+0x164>
                    exp_val = 10 * exp_val + dig;
    91a0:	fb0b a202 	mla	r2, fp, r2, sl
        while (str < top) {
    91a4:	42b1      	cmp	r1, r6
    91a6:	d3ef      	bcc.n	9188 <mp_parse_num_decimal+0x120>
    bool imag = false;
    91a8:	2700      	movs	r7, #0
    91aa:	460c      	mov	r4, r1
    91ac:	e046      	b.n	923c <mp_parse_num_decimal+0x1d4>
    91ae:	f04f 0e00 	mov.w	lr, #0
    91b2:	462c      	mov	r4, r5
    91b4:	4673      	mov	r3, lr
    91b6:	4672      	mov	r2, lr
    91b8:	4670      	mov	r0, lr
    91ba:	ed9f 8a44 	vldr	s16, [pc, #272]	; 92cc <mp_parse_num_decimal+0x264>
                    if (dec_val < DEC_VAL_MAX) {
    91be:	ed9f 7a48 	vldr	s14, [pc, #288]	; 92e0 <mp_parse_num_decimal+0x278>
                        dec_val = 10 * dec_val + dig;
    91c2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
                    exp_val = 10 * exp_val + dig;
    91c6:	f04f 0b0a 	mov.w	fp, #10
    91ca:	e7de      	b.n	918a <mp_parse_num_decimal+0x122>
                    if (dec_val < DEC_VAL_MAX) {
    91cc:	eeb4 8ac7 	vcmpe.f32	s16, s14
    91d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91d4:	d50b      	bpl.n	91ee <mp_parse_num_decimal+0x186>
                        dec_val = 10 * dec_val + dig;
    91d6:	ee07 aa90 	vmov	s15, sl
    91da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                        if (in == PARSE_DEC_IN_FRAC) {
    91de:	2801      	cmp	r0, #1
                        dec_val = 10 * dec_val + dig;
    91e0:	eee8 7a26 	vfma.f32	s15, s16, s13
    91e4:	eeb0 8a67 	vmov.f32	s16, s15
                        if (in == PARSE_DEC_IN_FRAC) {
    91e8:	d141      	bne.n	926e <mp_parse_num_decimal+0x206>
                            --exp_extra;
    91ea:	3b01      	subs	r3, #1
    91ec:	e7da      	b.n	91a4 <mp_parse_num_decimal+0x13c>
                        if (in == PARSE_DEC_IN_INTG) {
    91ee:	b928      	cbnz	r0, 91fc <mp_parse_num_decimal+0x194>
                            ++exp_extra;
    91f0:	3301      	adds	r3, #1
    91f2:	e7d7      	b.n	91a4 <mp_parse_num_decimal+0x13c>
            } else if (in == PARSE_DEC_IN_INTG && dig == '.') {
    91f4:	b920      	cbnz	r0, 9200 <mp_parse_num_decimal+0x198>
    91f6:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    91fa:	d103      	bne.n	9204 <mp_parse_num_decimal+0x19c>
                in = PARSE_DEC_IN_FRAC;
    91fc:	2001      	movs	r0, #1
    91fe:	e7d1      	b.n	91a4 <mp_parse_num_decimal+0x13c>
            } else if (in != PARSE_DEC_IN_EXP && ((dig | 0x20) == 'e')) {
    9200:	2802      	cmp	r0, #2
    9202:	d013      	beq.n	922c <mp_parse_num_decimal+0x1c4>
    9204:	f04c 0020 	orr.w	r0, ip, #32
    9208:	2865      	cmp	r0, #101	; 0x65
    920a:	d10f      	bne.n	922c <mp_parse_num_decimal+0x1c4>
                if (str < top) {
    920c:	428e      	cmp	r6, r1
    920e:	d95a      	bls.n	92c6 <mp_parse_num_decimal+0x25e>
                    if (str[0] == '+') {
    9210:	7860      	ldrb	r0, [r4, #1]
    9212:	282b      	cmp	r0, #43	; 0x2b
    9214:	d104      	bne.n	9220 <mp_parse_num_decimal+0x1b8>
                        str++;
    9216:	1ca1      	adds	r1, r4, #2
                if (str == top) {
    9218:	42b1      	cmp	r1, r6
    921a:	d0ad      	beq.n	9178 <mp_parse_num_decimal+0x110>
                in = PARSE_DEC_IN_EXP;
    921c:	2002      	movs	r0, #2
    921e:	e7c1      	b.n	91a4 <mp_parse_num_decimal+0x13c>
                    } else if (str[0] == '-') {
    9220:	282d      	cmp	r0, #45	; 0x2d
    9222:	d1b0      	bne.n	9186 <mp_parse_num_decimal+0x11e>
                        str++;
    9224:	1ca1      	adds	r1, r4, #2
                        exp_neg = true;
    9226:	f04f 0e01 	mov.w	lr, #1
    922a:	e7f5      	b.n	9218 <mp_parse_num_decimal+0x1b0>
            } else if (allow_imag && (dig | 0x20) == 'j') {
    922c:	b137      	cbz	r7, 923c <mp_parse_num_decimal+0x1d4>
    922e:	f04c 0c20 	orr.w	ip, ip, #32
    9232:	f1bc 0f6a 	cmp.w	ip, #106	; 0x6a
    9236:	bf0c      	ite	eq
    9238:	460c      	moveq	r4, r1
    923a:	2700      	movne	r7, #0
        if (exp_neg) {
    923c:	f1be 0f00 	cmp.w	lr, #0
    9240:	d000      	beq.n	9244 <mp_parse_num_decimal+0x1dc>
            exp_val = -exp_val;
    9242:	4252      	negs	r2, r2
        exp_val += exp_extra;
    9244:	4413      	add	r3, r2
        if (exp_val < SMALL_NORMAL_EXP) {
    9246:	f113 0f25 	cmn.w	r3, #37	; 0x25
            dec_val *= SMALL_NORMAL_VAL;
    924a:	bfbe      	ittt	lt
    924c:	eddf 7a25 	vldrlt	s15, [pc, #148]	; 92e4 <mp_parse_num_decimal+0x27c>
            exp_val -= SMALL_NORMAL_EXP;
    9250:	3325      	addlt	r3, #37	; 0x25
            dec_val *= SMALL_NORMAL_VAL;
    9252:	ee28 8a27 	vmullt.f32	s16, s16, s15
        dec_val *= MICROPY_FLOAT_C_FUN(pow)(10, exp_val);
    9256:	ee07 3a90 	vmov	s15, r3
    925a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
    925e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    9262:	f015 fb37 	bl	1e8d4 <powf>
    9266:	46ba      	mov	sl, r7
    9268:	ee28 8a00 	vmul.f32	s16, s16, s0
    926c:	e773      	b.n	9156 <mp_parse_num_decimal+0xee>
    926e:	2000      	movs	r0, #0
    9270:	e798      	b.n	91a4 <mp_parse_num_decimal+0x13c>
    if (str != top) {
    9272:	d181      	bne.n	9178 <mp_parse_num_decimal+0x110>
    if (imag) {
    9274:	f1ba 0f00 	cmp.w	sl, #0
    9278:	d00a      	beq.n	9290 <mp_parse_num_decimal+0x228>
        return mp_obj_new_complex(0, dec_val);
    927a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 92cc <mp_parse_num_decimal+0x264>
    927e:	eef0 0a48 	vmov.f32	s1, s16

#else
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "decimal numbers not supported"), lex);
#endif
}
    9282:	b003      	add	sp, #12
    9284:	ecbd 8b02 	vpop	{d8}
    9288:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return mp_obj_new_complex(dec_val, 0);
    928c:	f002 bcd8 	b.w	bc40 <mp_obj_new_complex>
    } else if (force_complex) {
    9290:	9b01      	ldr	r3, [sp, #4]
    9292:	b123      	cbz	r3, 929e <mp_parse_num_decimal+0x236>
        return mp_obj_new_complex(dec_val, 0);
    9294:	eddf 0a0d 	vldr	s1, [pc, #52]	; 92cc <mp_parse_num_decimal+0x264>
    9298:	eeb0 0a48 	vmov.f32	s0, s16
    929c:	e7f1      	b.n	9282 <mp_parse_num_decimal+0x21a>
        return mp_obj_new_float(dec_val);
    929e:	eeb0 0a48 	vmov.f32	s0, s16
}
    92a2:	b003      	add	sp, #12
    92a4:	ecbd 8b02 	vpop	{d8}
    92a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return mp_obj_new_float(dec_val);
    92ac:	f003 bda6 	b.w	cdfc <mp_obj_new_float>
    92b0:	f04f 0900 	mov.w	r9, #0
    92b4:	e6f5      	b.n	90a2 <mp_parse_num_decimal+0x3a>
    if (dec_neg) {
    92b6:	f1b9 0f00 	cmp.w	r9, #0
    92ba:	f43f af5d 	beq.w	9178 <mp_parse_num_decimal+0x110>
    92be:	462c      	mov	r4, r5
    92c0:	ed9f 8a02 	vldr	s16, [pc, #8]	; 92cc <mp_parse_num_decimal+0x264>
    92c4:	e74a      	b.n	915c <mp_parse_num_decimal+0xf4>
                if (str == top) {
    92c6:	f43f af57 	beq.w	9178 <mp_parse_num_decimal+0x110>
    92ca:	e76d      	b.n	91a8 <mp_parse_num_decimal+0x140>
    92cc:	00000000 	.word	0x00000000
    92d0:	7f800000 	.word	0x7f800000
    92d4:	7fc00000 	.word	0x7fc00000
    92d8:	00025429 	.word	0x00025429
    92dc:	00026cc0 	.word	0x00026cc0
    92e0:	60ad78ec 	.word	0x60ad78ec
    92e4:	02081cea 	.word	0x02081cea

000092e8 <mp_emit_glue_new_raw_code>:

#if MICROPY_DEBUG_PRINTERS
mp_uint_t mp_verbose_flag = 0;
#endif

mp_raw_code_t *mp_emit_glue_new_raw_code(void) {
    92e8:	b508      	push	{r3, lr}
    mp_raw_code_t *rc = m_new0(mp_raw_code_t, 1);
    92ea:	2010      	movs	r0, #16
    92ec:	f7f7 faf9 	bl	8e2 <m_malloc0>
    rc->kind = MP_CODE_RESERVED;
    92f0:	7802      	ldrb	r2, [r0, #0]
    92f2:	2101      	movs	r1, #1
    92f4:	f361 0202 	bfi	r2, r1, #0, #3
    92f8:	7002      	strb	r2, [r0, #0]
    return rc;
}
    92fa:	bd08      	pop	{r3, pc}

000092fc <mp_emit_glue_assign_bytecode>:
    #endif
    const mp_uint_t *const_table,
    #if MICROPY_PERSISTENT_CODE_SAVE
    uint16_t n_obj, uint16_t n_raw_code,
    #endif
    mp_uint_t scope_flags) {
    92fc:	b430      	push	{r4, r5}

    rc->kind = MP_CODE_BYTECODE;
    92fe:	7804      	ldrb	r4, [r0, #0]
    9300:	2502      	movs	r5, #2
    9302:	f365 0402 	bfi	r4, r5, #0, #3
    9306:	7004      	strb	r4, [r0, #0]
    rc->scope_flags = scope_flags;
    9308:	8804      	ldrh	r4, [r0, #0]
    930a:	f363 04c9 	bfi	r4, r3, #3, #7
    930e:	8004      	strh	r4, [r0, #0]
    rc->data.u_byte.bytecode = code;
    9310:	6041      	str	r1, [r0, #4]
    rc->data.u_byte.const_table = const_table;
    9312:	6082      	str	r2, [r0, #8]
#if MICROPY_DEBUG_PRINTERS
    if (mp_verbose_flag >= 2) {
        mp_bytecode_print(rc, code, len, const_table);
    }
#endif
}
    9314:	bc30      	pop	{r4, r5}
    9316:	4770      	bx	lr

00009318 <mp_make_function_from_raw_code>:
    (void)fun_len;
#endif
}
#endif

mp_obj_t mp_make_function_from_raw_code(const mp_raw_code_t *rc, mp_obj_t def_args, mp_obj_t def_kw_args) {
    9318:	b538      	push	{r3, r4, r5, lr}
    DEBUG_OP_printf("make_function_from_raw_code %p\n", rc);
    assert(rc != NULL);
    931a:	b308      	cbz	r0, 9360 <mp_make_function_from_raw_code+0x48>
    931c:	460d      	mov	r5, r1
    931e:	4611      	mov	r1, r2
    9320:	4604      	mov	r4, r0

    // def_args must be MP_OBJ_NULL or a tuple
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    9322:	b135      	cbz	r5, 9332 <mp_make_function_from_raw_code+0x1a>
    9324:	f015 0f03 	tst.w	r5, #3
    9328:	d120      	bne.n	936c <mp_make_function_from_raw_code+0x54>
    932a:	682a      	ldr	r2, [r5, #0]
    932c:	4b1a      	ldr	r3, [pc, #104]	; (9398 <mp_make_function_from_raw_code+0x80>)
    932e:	429a      	cmp	r2, r3
    9330:	d11c      	bne.n	936c <mp_make_function_from_raw_code+0x54>

    // def_kw_args must be MP_OBJ_NULL or a dict
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    9332:	b131      	cbz	r1, 9342 <mp_make_function_from_raw_code+0x2a>
    9334:	f011 0f03 	tst.w	r1, #3
    9338:	d11e      	bne.n	9378 <mp_make_function_from_raw_code+0x60>
    933a:	680a      	ldr	r2, [r1, #0]
    933c:	4b17      	ldr	r3, [pc, #92]	; (939c <mp_make_function_from_raw_code+0x84>)
    933e:	429a      	cmp	r2, r3
    9340:	d11a      	bne.n	9378 <mp_make_function_from_raw_code+0x60>
            fun = mp_obj_new_fun_asm(rc->n_pos_args, rc->data.u_native.fun_data, rc->data.u_native.type_sig);
            break;
        #endif
        default:
            // rc->kind should always be set and BYTECODE is the only remaining case
            assert(rc->kind == MP_CODE_BYTECODE);
    9342:	7823      	ldrb	r3, [r4, #0]
    9344:	f003 0307 	and.w	r3, r3, #7
    9348:	2b02      	cmp	r3, #2
    934a:	d11b      	bne.n	9384 <mp_make_function_from_raw_code+0x6c>
            fun = mp_obj_new_fun_bc(def_args, def_kw_args, rc->data.u_byte.bytecode, rc->data.u_byte.const_table);
    934c:	68a3      	ldr	r3, [r4, #8]
    934e:	6862      	ldr	r2, [r4, #4]
    9350:	4628      	mov	r0, r5
    9352:	f004 f8d1 	bl	d4f8 <mp_obj_new_fun_bc>
            break;
    }

    // check for generator functions and if so wrap in generator object
    if ((rc->scope_flags & MP_SCOPE_FLAG_GENERATOR) != 0) {
    9356:	8823      	ldrh	r3, [r4, #0]
    9358:	f013 0f20 	tst.w	r3, #32
    935c:	d118      	bne.n	9390 <mp_make_function_from_raw_code+0x78>
        fun = mp_obj_new_gen_wrap(fun);
    }

    return fun;
}
    935e:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc != NULL);
    9360:	4b0f      	ldr	r3, [pc, #60]	; (93a0 <mp_make_function_from_raw_code+0x88>)
    9362:	4a10      	ldr	r2, [pc, #64]	; (93a4 <mp_make_function_from_raw_code+0x8c>)
    9364:	2179      	movs	r1, #121	; 0x79
    9366:	4810      	ldr	r0, [pc, #64]	; (93a8 <mp_make_function_from_raw_code+0x90>)
    9368:	f00f f8f8 	bl	1855c <__assert_func>
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    936c:	4b0f      	ldr	r3, [pc, #60]	; (93ac <mp_make_function_from_raw_code+0x94>)
    936e:	4a0d      	ldr	r2, [pc, #52]	; (93a4 <mp_make_function_from_raw_code+0x8c>)
    9370:	217c      	movs	r1, #124	; 0x7c
    9372:	480d      	ldr	r0, [pc, #52]	; (93a8 <mp_make_function_from_raw_code+0x90>)
    9374:	f00f f8f2 	bl	1855c <__assert_func>
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    9378:	4b0d      	ldr	r3, [pc, #52]	; (93b0 <mp_make_function_from_raw_code+0x98>)
    937a:	4a0a      	ldr	r2, [pc, #40]	; (93a4 <mp_make_function_from_raw_code+0x8c>)
    937c:	217f      	movs	r1, #127	; 0x7f
    937e:	480a      	ldr	r0, [pc, #40]	; (93a8 <mp_make_function_from_raw_code+0x90>)
    9380:	f00f f8ec 	bl	1855c <__assert_func>
            assert(rc->kind == MP_CODE_BYTECODE);
    9384:	4b0b      	ldr	r3, [pc, #44]	; (93b4 <mp_make_function_from_raw_code+0x9c>)
    9386:	4a07      	ldr	r2, [pc, #28]	; (93a4 <mp_make_function_from_raw_code+0x8c>)
    9388:	2193      	movs	r1, #147	; 0x93
    938a:	4807      	ldr	r0, [pc, #28]	; (93a8 <mp_make_function_from_raw_code+0x90>)
    938c:	f00f f8e6 	bl	1855c <__assert_func>
        fun = mp_obj_new_gen_wrap(fun);
    9390:	f004 f950 	bl	d634 <mp_obj_new_gen_wrap>
    return fun;
    9394:	e7e3      	b.n	935e <mp_make_function_from_raw_code+0x46>
    9396:	bf00      	nop
    9398:	00028844 	.word	0x00028844
    939c:	000265d0 	.word	0x000265d0
    93a0:	000254b0 	.word	0x000254b0
    93a4:	00025490 	.word	0x00025490
    93a8:	000254bc 	.word	0x000254bc
    93ac:	000254d0 	.word	0x000254d0
    93b0:	00025514 	.word	0x00025514
    93b4:	00025560 	.word	0x00025560

000093b8 <mp_make_closure_from_raw_code>:

mp_obj_t mp_make_closure_from_raw_code(const mp_raw_code_t *rc, mp_uint_t n_closed_over, const mp_obj_t *args) {
    93b8:	b538      	push	{r3, r4, r5, lr}
    93ba:	460c      	mov	r4, r1
    93bc:	4615      	mov	r5, r2
    DEBUG_OP_printf("make_closure_from_raw_code %p " UINT_FMT " %p\n", rc, n_closed_over, args);
    // make function object
    mp_obj_t ffun;
    if (n_closed_over & 0x100) {
    93be:	f411 7f80 	tst.w	r1, #256	; 0x100
    93c2:	d10c      	bne.n	93de <mp_make_closure_from_raw_code+0x26>
        // default positional and keyword args given
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    } else {
        // default positional and keyword args not given
        ffun = mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    93c4:	2200      	movs	r2, #0
    93c6:	4611      	mov	r1, r2
    93c8:	f7ff ffa6 	bl	9318 <mp_make_function_from_raw_code>
    }
    // wrap function in closure object
    return mp_obj_new_closure(ffun, n_closed_over & 0xff, args + ((n_closed_over >> 7) & 2));
    93cc:	09e2      	lsrs	r2, r4, #7
    93ce:	f002 0202 	and.w	r2, r2, #2
    93d2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    93d6:	b2e1      	uxtb	r1, r4
    93d8:	f002 fbb0 	bl	bb3c <mp_obj_new_closure>
}
    93dc:	bd38      	pop	{r3, r4, r5, pc}
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    93de:	6852      	ldr	r2, [r2, #4]
    93e0:	6829      	ldr	r1, [r5, #0]
    93e2:	f7ff ff99 	bl	9318 <mp_make_function_from_raw_code>
    93e6:	e7f1      	b.n	93cc <mp_make_closure_from_raw_code+0x14>

000093e8 <mp_init>:
const mp_obj_module_t mp_module___main__ = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&MP_STATE_VM(dict_main),
};

void mp_init(void) {
    93e8:	b570      	push	{r4, r5, r6, lr}
    qstr_init();
    93ea:	f7f8 f87b 	bl	14e4 <qstr_init>

    // no pending exceptions to start with
    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    93ee:	4d18      	ldr	r5, [pc, #96]	; (9450 <mp_init+0x68>)
    93f0:	2400      	movs	r4, #0
    93f2:	646c      	str	r4, [r5, #68]	; 0x44
    mp_init_emergency_exception_buf();
#endif

    #if MICROPY_KBD_EXCEPTION
    // initialise the exception object for raising KeyboardInterrupt
    MP_STATE_VM(mp_kbd_exception).base.type = &mp_type_KeyboardInterrupt;
    93f4:	4b17      	ldr	r3, [pc, #92]	; (9454 <mp_init+0x6c>)
    93f6:	626b      	str	r3, [r5, #36]	; 0x24
    MP_STATE_VM(mp_kbd_exception).traceback_alloc = 0;
    93f8:	852c      	strh	r4, [r5, #40]	; 0x28
    MP_STATE_VM(mp_kbd_exception).traceback_len = 0;
    93fa:	856c      	strh	r4, [r5, #42]	; 0x2a
    MP_STATE_VM(mp_kbd_exception).traceback_data = NULL;
    93fc:	62ec      	str	r4, [r5, #44]	; 0x2c
    MP_STATE_VM(mp_kbd_exception).args = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    93fe:	4b16      	ldr	r3, [pc, #88]	; (9458 <mp_init+0x70>)
    9400:	632b      	str	r3, [r5, #48]	; 0x30
    MICROPY_PORT_INIT_FUNC;
#endif

    #if MICROPY_ENABLE_COMPILER
    // optimization disabled by default
    MP_STATE_VM(mp_optimise_value) = 0;
    9402:	f8c5 423c 	str.w	r4, [r5, #572]	; 0x23c
    #endif

    // init global module dict
    mp_obj_dict_init(&MP_STATE_VM(mp_loaded_modules_dict), 3);
    9406:	2103      	movs	r1, #3
    9408:	f105 0034 	add.w	r0, r5, #52	; 0x34
    940c:	f003 f95c 	bl	c6c8 <mp_obj_dict_init>

    // initialise the __main__ module
    mp_obj_dict_init(&MP_STATE_VM(dict_main), 1);
    9410:	f105 0648 	add.w	r6, r5, #72	; 0x48
    9414:	2101      	movs	r1, #1
    9416:	4630      	mov	r0, r6
    9418:	f003 f956 	bl	c6c8 <mp_obj_dict_init>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(&MP_STATE_VM(dict_main)), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
    941c:	226a      	movs	r2, #106	; 0x6a
    941e:	2172      	movs	r1, #114	; 0x72
    9420:	4630      	mov	r0, r6
    9422:	f003 f9f1 	bl	c808 <mp_obj_dict_store>
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    9426:	602e      	str	r6, [r5, #0]
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    9428:	606e      	str	r6, [r5, #4]
    // start with no extensions to builtins
    MP_STATE_VM(mp_module_builtins_override_dict) = NULL;
    #endif

    #if MICROPY_PY_OS_DUPTERM
    for (size_t i = 0; i < MICROPY_PY_OS_DUPTERM; ++i) {
    942a:	b144      	cbz	r4, 943e <mp_init+0x56>
        MP_STATE_VM(dupterm_objs[i]) = MP_OBJ_NULL;
    }
    MP_STATE_VM(dupterm_arr_obj) = MP_OBJ_NULL;
    942c:	4b08      	ldr	r3, [pc, #32]	; (9450 <mp_init+0x68>)
    942e:	2200      	movs	r2, #0
    9430:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    memset(MP_STATE_VM(fs_user_mount), 0, sizeof(MP_STATE_VM(fs_user_mount)));
    #endif

    #if MICROPY_VFS
    // initialise the VFS sub-system
    MP_STATE_VM(vfs_cur) = NULL;
    9434:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    MP_STATE_VM(vfs_mount_table) = NULL;
    9438:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
    #if MICROPY_PY_THREAD_GIL
    mp_thread_mutex_init(&MP_STATE_VM(gil_mutex));
    #endif

    MP_THREAD_GIL_ENTER();
}
    943c:	bd70      	pop	{r4, r5, r6, pc}
        MP_STATE_VM(dupterm_objs[i]) = MP_OBJ_NULL;
    943e:	f104 0288 	add.w	r2, r4, #136	; 0x88
    9442:	4b03      	ldr	r3, [pc, #12]	; (9450 <mp_init+0x68>)
    9444:	2100      	movs	r1, #0
    9446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < MICROPY_PY_OS_DUPTERM; ++i) {
    944a:	3401      	adds	r4, #1
    944c:	e7ed      	b.n	942a <mp_init+0x42>
    944e:	bf00      	nop
    9450:	200008a0 	.word	0x200008a0
    9454:	000269f0 	.word	0x000269f0
    9458:	00028810 	.word	0x00028810

0000945c <mp_load_global>:
        }
    }
    return mp_load_global(qst);
}

mp_obj_t mp_load_global(qstr qst) {
    945c:	b538      	push	{r3, r4, r5, lr}
    945e:	4605      	mov	r5, r0
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    9460:	4b0e      	ldr	r3, [pc, #56]	; (949c <mp_load_global+0x40>)
    9462:	6858      	ldr	r0, [r3, #4]
    // logic: search globals, builtins
    DEBUG_OP_printf("load global %s\n", qstr_str(qst));
    mp_map_elem_t *elem = mp_map_lookup(&mp_globals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    9464:	00ac      	lsls	r4, r5, #2
    9466:	f044 0402 	orr.w	r4, r4, #2
    946a:	2200      	movs	r2, #0
    946c:	4621      	mov	r1, r4
    946e:	3004      	adds	r0, #4
    9470:	f001 fa62 	bl	a938 <mp_map_lookup>
    if (elem == NULL) {
    9474:	4603      	mov	r3, r0
    9476:	b108      	cbz	r0, 947c <mp_load_global+0x20>
                    "name '%q' is not defined", qst));
            }
        }
    }
    return elem->value;
}
    9478:	6858      	ldr	r0, [r3, #4]
    947a:	bd38      	pop	{r3, r4, r5, pc}
        elem = mp_map_lookup((mp_map_t*)&mp_module_builtins_globals.map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    947c:	2200      	movs	r2, #0
    947e:	4621      	mov	r1, r4
    9480:	4807      	ldr	r0, [pc, #28]	; (94a0 <mp_load_global+0x44>)
    9482:	f001 fa59 	bl	a938 <mp_map_lookup>
        if (elem == NULL) {
    9486:	4603      	mov	r3, r0
    9488:	2800      	cmp	r0, #0
    948a:	d1f5      	bne.n	9478 <mp_load_global+0x1c>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_NameError,
    948c:	462a      	mov	r2, r5
    948e:	4905      	ldr	r1, [pc, #20]	; (94a4 <mp_load_global+0x48>)
    9490:	4805      	ldr	r0, [pc, #20]	; (94a8 <mp_load_global+0x4c>)
    9492:	f003 fb1b 	bl	cacc <mp_obj_new_exception_msg_varg>
    9496:	f7f7 f9f3 	bl	880 <nlr_jump>
    949a:	bf00      	nop
    949c:	200008a0 	.word	0x200008a0
    94a0:	000293ec 	.word	0x000293ec
    94a4:	0002571c 	.word	0x0002571c
    94a8:	00026aa4 	.word	0x00026aa4

000094ac <mp_load_name>:
mp_obj_t mp_load_name(qstr qst) {
    94ac:	b510      	push	{r4, lr}
    94ae:	4604      	mov	r4, r0
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    94b0:	4b09      	ldr	r3, [pc, #36]	; (94d8 <mp_load_name+0x2c>)
    94b2:	6818      	ldr	r0, [r3, #0]
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    94b4:	685b      	ldr	r3, [r3, #4]
    if (mp_locals_get() != mp_globals_get()) {
    94b6:	4298      	cmp	r0, r3
    94b8:	d009      	beq.n	94ce <mp_load_name+0x22>
        mp_map_elem_t *elem = mp_map_lookup(&mp_locals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    94ba:	00a1      	lsls	r1, r4, #2
    94bc:	2200      	movs	r2, #0
    94be:	f041 0102 	orr.w	r1, r1, #2
    94c2:	3004      	adds	r0, #4
    94c4:	f001 fa38 	bl	a938 <mp_map_lookup>
        if (elem != NULL) {
    94c8:	b108      	cbz	r0, 94ce <mp_load_name+0x22>
            return elem->value;
    94ca:	6840      	ldr	r0, [r0, #4]
    94cc:	e002      	b.n	94d4 <mp_load_name+0x28>
    return mp_load_global(qst);
    94ce:	4620      	mov	r0, r4
    94d0:	f7ff ffc4 	bl	945c <mp_load_global>
}
    94d4:	bd10      	pop	{r4, pc}
    94d6:	bf00      	nop
    94d8:	200008a0 	.word	0x200008a0

000094dc <mp_load_build_class>:
            return elem->value;
        }
    }
    #endif
    return MP_OBJ_FROM_PTR(&mp_builtin___build_class___obj);
}
    94dc:	4800      	ldr	r0, [pc, #0]	; (94e0 <mp_load_build_class+0x4>)
    94de:	4770      	bx	lr
    94e0:	00029238 	.word	0x00029238

000094e4 <mp_store_name>:

void mp_store_name(qstr qst, mp_obj_t obj) {
    94e4:	b508      	push	{r3, lr}
    DEBUG_OP_printf("store name %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    94e6:	0080      	lsls	r0, r0, #2
    94e8:	460a      	mov	r2, r1
    94ea:	f040 0102 	orr.w	r1, r0, #2
    94ee:	4b02      	ldr	r3, [pc, #8]	; (94f8 <mp_store_name+0x14>)
    94f0:	6818      	ldr	r0, [r3, #0]
    94f2:	f003 f989 	bl	c808 <mp_obj_dict_store>
}
    94f6:	bd08      	pop	{r3, pc}
    94f8:	200008a0 	.word	0x200008a0

000094fc <mp_delete_name>:

void mp_delete_name(qstr qst) {
    94fc:	b508      	push	{r3, lr}
    DEBUG_OP_printf("delete name %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst));
    94fe:	0081      	lsls	r1, r0, #2
    9500:	f041 0102 	orr.w	r1, r1, #2
    9504:	4b02      	ldr	r3, [pc, #8]	; (9510 <mp_delete_name+0x14>)
    9506:	6818      	ldr	r0, [r3, #0]
    9508:	f003 f9a4 	bl	c854 <mp_obj_dict_delete>
}
    950c:	bd08      	pop	{r3, pc}
    950e:	bf00      	nop
    9510:	200008a0 	.word	0x200008a0

00009514 <mp_store_global>:

void mp_store_global(qstr qst, mp_obj_t obj) {
    9514:	b508      	push	{r3, lr}
    DEBUG_OP_printf("store global %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    9516:	0080      	lsls	r0, r0, #2
    9518:	460a      	mov	r2, r1
    951a:	f040 0102 	orr.w	r1, r0, #2
    951e:	4b02      	ldr	r3, [pc, #8]	; (9528 <mp_store_global+0x14>)
    9520:	6858      	ldr	r0, [r3, #4]
    9522:	f003 f971 	bl	c808 <mp_obj_dict_store>
}
    9526:	bd08      	pop	{r3, pc}
    9528:	200008a0 	.word	0x200008a0

0000952c <mp_delete_global>:

void mp_delete_global(qstr qst) {
    952c:	b508      	push	{r3, lr}
    DEBUG_OP_printf("delete global %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst));
    952e:	0081      	lsls	r1, r0, #2
    9530:	f041 0102 	orr.w	r1, r1, #2
    9534:	4b02      	ldr	r3, [pc, #8]	; (9540 <mp_delete_global+0x14>)
    9536:	6858      	ldr	r0, [r3, #4]
    9538:	f003 f98c 	bl	c854 <mp_obj_dict_delete>
}
    953c:	bd08      	pop	{r3, pc}
    953e:	bf00      	nop
    9540:	200008a0 	.word	0x200008a0

00009544 <mp_unary_op>:

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg) {
    9544:	b570      	push	{r4, r5, r6, lr}
    9546:	b082      	sub	sp, #8
    9548:	460c      	mov	r4, r1
    DEBUG_OP_printf("unary " UINT_FMT " %q %p\n", op, mp_unary_op_method_name[op], arg);

    if (op == MP_UNARY_OP_NOT) {
    954a:	2803      	cmp	r0, #3
    954c:	d00c      	beq.n	9568 <mp_unary_op+0x24>
    954e:	4605      	mov	r5, r0
        // "not x" is the negative of whether "x" is true per Python semantics
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    9550:	f011 0f01 	tst.w	r1, #1
    9554:	d03e      	beq.n	95d4 <mp_unary_op+0x90>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(arg);
    9556:	104b      	asrs	r3, r1, #1
        switch (op) {
    9558:	2807      	cmp	r0, #7
    955a:	d82e      	bhi.n	95ba <mp_unary_op+0x76>
    955c:	e8df f000 	tbb	[pc, r0]
    9560:	2d2d0f7b 	.word	0x2d2d0f7b
    9564:	1c7b2d0b 	.word	0x1c7b2d0b
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    9568:	4608      	mov	r0, r1
    956a:	f001 fe07 	bl	b17c <mp_obj_is_true>
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;

// General API for objects

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    956e:	2800      	cmp	r0, #0
    9570:	d16f      	bne.n	9652 <mp_unary_op+0x10e>
    9572:	4b3b      	ldr	r3, [pc, #236]	; (9660 <mp_unary_op+0x11c>)
    9574:	e044      	b.n	9600 <mp_unary_op+0xbc>
    9576:	2b00      	cmp	r3, #0
    9578:	d06f      	beq.n	965a <mp_unary_op+0x116>
    957a:	4b39      	ldr	r3, [pc, #228]	; (9660 <mp_unary_op+0x11c>)
    957c:	e040      	b.n	9600 <mp_unary_op+0xbc>
                return arg;
            case MP_UNARY_OP_POSITIVE:
                return arg;
            case MP_UNARY_OP_NEGATIVE:
                // check for overflow
                if (val == MP_SMALL_INT_MIN) {
    957e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    9582:	d004      	beq.n	958e <mp_unary_op+0x4a>
                    return mp_obj_new_int(-val);
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    9584:	425b      	negs	r3, r3
    9586:	005b      	lsls	r3, r3, #1
    9588:	f043 0301 	orr.w	r3, r3, #1
    958c:	e038      	b.n	9600 <mp_unary_op+0xbc>
                    return mp_obj_new_int(-val);
    958e:	4258      	negs	r0, r3
    9590:	f004 fcd3 	bl	df3a <mp_obj_new_int>
    9594:	4603      	mov	r3, r0
    9596:	e033      	b.n	9600 <mp_unary_op+0xbc>
                }
            case MP_UNARY_OP_ABS:
                if (val >= 0) {
    9598:	2b00      	cmp	r3, #0
    959a:	db01      	blt.n	95a0 <mp_unary_op+0x5c>
                    return arg;
    959c:	460b      	mov	r3, r1
    959e:	e02f      	b.n	9600 <mp_unary_op+0xbc>
                } else if (val == MP_SMALL_INT_MIN) {
    95a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    95a4:	d004      	beq.n	95b0 <mp_unary_op+0x6c>
                    // check for overflow
                    return mp_obj_new_int(-val);
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    95a6:	425b      	negs	r3, r3
    95a8:	005b      	lsls	r3, r3, #1
    95aa:	f043 0301 	orr.w	r3, r3, #1
    95ae:	e027      	b.n	9600 <mp_unary_op+0xbc>
                    return mp_obj_new_int(-val);
    95b0:	4258      	negs	r0, r3
    95b2:	f004 fcc2 	bl	df3a <mp_obj_new_int>
    95b6:	4603      	mov	r3, r0
    95b8:	e022      	b.n	9600 <mp_unary_op+0xbc>
                }
            default:
                assert(op == MP_UNARY_OP_INVERT);
    95ba:	2802      	cmp	r0, #2
    95bc:	d104      	bne.n	95c8 <mp_unary_op+0x84>
                return MP_OBJ_NEW_SMALL_INT(~val);
    95be:	43db      	mvns	r3, r3
    95c0:	005b      	lsls	r3, r3, #1
    95c2:	f043 0301 	orr.w	r3, r3, #1
    95c6:	e01b      	b.n	9600 <mp_unary_op+0xbc>
                assert(op == MP_UNARY_OP_INVERT);
    95c8:	4b26      	ldr	r3, [pc, #152]	; (9664 <mp_unary_op+0x120>)
    95ca:	4a27      	ldr	r2, [pc, #156]	; (9668 <mp_unary_op+0x124>)
    95cc:	21fa      	movs	r1, #250	; 0xfa
    95ce:	4827      	ldr	r0, [pc, #156]	; (966c <mp_unary_op+0x128>)
    95d0:	f00e ffc4 	bl	1855c <__assert_func>
        }
    } else if (op == MP_UNARY_OP_HASH && MP_OBJ_IS_STR_OR_BYTES(arg)) {
    95d4:	2806      	cmp	r0, #6
    95d6:	d109      	bne.n	95ec <mp_unary_op+0xa8>
    { return ((((mp_int_t)(o)) & 3) == 2); }
    95d8:	f001 0603 	and.w	r6, r1, #3
    95dc:	2e02      	cmp	r6, #2
    95de:	d012      	beq.n	9606 <mp_unary_op+0xc2>
    95e0:	b926      	cbnz	r6, 95ec <mp_unary_op+0xa8>
    95e2:	680b      	ldr	r3, [r1, #0]
    95e4:	699a      	ldr	r2, [r3, #24]
    95e6:	4b22      	ldr	r3, [pc, #136]	; (9670 <mp_unary_op+0x12c>)
    95e8:	429a      	cmp	r2, r3
    95ea:	d00c      	beq.n	9606 <mp_unary_op+0xc2>
            GET_STR_DATA_LEN(arg, data, len);
            h = qstr_compute_hash(data, len);
        }
        return MP_OBJ_NEW_SMALL_INT(h);
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    95ec:	4620      	mov	r0, r4
    95ee:	f001 fac5 	bl	ab7c <mp_obj_get_type>
        if (type->unary_op != NULL) {
    95f2:	6943      	ldr	r3, [r0, #20]
    95f4:	b303      	cbz	r3, 9638 <mp_unary_op+0xf4>
            mp_obj_t result = type->unary_op(op, arg);
    95f6:	4621      	mov	r1, r4
    95f8:	4628      	mov	r0, r5
    95fa:	4798      	blx	r3
            if (result != MP_OBJ_NULL) {
    95fc:	4603      	mov	r3, r0
    95fe:	b1d8      	cbz	r0, 9638 <mp_unary_op+0xf4>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "unsupported type for %q: '%s'",
                mp_unary_op_method_name[op], mp_obj_get_type_str(arg)));
        }
    }
}
    9600:	4618      	mov	r0, r3
    9602:	b002      	add	sp, #8
    9604:	bd70      	pop	{r4, r5, r6, pc}
        GET_STR_HASH(arg, h);
    9606:	2e02      	cmp	r6, #2
    9608:	d00d      	beq.n	9626 <mp_unary_op+0xe2>
    960a:	6860      	ldr	r0, [r4, #4]
        if (h == 0) {
    960c:	b938      	cbnz	r0, 961e <mp_unary_op+0xda>
            GET_STR_DATA_LEN(arg, data, len);
    960e:	2e02      	cmp	r6, #2
    9610:	d00d      	beq.n	962e <mp_unary_op+0xea>
    9612:	68a3      	ldr	r3, [r4, #8]
    9614:	9301      	str	r3, [sp, #4]
    9616:	68e0      	ldr	r0, [r4, #12]
            h = qstr_compute_hash(data, len);
    9618:	9901      	ldr	r1, [sp, #4]
    961a:	f7f7 ff53 	bl	14c4 <qstr_compute_hash>
        return MP_OBJ_NEW_SMALL_INT(h);
    961e:	0040      	lsls	r0, r0, #1
    9620:	f040 0301 	orr.w	r3, r0, #1
    9624:	e7ec      	b.n	9600 <mp_unary_op+0xbc>
        GET_STR_HASH(arg, h);
    9626:	08a0      	lsrs	r0, r4, #2
    9628:	f7f8 f829 	bl	167e <qstr_hash>
    962c:	e7ee      	b.n	960c <mp_unary_op+0xc8>
            GET_STR_DATA_LEN(arg, data, len);
    962e:	a901      	add	r1, sp, #4
    9630:	08a0      	lsrs	r0, r4, #2
    9632:	f7f8 f833 	bl	169c <qstr_data>
    9636:	e7ef      	b.n	9618 <mp_unary_op+0xd4>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    9638:	4b0e      	ldr	r3, [pc, #56]	; (9674 <mp_unary_op+0x130>)
    963a:	5d5d      	ldrb	r5, [r3, r5]
    963c:	4620      	mov	r0, r4
    963e:	f001 fab7 	bl	abb0 <mp_obj_get_type_str>
    9642:	4603      	mov	r3, r0
    9644:	462a      	mov	r2, r5
    9646:	490c      	ldr	r1, [pc, #48]	; (9678 <mp_unary_op+0x134>)
    9648:	480c      	ldr	r0, [pc, #48]	; (967c <mp_unary_op+0x138>)
    964a:	f003 fa3f 	bl	cacc <mp_obj_new_exception_msg_varg>
    964e:	f7f7 f917 	bl	880 <nlr_jump>
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    9652:	4b0b      	ldr	r3, [pc, #44]	; (9680 <mp_unary_op+0x13c>)
    9654:	e7d4      	b.n	9600 <mp_unary_op+0xbc>
                return arg;
    9656:	460b      	mov	r3, r1
    9658:	e7d2      	b.n	9600 <mp_unary_op+0xbc>
    965a:	4b09      	ldr	r3, [pc, #36]	; (9680 <mp_unary_op+0x13c>)
    965c:	e7d0      	b.n	9600 <mp_unary_op+0xbc>
    965e:	bf00      	nop
    9660:	00025f4c 	.word	0x00025f4c
    9664:	00025840 	.word	0x00025840
    9668:	00025598 	.word	0x00025598
    966c:	0002585c 	.word	0x0002585c
    9670:	000106e5 	.word	0x000106e5
    9674:	00028e0c 	.word	0x00028e0c
    9678:	00025870 	.word	0x00025870
    967c:	00026c84 	.word	0x00026c84
    9680:	00025f44 	.word	0x00025f44

00009684 <mp_call_function_n_kw>:
    args[1] = arg2;
    return mp_call_function_n_kw(fun, 2, 0, args);
}

// args contains, eg: arg0  arg1  key0  value0  key1  value1
mp_obj_t mp_call_function_n_kw(mp_obj_t fun_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    9684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9688:	4605      	mov	r5, r0
    968a:	460e      	mov	r6, r1
    968c:	4617      	mov	r7, r2
    968e:	4698      	mov	r8, r3
    // passing to the function arrays of fixed and keyword arguments

    DEBUG_OP_printf("calling function %p(n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", fun_in, n_args, n_kw, args);

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(fun_in);
    9690:	f001 fa74 	bl	ab7c <mp_obj_get_type>

    // do the call
    if (type->call != NULL) {
    9694:	6904      	ldr	r4, [r0, #16]
    9696:	b134      	cbz	r4, 96a6 <mp_call_function_n_kw+0x22>
        return type->call(fun_in, n_args, n_kw, args);
    9698:	4643      	mov	r3, r8
    969a:	463a      	mov	r2, r7
    969c:	4631      	mov	r1, r6
    969e:	4628      	mov	r0, r5
    96a0:	47a0      	blx	r4
        mp_raise_TypeError("object not callable");
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not callable", mp_obj_get_type_str(fun_in)));
    }
}
    96a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    96a6:	4628      	mov	r0, r5
    96a8:	f001 fa82 	bl	abb0 <mp_obj_get_type_str>
    96ac:	4602      	mov	r2, r0
    96ae:	4903      	ldr	r1, [pc, #12]	; (96bc <mp_call_function_n_kw+0x38>)
    96b0:	4803      	ldr	r0, [pc, #12]	; (96c0 <mp_call_function_n_kw+0x3c>)
    96b2:	f003 fa0b 	bl	cacc <mp_obj_new_exception_msg_varg>
    96b6:	f7f7 f8e3 	bl	880 <nlr_jump>
    96ba:	bf00      	nop
    96bc:	00025678 	.word	0x00025678
    96c0:	00026c84 	.word	0x00026c84

000096c4 <mp_call_function_0>:
mp_obj_t mp_call_function_0(mp_obj_t fun) {
    96c4:	b508      	push	{r3, lr}
    return mp_call_function_n_kw(fun, 0, 0, NULL);
    96c6:	2300      	movs	r3, #0
    96c8:	461a      	mov	r2, r3
    96ca:	4619      	mov	r1, r3
    96cc:	f7ff ffda 	bl	9684 <mp_call_function_n_kw>
}
    96d0:	bd08      	pop	{r3, pc}

000096d2 <mp_call_function_1>:
mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg) {
    96d2:	b500      	push	{lr}
    96d4:	b083      	sub	sp, #12
    96d6:	ab02      	add	r3, sp, #8
    96d8:	f843 1d04 	str.w	r1, [r3, #-4]!
    return mp_call_function_n_kw(fun, 1, 0, &arg);
    96dc:	2200      	movs	r2, #0
    96de:	2101      	movs	r1, #1
    96e0:	f7ff ffd0 	bl	9684 <mp_call_function_n_kw>
}
    96e4:	b003      	add	sp, #12
    96e6:	f85d fb04 	ldr.w	pc, [sp], #4

000096ea <mp_call_method_n_kw>:

// args contains: fun  self/NULL  arg(0)  ...  arg(n_args-2)  arg(n_args-1)  kw_key(0)  kw_val(0)  ... kw_key(n_kw-1)  kw_val(n_kw-1)
// if n_args==0 and n_kw==0 then there are only fun and self/NULL
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args) {
    96ea:	b538      	push	{r3, r4, r5, lr}
    96ec:	4615      	mov	r5, r2
    DEBUG_OP_printf("call method (fun=%p, self=%p, n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", args[0], args[1], n_args, n_kw, args);
    int adjust = (args[1] == MP_OBJ_NULL) ? 0 : 1;
    96ee:	6854      	ldr	r4, [r2, #4]
    96f0:	3400      	adds	r4, #0
    96f2:	bf18      	it	ne
    96f4:	2401      	movne	r4, #1
    return mp_call_function_n_kw(args[0], n_args + adjust, n_kw, args + 2 - adjust);
    96f6:	07a2      	lsls	r2, r4, #30
    96f8:	1b12      	subs	r2, r2, r4
    96fa:	0093      	lsls	r3, r2, #2
    96fc:	3308      	adds	r3, #8
    96fe:	442b      	add	r3, r5
    9700:	460a      	mov	r2, r1
    9702:	1821      	adds	r1, r4, r0
    9704:	6828      	ldr	r0, [r5, #0]
    9706:	f7ff ffbd 	bl	9684 <mp_call_function_n_kw>
}
    970a:	bd38      	pop	{r3, r4, r5, pc}

0000970c <mp_convert_member_lookup>:

// Given a member that was extracted from an instance, convert it correctly
// and put the result in the dest[] array for a possible method call.
// Conversion means dealing with static/class methods, callables, and values.
// see http://docs.python.org/3/howto/descriptor.html
void mp_convert_member_lookup(mp_obj_t self, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest) {
    970c:	b570      	push	{r4, r5, r6, lr}
    970e:	4614      	mov	r4, r2
    9710:	461d      	mov	r5, r3
    if (MP_OBJ_IS_TYPE(member, &mp_type_staticmethod)) {
    9712:	f012 0303 	ands.w	r3, r2, #3
    9716:	d103      	bne.n	9720 <mp_convert_member_lookup+0x14>
    9718:	6816      	ldr	r6, [r2, #0]
    971a:	4a18      	ldr	r2, [pc, #96]	; (977c <mp_convert_member_lookup+0x70>)
    971c:	4296      	cmp	r6, r2
    971e:	d01c      	beq.n	975a <mp_convert_member_lookup+0x4e>
        // return just the function
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_classmethod)) {
    9720:	b91b      	cbnz	r3, 972a <mp_convert_member_lookup+0x1e>
    9722:	6826      	ldr	r6, [r4, #0]
    9724:	4a16      	ldr	r2, [pc, #88]	; (9780 <mp_convert_member_lookup+0x74>)
    9726:	4296      	cmp	r6, r2
    9728:	d01a      	beq.n	9760 <mp_convert_member_lookup+0x54>
        if (self != MP_OBJ_NULL) {
            type = mp_obj_get_type(self);
        }
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
        dest[1] = MP_OBJ_FROM_PTR(type);
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_type)) {
    972a:	b91b      	cbnz	r3, 9734 <mp_convert_member_lookup+0x28>
    972c:	6821      	ldr	r1, [r4, #0]
    972e:	4a15      	ldr	r2, [pc, #84]	; (9784 <mp_convert_member_lookup+0x78>)
    9730:	4291      	cmp	r1, r2
    9732:	d01d      	beq.n	9770 <mp_convert_member_lookup+0x64>
        // Don't try to bind types (even though they're callable)
        dest[0] = member;
    } else if (MP_OBJ_IS_FUN(member)
    9734:	b92b      	cbnz	r3, 9742 <mp_convert_member_lookup+0x36>
    9736:	6822      	ldr	r2, [r4, #0]
    9738:	6851      	ldr	r1, [r2, #4]
    973a:	f240 12a7 	movw	r2, #423	; 0x1a7
    973e:	4291      	cmp	r1, r2
    9740:	d018      	beq.n	9774 <mp_convert_member_lookup+0x68>
        || (MP_OBJ_IS_OBJ(member)
    9742:	b943      	cbnz	r3, 9756 <mp_convert_member_lookup+0x4a>
            && (((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_closure
    9744:	6823      	ldr	r3, [r4, #0]
    9746:	685b      	ldr	r3, [r3, #4]
    9748:	f240 1279 	movw	r2, #377	; 0x179
    974c:	4293      	cmp	r3, r2
    974e:	d011      	beq.n	9774 <mp_convert_member_lookup+0x68>
                || ((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_generator))) {
    9750:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
    9754:	d00e      	beq.n	9774 <mp_convert_member_lookup+0x68>
            dest[0] = member;
            dest[1] = self;
        }
    } else {
        // class member is a value, so just return that value
        dest[0] = member;
    9756:	602c      	str	r4, [r5, #0]
    }
}
    9758:	bd70      	pop	{r4, r5, r6, pc}
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    975a:	6863      	ldr	r3, [r4, #4]
    975c:	602b      	str	r3, [r5, #0]
    975e:	e7fb      	b.n	9758 <mp_convert_member_lookup+0x4c>
        if (self != MP_OBJ_NULL) {
    9760:	b110      	cbz	r0, 9768 <mp_convert_member_lookup+0x5c>
            type = mp_obj_get_type(self);
    9762:	f001 fa0b 	bl	ab7c <mp_obj_get_type>
    9766:	4601      	mov	r1, r0
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    9768:	6863      	ldr	r3, [r4, #4]
    976a:	602b      	str	r3, [r5, #0]
        dest[1] = MP_OBJ_FROM_PTR(type);
    976c:	6069      	str	r1, [r5, #4]
    976e:	e7f3      	b.n	9758 <mp_convert_member_lookup+0x4c>
        dest[0] = member;
    9770:	602c      	str	r4, [r5, #0]
    9772:	e7f1      	b.n	9758 <mp_convert_member_lookup+0x4c>
            dest[0] = member;
    9774:	602c      	str	r4, [r5, #0]
            dest[1] = self;
    9776:	6068      	str	r0, [r5, #4]
    9778:	e7ee      	b.n	9758 <mp_convert_member_lookup+0x4c>
    977a:	bf00      	nop
    977c:	00028d58 	.word	0x00028d58
    9780:	00028d1c 	.word	0x00028d1c
    9784:	00028dd0 	.word	0x00028dd0

00009788 <mp_load_method_maybe>:

// no attribute found, returns:     dest[0] == MP_OBJ_NULL, dest[1] == MP_OBJ_NULL
// normal attribute found, returns: dest[0] == <attribute>, dest[1] == MP_OBJ_NULL
// method attribute found, returns: dest[0] == <method>,    dest[1] == <self>
void mp_load_method_maybe(mp_obj_t obj, qstr attr, mp_obj_t *dest) {
    9788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    978a:	4607      	mov	r7, r0
    978c:	460d      	mov	r5, r1
    978e:	4614      	mov	r4, r2
    // clear output to indicate no attribute/method found yet
    dest[0] = MP_OBJ_NULL;
    9790:	2300      	movs	r3, #0
    9792:	6013      	str	r3, [r2, #0]
    dest[1] = MP_OBJ_NULL;
    9794:	6053      	str	r3, [r2, #4]

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(obj);
    9796:	f001 f9f1 	bl	ab7c <mp_obj_get_type>
    979a:	4606      	mov	r6, r0
    } else if (attr == MP_QSTR___class__) {
        // a.__class__ is equivalent to type(a)
        dest[0] = MP_OBJ_FROM_PTR(type);
#endif

    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    979c:	2d1e      	cmp	r5, #30
    979e:	d006      	beq.n	97ae <mp_load_method_maybe+0x26>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
        dest[1] = obj;

    } else if (type->attr != NULL) {
    97a0:	69f3      	ldr	r3, [r6, #28]
    97a2:	b15b      	cbz	r3, 97bc <mp_load_method_maybe+0x34>
        // this type can do its own load, so call it
        type->attr(obj, attr, dest);
    97a4:	4622      	mov	r2, r4
    97a6:	4629      	mov	r1, r5
    97a8:	4638      	mov	r0, r7
    97aa:	4798      	blx	r3
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
        if (elem != NULL) {
            mp_convert_member_lookup(obj, type, elem->value, dest);
        }
    }
}
    97ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    97ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
    97b0:	2b00      	cmp	r3, #0
    97b2:	d0f5      	beq.n	97a0 <mp_load_method_maybe+0x18>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
    97b4:	4b10      	ldr	r3, [pc, #64]	; (97f8 <mp_load_method_maybe+0x70>)
    97b6:	6023      	str	r3, [r4, #0]
        dest[1] = obj;
    97b8:	6067      	str	r7, [r4, #4]
    97ba:	e7f7      	b.n	97ac <mp_load_method_maybe+0x24>
    } else if (type->locals_dict != NULL) {
    97bc:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    97be:	2800      	cmp	r0, #0
    97c0:	d0f4      	beq.n	97ac <mp_load_method_maybe+0x24>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    97c2:	6802      	ldr	r2, [r0, #0]
    97c4:	4b0d      	ldr	r3, [pc, #52]	; (97fc <mp_load_method_maybe+0x74>)
    97c6:	429a      	cmp	r2, r3
    97c8:	d10f      	bne.n	97ea <mp_load_method_maybe+0x62>
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    97ca:	00a9      	lsls	r1, r5, #2
    97cc:	2200      	movs	r2, #0
    97ce:	f041 0102 	orr.w	r1, r1, #2
    97d2:	3004      	adds	r0, #4
    97d4:	f001 f8b0 	bl	a938 <mp_map_lookup>
        if (elem != NULL) {
    97d8:	2800      	cmp	r0, #0
    97da:	d0e7      	beq.n	97ac <mp_load_method_maybe+0x24>
            mp_convert_member_lookup(obj, type, elem->value, dest);
    97dc:	4623      	mov	r3, r4
    97de:	6842      	ldr	r2, [r0, #4]
    97e0:	4631      	mov	r1, r6
    97e2:	4638      	mov	r0, r7
    97e4:	f7ff ff92 	bl	970c <mp_convert_member_lookup>
}
    97e8:	e7e0      	b.n	97ac <mp_load_method_maybe+0x24>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    97ea:	4b05      	ldr	r3, [pc, #20]	; (9800 <mp_load_method_maybe+0x78>)
    97ec:	4a05      	ldr	r2, [pc, #20]	; (9804 <mp_load_method_maybe+0x7c>)
    97ee:	f44f 6184 	mov.w	r1, #1056	; 0x420
    97f2:	4805      	ldr	r0, [pc, #20]	; (9808 <mp_load_method_maybe+0x80>)
    97f4:	f00e feb2 	bl	1855c <__assert_func>
    97f8:	000292f8 	.word	0x000292f8
    97fc:	000265d0 	.word	0x000265d0
    9800:	00025784 	.word	0x00025784
    9804:	000255c4 	.word	0x000255c4
    9808:	0002585c 	.word	0x0002585c

0000980c <mp_load_method>:

void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest) {
    980c:	b570      	push	{r4, r5, r6, lr}
    980e:	4604      	mov	r4, r0
    9810:	460e      	mov	r6, r1
    9812:	4615      	mov	r5, r2
    DEBUG_OP_printf("load method %p.%s\n", base, qstr_str(attr));

    mp_load_method_maybe(base, attr, dest);
    9814:	f7ff ffb8 	bl	9788 <mp_load_method_maybe>

    if (dest[0] == MP_OBJ_NULL) {
    9818:	682b      	ldr	r3, [r5, #0]
    981a:	b103      	cbz	r3, 981e <mp_load_method+0x12>
                    "'%s' object has no attribute '%q'",
                    mp_obj_get_type_str(base), attr));
            }
        }
    }
}
    981c:	bd70      	pop	{r4, r5, r6, pc}
            if (MP_OBJ_IS_TYPE(base, &mp_type_type)) {
    981e:	f014 0f03 	tst.w	r4, #3
    9822:	d103      	bne.n	982c <mp_load_method+0x20>
    9824:	6822      	ldr	r2, [r4, #0]
    9826:	4b0b      	ldr	r3, [pc, #44]	; (9854 <mp_load_method+0x48>)
    9828:	429a      	cmp	r2, r3
    982a:	d00a      	beq.n	9842 <mp_load_method+0x36>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
    982c:	4620      	mov	r0, r4
    982e:	f001 f9bf 	bl	abb0 <mp_obj_get_type_str>
    9832:	4633      	mov	r3, r6
    9834:	4602      	mov	r2, r0
    9836:	4908      	ldr	r1, [pc, #32]	; (9858 <mp_load_method+0x4c>)
    9838:	4808      	ldr	r0, [pc, #32]	; (985c <mp_load_method+0x50>)
    983a:	f003 f947 	bl	cacc <mp_obj_new_exception_msg_varg>
    983e:	f7f7 f81f 	bl	880 <nlr_jump>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
    9842:	4633      	mov	r3, r6
    9844:	6862      	ldr	r2, [r4, #4]
    9846:	4906      	ldr	r1, [pc, #24]	; (9860 <mp_load_method+0x54>)
    9848:	4804      	ldr	r0, [pc, #16]	; (985c <mp_load_method+0x50>)
    984a:	f003 f93f 	bl	cacc <mp_obj_new_exception_msg_varg>
    984e:	f7f7 f817 	bl	880 <nlr_jump>
    9852:	bf00      	nop
    9854:	00028dd0 	.word	0x00028dd0
    9858:	00025760 	.word	0x00025760
    985c:	000267d4 	.word	0x000267d4
    9860:	00025738 	.word	0x00025738

00009864 <mp_load_attr>:
mp_obj_t mp_load_attr(mp_obj_t base, qstr attr) {
    9864:	b500      	push	{lr}
    9866:	b083      	sub	sp, #12
    mp_load_method(base, attr, dest);
    9868:	466a      	mov	r2, sp
    986a:	f7ff ffcf 	bl	980c <mp_load_method>
    if (dest[1] == MP_OBJ_NULL) {
    986e:	9901      	ldr	r1, [sp, #4]
    9870:	b129      	cbz	r1, 987e <mp_load_attr+0x1a>
        return mp_obj_new_bound_meth(dest[0], dest[1]);
    9872:	9800      	ldr	r0, [sp, #0]
    9874:	f002 f8fe 	bl	ba74 <mp_obj_new_bound_meth>
}
    9878:	b003      	add	sp, #12
    987a:	f85d fb04 	ldr.w	pc, [sp], #4
        return dest[0];
    987e:	9800      	ldr	r0, [sp, #0]
    9880:	e7fa      	b.n	9878 <mp_load_attr+0x14>
	...

00009884 <mp_load_method_protected>:

// Acts like mp_load_method_maybe but catches AttributeError, and all other exceptions if requested
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, bool catch_all_exc) {
    9884:	b5f0      	push	{r4, r5, r6, r7, lr}
    9886:	b08d      	sub	sp, #52	; 0x34
    9888:	4605      	mov	r5, r0
    988a:	460e      	mov	r6, r1
    988c:	4617      	mov	r7, r2
    988e:	461c      	mov	r4, r3
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    9890:	4668      	mov	r0, sp
    9892:	f7f6 ffe3 	bl	85c <nlr_push>
    9896:	b110      	cbz	r0, 989e <mp_load_method_protected+0x1a>
        mp_load_method_maybe(obj, attr, dest);
        nlr_pop();
    } else {
        if (!catch_all_exc
    9898:	b14c      	cbz	r4, 98ae <mp_load_method_protected+0x2a>
                MP_OBJ_FROM_PTR(&mp_type_AttributeError))) {
            // Re-raise the exception
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
        }
    }
}
    989a:	b00d      	add	sp, #52	; 0x34
    989c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mp_load_method_maybe(obj, attr, dest);
    989e:	463a      	mov	r2, r7
    98a0:	4631      	mov	r1, r6
    98a2:	4628      	mov	r0, r5
    98a4:	f7ff ff70 	bl	9788 <mp_load_method_maybe>
        nlr_pop();
    98a8:	f7f6 ffd0 	bl	84c <nlr_pop>
    98ac:	e7f5      	b.n	989a <mp_load_method_protected+0x16>
            && !mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type),
    98ae:	4905      	ldr	r1, [pc, #20]	; (98c4 <mp_load_method_protected+0x40>)
    98b0:	9b01      	ldr	r3, [sp, #4]
    98b2:	6818      	ldr	r0, [r3, #0]
    98b4:	f008 ff28 	bl	12708 <mp_obj_is_subclass_fast>
    98b8:	2800      	cmp	r0, #0
    98ba:	d1ee      	bne.n	989a <mp_load_method_protected+0x16>
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
    98bc:	9801      	ldr	r0, [sp, #4]
    98be:	f7f6 ffdf 	bl	880 <nlr_jump>
    98c2:	bf00      	nop
    98c4:	000267d4 	.word	0x000267d4

000098c8 <mp_store_attr>:

void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t value) {
    98c8:	b570      	push	{r4, r5, r6, lr}
    98ca:	b082      	sub	sp, #8
    98cc:	4605      	mov	r5, r0
    98ce:	460c      	mov	r4, r1
    98d0:	4616      	mov	r6, r2
    DEBUG_OP_printf("store attr %p.%s <- %p\n", base, qstr_str(attr), value);
    mp_obj_type_t *type = mp_obj_get_type(base);
    98d2:	f001 f953 	bl	ab7c <mp_obj_get_type>
    if (type->attr != NULL) {
    98d6:	69c3      	ldr	r3, [r0, #28]
    98d8:	b153      	cbz	r3, 98f0 <mp_store_attr+0x28>
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, value};
    98da:	2208      	movs	r2, #8
    98dc:	9200      	str	r2, [sp, #0]
    98de:	9601      	str	r6, [sp, #4]
        type->attr(base, attr, dest);
    98e0:	466a      	mov	r2, sp
    98e2:	4621      	mov	r1, r4
    98e4:	4628      	mov	r0, r5
    98e6:	4798      	blx	r3
        if (dest[0] == MP_OBJ_NULL) {
    98e8:	9b00      	ldr	r3, [sp, #0]
    98ea:	b90b      	cbnz	r3, 98f0 <mp_store_attr+0x28>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
            "'%s' object has no attribute '%q'",
            mp_obj_get_type_str(base), attr));
    }
}
    98ec:	b002      	add	sp, #8
    98ee:	bd70      	pop	{r4, r5, r6, pc}
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
    98f0:	4628      	mov	r0, r5
    98f2:	f001 f95d 	bl	abb0 <mp_obj_get_type_str>
    98f6:	4623      	mov	r3, r4
    98f8:	4602      	mov	r2, r0
    98fa:	4903      	ldr	r1, [pc, #12]	; (9908 <mp_store_attr+0x40>)
    98fc:	4803      	ldr	r0, [pc, #12]	; (990c <mp_store_attr+0x44>)
    98fe:	f003 f8e5 	bl	cacc <mp_obj_new_exception_msg_varg>
    9902:	f7f6 ffbd 	bl	880 <nlr_jump>
    9906:	bf00      	nop
    9908:	00025760 	.word	0x00025760
    990c:	000267d4 	.word	0x000267d4

00009910 <mp_getiter>:

mp_obj_t mp_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    9910:	b570      	push	{r4, r5, r6, lr}
    9912:	b082      	sub	sp, #8
    assert(o_in);
    9914:	b198      	cbz	r0, 993e <mp_getiter+0x2e>
    9916:	460d      	mov	r5, r1
    9918:	4604      	mov	r4, r0
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    991a:	f001 f92f 	bl	ab7c <mp_obj_get_type>
    991e:	4606      	mov	r6, r0

    // Check for native getiter which is the identity.  We handle this case explicitly
    // so we don't unnecessarily allocate any RAM for the iter_buf, which won't be used.
    if (type->getiter == mp_identity_getiter) {
    9920:	6a42      	ldr	r2, [r0, #36]	; 0x24
    9922:	4b19      	ldr	r3, [pc, #100]	; (9988 <mp_getiter+0x78>)
    9924:	429a      	cmp	r2, r3
    9926:	d02d      	beq.n	9984 <mp_getiter+0x74>
        return o_in;
    }

    // if caller did not provide a buffer then allocate one on the heap
    if (iter_buf == NULL) {
    9928:	b185      	cbz	r5, 994c <mp_getiter+0x3c>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    }

    // check for native getiter (corresponds to __iter__)
    if (type->getiter != NULL) {
    992a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    992c:	b19b      	cbz	r3, 9956 <mp_getiter+0x46>
        mp_obj_t iter = type->getiter(o_in, iter_buf);
    992e:	4629      	mov	r1, r5
    9930:	4620      	mov	r0, r4
    9932:	4798      	blx	r3
        if (iter != MP_OBJ_NULL) {
    9934:	4603      	mov	r3, r0
    9936:	b170      	cbz	r0, 9956 <mp_getiter+0x46>
        mp_raise_TypeError("object not iterable");
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not iterable", mp_obj_get_type_str(o_in)));
    }
}
    9938:	4618      	mov	r0, r3
    993a:	b002      	add	sp, #8
    993c:	bd70      	pop	{r4, r5, r6, pc}
    assert(o_in);
    993e:	4b13      	ldr	r3, [pc, #76]	; (998c <mp_getiter+0x7c>)
    9940:	4a13      	ldr	r2, [pc, #76]	; (9990 <mp_getiter+0x80>)
    9942:	f240 4166 	movw	r1, #1126	; 0x466
    9946:	4813      	ldr	r0, [pc, #76]	; (9994 <mp_getiter+0x84>)
    9948:	f00e fe08 	bl	1855c <__assert_func>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    994c:	2010      	movs	r0, #16
    994e:	f7f6 ffb5 	bl	8bc <m_malloc>
    9952:	4605      	mov	r5, r0
    9954:	e7e9      	b.n	992a <mp_getiter+0x1a>
    mp_load_method_maybe(o_in, MP_QSTR___getitem__, dest);
    9956:	466a      	mov	r2, sp
    9958:	210f      	movs	r1, #15
    995a:	4620      	mov	r0, r4
    995c:	f7ff ff14 	bl	9788 <mp_load_method_maybe>
    if (dest[0] != MP_OBJ_NULL) {
    9960:	9b00      	ldr	r3, [sp, #0]
    9962:	b12b      	cbz	r3, 9970 <mp_getiter+0x60>
        return mp_obj_new_getitem_iter(dest, iter_buf);
    9964:	4629      	mov	r1, r5
    9966:	4668      	mov	r0, sp
    9968:	f003 ff96 	bl	d898 <mp_obj_new_getitem_iter>
    996c:	4603      	mov	r3, r0
    996e:	e7e3      	b.n	9938 <mp_getiter+0x28>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    9970:	4620      	mov	r0, r4
    9972:	f001 f91d 	bl	abb0 <mp_obj_get_type_str>
    9976:	4602      	mov	r2, r0
    9978:	4907      	ldr	r1, [pc, #28]	; (9998 <mp_getiter+0x88>)
    997a:	4808      	ldr	r0, [pc, #32]	; (999c <mp_getiter+0x8c>)
    997c:	f003 f8a6 	bl	cacc <mp_obj_new_exception_msg_varg>
    9980:	f7f6 ff7e 	bl	880 <nlr_jump>
        return o_in;
    9984:	4623      	mov	r3, r4
    9986:	e7d7      	b.n	9938 <mp_getiter+0x28>
    9988:	0000b289 	.word	0x0000b289
    998c:	000256c0 	.word	0x000256c0
    9990:	00025580 	.word	0x00025580
    9994:	0002585c 	.word	0x0002585c
    9998:	000256c8 	.word	0x000256c8
    999c:	00026c84 	.word	0x00026c84

000099a0 <mp_iternext_allow_raise>:

// may return MP_OBJ_STOP_ITERATION as an optimisation instead of raise StopIteration()
// may also raise StopIteration()
mp_obj_t mp_iternext_allow_raise(mp_obj_t o_in) {
    99a0:	b510      	push	{r4, lr}
    99a2:	b082      	sub	sp, #8
    99a4:	4604      	mov	r4, r0
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    99a6:	f001 f8e9 	bl	ab7c <mp_obj_get_type>
    if (type->iternext != NULL) {
    99aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    99ac:	b11b      	cbz	r3, 99b6 <mp_iternext_allow_raise+0x16>
        return type->iternext(o_in);
    99ae:	4620      	mov	r0, r4
    99b0:	4798      	blx	r3
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    99b2:	b002      	add	sp, #8
    99b4:	bd10      	pop	{r4, pc}
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    99b6:	466a      	mov	r2, sp
    99b8:	211e      	movs	r1, #30
    99ba:	4620      	mov	r0, r4
    99bc:	f7ff fee4 	bl	9788 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    99c0:	9b00      	ldr	r3, [sp, #0]
    99c2:	b12b      	cbz	r3, 99d0 <mp_iternext_allow_raise+0x30>
            return mp_call_method_n_kw(0, 0, dest);
    99c4:	466a      	mov	r2, sp
    99c6:	2100      	movs	r1, #0
    99c8:	4608      	mov	r0, r1
    99ca:	f7ff fe8e 	bl	96ea <mp_call_method_n_kw>
    99ce:	e7f0      	b.n	99b2 <mp_iternext_allow_raise+0x12>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    99d0:	4620      	mov	r0, r4
    99d2:	f001 f8ed 	bl	abb0 <mp_obj_get_type_str>
    99d6:	4602      	mov	r2, r0
    99d8:	4902      	ldr	r1, [pc, #8]	; (99e4 <mp_iternext_allow_raise+0x44>)
    99da:	4803      	ldr	r0, [pc, #12]	; (99e8 <mp_iternext_allow_raise+0x48>)
    99dc:	f003 f876 	bl	cacc <mp_obj_new_exception_msg_varg>
    99e0:	f7f6 ff4e 	bl	880 <nlr_jump>
    99e4:	000256fc 	.word	0x000256fc
    99e8:	00026c84 	.word	0x00026c84

000099ec <mp_iternext>:

// will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration() (or any subclass thereof)
// may raise other exceptions
mp_obj_t mp_iternext(mp_obj_t o_in) {
    99ec:	b510      	push	{r4, lr}
    99ee:	b08e      	sub	sp, #56	; 0x38
    99f0:	4604      	mov	r4, r0
    MP_STACK_CHECK(); // enumerate, filter, map and zip can recursively call mp_iternext
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    99f2:	f001 f8c3 	bl	ab7c <mp_obj_get_type>
    if (type->iternext != NULL) {
    99f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    99f8:	b12b      	cbz	r3, 9a06 <mp_iternext+0x1a>
        return type->iternext(o_in);
    99fa:	4620      	mov	r0, r4
    99fc:	4798      	blx	r3
    99fe:	4604      	mov	r4, r0
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    9a00:	4620      	mov	r0, r4
    9a02:	b00e      	add	sp, #56	; 0x38
    9a04:	bd10      	pop	{r4, pc}
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    9a06:	466a      	mov	r2, sp
    9a08:	211e      	movs	r1, #30
    9a0a:	4620      	mov	r0, r4
    9a0c:	f7ff febc 	bl	9788 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    9a10:	9b00      	ldr	r3, [sp, #0]
    9a12:	b1bb      	cbz	r3, 9a44 <mp_iternext+0x58>
            if (nlr_push(&nlr) == 0) {
    9a14:	a802      	add	r0, sp, #8
    9a16:	f7f6 ff21 	bl	85c <nlr_push>
    9a1a:	b940      	cbnz	r0, 9a2e <mp_iternext+0x42>
                mp_obj_t ret = mp_call_method_n_kw(0, 0, dest);
    9a1c:	466a      	mov	r2, sp
    9a1e:	2100      	movs	r1, #0
    9a20:	4608      	mov	r0, r1
    9a22:	f7ff fe62 	bl	96ea <mp_call_method_n_kw>
    9a26:	4604      	mov	r4, r0
                nlr_pop();
    9a28:	f7f6 ff10 	bl	84c <nlr_pop>
                return ret;
    9a2c:	e7e8      	b.n	9a00 <mp_iternext+0x14>
                if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    9a2e:	490a      	ldr	r1, [pc, #40]	; (9a58 <mp_iternext+0x6c>)
    9a30:	9b03      	ldr	r3, [sp, #12]
    9a32:	6818      	ldr	r0, [r3, #0]
    9a34:	f008 fe68 	bl	12708 <mp_obj_is_subclass_fast>
    9a38:	b108      	cbz	r0, 9a3e <mp_iternext+0x52>
                    return MP_OBJ_STOP_ITERATION;
    9a3a:	2404      	movs	r4, #4
    9a3c:	e7e0      	b.n	9a00 <mp_iternext+0x14>
                    nlr_jump(nlr.ret_val);
    9a3e:	9803      	ldr	r0, [sp, #12]
    9a40:	f7f6 ff1e 	bl	880 <nlr_jump>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    9a44:	4620      	mov	r0, r4
    9a46:	f001 f8b3 	bl	abb0 <mp_obj_get_type_str>
    9a4a:	4602      	mov	r2, r0
    9a4c:	4903      	ldr	r1, [pc, #12]	; (9a5c <mp_iternext+0x70>)
    9a4e:	4804      	ldr	r0, [pc, #16]	; (9a60 <mp_iternext+0x74>)
    9a50:	f003 f83c 	bl	cacc <mp_obj_new_exception_msg_varg>
    9a54:	f7f6 ff14 	bl	880 <nlr_jump>
    9a58:	00026bd0 	.word	0x00026bd0
    9a5c:	000256fc 	.word	0x000256fc
    9a60:	00026c84 	.word	0x00026c84

00009a64 <mp_call_prepare_args_n_kw_var>:
void mp_call_prepare_args_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args, mp_call_args_t *out_args) {
    9a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a68:	b08b      	sub	sp, #44	; 0x2c
    9a6a:	9303      	str	r3, [sp, #12]
    mp_obj_t fun = *args++;
    9a6c:	6813      	ldr	r3, [r2, #0]
    9a6e:	9302      	str	r3, [sp, #8]
    if (have_self) {
    9a70:	b1e0      	cbz	r0, 9aac <mp_call_prepare_args_n_kw_var+0x48>
        self = *args++; // may be MP_OBJ_NULL
    9a72:	f102 0b08 	add.w	fp, r2, #8
    9a76:	6857      	ldr	r7, [r2, #4]
    uint n_args = n_args_n_kw & 0xff;
    9a78:	fa5f fa81 	uxtb.w	sl, r1
    uint n_kw = (n_args_n_kw >> 8) & 0xff;
    9a7c:	f3c1 2907 	ubfx	r9, r1, #8, #8
    mp_obj_t pos_seq = args[n_args + 2 * n_kw]; // may be MP_OBJ_NULL
    9a80:	ea4f 0349 	mov.w	r3, r9, lsl #1
    9a84:	9301      	str	r3, [sp, #4]
    9a86:	4453      	add	r3, sl
    9a88:	f85b 6023 	ldr.w	r6, [fp, r3, lsl #2]
    mp_obj_t kw_dict = args[n_args + 2 * n_kw + 1]; // may be MP_OBJ_NULL
    9a8c:	3301      	adds	r3, #1
    9a8e:	f85b 8023 	ldr.w	r8, [fp, r3, lsl #2]
    if (kw_dict != MP_OBJ_NULL && MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    9a92:	f1b8 0f00 	cmp.w	r8, #0
    9a96:	d012      	beq.n	9abe <mp_call_prepare_args_n_kw_var+0x5a>
    9a98:	f018 0f03 	tst.w	r8, #3
    9a9c:	d111      	bne.n	9ac2 <mp_call_prepare_args_n_kw_var+0x5e>
    9a9e:	f8d8 2000 	ldr.w	r2, [r8]
    9aa2:	4b98      	ldr	r3, [pc, #608]	; (9d04 <mp_call_prepare_args_n_kw_var+0x2a0>)
    9aa4:	429a      	cmp	r2, r3
    9aa6:	d005      	beq.n	9ab4 <mp_call_prepare_args_n_kw_var+0x50>
    uint kw_dict_len = 0;
    9aa8:	2500      	movs	r5, #0
    9aaa:	e00b      	b.n	9ac4 <mp_call_prepare_args_n_kw_var+0x60>
    9aac:	f102 0b04 	add.w	fp, r2, #4
    mp_obj_t self = MP_OBJ_NULL;
    9ab0:	2700      	movs	r7, #0
    9ab2:	e7e1      	b.n	9a78 <mp_call_prepare_args_n_kw_var+0x14>
        kw_dict_len = mp_obj_dict_len(kw_dict);
    9ab4:	4640      	mov	r0, r8
    9ab6:	f002 fea4 	bl	c802 <mp_obj_dict_len>
    9aba:	4605      	mov	r5, r0
    9abc:	e002      	b.n	9ac4 <mp_call_prepare_args_n_kw_var+0x60>
    uint kw_dict_len = 0;
    9abe:	2500      	movs	r5, #0
    9ac0:	e000      	b.n	9ac4 <mp_call_prepare_args_n_kw_var+0x60>
    9ac2:	2500      	movs	r5, #0
    if (pos_seq == MP_OBJ_NULL) {
    9ac4:	b336      	cbz	r6, 9b14 <mp_call_prepare_args_n_kw_var+0xb0>
    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    9ac6:	f016 0303 	ands.w	r3, r6, #3
    9aca:	d103      	bne.n	9ad4 <mp_call_prepare_args_n_kw_var+0x70>
    9acc:	6831      	ldr	r1, [r6, #0]
    9ace:	4a8e      	ldr	r2, [pc, #568]	; (9d08 <mp_call_prepare_args_n_kw_var+0x2a4>)
    9ad0:	4291      	cmp	r1, r2
    9ad2:	d036      	beq.n	9b42 <mp_call_prepare_args_n_kw_var+0xde>
    9ad4:	b91b      	cbnz	r3, 9ade <mp_call_prepare_args_n_kw_var+0x7a>
    9ad6:	6832      	ldr	r2, [r6, #0]
    9ad8:	4b8c      	ldr	r3, [pc, #560]	; (9d0c <mp_call_prepare_args_n_kw_var+0x2a8>)
    9ada:	429a      	cmp	r2, r3
    9adc:	d031      	beq.n	9b42 <mp_call_prepare_args_n_kw_var+0xde>
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len) + 3;
    9ade:	eb05 0409 	add.w	r4, r5, r9
    9ae2:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
    9ae6:	3404      	adds	r4, #4
static inline void mp_local_free(void *ptr) {
    (void)ptr;
}

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    return m_new(uint8_t, n_bytes);
    9ae8:	00a0      	lsls	r0, r4, #2
    9aea:	f7f6 fee7 	bl	8bc <m_malloc>
    9aee:	4605      	mov	r5, r0
        if (self != MP_OBJ_NULL) {
    9af0:	2f00      	cmp	r7, #0
    9af2:	d077      	beq.n	9be4 <mp_call_prepare_args_n_kw_var+0x180>
            args2[args2_len++] = self;
    9af4:	6007      	str	r7, [r0, #0]
    9af6:	2701      	movs	r7, #1
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    9af8:	ea4f 028a 	mov.w	r2, sl, lsl #2
    9afc:	4659      	mov	r1, fp
    9afe:	eb05 0087 	add.w	r0, r5, r7, lsl #2
    9b02:	f011 fe77 	bl	1b7f4 <memcpy>
        args2_len += n_args;
    9b06:	4457      	add	r7, sl
        mp_obj_t iterable = mp_getiter(pos_seq, &iter_buf);
    9b08:	a906      	add	r1, sp, #24
    9b0a:	4630      	mov	r0, r6
    9b0c:	f7ff ff00 	bl	9910 <mp_getiter>
    9b10:	9000      	str	r0, [sp, #0]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    9b12:	e06c      	b.n	9bee <mp_call_prepare_args_n_kw_var+0x18a>
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len);
    9b14:	eb05 0409 	add.w	r4, r5, r9
    9b18:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
    9b1c:	3401      	adds	r4, #1
    9b1e:	00a0      	lsls	r0, r4, #2
    9b20:	f7f6 fecc 	bl	8bc <m_malloc>
    9b24:	4605      	mov	r5, r0
        if (self != MP_OBJ_NULL) {
    9b26:	b157      	cbz	r7, 9b3e <mp_call_prepare_args_n_kw_var+0xda>
            args2[args2_len++] = self;
    9b28:	6007      	str	r7, [r0, #0]
    9b2a:	2701      	movs	r7, #1
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    9b2c:	ea4f 028a 	mov.w	r2, sl, lsl #2
    9b30:	4659      	mov	r1, fp
    9b32:	eb05 0087 	add.w	r0, r5, r7, lsl #2
    9b36:	f011 fe5d 	bl	1b7f4 <memcpy>
        args2_len += n_args;
    9b3a:	4457      	add	r7, sl
    9b3c:	e028      	b.n	9b90 <mp_call_prepare_args_n_kw_var+0x12c>
    uint args2_len = 0;
    9b3e:	2700      	movs	r7, #0
    9b40:	e7f4      	b.n	9b2c <mp_call_prepare_args_n_kw_var+0xc8>
        mp_obj_get_array(pos_seq, &len, &items);
    9b42:	aa06      	add	r2, sp, #24
    9b44:	a905      	add	r1, sp, #20
    9b46:	4630      	mov	r0, r6
    9b48:	f001 fa5e 	bl	b008 <mp_obj_get_array>
        args2_alloc = 1 + n_args + len + 2 * (n_kw + kw_dict_len);
    9b4c:	9b05      	ldr	r3, [sp, #20]
    9b4e:	eb0a 0403 	add.w	r4, sl, r3
    9b52:	444d      	add	r5, r9
    9b54:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    9b58:	3401      	adds	r4, #1
    9b5a:	00a0      	lsls	r0, r4, #2
    9b5c:	f7f6 feae 	bl	8bc <m_malloc>
    9b60:	4605      	mov	r5, r0
        if (self != MP_OBJ_NULL) {
    9b62:	2f00      	cmp	r7, #0
    9b64:	d03c      	beq.n	9be0 <mp_call_prepare_args_n_kw_var+0x17c>
            args2[args2_len++] = self;
    9b66:	6007      	str	r7, [r0, #0]
    9b68:	2601      	movs	r6, #1
        mp_seq_cat(args2 + args2_len, args, n_args, items, len, mp_obj_t);
    9b6a:	ea4f 028a 	mov.w	r2, sl, lsl #2
    9b6e:	4659      	mov	r1, fp
    9b70:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    9b74:	f011 fe3e 	bl	1b7f4 <memcpy>
    9b78:	eb06 000a 	add.w	r0, r6, sl
    9b7c:	9a05      	ldr	r2, [sp, #20]
    9b7e:	0092      	lsls	r2, r2, #2
    9b80:	9906      	ldr	r1, [sp, #24]
    9b82:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    9b86:	f011 fe35 	bl	1b7f4 <memcpy>
        args2_len += n_args + len;
    9b8a:	9f05      	ldr	r7, [sp, #20]
    9b8c:	4457      	add	r7, sl
    9b8e:	4437      	add	r7, r6
    mp_seq_copy(args2 + args2_len, args + n_args, 2 * n_kw, mp_obj_t);
    9b90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    9b94:	eb0b 018a 	add.w	r1, fp, sl, lsl #2
    9b98:	eb05 0087 	add.w	r0, r5, r7, lsl #2
    9b9c:	f011 fe2a 	bl	1b7f4 <memcpy>
    args2_len += 2 * n_kw;
    9ba0:	9b01      	ldr	r3, [sp, #4]
    9ba2:	443b      	add	r3, r7
    9ba4:	461e      	mov	r6, r3
    if (kw_dict == MP_OBJ_NULL) {
    9ba6:	f1b8 0f00 	cmp.w	r8, #0
    9baa:	f000 809f 	beq.w	9cec <mp_call_prepare_args_n_kw_var+0x288>
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    9bae:	f018 0a03 	ands.w	sl, r8, #3
    9bb2:	d104      	bne.n	9bbe <mp_call_prepare_args_n_kw_var+0x15a>
    9bb4:	f8d8 2000 	ldr.w	r2, [r8]
    9bb8:	4b52      	ldr	r3, [pc, #328]	; (9d04 <mp_call_prepare_args_n_kw_var+0x2a0>)
    9bba:	429a      	cmp	r2, r3
    9bbc:	d026      	beq.n	9c0c <mp_call_prepare_args_n_kw_var+0x1a8>
        mp_load_method(kw_dict, MP_QSTR_keys, dest);
    9bbe:	aa06      	add	r2, sp, #24
    9bc0:	f240 11d5 	movw	r1, #469	; 0x1d5
    9bc4:	4640      	mov	r0, r8
    9bc6:	f7ff fe21 	bl	980c <mp_load_method>
        mp_obj_t iterable = mp_getiter(mp_call_method_n_kw(0, 0, dest), NULL);
    9bca:	aa06      	add	r2, sp, #24
    9bcc:	2100      	movs	r1, #0
    9bce:	4608      	mov	r0, r1
    9bd0:	f7ff fd8b 	bl	96ea <mp_call_method_n_kw>
    9bd4:	2100      	movs	r1, #0
    9bd6:	f7ff fe9b 	bl	9910 <mp_getiter>
    9bda:	4683      	mov	fp, r0
    9bdc:	46a1      	mov	r9, r4
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    9bde:	e06d      	b.n	9cbc <mp_call_prepare_args_n_kw_var+0x258>
    uint args2_len = 0;
    9be0:	2600      	movs	r6, #0
    9be2:	e7c2      	b.n	9b6a <mp_call_prepare_args_n_kw_var+0x106>
    9be4:	2700      	movs	r7, #0
    9be6:	e787      	b.n	9af8 <mp_call_prepare_args_n_kw_var+0x94>
            args2[args2_len++] = item;
    9be8:	f845 6027 	str.w	r6, [r5, r7, lsl #2]
    9bec:	3701      	adds	r7, #1
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    9bee:	9800      	ldr	r0, [sp, #0]
    9bf0:	f7ff fefc 	bl	99ec <mp_iternext>
    9bf4:	4606      	mov	r6, r0
    9bf6:	2804      	cmp	r0, #4
    9bf8:	d0ca      	beq.n	9b90 <mp_call_prepare_args_n_kw_var+0x12c>
            if (args2_len >= args2_alloc) {
    9bfa:	42bc      	cmp	r4, r7
    9bfc:	d8f4      	bhi.n	9be8 <mp_call_prepare_args_n_kw_var+0x184>
}

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    return m_renew(uint8_t, ptr, old_n_bytes, new_n_bytes);
    9bfe:	00e1      	lsls	r1, r4, #3
    9c00:	4628      	mov	r0, r5
    9c02:	f7f6 fe72 	bl	8ea <m_realloc>
    9c06:	4605      	mov	r5, r0
                args2_alloc *= 2;
    9c08:	0064      	lsls	r4, r4, #1
    9c0a:	e7ed      	b.n	9be8 <mp_call_prepare_args_n_kw_var+0x184>
        mp_map_t *map = mp_obj_dict_get_map(kw_dict);
    9c0c:	4640      	mov	r0, r8
    9c0e:	f002 fe4d 	bl	c8ac <mp_obj_dict_get_map>
    9c12:	4683      	mov	fp, r0
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    9c14:	6803      	ldr	r3, [r0, #0]
    9c16:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    9c1a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    9c1e:	42a3      	cmp	r3, r4
    9c20:	d802      	bhi.n	9c28 <mp_call_prepare_args_n_kw_var+0x1c4>
        for (size_t i = 0; i < map->alloc; i++) {
    9c22:	f04f 0800 	mov.w	r8, #0
    9c26:	e016      	b.n	9c56 <mp_call_prepare_args_n_kw_var+0x1f2>
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    9c28:	4b39      	ldr	r3, [pc, #228]	; (9d10 <mp_call_prepare_args_n_kw_var+0x2ac>)
    9c2a:	4a3a      	ldr	r2, [pc, #232]	; (9d14 <mp_call_prepare_args_n_kw_var+0x2b0>)
    9c2c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    9c30:	4839      	ldr	r0, [pc, #228]	; (9d18 <mp_call_prepare_args_n_kw_var+0x2b4>)
    9c32:	f00e fc93 	bl	1855c <__assert_func>
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    9c36:	4653      	mov	r3, sl
    9c38:	e01c      	b.n	9c74 <mp_call_prepare_args_n_kw_var+0x210>
    9c3a:	4653      	mov	r3, sl
    9c3c:	e01a      	b.n	9c74 <mp_call_prepare_args_n_kw_var+0x210>
                args2[args2_len++] = key;
    9c3e:	1c72      	adds	r2, r6, #1
    9c40:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
                args2[args2_len++] = map->table[i].value;
    9c44:	f8db 3008 	ldr.w	r3, [fp, #8]
    9c48:	444b      	add	r3, r9
    9c4a:	3602      	adds	r6, #2
    9c4c:	685b      	ldr	r3, [r3, #4]
    9c4e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
        for (size_t i = 0; i < map->alloc; i++) {
    9c52:	f108 0801 	add.w	r8, r8, #1
    9c56:	f8db 3004 	ldr.w	r3, [fp, #4]
    9c5a:	4543      	cmp	r3, r8
    9c5c:	d946      	bls.n	9cec <mp_call_prepare_args_n_kw_var+0x288>
    9c5e:	f8db 3008 	ldr.w	r3, [fp, #8]
    9c62:	ea4f 09c8 	mov.w	r9, r8, lsl #3
    9c66:	f853 0038 	ldr.w	r0, [r3, r8, lsl #3]
    9c6a:	2800      	cmp	r0, #0
    9c6c:	d0e5      	beq.n	9c3a <mp_call_prepare_args_n_kw_var+0x1d6>
    9c6e:	2808      	cmp	r0, #8
    9c70:	d0e1      	beq.n	9c36 <mp_call_prepare_args_n_kw_var+0x1d2>
    9c72:	2301      	movs	r3, #1
            if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    9c74:	f013 0f01 	tst.w	r3, #1
    9c78:	d0eb      	beq.n	9c52 <mp_call_prepare_args_n_kw_var+0x1ee>
    { return ((((mp_int_t)(o)) & 3) == 2); }
    9c7a:	f000 0303 	and.w	r3, r0, #3
                if (!MP_OBJ_IS_QSTR(key)) {
    9c7e:	2b02      	cmp	r3, #2
    9c80:	d0dd      	beq.n	9c3e <mp_call_prepare_args_n_kw_var+0x1da>
                    key = mp_obj_str_intern_checked(key);
    9c82:	f007 fb9f 	bl	113c4 <mp_obj_str_intern_checked>
    9c86:	e7da      	b.n	9c3e <mp_call_prepare_args_n_kw_var+0x1da>
    9c88:	ea4f 0189 	mov.w	r1, r9, lsl #2
    9c8c:	4628      	mov	r0, r5
    9c8e:	f7f6 fe2c 	bl	8ea <m_realloc>
    9c92:	4605      	mov	r5, r0
    9c94:	f004 0303 	and.w	r3, r4, #3
            if (!MP_OBJ_IS_QSTR(key)) {
    9c98:	2b02      	cmp	r3, #2
    9c9a:	d121      	bne.n	9ce0 <mp_call_prepare_args_n_kw_var+0x27c>
            mp_load_method(kw_dict, MP_QSTR___getitem__, dest);
    9c9c:	aa06      	add	r2, sp, #24
    9c9e:	210f      	movs	r1, #15
    9ca0:	4640      	mov	r0, r8
    9ca2:	f7ff fdb3 	bl	980c <mp_load_method>
            dest[2] = key;
    9ca6:	9408      	str	r4, [sp, #32]
            mp_obj_t value = mp_call_method_n_kw(1, 0, dest);
    9ca8:	aa06      	add	r2, sp, #24
    9caa:	2100      	movs	r1, #0
    9cac:	2001      	movs	r0, #1
    9cae:	f7ff fd1c 	bl	96ea <mp_call_method_n_kw>
            args2[args2_len++] = key;
    9cb2:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
            args2[args2_len++] = value;
    9cb6:	3602      	adds	r6, #2
    9cb8:	f845 002a 	str.w	r0, [r5, sl, lsl #2]
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    9cbc:	4658      	mov	r0, fp
    9cbe:	f7ff fe95 	bl	99ec <mp_iternext>
    9cc2:	4604      	mov	r4, r0
    9cc4:	2804      	cmp	r0, #4
    9cc6:	d010      	beq.n	9cea <mp_call_prepare_args_n_kw_var+0x286>
            if (args2_len + 1 >= args2_alloc) {
    9cc8:	f106 0a01 	add.w	sl, r6, #1
    9ccc:	45ca      	cmp	sl, r9
    9cce:	d3e1      	bcc.n	9c94 <mp_call_prepare_args_n_kw_var+0x230>
                uint new_alloc = args2_alloc * 2;
    9cd0:	ea4f 0949 	mov.w	r9, r9, lsl #1
                if (new_alloc < 4) {
    9cd4:	f1b9 0f03 	cmp.w	r9, #3
    9cd8:	d8d6      	bhi.n	9c88 <mp_call_prepare_args_n_kw_var+0x224>
                    new_alloc = 4;
    9cda:	f04f 0904 	mov.w	r9, #4
    9cde:	e7d3      	b.n	9c88 <mp_call_prepare_args_n_kw_var+0x224>
                key = mp_obj_str_intern_checked(key);
    9ce0:	4620      	mov	r0, r4
    9ce2:	f007 fb6f 	bl	113c4 <mp_obj_str_intern_checked>
    9ce6:	4604      	mov	r4, r0
    9ce8:	e7d8      	b.n	9c9c <mp_call_prepare_args_n_kw_var+0x238>
    9cea:	464c      	mov	r4, r9
    out_args->fun = fun;
    9cec:	9b03      	ldr	r3, [sp, #12]
    9cee:	9902      	ldr	r1, [sp, #8]
    9cf0:	6019      	str	r1, [r3, #0]
    out_args->args = args2;
    9cf2:	611d      	str	r5, [r3, #16]
    out_args->n_args = pos_args_len;
    9cf4:	605f      	str	r7, [r3, #4]
    out_args->n_kw = (args2_len - pos_args_len) / 2;
    9cf6:	1bf6      	subs	r6, r6, r7
    9cf8:	0876      	lsrs	r6, r6, #1
    9cfa:	609e      	str	r6, [r3, #8]
    out_args->n_alloc = args2_alloc;
    9cfc:	60dc      	str	r4, [r3, #12]
}
    9cfe:	b00b      	add	sp, #44	; 0x2c
    9d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d04:	000265d0 	.word	0x000265d0
    9d08:	00028844 	.word	0x00028844
    9d0c:	00027890 	.word	0x00027890
    9d10:	00025694 	.word	0x00025694
    9d14:	000255a4 	.word	0x000255a4
    9d18:	0002585c 	.word	0x0002585c

00009d1c <mp_call_method_n_kw_var>:
mp_obj_t mp_call_method_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args) {
    9d1c:	b510      	push	{r4, lr}
    9d1e:	b086      	sub	sp, #24
    mp_call_prepare_args_n_kw_var(have_self, n_args_n_kw, args, &out_args);
    9d20:	ab01      	add	r3, sp, #4
    9d22:	f7ff fe9f 	bl	9a64 <mp_call_prepare_args_n_kw_var>
    mp_obj_t res = mp_call_function_n_kw(out_args.fun, out_args.n_args, out_args.n_kw, out_args.args);
    9d26:	9b05      	ldr	r3, [sp, #20]
    9d28:	9a03      	ldr	r2, [sp, #12]
    9d2a:	9902      	ldr	r1, [sp, #8]
    9d2c:	9801      	ldr	r0, [sp, #4]
    9d2e:	f7ff fca9 	bl	9684 <mp_call_function_n_kw>
    9d32:	4604      	mov	r4, r0
}

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    m_del(uint8_t, ptr, n_bytes);
    9d34:	9805      	ldr	r0, [sp, #20]
    9d36:	f7f6 fdea 	bl	90e <m_free>
}
    9d3a:	4620      	mov	r0, r4
    9d3c:	b006      	add	sp, #24
    9d3e:	bd10      	pop	{r4, pc}

00009d40 <mp_unpack_sequence>:
void mp_unpack_sequence(mp_obj_t seq_in, size_t num, mp_obj_t *items) {
    9d40:	b570      	push	{r4, r5, r6, lr}
    9d42:	b086      	sub	sp, #24
    9d44:	460c      	mov	r4, r1
    9d46:	4615      	mov	r5, r2
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    9d48:	f010 0303 	ands.w	r3, r0, #3
    9d4c:	d103      	bne.n	9d56 <mp_unpack_sequence+0x16>
    9d4e:	6801      	ldr	r1, [r0, #0]
    9d50:	4a25      	ldr	r2, [pc, #148]	; (9de8 <mp_unpack_sequence+0xa8>)
    9d52:	4291      	cmp	r1, r2
    9d54:	d01c      	beq.n	9d90 <mp_unpack_sequence+0x50>
    9d56:	b91b      	cbnz	r3, 9d60 <mp_unpack_sequence+0x20>
    9d58:	6802      	ldr	r2, [r0, #0]
    9d5a:	4b24      	ldr	r3, [pc, #144]	; (9dec <mp_unpack_sequence+0xac>)
    9d5c:	429a      	cmp	r2, r3
    9d5e:	d017      	beq.n	9d90 <mp_unpack_sequence+0x50>
        mp_obj_t iterable = mp_getiter(seq_in, &iter_buf);
    9d60:	a901      	add	r1, sp, #4
    9d62:	f7ff fdd5 	bl	9910 <mp_getiter>
    9d66:	4606      	mov	r6, r0
        for (seq_len = 0; seq_len < num; seq_len++) {
    9d68:	2300      	movs	r3, #0
    9d6a:	9305      	str	r3, [sp, #20]
    9d6c:	9b05      	ldr	r3, [sp, #20]
    9d6e:	42a3      	cmp	r3, r4
    9d70:	d225      	bcs.n	9dbe <mp_unpack_sequence+0x7e>
            mp_obj_t el = mp_iternext(iterable);
    9d72:	4630      	mov	r0, r6
    9d74:	f7ff fe3a 	bl	99ec <mp_iternext>
            if (el == MP_OBJ_STOP_ITERATION) {
    9d78:	2804      	cmp	r0, #4
    9d7a:	d027      	beq.n	9dcc <mp_unpack_sequence+0x8c>
            items[num - 1 - seq_len] = el;
    9d7c:	9a05      	ldr	r2, [sp, #20]
    9d7e:	1aa3      	subs	r3, r4, r2
    9d80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9d84:	3b01      	subs	r3, #1
    9d86:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        for (seq_len = 0; seq_len < num; seq_len++) {
    9d8a:	3201      	adds	r2, #1
    9d8c:	9205      	str	r2, [sp, #20]
    9d8e:	e7ed      	b.n	9d6c <mp_unpack_sequence+0x2c>
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    9d90:	aa01      	add	r2, sp, #4
    9d92:	a905      	add	r1, sp, #20
    9d94:	f001 f938 	bl	b008 <mp_obj_get_array>
        if (seq_len < num) {
    9d98:	9b05      	ldr	r3, [sp, #20]
    9d9a:	42a3      	cmp	r3, r4
    9d9c:	d316      	bcc.n	9dcc <mp_unpack_sequence+0x8c>
        } else if (seq_len > num) {
    9d9e:	d81c      	bhi.n	9dda <mp_unpack_sequence+0x9a>
        for (size_t i = 0; i < num; i++) {
    9da0:	2200      	movs	r2, #0
    9da2:	e009      	b.n	9db8 <mp_unpack_sequence+0x78>
            items[i] = seq_items[num - 1 - i];
    9da4:	1aa3      	subs	r3, r4, r2
    9da6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9daa:	3b01      	subs	r3, #1
    9dac:	9901      	ldr	r1, [sp, #4]
    9dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    9db2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
        for (size_t i = 0; i < num; i++) {
    9db6:	3201      	adds	r2, #1
    9db8:	42a2      	cmp	r2, r4
    9dba:	d3f3      	bcc.n	9da4 <mp_unpack_sequence+0x64>
    9dbc:	e004      	b.n	9dc8 <mp_unpack_sequence+0x88>
        if (mp_iternext(iterable) != MP_OBJ_STOP_ITERATION) {
    9dbe:	4630      	mov	r0, r6
    9dc0:	f7ff fe14 	bl	99ec <mp_iternext>
    9dc4:	2804      	cmp	r0, #4
    9dc6:	d108      	bne.n	9dda <mp_unpack_sequence+0x9a>
}
    9dc8:	b006      	add	sp, #24
    9dca:	bd70      	pop	{r4, r5, r6, pc}
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
    9dcc:	9a05      	ldr	r2, [sp, #20]
    9dce:	4908      	ldr	r1, [pc, #32]	; (9df0 <mp_unpack_sequence+0xb0>)
    9dd0:	4808      	ldr	r0, [pc, #32]	; (9df4 <mp_unpack_sequence+0xb4>)
    9dd2:	f002 fe7b 	bl	cacc <mp_obj_new_exception_msg_varg>
    9dd6:	f7f6 fd53 	bl	880 <nlr_jump>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
    9dda:	4622      	mov	r2, r4
    9ddc:	4906      	ldr	r1, [pc, #24]	; (9df8 <mp_unpack_sequence+0xb8>)
    9dde:	4805      	ldr	r0, [pc, #20]	; (9df4 <mp_unpack_sequence+0xb4>)
    9de0:	f002 fe74 	bl	cacc <mp_obj_new_exception_msg_varg>
    9de4:	f7f6 fd4c 	bl	880 <nlr_jump>
    9de8:	00028844 	.word	0x00028844
    9dec:	00027890 	.word	0x00027890
    9df0:	00025890 	.word	0x00025890
    9df4:	00026cc0 	.word	0x00026cc0
    9df8:	000258b4 	.word	0x000258b4

00009dfc <mp_unpack_ex>:
void mp_unpack_ex(mp_obj_t seq_in, size_t num_in, mp_obj_t *items) {
    9dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dfe:	b083      	sub	sp, #12
    9e00:	4616      	mov	r6, r2
    size_t num_left = num_in & 0xff;
    9e02:	b2cd      	uxtb	r5, r1
    size_t num_right = (num_in >> 8) & 0xff;
    9e04:	f3c1 2407 	ubfx	r4, r1, #8, #8
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    9e08:	f010 0303 	ands.w	r3, r0, #3
    9e0c:	d103      	bne.n	9e16 <mp_unpack_ex+0x1a>
    9e0e:	6801      	ldr	r1, [r0, #0]
    9e10:	4a41      	ldr	r2, [pc, #260]	; (9f18 <mp_unpack_ex+0x11c>)
    9e12:	4291      	cmp	r1, r2
    9e14:	d01a      	beq.n	9e4c <mp_unpack_ex+0x50>
    9e16:	b91b      	cbnz	r3, 9e20 <mp_unpack_ex+0x24>
    9e18:	6802      	ldr	r2, [r0, #0]
    9e1a:	4b40      	ldr	r3, [pc, #256]	; (9f1c <mp_unpack_ex+0x120>)
    9e1c:	429a      	cmp	r2, r3
    9e1e:	d015      	beq.n	9e4c <mp_unpack_ex+0x50>
        mp_obj_t iterable = mp_getiter(seq_in, NULL);
    9e20:	2100      	movs	r1, #0
    9e22:	f7ff fd75 	bl	9910 <mp_getiter>
    9e26:	4607      	mov	r7, r0
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    9e28:	2300      	movs	r3, #0
    9e2a:	9301      	str	r3, [sp, #4]
    9e2c:	9b01      	ldr	r3, [sp, #4]
    9e2e:	42ab      	cmp	r3, r5
    9e30:	d23e      	bcs.n	9eb0 <mp_unpack_ex+0xb4>
            item = mp_iternext(iterable);
    9e32:	4638      	mov	r0, r7
    9e34:	f7ff fdda 	bl	99ec <mp_iternext>
            if (item == MP_OBJ_STOP_ITERATION) {
    9e38:	2804      	cmp	r0, #4
    9e3a:	d065      	beq.n	9f08 <mp_unpack_ex+0x10c>
            items[num_left + num_right + 1 - 1 - seq_len] = item;
    9e3c:	192b      	adds	r3, r5, r4
    9e3e:	9a01      	ldr	r2, [sp, #4]
    9e40:	1a9b      	subs	r3, r3, r2
    9e42:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    9e46:	3201      	adds	r2, #1
    9e48:	9201      	str	r2, [sp, #4]
    9e4a:	e7ef      	b.n	9e2c <mp_unpack_ex+0x30>
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    9e4c:	466a      	mov	r2, sp
    9e4e:	a901      	add	r1, sp, #4
    9e50:	f001 f8da 	bl	b008 <mp_obj_get_array>
        if (seq_len < num_left + num_right) {
    9e54:	192b      	adds	r3, r5, r4
    9e56:	9a01      	ldr	r2, [sp, #4]
    9e58:	4293      	cmp	r3, r2
    9e5a:	d855      	bhi.n	9f08 <mp_unpack_ex+0x10c>
        for (size_t i = 0; i < num_right; i++) {
    9e5c:	2200      	movs	r2, #0
    9e5e:	e00a      	b.n	9e76 <mp_unpack_ex+0x7a>
            items[i] = seq_items[seq_len - 1 - i];
    9e60:	9b01      	ldr	r3, [sp, #4]
    9e62:	1a9b      	subs	r3, r3, r2
    9e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9e68:	3b01      	subs	r3, #1
    9e6a:	9900      	ldr	r1, [sp, #0]
    9e6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    9e70:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
        for (size_t i = 0; i < num_right; i++) {
    9e74:	3201      	adds	r2, #1
    9e76:	42a2      	cmp	r2, r4
    9e78:	d3f2      	bcc.n	9e60 <mp_unpack_ex+0x64>
        items[num_right] = mp_obj_new_list(seq_len - num_left - num_right, seq_items + num_left);
    9e7a:	9801      	ldr	r0, [sp, #4]
    9e7c:	1b40      	subs	r0, r0, r5
    9e7e:	9900      	ldr	r1, [sp, #0]
    9e80:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    9e84:	1b00      	subs	r0, r0, r4
    9e86:	f004 fdf7 	bl	ea78 <mp_obj_new_list>
    9e8a:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        for (size_t i = 0; i < num_left; i++) {
    9e8e:	2200      	movs	r2, #0
    9e90:	e00b      	b.n	9eaa <mp_unpack_ex+0xae>
            items[num_right + 1 + i] = seq_items[num_left - 1 - i];
    9e92:	1aab      	subs	r3, r5, r2
    9e94:	1911      	adds	r1, r2, r4
    9e96:	3101      	adds	r1, #1
    9e98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9e9c:	3b01      	subs	r3, #1
    9e9e:	9800      	ldr	r0, [sp, #0]
    9ea0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    9ea4:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
        for (size_t i = 0; i < num_left; i++) {
    9ea8:	3201      	adds	r2, #1
    9eaa:	42aa      	cmp	r2, r5
    9eac:	d3f1      	bcc.n	9e92 <mp_unpack_ex+0x96>
    9eae:	e029      	b.n	9f04 <mp_unpack_ex+0x108>
        mp_obj_list_t *rest = MP_OBJ_TO_PTR(mp_obj_new_list(0, NULL));
    9eb0:	2100      	movs	r1, #0
    9eb2:	4608      	mov	r0, r1
    9eb4:	f004 fde0 	bl	ea78 <mp_obj_new_list>
    9eb8:	4605      	mov	r5, r0
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    9eba:	e003      	b.n	9ec4 <mp_unpack_ex+0xc8>
            mp_obj_list_append(MP_OBJ_FROM_PTR(rest), item);
    9ebc:	4601      	mov	r1, r0
    9ebe:	4628      	mov	r0, r5
    9ec0:	f004 fa9e 	bl	e400 <mp_obj_list_append>
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    9ec4:	4638      	mov	r0, r7
    9ec6:	f7ff fd91 	bl	99ec <mp_iternext>
    9eca:	2804      	cmp	r0, #4
    9ecc:	d1f6      	bne.n	9ebc <mp_unpack_ex+0xc0>
        if (rest->len < num_right) {
    9ece:	68ab      	ldr	r3, [r5, #8]
    9ed0:	42a3      	cmp	r3, r4
    9ed2:	d319      	bcc.n	9f08 <mp_unpack_ex+0x10c>
        items[num_right] = MP_OBJ_FROM_PTR(rest);
    9ed4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        for (size_t i = 0; i < num_right; i++) {
    9ed8:	2100      	movs	r1, #0
    9eda:	e00c      	b.n	9ef6 <mp_unpack_ex+0xfa>
            items[num_right - 1 - i] = rest->items[rest->len - num_right + i];
    9edc:	68e8      	ldr	r0, [r5, #12]
    9ede:	68ab      	ldr	r3, [r5, #8]
    9ee0:	1b1b      	subs	r3, r3, r4
    9ee2:	185a      	adds	r2, r3, r1
    9ee4:	1a63      	subs	r3, r4, r1
    9ee6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9eea:	3b01      	subs	r3, #1
    9eec:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    9ef0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (size_t i = 0; i < num_right; i++) {
    9ef4:	3101      	adds	r1, #1
    9ef6:	42a1      	cmp	r1, r4
    9ef8:	d3f0      	bcc.n	9edc <mp_unpack_ex+0xe0>
        mp_obj_list_set_len(MP_OBJ_FROM_PTR(rest), rest->len - num_right);
    9efa:	68a9      	ldr	r1, [r5, #8]
    9efc:	1b09      	subs	r1, r1, r4
    9efe:	4628      	mov	r0, r5
    9f00:	f004 fe07 	bl	eb12 <mp_obj_list_set_len>
}
    9f04:	b003      	add	sp, #12
    9f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
    9f08:	9a01      	ldr	r2, [sp, #4]
    9f0a:	4905      	ldr	r1, [pc, #20]	; (9f20 <mp_unpack_ex+0x124>)
    9f0c:	4805      	ldr	r0, [pc, #20]	; (9f24 <mp_unpack_ex+0x128>)
    9f0e:	f002 fddd 	bl	cacc <mp_obj_new_exception_msg_varg>
    9f12:	f7f6 fcb5 	bl	880 <nlr_jump>
    9f16:	bf00      	nop
    9f18:	00028844 	.word	0x00028844
    9f1c:	00027890 	.word	0x00027890
    9f20:	00025890 	.word	0x00025890
    9f24:	00026cc0 	.word	0x00026cc0

00009f28 <mp_make_raise_obj>:
        *ret_val = mp_make_raise_obj(throw_value);
        return MP_VM_RETURN_EXCEPTION;
    }
}

mp_obj_t mp_make_raise_obj(mp_obj_t o) {
    9f28:	b510      	push	{r4, lr}
    9f2a:	4604      	mov	r4, r0
    DEBUG_printf("raise %p\n", o);
    if (mp_obj_is_exception_type(o)) {
    9f2c:	f002 fe42 	bl	cbb4 <mp_obj_is_exception_type>
    9f30:	b928      	cbnz	r0, 9f3e <mp_make_raise_obj+0x16>
        // o is an exception type (it is derived from BaseException (or is BaseException))
        // create and return a new exception instance by calling o
        // TODO could have an option to disable traceback, then builtin exceptions (eg TypeError)
        // could have const instances in ROM which we return here instead
        return mp_call_function_n_kw(o, 0, 0, NULL);
    } else if (mp_obj_is_exception_instance(o)) {
    9f32:	4620      	mov	r0, r4
    9f34:	f002 fe56 	bl	cbe4 <mp_obj_is_exception_instance>
    9f38:	b140      	cbz	r0, 9f4c <mp_make_raise_obj+0x24>
        // o is an instance of an exception, so use it as the exception
        return o;
    9f3a:	4620      	mov	r0, r4
    9f3c:	e005      	b.n	9f4a <mp_make_raise_obj+0x22>
        return mp_call_function_n_kw(o, 0, 0, NULL);
    9f3e:	2300      	movs	r3, #0
    9f40:	461a      	mov	r2, r3
    9f42:	4619      	mov	r1, r3
    9f44:	4620      	mov	r0, r4
    9f46:	f7ff fb9d 	bl	9684 <mp_call_function_n_kw>
    } else {
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    }
}
    9f4a:	bd10      	pop	{r4, pc}
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    9f4c:	4902      	ldr	r1, [pc, #8]	; (9f58 <mp_make_raise_obj+0x30>)
    9f4e:	4803      	ldr	r0, [pc, #12]	; (9f5c <mp_make_raise_obj+0x34>)
    9f50:	f002 fe2c 	bl	cbac <mp_obj_new_exception_msg>
    9f54:	e7f9      	b.n	9f4a <mp_make_raise_obj+0x22>
    9f56:	bf00      	nop
    9f58:	000257b4 	.word	0x000257b4
    9f5c:	00026c84 	.word	0x00026c84

00009f60 <mp_resume>:
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    9f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f62:	b091      	sub	sp, #68	; 0x44
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    9f64:	460d      	mov	r5, r1
    9f66:	3100      	adds	r1, #0
    9f68:	bf18      	it	ne
    9f6a:	2101      	movne	r1, #1
    9f6c:	4617      	mov	r7, r2
    9f6e:	3200      	adds	r2, #0
    9f70:	bf18      	it	ne
    9f72:	2201      	movne	r2, #1
    9f74:	4291      	cmp	r1, r2
    9f76:	d013      	beq.n	9fa0 <mp_resume+0x40>
    9f78:	4604      	mov	r4, r0
    9f7a:	461e      	mov	r6, r3
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    9f7c:	f000 fdfe 	bl	ab7c <mp_obj_get_type>
    if (type == &mp_type_gen_instance) {
    9f80:	4b43      	ldr	r3, [pc, #268]	; (a090 <mp_resume+0x130>)
    9f82:	4298      	cmp	r0, r3
    9f84:	d013      	beq.n	9fae <mp_resume+0x4e>
    if (type->iternext != NULL && send_value == mp_const_none) {
    9f86:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9f88:	b1c3      	cbz	r3, 9fbc <mp_resume+0x5c>
    9f8a:	4a42      	ldr	r2, [pc, #264]	; (a094 <mp_resume+0x134>)
    9f8c:	4295      	cmp	r5, r2
    9f8e:	d115      	bne.n	9fbc <mp_resume+0x5c>
        mp_obj_t ret = type->iternext(self_in);
    9f90:	4620      	mov	r0, r4
    9f92:	4798      	blx	r3
        *ret_val = ret;
    9f94:	6030      	str	r0, [r6, #0]
        if (ret != MP_OBJ_STOP_ITERATION) {
    9f96:	2804      	cmp	r0, #4
    9f98:	d077      	beq.n	a08a <mp_resume+0x12a>
            return MP_VM_RETURN_YIELD;
    9f9a:	2001      	movs	r0, #1
}
    9f9c:	b011      	add	sp, #68	; 0x44
    9f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    9fa0:	4b3d      	ldr	r3, [pc, #244]	; (a098 <mp_resume+0x138>)
    9fa2:	4a3e      	ldr	r2, [pc, #248]	; (a09c <mp_resume+0x13c>)
    9fa4:	f240 41cb 	movw	r1, #1227	; 0x4cb
    9fa8:	483d      	ldr	r0, [pc, #244]	; (a0a0 <mp_resume+0x140>)
    9faa:	f00e fad7 	bl	1855c <__assert_func>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
    9fae:	4633      	mov	r3, r6
    9fb0:	463a      	mov	r2, r7
    9fb2:	4629      	mov	r1, r5
    9fb4:	4620      	mov	r0, r4
    9fb6:	f003 fb49 	bl	d64c <mp_obj_gen_resume>
    9fba:	e7ef      	b.n	9f9c <mp_resume+0x3c>
    if (send_value == mp_const_none) {
    9fbc:	4b35      	ldr	r3, [pc, #212]	; (a094 <mp_resume+0x134>)
    9fbe:	429d      	cmp	r5, r3
    9fc0:	d01c      	beq.n	9ffc <mp_resume+0x9c>
    if (send_value != MP_OBJ_NULL) {
    9fc2:	2d00      	cmp	r5, #0
    9fc4:	d134      	bne.n	a030 <mp_resume+0xd0>
    assert(throw_value != MP_OBJ_NULL);
    9fc6:	2f00      	cmp	r7, #0
    9fc8:	d041      	beq.n	a04e <mp_resume+0xee>
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
    9fca:	4638      	mov	r0, r7
    9fcc:	f000 fdd6 	bl	ab7c <mp_obj_get_type>
    9fd0:	4934      	ldr	r1, [pc, #208]	; (a0a4 <mp_resume+0x144>)
    9fd2:	f008 fb99 	bl	12708 <mp_obj_is_subclass_fast>
    9fd6:	2800      	cmp	r0, #0
    9fd8:	d040      	beq.n	a05c <mp_resume+0xfc>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
    9fda:	aa0d      	add	r2, sp, #52	; 0x34
    9fdc:	f44f 71bc 	mov.w	r1, #376	; 0x178
    9fe0:	4620      	mov	r0, r4
    9fe2:	f7ff fbd1 	bl	9788 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    9fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9fe8:	2b00      	cmp	r3, #0
    9fea:	d048      	beq.n	a07e <mp_resume+0x11e>
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    9fec:	aa0d      	add	r2, sp, #52	; 0x34
    9fee:	2100      	movs	r1, #0
    9ff0:	4608      	mov	r0, r1
    9ff2:	f7ff fb7a 	bl	96ea <mp_call_method_n_kw>
    9ff6:	6030      	str	r0, [r6, #0]
                return MP_VM_RETURN_NORMAL;
    9ff8:	2000      	movs	r0, #0
    9ffa:	e7cf      	b.n	9f9c <mp_resume+0x3c>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
    9ffc:	aa0d      	add	r2, sp, #52	; 0x34
    9ffe:	211e      	movs	r1, #30
    a000:	4620      	mov	r0, r4
    a002:	f7ff fbc1 	bl	9788 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    a006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a008:	2b00      	cmp	r3, #0
    a00a:	d0da      	beq.n	9fc2 <mp_resume+0x62>
            if (nlr_push(&nlr) == 0) {
    a00c:	a801      	add	r0, sp, #4
    a00e:	f7f6 fc25 	bl	85c <nlr_push>
    a012:	b118      	cbz	r0, a01c <mp_resume+0xbc>
                *ret_val = MP_OBJ_FROM_PTR(nlr.ret_val);
    a014:	9b02      	ldr	r3, [sp, #8]
    a016:	6033      	str	r3, [r6, #0]
                return MP_VM_RETURN_EXCEPTION;
    a018:	2002      	movs	r0, #2
    a01a:	e7bf      	b.n	9f9c <mp_resume+0x3c>
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    a01c:	aa0d      	add	r2, sp, #52	; 0x34
    a01e:	2100      	movs	r1, #0
    a020:	4608      	mov	r0, r1
    a022:	f7ff fb62 	bl	96ea <mp_call_method_n_kw>
    a026:	6030      	str	r0, [r6, #0]
                nlr_pop();
    a028:	f7f6 fc10 	bl	84c <nlr_pop>
                return MP_VM_RETURN_YIELD;
    a02c:	2001      	movs	r0, #1
    a02e:	e7b5      	b.n	9f9c <mp_resume+0x3c>
        mp_load_method(self_in, MP_QSTR_send, dest);
    a030:	aa0d      	add	r2, sp, #52	; 0x34
    a032:	f240 2132 	movw	r1, #562	; 0x232
    a036:	4620      	mov	r0, r4
    a038:	f7ff fbe8 	bl	980c <mp_load_method>
        dest[2] = send_value;
    a03c:	950f      	str	r5, [sp, #60]	; 0x3c
        *ret_val = mp_call_method_n_kw(1, 0, dest);
    a03e:	aa0d      	add	r2, sp, #52	; 0x34
    a040:	2100      	movs	r1, #0
    a042:	2001      	movs	r0, #1
    a044:	f7ff fb51 	bl	96ea <mp_call_method_n_kw>
    a048:	6030      	str	r0, [r6, #0]
        return MP_VM_RETURN_YIELD;
    a04a:	2001      	movs	r0, #1
    a04c:	e7a6      	b.n	9f9c <mp_resume+0x3c>
    assert(throw_value != MP_OBJ_NULL);
    a04e:	4b16      	ldr	r3, [pc, #88]	; (a0a8 <mp_resume+0x148>)
    a050:	4a12      	ldr	r2, [pc, #72]	; (a09c <mp_resume+0x13c>)
    a052:	f240 41fd 	movw	r1, #1277	; 0x4fd
    a056:	4812      	ldr	r0, [pc, #72]	; (a0a0 <mp_resume+0x140>)
    a058:	f00e fa80 	bl	1855c <__assert_func>
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
    a05c:	aa0d      	add	r2, sp, #52	; 0x34
    a05e:	f240 2155 	movw	r1, #597	; 0x255
    a062:	4620      	mov	r0, r4
    a064:	f7ff fb90 	bl	9788 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    a068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a06a:	b143      	cbz	r3, a07e <mp_resume+0x11e>
                dest[2] = throw_value;
    a06c:	970f      	str	r7, [sp, #60]	; 0x3c
                *ret_val = mp_call_method_n_kw(1, 0, dest);
    a06e:	aa0d      	add	r2, sp, #52	; 0x34
    a070:	2100      	movs	r1, #0
    a072:	2001      	movs	r0, #1
    a074:	f7ff fb39 	bl	96ea <mp_call_method_n_kw>
    a078:	6030      	str	r0, [r6, #0]
                return MP_VM_RETURN_YIELD;
    a07a:	2001      	movs	r0, #1
    a07c:	e78e      	b.n	9f9c <mp_resume+0x3c>
        *ret_val = mp_make_raise_obj(throw_value);
    a07e:	4638      	mov	r0, r7
    a080:	f7ff ff52 	bl	9f28 <mp_make_raise_obj>
    a084:	6030      	str	r0, [r6, #0]
        return MP_VM_RETURN_EXCEPTION;
    a086:	2002      	movs	r0, #2
    a088:	e788      	b.n	9f9c <mp_resume+0x3c>
            return MP_VM_RETURN_NORMAL;
    a08a:	2000      	movs	r0, #0
    a08c:	e786      	b.n	9f9c <mp_resume+0x3c>
    a08e:	bf00      	nop
    a090:	000272dc 	.word	0x000272dc
    a094:	00027b40 	.word	0x00027b40
    a098:	000257e8 	.word	0x000257e8
    a09c:	0002558c 	.word	0x0002558c
    a0a0:	0002585c 	.word	0x0002585c
    a0a4:	000268c4 	.word	0x000268c4
    a0a8:	00025824 	.word	0x00025824

0000a0ac <mp_import_name>:

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
    a0ac:	b500      	push	{lr}
    a0ae:	b087      	sub	sp, #28
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
    a0b0:	0080      	lsls	r0, r0, #2
    a0b2:	f040 0002 	orr.w	r0, r0, #2
    a0b6:	9001      	str	r0, [sp, #4]
    args[1] = mp_const_none; // TODO should be globals
    a0b8:	4b05      	ldr	r3, [pc, #20]	; (a0d0 <mp_import_name+0x24>)
    a0ba:	9302      	str	r3, [sp, #8]
    args[2] = mp_const_none; // TODO should be locals
    a0bc:	9303      	str	r3, [sp, #12]
    args[3] = fromlist;
    a0be:	9104      	str	r1, [sp, #16]
    args[4] = level; // must be 0; we don't yet support other values
    a0c0:	9205      	str	r2, [sp, #20]

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    a0c2:	a901      	add	r1, sp, #4
    a0c4:	2005      	movs	r0, #5
    a0c6:	f009 fb3d 	bl	13744 <mp_builtin___import__>
}
    a0ca:	b007      	add	sp, #28
    a0cc:	f85d fb04 	ldr.w	pc, [sp], #4
    a0d0:	00027b40 	.word	0x00027b40

0000a0d4 <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    a0d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a0d8:	b089      	sub	sp, #36	; 0x24
    a0da:	af00      	add	r7, sp, #0
    a0dc:	4605      	mov	r5, r0
    a0de:	460c      	mov	r4, r1
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
    a0e0:	f107 0218 	add.w	r2, r7, #24
    a0e4:	f7ff fb50 	bl	9788 <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
    a0e8:	69fb      	ldr	r3, [r7, #28]
    a0ea:	b92b      	cbnz	r3, a0f8 <mp_import_from+0x24>
        // Hopefully we can't import bound method from an object
import_error:
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    }

    if (dest[0] != MP_OBJ_NULL) {
    a0ec:	69b8      	ldr	r0, [r7, #24]
    a0ee:	b150      	cbz	r0, a106 <mp_import_from+0x32>

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
    a0f0:	3724      	adds	r7, #36	; 0x24
    a0f2:	46bd      	mov	sp, r7
    a0f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    a0f8:	4622      	mov	r2, r4
    a0fa:	4929      	ldr	r1, [pc, #164]	; (a1a0 <mp_import_from+0xcc>)
    a0fc:	4829      	ldr	r0, [pc, #164]	; (a1a4 <mp_import_from+0xd0>)
    a0fe:	f002 fce5 	bl	cacc <mp_obj_new_exception_msg_varg>
    a102:	f7f6 fbbd 	bl	880 <nlr_jump>
    if (!mp_obj_is_package(module)) {
    a106:	4628      	mov	r0, r5
    a108:	f009 fc84 	bl	13a14 <mp_obj_is_package>
    a10c:	2800      	cmp	r0, #0
    a10e:	d0f3      	beq.n	a0f8 <mp_import_from+0x24>
    mp_load_method_maybe(module, MP_QSTR___name__, dest);
    a110:	f107 0218 	add.w	r2, r7, #24
    a114:	211c      	movs	r1, #28
    a116:	4628      	mov	r0, r5
    a118:	f7ff fb36 	bl	9788 <mp_load_method_maybe>
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
    a11c:	f107 0114 	add.w	r1, r7, #20
    a120:	69b8      	ldr	r0, [r7, #24]
    a122:	f006 f8af 	bl	10284 <mp_obj_str_get_data>
    a126:	4605      	mov	r5, r0
    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
    a128:	4620      	mov	r0, r4
    a12a:	f7f7 faad 	bl	1688 <qstr_len>
    a12e:	697a      	ldr	r2, [r7, #20]
    a130:	4410      	add	r0, r2
    a132:	1c46      	adds	r6, r0, #1
    char *dot_name = mp_local_alloc(dot_name_len);
    a134:	300f      	adds	r0, #15
    a136:	f020 0007 	bic.w	r0, r0, #7
    a13a:	ebad 0d00 	sub.w	sp, sp, r0
    a13e:	466b      	mov	r3, sp
    a140:	ea4f 09d3 	mov.w	r9, r3, lsr #3
    a144:	ea4f 08c9 	mov.w	r8, r9, lsl #3
    memcpy(dot_name, pkg_name, pkg_name_len);
    a148:	4629      	mov	r1, r5
    a14a:	4640      	mov	r0, r8
    a14c:	f011 fb52 	bl	1b7f4 <memcpy>
    dot_name[pkg_name_len] = '.';
    a150:	697b      	ldr	r3, [r7, #20]
    a152:	222e      	movs	r2, #46	; 0x2e
    a154:	f803 2039 	strb.w	r2, [r3, r9, lsl #3]
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
    a158:	697d      	ldr	r5, [r7, #20]
    a15a:	3501      	adds	r5, #1
    a15c:	4445      	add	r5, r8
    a15e:	4620      	mov	r0, r4
    a160:	f7f7 fa97 	bl	1692 <qstr_str>
    a164:	4681      	mov	r9, r0
    a166:	4620      	mov	r0, r4
    a168:	f7f7 fa8e 	bl	1688 <qstr_len>
    a16c:	4602      	mov	r2, r0
    a16e:	4649      	mov	r1, r9
    a170:	4628      	mov	r0, r5
    a172:	f011 fb3f 	bl	1b7f4 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
    a176:	4631      	mov	r1, r6
    a178:	4640      	mov	r0, r8
    a17a:	f7f7 f9f5 	bl	1568 <qstr_from_strn>
    args[0] = MP_OBJ_NEW_QSTR(dot_name_q);
    a17e:	0080      	lsls	r0, r0, #2
    a180:	f040 0002 	orr.w	r0, r0, #2
    a184:	6038      	str	r0, [r7, #0]
    args[1] = mp_const_none; // TODO should be globals
    a186:	4b08      	ldr	r3, [pc, #32]	; (a1a8 <mp_import_from+0xd4>)
    a188:	607b      	str	r3, [r7, #4]
    args[2] = mp_const_none; // TODO should be locals
    a18a:	60bb      	str	r3, [r7, #8]
    args[3] = mp_const_true; // Pass sentinel "non empty" value to force returning of leaf module
    a18c:	4b07      	ldr	r3, [pc, #28]	; (a1ac <mp_import_from+0xd8>)
    a18e:	60fb      	str	r3, [r7, #12]
    args[4] = MP_OBJ_NEW_SMALL_INT(0);
    a190:	2301      	movs	r3, #1
    a192:	613b      	str	r3, [r7, #16]
    return mp_builtin___import__(5, args);
    a194:	4639      	mov	r1, r7
    a196:	2005      	movs	r0, #5
    a198:	f009 fad4 	bl	13744 <mp_builtin___import__>
    a19c:	e7a8      	b.n	a0f0 <mp_import_from+0x1c>
    a19e:	bf00      	nop
    a1a0:	000256e4 	.word	0x000256e4
    a1a4:	00026900 	.word	0x00026900
    a1a8:	00027b40 	.word	0x00027b40
    a1ac:	00025f4c 	.word	0x00025f4c

0000a1b0 <mp_import_all>:

void mp_import_all(mp_obj_t module) {
    a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DEBUG_printf("import all %p\n", module);

    // TODO: Support __all__
    mp_map_t *map = mp_obj_dict_get_map(MP_OBJ_FROM_PTR(mp_obj_module_get_globals(module)));
    a1b2:	f004 fda1 	bl	ecf8 <mp_obj_module_get_globals>
    a1b6:	f002 fb79 	bl	c8ac <mp_obj_dict_get_map>
    a1ba:	4606      	mov	r6, r0
    for (size_t i = 0; i < map->alloc; i++) {
    a1bc:	2400      	movs	r4, #0
    a1be:	e004      	b.n	a1ca <mp_import_all+0x1a>
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    a1c0:	2300      	movs	r3, #0
    a1c2:	e000      	b.n	a1c6 <mp_import_all+0x16>
    a1c4:	2300      	movs	r3, #0
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    a1c6:	b96b      	cbnz	r3, a1e4 <mp_import_all+0x34>
    for (size_t i = 0; i < map->alloc; i++) {
    a1c8:	3401      	adds	r4, #1
    a1ca:	6873      	ldr	r3, [r6, #4]
    a1cc:	42a3      	cmp	r3, r4
    a1ce:	d917      	bls.n	a200 <mp_import_all+0x50>
    a1d0:	68b3      	ldr	r3, [r6, #8]
    a1d2:	00e7      	lsls	r7, r4, #3
    a1d4:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
    a1d8:	2d00      	cmp	r5, #0
    a1da:	d0f3      	beq.n	a1c4 <mp_import_all+0x14>
    a1dc:	2d08      	cmp	r5, #8
    a1de:	d0ef      	beq.n	a1c0 <mp_import_all+0x10>
    a1e0:	2301      	movs	r3, #1
    a1e2:	e7f0      	b.n	a1c6 <mp_import_all+0x16>
            qstr name = MP_OBJ_QSTR_VALUE(map->table[i].key);
    a1e4:	08ad      	lsrs	r5, r5, #2
            if (*qstr_str(name) != '_') {
    a1e6:	4628      	mov	r0, r5
    a1e8:	f7f7 fa53 	bl	1692 <qstr_str>
    a1ec:	7803      	ldrb	r3, [r0, #0]
    a1ee:	2b5f      	cmp	r3, #95	; 0x5f
    a1f0:	d0ea      	beq.n	a1c8 <mp_import_all+0x18>
                mp_store_name(name, map->table[i].value);
    a1f2:	68b3      	ldr	r3, [r6, #8]
    a1f4:	441f      	add	r7, r3
    a1f6:	6879      	ldr	r1, [r7, #4]
    a1f8:	4628      	mov	r0, r5
    a1fa:	f7ff f973 	bl	94e4 <mp_store_name>
    a1fe:	e7e3      	b.n	a1c8 <mp_import_all+0x18>
            }
        }
    }
}
    a200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a204 <mp_parse_compile_execute>:

#if MICROPY_ENABLE_COMPILER

// this is implemented in this file so it can optimise access to locals/globals
mp_obj_t mp_parse_compile_execute(mp_lexer_t *lex, mp_parse_input_kind_t parse_input_kind, mp_obj_dict_t *globals, mp_obj_dict_t *locals) {
    a204:	b570      	push	{r4, r5, r6, lr}
    a206:	b090      	sub	sp, #64	; 0x40
    a208:	4604      	mov	r4, r0
    a20a:	460d      	mov	r5, r1
    a20c:	4915      	ldr	r1, [pc, #84]	; (a264 <mp_parse_compile_execute+0x60>)
    a20e:	6848      	ldr	r0, [r1, #4]
    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
    a210:	900f      	str	r0, [sp, #60]	; 0x3c
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    a212:	6808      	ldr	r0, [r1, #0]
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
    a214:	900e      	str	r0, [sp, #56]	; 0x38
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    a216:	604a      	str	r2, [r1, #4]
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    a218:	600b      	str	r3, [r1, #0]
    // set new context
    mp_globals_set(globals);
    mp_locals_set(locals);

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    a21a:	a802      	add	r0, sp, #8
    a21c:	f7f6 fb1e 	bl	85c <nlr_push>
    a220:	b9c0      	cbnz	r0, a254 <mp_parse_compile_execute+0x50>
        qstr source_name = lex->source_name;
    a222:	6826      	ldr	r6, [r4, #0]
        mp_parse_tree_t parse_tree = mp_parse(lex, parse_input_kind);
    a224:	462a      	mov	r2, r5
    a226:	4621      	mov	r1, r4
    a228:	4668      	mov	r0, sp
    a22a:	f7fa fa19 	bl	4660 <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, false);
    a22e:	2300      	movs	r3, #0
    a230:	461a      	mov	r2, r3
    a232:	4631      	mov	r1, r6
    a234:	4668      	mov	r0, sp
    a236:	f7fd fcdf 	bl	7bf8 <mp_compile>
        if (MICROPY_PY_BUILTINS_COMPILE && globals == NULL) {
            // for compile only, return value is the module function
            ret = module_fun;
        } else {
            // execute module function and get return value
            ret = mp_call_function_0(module_fun);
    a23a:	f7ff fa43 	bl	96c4 <mp_call_function_0>
    a23e:	4604      	mov	r4, r0
        }

        // finish nlr block, restore context and return value
        nlr_pop();
    a240:	f7f6 fb04 	bl	84c <nlr_pop>
        mp_globals_set(old_globals);
    a244:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    a246:	4b07      	ldr	r3, [pc, #28]	; (a264 <mp_parse_compile_execute+0x60>)
    a248:	605a      	str	r2, [r3, #4]
        mp_locals_set(old_locals);
    a24a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    a24c:	601a      	str	r2, [r3, #0]
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
        mp_locals_set(old_locals);
        nlr_jump(nlr.ret_val);
    }
}
    a24e:	4620      	mov	r0, r4
    a250:	b010      	add	sp, #64	; 0x40
    a252:	bd70      	pop	{r4, r5, r6, pc}
        mp_globals_set(old_globals);
    a254:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    a256:	4b03      	ldr	r3, [pc, #12]	; (a264 <mp_parse_compile_execute+0x60>)
    a258:	605a      	str	r2, [r3, #4]
        mp_locals_set(old_locals);
    a25a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    a25c:	601a      	str	r2, [r3, #0]
        nlr_jump(nlr.ret_val);
    a25e:	9803      	ldr	r0, [sp, #12]
    a260:	f7f6 fb0e 	bl	880 <nlr_jump>
    a264:	200008a0 	.word	0x200008a0

0000a268 <mp_raise_msg>:
    #endif
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
        "memory allocation failed, allocating %u bytes", (uint)num_bytes));
}

NORETURN void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg) {
    a268:	b508      	push	{r3, lr}
    if (msg == NULL) {
    a26a:	b119      	cbz	r1, a274 <mp_raise_msg+0xc>
        nlr_raise(mp_obj_new_exception(exc_type));
    } else {
        nlr_raise(mp_obj_new_exception_msg(exc_type, msg));
    a26c:	f002 fc9e 	bl	cbac <mp_obj_new_exception_msg>
    a270:	f7f6 fb06 	bl	880 <nlr_jump>
        nlr_raise(mp_obj_new_exception(exc_type));
    a274:	f002 fc18 	bl	caa8 <mp_obj_new_exception>
    a278:	f7f6 fb02 	bl	880 <nlr_jump>

0000a27c <m_malloc_fail>:
NORETURN void m_malloc_fail(size_t num_bytes) {
    a27c:	b508      	push	{r3, lr}
    a27e:	4604      	mov	r4, r0
    if (gc_is_locked()) {
    a280:	f7f6 fc32 	bl	ae8 <gc_is_locked>
    a284:	b118      	cbz	r0, a28e <m_malloc_fail+0x12>
        mp_raise_msg(&mp_type_MemoryError, "memory allocation failed, heap is locked");
    a286:	4905      	ldr	r1, [pc, #20]	; (a29c <m_malloc_fail+0x20>)
    a288:	4805      	ldr	r0, [pc, #20]	; (a2a0 <m_malloc_fail+0x24>)
    a28a:	f7ff ffed 	bl	a268 <mp_raise_msg>
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
    a28e:	4622      	mov	r2, r4
    a290:	4904      	ldr	r1, [pc, #16]	; (a2a4 <m_malloc_fail+0x28>)
    a292:	4803      	ldr	r0, [pc, #12]	; (a2a0 <m_malloc_fail+0x24>)
    a294:	f002 fc1a 	bl	cacc <mp_obj_new_exception_msg_varg>
    a298:	f7f6 faf2 	bl	880 <nlr_jump>
    a29c:	000255dc 	.word	0x000255dc
    a2a0:	00026a68 	.word	0x00026a68
    a2a4:	00025608 	.word	0x00025608

0000a2a8 <mp_raise_ValueError>:
    }
}

NORETURN void mp_raise_ValueError(const char *msg) {
    a2a8:	b508      	push	{r3, lr}
    mp_raise_msg(&mp_type_ValueError, msg);
    a2aa:	4601      	mov	r1, r0
    a2ac:	4801      	ldr	r0, [pc, #4]	; (a2b4 <mp_raise_ValueError+0xc>)
    a2ae:	f7ff ffdb 	bl	a268 <mp_raise_msg>
    a2b2:	bf00      	nop
    a2b4:	00026cc0 	.word	0x00026cc0

0000a2b8 <mp_binary_op>:
mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    a2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a2bc:	b087      	sub	sp, #28
    a2be:	460e      	mov	r6, r1
    a2c0:	4615      	mov	r5, r2
    if (op == MP_BINARY_OP_IS) {
    a2c2:	2807      	cmp	r0, #7
    a2c4:	d039      	beq.n	a33a <mp_binary_op+0x82>
    a2c6:	4604      	mov	r4, r0
    if (op == MP_BINARY_OP_EQUAL || op == MP_BINARY_OP_NOT_EQUAL) {
    a2c8:	2802      	cmp	r0, #2
    a2ca:	d03e      	beq.n	a34a <mp_binary_op+0x92>
    a2cc:	2805      	cmp	r0, #5
    a2ce:	d03c      	beq.n	a34a <mp_binary_op+0x92>
    if (op == MP_BINARY_OP_EXCEPTION_MATCH) {
    a2d0:	2808      	cmp	r0, #8
    a2d2:	d04b      	beq.n	a36c <mp_binary_op+0xb4>
    if (MP_OBJ_IS_SMALL_INT(lhs)) {
    a2d4:	f011 0f01 	tst.w	r1, #1
    a2d8:	f000 8160 	beq.w	a59c <mp_binary_op+0x2e4>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    a2dc:	ea4f 0961 	mov.w	r9, r1, asr #1
        if (MP_OBJ_IS_SMALL_INT(rhs)) {
    a2e0:	f012 0f01 	tst.w	r2, #1
    a2e4:	f000 814e 	beq.w	a584 <mp_binary_op+0x2cc>
            mp_int_t rhs_val = MP_OBJ_SMALL_INT_VALUE(rhs);
    a2e8:	ea4f 0862 	mov.w	r8, r2, asr #1
            switch (op) {
    a2ec:	2821      	cmp	r0, #33	; 0x21
    a2ee:	f200 819a 	bhi.w	a626 <mp_binary_op+0x36e>
    a2f2:	e8df f010 	tbh	[pc, r0, lsl #1]
    a2f6:	012e      	.short	0x012e
    a2f8:	01980133 	.word	0x01980133
    a2fc:	013d0138 	.word	0x013d0138
    a300:	01980198 	.word	0x01980198
    a304:	01980198 	.word	0x01980198
    a308:	00730069 	.word	0x00730069
    a30c:	00790076 	.word	0x00790076
    a310:	00a50097 	.word	0x00a50097
    a314:	00ab00a8 	.word	0x00ab00a8
    a318:	00c600bc 	.word	0x00c600bc
    a31c:	00e200d8 	.word	0x00e200d8
    a320:	00730069 	.word	0x00730069
    a324:	00790076 	.word	0x00790076
    a328:	00a50097 	.word	0x00a50097
    a32c:	00ab00a8 	.word	0x00ab00a8
    a330:	00c600bc 	.word	0x00c600bc
    a334:	00e200d8 	.word	0x00e200d8
    a338:	0114      	.short	0x0114
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    a33a:	4291      	cmp	r1, r2
    a33c:	f000 819e 	beq.w	a67c <mp_binary_op+0x3c4>
    a340:	4fc2      	ldr	r7, [pc, #776]	; (a64c <mp_binary_op+0x394>)
}
    a342:	4638      	mov	r0, r7
    a344:	b007      	add	sp, #28
    a346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (mp_obj_equal(lhs, rhs)) {
    a34a:	4629      	mov	r1, r5
    a34c:	4630      	mov	r0, r6
    a34e:	f000 fccb 	bl	ace8 <mp_obj_equal>
    a352:	b128      	cbz	r0, a360 <mp_binary_op+0xa8>
            if (op == MP_BINARY_OP_EQUAL) {
    a354:	2c02      	cmp	r4, #2
    a356:	d001      	beq.n	a35c <mp_binary_op+0xa4>
                return mp_const_false;
    a358:	4fbc      	ldr	r7, [pc, #752]	; (a64c <mp_binary_op+0x394>)
    a35a:	e7f2      	b.n	a342 <mp_binary_op+0x8a>
                return mp_const_true;
    a35c:	4fbc      	ldr	r7, [pc, #752]	; (a650 <mp_binary_op+0x398>)
    a35e:	e7f0      	b.n	a342 <mp_binary_op+0x8a>
            if (op == MP_BINARY_OP_EQUAL) {
    a360:	2c02      	cmp	r4, #2
    a362:	d001      	beq.n	a368 <mp_binary_op+0xb0>
                return mp_const_true;
    a364:	4fba      	ldr	r7, [pc, #744]	; (a650 <mp_binary_op+0x398>)
    a366:	e7ec      	b.n	a342 <mp_binary_op+0x8a>
                return mp_const_false;
    a368:	4fb8      	ldr	r7, [pc, #736]	; (a64c <mp_binary_op+0x394>)
    a36a:	e7ea      	b.n	a342 <mp_binary_op+0x8a>
        if (mp_obj_is_exception_type(rhs)) {
    a36c:	4610      	mov	r0, r2
    a36e:	f002 fc21 	bl	cbb4 <mp_obj_is_exception_type>
    a372:	b9f0      	cbnz	r0, a3b2 <mp_binary_op+0xfa>
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_tuple)) {
    a374:	f015 0f03 	tst.w	r5, #3
    a378:	f040 8155 	bne.w	a626 <mp_binary_op+0x36e>
    a37c:	682a      	ldr	r2, [r5, #0]
    a37e:	4bb5      	ldr	r3, [pc, #724]	; (a654 <mp_binary_op+0x39c>)
    a380:	429a      	cmp	r2, r3
    a382:	f040 8150 	bne.w	a626 <mp_binary_op+0x36e>
            for (size_t i = 0; i < tuple->len; i++) {
    a386:	2700      	movs	r7, #0
    a388:	686b      	ldr	r3, [r5, #4]
    a38a:	42bb      	cmp	r3, r7
    a38c:	d91a      	bls.n	a3c4 <mp_binary_op+0x10c>
                rhs = tuple->items[i];
    a38e:	1cbb      	adds	r3, r7, #2
    a390:	f855 8023 	ldr.w	r8, [r5, r3, lsl #2]
                if (!mp_obj_is_exception_type(rhs)) {
    a394:	4640      	mov	r0, r8
    a396:	f002 fc0d 	bl	cbb4 <mp_obj_is_exception_type>
    a39a:	2800      	cmp	r0, #0
    a39c:	f000 8142 	beq.w	a624 <mp_binary_op+0x36c>
                if (mp_obj_exception_match(lhs, rhs)) {
    a3a0:	4641      	mov	r1, r8
    a3a2:	4630      	mov	r0, r6
    a3a4:	f002 fc24 	bl	cbf0 <mp_obj_exception_match>
    a3a8:	2800      	cmp	r0, #0
    a3aa:	f040 816b 	bne.w	a684 <mp_binary_op+0x3cc>
            for (size_t i = 0; i < tuple->len; i++) {
    a3ae:	3701      	adds	r7, #1
    a3b0:	e7ea      	b.n	a388 <mp_binary_op+0xd0>
            if (mp_obj_exception_match(lhs, rhs)) {
    a3b2:	4629      	mov	r1, r5
    a3b4:	4630      	mov	r0, r6
    a3b6:	f002 fc1b 	bl	cbf0 <mp_obj_exception_match>
    a3ba:	2800      	cmp	r0, #0
    a3bc:	f000 8160 	beq.w	a680 <mp_binary_op+0x3c8>
                return mp_const_true;
    a3c0:	4fa3      	ldr	r7, [pc, #652]	; (a650 <mp_binary_op+0x398>)
    a3c2:	e7be      	b.n	a342 <mp_binary_op+0x8a>
            return mp_const_false;
    a3c4:	4fa1      	ldr	r7, [pc, #644]	; (a64c <mp_binary_op+0x394>)
    a3c6:	e7bc      	b.n	a342 <mp_binary_op+0x8a>
                case MP_BINARY_OP_INPLACE_OR: lhs_val |= rhs_val; break;
    a3c8:	ea49 0708 	orr.w	r7, r9, r8
            if (MP_SMALL_INT_FITS(lhs_val)) {
    a3cc:	ea97 0347 	eors.w	r3, r7, r7, lsl #1
    a3d0:	f100 80d3 	bmi.w	a57a <mp_binary_op+0x2c2>
                return MP_OBJ_NEW_SMALL_INT(lhs_val);
    a3d4:	007f      	lsls	r7, r7, #1
    a3d6:	f047 0701 	orr.w	r7, r7, #1
    a3da:	e7b2      	b.n	a342 <mp_binary_op+0x8a>
                case MP_BINARY_OP_INPLACE_XOR: lhs_val ^= rhs_val; break;
    a3dc:	ea89 0708 	eor.w	r7, r9, r8
    a3e0:	e7f4      	b.n	a3cc <mp_binary_op+0x114>
                case MP_BINARY_OP_INPLACE_AND: lhs_val &= rhs_val; break;
    a3e2:	ea09 0708 	and.w	r7, r9, r8
    a3e6:	e7f1      	b.n	a3cc <mp_binary_op+0x114>
                    if (rhs_val < 0) {
    a3e8:	f1b8 0f00 	cmp.w	r8, #0
    a3ec:	db14      	blt.n	a418 <mp_binary_op+0x160>
                    } else if (rhs_val >= (mp_int_t)BITS_PER_WORD || lhs_val > (MP_SMALL_INT_MAX >> rhs_val) || lhs_val < (MP_SMALL_INT_MIN >> rhs_val)) {
    a3ee:	f1b8 0f1f 	cmp.w	r8, #31
    a3f2:	dc0b      	bgt.n	a40c <mp_binary_op+0x154>
    a3f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    a3f8:	fa43 f308 	asr.w	r3, r3, r8
    a3fc:	454b      	cmp	r3, r9
    a3fe:	db05      	blt.n	a40c <mp_binary_op+0x154>
    a400:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a404:	fa43 f308 	asr.w	r3, r3, r8
    a408:	454b      	cmp	r3, r9
    a40a:	dd08      	ble.n	a41e <mp_binary_op+0x166>
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    a40c:	4648      	mov	r0, r9
    a40e:	17c1      	asrs	r1, r0, #31
    a410:	f003 fd82 	bl	df18 <mp_obj_new_int_from_ll>
    a414:	4606      	mov	r6, r0
                        goto generic_binary_op;
    a416:	e0c3      	b.n	a5a0 <mp_binary_op+0x2e8>
                        mp_raise_ValueError("negative shift count");
    a418:	488f      	ldr	r0, [pc, #572]	; (a658 <mp_binary_op+0x3a0>)
    a41a:	f7ff ff45 	bl	a2a8 <mp_raise_ValueError>
                        lhs_val <<= rhs_val;
    a41e:	fa09 f708 	lsl.w	r7, r9, r8
                    break;
    a422:	e7d3      	b.n	a3cc <mp_binary_op+0x114>
                    if (rhs_val < 0) {
    a424:	f1b8 0f00 	cmp.w	r8, #0
    a428:	db07      	blt.n	a43a <mp_binary_op+0x182>
                        if (rhs_val >= (mp_int_t)BITS_PER_WORD) {
    a42a:	f1b8 0f1f 	cmp.w	r8, #31
    a42e:	dd01      	ble.n	a434 <mp_binary_op+0x17c>
                            rhs_val = BITS_PER_WORD - 1;
    a430:	f04f 081f 	mov.w	r8, #31
                        lhs_val >>= rhs_val;
    a434:	fa49 f708 	asr.w	r7, r9, r8
                    break;
    a438:	e7c8      	b.n	a3cc <mp_binary_op+0x114>
                        mp_raise_ValueError("negative shift count");
    a43a:	4887      	ldr	r0, [pc, #540]	; (a658 <mp_binary_op+0x3a0>)
    a43c:	f7ff ff34 	bl	a2a8 <mp_raise_ValueError>
                case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    a440:	eb09 0708 	add.w	r7, r9, r8
    a444:	e7c2      	b.n	a3cc <mp_binary_op+0x114>
                case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    a446:	eba9 0708 	sub.w	r7, r9, r8
    a44a:	e7bf      	b.n	a3cc <mp_binary_op+0x114>
                    if (mp_small_int_mul_overflow(lhs_val, rhs_val)) {
    a44c:	4641      	mov	r1, r8
    a44e:	4648      	mov	r0, r9
    a450:	f00b fe26 	bl	160a0 <mp_small_int_mul_overflow>
    a454:	b928      	cbnz	r0, a462 <mp_binary_op+0x1aa>
                        return MP_OBJ_NEW_SMALL_INT(lhs_val * rhs_val);
    a456:	fb08 f709 	mul.w	r7, r8, r9
    a45a:	007f      	lsls	r7, r7, #1
    a45c:	f047 0701 	orr.w	r7, r7, #1
    a460:	e76f      	b.n	a342 <mp_binary_op+0x8a>
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    a462:	4648      	mov	r0, r9
    a464:	17c1      	asrs	r1, r0, #31
    a466:	f003 fd57 	bl	df18 <mp_obj_new_int_from_ll>
    a46a:	4606      	mov	r6, r0
                        goto generic_binary_op;
    a46c:	e098      	b.n	a5a0 <mp_binary_op+0x2e8>
                    if (rhs_val == 0) {
    a46e:	f1b8 0f00 	cmp.w	r8, #0
    a472:	f000 80ff 	beq.w	a674 <mp_binary_op+0x3bc>
                    lhs_val = mp_small_int_floor_divide(lhs_val, rhs_val);
    a476:	4641      	mov	r1, r8
    a478:	4648      	mov	r0, r9
    a47a:	f00b fe51 	bl	16120 <mp_small_int_floor_divide>
    a47e:	4607      	mov	r7, r0
                    break;
    a480:	e7a4      	b.n	a3cc <mp_binary_op+0x114>
                    if (rhs_val == 0) {
    a482:	f1b8 0f00 	cmp.w	r8, #0
    a486:	f000 80f5 	beq.w	a674 <mp_binary_op+0x3bc>
                    return mp_obj_new_float((mp_float_t)lhs_val / (mp_float_t)rhs_val);
    a48a:	ee07 9a90 	vmov	s15, r9
    a48e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    a492:	ee07 8a90 	vmov	s15, r8
    a496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a49a:	ee80 0a27 	vdiv.f32	s0, s0, s15
    a49e:	f002 fcad 	bl	cdfc <mp_obj_new_float>
    a4a2:	4607      	mov	r7, r0
    a4a4:	e74d      	b.n	a342 <mp_binary_op+0x8a>
                    if (rhs_val == 0) {
    a4a6:	f1b8 0f00 	cmp.w	r8, #0
    a4aa:	f000 80e3 	beq.w	a674 <mp_binary_op+0x3bc>
                    lhs_val = mp_small_int_modulo(lhs_val, rhs_val);
    a4ae:	4641      	mov	r1, r8
    a4b0:	4648      	mov	r0, r9
    a4b2:	f00b fe26 	bl	16102 <mp_small_int_modulo>
    a4b6:	4607      	mov	r7, r0
                    break;
    a4b8:	e788      	b.n	a3cc <mp_binary_op+0x114>
                    if (rhs_val < 0) {
    a4ba:	f1b8 0f00 	cmp.w	r8, #0
    a4be:	db02      	blt.n	a4c6 <mp_binary_op+0x20e>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    a4c0:	464e      	mov	r6, r9
                        mp_int_t ans = 1;
    a4c2:	2701      	movs	r7, #1
    a4c4:	e016      	b.n	a4f4 <mp_binary_op+0x23c>
                        lhs = mp_obj_new_float(lhs_val);
    a4c6:	ee07 9a90 	vmov	s15, r9
    a4ca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    a4ce:	f002 fc95 	bl	cdfc <mp_obj_new_float>
    a4d2:	4606      	mov	r6, r0
                        goto generic_binary_op;
    a4d4:	e064      	b.n	a5a0 <mp_binary_op+0x2e8>
                            if (rhs_val == 1) {
    a4d6:	f1b8 0f01 	cmp.w	r8, #1
    a4da:	f43f af77 	beq.w	a3cc <mp_binary_op+0x114>
                            rhs_val /= 2;
    a4de:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    a4e2:	ea4f 0868 	mov.w	r8, r8, asr #1
                            if (mp_small_int_mul_overflow(lhs_val, lhs_val)) {
    a4e6:	4631      	mov	r1, r6
    a4e8:	4630      	mov	r0, r6
    a4ea:	f00b fdd9 	bl	160a0 <mp_small_int_mul_overflow>
    a4ee:	b980      	cbnz	r0, a512 <mp_binary_op+0x25a>
                            lhs_val *= lhs_val;
    a4f0:	fb06 f606 	mul.w	r6, r6, r6
                        while (rhs_val > 0) {
    a4f4:	f1b8 0f00 	cmp.w	r8, #0
    a4f8:	f77f af68 	ble.w	a3cc <mp_binary_op+0x114>
                            if (rhs_val & 1) {
    a4fc:	f018 0f01 	tst.w	r8, #1
    a500:	d0e9      	beq.n	a4d6 <mp_binary_op+0x21e>
                                if (mp_small_int_mul_overflow(ans, lhs_val)) {
    a502:	4631      	mov	r1, r6
    a504:	4638      	mov	r0, r7
    a506:	f00b fdcb 	bl	160a0 <mp_small_int_mul_overflow>
    a50a:	b910      	cbnz	r0, a512 <mp_binary_op+0x25a>
                                ans *= lhs_val;
    a50c:	fb06 f707 	mul.w	r7, r6, r7
    a510:	e7e1      	b.n	a4d6 <mp_binary_op+0x21e>
                    lhs = mp_obj_new_int_from_ll(MP_OBJ_SMALL_INT_VALUE(lhs));
    a512:	4648      	mov	r0, r9
    a514:	17c1      	asrs	r1, r0, #31
    a516:	f003 fcff 	bl	df18 <mp_obj_new_int_from_ll>
    a51a:	4606      	mov	r6, r0
                    goto generic_binary_op;
    a51c:	e040      	b.n	a5a0 <mp_binary_op+0x2e8>
                    if (rhs_val == 0) {
    a51e:	f1b8 0f00 	cmp.w	r8, #0
    a522:	f000 80a7 	beq.w	a674 <mp_binary_op+0x3bc>
                    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(2, NULL));
    a526:	2100      	movs	r1, #0
    a528:	2002      	movs	r0, #2
    a52a:	f007 f98b 	bl	11844 <mp_obj_new_tuple>
    a52e:	4607      	mov	r7, r0
                    tuple->items[0] = MP_OBJ_NEW_SMALL_INT(mp_small_int_floor_divide(lhs_val, rhs_val));
    a530:	4641      	mov	r1, r8
    a532:	4648      	mov	r0, r9
    a534:	f00b fdf4 	bl	16120 <mp_small_int_floor_divide>
    a538:	0043      	lsls	r3, r0, #1
    a53a:	f043 0301 	orr.w	r3, r3, #1
    a53e:	60bb      	str	r3, [r7, #8]
                    tuple->items[1] = MP_OBJ_NEW_SMALL_INT(mp_small_int_modulo(lhs_val, rhs_val));
    a540:	4641      	mov	r1, r8
    a542:	4648      	mov	r0, r9
    a544:	f00b fddd 	bl	16102 <mp_small_int_modulo>
    a548:	0043      	lsls	r3, r0, #1
    a54a:	f043 0301 	orr.w	r3, r3, #1
    a54e:	60fb      	str	r3, [r7, #12]
                    return MP_OBJ_FROM_PTR(tuple);
    a550:	e6f7      	b.n	a342 <mp_binary_op+0x8a>
    a552:	45c1      	cmp	r9, r8
    a554:	f280 8098 	bge.w	a688 <mp_binary_op+0x3d0>
    a558:	4f3d      	ldr	r7, [pc, #244]	; (a650 <mp_binary_op+0x398>)
    a55a:	e6f2      	b.n	a342 <mp_binary_op+0x8a>
    a55c:	45c1      	cmp	r9, r8
    a55e:	f340 8095 	ble.w	a68c <mp_binary_op+0x3d4>
    a562:	4f3b      	ldr	r7, [pc, #236]	; (a650 <mp_binary_op+0x398>)
    a564:	e6ed      	b.n	a342 <mp_binary_op+0x8a>
    a566:	45c1      	cmp	r9, r8
    a568:	f300 8092 	bgt.w	a690 <mp_binary_op+0x3d8>
    a56c:	4f38      	ldr	r7, [pc, #224]	; (a650 <mp_binary_op+0x398>)
    a56e:	e6e8      	b.n	a342 <mp_binary_op+0x8a>
    a570:	45c1      	cmp	r9, r8
    a572:	f2c0 808f 	blt.w	a694 <mp_binary_op+0x3dc>
    a576:	4f36      	ldr	r7, [pc, #216]	; (a650 <mp_binary_op+0x398>)
    a578:	e6e3      	b.n	a342 <mp_binary_op+0x8a>
                return mp_obj_new_int(lhs_val);
    a57a:	4638      	mov	r0, r7
    a57c:	f003 fcdd 	bl	df3a <mp_obj_new_int>
    a580:	4607      	mov	r7, r0
    a582:	e6de      	b.n	a342 <mp_binary_op+0x8a>
        } else if (mp_obj_is_float(rhs)) {
    a584:	f012 0303 	ands.w	r3, r2, #3
    a588:	d103      	bne.n	a592 <mp_binary_op+0x2da>
    a58a:	6811      	ldr	r1, [r2, #0]
    a58c:	4a33      	ldr	r2, [pc, #204]	; (a65c <mp_binary_op+0x3a4>)
    a58e:	4291      	cmp	r1, r2
    a590:	d026      	beq.n	a5e0 <mp_binary_op+0x328>
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_complex)) {
    a592:	b91b      	cbnz	r3, a59c <mp_binary_op+0x2e4>
    a594:	682a      	ldr	r2, [r5, #0]
    a596:	4b32      	ldr	r3, [pc, #200]	; (a660 <mp_binary_op+0x3a8>)
    a598:	429a      	cmp	r2, r3
    a59a:	d02d      	beq.n	a5f8 <mp_binary_op+0x340>
    if (op == MP_BINARY_OP_IN) {
    a59c:	2c06      	cmp	r4, #6
    a59e:	d03a      	beq.n	a616 <mp_binary_op+0x35e>
    type = mp_obj_get_type(lhs);
    a5a0:	4630      	mov	r0, r6
    a5a2:	f000 faeb 	bl	ab7c <mp_obj_get_type>
    if (type->binary_op != NULL) {
    a5a6:	6983      	ldr	r3, [r0, #24]
    a5a8:	b13b      	cbz	r3, a5ba <mp_binary_op+0x302>
        mp_obj_t result = type->binary_op(op, lhs, rhs);
    a5aa:	462a      	mov	r2, r5
    a5ac:	4631      	mov	r1, r6
    a5ae:	4620      	mov	r0, r4
    a5b0:	4798      	blx	r3
        if (result != MP_OBJ_NULL) {
    a5b2:	4607      	mov	r7, r0
    a5b4:	2800      	cmp	r0, #0
    a5b6:	f47f aec4 	bne.w	a342 <mp_binary_op+0x8a>
    if (op == MP_BINARY_OP_CONTAINS) {
    a5ba:	2c22      	cmp	r4, #34	; 0x22
    a5bc:	d133      	bne.n	a626 <mp_binary_op+0x36e>
        mp_obj_t iter = mp_getiter(lhs, &iter_buf);
    a5be:	a902      	add	r1, sp, #8
    a5c0:	4630      	mov	r0, r6
    a5c2:	f7ff f9a5 	bl	9910 <mp_getiter>
    a5c6:	4604      	mov	r4, r0
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    a5c8:	4620      	mov	r0, r4
    a5ca:	f7ff fa0f 	bl	99ec <mp_iternext>
    a5ce:	2804      	cmp	r0, #4
    a5d0:	d026      	beq.n	a620 <mp_binary_op+0x368>
            if (mp_obj_equal(next, rhs)) {
    a5d2:	4629      	mov	r1, r5
    a5d4:	f000 fb88 	bl	ace8 <mp_obj_equal>
    a5d8:	2800      	cmp	r0, #0
    a5da:	d0f5      	beq.n	a5c8 <mp_binary_op+0x310>
                return mp_const_true;
    a5dc:	4f1c      	ldr	r7, [pc, #112]	; (a650 <mp_binary_op+0x398>)
    a5de:	e6b0      	b.n	a342 <mp_binary_op+0x8a>
            mp_obj_t res = mp_obj_float_binary_op(op, lhs_val, rhs);
    a5e0:	4629      	mov	r1, r5
    a5e2:	ee07 9a90 	vmov	s15, r9
    a5e6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    a5ea:	f002 fcc9 	bl	cf80 <mp_obj_float_binary_op>
            if (res == MP_OBJ_NULL) {
    a5ee:	4607      	mov	r7, r0
    a5f0:	2800      	cmp	r0, #0
    a5f2:	f47f aea6 	bne.w	a342 <mp_binary_op+0x8a>
    a5f6:	e016      	b.n	a626 <mp_binary_op+0x36e>
            mp_obj_t res = mp_obj_complex_binary_op(op, lhs_val, 0, rhs);
    a5f8:	4629      	mov	r1, r5
    a5fa:	eddf 0a1a 	vldr	s1, [pc, #104]	; a664 <mp_binary_op+0x3ac>
    a5fe:	ee07 9a90 	vmov	s15, r9
    a602:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    a606:	4620      	mov	r0, r4
    a608:	f001 fc18 	bl	be3c <mp_obj_complex_binary_op>
            if (res == MP_OBJ_NULL) {
    a60c:	4607      	mov	r7, r0
    a60e:	2800      	cmp	r0, #0
    a610:	f47f ae97 	bne.w	a342 <mp_binary_op+0x8a>
    a614:	e007      	b.n	a626 <mp_binary_op+0x36e>
    a616:	4633      	mov	r3, r6
        lhs = rhs;
    a618:	462e      	mov	r6, r5
        rhs = temp;
    a61a:	461d      	mov	r5, r3
        op = MP_BINARY_OP_CONTAINS;
    a61c:	2422      	movs	r4, #34	; 0x22
    a61e:	e7bf      	b.n	a5a0 <mp_binary_op+0x2e8>
        return mp_const_false;
    a620:	4f0a      	ldr	r7, [pc, #40]	; (a64c <mp_binary_op+0x394>)
    a622:	e68e      	b.n	a342 <mp_binary_op+0x8a>
                rhs = tuple->items[i];
    a624:	4645      	mov	r5, r8
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    a626:	4b10      	ldr	r3, [pc, #64]	; (a668 <mp_binary_op+0x3b0>)
    a628:	5d1c      	ldrb	r4, [r3, r4]
    a62a:	4630      	mov	r0, r6
    a62c:	f000 fac0 	bl	abb0 <mp_obj_get_type_str>
    a630:	4606      	mov	r6, r0
    a632:	4628      	mov	r0, r5
    a634:	f000 fabc 	bl	abb0 <mp_obj_get_type_str>
    a638:	9000      	str	r0, [sp, #0]
    a63a:	4633      	mov	r3, r6
    a63c:	4622      	mov	r2, r4
    a63e:	490b      	ldr	r1, [pc, #44]	; (a66c <mp_binary_op+0x3b4>)
    a640:	480b      	ldr	r0, [pc, #44]	; (a670 <mp_binary_op+0x3b8>)
    a642:	f002 fa43 	bl	cacc <mp_obj_new_exception_msg_varg>
    a646:	f7f6 f91b 	bl	880 <nlr_jump>
    a64a:	bf00      	nop
    a64c:	00025f44 	.word	0x00025f44
    a650:	00025f4c 	.word	0x00025f4c
    a654:	00028844 	.word	0x00028844
    a658:	00025638 	.word	0x00025638
    a65c:	00026d90 	.word	0x00026d90
    a660:	00026114 	.word	0x00026114
    a664:	00000000 	.word	0x00000000
    a668:	00028ad0 	.word	0x00028ad0
    a66c:	00025650 	.word	0x00025650
    a670:	00026c84 	.word	0x00026c84
    mp_raise_msg(&mp_type_ZeroDivisionError, "division by zero");
    a674:	4908      	ldr	r1, [pc, #32]	; (a698 <mp_binary_op+0x3e0>)
    a676:	4809      	ldr	r0, [pc, #36]	; (a69c <mp_binary_op+0x3e4>)
    a678:	f7ff fdf6 	bl	a268 <mp_raise_msg>
    a67c:	4f08      	ldr	r7, [pc, #32]	; (a6a0 <mp_binary_op+0x3e8>)
    a67e:	e660      	b.n	a342 <mp_binary_op+0x8a>
                return mp_const_false;
    a680:	4f08      	ldr	r7, [pc, #32]	; (a6a4 <mp_binary_op+0x3ec>)
    a682:	e65e      	b.n	a342 <mp_binary_op+0x8a>
                    return mp_const_true;
    a684:	4f06      	ldr	r7, [pc, #24]	; (a6a0 <mp_binary_op+0x3e8>)
    a686:	e65c      	b.n	a342 <mp_binary_op+0x8a>
    a688:	4f06      	ldr	r7, [pc, #24]	; (a6a4 <mp_binary_op+0x3ec>)
    a68a:	e65a      	b.n	a342 <mp_binary_op+0x8a>
    a68c:	4f05      	ldr	r7, [pc, #20]	; (a6a4 <mp_binary_op+0x3ec>)
    a68e:	e658      	b.n	a342 <mp_binary_op+0x8a>
    a690:	4f04      	ldr	r7, [pc, #16]	; (a6a4 <mp_binary_op+0x3ec>)
    a692:	e656      	b.n	a342 <mp_binary_op+0x8a>
    a694:	4f03      	ldr	r7, [pc, #12]	; (a6a4 <mp_binary_op+0x3ec>)
    a696:	e654      	b.n	a342 <mp_binary_op+0x8a>
    a698:	000260a4 	.word	0x000260a4
    a69c:	00026cfc 	.word	0x00026cfc
    a6a0:	00025f4c 	.word	0x00025f4c
    a6a4:	00025f44 	.word	0x00025f44

0000a6a8 <mp_raise_TypeError>:
}

NORETURN void mp_raise_TypeError(const char *msg) {
    a6a8:	b508      	push	{r3, lr}
    mp_raise_msg(&mp_type_TypeError, msg);
    a6aa:	4601      	mov	r1, r0
    a6ac:	4801      	ldr	r0, [pc, #4]	; (a6b4 <mp_raise_TypeError+0xc>)
    a6ae:	f7ff fddb 	bl	a268 <mp_raise_msg>
    a6b2:	bf00      	nop
    a6b4:	00026c84 	.word	0x00026c84

0000a6b8 <mp_raise_OSError>:
}

NORETURN void mp_raise_OSError(int errno_) {
    a6b8:	b508      	push	{r3, lr}
    nlr_raise(mp_obj_new_exception_arg1(&mp_type_OSError, MP_OBJ_NEW_SMALL_INT(errno_)));
    a6ba:	0041      	lsls	r1, r0, #1
    a6bc:	f041 0101 	orr.w	r1, r1, #1
    a6c0:	4802      	ldr	r0, [pc, #8]	; (a6cc <mp_raise_OSError+0x14>)
    a6c2:	f002 f9f7 	bl	cab4 <mp_obj_new_exception_arg1>
    a6c6:	f7f6 f8db 	bl	880 <nlr_jump>
    a6ca:	bf00      	nop
    a6cc:	00026b1c 	.word	0x00026b1c

0000a6d0 <mp_raise_NotImplementedError>:
}

NORETURN void mp_raise_NotImplementedError(const char *msg) {
    a6d0:	b508      	push	{r3, lr}
    mp_raise_msg(&mp_type_NotImplementedError, msg);
    a6d2:	4601      	mov	r1, r0
    a6d4:	4801      	ldr	r0, [pc, #4]	; (a6dc <mp_raise_NotImplementedError+0xc>)
    a6d6:	f7ff fdc7 	bl	a268 <mp_raise_msg>
    a6da:	bf00      	nop
    a6dc:	00026ae0 	.word	0x00026ae0

0000a6e0 <mp_handle_pending>:
}

#else // MICROPY_ENABLE_SCHEDULER

// A variant of this is inlined in the VM at the pending exception check
void mp_handle_pending(void) {
    a6e0:	b508      	push	{r3, lr}
    if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
    a6e2:	4b05      	ldr	r3, [pc, #20]	; (a6f8 <mp_handle_pending+0x18>)
    a6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    a6e6:	b903      	cbnz	r3, a6ea <mp_handle_pending+0xa>
        mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
        MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
        nlr_raise(obj);
    }
}
    a6e8:	bd08      	pop	{r3, pc}
        mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
    a6ea:	4b03      	ldr	r3, [pc, #12]	; (a6f8 <mp_handle_pending+0x18>)
    a6ec:	6c58      	ldr	r0, [r3, #68]	; 0x44
        MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    a6ee:	2200      	movs	r2, #0
    a6f0:	645a      	str	r2, [r3, #68]	; 0x44
        nlr_raise(obj);
    a6f2:	f7f6 f8c5 	bl	880 <nlr_jump>
    a6f6:	bf00      	nop
    a6f8:	200008a0 	.word	0x200008a0

0000a6fc <mp_stack_ctrl_init>:
 */

#include "py/runtime.h"
#include "py/stackctrl.h"

void mp_stack_ctrl_init(void) {
    a6fc:	b082      	sub	sp, #8
    volatile int stack_dummy;
    MP_STATE_THREAD(stack_top) = (char*)&stack_dummy;
    a6fe:	4b02      	ldr	r3, [pc, #8]	; (a708 <mp_stack_ctrl_init+0xc>)
    a700:	aa01      	add	r2, sp, #4
    a702:	60da      	str	r2, [r3, #12]
}
    a704:	b002      	add	sp, #8
    a706:	4770      	bx	lr
    a708:	200008a0 	.word	0x200008a0

0000a70c <mp_stack_set_top>:

void mp_stack_set_top(void *top) {
    MP_STATE_THREAD(stack_top) = top;
    a70c:	4b01      	ldr	r3, [pc, #4]	; (a714 <mp_stack_set_top+0x8>)
    a70e:	60d8      	str	r0, [r3, #12]
}
    a710:	4770      	bx	lr
    a712:	bf00      	nop
    a714:	200008a0 	.word	0x200008a0

0000a718 <mp_arg_check_num>:
#include <stdlib.h>
#include <assert.h>

#include "py/runtime.h"

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    a718:	b510      	push	{r4, lr}
    a71a:	461c      	mov	r4, r3
    a71c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    // TODO maybe take the function name as an argument so we can print nicer error messages

    if (n_kw && !takes_kw) {
    a720:	b101      	cbz	r1, a724 <mp_arg_check_num+0xc>
    a722:	b133      	cbz	r3, a732 <mp_arg_check_num+0x1a>
        } else {
            mp_raise_TypeError("function does not take keyword arguments");
        }
    }

    if (n_args_min == n_args_max) {
    a724:	42a2      	cmp	r2, r4
    a726:	d007      	beq.n	a738 <mp_arg_check_num+0x20>
                    "function takes %d positional arguments but %d were given",
                    n_args_min, n_args));
            }
        }
    } else {
        if (n_args < n_args_min) {
    a728:	4282      	cmp	r2, r0
    a72a:	d80e      	bhi.n	a74a <mp_arg_check_num+0x32>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function missing %d required positional arguments",
                    n_args_min - n_args));
            }
        } else if (n_args > n_args_max) {
    a72c:	4284      	cmp	r4, r0
    a72e:	d313      	bcc.n	a758 <mp_arg_check_num+0x40>
                    "function expected at most %d arguments, got %d",
                    n_args_max, n_args));
            }
        }
    }
}
    a730:	bd10      	pop	{r4, pc}
            mp_raise_TypeError("function does not take keyword arguments");
    a732:	480d      	ldr	r0, [pc, #52]	; (a768 <mp_arg_check_num+0x50>)
    a734:	f7ff ffb8 	bl	a6a8 <mp_raise_TypeError>
        if (n_args != n_args_min) {
    a738:	4282      	cmp	r2, r0
    a73a:	d0f9      	beq.n	a730 <mp_arg_check_num+0x18>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    a73c:	4603      	mov	r3, r0
    a73e:	490b      	ldr	r1, [pc, #44]	; (a76c <mp_arg_check_num+0x54>)
    a740:	480b      	ldr	r0, [pc, #44]	; (a770 <mp_arg_check_num+0x58>)
    a742:	f002 f9c3 	bl	cacc <mp_obj_new_exception_msg_varg>
    a746:	f7f6 f89b 	bl	880 <nlr_jump>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    a74a:	1a12      	subs	r2, r2, r0
    a74c:	4909      	ldr	r1, [pc, #36]	; (a774 <mp_arg_check_num+0x5c>)
    a74e:	4808      	ldr	r0, [pc, #32]	; (a770 <mp_arg_check_num+0x58>)
    a750:	f002 f9bc 	bl	cacc <mp_obj_new_exception_msg_varg>
    a754:	f7f6 f894 	bl	880 <nlr_jump>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    a758:	4603      	mov	r3, r0
    a75a:	4622      	mov	r2, r4
    a75c:	4906      	ldr	r1, [pc, #24]	; (a778 <mp_arg_check_num+0x60>)
    a75e:	4804      	ldr	r0, [pc, #16]	; (a770 <mp_arg_check_num+0x58>)
    a760:	f002 f9b4 	bl	cacc <mp_obj_new_exception_msg_varg>
    a764:	f7f6 f88c 	bl	880 <nlr_jump>
    a768:	000258f0 	.word	0x000258f0
    a76c:	0002591c 	.word	0x0002591c
    a770:	00026c84 	.word	0x00026c84
    a774:	00025958 	.word	0x00025958
    a778:	0002598c 	.word	0x0002598c

0000a77c <mp_arg_parse_all>:

void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a780:	b083      	sub	sp, #12
    a782:	4680      	mov	r8, r0
    a784:	468a      	mov	sl, r1
    a786:	9201      	str	r2, [sp, #4]
    a788:	461f      	mov	r7, r3
    a78a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    a78c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    size_t pos_found = 0, kws_found = 0;
    for (size_t i = 0; i < n_allowed; i++) {
    a790:	2400      	movs	r4, #0
    size_t pos_found = 0, kws_found = 0;
    a792:	9400      	str	r4, [sp, #0]
    a794:	4626      	mov	r6, r4
    for (size_t i = 0; i < n_allowed; i++) {
    a796:	e027      	b.n	a7e8 <mp_arg_parse_all+0x6c>
                goto extra_positional;
            }
            pos_found++;
            given_arg = pos[i];
        } else {
            mp_map_elem_t *kw = mp_map_lookup(kws, MP_OBJ_NEW_QSTR(allowed[i].qst), MP_MAP_LOOKUP);
    a798:	eb05 0bc4 	add.w	fp, r5, r4, lsl #3
    a79c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
    a7a0:	0089      	lsls	r1, r1, #2
    a7a2:	2200      	movs	r2, #0
    a7a4:	f041 0102 	orr.w	r1, r1, #2
    a7a8:	9801      	ldr	r0, [sp, #4]
    a7aa:	f000 f8c5 	bl	a938 <mp_map_lookup>
            if (kw == NULL) {
    a7ae:	b120      	cbz	r0, a7ba <mp_arg_parse_all+0x3e>
                    }
                }
                out_vals[i] = allowed[i].defval;
                continue;
            } else {
                kws_found++;
    a7b0:	9a00      	ldr	r2, [sp, #0]
    a7b2:	3201      	adds	r2, #1
    a7b4:	9200      	str	r2, [sp, #0]
                given_arg = kw->value;
    a7b6:	6840      	ldr	r0, [r0, #4]
    a7b8:	e023      	b.n	a802 <mp_arg_parse_all+0x86>
                if (allowed[i].flags & MP_ARG_REQUIRED) {
    a7ba:	f8bb 3002 	ldrh.w	r3, [fp, #2]
    a7be:	f413 7f80 	tst.w	r3, #256	; 0x100
    a7c2:	d104      	bne.n	a7ce <mp_arg_parse_all+0x52>
                out_vals[i] = allowed[i].defval;
    a7c4:	f8db 3004 	ldr.w	r3, [fp, #4]
    a7c8:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
                continue;
    a7cc:	e00b      	b.n	a7e6 <mp_arg_parse_all+0x6a>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    a7ce:	f8bb 2000 	ldrh.w	r2, [fp]
    a7d2:	4920      	ldr	r1, [pc, #128]	; (a854 <mp_arg_parse_all+0xd8>)
    a7d4:	4820      	ldr	r0, [pc, #128]	; (a858 <mp_arg_parse_all+0xdc>)
    a7d6:	f002 f979 	bl	cacc <mp_obj_new_exception_msg_varg>
    a7da:	f7f6 f851 	bl	880 <nlr_jump>
            }
        }
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
            out_vals[i].u_bool = mp_obj_is_true(given_arg);
    a7de:	f000 fccd 	bl	b17c <mp_obj_is_true>
    a7e2:	f809 0024 	strb.w	r0, [r9, r4, lsl #2]
    for (size_t i = 0; i < n_allowed; i++) {
    a7e6:	3401      	adds	r4, #1
    a7e8:	42bc      	cmp	r4, r7
    a7ea:	d221      	bcs.n	a830 <mp_arg_parse_all+0xb4>
        if (i < n_pos) {
    a7ec:	4544      	cmp	r4, r8
    a7ee:	d2d3      	bcs.n	a798 <mp_arg_parse_all+0x1c>
            if (allowed[i].flags & MP_ARG_KW_ONLY) {
    a7f0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    a7f4:	885b      	ldrh	r3, [r3, #2]
    a7f6:	f413 7f00 	tst.w	r3, #512	; 0x200
    a7fa:	d125      	bne.n	a848 <mp_arg_parse_all+0xcc>
            pos_found++;
    a7fc:	3601      	adds	r6, #1
            given_arg = pos[i];
    a7fe:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
    a802:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    a806:	789b      	ldrb	r3, [r3, #2]
    a808:	2b01      	cmp	r3, #1
    a80a:	d0e8      	beq.n	a7de <mp_arg_parse_all+0x62>
        } else if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_INT) {
    a80c:	2b02      	cmp	r3, #2
    a80e:	d004      	beq.n	a81a <mp_arg_parse_all+0x9e>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
        } else {
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    a810:	2b03      	cmp	r3, #3
    a812:	d107      	bne.n	a824 <mp_arg_parse_all+0xa8>
            out_vals[i].u_obj = given_arg;
    a814:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    a818:	e7e5      	b.n	a7e6 <mp_arg_parse_all+0x6a>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
    a81a:	f000 fad7 	bl	adcc <mp_obj_get_int>
    a81e:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    a822:	e7e0      	b.n	a7e6 <mp_arg_parse_all+0x6a>
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    a824:	4b0d      	ldr	r3, [pc, #52]	; (a85c <mp_arg_parse_all+0xe0>)
    a826:	4a0e      	ldr	r2, [pc, #56]	; (a860 <mp_arg_parse_all+0xe4>)
    a828:	216b      	movs	r1, #107	; 0x6b
    a82a:	480e      	ldr	r0, [pc, #56]	; (a864 <mp_arg_parse_all+0xe8>)
    a82c:	f00d fe96 	bl	1855c <__assert_func>
        }
    }
    if (pos_found < n_pos) {
    a830:	4546      	cmp	r6, r8
    a832:	d309      	bcc.n	a848 <mp_arg_parse_all+0xcc>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra positional arguments given");
        }
    }
    if (kws_found < kws->used) {
    a834:	9b01      	ldr	r3, [sp, #4]
    a836:	681b      	ldr	r3, [r3, #0]
    a838:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    a83c:	9a00      	ldr	r2, [sp, #0]
    a83e:	4293      	cmp	r3, r2
    a840:	d805      	bhi.n	a84e <mp_arg_parse_all+0xd2>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra keyword arguments given");
        }
    }
}
    a842:	b003      	add	sp, #12
    a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            mp_raise_TypeError("extra positional arguments given");
    a848:	4807      	ldr	r0, [pc, #28]	; (a868 <mp_arg_parse_all+0xec>)
    a84a:	f7ff ff2d 	bl	a6a8 <mp_raise_TypeError>
            mp_raise_TypeError("extra keyword arguments given");
    a84e:	4807      	ldr	r0, [pc, #28]	; (a86c <mp_arg_parse_all+0xf0>)
    a850:	f7ff ff2a 	bl	a6a8 <mp_raise_TypeError>
    a854:	000259bc 	.word	0x000259bc
    a858:	00026c84 	.word	0x00026c84
    a85c:	000259d4 	.word	0x000259d4
    a860:	000258dc 	.word	0x000258dc
    a864:	00025a08 	.word	0x00025a08
    a868:	00025a1c 	.word	0x00025a1c
    a86c:	00025a40 	.word	0x00025a40

0000a870 <mp_arg_parse_all_kw_array>:

void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    a870:	b570      	push	{r4, r5, r6, lr}
    a872:	b086      	sub	sp, #24
    a874:	4604      	mov	r4, r0
    a876:	4615      	mov	r5, r2
    a878:	461e      	mov	r6, r3
    mp_map_t kw_args;
    mp_map_init_fixed_table(&kw_args, n_kw, args + n_pos);
    a87a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    a87e:	a803      	add	r0, sp, #12
    a880:	f000 f837 	bl	a8f2 <mp_map_init_fixed_table>
    mp_arg_parse_all(n_pos, args, &kw_args, n_allowed, allowed, out_vals);
    a884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a886:	9301      	str	r3, [sp, #4]
    a888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a88a:	9300      	str	r3, [sp, #0]
    a88c:	4633      	mov	r3, r6
    a88e:	aa03      	add	r2, sp, #12
    a890:	4629      	mov	r1, r5
    a892:	4620      	mov	r0, r4
    a894:	f7ff ff72 	bl	a77c <mp_arg_parse_all>
}
    a898:	b006      	add	sp, #24
    a89a:	bd70      	pop	{r4, r5, r6, pc}

0000a89c <get_hash_alloc_greater_or_equal_to>:
    97, 127, 167, 223, 293, 389, 521, 691, 919, 1223, 1627, 2161, // *1.33
    3229, 4831, 7243, 10861, 16273, 24407, 36607, 54907, // *1.5
};

STATIC size_t get_hash_alloc_greater_or_equal_to(size_t x) {
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    a89c:	2300      	movs	r3, #0
    a89e:	2b21      	cmp	r3, #33	; 0x21
    a8a0:	d806      	bhi.n	a8b0 <get_hash_alloc_greater_or_equal_to+0x14>
        if (hash_allocation_sizes[i] >= x) {
    a8a2:	4906      	ldr	r1, [pc, #24]	; (a8bc <get_hash_alloc_greater_or_equal_to+0x20>)
    a8a4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    a8a8:	4282      	cmp	r2, r0
    a8aa:	d205      	bcs.n	a8b8 <get_hash_alloc_greater_or_equal_to+0x1c>
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    a8ac:	3301      	adds	r3, #1
    a8ae:	e7f6      	b.n	a89e <get_hash_alloc_greater_or_equal_to+0x2>
            return hash_allocation_sizes[i];
        }
    }
    // ran out of primes in the table!
    // return something sensible, at least make it odd
    return (x + x / 2) | 1;
    a8b0:	eb00 0050 	add.w	r0, r0, r0, lsr #1
    a8b4:	f040 0201 	orr.w	r2, r0, #1
}
    a8b8:	4610      	mov	r0, r2
    a8ba:	4770      	bx	lr
    a8bc:	00025a70 	.word	0x00025a70

0000a8c0 <mp_map_init>:

/******************************************************************************/
/* map                                                                        */

void mp_map_init(mp_map_t *map, size_t n) {
    a8c0:	b510      	push	{r4, lr}
    a8c2:	4604      	mov	r4, r0
    if (n == 0) {
    a8c4:	b979      	cbnz	r1, a8e6 <mp_map_init+0x26>
        map->alloc = 0;
    a8c6:	2300      	movs	r3, #0
    a8c8:	6043      	str	r3, [r0, #4]
        map->table = NULL;
    a8ca:	6083      	str	r3, [r0, #8]
    } else {
        map->alloc = n;
        map->table = m_new0(mp_map_elem_t, map->alloc);
    }
    map->used = 0;
    a8cc:	6823      	ldr	r3, [r4, #0]
    a8ce:	f36f 03df 	bfc	r3, #3, #29
    a8d2:	6023      	str	r3, [r4, #0]
    map->all_keys_are_qstrs = 1;
    a8d4:	b2db      	uxtb	r3, r3
    map->is_fixed = 0;
    a8d6:	f043 0301 	orr.w	r3, r3, #1
    map->is_ordered = 0;
    a8da:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a8de:	f36f 0382 	bfc	r3, #2, #1
    a8e2:	7023      	strb	r3, [r4, #0]
}
    a8e4:	bd10      	pop	{r4, pc}
        map->alloc = n;
    a8e6:	6061      	str	r1, [r4, #4]
        map->table = m_new0(mp_map_elem_t, map->alloc);
    a8e8:	00c8      	lsls	r0, r1, #3
    a8ea:	f7f5 fffa 	bl	8e2 <m_malloc0>
    a8ee:	60a0      	str	r0, [r4, #8]
    a8f0:	e7ec      	b.n	a8cc <mp_map_init+0xc>

0000a8f2 <mp_map_init_fixed_table>:

void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table) {
    map->alloc = n;
    a8f2:	6041      	str	r1, [r0, #4]
    map->used = n;
    a8f4:	6803      	ldr	r3, [r0, #0]
    a8f6:	f361 03df 	bfi	r3, r1, #3, #29
    a8fa:	6003      	str	r3, [r0, #0]
    map->all_keys_are_qstrs = 1;
    a8fc:	b2db      	uxtb	r3, r3
    map->is_fixed = 1;
    map->is_ordered = 1;
    a8fe:	f043 0307 	orr.w	r3, r3, #7
    a902:	7003      	strb	r3, [r0, #0]
    map->table = (mp_map_elem_t*)table;
    a904:	6082      	str	r2, [r0, #8]
}
    a906:	4770      	bx	lr

0000a908 <mp_map_clear>:
        m_del(mp_map_elem_t, map->table, map->alloc);
    }
    map->used = map->alloc = 0;
}

void mp_map_clear(mp_map_t *map) {
    a908:	b510      	push	{r4, lr}
    a90a:	4604      	mov	r4, r0
    if (!map->is_fixed) {
    a90c:	7803      	ldrb	r3, [r0, #0]
    a90e:	f013 0f02 	tst.w	r3, #2
    a912:	d00d      	beq.n	a930 <mp_map_clear+0x28>
        m_del(mp_map_elem_t, map->table, map->alloc);
    }
    map->alloc = 0;
    a914:	2200      	movs	r2, #0
    a916:	6062      	str	r2, [r4, #4]
    map->used = 0;
    a918:	6823      	ldr	r3, [r4, #0]
    a91a:	f362 03df 	bfi	r3, r2, #3, #29
    a91e:	6023      	str	r3, [r4, #0]
    map->all_keys_are_qstrs = 1;
    a920:	b2db      	uxtb	r3, r3
    map->is_fixed = 0;
    a922:	f043 0301 	orr.w	r3, r3, #1
    a926:	f362 0341 	bfi	r3, r2, #1, #1
    a92a:	7023      	strb	r3, [r4, #0]
    map->table = NULL;
    a92c:	60a2      	str	r2, [r4, #8]
}
    a92e:	bd10      	pop	{r4, pc}
        m_del(mp_map_elem_t, map->table, map->alloc);
    a930:	6880      	ldr	r0, [r0, #8]
    a932:	f7f5 ffec 	bl	90e <m_free>
    a936:	e7ed      	b.n	a914 <mp_map_clear+0xc>

0000a938 <mp_map_lookup>:
//  - returns NULL if not found, else the slot it was found in with key,value non-null
// MP_MAP_LOOKUP_ADD_IF_NOT_FOUND behaviour:
//  - returns slot, with key non-null and value=MP_OBJ_NULL if it was added
// MP_MAP_LOOKUP_REMOVE_IF_FOUND behaviour:
//  - returns NULL if not found, else the slot if was found in with key null and value non-null
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind) {
    a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a93c:	b083      	sub	sp, #12
    a93e:	4606      	mov	r6, r0
    a940:	460f      	mov	r7, r1
    a942:	9200      	str	r2, [sp, #0]
    // If the map is a fixed array then we must only be called for a lookup
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    a944:	7803      	ldrb	r3, [r0, #0]
    a946:	f013 0f02 	tst.w	r3, #2
    a94a:	d000      	beq.n	a94e <mp_map_lookup+0x16>
    a94c:	b9d2      	cbnz	r2, a984 <mp_map_lookup+0x4c>

    // Work out if we can compare just pointers
    bool compare_only_ptrs = map->all_keys_are_qstrs;
    a94e:	f896 8000 	ldrb.w	r8, [r6]
    if (compare_only_ptrs) {
    a952:	f018 0801 	ands.w	r8, r8, #1
    a956:	d00c      	beq.n	a972 <mp_map_lookup+0x3a>
    { return ((((mp_int_t)(o)) & 3) == 2); }
    a958:	f007 0203 	and.w	r2, r7, #3
        if (MP_OBJ_IS_QSTR(index)) {
    a95c:	2a02      	cmp	r2, #2
    a95e:	d008      	beq.n	a972 <mp_map_lookup+0x3a>
            // Index is a qstr, so can just do ptr comparison.
        } else if (MP_OBJ_IS_TYPE(index, &mp_type_str)) {
    a960:	b91a      	cbnz	r2, a96a <mp_map_lookup+0x32>
    a962:	6839      	ldr	r1, [r7, #0]
    a964:	4a68      	ldr	r2, [pc, #416]	; (ab08 <mp_map_lookup+0x1d0>)
    a966:	4291      	cmp	r1, r2
    a968:	d012      	beq.n	a990 <mp_map_lookup+0x58>
            // We can either intern the string, or force a full equality comparison.
            // We chose the latter, since interning costs time and potentially RAM,
            // and it won't necessarily benefit subsequent calls because these calls
            // most likely won't pass the newly-interned string.
            compare_only_ptrs = false;
        } else if (lookup_kind != MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    a96a:	9a00      	ldr	r2, [sp, #0]
    a96c:	2a01      	cmp	r2, #1
    a96e:	f040 80c0 	bne.w	aaf2 <mp_map_lookup+0x1ba>
            return NULL;
        }
    }

    // if the map is an ordered array then we must do a brute force linear search
    if (map->is_ordered) {
    a972:	f013 0f04 	tst.w	r3, #4
    a976:	d022      	beq.n	a9be <mp_map_lookup+0x86>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    a978:	68b5      	ldr	r5, [r6, #8]
    a97a:	6834      	ldr	r4, [r6, #0]
    a97c:	f024 0407 	bic.w	r4, r4, #7
    a980:	442c      	add	r4, r5
    a982:	e009      	b.n	a998 <mp_map_lookup+0x60>
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    a984:	4b61      	ldr	r3, [pc, #388]	; (ab0c <mp_map_lookup+0x1d4>)
    a986:	4a62      	ldr	r2, [pc, #392]	; (ab10 <mp_map_lookup+0x1d8>)
    a988:	2194      	movs	r1, #148	; 0x94
    a98a:	4862      	ldr	r0, [pc, #392]	; (ab14 <mp_map_lookup+0x1dc>)
    a98c:	f00d fde6 	bl	1855c <__assert_func>
            compare_only_ptrs = false;
    a990:	f04f 0800 	mov.w	r8, #0
    a994:	e7ed      	b.n	a972 <mp_map_lookup+0x3a>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    a996:	3508      	adds	r5, #8
    a998:	42a5      	cmp	r5, r4
    a99a:	d20b      	bcs.n	a9b4 <mp_map_lookup+0x7c>
            if (elem->key == index || (!compare_only_ptrs && mp_obj_equal(elem->key, index))) {
    a99c:	6828      	ldr	r0, [r5, #0]
    a99e:	42b8      	cmp	r0, r7
    a9a0:	d009      	beq.n	a9b6 <mp_map_lookup+0x7e>
    a9a2:	f1b8 0f00 	cmp.w	r8, #0
    a9a6:	d1f6      	bne.n	a996 <mp_map_lookup+0x5e>
    a9a8:	4639      	mov	r1, r7
    a9aa:	f000 f99d 	bl	ace8 <mp_obj_equal>
    a9ae:	2800      	cmp	r0, #0
    a9b0:	d0f1      	beq.n	a996 <mp_map_lookup+0x5e>
    a9b2:	e000      	b.n	a9b6 <mp_map_lookup+0x7e>
        if (!MP_OBJ_IS_QSTR(index)) {
            map->all_keys_are_qstrs = 0;
        }
        return elem;
        #else
        return NULL;
    a9b4:	2500      	movs	r5, #0
            } else {
                return NULL;
            }
        }
    }
}
    a9b6:	4628      	mov	r0, r5
    a9b8:	b003      	add	sp, #12
    a9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (map->alloc == 0) {
    a9be:	6873      	ldr	r3, [r6, #4]
    a9c0:	b933      	cbnz	r3, a9d0 <mp_map_lookup+0x98>
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    a9c2:	9b00      	ldr	r3, [sp, #0]
    a9c4:	2b01      	cmp	r3, #1
    a9c6:	f040 8096 	bne.w	aaf6 <mp_map_lookup+0x1be>
            mp_map_rehash(map);
    a9ca:	4630      	mov	r0, r6
    a9cc:	f000 f8a4 	bl	ab18 <mp_map_rehash>
    a9d0:	f007 0303 	and.w	r3, r7, #3
    a9d4:	9301      	str	r3, [sp, #4]
    if (MP_OBJ_IS_QSTR(index)) {
    a9d6:	2b02      	cmp	r3, #2
    a9d8:	d00e      	beq.n	a9f8 <mp_map_lookup+0xc0>
        hash = MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, index));
    a9da:	4639      	mov	r1, r7
    a9dc:	2006      	movs	r0, #6
    a9de:	f7fe fdb1 	bl	9544 <mp_unary_op>
    a9e2:	ea4f 0b60 	mov.w	fp, r0, asr #1
    size_t pos = hash % map->alloc;
    a9e6:	6873      	ldr	r3, [r6, #4]
    a9e8:	fbbb f4f3 	udiv	r4, fp, r3
    a9ec:	fb03 b414 	mls	r4, r3, r4, fp
    size_t start_pos = pos;
    a9f0:	46a1      	mov	r9, r4
    mp_map_elem_t *avail_slot = NULL;
    a9f2:	f04f 0a00 	mov.w	sl, #0
    a9f6:	e028      	b.n	aa4a <mp_map_lookup+0x112>
        hash = qstr_hash(MP_OBJ_QSTR_VALUE(index));
    a9f8:	08b8      	lsrs	r0, r7, #2
    a9fa:	f7f6 fe40 	bl	167e <qstr_hash>
    a9fe:	4683      	mov	fp, r0
    aa00:	e7f1      	b.n	a9e6 <mp_map_lookup+0xae>
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    aa02:	9b00      	ldr	r3, [sp, #0]
    aa04:	2b01      	cmp	r3, #1
    aa06:	d178      	bne.n	aafa <mp_map_lookup+0x1c2>
                map->used += 1;
    aa08:	6833      	ldr	r3, [r6, #0]
    aa0a:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    aa0e:	3201      	adds	r2, #1
    aa10:	f362 03df 	bfi	r3, r2, #3, #29
    aa14:	6033      	str	r3, [r6, #0]
                if (avail_slot == NULL) {
    aa16:	f1ba 0f00 	cmp.w	sl, #0
    aa1a:	d000      	beq.n	aa1e <mp_map_lookup+0xe6>
    aa1c:	4655      	mov	r5, sl
                avail_slot->key = index;
    aa1e:	602f      	str	r7, [r5, #0]
                avail_slot->value = MP_OBJ_NULL;
    aa20:	2300      	movs	r3, #0
    aa22:	606b      	str	r3, [r5, #4]
                if (!MP_OBJ_IS_QSTR(index)) {
    aa24:	9b01      	ldr	r3, [sp, #4]
    aa26:	2b02      	cmp	r3, #2
    aa28:	d0c5      	beq.n	a9b6 <mp_map_lookup+0x7e>
                    map->all_keys_are_qstrs = 0;
    aa2a:	7833      	ldrb	r3, [r6, #0]
    aa2c:	f36f 0300 	bfc	r3, #0, #1
    aa30:	7033      	strb	r3, [r6, #0]
    aa32:	e7c0      	b.n	a9b6 <mp_map_lookup+0x7e>
            if (avail_slot == NULL) {
    aa34:	f1ba 0f00 	cmp.w	sl, #0
    aa38:	d034      	beq.n	aaa4 <mp_map_lookup+0x16c>
        pos = (pos + 1) % map->alloc;
    aa3a:	3401      	adds	r4, #1
    aa3c:	6873      	ldr	r3, [r6, #4]
    aa3e:	fbb4 f2f3 	udiv	r2, r4, r3
    aa42:	fb03 4412 	mls	r4, r3, r2, r4
        if (pos == start_pos) {
    aa46:	45a1      	cmp	r9, r4
    aa48:	d02e      	beq.n	aaa8 <mp_map_lookup+0x170>
        mp_map_elem_t *slot = &map->table[pos];
    aa4a:	68b3      	ldr	r3, [r6, #8]
    aa4c:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
        if (slot->key == MP_OBJ_NULL) {
    aa50:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    aa54:	2800      	cmp	r0, #0
    aa56:	d0d4      	beq.n	aa02 <mp_map_lookup+0xca>
        } else if (slot->key == MP_OBJ_SENTINEL) {
    aa58:	2808      	cmp	r0, #8
    aa5a:	d0eb      	beq.n	aa34 <mp_map_lookup+0xfc>
        } else if (slot->key == index || (!compare_only_ptrs && mp_obj_equal(slot->key, index))) {
    aa5c:	42b8      	cmp	r0, r7
    aa5e:	d007      	beq.n	aa70 <mp_map_lookup+0x138>
    aa60:	f1b8 0f00 	cmp.w	r8, #0
    aa64:	d1e9      	bne.n	aa3a <mp_map_lookup+0x102>
    aa66:	4639      	mov	r1, r7
    aa68:	f000 f93e 	bl	ace8 <mp_obj_equal>
    aa6c:	2800      	cmp	r0, #0
    aa6e:	d0e4      	beq.n	aa3a <mp_map_lookup+0x102>
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    aa70:	9b00      	ldr	r3, [sp, #0]
    aa72:	2b02      	cmp	r3, #2
    aa74:	d19f      	bne.n	a9b6 <mp_map_lookup+0x7e>
                map->used--;
    aa76:	6833      	ldr	r3, [r6, #0]
    aa78:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
    aa7c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
    aa80:	f362 03df 	bfi	r3, r2, #3, #29
    aa84:	6033      	str	r3, [r6, #0]
                if (map->table[(pos + 1) % map->alloc].key == MP_OBJ_NULL) {
    aa86:	68b1      	ldr	r1, [r6, #8]
    aa88:	3401      	adds	r4, #1
    aa8a:	6872      	ldr	r2, [r6, #4]
    aa8c:	fbb4 f3f2 	udiv	r3, r4, r2
    aa90:	fb02 4413 	mls	r4, r2, r3, r4
    aa94:	f851 3034 	ldr.w	r3, [r1, r4, lsl #3]
    aa98:	b113      	cbz	r3, aaa0 <mp_map_lookup+0x168>
                    slot->key = MP_OBJ_SENTINEL;
    aa9a:	2308      	movs	r3, #8
    aa9c:	602b      	str	r3, [r5, #0]
    aa9e:	e78a      	b.n	a9b6 <mp_map_lookup+0x7e>
                    slot->key = MP_OBJ_NULL;
    aaa0:	602b      	str	r3, [r5, #0]
    aaa2:	e788      	b.n	a9b6 <mp_map_lookup+0x7e>
                avail_slot = slot;
    aaa4:	46aa      	mov	sl, r5
    aaa6:	e7c8      	b.n	aa3a <mp_map_lookup+0x102>
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    aaa8:	9b00      	ldr	r3, [sp, #0]
    aaaa:	2b01      	cmp	r3, #1
    aaac:	d127      	bne.n	aafe <mp_map_lookup+0x1c6>
                if (avail_slot != NULL) {
    aaae:	f1ba 0f00 	cmp.w	sl, #0
    aab2:	d109      	bne.n	aac8 <mp_map_lookup+0x190>
                    mp_map_rehash(map);
    aab4:	4630      	mov	r0, r6
    aab6:	f000 f82f 	bl	ab18 <mp_map_rehash>
                    start_pos = pos = hash % map->alloc;
    aaba:	6873      	ldr	r3, [r6, #4]
    aabc:	fbbb f4f3 	udiv	r4, fp, r3
    aac0:	fb03 b414 	mls	r4, r3, r4, fp
    aac4:	46a1      	mov	r9, r4
    aac6:	e7c0      	b.n	aa4a <mp_map_lookup+0x112>
                    map->used++;
    aac8:	6833      	ldr	r3, [r6, #0]
    aaca:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    aace:	3201      	adds	r2, #1
    aad0:	f362 03df 	bfi	r3, r2, #3, #29
    aad4:	6033      	str	r3, [r6, #0]
                    avail_slot->key = index;
    aad6:	f8ca 7000 	str.w	r7, [sl]
                    avail_slot->value = MP_OBJ_NULL;
    aada:	2300      	movs	r3, #0
    aadc:	f8ca 3004 	str.w	r3, [sl, #4]
                    if (!MP_OBJ_IS_QSTR(index)) {
    aae0:	9b01      	ldr	r3, [sp, #4]
    aae2:	2b02      	cmp	r3, #2
    aae4:	d00d      	beq.n	ab02 <mp_map_lookup+0x1ca>
                        map->all_keys_are_qstrs = 0;
    aae6:	7833      	ldrb	r3, [r6, #0]
    aae8:	f36f 0300 	bfc	r3, #0, #1
    aaec:	7033      	strb	r3, [r6, #0]
                    return avail_slot;
    aaee:	4655      	mov	r5, sl
    aaf0:	e761      	b.n	a9b6 <mp_map_lookup+0x7e>
            return NULL;
    aaf2:	2500      	movs	r5, #0
    aaf4:	e75f      	b.n	a9b6 <mp_map_lookup+0x7e>
            return NULL;
    aaf6:	2500      	movs	r5, #0
    aaf8:	e75d      	b.n	a9b6 <mp_map_lookup+0x7e>
                return NULL;
    aafa:	2500      	movs	r5, #0
    aafc:	e75b      	b.n	a9b6 <mp_map_lookup+0x7e>
                return NULL;
    aafe:	2500      	movs	r5, #0
    ab00:	e759      	b.n	a9b6 <mp_map_lookup+0x7e>
                    return avail_slot;
    ab02:	4655      	mov	r5, sl
    ab04:	e757      	b.n	a9b6 <mp_map_lookup+0x7e>
    ab06:	bf00      	nop
    ab08:	00028104 	.word	0x00028104
    ab0c:	00025ac0 	.word	0x00025ac0
    ab10:	00025a60 	.word	0x00025a60
    ab14:	00025af0 	.word	0x00025af0

0000ab18 <mp_map_rehash>:
STATIC void mp_map_rehash(mp_map_t *map) {
    ab18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab1c:	4606      	mov	r6, r0
    size_t old_alloc = map->alloc;
    ab1e:	6847      	ldr	r7, [r0, #4]
    size_t new_alloc = get_hash_alloc_greater_or_equal_to(map->alloc + 1);
    ab20:	1c78      	adds	r0, r7, #1
    ab22:	f7ff febb 	bl	a89c <get_hash_alloc_greater_or_equal_to>
    ab26:	4604      	mov	r4, r0
    mp_map_elem_t *old_table = map->table;
    ab28:	68b5      	ldr	r5, [r6, #8]
    mp_map_elem_t *new_table = m_new0(mp_map_elem_t, new_alloc);
    ab2a:	00c0      	lsls	r0, r0, #3
    ab2c:	f7f5 fed9 	bl	8e2 <m_malloc0>
    map->alloc = new_alloc;
    ab30:	6074      	str	r4, [r6, #4]
    map->used = 0;
    ab32:	6833      	ldr	r3, [r6, #0]
    ab34:	f36f 03df 	bfc	r3, #3, #29
    ab38:	6033      	str	r3, [r6, #0]
    map->all_keys_are_qstrs = 1;
    ab3a:	b2db      	uxtb	r3, r3
    ab3c:	f043 0301 	orr.w	r3, r3, #1
    ab40:	7033      	strb	r3, [r6, #0]
    map->table = new_table;
    ab42:	60b0      	str	r0, [r6, #8]
    for (size_t i = 0; i < old_alloc; i++) {
    ab44:	2400      	movs	r4, #0
    ab46:	e000      	b.n	ab4a <mp_map_rehash+0x32>
    ab48:	3401      	adds	r4, #1
    ab4a:	42bc      	cmp	r4, r7
    ab4c:	d20f      	bcs.n	ab6e <mp_map_rehash+0x56>
        if (old_table[i].key != MP_OBJ_NULL && old_table[i].key != MP_OBJ_SENTINEL) {
    ab4e:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
    ab52:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
    ab56:	2900      	cmp	r1, #0
    ab58:	d0f6      	beq.n	ab48 <mp_map_rehash+0x30>
    ab5a:	2908      	cmp	r1, #8
    ab5c:	d0f4      	beq.n	ab48 <mp_map_rehash+0x30>
            mp_map_lookup(map, old_table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = old_table[i].value;
    ab5e:	2201      	movs	r2, #1
    ab60:	4630      	mov	r0, r6
    ab62:	f7ff fee9 	bl	a938 <mp_map_lookup>
    ab66:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ab6a:	6043      	str	r3, [r0, #4]
    ab6c:	e7ec      	b.n	ab48 <mp_map_rehash+0x30>
    m_del(mp_map_elem_t, old_table, old_alloc);
    ab6e:	4628      	mov	r0, r5
    ab70:	f7f5 fecd 	bl	90e <m_free>
}
    ab74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ab78 <mp_identity>:

// Return input argument. Useful as .getiter for objects which are
// their own iterators, etc.
mp_obj_t mp_identity(mp_obj_t self) {
    return self;
}
    ab78:	4770      	bx	lr
	...

0000ab7c <mp_obj_get_type>:
    if (MP_OBJ_IS_SMALL_INT(o_in)) {
    ab7c:	f010 0f01 	tst.w	r0, #1
    ab80:	d10a      	bne.n	ab98 <mp_obj_get_type+0x1c>
    ab82:	f000 0303 	and.w	r3, r0, #3
    } else if (MP_OBJ_IS_QSTR(o_in)) {
    ab86:	2b02      	cmp	r3, #2
    ab88:	d008      	beq.n	ab9c <mp_obj_get_type+0x20>
    } else if (mp_obj_is_float(o_in)) {
    ab8a:	b91b      	cbnz	r3, ab94 <mp_obj_get_type+0x18>
    ab8c:	6802      	ldr	r2, [r0, #0]
    ab8e:	4b05      	ldr	r3, [pc, #20]	; (aba4 <mp_obj_get_type+0x28>)
    ab90:	429a      	cmp	r2, r3
    ab92:	d005      	beq.n	aba0 <mp_obj_get_type+0x24>
        return (mp_obj_type_t*)o->type;
    ab94:	6800      	ldr	r0, [r0, #0]
    ab96:	4770      	bx	lr
        return (mp_obj_type_t*)&mp_type_int;
    ab98:	4803      	ldr	r0, [pc, #12]	; (aba8 <mp_obj_get_type+0x2c>)
    ab9a:	4770      	bx	lr
        return (mp_obj_type_t*)&mp_type_str;
    ab9c:	4803      	ldr	r0, [pc, #12]	; (abac <mp_obj_get_type+0x30>)
    ab9e:	4770      	bx	lr
        return (mp_obj_type_t*)&mp_type_float;
    aba0:	4800      	ldr	r0, [pc, #0]	; (aba4 <mp_obj_get_type+0x28>)
}
    aba2:	4770      	bx	lr
    aba4:	00026d90 	.word	0x00026d90
    aba8:	00027498 	.word	0x00027498
    abac:	00028104 	.word	0x00028104

0000abb0 <mp_obj_get_type_str>:
const char *mp_obj_get_type_str(mp_const_obj_t o_in) {
    abb0:	b508      	push	{r3, lr}
    return qstr_str(mp_obj_get_type(o_in)->name);
    abb2:	f7ff ffe3 	bl	ab7c <mp_obj_get_type>
    abb6:	6840      	ldr	r0, [r0, #4]
    abb8:	f7f6 fd6b 	bl	1692 <qstr_str>
}
    abbc:	bd08      	pop	{r3, pc}
	...

0000abc0 <mp_obj_print_helper>:
void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    abc0:	b570      	push	{r4, r5, r6, lr}
    abc2:	4605      	mov	r5, r0
    if (o_in == MP_OBJ_NULL) {
    abc4:	b159      	cbz	r1, abde <mp_obj_print_helper+0x1e>
    abc6:	4616      	mov	r6, r2
    abc8:	460c      	mov	r4, r1
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    abca:	4608      	mov	r0, r1
    abcc:	f7ff ffd6 	bl	ab7c <mp_obj_get_type>
    if (type->print != NULL) {
    abd0:	6883      	ldr	r3, [r0, #8]
    abd2:	b143      	cbz	r3, abe6 <mp_obj_print_helper+0x26>
        type->print((mp_print_t*)print, o_in, kind);
    abd4:	4632      	mov	r2, r6
    abd6:	4621      	mov	r1, r4
    abd8:	4628      	mov	r0, r5
    abda:	4798      	blx	r3
}
    abdc:	bd70      	pop	{r4, r5, r6, pc}
        mp_print_str(print, "(nil)");
    abde:	4905      	ldr	r1, [pc, #20]	; (abf4 <mp_obj_print_helper+0x34>)
    abe0:	f7f6 fead 	bl	193e <mp_print_str>
        return;
    abe4:	e7fa      	b.n	abdc <mp_obj_print_helper+0x1c>
        mp_printf(print, "<%q>", type->name);
    abe6:	6842      	ldr	r2, [r0, #4]
    abe8:	4903      	ldr	r1, [pc, #12]	; (abf8 <mp_obj_print_helper+0x38>)
    abea:	4628      	mov	r0, r5
    abec:	f7f7 fa3e 	bl	206c <mp_printf>
    abf0:	e7f4      	b.n	abdc <mp_obj_print_helper+0x1c>
    abf2:	bf00      	nop
    abf4:	00025ca4 	.word	0x00025ca4
    abf8:	00025cac 	.word	0x00025cac

0000abfc <mp_obj_print>:
void mp_obj_print(mp_obj_t o_in, mp_print_kind_t kind) {
    abfc:	b508      	push	{r3, lr}
    mp_obj_print_helper(MP_PYTHON_PRINTER, o_in, kind);
    abfe:	460a      	mov	r2, r1
    ac00:	4601      	mov	r1, r0
    ac02:	4802      	ldr	r0, [pc, #8]	; (ac0c <mp_obj_print+0x10>)
    ac04:	f7ff ffdc 	bl	abc0 <mp_obj_print_helper>
}
    ac08:	bd08      	pop	{r3, pc}
    ac0a:	bf00      	nop
    ac0c:	00023684 	.word	0x00023684

0000ac10 <mp_obj_print_exception>:
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc) {
    ac10:	b570      	push	{r4, r5, r6, lr}
    ac12:	b082      	sub	sp, #8
    ac14:	4605      	mov	r5, r0
    ac16:	460e      	mov	r6, r1
    if (mp_obj_is_exception_instance(exc)) {
    ac18:	4608      	mov	r0, r1
    ac1a:	f001 ffe3 	bl	cbe4 <mp_obj_is_exception_instance>
    ac1e:	2800      	cmp	r0, #0
    ac20:	d034      	beq.n	ac8c <mp_obj_print_exception+0x7c>
        mp_obj_exception_get_traceback(exc, &n, &values);
    ac22:	aa01      	add	r2, sp, #4
    ac24:	4669      	mov	r1, sp
    ac26:	4630      	mov	r0, r6
    ac28:	f002 f85a 	bl	cce0 <mp_obj_exception_get_traceback>
        if (n > 0) {
    ac2c:	9a00      	ldr	r2, [sp, #0]
    ac2e:	b36a      	cbz	r2, ac8c <mp_obj_print_exception+0x7c>
            assert(n % 3 == 0);
    ac30:	4b1c      	ldr	r3, [pc, #112]	; (aca4 <mp_obj_print_exception+0x94>)
    ac32:	fba3 1302 	umull	r1, r3, r3, r2
    ac36:	085b      	lsrs	r3, r3, #1
    ac38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ac3c:	429a      	cmp	r2, r3
    ac3e:	d106      	bne.n	ac4e <mp_obj_print_exception+0x3e>
            mp_print_str(print, "Traceback (most recent call last):\n");
    ac40:	4919      	ldr	r1, [pc, #100]	; (aca8 <mp_obj_print_exception+0x98>)
    ac42:	4628      	mov	r0, r5
    ac44:	f7f6 fe7b 	bl	193e <mp_print_str>
            for (int i = n - 3; i >= 0; i -= 3) {
    ac48:	9c00      	ldr	r4, [sp, #0]
    ac4a:	3c03      	subs	r4, #3
    ac4c:	e00a      	b.n	ac64 <mp_obj_print_exception+0x54>
            assert(n % 3 == 0);
    ac4e:	4b17      	ldr	r3, [pc, #92]	; (acac <mp_obj_print_exception+0x9c>)
    ac50:	4a17      	ldr	r2, [pc, #92]	; (acb0 <mp_obj_print_exception+0xa0>)
    ac52:	2156      	movs	r1, #86	; 0x56
    ac54:	4817      	ldr	r0, [pc, #92]	; (acb4 <mp_obj_print_exception+0xa4>)
    ac56:	f00d fc81 	bl	1855c <__assert_func>
                    mp_printf(print, ", in %q\n", block);
    ac5a:	4917      	ldr	r1, [pc, #92]	; (acb8 <mp_obj_print_exception+0xa8>)
    ac5c:	4628      	mov	r0, r5
    ac5e:	f7f7 fa05 	bl	206c <mp_printf>
            for (int i = n - 3; i >= 0; i -= 3) {
    ac62:	3c03      	subs	r4, #3
    ac64:	2c00      	cmp	r4, #0
    ac66:	db11      	blt.n	ac8c <mp_obj_print_exception+0x7c>
                mp_printf(print, "  File \"%q\"", values[i]);
    ac68:	9b01      	ldr	r3, [sp, #4]
    ac6a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    ac6e:	4913      	ldr	r1, [pc, #76]	; (acbc <mp_obj_print_exception+0xac>)
    ac70:	4628      	mov	r0, r5
    ac72:	f7f7 f9fb 	bl	206c <mp_printf>
                qstr block = values[i + 2];
    ac76:	1ca3      	adds	r3, r4, #2
    ac78:	9a01      	ldr	r2, [sp, #4]
    ac7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                if (block == MP_QSTR_NULL) {
    ac7e:	2a00      	cmp	r2, #0
    ac80:	d1eb      	bne.n	ac5a <mp_obj_print_exception+0x4a>
                    mp_print_str(print, "\n");
    ac82:	490f      	ldr	r1, [pc, #60]	; (acc0 <mp_obj_print_exception+0xb0>)
    ac84:	4628      	mov	r0, r5
    ac86:	f7f6 fe5a 	bl	193e <mp_print_str>
    ac8a:	e7ea      	b.n	ac62 <mp_obj_print_exception+0x52>
    mp_obj_print_helper(print, exc, PRINT_EXC);
    ac8c:	2202      	movs	r2, #2
    ac8e:	4631      	mov	r1, r6
    ac90:	4628      	mov	r0, r5
    ac92:	f7ff ff95 	bl	abc0 <mp_obj_print_helper>
    mp_print_str(print, "\n");
    ac96:	490a      	ldr	r1, [pc, #40]	; (acc0 <mp_obj_print_exception+0xb0>)
    ac98:	4628      	mov	r0, r5
    ac9a:	f7f6 fe50 	bl	193e <mp_print_str>
}
    ac9e:	b002      	add	sp, #8
    aca0:	bd70      	pop	{r4, r5, r6, pc}
    aca2:	bf00      	nop
    aca4:	aaaaaaab 	.word	0xaaaaaaab
    aca8:	00025c68 	.word	0x00025c68
    acac:	00025c4c 	.word	0x00025c4c
    acb0:	00025b00 	.word	0x00025b00
    acb4:	00025c58 	.word	0x00025c58
    acb8:	00025c98 	.word	0x00025c98
    acbc:	00025c8c 	.word	0x00025c8c
    acc0:	0002aa44 	.word	0x0002aa44

0000acc4 <mp_obj_is_callable>:
bool mp_obj_is_callable(mp_obj_t o_in) {
    acc4:	b510      	push	{r4, lr}
    acc6:	4604      	mov	r4, r0
    mp_call_fun_t call = mp_obj_get_type(o_in)->call;
    acc8:	f7ff ff58 	bl	ab7c <mp_obj_get_type>
    accc:	6900      	ldr	r0, [r0, #16]
    if (call != mp_obj_instance_call) {
    acce:	4b05      	ldr	r3, [pc, #20]	; (ace4 <mp_obj_is_callable+0x20>)
    acd0:	4298      	cmp	r0, r3
    acd2:	d003      	beq.n	acdc <mp_obj_is_callable+0x18>
        return call != NULL;
    acd4:	3000      	adds	r0, #0
    acd6:	bf18      	it	ne
    acd8:	2001      	movne	r0, #1
}
    acda:	bd10      	pop	{r4, pc}
    return mp_obj_instance_is_callable(o_in);
    acdc:	4620      	mov	r0, r4
    acde:	f007 fc15 	bl	1250c <mp_obj_instance_is_callable>
    ace2:	e7fa      	b.n	acda <mp_obj_is_callable+0x16>
    ace4:	000121ad 	.word	0x000121ad

0000ace8 <mp_obj_equal>:
bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2) {
    ace8:	b538      	push	{r3, r4, r5, lr}
    acea:	4604      	mov	r4, r0
    acec:	460d      	mov	r5, r1
    if (o1 == o2
    acee:	4288      	cmp	r0, r1
    acf0:	d031      	beq.n	ad56 <mp_obj_equal+0x6e>
    if (o1 == mp_const_none || o2 == mp_const_none) {
    acf2:	4b31      	ldr	r3, [pc, #196]	; (adb8 <mp_obj_equal+0xd0>)
    acf4:	429c      	cmp	r4, r3
    acf6:	d04e      	beq.n	ad96 <mp_obj_equal+0xae>
    acf8:	429d      	cmp	r5, r3
    acfa:	d04e      	beq.n	ad9a <mp_obj_equal+0xb2>
    if (MP_OBJ_IS_SMALL_INT(o1)) {
    acfc:	f014 0f01 	tst.w	r4, #1
    ad00:	d005      	beq.n	ad0e <mp_obj_equal+0x26>
        if (MP_OBJ_IS_SMALL_INT(o2)) {
    ad02:	f015 0f01 	tst.w	r5, #1
    ad06:	d14a      	bne.n	ad9e <mp_obj_equal+0xb6>
    ad08:	4623      	mov	r3, r4
            mp_obj_t temp = o2; o2 = o1; o1 = temp;
    ad0a:	462c      	mov	r4, r5
    ad0c:	461d      	mov	r5, r3
    ad0e:	f004 0303 	and.w	r3, r4, #3
    if (MP_OBJ_IS_STR(o1)) {
    ad12:	2b02      	cmp	r3, #2
    ad14:	d02d      	beq.n	ad72 <mp_obj_equal+0x8a>
    ad16:	b91b      	cbnz	r3, ad20 <mp_obj_equal+0x38>
    ad18:	6822      	ldr	r2, [r4, #0]
    ad1a:	4b28      	ldr	r3, [pc, #160]	; (adbc <mp_obj_equal+0xd4>)
    ad1c:	429a      	cmp	r2, r3
    ad1e:	d028      	beq.n	ad72 <mp_obj_equal+0x8a>
    ad20:	f005 0303 	and.w	r3, r5, #3
    } else if (MP_OBJ_IS_STR(o2)) {
    ad24:	2b02      	cmp	r3, #2
    ad26:	d03e      	beq.n	ada6 <mp_obj_equal+0xbe>
    ad28:	b91b      	cbnz	r3, ad32 <mp_obj_equal+0x4a>
    ad2a:	682a      	ldr	r2, [r5, #0]
    ad2c:	4b23      	ldr	r3, [pc, #140]	; (adbc <mp_obj_equal+0xd4>)
    ad2e:	429a      	cmp	r2, r3
    ad30:	d03b      	beq.n	adaa <mp_obj_equal+0xc2>
    mp_obj_type_t *type = mp_obj_get_type(o1);
    ad32:	4620      	mov	r0, r4
    ad34:	f7ff ff22 	bl	ab7c <mp_obj_get_type>
    if (type->binary_op != NULL) {
    ad38:	6983      	ldr	r3, [r0, #24]
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	d037      	beq.n	adae <mp_obj_equal+0xc6>
        mp_obj_t r = type->binary_op(MP_BINARY_OP_EQUAL, o1, o2);
    ad3e:	462a      	mov	r2, r5
    ad40:	4621      	mov	r1, r4
    ad42:	2002      	movs	r0, #2
    ad44:	4798      	blx	r3
        if (r != MP_OBJ_NULL) {
    ad46:	4603      	mov	r3, r0
    ad48:	b398      	cbz	r0, adb2 <mp_obj_equal+0xca>
            return r == mp_const_true ? true : false;
    ad4a:	481d      	ldr	r0, [pc, #116]	; (adc0 <mp_obj_equal+0xd8>)
    ad4c:	4283      	cmp	r3, r0
    ad4e:	bf14      	ite	ne
    ad50:	2000      	movne	r0, #0
    ad52:	2001      	moveq	r0, #1
    ad54:	e020      	b.n	ad98 <mp_obj_equal+0xb0>
        && !mp_obj_is_float(o1)
    ad56:	f010 0303 	ands.w	r3, r0, #3
    ad5a:	d103      	bne.n	ad64 <mp_obj_equal+0x7c>
    ad5c:	6801      	ldr	r1, [r0, #0]
    ad5e:	4a19      	ldr	r2, [pc, #100]	; (adc4 <mp_obj_equal+0xdc>)
    ad60:	4291      	cmp	r1, r2
    ad62:	d0c6      	beq.n	acf2 <mp_obj_equal+0xa>
        && !MP_OBJ_IS_TYPE(o1, &mp_type_complex)
    ad64:	b9ab      	cbnz	r3, ad92 <mp_obj_equal+0xaa>
    ad66:	6822      	ldr	r2, [r4, #0]
    ad68:	4b17      	ldr	r3, [pc, #92]	; (adc8 <mp_obj_equal+0xe0>)
    ad6a:	429a      	cmp	r2, r3
    ad6c:	d0c1      	beq.n	acf2 <mp_obj_equal+0xa>
        return true;
    ad6e:	2001      	movs	r0, #1
    ad70:	e012      	b.n	ad98 <mp_obj_equal+0xb0>
    ad72:	f005 0303 	and.w	r3, r5, #3
        if (MP_OBJ_IS_STR(o2)) {
    ad76:	2b02      	cmp	r3, #2
    ad78:	d006      	beq.n	ad88 <mp_obj_equal+0xa0>
    ad7a:	b993      	cbnz	r3, ada2 <mp_obj_equal+0xba>
    ad7c:	682a      	ldr	r2, [r5, #0]
    ad7e:	4b0f      	ldr	r3, [pc, #60]	; (adbc <mp_obj_equal+0xd4>)
    ad80:	429a      	cmp	r2, r3
    ad82:	d001      	beq.n	ad88 <mp_obj_equal+0xa0>
        return false;
    ad84:	2000      	movs	r0, #0
    ad86:	e007      	b.n	ad98 <mp_obj_equal+0xb0>
            return mp_obj_str_equal(o1, o2);
    ad88:	4629      	mov	r1, r5
    ad8a:	4620      	mov	r0, r4
    ad8c:	f005 f9f7 	bl	1017e <mp_obj_str_equal>
    ad90:	e002      	b.n	ad98 <mp_obj_equal+0xb0>
        return true;
    ad92:	2001      	movs	r0, #1
    ad94:	e000      	b.n	ad98 <mp_obj_equal+0xb0>
        return false;
    ad96:	2000      	movs	r0, #0
}
    ad98:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    ad9a:	2000      	movs	r0, #0
    ad9c:	e7fc      	b.n	ad98 <mp_obj_equal+0xb0>
            return false;
    ad9e:	2000      	movs	r0, #0
    ada0:	e7fa      	b.n	ad98 <mp_obj_equal+0xb0>
        return false;
    ada2:	2000      	movs	r0, #0
    ada4:	e7f8      	b.n	ad98 <mp_obj_equal+0xb0>
    ada6:	2000      	movs	r0, #0
    ada8:	e7f6      	b.n	ad98 <mp_obj_equal+0xb0>
    adaa:	2000      	movs	r0, #0
    adac:	e7f4      	b.n	ad98 <mp_obj_equal+0xb0>
    return false;
    adae:	2000      	movs	r0, #0
    adb0:	e7f2      	b.n	ad98 <mp_obj_equal+0xb0>
    adb2:	2000      	movs	r0, #0
    adb4:	e7f0      	b.n	ad98 <mp_obj_equal+0xb0>
    adb6:	bf00      	nop
    adb8:	00027b40 	.word	0x00027b40
    adbc:	00028104 	.word	0x00028104
    adc0:	00025f4c 	.word	0x00025f4c
    adc4:	00026d90 	.word	0x00026d90
    adc8:	00026114 	.word	0x00026114

0000adcc <mp_obj_get_int>:
mp_int_t mp_obj_get_int(mp_const_obj_t arg) {
    adcc:	b508      	push	{r3, lr}
    if (arg == mp_const_false) {
    adce:	4b11      	ldr	r3, [pc, #68]	; (ae14 <mp_obj_get_int+0x48>)
    add0:	4298      	cmp	r0, r3
    add2:	d01a      	beq.n	ae0a <mp_obj_get_int+0x3e>
    } else if (arg == mp_const_true) {
    add4:	4b10      	ldr	r3, [pc, #64]	; (ae18 <mp_obj_get_int+0x4c>)
    add6:	4298      	cmp	r0, r3
    add8:	d019      	beq.n	ae0e <mp_obj_get_int+0x42>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    adda:	f010 0f01 	tst.w	r0, #1
    adde:	d109      	bne.n	adf4 <mp_obj_get_int+0x28>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    ade0:	f010 0f03 	tst.w	r0, #3
    ade4:	d108      	bne.n	adf8 <mp_obj_get_int+0x2c>
    ade6:	6802      	ldr	r2, [r0, #0]
    ade8:	4b0c      	ldr	r3, [pc, #48]	; (ae1c <mp_obj_get_int+0x50>)
    adea:	429a      	cmp	r2, r3
    adec:	d104      	bne.n	adf8 <mp_obj_get_int+0x2c>
        return mp_obj_int_get_checked(arg);
    adee:	f003 f8f1 	bl	dfd4 <mp_obj_int_get_checked>
}
    adf2:	bd08      	pop	{r3, pc}
        return MP_OBJ_SMALL_INT_VALUE(arg);
    adf4:	1040      	asrs	r0, r0, #1
    adf6:	e7fc      	b.n	adf2 <mp_obj_get_int+0x26>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    adf8:	f7ff feda 	bl	abb0 <mp_obj_get_type_str>
    adfc:	4602      	mov	r2, r0
    adfe:	4908      	ldr	r1, [pc, #32]	; (ae20 <mp_obj_get_int+0x54>)
    ae00:	4808      	ldr	r0, [pc, #32]	; (ae24 <mp_obj_get_int+0x58>)
    ae02:	f001 fe63 	bl	cacc <mp_obj_new_exception_msg_varg>
    ae06:	f7f5 fd3b 	bl	880 <nlr_jump>
        return 0;
    ae0a:	2000      	movs	r0, #0
    ae0c:	e7f1      	b.n	adf2 <mp_obj_get_int+0x26>
        return 1;
    ae0e:	2001      	movs	r0, #1
    ae10:	e7ef      	b.n	adf2 <mp_obj_get_int+0x26>
    ae12:	bf00      	nop
    ae14:	00025f44 	.word	0x00025f44
    ae18:	00025f4c 	.word	0x00025f4c
    ae1c:	00027498 	.word	0x00027498
    ae20:	00025c10 	.word	0x00025c10
    ae24:	00026c84 	.word	0x00026c84

0000ae28 <mp_obj_get_int_truncated>:
mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg) {
    ae28:	b508      	push	{r3, lr}
    if (MP_OBJ_IS_INT(arg)) {
    ae2a:	f010 0f01 	tst.w	r0, #1
    ae2e:	d109      	bne.n	ae44 <mp_obj_get_int_truncated+0x1c>
    ae30:	f010 0f03 	tst.w	r0, #3
    ae34:	d103      	bne.n	ae3e <mp_obj_get_int_truncated+0x16>
    ae36:	6802      	ldr	r2, [r0, #0]
    ae38:	4b04      	ldr	r3, [pc, #16]	; (ae4c <mp_obj_get_int_truncated+0x24>)
    ae3a:	429a      	cmp	r2, r3
    ae3c:	d002      	beq.n	ae44 <mp_obj_get_int_truncated+0x1c>
        return mp_obj_get_int(arg);
    ae3e:	f7ff ffc5 	bl	adcc <mp_obj_get_int>
}
    ae42:	bd08      	pop	{r3, pc}
        return mp_obj_int_get_truncated(arg);
    ae44:	f003 f8bb 	bl	dfbe <mp_obj_int_get_truncated>
    ae48:	e7fb      	b.n	ae42 <mp_obj_get_int_truncated+0x1a>
    ae4a:	bf00      	nop
    ae4c:	00027498 	.word	0x00027498

0000ae50 <mp_obj_get_int_maybe>:
    if (arg == mp_const_false) {
    ae50:	4b12      	ldr	r3, [pc, #72]	; (ae9c <mp_obj_get_int_maybe+0x4c>)
    ae52:	4298      	cmp	r0, r3
    ae54:	d00e      	beq.n	ae74 <mp_obj_get_int_maybe+0x24>
    } else if (arg == mp_const_true) {
    ae56:	4b12      	ldr	r3, [pc, #72]	; (aea0 <mp_obj_get_int_maybe+0x50>)
    ae58:	4298      	cmp	r0, r3
    ae5a:	d00f      	beq.n	ae7c <mp_obj_get_int_maybe+0x2c>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    ae5c:	f010 0f01 	tst.w	r0, #1
    ae60:	d10f      	bne.n	ae82 <mp_obj_get_int_maybe+0x32>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    ae62:	f010 0f03 	tst.w	r0, #3
    ae66:	d117      	bne.n	ae98 <mp_obj_get_int_maybe+0x48>
    ae68:	6802      	ldr	r2, [r0, #0]
    ae6a:	4b0e      	ldr	r3, [pc, #56]	; (aea4 <mp_obj_get_int_maybe+0x54>)
    ae6c:	429a      	cmp	r2, r3
    ae6e:	d00c      	beq.n	ae8a <mp_obj_get_int_maybe+0x3a>
        return false;
    ae70:	2000      	movs	r0, #0
}
    ae72:	4770      	bx	lr
        *value = 0;
    ae74:	2300      	movs	r3, #0
    ae76:	600b      	str	r3, [r1, #0]
    return true;
    ae78:	2001      	movs	r0, #1
    ae7a:	4770      	bx	lr
        *value = 1;
    ae7c:	2001      	movs	r0, #1
    ae7e:	6008      	str	r0, [r1, #0]
    ae80:	4770      	bx	lr
        *value = MP_OBJ_SMALL_INT_VALUE(arg);
    ae82:	1040      	asrs	r0, r0, #1
    ae84:	6008      	str	r0, [r1, #0]
    return true;
    ae86:	2001      	movs	r0, #1
    ae88:	4770      	bx	lr
bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value) {
    ae8a:	b510      	push	{r4, lr}
    ae8c:	460c      	mov	r4, r1
        *value = mp_obj_int_get_checked(arg);
    ae8e:	f003 f8a1 	bl	dfd4 <mp_obj_int_get_checked>
    ae92:	6020      	str	r0, [r4, #0]
    return true;
    ae94:	2001      	movs	r0, #1
}
    ae96:	bd10      	pop	{r4, pc}
        return false;
    ae98:	2000      	movs	r0, #0
    ae9a:	4770      	bx	lr
    ae9c:	00025f44 	.word	0x00025f44
    aea0:	00025f4c 	.word	0x00025f4c
    aea4:	00027498 	.word	0x00027498

0000aea8 <mp_obj_get_float_maybe>:
bool mp_obj_get_float_maybe(mp_obj_t arg, mp_float_t *value) {
    aea8:	b510      	push	{r4, lr}
    aeaa:	460c      	mov	r4, r1
    if (arg == mp_const_false) {
    aeac:	4b16      	ldr	r3, [pc, #88]	; (af08 <mp_obj_get_float_maybe+0x60>)
    aeae:	4298      	cmp	r0, r3
    aeb0:	d01f      	beq.n	aef2 <mp_obj_get_float_maybe+0x4a>
    } else if (arg == mp_const_true) {
    aeb2:	4b16      	ldr	r3, [pc, #88]	; (af0c <mp_obj_get_float_maybe+0x64>)
    aeb4:	4298      	cmp	r0, r3
    aeb6:	d022      	beq.n	aefe <mp_obj_get_float_maybe+0x56>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    aeb8:	f010 0f01 	tst.w	r0, #1
    aebc:	d005      	beq.n	aeca <mp_obj_get_float_maybe+0x22>
        val = MP_OBJ_SMALL_INT_VALUE(arg);
    aebe:	1040      	asrs	r0, r0, #1
    aec0:	ee07 0a90 	vmov	s15, r0
    aec4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    aec8:	e015      	b.n	aef6 <mp_obj_get_float_maybe+0x4e>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    aeca:	f010 0303 	ands.w	r3, r0, #3
    aece:	d103      	bne.n	aed8 <mp_obj_get_float_maybe+0x30>
    aed0:	6801      	ldr	r1, [r0, #0]
    aed2:	4a0f      	ldr	r2, [pc, #60]	; (af10 <mp_obj_get_float_maybe+0x68>)
    aed4:	4291      	cmp	r1, r2
    aed6:	d006      	beq.n	aee6 <mp_obj_get_float_maybe+0x3e>
    } else if (mp_obj_is_float(arg)) {
    aed8:	b9a3      	cbnz	r3, af04 <mp_obj_get_float_maybe+0x5c>
    aeda:	6802      	ldr	r2, [r0, #0]
    aedc:	4b0d      	ldr	r3, [pc, #52]	; (af14 <mp_obj_get_float_maybe+0x6c>)
    aede:	429a      	cmp	r2, r3
    aee0:	d004      	beq.n	aeec <mp_obj_get_float_maybe+0x44>
        return false;
    aee2:	2000      	movs	r0, #0
    aee4:	e00a      	b.n	aefc <mp_obj_get_float_maybe+0x54>
        val = mp_obj_int_as_float_impl(arg);
    aee6:	f003 fa07 	bl	e2f8 <mp_obj_int_as_float_impl>
    aeea:	e004      	b.n	aef6 <mp_obj_get_float_maybe+0x4e>
        val = mp_obj_float_get(arg);
    aeec:	f001 ffca 	bl	ce84 <mp_obj_float_get>
    aef0:	e001      	b.n	aef6 <mp_obj_get_float_maybe+0x4e>
        val = 0;
    aef2:	ed9f 0a09 	vldr	s0, [pc, #36]	; af18 <mp_obj_get_float_maybe+0x70>
    *value = val;
    aef6:	ed84 0a00 	vstr	s0, [r4]
    return true;
    aefa:	2001      	movs	r0, #1
}
    aefc:	bd10      	pop	{r4, pc}
        val = 1;
    aefe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    af02:	e7f8      	b.n	aef6 <mp_obj_get_float_maybe+0x4e>
        return false;
    af04:	2000      	movs	r0, #0
    af06:	e7f9      	b.n	aefc <mp_obj_get_float_maybe+0x54>
    af08:	00025f44 	.word	0x00025f44
    af0c:	00025f4c 	.word	0x00025f4c
    af10:	00027498 	.word	0x00027498
    af14:	00026d90 	.word	0x00026d90
    af18:	00000000 	.word	0x00000000

0000af1c <mp_obj_get_float>:
mp_float_t mp_obj_get_float(mp_obj_t arg) {
    af1c:	b510      	push	{r4, lr}
    af1e:	b082      	sub	sp, #8
    af20:	4604      	mov	r4, r0
    if (!mp_obj_get_float_maybe(arg, &val)) {
    af22:	a901      	add	r1, sp, #4
    af24:	f7ff ffc0 	bl	aea8 <mp_obj_get_float_maybe>
    af28:	b118      	cbz	r0, af32 <mp_obj_get_float+0x16>
}
    af2a:	ed9d 0a01 	vldr	s0, [sp, #4]
    af2e:	b002      	add	sp, #8
    af30:	bd10      	pop	{r4, pc}
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    af32:	4620      	mov	r0, r4
    af34:	f7ff fe3c 	bl	abb0 <mp_obj_get_type_str>
    af38:	4602      	mov	r2, r0
    af3a:	4903      	ldr	r1, [pc, #12]	; (af48 <mp_obj_get_float+0x2c>)
    af3c:	4803      	ldr	r0, [pc, #12]	; (af4c <mp_obj_get_float+0x30>)
    af3e:	f001 fdc5 	bl	cacc <mp_obj_new_exception_msg_varg>
    af42:	f7f5 fc9d 	bl	880 <nlr_jump>
    af46:	bf00      	nop
    af48:	00025bf4 	.word	0x00025bf4
    af4c:	00026c84 	.word	0x00026c84

0000af50 <mp_obj_get_complex>:
void mp_obj_get_complex(mp_obj_t arg, mp_float_t *real, mp_float_t *imag) {
    af50:	b538      	push	{r3, r4, r5, lr}
    if (arg == mp_const_false) {
    af52:	4b26      	ldr	r3, [pc, #152]	; (afec <mp_obj_get_complex+0x9c>)
    af54:	4298      	cmp	r0, r3
    af56:	d01d      	beq.n	af94 <mp_obj_get_complex+0x44>
    } else if (arg == mp_const_true) {
    af58:	4b25      	ldr	r3, [pc, #148]	; (aff0 <mp_obj_get_complex+0xa0>)
    af5a:	4298      	cmp	r0, r3
    af5c:	d01e      	beq.n	af9c <mp_obj_get_complex+0x4c>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    af5e:	f010 0f01 	tst.w	r0, #1
    af62:	d121      	bne.n	afa8 <mp_obj_get_complex+0x58>
    af64:	4615      	mov	r5, r2
    af66:	460c      	mov	r4, r1
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    af68:	f010 0303 	ands.w	r3, r0, #3
    af6c:	d103      	bne.n	af76 <mp_obj_get_complex+0x26>
    af6e:	6801      	ldr	r1, [r0, #0]
    af70:	4a20      	ldr	r2, [pc, #128]	; (aff4 <mp_obj_get_complex+0xa4>)
    af72:	4291      	cmp	r1, r2
    af74:	d022      	beq.n	afbc <mp_obj_get_complex+0x6c>
    } else if (mp_obj_is_float(arg)) {
    af76:	b91b      	cbnz	r3, af80 <mp_obj_get_complex+0x30>
    af78:	6801      	ldr	r1, [r0, #0]
    af7a:	4a1f      	ldr	r2, [pc, #124]	; (aff8 <mp_obj_get_complex+0xa8>)
    af7c:	4291      	cmp	r1, r2
    af7e:	d024      	beq.n	afca <mp_obj_get_complex+0x7a>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_complex)) {
    af80:	bb53      	cbnz	r3, afd8 <mp_obj_get_complex+0x88>
    af82:	6802      	ldr	r2, [r0, #0]
    af84:	4b1d      	ldr	r3, [pc, #116]	; (affc <mp_obj_get_complex+0xac>)
    af86:	429a      	cmp	r2, r3
    af88:	d126      	bne.n	afd8 <mp_obj_get_complex+0x88>
        mp_obj_complex_get(arg, real, imag);
    af8a:	462a      	mov	r2, r5
    af8c:	4621      	mov	r1, r4
    af8e:	f000 febd 	bl	bd0c <mp_obj_complex_get>
    af92:	e002      	b.n	af9a <mp_obj_get_complex+0x4a>
        *real = 0;
    af94:	2300      	movs	r3, #0
    af96:	600b      	str	r3, [r1, #0]
        *imag = 0;
    af98:	6013      	str	r3, [r2, #0]
}
    af9a:	bd38      	pop	{r3, r4, r5, pc}
        *real = 1;
    af9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    afa0:	600b      	str	r3, [r1, #0]
        *imag = 0;
    afa2:	2300      	movs	r3, #0
    afa4:	6013      	str	r3, [r2, #0]
    afa6:	e7f8      	b.n	af9a <mp_obj_get_complex+0x4a>
        *real = MP_OBJ_SMALL_INT_VALUE(arg);
    afa8:	1040      	asrs	r0, r0, #1
    afaa:	ee07 0a90 	vmov	s15, r0
    afae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    afb2:	edc1 7a00 	vstr	s15, [r1]
        *imag = 0;
    afb6:	2300      	movs	r3, #0
    afb8:	6013      	str	r3, [r2, #0]
    afba:	e7ee      	b.n	af9a <mp_obj_get_complex+0x4a>
        *real = mp_obj_int_as_float_impl(arg);
    afbc:	f003 f99c 	bl	e2f8 <mp_obj_int_as_float_impl>
    afc0:	ed84 0a00 	vstr	s0, [r4]
        *imag = 0;
    afc4:	2300      	movs	r3, #0
    afc6:	602b      	str	r3, [r5, #0]
    afc8:	e7e7      	b.n	af9a <mp_obj_get_complex+0x4a>
        *real = mp_obj_float_get(arg);
    afca:	f001 ff5b 	bl	ce84 <mp_obj_float_get>
    afce:	ed84 0a00 	vstr	s0, [r4]
        *imag = 0;
    afd2:	2300      	movs	r3, #0
    afd4:	602b      	str	r3, [r5, #0]
    afd6:	e7e0      	b.n	af9a <mp_obj_get_complex+0x4a>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    afd8:	f7ff fdea 	bl	abb0 <mp_obj_get_type_str>
    afdc:	4602      	mov	r2, r0
    afde:	4908      	ldr	r1, [pc, #32]	; (b000 <mp_obj_get_complex+0xb0>)
    afe0:	4808      	ldr	r0, [pc, #32]	; (b004 <mp_obj_get_complex+0xb4>)
    afe2:	f001 fd73 	bl	cacc <mp_obj_new_exception_msg_varg>
    afe6:	f7f5 fc4b 	bl	880 <nlr_jump>
    afea:	bf00      	nop
    afec:	00025f44 	.word	0x00025f44
    aff0:	00025f4c 	.word	0x00025f4c
    aff4:	00027498 	.word	0x00027498
    aff8:	00026d90 	.word	0x00026d90
    affc:	00026114 	.word	0x00026114
    b000:	00025bd8 	.word	0x00025bd8
    b004:	00026c84 	.word	0x00026c84

0000b008 <mp_obj_get_array>:
void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items) {
    b008:	b538      	push	{r3, r4, r5, lr}
    if (MP_OBJ_IS_TYPE(o, &mp_type_tuple)) {
    b00a:	f010 0303 	ands.w	r3, r0, #3
    b00e:	d103      	bne.n	b018 <mp_obj_get_array+0x10>
    b010:	6805      	ldr	r5, [r0, #0]
    b012:	4c0b      	ldr	r4, [pc, #44]	; (b040 <mp_obj_get_array+0x38>)
    b014:	42a5      	cmp	r5, r4
    b016:	d007      	beq.n	b028 <mp_obj_get_array+0x20>
    } else if (MP_OBJ_IS_TYPE(o, &mp_type_list)) {
    b018:	b94b      	cbnz	r3, b02e <mp_obj_get_array+0x26>
    b01a:	6804      	ldr	r4, [r0, #0]
    b01c:	4b09      	ldr	r3, [pc, #36]	; (b044 <mp_obj_get_array+0x3c>)
    b01e:	429c      	cmp	r4, r3
    b020:	d105      	bne.n	b02e <mp_obj_get_array+0x26>
        mp_obj_list_get(o, len, items);
    b022:	f003 fd71 	bl	eb08 <mp_obj_list_get>
}
    b026:	bd38      	pop	{r3, r4, r5, pc}
        mp_obj_tuple_get(o, len, items);
    b028:	f006 fcd6 	bl	119d8 <mp_obj_tuple_get>
    b02c:	e7fb      	b.n	b026 <mp_obj_get_array+0x1e>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    b02e:	f7ff fdbf 	bl	abb0 <mp_obj_get_type_str>
    b032:	4602      	mov	r2, r0
    b034:	4904      	ldr	r1, [pc, #16]	; (b048 <mp_obj_get_array+0x40>)
    b036:	4805      	ldr	r0, [pc, #20]	; (b04c <mp_obj_get_array+0x44>)
    b038:	f001 fd48 	bl	cacc <mp_obj_new_exception_msg_varg>
    b03c:	f7f5 fc20 	bl	880 <nlr_jump>
    b040:	00028844 	.word	0x00028844
    b044:	00027890 	.word	0x00027890
    b048:	00025b84 	.word	0x00025b84
    b04c:	00026c84 	.word	0x00026c84

0000b050 <mp_obj_get_array_fixed_n>:
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items) {
    b050:	b510      	push	{r4, lr}
    b052:	b082      	sub	sp, #8
    b054:	460c      	mov	r4, r1
    mp_obj_get_array(o, &seq_len, items);
    b056:	a901      	add	r1, sp, #4
    b058:	f7ff ffd6 	bl	b008 <mp_obj_get_array>
    if (seq_len != len) {
    b05c:	9b01      	ldr	r3, [sp, #4]
    b05e:	42a3      	cmp	r3, r4
    b060:	d101      	bne.n	b066 <mp_obj_get_array_fixed_n+0x16>
}
    b062:	b002      	add	sp, #8
    b064:	bd10      	pop	{r4, pc}
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
    b066:	4622      	mov	r2, r4
    b068:	4902      	ldr	r1, [pc, #8]	; (b074 <mp_obj_get_array_fixed_n+0x24>)
    b06a:	4803      	ldr	r0, [pc, #12]	; (b078 <mp_obj_get_array_fixed_n+0x28>)
    b06c:	f001 fd2e 	bl	cacc <mp_obj_new_exception_msg_varg>
    b070:	f7f5 fc06 	bl	880 <nlr_jump>
    b074:	00025ba8 	.word	0x00025ba8
    b078:	00026cc0 	.word	0x00026cc0

0000b07c <mp_get_index>:
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, bool is_slice) {
    b07c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b07e:	b083      	sub	sp, #12
    b080:	4607      	mov	r7, r0
    b082:	460d      	mov	r5, r1
    b084:	4614      	mov	r4, r2
    b086:	461e      	mov	r6, r3
    if (MP_OBJ_IS_SMALL_INT(index)) {
    b088:	f012 0f01 	tst.w	r2, #1
    b08c:	d00c      	beq.n	b0a8 <mp_get_index+0x2c>
        i = MP_OBJ_SMALL_INT_VALUE(index);
    b08e:	1054      	asrs	r4, r2, #1
    b090:	9401      	str	r4, [sp, #4]
    if (i < 0) {
    b092:	9b01      	ldr	r3, [sp, #4]
    b094:	2b00      	cmp	r3, #0
    b096:	db19      	blt.n	b0cc <mp_get_index+0x50>
    if (is_slice) {
    b098:	b1f6      	cbz	r6, b0d8 <mp_get_index+0x5c>
        if (i < 0) {
    b09a:	9b01      	ldr	r3, [sp, #4]
    b09c:	2b00      	cmp	r3, #0
    b09e:	db18      	blt.n	b0d2 <mp_get_index+0x56>
        } else if ((mp_uint_t)i > len) {
    b0a0:	42ab      	cmp	r3, r5
    b0a2:	d91e      	bls.n	b0e2 <mp_get_index+0x66>
            i = len;
    b0a4:	9501      	str	r5, [sp, #4]
    b0a6:	e01c      	b.n	b0e2 <mp_get_index+0x66>
    } else if (!mp_obj_get_int_maybe(index, &i)) {
    b0a8:	a901      	add	r1, sp, #4
    b0aa:	4610      	mov	r0, r2
    b0ac:	f7ff fed0 	bl	ae50 <mp_obj_get_int_maybe>
    b0b0:	2800      	cmp	r0, #0
    b0b2:	d1ee      	bne.n	b092 <mp_get_index+0x16>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    b0b4:	687d      	ldr	r5, [r7, #4]
    b0b6:	4620      	mov	r0, r4
    b0b8:	f7ff fd7a 	bl	abb0 <mp_obj_get_type_str>
    b0bc:	4603      	mov	r3, r0
    b0be:	462a      	mov	r2, r5
    b0c0:	490d      	ldr	r1, [pc, #52]	; (b0f8 <mp_get_index+0x7c>)
    b0c2:	480e      	ldr	r0, [pc, #56]	; (b0fc <mp_get_index+0x80>)
    b0c4:	f001 fd02 	bl	cacc <mp_obj_new_exception_msg_varg>
    b0c8:	f7f5 fbda 	bl	880 <nlr_jump>
        i += len;
    b0cc:	442b      	add	r3, r5
    b0ce:	9301      	str	r3, [sp, #4]
    b0d0:	e7e2      	b.n	b098 <mp_get_index+0x1c>
            i = 0;
    b0d2:	2300      	movs	r3, #0
    b0d4:	9301      	str	r3, [sp, #4]
    b0d6:	e004      	b.n	b0e2 <mp_get_index+0x66>
        if (i < 0 || (mp_uint_t)i >= len) {
    b0d8:	9b01      	ldr	r3, [sp, #4]
    b0da:	2b00      	cmp	r3, #0
    b0dc:	db04      	blt.n	b0e8 <mp_get_index+0x6c>
    b0de:	42ab      	cmp	r3, r5
    b0e0:	d202      	bcs.n	b0e8 <mp_get_index+0x6c>
}
    b0e2:	9801      	ldr	r0, [sp, #4]
    b0e4:	b003      	add	sp, #12
    b0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_IndexError,
    b0e8:	687a      	ldr	r2, [r7, #4]
    b0ea:	4905      	ldr	r1, [pc, #20]	; (b100 <mp_get_index+0x84>)
    b0ec:	4805      	ldr	r0, [pc, #20]	; (b104 <mp_get_index+0x88>)
    b0ee:	f001 fced 	bl	cacc <mp_obj_new_exception_msg_varg>
    b0f2:	f7f5 fbc5 	bl	880 <nlr_jump>
    b0f6:	bf00      	nop
    b0f8:	00025b40 	.word	0x00025b40
    b0fc:	00026c84 	.word	0x00026c84
    b100:	00025b64 	.word	0x00025b64
    b104:	00026978 	.word	0x00026978

0000b108 <mp_obj_id>:
mp_obj_t mp_obj_id(mp_obj_t o_in) {
    b108:	b508      	push	{r3, lr}
    if (!MP_OBJ_IS_OBJ(o_in)) {
    b10a:	f010 0f03 	tst.w	r0, #3
    b10e:	d105      	bne.n	b11c <mp_obj_id+0x14>
    } else if (id >= 0) {
    b110:	2800      	cmp	r0, #0
    b112:	db06      	blt.n	b122 <mp_obj_id+0x1a>
        return MP_OBJ_NEW_SMALL_INT(id);
    b114:	0040      	lsls	r0, r0, #1
    b116:	f040 0001 	orr.w	r0, r0, #1
}
    b11a:	bd08      	pop	{r3, pc}
        return mp_obj_new_int(id);
    b11c:	f002 ff0d 	bl	df3a <mp_obj_new_int>
    b120:	e7fb      	b.n	b11a <mp_obj_id+0x12>
        return mp_obj_new_int_from_uint((mp_uint_t)id);
    b122:	f002 ff27 	bl	df74 <mp_obj_new_int_from_uint>
    b126:	e7f8      	b.n	b11a <mp_obj_id+0x12>

0000b128 <mp_obj_len_maybe>:
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in) {
    b128:	b510      	push	{r4, lr}
    b12a:	4604      	mov	r4, r0
    b12c:	f000 0303 	and.w	r3, r0, #3
    if (
    b130:	2b02      	cmp	r3, #2
    b132:	d012      	beq.n	b15a <mp_obj_len_maybe+0x32>
        MP_OBJ_IS_STR(o_in) ||
    b134:	b91b      	cbnz	r3, b13e <mp_obj_len_maybe+0x16>
    b136:	6801      	ldr	r1, [r0, #0]
    b138:	4a0e      	ldr	r2, [pc, #56]	; (b174 <mp_obj_len_maybe+0x4c>)
    b13a:	4291      	cmp	r1, r2
    b13c:	d00d      	beq.n	b15a <mp_obj_len_maybe+0x32>
    b13e:	b91b      	cbnz	r3, b148 <mp_obj_len_maybe+0x20>
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    b140:	6821      	ldr	r1, [r4, #0]
    b142:	4a0d      	ldr	r2, [pc, #52]	; (b178 <mp_obj_len_maybe+0x50>)
    b144:	4291      	cmp	r1, r2
    b146:	d008      	beq.n	b15a <mp_obj_len_maybe+0x32>
        mp_obj_type_t *type = mp_obj_get_type(o_in);
    b148:	4620      	mov	r0, r4
    b14a:	f7ff fd17 	bl	ab7c <mp_obj_get_type>
        if (type->unary_op != NULL) {
    b14e:	6943      	ldr	r3, [r0, #20]
    b150:	b173      	cbz	r3, b170 <mp_obj_len_maybe+0x48>
            return type->unary_op(MP_UNARY_OP_LEN, o_in);
    b152:	4621      	mov	r1, r4
    b154:	2005      	movs	r0, #5
    b156:	4798      	blx	r3
    b158:	e005      	b.n	b166 <mp_obj_len_maybe+0x3e>
        GET_STR_LEN(o_in, l);
    b15a:	2b02      	cmp	r3, #2
    b15c:	d004      	beq.n	b168 <mp_obj_len_maybe+0x40>
    b15e:	68a0      	ldr	r0, [r4, #8]
        return MP_OBJ_NEW_SMALL_INT(l);
    b160:	0040      	lsls	r0, r0, #1
    b162:	f040 0001 	orr.w	r0, r0, #1
}
    b166:	bd10      	pop	{r4, pc}
        GET_STR_LEN(o_in, l);
    b168:	08a0      	lsrs	r0, r4, #2
    b16a:	f7f6 fa8d 	bl	1688 <qstr_len>
    b16e:	e7f7      	b.n	b160 <mp_obj_len_maybe+0x38>
            return MP_OBJ_NULL;
    b170:	2000      	movs	r0, #0
    b172:	e7f8      	b.n	b166 <mp_obj_len_maybe+0x3e>
    b174:	00028104 	.word	0x00028104
    b178:	000280c8 	.word	0x000280c8

0000b17c <mp_obj_is_true>:
    if (arg == mp_const_false) {
    b17c:	4b19      	ldr	r3, [pc, #100]	; (b1e4 <mp_obj_is_true+0x68>)
    b17e:	4298      	cmp	r0, r3
    b180:	d026      	beq.n	b1d0 <mp_obj_is_true+0x54>
    } else if (arg == mp_const_true) {
    b182:	4b19      	ldr	r3, [pc, #100]	; (b1e8 <mp_obj_is_true+0x6c>)
    b184:	4298      	cmp	r0, r3
    b186:	d025      	beq.n	b1d4 <mp_obj_is_true+0x58>
    } else if (arg == mp_const_none) {
    b188:	4b18      	ldr	r3, [pc, #96]	; (b1ec <mp_obj_is_true+0x70>)
    b18a:	4298      	cmp	r0, r3
    b18c:	d024      	beq.n	b1d8 <mp_obj_is_true+0x5c>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    b18e:	f010 0f01 	tst.w	r0, #1
    b192:	d003      	beq.n	b19c <mp_obj_is_true+0x20>
        if (MP_OBJ_SMALL_INT_VALUE(arg) == 0) {
    b194:	0843      	lsrs	r3, r0, #1
    b196:	d121      	bne.n	b1dc <mp_obj_is_true+0x60>
            return 0;
    b198:	2000      	movs	r0, #0
    b19a:	4770      	bx	lr
bool mp_obj_is_true(mp_obj_t arg) {
    b19c:	b510      	push	{r4, lr}
    b19e:	4604      	mov	r4, r0
        mp_obj_type_t *type = mp_obj_get_type(arg);
    b1a0:	f7ff fcec 	bl	ab7c <mp_obj_get_type>
        if (type->unary_op != NULL) {
    b1a4:	6943      	ldr	r3, [r0, #20]
    b1a6:	b153      	cbz	r3, b1be <mp_obj_is_true+0x42>
            mp_obj_t result = type->unary_op(MP_UNARY_OP_BOOL, arg);
    b1a8:	4621      	mov	r1, r4
    b1aa:	2004      	movs	r0, #4
    b1ac:	4798      	blx	r3
            if (result != MP_OBJ_NULL) {
    b1ae:	4603      	mov	r3, r0
    b1b0:	b128      	cbz	r0, b1be <mp_obj_is_true+0x42>
                return result == mp_const_true;
    b1b2:	480d      	ldr	r0, [pc, #52]	; (b1e8 <mp_obj_is_true+0x6c>)
    b1b4:	4283      	cmp	r3, r0
    b1b6:	bf14      	ite	ne
    b1b8:	2000      	movne	r0, #0
    b1ba:	2001      	moveq	r0, #1
}
    b1bc:	bd10      	pop	{r4, pc}
        mp_obj_t len = mp_obj_len_maybe(arg);
    b1be:	4620      	mov	r0, r4
    b1c0:	f7ff ffb2 	bl	b128 <mp_obj_len_maybe>
        if (len != MP_OBJ_NULL) {
    b1c4:	b160      	cbz	r0, b1e0 <mp_obj_is_true+0x64>
            return len != MP_OBJ_NEW_SMALL_INT(0);
    b1c6:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
    b1ca:	bf18      	it	ne
    b1cc:	2001      	movne	r0, #1
    b1ce:	e7f5      	b.n	b1bc <mp_obj_is_true+0x40>
        return 0;
    b1d0:	2000      	movs	r0, #0
    b1d2:	4770      	bx	lr
        return 1;
    b1d4:	2001      	movs	r0, #1
    b1d6:	4770      	bx	lr
        return 0;
    b1d8:	2000      	movs	r0, #0
    b1da:	4770      	bx	lr
            return 1;
    b1dc:	2001      	movs	r0, #1
}
    b1de:	4770      	bx	lr
            return 1;
    b1e0:	2001      	movs	r0, #1
    b1e2:	e7eb      	b.n	b1bc <mp_obj_is_true+0x40>
    b1e4:	00025f44 	.word	0x00025f44
    b1e8:	00025f4c 	.word	0x00025f4c
    b1ec:	00027b40 	.word	0x00027b40

0000b1f0 <mp_obj_len>:
mp_obj_t mp_obj_len(mp_obj_t o_in) {
    b1f0:	b510      	push	{r4, lr}
    b1f2:	4604      	mov	r4, r0
    mp_obj_t len = mp_obj_len_maybe(o_in);
    b1f4:	f7ff ff98 	bl	b128 <mp_obj_len_maybe>
    if (len == MP_OBJ_NULL) {
    b1f8:	b100      	cbz	r0, b1fc <mp_obj_len+0xc>
}
    b1fa:	bd10      	pop	{r4, pc}
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    b1fc:	4620      	mov	r0, r4
    b1fe:	f7ff fcd7 	bl	abb0 <mp_obj_get_type_str>
    b202:	4602      	mov	r2, r0
    b204:	4902      	ldr	r1, [pc, #8]	; (b210 <mp_obj_len+0x20>)
    b206:	4803      	ldr	r0, [pc, #12]	; (b214 <mp_obj_len+0x24>)
    b208:	f001 fc60 	bl	cacc <mp_obj_new_exception_msg_varg>
    b20c:	f7f5 fb38 	bl	880 <nlr_jump>
    b210:	00025c28 	.word	0x00025c28
    b214:	00026c84 	.word	0x00026c84

0000b218 <mp_obj_subscr>:
mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value) {
    b218:	b570      	push	{r4, r5, r6, lr}
    b21a:	4605      	mov	r5, r0
    b21c:	460e      	mov	r6, r1
    b21e:	4614      	mov	r4, r2
    mp_obj_type_t *type = mp_obj_get_type(base);
    b220:	f7ff fcac 	bl	ab7c <mp_obj_get_type>
    if (type->subscr != NULL) {
    b224:	6a03      	ldr	r3, [r0, #32]
    b226:	b12b      	cbz	r3, b234 <mp_obj_subscr+0x1c>
        mp_obj_t ret = type->subscr(base, index, value);
    b228:	4622      	mov	r2, r4
    b22a:	4631      	mov	r1, r6
    b22c:	4628      	mov	r0, r5
    b22e:	4798      	blx	r3
        if (ret != MP_OBJ_NULL) {
    b230:	b100      	cbz	r0, b234 <mp_obj_subscr+0x1c>
}
    b232:	bd70      	pop	{r4, r5, r6, pc}
    if (value == MP_OBJ_NULL) {
    b234:	b15c      	cbz	r4, b24e <mp_obj_subscr+0x36>
    } else if (value == MP_OBJ_SENTINEL) {
    b236:	2c08      	cmp	r4, #8
    b238:	d013      	beq.n	b262 <mp_obj_subscr+0x4a>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    b23a:	4628      	mov	r0, r5
    b23c:	f7ff fcb8 	bl	abb0 <mp_obj_get_type_str>
    b240:	4602      	mov	r2, r0
    b242:	490d      	ldr	r1, [pc, #52]	; (b278 <mp_obj_subscr+0x60>)
    b244:	480d      	ldr	r0, [pc, #52]	; (b27c <mp_obj_subscr+0x64>)
    b246:	f001 fc41 	bl	cacc <mp_obj_new_exception_msg_varg>
    b24a:	f7f5 fb19 	bl	880 <nlr_jump>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    b24e:	4628      	mov	r0, r5
    b250:	f7ff fcae 	bl	abb0 <mp_obj_get_type_str>
    b254:	4602      	mov	r2, r0
    b256:	490a      	ldr	r1, [pc, #40]	; (b280 <mp_obj_subscr+0x68>)
    b258:	4808      	ldr	r0, [pc, #32]	; (b27c <mp_obj_subscr+0x64>)
    b25a:	f001 fc37 	bl	cacc <mp_obj_new_exception_msg_varg>
    b25e:	f7f5 fb0f 	bl	880 <nlr_jump>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    b262:	4628      	mov	r0, r5
    b264:	f7ff fca4 	bl	abb0 <mp_obj_get_type_str>
    b268:	4602      	mov	r2, r0
    b26a:	4906      	ldr	r1, [pc, #24]	; (b284 <mp_obj_subscr+0x6c>)
    b26c:	4803      	ldr	r0, [pc, #12]	; (b27c <mp_obj_subscr+0x64>)
    b26e:	f001 fc2d 	bl	cacc <mp_obj_new_exception_msg_varg>
    b272:	f7f5 fb05 	bl	880 <nlr_jump>
    b276:	bf00      	nop
    b278:	00025d04 	.word	0x00025d04
    b27c:	00026c84 	.word	0x00026c84
    b280:	00025cb4 	.word	0x00025cb4
    b284:	00025ce0 	.word	0x00025ce0

0000b288 <mp_identity_getiter>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_identity_obj, mp_identity);

mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf) {
    (void)iter_buf;
    return self;
}
    b288:	4770      	bx	lr

0000b28a <mp_get_buffer>:

bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    b28a:	b570      	push	{r4, r5, r6, lr}
    b28c:	4604      	mov	r4, r0
    b28e:	460d      	mov	r5, r1
    b290:	4616      	mov	r6, r2
    mp_obj_type_t *type = mp_obj_get_type(obj);
    b292:	f7ff fc73 	bl	ab7c <mp_obj_get_type>
    if (type->buffer_p.get_buffer == NULL) {
    b296:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    b298:	b143      	cbz	r3, b2ac <mp_get_buffer+0x22>
        return false;
    }
    int ret = type->buffer_p.get_buffer(obj, bufinfo, flags);
    b29a:	4632      	mov	r2, r6
    b29c:	4629      	mov	r1, r5
    b29e:	4620      	mov	r0, r4
    b2a0:	4798      	blx	r3
    if (ret != 0) {
    b2a2:	b908      	cbnz	r0, b2a8 <mp_get_buffer+0x1e>
        return false;
    }
    return true;
    b2a4:	2001      	movs	r0, #1
}
    b2a6:	bd70      	pop	{r4, r5, r6, pc}
        return false;
    b2a8:	2000      	movs	r0, #0
    b2aa:	e7fc      	b.n	b2a6 <mp_get_buffer+0x1c>
        return false;
    b2ac:	2000      	movs	r0, #0
    b2ae:	e7fa      	b.n	b2a6 <mp_get_buffer+0x1c>

0000b2b0 <mp_get_buffer_raise>:

void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    b2b0:	b508      	push	{r3, lr}
    if (!mp_get_buffer(obj, bufinfo, flags)) {
    b2b2:	f7ff ffea 	bl	b28a <mp_get_buffer>
    b2b6:	b100      	cbz	r0, b2ba <mp_get_buffer_raise+0xa>
        mp_raise_TypeError("object with buffer protocol required");
    }
}
    b2b8:	bd08      	pop	{r3, pc}
        mp_raise_TypeError("object with buffer protocol required");
    b2ba:	4801      	ldr	r0, [pc, #4]	; (b2c0 <mp_get_buffer_raise+0x10>)
    b2bc:	f7ff f9f4 	bl	a6a8 <mp_raise_TypeError>
    b2c0:	00025b18 	.word	0x00025b18

0000b2c4 <mp_generic_unary_op>:

mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    switch (op) {
    b2c4:	2806      	cmp	r0, #6
    b2c6:	d103      	bne.n	b2d0 <mp_generic_unary_op+0xc>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT((mp_uint_t)o_in);
    b2c8:	0048      	lsls	r0, r1, #1
    b2ca:	f040 0001 	orr.w	r0, r0, #1
    b2ce:	4770      	bx	lr
        default: return MP_OBJ_NULL; // op not supported
    b2d0:	2000      	movs	r0, #0
    }
}
    b2d2:	4770      	bx	lr

0000b2d4 <array_unary_op>:
}
#endif

STATIC mp_obj_t array_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    mp_obj_array_t *o = MP_OBJ_TO_PTR(o_in);
    switch (op) {
    b2d4:	2804      	cmp	r0, #4
    b2d6:	d003      	beq.n	b2e0 <array_unary_op+0xc>
    b2d8:	2805      	cmp	r0, #5
    b2da:	d005      	beq.n	b2e8 <array_unary_op+0x14>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(o->len != 0);
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(o->len);
        default: return MP_OBJ_NULL; // op not supported
    b2dc:	2000      	movs	r0, #0
    b2de:	4770      	bx	lr
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(o->len != 0);
    b2e0:	688b      	ldr	r3, [r1, #8]
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    b2e2:	b133      	cbz	r3, b2f2 <array_unary_op+0x1e>
    b2e4:	4804      	ldr	r0, [pc, #16]	; (b2f8 <array_unary_op+0x24>)
    b2e6:	4770      	bx	lr
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(o->len);
    b2e8:	6888      	ldr	r0, [r1, #8]
    b2ea:	0040      	lsls	r0, r0, #1
    b2ec:	f040 0001 	orr.w	r0, r0, #1
    b2f0:	4770      	bx	lr
    b2f2:	4802      	ldr	r0, [pc, #8]	; (b2fc <array_unary_op+0x28>)
    }
}
    b2f4:	4770      	bx	lr
    b2f6:	bf00      	nop
    b2f8:	00025f4c 	.word	0x00025f4c
    b2fc:	00025f44 	.word	0x00025f44

0000b300 <array_iterator_new>:

STATIC mp_obj_t array_iterator_new(mp_obj_t array_in, mp_obj_iter_buf_t *iter_buf) {
    assert(sizeof(mp_obj_array_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_array_t *array = MP_OBJ_TO_PTR(array_in);
    mp_obj_array_it_t *o = (mp_obj_array_it_t*)iter_buf;
    o->base.type = &array_it_type;
    b300:	4b03      	ldr	r3, [pc, #12]	; (b310 <array_iterator_new+0x10>)
    b302:	600b      	str	r3, [r1, #0]
    o->array = array;
    b304:	6048      	str	r0, [r1, #4]
    o->offset = 0;
    b306:	2300      	movs	r3, #0
    b308:	608b      	str	r3, [r1, #8]
    o->cur = 0;
    b30a:	60cb      	str	r3, [r1, #12]
    if (array->base.type == &mp_type_memoryview) {
        o->offset = array->free;
    }
    #endif
    return MP_OBJ_FROM_PTR(o);
}
    b30c:	4608      	mov	r0, r1
    b30e:	4770      	bx	lr
    b310:	00025e08 	.word	0x00025e08

0000b314 <array_get_buffer>:
STATIC mp_int_t array_get_buffer(mp_obj_t o_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    b314:	b538      	push	{r3, r4, r5, lr}
    b316:	4604      	mov	r4, r0
    b318:	460d      	mov	r5, r1
    size_t sz = mp_binary_get_size('@', o->typecode & TYPECODE_MASK, NULL);
    b31a:	2200      	movs	r2, #0
    b31c:	7901      	ldrb	r1, [r0, #4]
    b31e:	2040      	movs	r0, #64	; 0x40
    b320:	f007 fe54 	bl	12fcc <mp_binary_get_size>
    bufinfo->buf = o->items;
    b324:	68e3      	ldr	r3, [r4, #12]
    b326:	602b      	str	r3, [r5, #0]
    bufinfo->len = o->len * sz;
    b328:	68a3      	ldr	r3, [r4, #8]
    b32a:	fb00 f003 	mul.w	r0, r0, r3
    b32e:	6068      	str	r0, [r5, #4]
    bufinfo->typecode = o->typecode & TYPECODE_MASK;
    b330:	7923      	ldrb	r3, [r4, #4]
    b332:	60ab      	str	r3, [r5, #8]
}
    b334:	2000      	movs	r0, #0
    b336:	bd38      	pop	{r3, r4, r5, pc}

0000b338 <array_extend>:
STATIC mp_obj_t array_extend(mp_obj_t self_in, mp_obj_t arg_in) {
    b338:	b570      	push	{r4, r5, r6, lr}
    b33a:	b084      	sub	sp, #16
    b33c:	4604      	mov	r4, r0
    b33e:	4608      	mov	r0, r1
    assert((MICROPY_PY_BUILTINS_BYTEARRAY && MP_OBJ_IS_TYPE(self_in, &mp_type_bytearray))
    b340:	f014 0303 	ands.w	r3, r4, #3
    b344:	d103      	bne.n	b34e <array_extend+0x16>
    b346:	6821      	ldr	r1, [r4, #0]
    b348:	4a20      	ldr	r2, [pc, #128]	; (b3cc <array_extend+0x94>)
    b34a:	4291      	cmp	r1, r2
    b34c:	d004      	beq.n	b358 <array_extend+0x20>
    b34e:	bb4b      	cbnz	r3, b3a4 <array_extend+0x6c>
    b350:	6822      	ldr	r2, [r4, #0]
    b352:	4b1f      	ldr	r3, [pc, #124]	; (b3d0 <array_extend+0x98>)
    b354:	429a      	cmp	r2, r3
    b356:	d125      	bne.n	b3a4 <array_extend+0x6c>
    mp_get_buffer_raise(arg_in, &arg_bufinfo, MP_BUFFER_READ);
    b358:	2201      	movs	r2, #1
    b35a:	a901      	add	r1, sp, #4
    b35c:	f7ff ffa8 	bl	b2b0 <mp_get_buffer_raise>
    size_t sz = mp_binary_get_size('@', self->typecode, NULL);
    b360:	2200      	movs	r2, #0
    b362:	7921      	ldrb	r1, [r4, #4]
    b364:	2040      	movs	r0, #64	; 0x40
    b366:	f007 fe31 	bl	12fcc <mp_binary_get_size>
    b36a:	4606      	mov	r6, r0
    size_t len = arg_bufinfo.len / sz;
    b36c:	9d02      	ldr	r5, [sp, #8]
    b36e:	fbb5 f5f0 	udiv	r5, r5, r0
    if (self->free < len) {
    b372:	6863      	ldr	r3, [r4, #4]
    b374:	f3c3 2317 	ubfx	r3, r3, #8, #24
    b378:	42ab      	cmp	r3, r5
    b37a:	d31a      	bcc.n	b3b2 <array_extend+0x7a>
        self->free -= len;
    b37c:	1b5b      	subs	r3, r3, r5
    b37e:	6862      	ldr	r2, [r4, #4]
    b380:	f363 221f 	bfi	r2, r3, #8, #24
    b384:	6062      	str	r2, [r4, #4]
    mp_seq_copy((byte*)self->items + self->len * sz, arg_bufinfo.buf, len * sz, byte);
    b386:	68e3      	ldr	r3, [r4, #12]
    b388:	68a0      	ldr	r0, [r4, #8]
    b38a:	fb05 f206 	mul.w	r2, r5, r6
    b38e:	9901      	ldr	r1, [sp, #4]
    b390:	fb06 3000 	mla	r0, r6, r0, r3
    b394:	f010 fa2e 	bl	1b7f4 <memcpy>
    self->len += len;
    b398:	68a3      	ldr	r3, [r4, #8]
    b39a:	441d      	add	r5, r3
    b39c:	60a5      	str	r5, [r4, #8]
}
    b39e:	480d      	ldr	r0, [pc, #52]	; (b3d4 <array_extend+0x9c>)
    b3a0:	b004      	add	sp, #16
    b3a2:	bd70      	pop	{r4, r5, r6, pc}
    assert((MICROPY_PY_BUILTINS_BYTEARRAY && MP_OBJ_IS_TYPE(self_in, &mp_type_bytearray))
    b3a4:	4b0c      	ldr	r3, [pc, #48]	; (b3d8 <array_extend+0xa0>)
    b3a6:	4a0d      	ldr	r2, [pc, #52]	; (b3dc <array_extend+0xa4>)
    b3a8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    b3ac:	480c      	ldr	r0, [pc, #48]	; (b3e0 <array_extend+0xa8>)
    b3ae:	f00d f8d5 	bl	1855c <__assert_func>
        self->items = m_renew(byte, self->items, (self->len + self->free) * sz, (self->len + len) * sz);
    b3b2:	68a1      	ldr	r1, [r4, #8]
    b3b4:	4429      	add	r1, r5
    b3b6:	fb00 f101 	mul.w	r1, r0, r1
    b3ba:	68e0      	ldr	r0, [r4, #12]
    b3bc:	f7f5 fa95 	bl	8ea <m_realloc>
    b3c0:	60e0      	str	r0, [r4, #12]
        self->free = 0;
    b3c2:	6863      	ldr	r3, [r4, #4]
    b3c4:	f36f 231f 	bfc	r3, #8, #24
    b3c8:	6063      	str	r3, [r4, #4]
    b3ca:	e7dc      	b.n	b386 <array_extend+0x4e>
    b3cc:	00025ec4 	.word	0x00025ec4
    b3d0:	00025e88 	.word	0x00025e88
    b3d4:	00027b40 	.word	0x00027b40
    b3d8:	00025d5c 	.word	0x00025d5c
    b3dc:	00025d44 	.word	0x00025d44
    b3e0:	00025dec 	.word	0x00025dec

0000b3e4 <array_append>:
STATIC mp_obj_t array_append(mp_obj_t self_in, mp_obj_t arg) {
    b3e4:	b570      	push	{r4, r5, r6, lr}
    b3e6:	4604      	mov	r4, r0
    b3e8:	460d      	mov	r5, r1
    assert((MICROPY_PY_BUILTINS_BYTEARRAY && MP_OBJ_IS_TYPE(self_in, &mp_type_bytearray))
    b3ea:	f010 0303 	ands.w	r3, r0, #3
    b3ee:	d103      	bne.n	b3f8 <array_append+0x14>
    b3f0:	6801      	ldr	r1, [r0, #0]
    b3f2:	4a23      	ldr	r2, [pc, #140]	; (b480 <array_append+0x9c>)
    b3f4:	4291      	cmp	r1, r2
    b3f6:	d004      	beq.n	b402 <array_append+0x1e>
    b3f8:	b9d3      	cbnz	r3, b430 <array_append+0x4c>
    b3fa:	6822      	ldr	r2, [r4, #0]
    b3fc:	4b21      	ldr	r3, [pc, #132]	; (b484 <array_append+0xa0>)
    b3fe:	429a      	cmp	r2, r3
    b400:	d116      	bne.n	b430 <array_append+0x4c>
    if (self->free == 0) {
    b402:	6863      	ldr	r3, [r4, #4]
    b404:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
    b408:	d019      	beq.n	b43e <array_append+0x5a>
    mp_binary_set_val_array(self->typecode, self->items, self->len, arg);
    b40a:	462b      	mov	r3, r5
    b40c:	68a2      	ldr	r2, [r4, #8]
    b40e:	68e1      	ldr	r1, [r4, #12]
    b410:	7920      	ldrb	r0, [r4, #4]
    b412:	f008 f8d3 	bl	135bc <mp_binary_set_val_array>
    self->len++;
    b416:	68a3      	ldr	r3, [r4, #8]
    b418:	3301      	adds	r3, #1
    b41a:	60a3      	str	r3, [r4, #8]
    self->free--;
    b41c:	6863      	ldr	r3, [r4, #4]
    b41e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    b422:	eb02 2213 	add.w	r2, r2, r3, lsr #8
    b426:	f362 231f 	bfi	r3, r2, #8, #24
    b42a:	6063      	str	r3, [r4, #4]
}
    b42c:	4816      	ldr	r0, [pc, #88]	; (b488 <array_append+0xa4>)
    b42e:	bd70      	pop	{r4, r5, r6, pc}
    assert((MICROPY_PY_BUILTINS_BYTEARRAY && MP_OBJ_IS_TYPE(self_in, &mp_type_bytearray))
    b430:	4b16      	ldr	r3, [pc, #88]	; (b48c <array_append+0xa8>)
    b432:	4a17      	ldr	r2, [pc, #92]	; (b490 <array_append+0xac>)
    b434:	f240 1139 	movw	r1, #313	; 0x139
    b438:	4816      	ldr	r0, [pc, #88]	; (b494 <array_append+0xb0>)
    b43a:	f00d f88f 	bl	1855c <__assert_func>
        size_t item_sz = mp_binary_get_size('@', self->typecode, NULL);
    b43e:	2200      	movs	r2, #0
    b440:	7921      	ldrb	r1, [r4, #4]
    b442:	2040      	movs	r0, #64	; 0x40
    b444:	f007 fdc2 	bl	12fcc <mp_binary_get_size>
    b448:	4606      	mov	r6, r0
        self->free = 8;
    b44a:	6863      	ldr	r3, [r4, #4]
    b44c:	2208      	movs	r2, #8
    b44e:	f362 231f 	bfi	r3, r2, #8, #24
    b452:	6063      	str	r3, [r4, #4]
        self->items = m_renew(byte, self->items, item_sz * self->len, item_sz * (self->len + self->free));
    b454:	68a1      	ldr	r1, [r4, #8]
    b456:	4411      	add	r1, r2
    b458:	fb00 f101 	mul.w	r1, r0, r1
    b45c:	68e0      	ldr	r0, [r4, #12]
    b45e:	f7f5 fa44 	bl	8ea <m_realloc>
    b462:	60e0      	str	r0, [r4, #12]
        mp_seq_clear(self->items, self->len + 1, self->len + self->free, item_sz);
    b464:	68a3      	ldr	r3, [r4, #8]
    b466:	fb03 6306 	mla	r3, r3, r6, r6
    b46a:	6862      	ldr	r2, [r4, #4]
    b46c:	f3c2 2217 	ubfx	r2, r2, #8, #24
    b470:	3a01      	subs	r2, #1
    b472:	fb06 f202 	mul.w	r2, r6, r2
    b476:	2100      	movs	r1, #0
    b478:	4418      	add	r0, r3
    b47a:	f010 f9ff 	bl	1b87c <memset>
    b47e:	e7c4      	b.n	b40a <array_append+0x26>
    b480:	00025ec4 	.word	0x00025ec4
    b484:	00025e88 	.word	0x00025e88
    b488:	00027b40 	.word	0x00027b40
    b48c:	00025d5c 	.word	0x00025d5c
    b490:	00025d34 	.word	0x00025d34
    b494:	00025dec 	.word	0x00025dec

0000b498 <array_it_iternext>:
STATIC mp_obj_t array_it_iternext(mp_obj_t self_in) {
    b498:	b538      	push	{r3, r4, r5, lr}
    if (self->cur < self->array->len) {
    b49a:	68c2      	ldr	r2, [r0, #12]
    b49c:	6841      	ldr	r1, [r0, #4]
    b49e:	688b      	ldr	r3, [r1, #8]
    b4a0:	429a      	cmp	r2, r3
    b4a2:	d301      	bcc.n	b4a8 <array_it_iternext+0x10>
        return MP_OBJ_STOP_ITERATION;
    b4a4:	2004      	movs	r0, #4
}
    b4a6:	bd38      	pop	{r3, r4, r5, pc}
    b4a8:	4603      	mov	r3, r0
        return mp_binary_get_val_array(self->array->typecode & TYPECODE_MASK, self->array->items, self->offset + self->cur++);
    b4aa:	7908      	ldrb	r0, [r1, #4]
    b4ac:	68c9      	ldr	r1, [r1, #12]
    b4ae:	689c      	ldr	r4, [r3, #8]
    b4b0:	1c55      	adds	r5, r2, #1
    b4b2:	60dd      	str	r5, [r3, #12]
    b4b4:	4422      	add	r2, r4
    b4b6:	f007 fe57 	bl	13168 <mp_binary_get_val_array>
    b4ba:	e7f4      	b.n	b4a6 <array_it_iternext+0xe>

0000b4bc <array_subscr>:
    if (value == MP_OBJ_NULL) {
    b4bc:	b1ba      	cbz	r2, b4ee <array_subscr+0x32>
STATIC mp_obj_t array_subscr(mp_obj_t self_in, mp_obj_t index_in, mp_obj_t value) {
    b4be:	b538      	push	{r3, r4, r5, lr}
    b4c0:	4615      	mov	r5, r2
    b4c2:	460a      	mov	r2, r1
    b4c4:	4604      	mov	r4, r0
            size_t index = mp_get_index(o->base.type, o->len, index_in, false);
    b4c6:	2300      	movs	r3, #0
    b4c8:	6881      	ldr	r1, [r0, #8]
    b4ca:	6800      	ldr	r0, [r0, #0]
    b4cc:	f7ff fdd6 	bl	b07c <mp_get_index>
    b4d0:	4602      	mov	r2, r0
            if (value == MP_OBJ_SENTINEL) {
    b4d2:	2d08      	cmp	r5, #8
    b4d4:	d006      	beq.n	b4e4 <array_subscr+0x28>
                mp_binary_set_val_array(o->typecode & TYPECODE_MASK, o->items, index, value);
    b4d6:	462b      	mov	r3, r5
    b4d8:	68e1      	ldr	r1, [r4, #12]
    b4da:	7920      	ldrb	r0, [r4, #4]
    b4dc:	f008 f86e 	bl	135bc <mp_binary_set_val_array>
                return mp_const_none;
    b4e0:	4804      	ldr	r0, [pc, #16]	; (b4f4 <array_subscr+0x38>)
}
    b4e2:	bd38      	pop	{r3, r4, r5, pc}
                return mp_binary_get_val_array(o->typecode & TYPECODE_MASK, o->items, index);
    b4e4:	68e1      	ldr	r1, [r4, #12]
    b4e6:	7920      	ldrb	r0, [r4, #4]
    b4e8:	f007 fe3e 	bl	13168 <mp_binary_get_val_array>
    b4ec:	e7f9      	b.n	b4e2 <array_subscr+0x26>
        return MP_OBJ_NULL; // op not supported
    b4ee:	2000      	movs	r0, #0
}
    b4f0:	4770      	bx	lr
    b4f2:	bf00      	nop
    b4f4:	00027b40 	.word	0x00027b40

0000b4f8 <array_new>:
STATIC mp_obj_array_t *array_new(char typecode, size_t n) {
    b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4fa:	4605      	mov	r5, r0
    b4fc:	460e      	mov	r6, r1
    int typecode_size = mp_binary_get_size('@', typecode, NULL);
    b4fe:	2200      	movs	r2, #0
    b500:	4601      	mov	r1, r0
    b502:	2040      	movs	r0, #64	; 0x40
    b504:	f007 fd62 	bl	12fcc <mp_binary_get_size>
    b508:	4607      	mov	r7, r0
    mp_obj_array_t *o = m_new_obj(mp_obj_array_t);
    b50a:	2010      	movs	r0, #16
    b50c:	f7f5 f9d6 	bl	8bc <m_malloc>
    b510:	4604      	mov	r4, r0
    o->base.type = (typecode == BYTEARRAY_TYPECODE) ? &mp_type_bytearray : &mp_type_array;
    b512:	2d01      	cmp	r5, #1
    b514:	d00e      	beq.n	b534 <array_new+0x3c>
    b516:	4b08      	ldr	r3, [pc, #32]	; (b538 <array_new+0x40>)
    b518:	6023      	str	r3, [r4, #0]
    o->typecode = typecode;
    b51a:	7125      	strb	r5, [r4, #4]
    o->free = 0;
    b51c:	6863      	ldr	r3, [r4, #4]
    b51e:	f36f 231f 	bfc	r3, #8, #24
    b522:	6063      	str	r3, [r4, #4]
    o->len = n;
    b524:	60a6      	str	r6, [r4, #8]
    o->items = m_new(byte, typecode_size * o->len);
    b526:	fb06 f007 	mul.w	r0, r6, r7
    b52a:	f7f5 f9c7 	bl	8bc <m_malloc>
    b52e:	60e0      	str	r0, [r4, #12]
}
    b530:	4620      	mov	r0, r4
    b532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    o->base.type = (typecode == BYTEARRAY_TYPECODE) ? &mp_type_bytearray : &mp_type_array;
    b534:	4b01      	ldr	r3, [pc, #4]	; (b53c <array_new+0x44>)
    b536:	e7ef      	b.n	b518 <array_new+0x20>
    b538:	00025e88 	.word	0x00025e88
    b53c:	00025ec4 	.word	0x00025ec4

0000b540 <array_binary_op>:
STATIC mp_obj_t array_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    b540:	b570      	push	{r4, r5, r6, lr}
    b542:	b088      	sub	sp, #32
    b544:	460c      	mov	r4, r1
    b546:	4615      	mov	r5, r2
    switch (op) {
    b548:	1e83      	subs	r3, r0, #2
    b54a:	2b20      	cmp	r3, #32
    b54c:	f200 8097 	bhi.w	b67e <array_binary_op+0x13e>
    b550:	e8df f003 	tbb	[pc, r3]
    b554:	9595957a 	.word	0x9595957a
    b558:	95959595 	.word	0x95959595
    b55c:	95959595 	.word	0x95959595
    b560:	9595953c 	.word	0x9595953c
    b564:	95959595 	.word	0x95959595
    b568:	95959595 	.word	0x95959595
    b56c:	95959511 	.word	0x95959511
    b570:	95959595 	.word	0x95959595
    b574:	41          	.byte	0x41
    b575:	00          	.byte	0x00
            array_get_buffer(lhs_in, &lhs_bufinfo, MP_BUFFER_READ);
    b576:	2201      	movs	r2, #1
    b578:	a902      	add	r1, sp, #8
    b57a:	4620      	mov	r0, r4
    b57c:	f7ff feca 	bl	b314 <array_get_buffer>
            mp_get_buffer_raise(rhs_in, &rhs_bufinfo, MP_BUFFER_READ);
    b580:	2201      	movs	r2, #1
    b582:	a905      	add	r1, sp, #20
    b584:	4628      	mov	r0, r5
    b586:	f7ff fe93 	bl	b2b0 <mp_get_buffer_raise>
            size_t sz = mp_binary_get_size('@', lhs_bufinfo.typecode, NULL);
    b58a:	2200      	movs	r2, #0
    b58c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    b590:	2040      	movs	r0, #64	; 0x40
    b592:	f007 fd1b 	bl	12fcc <mp_binary_get_size>
    b596:	4606      	mov	r6, r0
            size_t rhs_len = rhs_bufinfo.len / sz;
    b598:	9d06      	ldr	r5, [sp, #24]
    b59a:	fbb5 f5f0 	udiv	r5, r5, r0
            mp_obj_array_t *res = array_new(lhs_bufinfo.typecode, lhs->len + rhs_len);
    b59e:	68a1      	ldr	r1, [r4, #8]
    b5a0:	4429      	add	r1, r5
    b5a2:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b5a6:	f7ff ffa7 	bl	b4f8 <array_new>
    b5aa:	4604      	mov	r4, r0
            mp_seq_cat((byte*)res->items, lhs_bufinfo.buf, lhs_bufinfo.len, rhs_bufinfo.buf, rhs_len * sz, byte);
    b5ac:	9a03      	ldr	r2, [sp, #12]
    b5ae:	9902      	ldr	r1, [sp, #8]
    b5b0:	68c0      	ldr	r0, [r0, #12]
    b5b2:	f010 f91f 	bl	1b7f4 <memcpy>
    b5b6:	68e0      	ldr	r0, [r4, #12]
    b5b8:	fb05 f206 	mul.w	r2, r5, r6
    b5bc:	9905      	ldr	r1, [sp, #20]
    b5be:	9b03      	ldr	r3, [sp, #12]
    b5c0:	4418      	add	r0, r3
    b5c2:	f010 f917 	bl	1b7f4 <memcpy>
}
    b5c6:	4620      	mov	r0, r4
    b5c8:	b008      	add	sp, #32
    b5ca:	bd70      	pop	{r4, r5, r6, pc}
            array_extend(lhs_in, rhs_in);
    b5cc:	4629      	mov	r1, r5
    b5ce:	4620      	mov	r0, r4
    b5d0:	f7ff feb2 	bl	b338 <array_extend>
            return lhs_in;
    b5d4:	e7f7      	b.n	b5c6 <array_binary_op+0x86>
            if (mp_get_buffer(rhs_in, &rhs_bufinfo, MP_BUFFER_READ)) {
    b5d6:	2201      	movs	r2, #1
    b5d8:	a905      	add	r1, sp, #20
    b5da:	4628      	mov	r0, r5
    b5dc:	f7ff fe55 	bl	b28a <mp_get_buffer>
    b5e0:	b1c0      	cbz	r0, b614 <array_binary_op+0xd4>
                if (!MP_OBJ_IS_TYPE(lhs_in, &mp_type_bytearray)) {
    b5e2:	f014 0f03 	tst.w	r4, #3
    b5e6:	d129      	bne.n	b63c <array_binary_op+0xfc>
    b5e8:	6822      	ldr	r2, [r4, #0]
    b5ea:	4b26      	ldr	r3, [pc, #152]	; (b684 <array_binary_op+0x144>)
    b5ec:	429a      	cmp	r2, r3
    b5ee:	d001      	beq.n	b5f4 <array_binary_op+0xb4>
                    return mp_const_false;
    b5f0:	4c25      	ldr	r4, [pc, #148]	; (b688 <array_binary_op+0x148>)
    b5f2:	e7e8      	b.n	b5c6 <array_binary_op+0x86>
                array_get_buffer(lhs_in, &lhs_bufinfo, MP_BUFFER_READ);
    b5f4:	2201      	movs	r2, #1
    b5f6:	a902      	add	r1, sp, #8
    b5f8:	4620      	mov	r0, r4
    b5fa:	f7ff fe8b 	bl	b314 <array_get_buffer>
                    find_subbytes(lhs_bufinfo.buf, lhs_bufinfo.len, rhs_bufinfo.buf, rhs_bufinfo.len, 1) != NULL);
    b5fe:	2301      	movs	r3, #1
    b600:	9300      	str	r3, [sp, #0]
    b602:	9b06      	ldr	r3, [sp, #24]
    b604:	9a05      	ldr	r2, [sp, #20]
    b606:	9903      	ldr	r1, [sp, #12]
    b608:	9802      	ldr	r0, [sp, #8]
    b60a:	f003 ffc5 	bl	f598 <find_subbytes>
    b60e:	b1b8      	cbz	r0, b640 <array_binary_op+0x100>
    b610:	4c1e      	ldr	r4, [pc, #120]	; (b68c <array_binary_op+0x14c>)
    b612:	e7d8      	b.n	b5c6 <array_binary_op+0x86>
            if (MP_OBJ_IS_INT(rhs_in) || mp_obj_is_float(rhs_in)) {
    b614:	f015 0f01 	tst.w	r5, #1
    b618:	d10d      	bne.n	b636 <array_binary_op+0xf6>
    b61a:	f015 0303 	ands.w	r3, r5, #3
    b61e:	d103      	bne.n	b628 <array_binary_op+0xe8>
    b620:	6829      	ldr	r1, [r5, #0]
    b622:	4a1b      	ldr	r2, [pc, #108]	; (b690 <array_binary_op+0x150>)
    b624:	4291      	cmp	r1, r2
    b626:	d006      	beq.n	b636 <array_binary_op+0xf6>
    b628:	b963      	cbnz	r3, b644 <array_binary_op+0x104>
    b62a:	682a      	ldr	r2, [r5, #0]
    b62c:	4b19      	ldr	r3, [pc, #100]	; (b694 <array_binary_op+0x154>)
    b62e:	429a      	cmp	r2, r3
    b630:	d001      	beq.n	b636 <array_binary_op+0xf6>
            return mp_const_false;
    b632:	4c15      	ldr	r4, [pc, #84]	; (b688 <array_binary_op+0x148>)
    b634:	e7c7      	b.n	b5c6 <array_binary_op+0x86>
                mp_raise_NotImplementedError(NULL);
    b636:	2000      	movs	r0, #0
    b638:	f7ff f84a 	bl	a6d0 <mp_raise_NotImplementedError>
                    return mp_const_false;
    b63c:	4c12      	ldr	r4, [pc, #72]	; (b688 <array_binary_op+0x148>)
    b63e:	e7c2      	b.n	b5c6 <array_binary_op+0x86>
    b640:	4c11      	ldr	r4, [pc, #68]	; (b688 <array_binary_op+0x148>)
    b642:	e7c0      	b.n	b5c6 <array_binary_op+0x86>
            return mp_const_false;
    b644:	4c10      	ldr	r4, [pc, #64]	; (b688 <array_binary_op+0x148>)
    b646:	e7be      	b.n	b5c6 <array_binary_op+0x86>
    b648:	4606      	mov	r6, r0
            array_get_buffer(lhs_in, &lhs_bufinfo, MP_BUFFER_READ);
    b64a:	2201      	movs	r2, #1
    b64c:	a902      	add	r1, sp, #8
    b64e:	4620      	mov	r0, r4
    b650:	f7ff fe60 	bl	b314 <array_get_buffer>
            if (!mp_get_buffer(rhs_in, &rhs_bufinfo, MP_BUFFER_READ)) {
    b654:	2201      	movs	r2, #1
    b656:	a905      	add	r1, sp, #20
    b658:	4628      	mov	r0, r5
    b65a:	f7ff fe16 	bl	b28a <mp_get_buffer>
    b65e:	b908      	cbnz	r0, b664 <array_binary_op+0x124>
                return mp_const_false;
    b660:	4c09      	ldr	r4, [pc, #36]	; (b688 <array_binary_op+0x148>)
    b662:	e7b0      	b.n	b5c6 <array_binary_op+0x86>
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_bufinfo.buf, lhs_bufinfo.len, rhs_bufinfo.buf, rhs_bufinfo.len));
    b664:	9b06      	ldr	r3, [sp, #24]
    b666:	9300      	str	r3, [sp, #0]
    b668:	9b05      	ldr	r3, [sp, #20]
    b66a:	9a03      	ldr	r2, [sp, #12]
    b66c:	9902      	ldr	r1, [sp, #8]
    b66e:	4630      	mov	r0, r6
    b670:	f007 f979 	bl	12966 <mp_seq_cmp_bytes>
    b674:	b108      	cbz	r0, b67a <array_binary_op+0x13a>
    b676:	4c05      	ldr	r4, [pc, #20]	; (b68c <array_binary_op+0x14c>)
    b678:	e7a5      	b.n	b5c6 <array_binary_op+0x86>
    b67a:	4c03      	ldr	r4, [pc, #12]	; (b688 <array_binary_op+0x148>)
    b67c:	e7a3      	b.n	b5c6 <array_binary_op+0x86>
            return MP_OBJ_NULL; // op not supported
    b67e:	2400      	movs	r4, #0
    b680:	e7a1      	b.n	b5c6 <array_binary_op+0x86>
    b682:	bf00      	nop
    b684:	00025ec4 	.word	0x00025ec4
    b688:	00025f44 	.word	0x00025f44
    b68c:	00025f4c 	.word	0x00025f4c
    b690:	00027498 	.word	0x00027498
    b694:	00026d90 	.word	0x00026d90

0000b698 <array_construct>:
STATIC mp_obj_t array_construct(char typecode, mp_obj_t initializer) {
    b698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b69c:	b085      	sub	sp, #20
    b69e:	4680      	mov	r8, r0
    b6a0:	460c      	mov	r4, r1
    if (((MICROPY_PY_BUILTINS_BYTEARRAY
    b6a2:	2801      	cmp	r0, #1
    b6a4:	d00b      	beq.n	b6be <array_construct+0x26>
        || (MICROPY_PY_ARRAY
    b6a6:	f011 0303 	ands.w	r3, r1, #3
    b6aa:	d103      	bne.n	b6b4 <array_construct+0x1c>
            && (MP_OBJ_IS_TYPE(initializer, &mp_type_bytes)
    b6ac:	6809      	ldr	r1, [r1, #0]
    b6ae:	4a27      	ldr	r2, [pc, #156]	; (b74c <array_construct+0xb4>)
    b6b0:	4291      	cmp	r1, r2
    b6b2:	d004      	beq.n	b6be <array_construct+0x26>
    b6b4:	b94b      	cbnz	r3, b6ca <array_construct+0x32>
                || (MICROPY_PY_BUILTINS_BYTEARRAY && MP_OBJ_IS_TYPE(initializer, &mp_type_bytearray)))))
    b6b6:	6822      	ldr	r2, [r4, #0]
    b6b8:	4b25      	ldr	r3, [pc, #148]	; (b750 <array_construct+0xb8>)
    b6ba:	429a      	cmp	r2, r3
    b6bc:	d105      	bne.n	b6ca <array_construct+0x32>
        && mp_get_buffer(initializer, &bufinfo, MP_BUFFER_READ)) {
    b6be:	2201      	movs	r2, #1
    b6c0:	a901      	add	r1, sp, #4
    b6c2:	4620      	mov	r0, r4
    b6c4:	f7ff fde1 	bl	b28a <mp_get_buffer>
    b6c8:	b980      	cbnz	r0, b6ec <array_construct+0x54>
    mp_obj_t len_in = mp_obj_len_maybe(initializer);
    b6ca:	4620      	mov	r0, r4
    b6cc:	f7ff fd2c 	bl	b128 <mp_obj_len_maybe>
    if (len_in == MP_OBJ_NULL) {
    b6d0:	b320      	cbz	r0, b71c <array_construct+0x84>
        len = MP_OBJ_SMALL_INT_VALUE(len_in);
    b6d2:	1045      	asrs	r5, r0, #1
    mp_obj_array_t *array = array_new(typecode, len);
    b6d4:	4629      	mov	r1, r5
    b6d6:	4640      	mov	r0, r8
    b6d8:	f7ff ff0e 	bl	b4f8 <array_new>
    b6dc:	4606      	mov	r6, r0
    mp_obj_t iterable = mp_getiter(initializer, NULL);
    b6de:	2100      	movs	r1, #0
    b6e0:	4620      	mov	r0, r4
    b6e2:	f7fe f915 	bl	9910 <mp_getiter>
    b6e6:	4607      	mov	r7, r0
    size_t i = 0;
    b6e8:	2400      	movs	r4, #0
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    b6ea:	e022      	b.n	b732 <array_construct+0x9a>
        size_t sz = mp_binary_get_size('@', typecode, NULL);
    b6ec:	2200      	movs	r2, #0
    b6ee:	4641      	mov	r1, r8
    b6f0:	2040      	movs	r0, #64	; 0x40
    b6f2:	f007 fc6b 	bl	12fcc <mp_binary_get_size>
    b6f6:	4605      	mov	r5, r0
        size_t len = bufinfo.len / sz;
    b6f8:	9c02      	ldr	r4, [sp, #8]
    b6fa:	fbb4 f4f0 	udiv	r4, r4, r0
        mp_obj_array_t *o = array_new(typecode, len);
    b6fe:	4621      	mov	r1, r4
    b700:	4640      	mov	r0, r8
    b702:	f7ff fef9 	bl	b4f8 <array_new>
    b706:	4606      	mov	r6, r0
        memcpy(o->items, bufinfo.buf, len * sz);
    b708:	fb04 f205 	mul.w	r2, r4, r5
    b70c:	9901      	ldr	r1, [sp, #4]
    b70e:	68c0      	ldr	r0, [r0, #12]
    b710:	f010 f870 	bl	1b7f4 <memcpy>
}
    b714:	4630      	mov	r0, r6
    b716:	b005      	add	sp, #20
    b718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        len = 0;
    b71c:	2500      	movs	r5, #0
    b71e:	e7d9      	b.n	b6d4 <array_construct+0x3c>
            mp_binary_set_val_array(typecode, array->items, i++, item);
    b720:	f104 0901 	add.w	r9, r4, #1
    b724:	4603      	mov	r3, r0
    b726:	4622      	mov	r2, r4
    b728:	68f1      	ldr	r1, [r6, #12]
    b72a:	4640      	mov	r0, r8
    b72c:	f007 ff46 	bl	135bc <mp_binary_set_val_array>
    b730:	464c      	mov	r4, r9
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    b732:	4638      	mov	r0, r7
    b734:	f7fe f95a 	bl	99ec <mp_iternext>
    b738:	2804      	cmp	r0, #4
    b73a:	d0eb      	beq.n	b714 <array_construct+0x7c>
        if (len == 0) {
    b73c:	2d00      	cmp	r5, #0
    b73e:	d1ef      	bne.n	b720 <array_construct+0x88>
            array_append(MP_OBJ_FROM_PTR(array), item);
    b740:	4601      	mov	r1, r0
    b742:	4630      	mov	r0, r6
    b744:	f7ff fe4e 	bl	b3e4 <array_append>
    b748:	e7f3      	b.n	b732 <array_construct+0x9a>
    b74a:	bf00      	nop
    b74c:	000280c8 	.word	0x000280c8
    b750:	00025ec4 	.word	0x00025ec4

0000b754 <array_make_new>:
STATIC mp_obj_t array_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    b754:	b530      	push	{r4, r5, lr}
    b756:	b083      	sub	sp, #12
    b758:	460c      	mov	r4, r1
    b75a:	4611      	mov	r1, r2
    b75c:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 1, 2, false);
    b75e:	2300      	movs	r3, #0
    b760:	9300      	str	r3, [sp, #0]
    b762:	2302      	movs	r3, #2
    b764:	2201      	movs	r2, #1
    b766:	4620      	mov	r0, r4
    b768:	f7fe ffd6 	bl	a718 <mp_arg_check_num>
    const char *typecode = mp_obj_str_get_str(args[0]);
    b76c:	6828      	ldr	r0, [r5, #0]
    b76e:	f004 fd6d 	bl	1024c <mp_obj_str_get_str>
    if (n_args == 1) {
    b772:	2c01      	cmp	r4, #1
    b774:	d005      	beq.n	b782 <array_make_new+0x2e>
        return array_construct(*typecode, args[1]);
    b776:	6869      	ldr	r1, [r5, #4]
    b778:	7800      	ldrb	r0, [r0, #0]
    b77a:	f7ff ff8d 	bl	b698 <array_construct>
}
    b77e:	b003      	add	sp, #12
    b780:	bd30      	pop	{r4, r5, pc}
        return MP_OBJ_FROM_PTR(array_new(*typecode, 0));
    b782:	2100      	movs	r1, #0
    b784:	7800      	ldrb	r0, [r0, #0]
    b786:	f7ff feb7 	bl	b4f8 <array_new>
    b78a:	e7f8      	b.n	b77e <array_make_new+0x2a>

0000b78c <array_print>:
STATIC void array_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    b78c:	b570      	push	{r4, r5, r6, lr}
    b78e:	4606      	mov	r6, r0
    b790:	460c      	mov	r4, r1
    if (o->typecode == BYTEARRAY_TYPECODE) {
    b792:	790a      	ldrb	r2, [r1, #4]
    b794:	2a01      	cmp	r2, #1
    b796:	d009      	beq.n	b7ac <array_print+0x20>
        mp_printf(print, "array('%c'", o->typecode);
    b798:	4919      	ldr	r1, [pc, #100]	; (b800 <array_print+0x74>)
    b79a:	f7f6 fc67 	bl	206c <mp_printf>
        if (o->len > 0) {
    b79e:	68a3      	ldr	r3, [r4, #8]
    b7a0:	b973      	cbnz	r3, b7c0 <array_print+0x34>
    mp_print_str(print, ")");
    b7a2:	4918      	ldr	r1, [pc, #96]	; (b804 <array_print+0x78>)
    b7a4:	4630      	mov	r0, r6
    b7a6:	f7f6 f8ca 	bl	193e <mp_print_str>
}
    b7aa:	bd70      	pop	{r4, r5, r6, pc}
        mp_print_str(print, "bytearray(b");
    b7ac:	4916      	ldr	r1, [pc, #88]	; (b808 <array_print+0x7c>)
    b7ae:	f7f6 f8c6 	bl	193e <mp_print_str>
        mp_str_print_quoted(print, o->items, o->len, true);
    b7b2:	2301      	movs	r3, #1
    b7b4:	68a2      	ldr	r2, [r4, #8]
    b7b6:	68e1      	ldr	r1, [r4, #12]
    b7b8:	4630      	mov	r0, r6
    b7ba:	f003 fe3b 	bl	f434 <mp_str_print_quoted>
    b7be:	e7f0      	b.n	b7a2 <array_print+0x16>
            mp_print_str(print, ", [");
    b7c0:	4912      	ldr	r1, [pc, #72]	; (b80c <array_print+0x80>)
    b7c2:	4630      	mov	r0, r6
    b7c4:	f7f6 f8bb 	bl	193e <mp_print_str>
            for (size_t i = 0; i < o->len; i++) {
    b7c8:	2500      	movs	r5, #0
    b7ca:	e00a      	b.n	b7e2 <array_print+0x56>
                mp_obj_print_helper(print, mp_binary_get_val_array(o->typecode, o->items, i), PRINT_REPR);
    b7cc:	462a      	mov	r2, r5
    b7ce:	68e1      	ldr	r1, [r4, #12]
    b7d0:	7920      	ldrb	r0, [r4, #4]
    b7d2:	f007 fcc9 	bl	13168 <mp_binary_get_val_array>
    b7d6:	2201      	movs	r2, #1
    b7d8:	4601      	mov	r1, r0
    b7da:	4630      	mov	r0, r6
    b7dc:	f7ff f9f0 	bl	abc0 <mp_obj_print_helper>
            for (size_t i = 0; i < o->len; i++) {
    b7e0:	3501      	adds	r5, #1
    b7e2:	68a3      	ldr	r3, [r4, #8]
    b7e4:	42ab      	cmp	r3, r5
    b7e6:	d906      	bls.n	b7f6 <array_print+0x6a>
                if (i > 0) {
    b7e8:	2d00      	cmp	r5, #0
    b7ea:	d0ef      	beq.n	b7cc <array_print+0x40>
                    mp_print_str(print, ", ");
    b7ec:	4908      	ldr	r1, [pc, #32]	; (b810 <array_print+0x84>)
    b7ee:	4630      	mov	r0, r6
    b7f0:	f7f6 f8a5 	bl	193e <mp_print_str>
    b7f4:	e7ea      	b.n	b7cc <array_print+0x40>
            mp_print_str(print, "]");
    b7f6:	4907      	ldr	r1, [pc, #28]	; (b814 <array_print+0x88>)
    b7f8:	4630      	mov	r0, r6
    b7fa:	f7f6 f8a0 	bl	193e <mp_print_str>
    b7fe:	e7d0      	b.n	b7a2 <array_print+0x16>
    b800:	00025e70 	.word	0x00025e70
    b804:	000272a0 	.word	0x000272a0
    b808:	00025e64 	.word	0x00025e64
    b80c:	00025e7c 	.word	0x00025e7c
    b810:	00025e80 	.word	0x00025e80
    b814:	00025e84 	.word	0x00025e84

0000b818 <bytearray_make_new>:
STATIC mp_obj_t bytearray_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    b818:	b530      	push	{r4, r5, lr}
    b81a:	b083      	sub	sp, #12
    b81c:	460c      	mov	r4, r1
    b81e:	4611      	mov	r1, r2
    b820:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    b822:	2200      	movs	r2, #0
    b824:	9200      	str	r2, [sp, #0]
    b826:	2301      	movs	r3, #1
    b828:	4620      	mov	r0, r4
    b82a:	f7fe ff75 	bl	a718 <mp_arg_check_num>
    if (n_args == 0) {
    b82e:	b18c      	cbz	r4, b854 <bytearray_make_new+0x3c>
    } else if (MP_OBJ_IS_INT(args[0])) {
    b830:	6829      	ldr	r1, [r5, #0]
    b832:	f011 0f01 	tst.w	r1, #1
    b836:	d113      	bne.n	b860 <bytearray_make_new+0x48>
    b838:	f011 0f03 	tst.w	r1, #3
    b83c:	d103      	bne.n	b846 <bytearray_make_new+0x2e>
    b83e:	680a      	ldr	r2, [r1, #0]
    b840:	4b0f      	ldr	r3, [pc, #60]	; (b880 <bytearray_make_new+0x68>)
    b842:	429a      	cmp	r2, r3
    b844:	d00c      	beq.n	b860 <bytearray_make_new+0x48>
        return array_construct(BYTEARRAY_TYPECODE, args[0]);
    b846:	2001      	movs	r0, #1
    b848:	f7ff ff26 	bl	b698 <array_construct>
    b84c:	4604      	mov	r4, r0
}
    b84e:	4620      	mov	r0, r4
    b850:	b003      	add	sp, #12
    b852:	bd30      	pop	{r4, r5, pc}
        return MP_OBJ_FROM_PTR(array_new(BYTEARRAY_TYPECODE, 0));
    b854:	2100      	movs	r1, #0
    b856:	2001      	movs	r0, #1
    b858:	f7ff fe4e 	bl	b4f8 <array_new>
    b85c:	4604      	mov	r4, r0
    b85e:	e7f6      	b.n	b84e <bytearray_make_new+0x36>
        mp_uint_t len = mp_obj_get_int(args[0]);
    b860:	4608      	mov	r0, r1
    b862:	f7ff fab3 	bl	adcc <mp_obj_get_int>
    b866:	4605      	mov	r5, r0
        mp_obj_array_t *o = array_new(BYTEARRAY_TYPECODE, len);
    b868:	4601      	mov	r1, r0
    b86a:	2001      	movs	r0, #1
    b86c:	f7ff fe44 	bl	b4f8 <array_new>
    b870:	4604      	mov	r4, r0
        memset(o->items, 0, len);
    b872:	462a      	mov	r2, r5
    b874:	2100      	movs	r1, #0
    b876:	68c0      	ldr	r0, [r0, #12]
    b878:	f010 f800 	bl	1b87c <memset>
        return MP_OBJ_FROM_PTR(o);
    b87c:	e7e7      	b.n	b84e <bytearray_make_new+0x36>
    b87e:	bf00      	nop
    b880:	00027498 	.word	0x00027498

0000b884 <mp_obj_new_bytearray>:
mp_obj_t mp_obj_new_bytearray(size_t n, void *items) {
    b884:	b570      	push	{r4, r5, r6, lr}
    b886:	4605      	mov	r5, r0
    b888:	460e      	mov	r6, r1
    mp_obj_array_t *o = array_new(BYTEARRAY_TYPECODE, n);
    b88a:	4601      	mov	r1, r0
    b88c:	2001      	movs	r0, #1
    b88e:	f7ff fe33 	bl	b4f8 <array_new>
    b892:	4604      	mov	r4, r0
    memcpy(o->items, items, n);
    b894:	462a      	mov	r2, r5
    b896:	4631      	mov	r1, r6
    b898:	68c0      	ldr	r0, [r0, #12]
    b89a:	f00f ffab 	bl	1b7f4 <memcpy>
}
    b89e:	4620      	mov	r0, r4
    b8a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b8a4 <mp_obj_new_bytearray_by_ref>:
mp_obj_t mp_obj_new_bytearray_by_ref(size_t n, void *items) {
    b8a4:	b538      	push	{r3, r4, r5, lr}
    b8a6:	4605      	mov	r5, r0
    b8a8:	460c      	mov	r4, r1
    mp_obj_array_t *o = m_new_obj(mp_obj_array_t);
    b8aa:	2010      	movs	r0, #16
    b8ac:	f7f5 f806 	bl	8bc <m_malloc>
    o->base.type = &mp_type_bytearray;
    b8b0:	4a05      	ldr	r2, [pc, #20]	; (b8c8 <mp_obj_new_bytearray_by_ref+0x24>)
    b8b2:	6002      	str	r2, [r0, #0]
    o->typecode = BYTEARRAY_TYPECODE;
    b8b4:	2201      	movs	r2, #1
    b8b6:	7102      	strb	r2, [r0, #4]
    o->free = 0;
    b8b8:	6842      	ldr	r2, [r0, #4]
    b8ba:	f36f 221f 	bfc	r2, #8, #24
    b8be:	6042      	str	r2, [r0, #4]
    o->len = n;
    b8c0:	6085      	str	r5, [r0, #8]
    o->items = items;
    b8c2:	60c4      	str	r4, [r0, #12]
}
    b8c4:	bd38      	pop	{r3, r4, r5, pc}
    b8c6:	bf00      	nop
    b8c8:	00025ec4 	.word	0x00025ec4

0000b8cc <mp_obj_attrtuple_attr>:
    const qstr *fields = (const qstr*)MP_OBJ_TO_PTR(o->items[o->len]);
    mp_obj_attrtuple_print_helper(print, fields, o);
}

STATIC void mp_obj_attrtuple_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    if (dest[0] == MP_OBJ_NULL) {
    b8cc:	6813      	ldr	r3, [r2, #0]
    b8ce:	b103      	cbz	r3, b8d2 <mp_obj_attrtuple_attr+0x6>
    b8d0:	4770      	bx	lr
STATIC void mp_obj_attrtuple_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    b8d2:	b470      	push	{r4, r5, r6}
        // load attribute
        mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
        size_t len = self->len;
    b8d4:	6845      	ldr	r5, [r0, #4]
        const qstr *fields = (const qstr*)MP_OBJ_TO_PTR(self->items[len]);
    b8d6:	1cab      	adds	r3, r5, #2
    b8d8:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
        for (size_t i = 0; i < len; i++) {
    b8dc:	2300      	movs	r3, #0
    b8de:	42ab      	cmp	r3, r5
    b8e0:	d209      	bcs.n	b8f6 <mp_obj_attrtuple_attr+0x2a>
            if (fields[i] == attr) {
    b8e2:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
    b8e6:	428c      	cmp	r4, r1
    b8e8:	d001      	beq.n	b8ee <mp_obj_attrtuple_attr+0x22>
        for (size_t i = 0; i < len; i++) {
    b8ea:	3301      	adds	r3, #1
    b8ec:	e7f7      	b.n	b8de <mp_obj_attrtuple_attr+0x12>
                dest[0] = self->items[i];
    b8ee:	3302      	adds	r3, #2
    b8f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    b8f4:	6013      	str	r3, [r2, #0]
                return;
            }
        }
    }
}
    b8f6:	bc70      	pop	{r4, r5, r6}
    b8f8:	4770      	bx	lr
	...

0000b8fc <mp_obj_attrtuple_print_helper>:
void mp_obj_attrtuple_print_helper(const mp_print_t *print, const qstr *fields, mp_obj_tuple_t *o) {
    b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8fe:	4605      	mov	r5, r0
    b900:	460f      	mov	r7, r1
    b902:	4616      	mov	r6, r2
    mp_print_str(print, "(");
    b904:	4910      	ldr	r1, [pc, #64]	; (b948 <mp_obj_attrtuple_print_helper+0x4c>)
    b906:	f7f6 f81a 	bl	193e <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
    b90a:	2400      	movs	r4, #0
    b90c:	e00d      	b.n	b92a <mp_obj_attrtuple_print_helper+0x2e>
        mp_printf(print, "%q=", fields[i]);
    b90e:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    b912:	490e      	ldr	r1, [pc, #56]	; (b94c <mp_obj_attrtuple_print_helper+0x50>)
    b914:	4628      	mov	r0, r5
    b916:	f7f6 fba9 	bl	206c <mp_printf>
        mp_obj_print_helper(print, o->items[i], PRINT_REPR);
    b91a:	1ca3      	adds	r3, r4, #2
    b91c:	2201      	movs	r2, #1
    b91e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    b922:	4628      	mov	r0, r5
    b924:	f7ff f94c 	bl	abc0 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
    b928:	3401      	adds	r4, #1
    b92a:	6873      	ldr	r3, [r6, #4]
    b92c:	42a3      	cmp	r3, r4
    b92e:	d906      	bls.n	b93e <mp_obj_attrtuple_print_helper+0x42>
        if (i > 0) {
    b930:	2c00      	cmp	r4, #0
    b932:	d0ec      	beq.n	b90e <mp_obj_attrtuple_print_helper+0x12>
            mp_print_str(print, ", ");
    b934:	4906      	ldr	r1, [pc, #24]	; (b950 <mp_obj_attrtuple_print_helper+0x54>)
    b936:	4628      	mov	r0, r5
    b938:	f7f6 f801 	bl	193e <mp_print_str>
    b93c:	e7e7      	b.n	b90e <mp_obj_attrtuple_print_helper+0x12>
    mp_print_str(print, ")");
    b93e:	4905      	ldr	r1, [pc, #20]	; (b954 <mp_obj_attrtuple_print_helper+0x58>)
    b940:	4628      	mov	r0, r5
    b942:	f7f5 fffc 	bl	193e <mp_print_str>
}
    b946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b948:	00025f00 	.word	0x00025f00
    b94c:	00025f04 	.word	0x00025f04
    b950:	00025e80 	.word	0x00025e80
    b954:	000272a0 	.word	0x000272a0

0000b958 <mp_obj_attrtuple_print>:
STATIC void mp_obj_attrtuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    b958:	b508      	push	{r3, lr}
    const qstr *fields = (const qstr*)MP_OBJ_TO_PTR(o->items[o->len]);
    b95a:	684b      	ldr	r3, [r1, #4]
    b95c:	3302      	adds	r3, #2
    mp_obj_attrtuple_print_helper(print, fields, o);
    b95e:	460a      	mov	r2, r1
    b960:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    b964:	f7ff ffca 	bl	b8fc <mp_obj_attrtuple_print_helper>
}
    b968:	bd08      	pop	{r3, pc}

0000b96a <bool_binary_op>:
    }
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(o_in);
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
}

STATIC mp_obj_t bool_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    b96a:	b508      	push	{r3, lr}
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(lhs_in);
    return mp_binary_op(op, MP_OBJ_NEW_SMALL_INT(self->value), rhs_in);
    b96c:	7909      	ldrb	r1, [r1, #4]
    b96e:	0049      	lsls	r1, r1, #1
    b970:	f041 0101 	orr.w	r1, r1, #1
    b974:	f7fe fca0 	bl	a2b8 <mp_binary_op>
}
    b978:	bd08      	pop	{r3, pc}

0000b97a <bool_unary_op>:
    if (op == MP_UNARY_OP_LEN) {
    b97a:	2805      	cmp	r0, #5
    b97c:	d007      	beq.n	b98e <bool_unary_op+0x14>
STATIC mp_obj_t bool_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    b97e:	b508      	push	{r3, lr}
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
    b980:	7909      	ldrb	r1, [r1, #4]
    b982:	0049      	lsls	r1, r1, #1
    b984:	f041 0101 	orr.w	r1, r1, #1
    b988:	f7fd fddc 	bl	9544 <mp_unary_op>
}
    b98c:	bd08      	pop	{r3, pc}
        return MP_OBJ_NULL;
    b98e:	2000      	movs	r0, #0
}
    b990:	4770      	bx	lr
	...

0000b994 <bool_make_new>:
STATIC mp_obj_t bool_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    b994:	b530      	push	{r4, r5, lr}
    b996:	b083      	sub	sp, #12
    b998:	460c      	mov	r4, r1
    b99a:	4611      	mov	r1, r2
    b99c:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    b99e:	2200      	movs	r2, #0
    b9a0:	9200      	str	r2, [sp, #0]
    b9a2:	2301      	movs	r3, #1
    b9a4:	4620      	mov	r0, r4
    b9a6:	f7fe feb7 	bl	a718 <mp_arg_check_num>
    if (n_args == 0) {
    b9aa:	b914      	cbnz	r4, b9b2 <bool_make_new+0x1e>
        return mp_const_false;
    b9ac:	4805      	ldr	r0, [pc, #20]	; (b9c4 <bool_make_new+0x30>)
}
    b9ae:	b003      	add	sp, #12
    b9b0:	bd30      	pop	{r4, r5, pc}
        return mp_obj_new_bool(mp_obj_is_true(args[0]));
    b9b2:	6828      	ldr	r0, [r5, #0]
    b9b4:	f7ff fbe2 	bl	b17c <mp_obj_is_true>
    b9b8:	b908      	cbnz	r0, b9be <bool_make_new+0x2a>
    b9ba:	4802      	ldr	r0, [pc, #8]	; (b9c4 <bool_make_new+0x30>)
    b9bc:	e7f7      	b.n	b9ae <bool_make_new+0x1a>
    b9be:	4802      	ldr	r0, [pc, #8]	; (b9c8 <bool_make_new+0x34>)
    b9c0:	e7f5      	b.n	b9ae <bool_make_new+0x1a>
    b9c2:	bf00      	nop
    b9c4:	00025f44 	.word	0x00025f44
    b9c8:	00025f4c 	.word	0x00025f4c

0000b9cc <bool_print>:
STATIC void bool_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    b9cc:	b508      	push	{r3, lr}
        if (self->value) {
    b9ce:	790b      	ldrb	r3, [r1, #4]
    b9d0:	b91b      	cbnz	r3, b9da <bool_print+0xe>
            mp_print_str(print, "False");
    b9d2:	4904      	ldr	r1, [pc, #16]	; (b9e4 <bool_print+0x18>)
    b9d4:	f7f5 ffb3 	bl	193e <mp_print_str>
}
    b9d8:	bd08      	pop	{r3, pc}
            mp_print_str(print, "True");
    b9da:	4903      	ldr	r1, [pc, #12]	; (b9e8 <bool_print+0x1c>)
    b9dc:	f7f5 ffaf 	bl	193e <mp_print_str>
    b9e0:	e7fa      	b.n	b9d8 <bool_print+0xc>
    b9e2:	bf00      	nop
    b9e4:	000238e8 	.word	0x000238e8
    b9e8:	000238f8 	.word	0x000238f8

0000b9ec <mp_call_method_self_n_kw>:
    mp_obj_print_helper(print, o->meth, PRINT_REPR);
    mp_print_str(print, ">");
}
#endif

mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    b9ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9f0:	af00      	add	r7, sp, #0
    b9f2:	4681      	mov	r9, r0
    b9f4:	468a      	mov	sl, r1
    b9f6:	4615      	mov	r5, r2
    b9f8:	461e      	mov	r6, r3
    // need to insert self before all other args and then call meth
    size_t n_total = n_args + 2 * n_kw;
    b9fa:	eb02 0443 	add.w	r4, r2, r3, lsl #1
    mp_obj_t *args2 = NULL;
    #if MICROPY_ENABLE_PYSTACK
    args2 = mp_pystack_alloc(sizeof(mp_obj_t) * (1 + n_total));
    #else
    mp_obj_t *free_args2 = NULL;
    if (n_total > 4) {
    b9fe:	2c04      	cmp	r4, #4
    ba00:	d821      	bhi.n	ba46 <mp_call_method_self_n_kw+0x5a>
    mp_obj_t *free_args2 = NULL;
    ba02:	f04f 0800 	mov.w	r8, #0
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
        free_args2 = args2;
    }
    if (args2 == NULL) {
        // (fallback to) use stack to allocate temporary args array
        args2 = alloca(sizeof(mp_obj_t) * (1 + n_total));
    ba06:	1c63      	adds	r3, r4, #1
    ba08:	009b      	lsls	r3, r3, #2
    ba0a:	330e      	adds	r3, #14
    ba0c:	f023 0307 	bic.w	r3, r3, #7
    ba10:	ebad 0d03 	sub.w	sp, sp, r3
    ba14:	46eb      	mov	fp, sp
    }
    #endif
    args2[0] = self;
    ba16:	4658      	mov	r0, fp
    ba18:	f840 ab04 	str.w	sl, [r0], #4
    memcpy(args2 + 1, args, n_total * sizeof(mp_obj_t));
    ba1c:	00a2      	lsls	r2, r4, #2
    ba1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ba20:	f00f fee8 	bl	1b7f4 <memcpy>
    mp_obj_t res = mp_call_function_n_kw(meth, n_args + 1, n_kw, args2);
    ba24:	465b      	mov	r3, fp
    ba26:	4632      	mov	r2, r6
    ba28:	1c69      	adds	r1, r5, #1
    ba2a:	4648      	mov	r0, r9
    ba2c:	f7fd fe2a 	bl	9684 <mp_call_function_n_kw>
    ba30:	4604      	mov	r4, r0
    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(args2);
    #else
    if (free_args2 != NULL) {
    ba32:	f1b8 0f00 	cmp.w	r8, #0
    ba36:	d002      	beq.n	ba3e <mp_call_method_self_n_kw+0x52>
        m_del(mp_obj_t, free_args2, 1 + n_total);
    ba38:	4640      	mov	r0, r8
    ba3a:	f7f4 ff68 	bl	90e <m_free>
    }
    #endif
    return res;
}
    ba3e:	4620      	mov	r0, r4
    ba40:	46bd      	mov	sp, r7
    ba42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
    ba46:	1c60      	adds	r0, r4, #1
    ba48:	0080      	lsls	r0, r0, #2
    ba4a:	f7f4 ff45 	bl	8d8 <m_malloc_maybe>
    if (args2 == NULL) {
    ba4e:	4683      	mov	fp, r0
    ba50:	b108      	cbz	r0, ba56 <mp_call_method_self_n_kw+0x6a>
        free_args2 = args2;
    ba52:	4680      	mov	r8, r0
    ba54:	e7df      	b.n	ba16 <mp_call_method_self_n_kw+0x2a>
    ba56:	4680      	mov	r8, r0
    ba58:	e7d5      	b.n	ba06 <mp_call_method_self_n_kw+0x1a>

0000ba5a <bound_meth_call>:

STATIC mp_obj_t bound_meth_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ba5a:	b510      	push	{r4, lr}
    ba5c:	b082      	sub	sp, #8
    mp_obj_bound_meth_t *self = MP_OBJ_TO_PTR(self_in);
    return mp_call_method_self_n_kw(self->meth, self->self, n_args, n_kw, args);
    ba5e:	6884      	ldr	r4, [r0, #8]
    ba60:	6840      	ldr	r0, [r0, #4]
    ba62:	9300      	str	r3, [sp, #0]
    ba64:	4613      	mov	r3, r2
    ba66:	460a      	mov	r2, r1
    ba68:	4621      	mov	r1, r4
    ba6a:	f7ff ffbf 	bl	b9ec <mp_call_method_self_n_kw>
}
    ba6e:	b002      	add	sp, #8
    ba70:	bd10      	pop	{r4, pc}
	...

0000ba74 <mp_obj_new_bound_meth>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = bound_meth_attr,
#endif
};

mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self) {
    ba74:	b538      	push	{r3, r4, r5, lr}
    ba76:	4605      	mov	r5, r0
    ba78:	460c      	mov	r4, r1
    mp_obj_bound_meth_t *o = m_new_obj(mp_obj_bound_meth_t);
    ba7a:	200c      	movs	r0, #12
    ba7c:	f7f4 ff1e 	bl	8bc <m_malloc>
    o->base.type = &mp_type_bound_meth;
    ba80:	4a02      	ldr	r2, [pc, #8]	; (ba8c <mp_obj_new_bound_meth+0x18>)
    ba82:	6002      	str	r2, [r0, #0]
    o->meth = meth;
    ba84:	6045      	str	r5, [r0, #4]
    o->self = self;
    ba86:	6084      	str	r4, [r0, #8]
    return MP_OBJ_FROM_PTR(o);
}
    ba88:	bd38      	pop	{r3, r4, r5, pc}
    ba8a:	bf00      	nop
    ba8c:	00025f90 	.word	0x00025f90

0000ba90 <mp_obj_cell_get>:
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    return self->obj;
}
    ba90:	6840      	ldr	r0, [r0, #4]
    ba92:	4770      	bx	lr

0000ba94 <mp_obj_cell_set>:

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    self->obj = obj;
    ba94:	6041      	str	r1, [r0, #4]
}
    ba96:	4770      	bx	lr

0000ba98 <mp_obj_new_cell>:
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_DETAILED
    .print = cell_print,
#endif
};

mp_obj_t mp_obj_new_cell(mp_obj_t obj) {
    ba98:	b510      	push	{r4, lr}
    ba9a:	4604      	mov	r4, r0
    mp_obj_cell_t *o = m_new_obj(mp_obj_cell_t);
    ba9c:	2008      	movs	r0, #8
    ba9e:	f7f4 ff0d 	bl	8bc <m_malloc>
    o->base.type = &mp_type_cell;
    baa2:	4a02      	ldr	r2, [pc, #8]	; (baac <mp_obj_new_cell+0x14>)
    baa4:	6002      	str	r2, [r0, #0]
    o->obj = obj;
    baa6:	6044      	str	r4, [r0, #4]
    return MP_OBJ_FROM_PTR(o);
}
    baa8:	bd10      	pop	{r4, pc}
    baaa:	bf00      	nop
    baac:	00025fcc 	.word	0x00025fcc

0000bab0 <closure_call>:
    mp_obj_t fun;
    size_t n_closed;
    mp_obj_t closed[];
} mp_obj_closure_t;

STATIC mp_obj_t closure_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    bab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bab4:	b087      	sub	sp, #28
    bab6:	4604      	mov	r4, r0
    bab8:	460e      	mov	r6, r1
    baba:	4617      	mov	r7, r2
    babc:	4698      	mov	r8, r3
    mp_obj_closure_t *self = MP_OBJ_TO_PTR(self_in);

    // need to concatenate closed-over-vars and args

    size_t n_total = self->n_closed + n_args + 2 * n_kw;
    babe:	6882      	ldr	r2, [r0, #8]
    bac0:	1850      	adds	r0, r2, r1
    bac2:	007d      	lsls	r5, r7, #1
    bac4:	4428      	add	r0, r5
    if (n_total <= 5) {
    bac6:	2805      	cmp	r0, #5
    bac8:	d920      	bls.n	bb0c <closure_call+0x5c>
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    } else {
        // use heap to allocate temporary args array
        mp_obj_t *args2 = m_new(mp_obj_t, n_total);
    baca:	0080      	lsls	r0, r0, #2
    bacc:	f7f4 fef6 	bl	8bc <m_malloc>
    bad0:	4681      	mov	r9, r0
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    bad2:	68a2      	ldr	r2, [r4, #8]
    bad4:	0092      	lsls	r2, r2, #2
    bad6:	f104 010c 	add.w	r1, r4, #12
    bada:	f00f fe8b 	bl	1b7f4 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    bade:	68a0      	ldr	r0, [r4, #8]
    bae0:	19aa      	adds	r2, r5, r6
    bae2:	0092      	lsls	r2, r2, #2
    bae4:	4641      	mov	r1, r8
    bae6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    baea:	f00f fe83 	bl	1b7f4 <memcpy>
        mp_obj_t res = mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    baee:	68a1      	ldr	r1, [r4, #8]
    baf0:	464b      	mov	r3, r9
    baf2:	463a      	mov	r2, r7
    baf4:	4431      	add	r1, r6
    baf6:	6860      	ldr	r0, [r4, #4]
    baf8:	f7fd fdc4 	bl	9684 <mp_call_function_n_kw>
    bafc:	4604      	mov	r4, r0
        m_del(mp_obj_t, args2, n_total);
    bafe:	4648      	mov	r0, r9
    bb00:	f7f4 ff05 	bl	90e <m_free>
        return res;
    }
}
    bb04:	4620      	mov	r0, r4
    bb06:	b007      	add	sp, #28
    bb08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    bb0c:	0092      	lsls	r2, r2, #2
    bb0e:	f104 010c 	add.w	r1, r4, #12
    bb12:	a801      	add	r0, sp, #4
    bb14:	f00f fe6e 	bl	1b7f4 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    bb18:	68a0      	ldr	r0, [r4, #8]
    bb1a:	19aa      	adds	r2, r5, r6
    bb1c:	0092      	lsls	r2, r2, #2
    bb1e:	4641      	mov	r1, r8
    bb20:	ab01      	add	r3, sp, #4
    bb22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    bb26:	f00f fe65 	bl	1b7f4 <memcpy>
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    bb2a:	68a1      	ldr	r1, [r4, #8]
    bb2c:	ab01      	add	r3, sp, #4
    bb2e:	463a      	mov	r2, r7
    bb30:	4431      	add	r1, r6
    bb32:	6860      	ldr	r0, [r4, #4]
    bb34:	f7fd fda6 	bl	9684 <mp_call_function_n_kw>
    bb38:	4604      	mov	r4, r0
    bb3a:	e7e3      	b.n	bb04 <closure_call+0x54>

0000bb3c <mp_obj_new_closure>:
    .print = closure_print,
#endif
    .call = closure_call,
};

mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed_over, const mp_obj_t *closed) {
    bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb3e:	4607      	mov	r7, r0
    bb40:	460d      	mov	r5, r1
    bb42:	4616      	mov	r6, r2
    mp_obj_closure_t *o = m_new_obj_var(mp_obj_closure_t, mp_obj_t, n_closed_over);
    bb44:	1cc8      	adds	r0, r1, #3
    bb46:	0080      	lsls	r0, r0, #2
    bb48:	f7f4 feb8 	bl	8bc <m_malloc>
    bb4c:	4604      	mov	r4, r0
    o->base.type = &closure_type;
    bb4e:	4b05      	ldr	r3, [pc, #20]	; (bb64 <mp_obj_new_closure+0x28>)
    bb50:	6003      	str	r3, [r0, #0]
    o->fun = fun;
    bb52:	6047      	str	r7, [r0, #4]
    o->n_closed = n_closed_over;
    bb54:	6085      	str	r5, [r0, #8]
    memcpy(o->closed, closed, n_closed_over * sizeof(mp_obj_t));
    bb56:	00aa      	lsls	r2, r5, #2
    bb58:	4631      	mov	r1, r6
    bb5a:	300c      	adds	r0, #12
    bb5c:	f00f fe4a 	bl	1b7f4 <memcpy>
    return MP_OBJ_FROM_PTR(o);
}
    bb60:	4620      	mov	r0, r4
    bb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb64:	00026008 	.word	0x00026008

0000bb68 <complex_attr>:
    mp_obj_complex_t *lhs = MP_OBJ_TO_PTR(lhs_in);
    return mp_obj_complex_binary_op(op, lhs->real, lhs->imag, rhs_in);
}

STATIC void complex_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    if (dest[0] != MP_OBJ_NULL) {
    bb68:	6813      	ldr	r3, [r2, #0]
    bb6a:	b103      	cbz	r3, bb6e <complex_attr+0x6>
    bb6c:	4770      	bx	lr
STATIC void complex_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    bb6e:	b510      	push	{r4, lr}
    bb70:	4614      	mov	r4, r2
        // not load attribute
        return;
    }
    mp_obj_complex_t *self = MP_OBJ_TO_PTR(self_in);
    if (attr == MP_QSTR_real) {
    bb72:	f240 231e 	movw	r3, #542	; 0x21e
    bb76:	4299      	cmp	r1, r3
    bb78:	d003      	beq.n	bb82 <complex_attr+0x1a>
        dest[0] = mp_obj_new_float(self->real);
    } else if (attr == MP_QSTR_imag) {
    bb7a:	f5b1 7fde 	cmp.w	r1, #444	; 0x1bc
    bb7e:	d006      	beq.n	bb8e <complex_attr+0x26>
        dest[0] = mp_obj_new_float(self->imag);
    }
}
    bb80:	bd10      	pop	{r4, pc}
        dest[0] = mp_obj_new_float(self->real);
    bb82:	ed90 0a01 	vldr	s0, [r0, #4]
    bb86:	f001 f939 	bl	cdfc <mp_obj_new_float>
    bb8a:	6020      	str	r0, [r4, #0]
    bb8c:	e7f8      	b.n	bb80 <complex_attr+0x18>
        dest[0] = mp_obj_new_float(self->imag);
    bb8e:	ed90 0a02 	vldr	s0, [r0, #8]
    bb92:	f001 f933 	bl	cdfc <mp_obj_new_float>
    bb96:	6020      	str	r0, [r4, #0]
    bb98:	e7f2      	b.n	bb80 <complex_attr+0x18>
	...

0000bb9c <complex_print>:
STATIC void complex_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    bb9c:	b530      	push	{r4, r5, lr}
    bb9e:	b087      	sub	sp, #28
    bba0:	4605      	mov	r5, r0
    bba2:	460c      	mov	r4, r1
    if (o->real == 0) {
    bba4:	ed91 0a01 	vldr	s0, [r1, #4]
    bba8:	eeb5 0a40 	vcmp.f32	s0, #0.0
    bbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bbb0:	d02d      	beq.n	bc0e <complex_print+0x72>
        mp_format_float(o->real, buf, sizeof(buf), 'g', precision, '\0');
    bbb2:	2300      	movs	r3, #0
    bbb4:	9300      	str	r3, [sp, #0]
    bbb6:	2307      	movs	r3, #7
    bbb8:	2267      	movs	r2, #103	; 0x67
    bbba:	2110      	movs	r1, #16
    bbbc:	a802      	add	r0, sp, #8
    bbbe:	f7fc ff2b 	bl	8a18 <mp_format_float>
        mp_printf(print, "(%s", buf);
    bbc2:	aa02      	add	r2, sp, #8
    bbc4:	491a      	ldr	r1, [pc, #104]	; (bc30 <complex_print+0x94>)
    bbc6:	4628      	mov	r0, r5
    bbc8:	f7f6 fa50 	bl	206c <mp_printf>
        if (o->imag >= 0 || isnan(o->imag)) {
    bbcc:	edd4 7a02 	vldr	s15, [r4, #8]
    bbd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bbd8:	da04      	bge.n	bbe4 <complex_print+0x48>
    bbda:	eef4 7a67 	vcmp.f32	s15, s15
    bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bbe2:	d703      	bvc.n	bbec <complex_print+0x50>
            mp_print_str(print, "+");
    bbe4:	4913      	ldr	r1, [pc, #76]	; (bc34 <complex_print+0x98>)
    bbe6:	4628      	mov	r0, r5
    bbe8:	f7f5 fea9 	bl	193e <mp_print_str>
        mp_format_float(o->imag, buf, sizeof(buf), 'g', precision, '\0');
    bbec:	ed94 0a02 	vldr	s0, [r4, #8]
    bbf0:	2300      	movs	r3, #0
    bbf2:	9300      	str	r3, [sp, #0]
    bbf4:	2307      	movs	r3, #7
    bbf6:	2267      	movs	r2, #103	; 0x67
    bbf8:	2110      	movs	r1, #16
    bbfa:	a802      	add	r0, sp, #8
    bbfc:	f7fc ff0c 	bl	8a18 <mp_format_float>
        mp_printf(print, "%sj)", buf);
    bc00:	aa02      	add	r2, sp, #8
    bc02:	490d      	ldr	r1, [pc, #52]	; (bc38 <complex_print+0x9c>)
    bc04:	4628      	mov	r0, r5
    bc06:	f7f6 fa31 	bl	206c <mp_printf>
}
    bc0a:	b007      	add	sp, #28
    bc0c:	bd30      	pop	{r4, r5, pc}
        mp_format_float(o->imag, buf, sizeof(buf), 'g', precision, '\0');
    bc0e:	ed91 0a02 	vldr	s0, [r1, #8]
    bc12:	2300      	movs	r3, #0
    bc14:	9300      	str	r3, [sp, #0]
    bc16:	2307      	movs	r3, #7
    bc18:	2267      	movs	r2, #103	; 0x67
    bc1a:	2110      	movs	r1, #16
    bc1c:	a802      	add	r0, sp, #8
    bc1e:	f7fc fefb 	bl	8a18 <mp_format_float>
        mp_printf(print, "%sj", buf);
    bc22:	aa02      	add	r2, sp, #8
    bc24:	4905      	ldr	r1, [pc, #20]	; (bc3c <complex_print+0xa0>)
    bc26:	4628      	mov	r0, r5
    bc28:	f7f6 fa20 	bl	206c <mp_printf>
    bc2c:	e7ed      	b.n	bc0a <complex_print+0x6e>
    bc2e:	bf00      	nop
    bc30:	0002605c 	.word	0x0002605c
    bc34:	00026060 	.word	0x00026060
    bc38:	00026064 	.word	0x00026064
    bc3c:	00026058 	.word	0x00026058

0000bc40 <mp_obj_new_complex>:
    .unary_op = complex_unary_op,
    .binary_op = complex_binary_op,
    .attr = complex_attr,
};

mp_obj_t mp_obj_new_complex(mp_float_t real, mp_float_t imag) {
    bc40:	b508      	push	{r3, lr}
    bc42:	ed2d 8b02 	vpush	{d8}
    bc46:	eef0 8a40 	vmov.f32	s17, s0
    bc4a:	eeb0 8a60 	vmov.f32	s16, s1
    mp_obj_complex_t *o = m_new_obj(mp_obj_complex_t);
    bc4e:	200c      	movs	r0, #12
    bc50:	f7f4 fe34 	bl	8bc <m_malloc>
    o->base.type = &mp_type_complex;
    bc54:	4a04      	ldr	r2, [pc, #16]	; (bc68 <mp_obj_new_complex+0x28>)
    bc56:	6002      	str	r2, [r0, #0]
    o->real = real;
    bc58:	edc0 8a01 	vstr	s17, [r0, #4]
    o->imag = imag;
    bc5c:	ed80 8a02 	vstr	s16, [r0, #8]
    return MP_OBJ_FROM_PTR(o);
}
    bc60:	ecbd 8b02 	vpop	{d8}
    bc64:	bd08      	pop	{r3, pc}
    bc66:	bf00      	nop
    bc68:	00026114 	.word	0x00026114

0000bc6c <complex_unary_op>:
STATIC mp_obj_t complex_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    bc6c:	b508      	push	{r3, lr}
    switch (op) {
    bc6e:	2807      	cmp	r0, #7
    bc70:	d842      	bhi.n	bcf8 <complex_unary_op+0x8c>
    bc72:	e8df f000 	tbb	[pc, r0]
    bc76:	2704      	.short	0x2704
    bc78:	41064141 	.word	0x41064141
    bc7c:	3216      	.short	0x3216
        case MP_UNARY_OP_POSITIVE: return o_in;
    bc7e:	4608      	mov	r0, r1
}
    bc80:	bd08      	pop	{r3, pc}
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(o->real != 0 || o->imag != 0);
    bc82:	edd1 7a01 	vldr	s15, [r1, #4]
    bc86:	eef5 7a40 	vcmp.f32	s15, #0.0
    bc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc8e:	d135      	bne.n	bcfc <complex_unary_op+0x90>
    bc90:	edd1 7a02 	vldr	s15, [r1, #8]
    bc94:	eef5 7a40 	vcmp.f32	s15, #0.0
    bc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc9c:	d030      	beq.n	bd00 <complex_unary_op+0x94>
    bc9e:	4819      	ldr	r0, [pc, #100]	; (bd04 <complex_unary_op+0x98>)
    bca0:	e7ee      	b.n	bc80 <complex_unary_op+0x14>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT(mp_float_hash(o->real) ^ mp_float_hash(o->imag));
    bca2:	edd1 7a01 	vldr	s15, [r1, #4]
#if MICROPY_PY_BUILTINS_FLOAT
// float
#if MICROPY_FLOAT_HIGH_QUALITY_HASH
mp_int_t mp_float_hash(mp_float_t val);
#else
static inline mp_int_t mp_float_hash(mp_float_t val) { return (mp_int_t)val; }
    bca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    bcaa:	ee17 0a90 	vmov	r0, s15
    bcae:	edd1 7a02 	vldr	s15, [r1, #8]
    bcb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    bcb6:	ee17 1a90 	vmov	r1, s15
    bcba:	4041      	eors	r1, r0
    bcbc:	0049      	lsls	r1, r1, #1
    bcbe:	f041 0001 	orr.w	r0, r1, #1
    bcc2:	e7dd      	b.n	bc80 <complex_unary_op+0x14>
        case MP_UNARY_OP_NEGATIVE: return mp_obj_new_complex(-o->real, -o->imag);
    bcc4:	ed91 0a01 	vldr	s0, [r1, #4]
    bcc8:	edd1 0a02 	vldr	s1, [r1, #8]
    bccc:	eef1 0a60 	vneg.f32	s1, s1
    bcd0:	eeb1 0a40 	vneg.f32	s0, s0
    bcd4:	f7ff ffb4 	bl	bc40 <mp_obj_new_complex>
    bcd8:	e7d2      	b.n	bc80 <complex_unary_op+0x14>
            return mp_obj_new_float(MICROPY_FLOAT_C_FUN(sqrt)(o->real*o->real + o->imag*o->imag));
    bcda:	ed91 0a01 	vldr	s0, [r1, #4]
    bcde:	ee20 0a00 	vmul.f32	s0, s0, s0
    bce2:	edd1 7a02 	vldr	s15, [r1, #8]
    bce6:	ee67 7aa7 	vmul.f32	s15, s15, s15
    bcea:	ee30 0a27 	vadd.f32	s0, s0, s15
    bcee:	f013 fbed 	bl	1f4cc <sqrtf>
    bcf2:	f001 f883 	bl	cdfc <mp_obj_new_float>
    bcf6:	e7c3      	b.n	bc80 <complex_unary_op+0x14>
        default: return MP_OBJ_NULL; // op not supported
    bcf8:	2000      	movs	r0, #0
    bcfa:	e7c1      	b.n	bc80 <complex_unary_op+0x14>
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    bcfc:	4801      	ldr	r0, [pc, #4]	; (bd04 <complex_unary_op+0x98>)
    bcfe:	e7bf      	b.n	bc80 <complex_unary_op+0x14>
    bd00:	4801      	ldr	r0, [pc, #4]	; (bd08 <complex_unary_op+0x9c>)
    bd02:	e7bd      	b.n	bc80 <complex_unary_op+0x14>
    bd04:	00025f4c 	.word	0x00025f4c
    bd08:	00025f44 	.word	0x00025f44

0000bd0c <mp_obj_complex_get>:

void mp_obj_complex_get(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag) {
    bd0c:	b510      	push	{r4, lr}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_complex));
    bd0e:	f010 0f03 	tst.w	r0, #3
    bd12:	d108      	bne.n	bd26 <mp_obj_complex_get+0x1a>
    bd14:	6804      	ldr	r4, [r0, #0]
    bd16:	4b07      	ldr	r3, [pc, #28]	; (bd34 <mp_obj_complex_get+0x28>)
    bd18:	429c      	cmp	r4, r3
    bd1a:	d104      	bne.n	bd26 <mp_obj_complex_get+0x1a>
    mp_obj_complex_t *self = MP_OBJ_TO_PTR(self_in);
    *real = self->real;
    bd1c:	6843      	ldr	r3, [r0, #4]
    bd1e:	600b      	str	r3, [r1, #0]
    *imag = self->imag;
    bd20:	6883      	ldr	r3, [r0, #8]
    bd22:	6013      	str	r3, [r2, #0]
}
    bd24:	bd10      	pop	{r4, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_complex));
    bd26:	4b04      	ldr	r3, [pc, #16]	; (bd38 <mp_obj_complex_get+0x2c>)
    bd28:	4a04      	ldr	r2, [pc, #16]	; (bd3c <mp_obj_complex_get+0x30>)
    bd2a:	21a7      	movs	r1, #167	; 0xa7
    bd2c:	4804      	ldr	r0, [pc, #16]	; (bd40 <mp_obj_complex_get+0x34>)
    bd2e:	f00c fc15 	bl	1855c <__assert_func>
    bd32:	bf00      	nop
    bd34:	00026114 	.word	0x00026114
    bd38:	000260d0 	.word	0x000260d0
    bd3c:	00026044 	.word	0x00026044
    bd40:	000260fc 	.word	0x000260fc

0000bd44 <complex_make_new>:
STATIC mp_obj_t complex_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    bd44:	b530      	push	{r4, r5, lr}
    bd46:	b087      	sub	sp, #28
    bd48:	460c      	mov	r4, r1
    bd4a:	4611      	mov	r1, r2
    bd4c:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
    bd4e:	2200      	movs	r2, #0
    bd50:	9200      	str	r2, [sp, #0]
    bd52:	2302      	movs	r3, #2
    bd54:	4620      	mov	r0, r4
    bd56:	f7fe fcdf 	bl	a718 <mp_arg_check_num>
    switch (n_args) {
    bd5a:	b334      	cbz	r4, bdaa <complex_make_new+0x66>
    bd5c:	2c01      	cmp	r4, #1
    bd5e:	d02c      	beq.n	bdba <complex_make_new+0x76>
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_complex)) {
    bd60:	6828      	ldr	r0, [r5, #0]
    bd62:	f010 0f03 	tst.w	r0, #3
    bd66:	d103      	bne.n	bd70 <complex_make_new+0x2c>
    bd68:	6802      	ldr	r2, [r0, #0]
    bd6a:	4b31      	ldr	r3, [pc, #196]	; (be30 <complex_make_new+0xec>)
    bd6c:	429a      	cmp	r2, r3
    bd6e:	d045      	beq.n	bdfc <complex_make_new+0xb8>
                real = mp_obj_get_float(args[0]);
    bd70:	f7ff f8d4 	bl	af1c <mp_obj_get_float>
    bd74:	ed8d 0a02 	vstr	s0, [sp, #8]
                imag = 0;
    bd78:	2300      	movs	r3, #0
    bd7a:	9303      	str	r3, [sp, #12]
            if (MP_OBJ_IS_TYPE(args[1], &mp_type_complex)) {
    bd7c:	6868      	ldr	r0, [r5, #4]
    bd7e:	f010 0f03 	tst.w	r0, #3
    bd82:	d103      	bne.n	bd8c <complex_make_new+0x48>
    bd84:	6802      	ldr	r2, [r0, #0]
    bd86:	4b2a      	ldr	r3, [pc, #168]	; (be30 <complex_make_new+0xec>)
    bd88:	429a      	cmp	r2, r3
    bd8a:	d03c      	beq.n	be06 <complex_make_new+0xc2>
                imag += mp_obj_get_float(args[1]);
    bd8c:	f7ff f8c6 	bl	af1c <mp_obj_get_float>
    bd90:	eddd 7a03 	vldr	s15, [sp, #12]
    bd94:	ee37 0a80 	vadd.f32	s0, s15, s0
    bd98:	ed8d 0a03 	vstr	s0, [sp, #12]
            return mp_obj_new_complex(real, imag);
    bd9c:	eddd 0a03 	vldr	s1, [sp, #12]
    bda0:	ed9d 0a02 	vldr	s0, [sp, #8]
    bda4:	f7ff ff4c 	bl	bc40 <mp_obj_new_complex>
    bda8:	e005      	b.n	bdb6 <complex_make_new+0x72>
            return mp_obj_new_complex(0, 0);
    bdaa:	ed9f 0a22 	vldr	s0, [pc, #136]	; be34 <complex_make_new+0xf0>
    bdae:	eef0 0a40 	vmov.f32	s1, s0
    bdb2:	f7ff ff45 	bl	bc40 <mp_obj_new_complex>
}
    bdb6:	b007      	add	sp, #28
    bdb8:	bd30      	pop	{r4, r5, pc}
            if (MP_OBJ_IS_STR(args[0])) {
    bdba:	6828      	ldr	r0, [r5, #0]
    { return ((((mp_int_t)(o)) & 3) == 2); }
    bdbc:	f000 0303 	and.w	r3, r0, #3
    bdc0:	2b02      	cmp	r3, #2
    bdc2:	d010      	beq.n	bde6 <complex_make_new+0xa2>
    bdc4:	b91b      	cbnz	r3, bdce <complex_make_new+0x8a>
    bdc6:	6801      	ldr	r1, [r0, #0]
    bdc8:	4a1b      	ldr	r2, [pc, #108]	; (be38 <complex_make_new+0xf4>)
    bdca:	4291      	cmp	r1, r2
    bdcc:	d00b      	beq.n	bde6 <complex_make_new+0xa2>
            } else if (MP_OBJ_IS_TYPE(args[0], &mp_type_complex)) {
    bdce:	b91b      	cbnz	r3, bdd8 <complex_make_new+0x94>
    bdd0:	6802      	ldr	r2, [r0, #0]
    bdd2:	4b17      	ldr	r3, [pc, #92]	; (be30 <complex_make_new+0xec>)
    bdd4:	429a      	cmp	r2, r3
    bdd6:	d0ee      	beq.n	bdb6 <complex_make_new+0x72>
                return mp_obj_new_complex(mp_obj_get_float(args[0]), 0);
    bdd8:	f7ff f8a0 	bl	af1c <mp_obj_get_float>
    bddc:	eddf 0a15 	vldr	s1, [pc, #84]	; be34 <complex_make_new+0xf0>
    bde0:	f7ff ff2e 	bl	bc40 <mp_obj_new_complex>
    bde4:	e7e7      	b.n	bdb6 <complex_make_new+0x72>
                const char *s = mp_obj_str_get_data(args[0], &l);
    bde6:	a905      	add	r1, sp, #20
    bde8:	f004 fa4c 	bl	10284 <mp_obj_str_get_data>
                return mp_parse_num_decimal(s, l, true, true, NULL);
    bdec:	2300      	movs	r3, #0
    bdee:	9300      	str	r3, [sp, #0]
    bdf0:	2301      	movs	r3, #1
    bdf2:	461a      	mov	r2, r3
    bdf4:	9905      	ldr	r1, [sp, #20]
    bdf6:	f7fd f937 	bl	9068 <mp_parse_num_decimal>
    bdfa:	e7dc      	b.n	bdb6 <complex_make_new+0x72>
                mp_obj_complex_get(args[0], &real, &imag);
    bdfc:	aa03      	add	r2, sp, #12
    bdfe:	a902      	add	r1, sp, #8
    be00:	f7ff ff84 	bl	bd0c <mp_obj_complex_get>
    be04:	e7ba      	b.n	bd7c <complex_make_new+0x38>
                mp_obj_complex_get(args[1], &real2, &imag2);
    be06:	aa05      	add	r2, sp, #20
    be08:	a904      	add	r1, sp, #16
    be0a:	f7ff ff7f 	bl	bd0c <mp_obj_complex_get>
                real -= imag2;
    be0e:	eddd 7a02 	vldr	s15, [sp, #8]
    be12:	ed9d 7a05 	vldr	s14, [sp, #20]
    be16:	ee77 7ac7 	vsub.f32	s15, s15, s14
    be1a:	edcd 7a02 	vstr	s15, [sp, #8]
                imag += real2;
    be1e:	eddd 7a03 	vldr	s15, [sp, #12]
    be22:	ed9d 7a04 	vldr	s14, [sp, #16]
    be26:	ee77 7a87 	vadd.f32	s15, s15, s14
    be2a:	edcd 7a03 	vstr	s15, [sp, #12]
            if (MP_OBJ_IS_TYPE(args[1], &mp_type_complex)) {
    be2e:	e7b5      	b.n	bd9c <complex_make_new+0x58>
    be30:	00026114 	.word	0x00026114
    be34:	00000000 	.word	0x00000000
    be38:	00028104 	.word	0x00028104

0000be3c <mp_obj_complex_binary_op>:

mp_obj_t mp_obj_complex_binary_op(mp_binary_op_t op, mp_float_t lhs_real, mp_float_t lhs_imag, mp_obj_t rhs_in) {
    be3c:	b510      	push	{r4, lr}
    be3e:	ed2d 8b04 	vpush	{d8-d9}
    be42:	b082      	sub	sp, #8
    be44:	4604      	mov	r4, r0
    be46:	eeb0 9a40 	vmov.f32	s18, s0
    be4a:	eeb0 8a60 	vmov.f32	s16, s1
    be4e:	4608      	mov	r0, r1
    mp_float_t rhs_real, rhs_imag;
    mp_obj_get_complex(rhs_in, &rhs_real, &rhs_imag); // can be any type, this function will convert to float (if possible)
    be50:	466a      	mov	r2, sp
    be52:	a901      	add	r1, sp, #4
    be54:	f7ff f87c 	bl	af50 <mp_obj_get_complex>
    switch (op) {
    be58:	1ea0      	subs	r0, r4, #2
    be5a:	281e      	cmp	r0, #30
    be5c:	f200 80db 	bhi.w	c016 <mp_obj_complex_binary_op+0x1da>
    be60:	e8df f000 	tbb	[pc, r0]
    be64:	d9d9d9c6 	.word	0xd9d9d9c6
    be68:	d9d9d9d9 	.word	0xd9d9d9d9
    be6c:	d9d9d9d9 	.word	0xd9d9d9d9
    be70:	225a1910 	.word	0x225a1910
    be74:	d974d925 	.word	0xd974d925
    be78:	d9d9d9d9 	.word	0xd9d9d9d9
    be7c:	225a1910 	.word	0x225a1910
    be80:	d925      	.short	0xd925
    be82:	74          	.byte	0x74
    be83:	00          	.byte	0x00
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD:
            lhs_real += rhs_real;
    be84:	eddd 8a01 	vldr	s17, [sp, #4]
    be88:	ee79 8a28 	vadd.f32	s17, s18, s17
            lhs_imag += rhs_imag;
    be8c:	eddd 7a00 	vldr	s15, [sp]
    be90:	ee38 8a27 	vadd.f32	s16, s16, s15
            break;
    be94:	e050      	b.n	bf38 <mp_obj_complex_binary_op+0xfc>
        case MP_BINARY_OP_SUBTRACT:
        case MP_BINARY_OP_INPLACE_SUBTRACT:
            lhs_real -= rhs_real;
    be96:	eddd 8a01 	vldr	s17, [sp, #4]
    be9a:	ee79 8a68 	vsub.f32	s17, s18, s17
            lhs_imag -= rhs_imag;
    be9e:	eddd 7a00 	vldr	s15, [sp]
    bea2:	ee38 8a67 	vsub.f32	s16, s16, s15
            break;
    bea6:	e047      	b.n	bf38 <mp_obj_complex_binary_op+0xfc>
            lhs_real = real;
            break;
        }
        case MP_BINARY_OP_FLOOR_DIVIDE:
        case MP_BINARY_OP_INPLACE_FLOOR_DIVIDE:
            mp_raise_TypeError("can't do truncated division of a complex number");
    bea8:	485e      	ldr	r0, [pc, #376]	; (c024 <mp_obj_complex_binary_op+0x1e8>)
    beaa:	f7fe fbfd 	bl	a6a8 <mp_raise_TypeError>

        case MP_BINARY_OP_TRUE_DIVIDE:
        case MP_BINARY_OP_INPLACE_TRUE_DIVIDE:
            if (rhs_imag == 0) {
    beae:	eddd 7a00 	vldr	s15, [sp]
    beb2:	eef5 7a40 	vcmp.f32	s15, #0.0
    beb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    beba:	d10f      	bne.n	bedc <mp_obj_complex_binary_op+0xa0>
                if (rhs_real == 0) {
    bebc:	eddd 7a01 	vldr	s15, [sp, #4]
    bec0:	eef5 7a40 	vcmp.f32	s15, #0.0
    bec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bec8:	d004      	beq.n	bed4 <mp_obj_complex_binary_op+0x98>
                    mp_raise_msg(&mp_type_ZeroDivisionError, "complex division by zero");
                }
                lhs_real /= rhs_real;
    beca:	eec9 8a27 	vdiv.f32	s17, s18, s15
                lhs_imag /= rhs_real;
    bece:	ee88 8a27 	vdiv.f32	s16, s16, s15
    bed2:	e031      	b.n	bf38 <mp_obj_complex_binary_op+0xfc>
                    mp_raise_msg(&mp_type_ZeroDivisionError, "complex division by zero");
    bed4:	4954      	ldr	r1, [pc, #336]	; (c028 <mp_obj_complex_binary_op+0x1ec>)
    bed6:	4855      	ldr	r0, [pc, #340]	; (c02c <mp_obj_complex_binary_op+0x1f0>)
    bed8:	f7fe f9c6 	bl	a268 <mp_raise_msg>
            } else if (rhs_real == 0) {
    bedc:	ed9d 7a01 	vldr	s14, [sp, #4]
    bee0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    bee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bee8:	d106      	bne.n	bef8 <mp_obj_complex_binary_op+0xbc>
                mp_float_t real = lhs_imag / rhs_imag;
    beea:	eec8 8a27 	vdiv.f32	s17, s16, s15
                lhs_imag = -lhs_real / rhs_imag;
    beee:	eeb1 9a49 	vneg.f32	s18, s18
    bef2:	ee89 8a27 	vdiv.f32	s16, s18, s15
    bef6:	e01f      	b.n	bf38 <mp_obj_complex_binary_op+0xfc>
                lhs_real = real;
            } else {
                mp_float_t rhs_len_sq = rhs_real*rhs_real + rhs_imag*rhs_imag;
    bef8:	ee67 6a07 	vmul.f32	s13, s14, s14
    befc:	ee27 6aa7 	vmul.f32	s12, s15, s15
    bf00:	ee76 6a86 	vadd.f32	s13, s13, s12
                rhs_real /= rhs_len_sq;
    bf04:	ee87 6a26 	vdiv.f32	s12, s14, s13
    bf08:	ed8d 6a01 	vstr	s12, [sp, #4]
                rhs_imag /= -rhs_len_sq;
    bf0c:	eef1 6a66 	vneg.f32	s13, s13
    bf10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    bf14:	ed8d 7a00 	vstr	s14, [sp]
            real = lhs_real * rhs_real - lhs_imag * rhs_imag;
    bf18:	eddd 7a01 	vldr	s15, [sp, #4]
    bf1c:	ee67 8a89 	vmul.f32	s17, s15, s18
    bf20:	ed9d 7a00 	vldr	s14, [sp]
    bf24:	ee67 6a08 	vmul.f32	s13, s14, s16
    bf28:	ee78 8ae6 	vsub.f32	s17, s17, s13
            lhs_imag = lhs_real * rhs_imag + lhs_imag * rhs_real;
    bf2c:	ee27 9a09 	vmul.f32	s18, s14, s18
    bf30:	ee27 8a88 	vmul.f32	s16, s15, s16
    bf34:	ee39 8a08 	vadd.f32	s16, s18, s16
        case MP_BINARY_OP_EQUAL: return mp_obj_new_bool(lhs_real == rhs_real && lhs_imag == rhs_imag);

        default:
            return MP_OBJ_NULL; // op not supported
    }
    return mp_obj_new_complex(lhs_real, lhs_imag);
    bf38:	eef0 0a48 	vmov.f32	s1, s16
    bf3c:	eeb0 0a68 	vmov.f32	s0, s17
    bf40:	f7ff fe7e 	bl	bc40 <mp_obj_new_complex>
}
    bf44:	b002      	add	sp, #8
    bf46:	ecbd 8b04 	vpop	{d8-d9}
    bf4a:	bd10      	pop	{r4, pc}
            mp_float_t abs1 = MICROPY_FLOAT_C_FUN(sqrt)(lhs_real*lhs_real + lhs_imag*lhs_imag);
    bf4c:	ee29 0a09 	vmul.f32	s0, s18, s18
    bf50:	ee68 7a08 	vmul.f32	s15, s16, s16
    bf54:	ee30 0a27 	vadd.f32	s0, s0, s15
    bf58:	f013 fab8 	bl	1f4cc <sqrtf>
            if (abs1 == 0) {
    bf5c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    bf60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bf64:	d119      	bne.n	bf9a <mp_obj_complex_binary_op+0x15e>
                if (rhs_imag == 0 && rhs_real >= 0) {
    bf66:	eddd 7a00 	vldr	s15, [sp]
    bf6a:	eef5 7a40 	vcmp.f32	s15, #0.0
    bf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bf72:	d10e      	bne.n	bf92 <mp_obj_complex_binary_op+0x156>
    bf74:	eddd 7a01 	vldr	s15, [sp, #4]
    bf78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bf80:	db07      	blt.n	bf92 <mp_obj_complex_binary_op+0x156>
                    lhs_real = (rhs_real == 0);
    bf82:	eef5 7a40 	vcmp.f32	s15, #0.0
    bf86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bf8a:	d041      	beq.n	c010 <mp_obj_complex_binary_op+0x1d4>
    bf8c:	eddf 8a28 	vldr	s17, [pc, #160]	; c030 <mp_obj_complex_binary_op+0x1f4>
    bf90:	e7d2      	b.n	bf38 <mp_obj_complex_binary_op+0xfc>
                    mp_raise_msg(&mp_type_ZeroDivisionError, "0.0 to a complex power");
    bf92:	4928      	ldr	r1, [pc, #160]	; (c034 <mp_obj_complex_binary_op+0x1f8>)
    bf94:	4825      	ldr	r0, [pc, #148]	; (c02c <mp_obj_complex_binary_op+0x1f0>)
    bf96:	f7fe f967 	bl	a268 <mp_raise_msg>
                mp_float_t ln1 = MICROPY_FLOAT_C_FUN(log)(abs1);
    bf9a:	f013 f8ff 	bl	1f19c <logf>
    bf9e:	eef0 8a40 	vmov.f32	s17, s0
                mp_float_t arg1 = MICROPY_FLOAT_C_FUN(atan2)(lhs_imag, lhs_real);
    bfa2:	eef0 0a49 	vmov.f32	s1, s18
    bfa6:	eeb0 0a48 	vmov.f32	s0, s16
    bfaa:	f013 fb95 	bl	1f6d8 <atan2f>
                mp_float_t x3 = rhs_real * ln1 - rhs_imag * arg1;
    bfae:	ed9d 7a01 	vldr	s14, [sp, #4]
    bfb2:	ee27 6a28 	vmul.f32	s12, s14, s17
    bfb6:	eddd 7a00 	vldr	s15, [sp]
    bfba:	ee67 6a80 	vmul.f32	s13, s15, s0
                mp_float_t y3 = rhs_imag * ln1 + rhs_real * arg1;
    bfbe:	ee67 7aa8 	vmul.f32	s15, s15, s17
    bfc2:	ee27 9a00 	vmul.f32	s18, s14, s0
    bfc6:	ee37 9a89 	vadd.f32	s18, s15, s18
                mp_float_t exp_x3 = MICROPY_FLOAT_C_FUN(exp)(x3);
    bfca:	ee36 0a66 	vsub.f32	s0, s12, s13
    bfce:	f012 ff35 	bl	1ee3c <expf>
    bfd2:	eeb0 8a40 	vmov.f32	s16, s0
                lhs_real = exp_x3 * MICROPY_FLOAT_C_FUN(cos)(y3);
    bfd6:	eeb0 0a49 	vmov.f32	s0, s18
    bfda:	f014 fa89 	bl	204f0 <cosf>
    bfde:	ee60 8a08 	vmul.f32	s17, s0, s16
                lhs_imag = exp_x3 * MICROPY_FLOAT_C_FUN(sin)(y3);
    bfe2:	eeb0 0a49 	vmov.f32	s0, s18
    bfe6:	f014 fb2d 	bl	20644 <sinf>
    bfea:	ee20 8a08 	vmul.f32	s16, s0, s16
    bfee:	e7a3      	b.n	bf38 <mp_obj_complex_binary_op+0xfc>
        case MP_BINARY_OP_EQUAL: return mp_obj_new_bool(lhs_real == rhs_real && lhs_imag == rhs_imag);
    bff0:	eddd 7a01 	vldr	s15, [sp, #4]
    bff4:	eef4 7a49 	vcmp.f32	s15, s18
    bff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bffc:	d10d      	bne.n	c01a <mp_obj_complex_binary_op+0x1de>
    bffe:	eddd 7a00 	vldr	s15, [sp]
    c002:	eef4 7a48 	vcmp.f32	s15, s16
    c006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c00a:	d008      	beq.n	c01e <mp_obj_complex_binary_op+0x1e2>
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    c00c:	480a      	ldr	r0, [pc, #40]	; (c038 <mp_obj_complex_binary_op+0x1fc>)
    c00e:	e799      	b.n	bf44 <mp_obj_complex_binary_op+0x108>
                    lhs_real = (rhs_real == 0);
    c010:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    c014:	e790      	b.n	bf38 <mp_obj_complex_binary_op+0xfc>
            return MP_OBJ_NULL; // op not supported
    c016:	2000      	movs	r0, #0
    c018:	e794      	b.n	bf44 <mp_obj_complex_binary_op+0x108>
    c01a:	4807      	ldr	r0, [pc, #28]	; (c038 <mp_obj_complex_binary_op+0x1fc>)
    c01c:	e792      	b.n	bf44 <mp_obj_complex_binary_op+0x108>
    c01e:	4807      	ldr	r0, [pc, #28]	; (c03c <mp_obj_complex_binary_op+0x200>)
    c020:	e790      	b.n	bf44 <mp_obj_complex_binary_op+0x108>
    c022:	bf00      	nop
    c024:	0002606c 	.word	0x0002606c
    c028:	0002609c 	.word	0x0002609c
    c02c:	00026cfc 	.word	0x00026cfc
    c030:	00000000 	.word	0x00000000
    c034:	000260b8 	.word	0x000260b8
    c038:	00025f44 	.word	0x00025f44
    c03c:	00025f4c 	.word	0x00025f4c

0000c040 <complex_binary_op>:
STATIC mp_obj_t complex_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    c040:	b508      	push	{r3, lr}
    c042:	460b      	mov	r3, r1
    return mp_obj_complex_binary_op(op, lhs->real, lhs->imag, rhs_in);
    c044:	4611      	mov	r1, r2
    c046:	edd3 0a02 	vldr	s1, [r3, #8]
    c04a:	ed93 0a01 	vldr	s0, [r3, #4]
    c04e:	f7ff fef5 	bl	be3c <mp_obj_complex_binary_op>
}
    c052:	bd08      	pop	{r3, pc}

0000c054 <dict_iter_next>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);

// This is a helper function to iterate through a dictionary.  The state of
// the iteration is held in *cur and should be initialised with zero for the
// first call.  Will return NULL when no more elements are available.
STATIC mp_map_elem_t *dict_iter_next(mp_obj_dict_t *dict, size_t *cur) {
    c054:	b430      	push	{r4, r5}
    size_t max = dict->map.alloc;
    c056:	6884      	ldr	r4, [r0, #8]
    mp_map_t *map = &dict->map;

    for (size_t i = *cur; i < max; i++) {
    c058:	680b      	ldr	r3, [r1, #0]
    c05a:	e004      	b.n	c066 <dict_iter_next+0x12>
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    c05c:	2200      	movs	r2, #0
    c05e:	e000      	b.n	c062 <dict_iter_next+0xe>
    c060:	2200      	movs	r2, #0
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    c062:	b962      	cbnz	r2, c07e <dict_iter_next+0x2a>
    for (size_t i = *cur; i < max; i++) {
    c064:	3301      	adds	r3, #1
    c066:	42a3      	cmp	r3, r4
    c068:	d20e      	bcs.n	c088 <dict_iter_next+0x34>
    c06a:	68c2      	ldr	r2, [r0, #12]
    c06c:	00dd      	lsls	r5, r3, #3
    c06e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    c072:	2a00      	cmp	r2, #0
    c074:	d0f4      	beq.n	c060 <dict_iter_next+0xc>
    c076:	2a08      	cmp	r2, #8
    c078:	d0f0      	beq.n	c05c <dict_iter_next+0x8>
    c07a:	2201      	movs	r2, #1
    c07c:	e7f1      	b.n	c062 <dict_iter_next+0xe>
            *cur = i + 1;
    c07e:	3301      	adds	r3, #1
    c080:	600b      	str	r3, [r1, #0]
            return &(map->table[i]);
    c082:	68c0      	ldr	r0, [r0, #12]
    c084:	4428      	add	r0, r5
    c086:	e000      	b.n	c08a <dict_iter_next+0x36>
        }
    }

    return NULL;
    c088:	2000      	movs	r0, #0
}
    c08a:	bc30      	pop	{r4, r5}
    c08c:	4770      	bx	lr
	...

0000c090 <dict_unary_op>:
    return dict_out;
}

STATIC mp_obj_t dict_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    switch (op) {
    c090:	2804      	cmp	r0, #4
    c092:	d003      	beq.n	c09c <dict_unary_op+0xc>
    c094:	2805      	cmp	r0, #5
    c096:	d007      	beq.n	c0a8 <dict_unary_op+0x18>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(*self->map.table) * self->map.alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    c098:	2000      	movs	r0, #0
    c09a:	4770      	bx	lr
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->map.used != 0);
    c09c:	684b      	ldr	r3, [r1, #4]
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    c09e:	f033 0307 	bics.w	r3, r3, #7
    c0a2:	d008      	beq.n	c0b6 <dict_unary_op+0x26>
    c0a4:	4805      	ldr	r0, [pc, #20]	; (c0bc <dict_unary_op+0x2c>)
    c0a6:	4770      	bx	lr
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->map.used);
    c0a8:	6848      	ldr	r0, [r1, #4]
    c0aa:	f3c0 00dc 	ubfx	r0, r0, #3, #29
    c0ae:	0040      	lsls	r0, r0, #1
    c0b0:	f040 0001 	orr.w	r0, r0, #1
    c0b4:	4770      	bx	lr
    c0b6:	4802      	ldr	r0, [pc, #8]	; (c0c0 <dict_unary_op+0x30>)
    }
}
    c0b8:	4770      	bx	lr
    c0ba:	bf00      	nop
    c0bc:	00025f4c 	.word	0x00025f4c
    c0c0:	00025f44 	.word	0x00025f44

0000c0c4 <dict_view_getiter>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = dict_view_it_iternext,
};

STATIC mp_obj_t dict_view_getiter(mp_obj_t view_in, mp_obj_iter_buf_t *iter_buf) {
    c0c4:	b508      	push	{r3, lr}
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    c0c6:	f010 0f03 	tst.w	r0, #3
    c0ca:	d10d      	bne.n	c0e8 <dict_view_getiter+0x24>
    c0cc:	6802      	ldr	r2, [r0, #0]
    c0ce:	4b0a      	ldr	r3, [pc, #40]	; (c0f8 <dict_view_getiter+0x34>)
    c0d0:	429a      	cmp	r2, r3
    c0d2:	d109      	bne.n	c0e8 <dict_view_getiter+0x24>
    mp_obj_dict_view_t *view = MP_OBJ_TO_PTR(view_in);
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    o->base.type = &dict_view_it_type;
    c0d4:	4b09      	ldr	r3, [pc, #36]	; (c0fc <dict_view_getiter+0x38>)
    c0d6:	600b      	str	r3, [r1, #0]
    o->kind = view->kind;
    c0d8:	7a03      	ldrb	r3, [r0, #8]
    c0da:	710b      	strb	r3, [r1, #4]
    o->dict = view->dict;
    c0dc:	6843      	ldr	r3, [r0, #4]
    c0de:	608b      	str	r3, [r1, #8]
    o->cur = 0;
    c0e0:	2300      	movs	r3, #0
    c0e2:	60cb      	str	r3, [r1, #12]
    return MP_OBJ_FROM_PTR(o);
}
    c0e4:	4608      	mov	r0, r1
    c0e6:	bd08      	pop	{r3, pc}
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    c0e8:	4b05      	ldr	r3, [pc, #20]	; (c100 <dict_view_getiter+0x3c>)
    c0ea:	4a06      	ldr	r2, [pc, #24]	; (c104 <dict_view_getiter+0x40>)
    c0ec:	f240 11b1 	movw	r1, #433	; 0x1b1
    c0f0:	4805      	ldr	r0, [pc, #20]	; (c108 <dict_view_getiter+0x44>)
    c0f2:	f00c fa33 	bl	1855c <__assert_func>
    c0f6:	bf00      	nop
    c0f8:	00026588 	.word	0x00026588
    c0fc:	000264ec 	.word	0x000264ec
    c100:	0002641c 	.word	0x0002641c
    c104:	000261ac 	.word	0x000261ac
    c108:	00026478 	.word	0x00026478

0000c10c <dict_getiter>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_values_obj, dict_values);

/******************************************************************************/
/* dict iterator                                                              */

STATIC mp_obj_t dict_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
    c10c:	b508      	push	{r3, lr}
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c10e:	f010 0f03 	tst.w	r0, #3
    c112:	d10d      	bne.n	c130 <dict_getiter+0x24>
    c114:	6803      	ldr	r3, [r0, #0]
    c116:	68da      	ldr	r2, [r3, #12]
    c118:	4b09      	ldr	r3, [pc, #36]	; (c140 <dict_getiter+0x34>)
    c11a:	429a      	cmp	r2, r3
    c11c:	d108      	bne.n	c130 <dict_getiter+0x24>
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    o->base.type = &dict_view_it_type;
    c11e:	4b09      	ldr	r3, [pc, #36]	; (c144 <dict_getiter+0x38>)
    c120:	600b      	str	r3, [r1, #0]
    o->kind = MP_DICT_VIEW_KEYS;
    c122:	2301      	movs	r3, #1
    c124:	710b      	strb	r3, [r1, #4]
    o->dict = self_in;
    c126:	6088      	str	r0, [r1, #8]
    o->cur = 0;
    c128:	2300      	movs	r3, #0
    c12a:	60cb      	str	r3, [r1, #12]
    return MP_OBJ_FROM_PTR(o);
}
    c12c:	4608      	mov	r0, r1
    c12e:	bd08      	pop	{r3, pc}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c130:	4b05      	ldr	r3, [pc, #20]	; (c148 <dict_getiter+0x3c>)
    c132:	4a06      	ldr	r2, [pc, #24]	; (c14c <dict_getiter+0x40>)
    c134:	f44f 7101 	mov.w	r1, #516	; 0x204
    c138:	4805      	ldr	r0, [pc, #20]	; (c150 <dict_getiter+0x44>)
    c13a:	f00c fa0f 	bl	1855c <__assert_func>
    c13e:	bf00      	nop
    c140:	0000c7c1 	.word	0x0000c7c1
    c144:	000264ec 	.word	0x000264ec
    c148:	00026244 	.word	0x00026244
    c14c:	000261dc 	.word	0x000261dc
    c150:	00026478 	.word	0x00026478

0000c154 <mp_obj_new_dict_view>:
STATIC mp_obj_t mp_obj_new_dict_view(mp_obj_t dict, mp_dict_view_kind_t kind) {
    c154:	b538      	push	{r3, r4, r5, lr}
    c156:	4605      	mov	r5, r0
    c158:	460c      	mov	r4, r1
    mp_obj_dict_view_t *o = m_new_obj(mp_obj_dict_view_t);
    c15a:	200c      	movs	r0, #12
    c15c:	f7f4 fbae 	bl	8bc <m_malloc>
    o->base.type = &dict_view_type;
    c160:	4a02      	ldr	r2, [pc, #8]	; (c16c <mp_obj_new_dict_view+0x18>)
    c162:	6002      	str	r2, [r0, #0]
    o->dict = dict;
    c164:	6045      	str	r5, [r0, #4]
    o->kind = kind;
    c166:	7204      	strb	r4, [r0, #8]
}
    c168:	bd38      	pop	{r3, r4, r5, pc}
    c16a:	bf00      	nop
    c16c:	00026588 	.word	0x00026588

0000c170 <dict_view>:
STATIC mp_obj_t dict_view(mp_obj_t self_in, mp_dict_view_kind_t kind) {
    c170:	b508      	push	{r3, lr}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c172:	f010 0f03 	tst.w	r0, #3
    c176:	d107      	bne.n	c188 <dict_view+0x18>
    c178:	6803      	ldr	r3, [r0, #0]
    c17a:	68da      	ldr	r2, [r3, #12]
    c17c:	4b06      	ldr	r3, [pc, #24]	; (c198 <dict_view+0x28>)
    c17e:	429a      	cmp	r2, r3
    c180:	d102      	bne.n	c188 <dict_view+0x18>
    return mp_obj_new_dict_view(self_in, kind);
    c182:	f7ff ffe7 	bl	c154 <mp_obj_new_dict_view>
}
    c186:	bd08      	pop	{r3, pc}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c188:	4b04      	ldr	r3, [pc, #16]	; (c19c <dict_view+0x2c>)
    c18a:	4a05      	ldr	r2, [pc, #20]	; (c1a0 <dict_view+0x30>)
    c18c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    c190:	4804      	ldr	r0, [pc, #16]	; (c1a4 <dict_view+0x34>)
    c192:	f00c f9e3 	bl	1855c <__assert_func>
    c196:	bf00      	nop
    c198:	0000c7c1 	.word	0x0000c7c1
    c19c:	00026244 	.word	0x00026244
    c1a0:	000261d0 	.word	0x000261d0
    c1a4:	00026478 	.word	0x00026478

0000c1a8 <dict_values>:
STATIC mp_obj_t dict_values(mp_obj_t self_in) {
    c1a8:	b508      	push	{r3, lr}
    return dict_view(self_in, MP_DICT_VIEW_VALUES);
    c1aa:	2102      	movs	r1, #2
    c1ac:	f7ff ffe0 	bl	c170 <dict_view>
}
    c1b0:	bd08      	pop	{r3, pc}

0000c1b2 <dict_keys>:
STATIC mp_obj_t dict_keys(mp_obj_t self_in) {
    c1b2:	b508      	push	{r3, lr}
    return dict_view(self_in, MP_DICT_VIEW_KEYS);
    c1b4:	2101      	movs	r1, #1
    c1b6:	f7ff ffdb 	bl	c170 <dict_view>
}
    c1ba:	bd08      	pop	{r3, pc}

0000c1bc <dict_items>:
STATIC mp_obj_t dict_items(mp_obj_t self_in) {
    c1bc:	b508      	push	{r3, lr}
    return dict_view(self_in, MP_DICT_VIEW_ITEMS);
    c1be:	2100      	movs	r1, #0
    c1c0:	f7ff ffd6 	bl	c170 <dict_view>
}
    c1c4:	bd08      	pop	{r3, pc}
	...

0000c1c8 <dict_view_it_iternext>:
STATIC mp_obj_t dict_view_it_iternext(mp_obj_t self_in) {
    c1c8:	b510      	push	{r4, lr}
    c1ca:	b082      	sub	sp, #8
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    c1cc:	f010 0f03 	tst.w	r0, #3
    c1d0:	d118      	bne.n	c204 <dict_view_it_iternext+0x3c>
    c1d2:	4604      	mov	r4, r0
    c1d4:	6802      	ldr	r2, [r0, #0]
    c1d6:	4b12      	ldr	r3, [pc, #72]	; (c220 <dict_view_it_iternext+0x58>)
    c1d8:	429a      	cmp	r2, r3
    c1da:	d113      	bne.n	c204 <dict_view_it_iternext+0x3c>
    mp_map_elem_t *next = dict_iter_next(MP_OBJ_TO_PTR(self->dict), &self->cur);
    c1dc:	f100 010c 	add.w	r1, r0, #12
    c1e0:	6880      	ldr	r0, [r0, #8]
    c1e2:	f7ff ff37 	bl	c054 <dict_iter_next>
    if (next == NULL) {
    c1e6:	b1c0      	cbz	r0, c21a <dict_view_it_iternext+0x52>
        switch (self->kind) {
    c1e8:	7922      	ldrb	r2, [r4, #4]
    c1ea:	2a01      	cmp	r2, #1
    c1ec:	d011      	beq.n	c212 <dict_view_it_iternext+0x4a>
    c1ee:	2a02      	cmp	r2, #2
    c1f0:	d011      	beq.n	c216 <dict_view_it_iternext+0x4e>
                mp_obj_t items[] = {next->key, next->value};
    c1f2:	6802      	ldr	r2, [r0, #0]
    c1f4:	9200      	str	r2, [sp, #0]
    c1f6:	6843      	ldr	r3, [r0, #4]
    c1f8:	9301      	str	r3, [sp, #4]
                return mp_obj_new_tuple(2, items);
    c1fa:	4669      	mov	r1, sp
    c1fc:	2002      	movs	r0, #2
    c1fe:	f005 fb21 	bl	11844 <mp_obj_new_tuple>
    c202:	e00b      	b.n	c21c <dict_view_it_iternext+0x54>
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    c204:	4b07      	ldr	r3, [pc, #28]	; (c224 <dict_view_it_iternext+0x5c>)
    c206:	4a08      	ldr	r2, [pc, #32]	; (c228 <dict_view_it_iternext+0x60>)
    c208:	f240 1193 	movw	r1, #403	; 0x193
    c20c:	4807      	ldr	r0, [pc, #28]	; (c22c <dict_view_it_iternext+0x64>)
    c20e:	f00c f9a5 	bl	1855c <__assert_func>
                return next->key;
    c212:	6800      	ldr	r0, [r0, #0]
    c214:	e002      	b.n	c21c <dict_view_it_iternext+0x54>
                return next->value;
    c216:	6840      	ldr	r0, [r0, #4]
    c218:	e000      	b.n	c21c <dict_view_it_iternext+0x54>
        return MP_OBJ_STOP_ITERATION;
    c21a:	2004      	movs	r0, #4
}
    c21c:	b002      	add	sp, #8
    c21e:	bd10      	pop	{r4, pc}
    c220:	000264ec 	.word	0x000264ec
    c224:	0002648c 	.word	0x0002648c
    c228:	00026194 	.word	0x00026194
    c22c:	00026478 	.word	0x00026478

0000c230 <dict_view_print>:
STATIC void dict_view_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    c230:	b5f0      	push	{r4, r5, r6, r7, lr}
    c232:	b085      	sub	sp, #20
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    c234:	f011 0f03 	tst.w	r1, #3
    c238:	d116      	bne.n	c268 <dict_view_print+0x38>
    c23a:	4606      	mov	r6, r0
    c23c:	460c      	mov	r4, r1
    c23e:	680a      	ldr	r2, [r1, #0]
    c240:	4b19      	ldr	r3, [pc, #100]	; (c2a8 <dict_view_print+0x78>)
    c242:	429a      	cmp	r2, r3
    c244:	d110      	bne.n	c268 <dict_view_print+0x38>
    mp_print_str(print, mp_dict_view_names[self->kind]);
    c246:	7a0a      	ldrb	r2, [r1, #8]
    c248:	4b18      	ldr	r3, [pc, #96]	; (c2ac <dict_view_print+0x7c>)
    c24a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c24e:	f7f5 fb76 	bl	193e <mp_print_str>
    mp_print_str(print, "([");
    c252:	4917      	ldr	r1, [pc, #92]	; (c2b0 <dict_view_print+0x80>)
    c254:	4630      	mov	r0, r6
    c256:	f7f5 fb72 	bl	193e <mp_print_str>
    mp_obj_t self_iter = dict_view_getiter(self_in, &iter_buf);
    c25a:	4669      	mov	r1, sp
    c25c:	4620      	mov	r0, r4
    c25e:	f7ff ff31 	bl	c0c4 <dict_view_getiter>
    c262:	4607      	mov	r7, r0
    bool first = true;
    c264:	2501      	movs	r5, #1
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    c266:	e00c      	b.n	c282 <dict_view_print+0x52>
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    c268:	4b12      	ldr	r3, [pc, #72]	; (c2b4 <dict_view_print+0x84>)
    c26a:	4a13      	ldr	r2, [pc, #76]	; (c2b8 <dict_view_print+0x88>)
    c26c:	f240 11bd 	movw	r1, #445	; 0x1bd
    c270:	4812      	ldr	r0, [pc, #72]	; (c2bc <dict_view_print+0x8c>)
    c272:	f00c f973 	bl	1855c <__assert_func>
        mp_obj_print_helper(print, next, PRINT_REPR);
    c276:	2201      	movs	r2, #1
    c278:	4621      	mov	r1, r4
    c27a:	4630      	mov	r0, r6
    c27c:	f7fe fca0 	bl	abc0 <mp_obj_print_helper>
        first = false;
    c280:	2500      	movs	r5, #0
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    c282:	4638      	mov	r0, r7
    c284:	f7ff ffa0 	bl	c1c8 <dict_view_it_iternext>
    c288:	4604      	mov	r4, r0
    c28a:	2804      	cmp	r0, #4
    c28c:	d006      	beq.n	c29c <dict_view_print+0x6c>
        if (!first) {
    c28e:	2d00      	cmp	r5, #0
    c290:	d1f1      	bne.n	c276 <dict_view_print+0x46>
            mp_print_str(print, ", ");
    c292:	490b      	ldr	r1, [pc, #44]	; (c2c0 <dict_view_print+0x90>)
    c294:	4630      	mov	r0, r6
    c296:	f7f5 fb52 	bl	193e <mp_print_str>
    c29a:	e7ec      	b.n	c276 <dict_view_print+0x46>
    mp_print_str(print, "])");
    c29c:	4909      	ldr	r1, [pc, #36]	; (c2c4 <dict_view_print+0x94>)
    c29e:	4630      	mov	r0, r6
    c2a0:	f7f5 fb4d 	bl	193e <mp_print_str>
}
    c2a4:	b005      	add	sp, #20
    c2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2a8:	00026588 	.word	0x00026588
    c2ac:	000265c4 	.word	0x000265c4
    c2b0:	00026584 	.word	0x00026584
    c2b4:	00026528 	.word	0x00026528
    c2b8:	000261c0 	.word	0x000261c0
    c2bc:	00026478 	.word	0x00026478
    c2c0:	00025e80 	.word	0x00025e80
    c2c4:	00024910 	.word	0x00024910

0000c2c8 <dict_print>:
STATIC void dict_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    c2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2ca:	b083      	sub	sp, #12
    c2cc:	4604      	mov	r4, r0
    c2ce:	460f      	mov	r7, r1
    mp_print_str(print, "{");
    c2d0:	4914      	ldr	r1, [pc, #80]	; (c324 <dict_print+0x5c>)
    c2d2:	f7f5 fb34 	bl	193e <mp_print_str>
    size_t cur = 0;
    c2d6:	2300      	movs	r3, #0
    c2d8:	9301      	str	r3, [sp, #4]
    bool first = true;
    c2da:	2601      	movs	r6, #1
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    c2dc:	e00e      	b.n	c2fc <dict_print+0x34>
        mp_obj_print_helper(print, next->key, kind);
    c2de:	2201      	movs	r2, #1
    c2e0:	6829      	ldr	r1, [r5, #0]
    c2e2:	4620      	mov	r0, r4
    c2e4:	f7fe fc6c 	bl	abc0 <mp_obj_print_helper>
        mp_print_str(print, ": ");
    c2e8:	490f      	ldr	r1, [pc, #60]	; (c328 <dict_print+0x60>)
    c2ea:	4620      	mov	r0, r4
    c2ec:	f7f5 fb27 	bl	193e <mp_print_str>
        mp_obj_print_helper(print, next->value, kind);
    c2f0:	2201      	movs	r2, #1
    c2f2:	6869      	ldr	r1, [r5, #4]
    c2f4:	4620      	mov	r0, r4
    c2f6:	f7fe fc63 	bl	abc0 <mp_obj_print_helper>
        first = false;
    c2fa:	2600      	movs	r6, #0
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    c2fc:	a901      	add	r1, sp, #4
    c2fe:	4638      	mov	r0, r7
    c300:	f7ff fea8 	bl	c054 <dict_iter_next>
    c304:	4605      	mov	r5, r0
    c306:	b130      	cbz	r0, c316 <dict_print+0x4e>
        if (!first) {
    c308:	2e00      	cmp	r6, #0
    c30a:	d1e8      	bne.n	c2de <dict_print+0x16>
            mp_print_str(print, ", ");
    c30c:	4907      	ldr	r1, [pc, #28]	; (c32c <dict_print+0x64>)
    c30e:	4620      	mov	r0, r4
    c310:	f7f5 fb15 	bl	193e <mp_print_str>
    c314:	e7e3      	b.n	c2de <dict_print+0x16>
    mp_print_str(print, "}");
    c316:	4906      	ldr	r1, [pc, #24]	; (c330 <dict_print+0x68>)
    c318:	4620      	mov	r0, r4
    c31a:	f7f5 fb10 	bl	193e <mp_print_str>
}
    c31e:	b003      	add	sp, #12
    c320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c322:	bf00      	nop
    c324:	00026368 	.word	0x00026368
    c328:	0002636c 	.word	0x0002636c
    c32c:	00025e80 	.word	0x00025e80
    c330:	00026370 	.word	0x00026370

0000c334 <mp_ensure_not_fixed>:
STATIC void mp_ensure_not_fixed(const mp_obj_dict_t *dict) {
    c334:	b508      	push	{r3, lr}
    if (dict->map.is_fixed) {
    c336:	7903      	ldrb	r3, [r0, #4]
    c338:	f013 0f02 	tst.w	r3, #2
    c33c:	d100      	bne.n	c340 <mp_ensure_not_fixed+0xc>
}
    c33e:	bd08      	pop	{r3, pc}
        mp_raise_TypeError(NULL);
    c340:	2000      	movs	r0, #0
    c342:	f7fe f9b1 	bl	a6a8 <mp_raise_TypeError>
	...

0000c348 <dict_update>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    c348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c34c:	b084      	sub	sp, #16
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    c34e:	f8d1 8000 	ldr.w	r8, [r1]
    c352:	f018 0903 	ands.w	r9, r8, #3
    c356:	d117      	bne.n	c388 <dict_update+0x40>
    c358:	4604      	mov	r4, r0
    c35a:	460d      	mov	r5, r1
    c35c:	4617      	mov	r7, r2
    c35e:	f8d8 3000 	ldr.w	r3, [r8]
    c362:	68da      	ldr	r2, [r3, #12]
    c364:	4b40      	ldr	r3, [pc, #256]	; (c468 <dict_update+0x120>)
    c366:	429a      	cmp	r2, r3
    c368:	d10e      	bne.n	c388 <dict_update+0x40>
    mp_ensure_not_fixed(self);
    c36a:	4640      	mov	r0, r8
    c36c:	f7ff ffe2 	bl	c334 <mp_ensure_not_fixed>
    mp_arg_check_num(n_args, kwargs->used, 1, 2, true);
    c370:	6839      	ldr	r1, [r7, #0]
    c372:	2201      	movs	r2, #1
    c374:	9200      	str	r2, [sp, #0]
    c376:	2302      	movs	r3, #2
    c378:	08c9      	lsrs	r1, r1, #3
    c37a:	4620      	mov	r0, r4
    c37c:	f7fe f9cc 	bl	a718 <mp_arg_check_num>
    if (n_args == 2) {
    c380:	2c02      	cmp	r4, #2
    c382:	d008      	beq.n	c396 <dict_update+0x4e>
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    c384:	2400      	movs	r4, #0
    c386:	e054      	b.n	c432 <dict_update+0xea>
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    c388:	4b38      	ldr	r3, [pc, #224]	; (c46c <dict_update+0x124>)
    c38a:	4a39      	ldr	r2, [pc, #228]	; (c470 <dict_update+0x128>)
    c38c:	f240 1145 	movw	r1, #325	; 0x145
    c390:	4838      	ldr	r0, [pc, #224]	; (c474 <dict_update+0x12c>)
    c392:	f00c f8e3 	bl	1855c <__assert_func>
        if (MP_OBJ_IS_DICT_TYPE(args[1])) {
    c396:	6868      	ldr	r0, [r5, #4]
    c398:	f010 0f03 	tst.w	r0, #3
    c39c:	d104      	bne.n	c3a8 <dict_update+0x60>
    c39e:	6803      	ldr	r3, [r0, #0]
    c3a0:	68da      	ldr	r2, [r3, #12]
    c3a2:	4b31      	ldr	r3, [pc, #196]	; (c468 <dict_update+0x120>)
    c3a4:	429a      	cmp	r2, r3
    c3a6:	d024      	beq.n	c3f2 <dict_update+0xaa>
            mp_obj_t iter = mp_getiter(args[1], NULL);
    c3a8:	2100      	movs	r1, #0
    c3aa:	f7fd fab1 	bl	9910 <mp_getiter>
    c3ae:	4682      	mov	sl, r0
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    c3b0:	4650      	mov	r0, sl
    c3b2:	f7fd fb1b 	bl	99ec <mp_iternext>
    c3b6:	2804      	cmp	r0, #4
    c3b8:	d0e4      	beq.n	c384 <dict_update+0x3c>
                mp_obj_t inneriter = mp_getiter(next, NULL);
    c3ba:	2100      	movs	r1, #0
    c3bc:	f7fd faa8 	bl	9910 <mp_getiter>
    c3c0:	4604      	mov	r4, r0
                mp_obj_t key = mp_iternext(inneriter);
    c3c2:	f7fd fb13 	bl	99ec <mp_iternext>
    c3c6:	4606      	mov	r6, r0
                mp_obj_t value = mp_iternext(inneriter);
    c3c8:	4620      	mov	r0, r4
    c3ca:	f7fd fb0f 	bl	99ec <mp_iternext>
    c3ce:	4605      	mov	r5, r0
                mp_obj_t stop = mp_iternext(inneriter);
    c3d0:	4620      	mov	r0, r4
    c3d2:	f7fd fb0b 	bl	99ec <mp_iternext>
                if (key == MP_OBJ_STOP_ITERATION
    c3d6:	2e04      	cmp	r6, #4
    c3d8:	d021      	beq.n	c41e <dict_update+0xd6>
                    || value == MP_OBJ_STOP_ITERATION
    c3da:	2d04      	cmp	r5, #4
    c3dc:	d01f      	beq.n	c41e <dict_update+0xd6>
                    || stop != MP_OBJ_STOP_ITERATION) {
    c3de:	2804      	cmp	r0, #4
    c3e0:	d11d      	bne.n	c41e <dict_update+0xd6>
                    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    c3e2:	2201      	movs	r2, #1
    c3e4:	4631      	mov	r1, r6
    c3e6:	f108 0004 	add.w	r0, r8, #4
    c3ea:	f7fe faa5 	bl	a938 <mp_map_lookup>
    c3ee:	6045      	str	r5, [r0, #4]
    c3f0:	e7de      	b.n	c3b0 <dict_update+0x68>
            if (args[1] != args[0]) {
    c3f2:	682b      	ldr	r3, [r5, #0]
    c3f4:	4298      	cmp	r0, r3
    c3f6:	d0c5      	beq.n	c384 <dict_update+0x3c>
                size_t cur = 0;
    c3f8:	2300      	movs	r3, #0
    c3fa:	9303      	str	r3, [sp, #12]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    c3fc:	e007      	b.n	c40e <dict_update+0xc6>
                    mp_map_lookup(&self->map, elem->key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = elem->value;
    c3fe:	2201      	movs	r2, #1
    c400:	6821      	ldr	r1, [r4, #0]
    c402:	f108 0004 	add.w	r0, r8, #4
    c406:	f7fe fa97 	bl	a938 <mp_map_lookup>
    c40a:	6863      	ldr	r3, [r4, #4]
    c40c:	6043      	str	r3, [r0, #4]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    c40e:	a903      	add	r1, sp, #12
    c410:	6868      	ldr	r0, [r5, #4]
    c412:	f7ff fe1f 	bl	c054 <dict_iter_next>
    c416:	4604      	mov	r4, r0
    c418:	2800      	cmp	r0, #0
    c41a:	d1f0      	bne.n	c3fe <dict_update+0xb6>
    c41c:	e7b2      	b.n	c384 <dict_update+0x3c>
                    mp_raise_ValueError("dict update sequence has wrong length");
    c41e:	4816      	ldr	r0, [pc, #88]	; (c478 <dict_update+0x130>)
    c420:	f7fd ff42 	bl	a2a8 <mp_raise_ValueError>
    c424:	464b      	mov	r3, r9
    c426:	e000      	b.n	c42a <dict_update+0xe2>
    c428:	464b      	mov	r3, r9
        if (MP_MAP_SLOT_IS_FILLED(kwargs, i)) {
    c42a:	f013 0f01 	tst.w	r3, #1
    c42e:	d10e      	bne.n	c44e <dict_update+0x106>
    for (size_t i = 0; i < kwargs->alloc; i++) {
    c430:	3401      	adds	r4, #1
    c432:	687b      	ldr	r3, [r7, #4]
    c434:	42a3      	cmp	r3, r4
    c436:	d912      	bls.n	c45e <dict_update+0x116>
    c438:	68bb      	ldr	r3, [r7, #8]
    c43a:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
    c43e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    c442:	2900      	cmp	r1, #0
    c444:	d0f0      	beq.n	c428 <dict_update+0xe0>
    c446:	2908      	cmp	r1, #8
    c448:	d0ec      	beq.n	c424 <dict_update+0xdc>
    c44a:	2301      	movs	r3, #1
    c44c:	e7ed      	b.n	c42a <dict_update+0xe2>
            mp_map_lookup(&self->map, kwargs->table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = kwargs->table[i].value;
    c44e:	2201      	movs	r2, #1
    c450:	f108 0004 	add.w	r0, r8, #4
    c454:	f7fe fa70 	bl	a938 <mp_map_lookup>
    c458:	686b      	ldr	r3, [r5, #4]
    c45a:	6043      	str	r3, [r0, #4]
    c45c:	e7e8      	b.n	c430 <dict_update+0xe8>
}
    c45e:	4807      	ldr	r0, [pc, #28]	; (c47c <dict_update+0x134>)
    c460:	b004      	add	sp, #16
    c462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c466:	bf00      	nop
    c468:	0000c7c1 	.word	0x0000c7c1
    c46c:	00026380 	.word	0x00026380
    c470:	00026188 	.word	0x00026188
    c474:	00026478 	.word	0x00026478
    c478:	000263e0 	.word	0x000263e0
    c47c:	00027b40 	.word	0x00027b40

0000c480 <dict_get_helper>:
STATIC mp_obj_t dict_get_helper(size_t n_args, const mp_obj_t *args, mp_map_lookup_kind_t lookup_kind) {
    c480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    c482:	680c      	ldr	r4, [r1, #0]
    c484:	f014 0f03 	tst.w	r4, #3
    c488:	d116      	bne.n	c4b8 <dict_get_helper+0x38>
    c48a:	4607      	mov	r7, r0
    c48c:	460e      	mov	r6, r1
    c48e:	4615      	mov	r5, r2
    c490:	6823      	ldr	r3, [r4, #0]
    c492:	68da      	ldr	r2, [r3, #12]
    c494:	4b17      	ldr	r3, [pc, #92]	; (c4f4 <dict_get_helper+0x74>)
    c496:	429a      	cmp	r2, r3
    c498:	d10e      	bne.n	c4b8 <dict_get_helper+0x38>
    if (lookup_kind != MP_MAP_LOOKUP) {
    c49a:	b9a5      	cbnz	r5, c4c6 <dict_get_helper+0x46>
    mp_map_elem_t *elem = mp_map_lookup(&self->map, args[1], lookup_kind);
    c49c:	462a      	mov	r2, r5
    c49e:	6871      	ldr	r1, [r6, #4]
    c4a0:	1d20      	adds	r0, r4, #4
    c4a2:	f7fe fa49 	bl	a938 <mp_map_lookup>
    if (elem == NULL || elem->value == MP_OBJ_NULL) {
    c4a6:	4603      	mov	r3, r0
    c4a8:	b188      	cbz	r0, c4ce <dict_get_helper+0x4e>
    c4aa:	6840      	ldr	r0, [r0, #4]
    c4ac:	b178      	cbz	r0, c4ce <dict_get_helper+0x4e>
        if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    c4ae:	2d02      	cmp	r5, #2
    c4b0:	d112      	bne.n	c4d8 <dict_get_helper+0x58>
            elem->value = MP_OBJ_NULL; // so that GC can collect the deleted value
    c4b2:	2200      	movs	r2, #0
    c4b4:	605a      	str	r2, [r3, #4]
    return value;
    c4b6:	e00f      	b.n	c4d8 <dict_get_helper+0x58>
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    c4b8:	4b0f      	ldr	r3, [pc, #60]	; (c4f8 <dict_get_helper+0x78>)
    c4ba:	4a10      	ldr	r2, [pc, #64]	; (c4fc <dict_get_helper+0x7c>)
    c4bc:	f240 1105 	movw	r1, #261	; 0x105
    c4c0:	480f      	ldr	r0, [pc, #60]	; (c500 <dict_get_helper+0x80>)
    c4c2:	f00c f84b 	bl	1855c <__assert_func>
        mp_ensure_not_fixed(self);
    c4c6:	4620      	mov	r0, r4
    c4c8:	f7ff ff34 	bl	c334 <mp_ensure_not_fixed>
    c4cc:	e7e6      	b.n	c49c <dict_get_helper+0x1c>
        if (n_args == 2) {
    c4ce:	2f02      	cmp	r7, #2
    c4d0:	d003      	beq.n	c4da <dict_get_helper+0x5a>
            value = args[2];
    c4d2:	68b0      	ldr	r0, [r6, #8]
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    c4d4:	2d01      	cmp	r5, #1
    c4d6:	d00a      	beq.n	c4ee <dict_get_helper+0x6e>
}
    c4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    c4da:	2d02      	cmp	r5, #2
    c4dc:	d001      	beq.n	c4e2 <dict_get_helper+0x62>
                value = mp_const_none;
    c4de:	4809      	ldr	r0, [pc, #36]	; (c504 <dict_get_helper+0x84>)
    c4e0:	e7f8      	b.n	c4d4 <dict_get_helper+0x54>
                nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, args[1]));
    c4e2:	6871      	ldr	r1, [r6, #4]
    c4e4:	4808      	ldr	r0, [pc, #32]	; (c508 <dict_get_helper+0x88>)
    c4e6:	f000 fae5 	bl	cab4 <mp_obj_new_exception_arg1>
    c4ea:	f7f4 f9c9 	bl	880 <nlr_jump>
            elem->value = value;
    c4ee:	6058      	str	r0, [r3, #4]
    c4f0:	e7f2      	b.n	c4d8 <dict_get_helper+0x58>
    c4f2:	bf00      	nop
    c4f4:	0000c7c1 	.word	0x0000c7c1
    c4f8:	00026380 	.word	0x00026380
    c4fc:	00026168 	.word	0x00026168
    c500:	00026478 	.word	0x00026478
    c504:	00027b40 	.word	0x00027b40
    c508:	000269b4 	.word	0x000269b4

0000c50c <dict_setdefault>:
STATIC mp_obj_t dict_setdefault(size_t n_args, const mp_obj_t *args) {
    c50c:	b508      	push	{r3, lr}
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    c50e:	2201      	movs	r2, #1
    c510:	f7ff ffb6 	bl	c480 <dict_get_helper>
}
    c514:	bd08      	pop	{r3, pc}

0000c516 <dict_pop>:
STATIC mp_obj_t dict_pop(size_t n_args, const mp_obj_t *args) {
    c516:	b508      	push	{r3, lr}
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    c518:	2202      	movs	r2, #2
    c51a:	f7ff ffb1 	bl	c480 <dict_get_helper>
}
    c51e:	bd08      	pop	{r3, pc}

0000c520 <dict_get>:
STATIC mp_obj_t dict_get(size_t n_args, const mp_obj_t *args) {
    c520:	b508      	push	{r3, lr}
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP);
    c522:	2200      	movs	r2, #0
    c524:	f7ff ffac 	bl	c480 <dict_get_helper>
}
    c528:	bd08      	pop	{r3, pc}
	...

0000c52c <dict_popitem>:
STATIC mp_obj_t dict_popitem(mp_obj_t self_in) {
    c52c:	b510      	push	{r4, lr}
    c52e:	b084      	sub	sp, #16
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c530:	f010 0f03 	tst.w	r0, #3
    c534:	d125      	bne.n	c582 <dict_popitem+0x56>
    c536:	4604      	mov	r4, r0
    c538:	6803      	ldr	r3, [r0, #0]
    c53a:	68da      	ldr	r2, [r3, #12]
    c53c:	4b16      	ldr	r3, [pc, #88]	; (c598 <dict_popitem+0x6c>)
    c53e:	429a      	cmp	r2, r3
    c540:	d11f      	bne.n	c582 <dict_popitem+0x56>
    mp_ensure_not_fixed(self);
    c542:	f7ff fef7 	bl	c334 <mp_ensure_not_fixed>
    size_t cur = 0;
    c546:	a904      	add	r1, sp, #16
    c548:	2300      	movs	r3, #0
    c54a:	f841 3d04 	str.w	r3, [r1, #-4]!
    mp_map_elem_t *next = dict_iter_next(self, &cur);
    c54e:	4620      	mov	r0, r4
    c550:	f7ff fd80 	bl	c054 <dict_iter_next>
    if (next == NULL) {
    c554:	b1e0      	cbz	r0, c590 <dict_popitem+0x64>
    self->map.used--;
    c556:	6863      	ldr	r3, [r4, #4]
    c558:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    c55c:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
    c560:	f361 03df 	bfi	r3, r1, #3, #29
    c564:	6063      	str	r3, [r4, #4]
    mp_obj_t items[] = {next->key, next->value};
    c566:	6803      	ldr	r3, [r0, #0]
    c568:	9301      	str	r3, [sp, #4]
    c56a:	6843      	ldr	r3, [r0, #4]
    c56c:	9302      	str	r3, [sp, #8]
    next->key = MP_OBJ_SENTINEL; // must mark key as sentinel to indicate that it was deleted
    c56e:	2308      	movs	r3, #8
    c570:	6003      	str	r3, [r0, #0]
    next->value = MP_OBJ_NULL;
    c572:	2300      	movs	r3, #0
    c574:	6043      	str	r3, [r0, #4]
    mp_obj_t tuple = mp_obj_new_tuple(2, items);
    c576:	a901      	add	r1, sp, #4
    c578:	2002      	movs	r0, #2
    c57a:	f005 f963 	bl	11844 <mp_obj_new_tuple>
}
    c57e:	b004      	add	sp, #16
    c580:	bd10      	pop	{r4, pc}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c582:	4b06      	ldr	r3, [pc, #24]	; (c59c <dict_popitem+0x70>)
    c584:	4a06      	ldr	r2, [pc, #24]	; (c5a0 <dict_popitem+0x74>)
    c586:	f44f 7199 	mov.w	r1, #306	; 0x132
    c58a:	4806      	ldr	r0, [pc, #24]	; (c5a4 <dict_popitem+0x78>)
    c58c:	f00b ffe6 	bl	1855c <__assert_func>
        mp_raise_msg(&mp_type_KeyError, "popitem(): dictionary is empty");
    c590:	4905      	ldr	r1, [pc, #20]	; (c5a8 <dict_popitem+0x7c>)
    c592:	4806      	ldr	r0, [pc, #24]	; (c5ac <dict_popitem+0x80>)
    c594:	f7fd fe68 	bl	a268 <mp_raise_msg>
    c598:	0000c7c1 	.word	0x0000c7c1
    c59c:	00026244 	.word	0x00026244
    c5a0:	00026178 	.word	0x00026178
    c5a4:	00026478 	.word	0x00026478
    c5a8:	00026340 	.word	0x00026340
    c5ac:	000269b4 	.word	0x000269b4

0000c5b0 <dict_clear>:
STATIC mp_obj_t dict_clear(mp_obj_t self_in) {
    c5b0:	b510      	push	{r4, lr}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c5b2:	f010 0f03 	tst.w	r0, #3
    c5b6:	d10c      	bne.n	c5d2 <dict_clear+0x22>
    c5b8:	4604      	mov	r4, r0
    c5ba:	6803      	ldr	r3, [r0, #0]
    c5bc:	68da      	ldr	r2, [r3, #12]
    c5be:	4b08      	ldr	r3, [pc, #32]	; (c5e0 <dict_clear+0x30>)
    c5c0:	429a      	cmp	r2, r3
    c5c2:	d106      	bne.n	c5d2 <dict_clear+0x22>
    mp_ensure_not_fixed(self);
    c5c4:	f7ff feb6 	bl	c334 <mp_ensure_not_fixed>
    mp_map_clear(&self->map);
    c5c8:	1d20      	adds	r0, r4, #4
    c5ca:	f7fe f99d 	bl	a908 <mp_map_clear>
}
    c5ce:	4805      	ldr	r0, [pc, #20]	; (c5e4 <dict_clear+0x34>)
    c5d0:	bd10      	pop	{r4, pc}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c5d2:	4b05      	ldr	r3, [pc, #20]	; (c5e8 <dict_clear+0x38>)
    c5d4:	4a05      	ldr	r2, [pc, #20]	; (c5ec <dict_clear+0x3c>)
    c5d6:	21cd      	movs	r1, #205	; 0xcd
    c5d8:	4805      	ldr	r0, [pc, #20]	; (c5f0 <dict_clear+0x40>)
    c5da:	f00b ffbf 	bl	1855c <__assert_func>
    c5de:	bf00      	nop
    c5e0:	0000c7c1 	.word	0x0000c7c1
    c5e4:	00027b40 	.word	0x00027b40
    c5e8:	00026244 	.word	0x00026244
    c5ec:	00026150 	.word	0x00026150
    c5f0:	00026478 	.word	0x00026478

0000c5f4 <dict_binary_op>:
STATIC mp_obj_t dict_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    c5f4:	b570      	push	{r4, r5, r6, lr}
    c5f6:	b082      	sub	sp, #8
    c5f8:	460d      	mov	r5, r1
    c5fa:	4614      	mov	r4, r2
    switch (op) {
    c5fc:	2802      	cmp	r0, #2
    c5fe:	d00a      	beq.n	c616 <dict_binary_op+0x22>
    c600:	2822      	cmp	r0, #34	; 0x22
    c602:	d133      	bne.n	c66c <dict_binary_op+0x78>
            mp_map_elem_t *elem = mp_map_lookup(&o->map, rhs_in, MP_MAP_LOOKUP);
    c604:	2200      	movs	r2, #0
    c606:	4621      	mov	r1, r4
    c608:	1d28      	adds	r0, r5, #4
    c60a:	f7fe f995 	bl	a938 <mp_map_lookup>
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    c60e:	2800      	cmp	r0, #0
    c610:	d02f      	beq.n	c672 <dict_binary_op+0x7e>
    c612:	481a      	ldr	r0, [pc, #104]	; (c67c <dict_binary_op+0x88>)
    c614:	e02b      	b.n	c66e <dict_binary_op+0x7a>
            if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
    c616:	f012 0f03 	tst.w	r2, #3
    c61a:	d12c      	bne.n	c676 <dict_binary_op+0x82>
    c61c:	6812      	ldr	r2, [r2, #0]
    c61e:	4b18      	ldr	r3, [pc, #96]	; (c680 <dict_binary_op+0x8c>)
    c620:	429a      	cmp	r2, r3
    c622:	d001      	beq.n	c628 <dict_binary_op+0x34>
                return mp_const_false;
    c624:	4817      	ldr	r0, [pc, #92]	; (c684 <dict_binary_op+0x90>)
    c626:	e022      	b.n	c66e <dict_binary_op+0x7a>
                if (o->map.used != rhs->map.used) {
    c628:	684b      	ldr	r3, [r1, #4]
    c62a:	6862      	ldr	r2, [r4, #4]
    c62c:	4053      	eors	r3, r2
    c62e:	f033 0307 	bics.w	r3, r3, #7
    c632:	d117      	bne.n	c664 <dict_binary_op+0x70>
                size_t cur = 0;
    c634:	2300      	movs	r3, #0
    c636:	9301      	str	r3, [sp, #4]
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    c638:	a901      	add	r1, sp, #4
    c63a:	4628      	mov	r0, r5
    c63c:	f7ff fd0a 	bl	c054 <dict_iter_next>
    c640:	4606      	mov	r6, r0
    c642:	b168      	cbz	r0, c660 <dict_binary_op+0x6c>
                    mp_map_elem_t *elem = mp_map_lookup(&rhs->map, next->key, MP_MAP_LOOKUP);
    c644:	2200      	movs	r2, #0
    c646:	6831      	ldr	r1, [r6, #0]
    c648:	1d20      	adds	r0, r4, #4
    c64a:	f7fe f975 	bl	a938 <mp_map_lookup>
                    if (elem == NULL || !mp_obj_equal(next->value, elem->value)) {
    c64e:	b158      	cbz	r0, c668 <dict_binary_op+0x74>
    c650:	6841      	ldr	r1, [r0, #4]
    c652:	6870      	ldr	r0, [r6, #4]
    c654:	f7fe fb48 	bl	ace8 <mp_obj_equal>
    c658:	2800      	cmp	r0, #0
    c65a:	d1ed      	bne.n	c638 <dict_binary_op+0x44>
                        return mp_const_false;
    c65c:	4809      	ldr	r0, [pc, #36]	; (c684 <dict_binary_op+0x90>)
    c65e:	e006      	b.n	c66e <dict_binary_op+0x7a>
                return mp_const_true;
    c660:	4806      	ldr	r0, [pc, #24]	; (c67c <dict_binary_op+0x88>)
    c662:	e004      	b.n	c66e <dict_binary_op+0x7a>
                    return mp_const_false;
    c664:	4807      	ldr	r0, [pc, #28]	; (c684 <dict_binary_op+0x90>)
    c666:	e002      	b.n	c66e <dict_binary_op+0x7a>
                        return mp_const_false;
    c668:	4806      	ldr	r0, [pc, #24]	; (c684 <dict_binary_op+0x90>)
    c66a:	e000      	b.n	c66e <dict_binary_op+0x7a>
            return MP_OBJ_NULL;
    c66c:	2000      	movs	r0, #0
}
    c66e:	b002      	add	sp, #8
    c670:	bd70      	pop	{r4, r5, r6, pc}
    c672:	4804      	ldr	r0, [pc, #16]	; (c684 <dict_binary_op+0x90>)
    c674:	e7fb      	b.n	c66e <dict_binary_op+0x7a>
                return mp_const_false;
    c676:	4803      	ldr	r0, [pc, #12]	; (c684 <dict_binary_op+0x90>)
    c678:	e7f9      	b.n	c66e <dict_binary_op+0x7a>
    c67a:	bf00      	nop
    c67c:	00025f4c 	.word	0x00025f4c
    c680:	000265d0 	.word	0x000265d0
    c684:	00025f44 	.word	0x00025f44

0000c688 <dict_view_binary_op>:
STATIC mp_obj_t dict_view_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    c688:	b508      	push	{r3, lr}
    if (o->kind != MP_DICT_VIEW_KEYS) {
    c68a:	7a0b      	ldrb	r3, [r1, #8]
    c68c:	2b01      	cmp	r3, #1
    c68e:	d105      	bne.n	c69c <dict_view_binary_op+0x14>
    if (op != MP_BINARY_OP_CONTAINS) {
    c690:	2822      	cmp	r0, #34	; 0x22
    c692:	d105      	bne.n	c6a0 <dict_view_binary_op+0x18>
    return dict_binary_op(op, o->dict, rhs_in);
    c694:	6849      	ldr	r1, [r1, #4]
    c696:	f7ff ffad 	bl	c5f4 <dict_binary_op>
}
    c69a:	bd08      	pop	{r3, pc}
        return MP_OBJ_NULL; // op not supported
    c69c:	2000      	movs	r0, #0
    c69e:	e7fc      	b.n	c69a <dict_view_binary_op+0x12>
        return MP_OBJ_NULL; // op not supported
    c6a0:	2000      	movs	r0, #0
    c6a2:	e7fa      	b.n	c69a <dict_view_binary_op+0x12>

0000c6a4 <mp_obj_dict_get>:
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index) {
    c6a4:	b510      	push	{r4, lr}
    c6a6:	460c      	mov	r4, r1
    mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    c6a8:	2200      	movs	r2, #0
    c6aa:	3004      	adds	r0, #4
    c6ac:	f7fe f944 	bl	a938 <mp_map_lookup>
    if (elem == NULL) {
    c6b0:	b108      	cbz	r0, c6b6 <mp_obj_dict_get+0x12>
}
    c6b2:	6840      	ldr	r0, [r0, #4]
    c6b4:	bd10      	pop	{r4, pc}
        nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    c6b6:	4621      	mov	r1, r4
    c6b8:	4802      	ldr	r0, [pc, #8]	; (c6c4 <mp_obj_dict_get+0x20>)
    c6ba:	f000 f9fb 	bl	cab4 <mp_obj_new_exception_arg1>
    c6be:	f7f4 f8df 	bl	880 <nlr_jump>
    c6c2:	bf00      	nop
    c6c4:	000269b4 	.word	0x000269b4

0000c6c8 <mp_obj_dict_init>:
    .parent = &mp_type_dict,
    .locals_dict = (mp_obj_dict_t*)&dict_locals_dict,
};
#endif

void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args) {
    c6c8:	b508      	push	{r3, lr}
    dict->base.type = &mp_type_dict;
    c6ca:	4b03      	ldr	r3, [pc, #12]	; (c6d8 <mp_obj_dict_init+0x10>)
    c6cc:	f840 3b04 	str.w	r3, [r0], #4
    mp_map_init(&dict->map, n_args);
    c6d0:	f7fe f8f6 	bl	a8c0 <mp_map_init>
}
    c6d4:	bd08      	pop	{r3, pc}
    c6d6:	bf00      	nop
    c6d8:	000265d0 	.word	0x000265d0

0000c6dc <mp_obj_new_dict>:

mp_obj_t mp_obj_new_dict(size_t n_args) {
    c6dc:	b538      	push	{r3, r4, r5, lr}
    c6de:	4605      	mov	r5, r0
    mp_obj_dict_t *o = m_new_obj(mp_obj_dict_t);
    c6e0:	2010      	movs	r0, #16
    c6e2:	f7f4 f8eb 	bl	8bc <m_malloc>
    c6e6:	4604      	mov	r4, r0
    mp_obj_dict_init(o, n_args);
    c6e8:	4629      	mov	r1, r5
    c6ea:	f7ff ffed 	bl	c6c8 <mp_obj_dict_init>
    return MP_OBJ_FROM_PTR(o);
}
    c6ee:	4620      	mov	r0, r4
    c6f0:	bd38      	pop	{r3, r4, r5, pc}
	...

0000c6f4 <dict_fromkeys>:
STATIC mp_obj_t dict_fromkeys(size_t n_args, const mp_obj_t *args) {
    c6f4:	b570      	push	{r4, r5, r6, lr}
    c6f6:	4606      	mov	r6, r0
    c6f8:	460c      	mov	r4, r1
    mp_obj_t iter = mp_getiter(args[1], NULL);
    c6fa:	2100      	movs	r1, #0
    c6fc:	6860      	ldr	r0, [r4, #4]
    c6fe:	f7fd f907 	bl	9910 <mp_getiter>
    c702:	4605      	mov	r5, r0
    if (n_args > 2) {
    c704:	2e02      	cmp	r6, #2
    c706:	d909      	bls.n	c71c <dict_fromkeys+0x28>
        value = args[2];
    c708:	68a6      	ldr	r6, [r4, #8]
    mp_obj_t len = mp_obj_len_maybe(args[1]);
    c70a:	6860      	ldr	r0, [r4, #4]
    c70c:	f7fe fd0c 	bl	b128 <mp_obj_len_maybe>
    if (len == MP_OBJ_NULL) {
    c710:	b130      	cbz	r0, c720 <dict_fromkeys+0x2c>
        self_out = mp_obj_new_dict(MP_OBJ_SMALL_INT_VALUE(len));
    c712:	1040      	asrs	r0, r0, #1
    c714:	f7ff ffe2 	bl	c6dc <mp_obj_new_dict>
    c718:	4604      	mov	r4, r0
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    c71a:	e00b      	b.n	c734 <dict_fromkeys+0x40>
    mp_obj_t value = mp_const_none;
    c71c:	4e09      	ldr	r6, [pc, #36]	; (c744 <dict_fromkeys+0x50>)
    c71e:	e7f4      	b.n	c70a <dict_fromkeys+0x16>
        self_out = mp_obj_new_dict(0);
    c720:	f7ff ffdc 	bl	c6dc <mp_obj_new_dict>
    c724:	4604      	mov	r4, r0
    c726:	e005      	b.n	c734 <dict_fromkeys+0x40>
        mp_map_lookup(&self->map, next, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    c728:	2201      	movs	r2, #1
    c72a:	4601      	mov	r1, r0
    c72c:	1d20      	adds	r0, r4, #4
    c72e:	f7fe f903 	bl	a938 <mp_map_lookup>
    c732:	6046      	str	r6, [r0, #4]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    c734:	4628      	mov	r0, r5
    c736:	f7fd f959 	bl	99ec <mp_iternext>
    c73a:	2804      	cmp	r0, #4
    c73c:	d1f4      	bne.n	c728 <dict_fromkeys+0x34>
}
    c73e:	4620      	mov	r0, r4
    c740:	bd70      	pop	{r4, r5, r6, pc}
    c742:	bf00      	nop
    c744:	00027b40 	.word	0x00027b40

0000c748 <dict_copy>:
STATIC mp_obj_t dict_copy(mp_obj_t self_in) {
    c748:	b538      	push	{r3, r4, r5, lr}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c74a:	f010 0f03 	tst.w	r0, #3
    c74e:	d128      	bne.n	c7a2 <dict_copy+0x5a>
    c750:	4604      	mov	r4, r0
    c752:	6803      	ldr	r3, [r0, #0]
    c754:	68da      	ldr	r2, [r3, #12]
    c756:	4b16      	ldr	r3, [pc, #88]	; (c7b0 <dict_copy+0x68>)
    c758:	429a      	cmp	r2, r3
    c75a:	d122      	bne.n	c7a2 <dict_copy+0x5a>
    mp_obj_t other_out = mp_obj_new_dict(self->map.alloc);
    c75c:	6880      	ldr	r0, [r0, #8]
    c75e:	f7ff ffbd 	bl	c6dc <mp_obj_new_dict>
    c762:	4605      	mov	r5, r0
    other->base.type = self->base.type;
    c764:	6823      	ldr	r3, [r4, #0]
    c766:	6003      	str	r3, [r0, #0]
    other->map.used = self->map.used;
    c768:	6863      	ldr	r3, [r4, #4]
    c76a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    c76e:	6842      	ldr	r2, [r0, #4]
    c770:	f363 02df 	bfi	r2, r3, #3, #29
    c774:	6042      	str	r2, [r0, #4]
    other->map.all_keys_are_qstrs = self->map.all_keys_are_qstrs;
    c776:	7922      	ldrb	r2, [r4, #4]
    c778:	7903      	ldrb	r3, [r0, #4]
    c77a:	f362 0300 	bfi	r3, r2, #0, #1
    other->map.is_fixed = 0;
    c77e:	f36f 0341 	bfc	r3, #1, #1
    c782:	7103      	strb	r3, [r0, #4]
    other->map.is_ordered = self->map.is_ordered;
    c784:	7923      	ldrb	r3, [r4, #4]
    c786:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c78a:	7902      	ldrb	r2, [r0, #4]
    c78c:	f363 0282 	bfi	r2, r3, #2, #1
    c790:	7102      	strb	r2, [r0, #4]
    memcpy(other->map.table, self->map.table, self->map.alloc * sizeof(mp_map_elem_t));
    c792:	68a2      	ldr	r2, [r4, #8]
    c794:	00d2      	lsls	r2, r2, #3
    c796:	68e1      	ldr	r1, [r4, #12]
    c798:	68c0      	ldr	r0, [r0, #12]
    c79a:	f00f f82b 	bl	1b7f4 <memcpy>
}
    c79e:	4628      	mov	r0, r5
    c7a0:	bd38      	pop	{r3, r4, r5, pc}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c7a2:	4b04      	ldr	r3, [pc, #16]	; (c7b4 <dict_copy+0x6c>)
    c7a4:	4a04      	ldr	r2, [pc, #16]	; (c7b8 <dict_copy+0x70>)
    c7a6:	21d8      	movs	r1, #216	; 0xd8
    c7a8:	4804      	ldr	r0, [pc, #16]	; (c7bc <dict_copy+0x74>)
    c7aa:	f00b fed7 	bl	1855c <__assert_func>
    c7ae:	bf00      	nop
    c7b0:	0000c7c1 	.word	0x0000c7c1
    c7b4:	00026244 	.word	0x00026244
    c7b8:	0002615c 	.word	0x0002615c
    c7bc:	00026478 	.word	0x00026478

0000c7c0 <dict_make_new>:
STATIC mp_obj_t dict_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    c7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7c4:	b086      	sub	sp, #24
    c7c6:	4680      	mov	r8, r0
    c7c8:	460d      	mov	r5, r1
    c7ca:	4617      	mov	r7, r2
    c7cc:	461e      	mov	r6, r3
    mp_obj_t dict_out = mp_obj_new_dict(0);
    c7ce:	2000      	movs	r0, #0
    c7d0:	f7ff ff84 	bl	c6dc <mp_obj_new_dict>
    c7d4:	4604      	mov	r4, r0
    dict->base.type = type;
    c7d6:	f8c0 8000 	str.w	r8, [r0]
    if (n_args > 0 || n_kw > 0) {
    c7da:	b905      	cbnz	r5, c7de <dict_make_new+0x1e>
    c7dc:	b16f      	cbz	r7, c7fa <dict_make_new+0x3a>
        mp_obj_t args2[2] = {dict_out, args[0]}; // args[0] is always valid, even if it's not a positional arg
    c7de:	9401      	str	r4, [sp, #4]
    c7e0:	6833      	ldr	r3, [r6, #0]
    c7e2:	9302      	str	r3, [sp, #8]
        mp_map_init_fixed_table(&kwargs, n_kw, args + n_args);
    c7e4:	eb06 0285 	add.w	r2, r6, r5, lsl #2
    c7e8:	4639      	mov	r1, r7
    c7ea:	a803      	add	r0, sp, #12
    c7ec:	f7fe f881 	bl	a8f2 <mp_map_init_fixed_table>
        dict_update(n_args + 1, args2, &kwargs); // dict_update will check that n_args + 1 == 1 or 2
    c7f0:	aa03      	add	r2, sp, #12
    c7f2:	a901      	add	r1, sp, #4
    c7f4:	1c68      	adds	r0, r5, #1
    c7f6:	f7ff fda7 	bl	c348 <dict_update>
}
    c7fa:	4620      	mov	r0, r4
    c7fc:	b006      	add	sp, #24
    c7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c802 <mp_obj_dict_len>:

size_t mp_obj_dict_len(mp_obj_t self_in) {
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    return self->map.used;
    c802:	6840      	ldr	r0, [r0, #4]
}
    c804:	08c0      	lsrs	r0, r0, #3
    c806:	4770      	bx	lr

0000c808 <mp_obj_dict_store>:

mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value) {
    c808:	b570      	push	{r4, r5, r6, lr}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c80a:	f010 0f03 	tst.w	r0, #3
    c80e:	d111      	bne.n	c834 <mp_obj_dict_store+0x2c>
    c810:	4604      	mov	r4, r0
    c812:	460e      	mov	r6, r1
    c814:	4615      	mov	r5, r2
    c816:	6803      	ldr	r3, [r0, #0]
    c818:	68da      	ldr	r2, [r3, #12]
    c81a:	4b0a      	ldr	r3, [pc, #40]	; (c844 <mp_obj_dict_store+0x3c>)
    c81c:	429a      	cmp	r2, r3
    c81e:	d109      	bne.n	c834 <mp_obj_dict_store+0x2c>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    mp_ensure_not_fixed(self);
    c820:	f7ff fd88 	bl	c334 <mp_ensure_not_fixed>
    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    c824:	2201      	movs	r2, #1
    c826:	4631      	mov	r1, r6
    c828:	1d20      	adds	r0, r4, #4
    c82a:	f7fe f885 	bl	a938 <mp_map_lookup>
    c82e:	6045      	str	r5, [r0, #4]
    return self_in;
}
    c830:	4620      	mov	r0, r4
    c832:	bd70      	pop	{r4, r5, r6, pc}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c834:	4b04      	ldr	r3, [pc, #16]	; (c848 <mp_obj_dict_store+0x40>)
    c836:	4a05      	ldr	r2, [pc, #20]	; (c84c <mp_obj_dict_store+0x44>)
    c838:	f240 214f 	movw	r1, #591	; 0x24f
    c83c:	4804      	ldr	r0, [pc, #16]	; (c850 <mp_obj_dict_store+0x48>)
    c83e:	f00b fe8d 	bl	1855c <__assert_func>
    c842:	bf00      	nop
    c844:	0000c7c1 	.word	0x0000c7c1
    c848:	00026244 	.word	0x00026244
    c84c:	000261ec 	.word	0x000261ec
    c850:	00026478 	.word	0x00026478

0000c854 <mp_obj_dict_delete>:

mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key) {
    c854:	b510      	push	{r4, lr}
    c856:	b082      	sub	sp, #8
    c858:	4604      	mov	r4, r0
    mp_obj_t args[2] = {self_in, key};
    c85a:	9000      	str	r0, [sp, #0]
    c85c:	9101      	str	r1, [sp, #4]
    dict_get_helper(2, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    c85e:	2202      	movs	r2, #2
    c860:	4669      	mov	r1, sp
    c862:	4610      	mov	r0, r2
    c864:	f7ff fe0c 	bl	c480 <dict_get_helper>
    return self_in;
}
    c868:	4620      	mov	r0, r4
    c86a:	b002      	add	sp, #8
    c86c:	bd10      	pop	{r4, pc}
	...

0000c870 <dict_subscr>:
STATIC mp_obj_t dict_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    c870:	b510      	push	{r4, lr}
    c872:	460c      	mov	r4, r1
    if (value == MP_OBJ_NULL) {
    c874:	b12a      	cbz	r2, c882 <dict_subscr+0x12>
    } else if (value == MP_OBJ_SENTINEL) {
    c876:	2a08      	cmp	r2, #8
    c878:	d007      	beq.n	c88a <dict_subscr+0x1a>
        mp_obj_dict_store(self_in, index, value);
    c87a:	f7ff ffc5 	bl	c808 <mp_obj_dict_store>
        return mp_const_none;
    c87e:	4809      	ldr	r0, [pc, #36]	; (c8a4 <dict_subscr+0x34>)
}
    c880:	bd10      	pop	{r4, pc}
        mp_obj_dict_delete(self_in, index);
    c882:	f7ff ffe7 	bl	c854 <mp_obj_dict_delete>
        return mp_const_none;
    c886:	4807      	ldr	r0, [pc, #28]	; (c8a4 <dict_subscr+0x34>)
    c888:	e7fa      	b.n	c880 <dict_subscr+0x10>
        mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    c88a:	2200      	movs	r2, #0
    c88c:	3004      	adds	r0, #4
    c88e:	f7fe f853 	bl	a938 <mp_map_lookup>
        if (elem == NULL) {
    c892:	b108      	cbz	r0, c898 <dict_subscr+0x28>
            return elem->value;
    c894:	6840      	ldr	r0, [r0, #4]
    c896:	e7f3      	b.n	c880 <dict_subscr+0x10>
            nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    c898:	4621      	mov	r1, r4
    c89a:	4803      	ldr	r0, [pc, #12]	; (c8a8 <dict_subscr+0x38>)
    c89c:	f000 f90a 	bl	cab4 <mp_obj_new_exception_arg1>
    c8a0:	f7f3 ffee 	bl	880 <nlr_jump>
    c8a4:	00027b40 	.word	0x00027b40
    c8a8:	000269b4 	.word	0x000269b4

0000c8ac <mp_obj_dict_get_map>:

mp_map_t *mp_obj_dict_get_map(mp_obj_t self_in) {
    c8ac:	b508      	push	{r3, lr}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c8ae:	f010 0f03 	tst.w	r0, #3
    c8b2:	d106      	bne.n	c8c2 <mp_obj_dict_get_map+0x16>
    c8b4:	6803      	ldr	r3, [r0, #0]
    c8b6:	68da      	ldr	r2, [r3, #12]
    c8b8:	4b05      	ldr	r3, [pc, #20]	; (c8d0 <mp_obj_dict_get_map+0x24>)
    c8ba:	429a      	cmp	r2, r3
    c8bc:	d101      	bne.n	c8c2 <mp_obj_dict_get_map+0x16>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    return &self->map;
}
    c8be:	3004      	adds	r0, #4
    c8c0:	bd08      	pop	{r3, pc}
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    c8c2:	4b04      	ldr	r3, [pc, #16]	; (c8d4 <mp_obj_dict_get_map+0x28>)
    c8c4:	4a04      	ldr	r2, [pc, #16]	; (c8d8 <mp_obj_dict_get_map+0x2c>)
    c8c6:	f240 215d 	movw	r1, #605	; 0x25d
    c8ca:	4804      	ldr	r0, [pc, #16]	; (c8dc <mp_obj_dict_get_map+0x30>)
    c8cc:	f00b fe46 	bl	1855c <__assert_func>
    c8d0:	0000c7c1 	.word	0x0000c7c1
    c8d4:	00026244 	.word	0x00026244
    c8d8:	00026200 	.word	0x00026200
    c8dc:	00026478 	.word	0x00026478

0000c8e0 <mp_obj_exception_print>:
// Instance of GeneratorExit exception - needed by generator.close()
// This would belong to objgenerator.c, but to keep mp_obj_exception_t
// definition module-private so far, have it here.
const mp_obj_exception_t mp_const_GeneratorExit_obj = {{&mp_type_GeneratorExit}, 0, 0, NULL, (mp_obj_tuple_t*)&mp_const_empty_tuple_obj};

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8e2:	4607      	mov	r7, r0
    c8e4:	460e      	mov	r6, r1
    c8e6:	4615      	mov	r5, r2
    mp_obj_exception_t *o = MP_OBJ_TO_PTR(o_in);
    mp_print_kind_t k = kind & ~PRINT_EXC_SUBCLASS;
    c8e8:	f002 047f 	and.w	r4, r2, #127	; 0x7f
    bool is_subclass = kind & PRINT_EXC_SUBCLASS;
    if (!is_subclass && (k == PRINT_REPR || k == PRINT_EXC)) {
    c8ec:	f012 0f80 	tst.w	r2, #128	; 0x80
    c8f0:	d103      	bne.n	c8fa <mp_obj_exception_print+0x1a>
    c8f2:	1e63      	subs	r3, r4, #1
    c8f4:	b2db      	uxtb	r3, r3
    c8f6:	2b01      	cmp	r3, #1
    c8f8:	d90a      	bls.n	c910 <mp_obj_exception_print+0x30>
        mp_print_str(print, qstr_str(o->base.type->name));
    }

    if (k == PRINT_EXC) {
    c8fa:	2c02      	cmp	r4, #2
    c8fc:	d011      	beq.n	c922 <mp_obj_exception_print+0x42>
        mp_print_str(print, ": ");
    }

    if (k == PRINT_STR || k == PRINT_EXC) {
    c8fe:	b1ac      	cbz	r4, c92c <mp_obj_exception_print+0x4c>
    c900:	2c02      	cmp	r4, #2
    c902:	d013      	beq.n	c92c <mp_obj_exception_print+0x4c>
            #endif
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
            return;
        }
    }
    mp_obj_tuple_print(print, MP_OBJ_FROM_PTR(o->args), kind);
    c904:	462a      	mov	r2, r5
    c906:	68f1      	ldr	r1, [r6, #12]
    c908:	4638      	mov	r0, r7
    c90a:	f004 feaf 	bl	1166c <mp_obj_tuple_print>
}
    c90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mp_print_str(print, qstr_str(o->base.type->name));
    c910:	680b      	ldr	r3, [r1, #0]
    c912:	6858      	ldr	r0, [r3, #4]
    c914:	f7f4 febd 	bl	1692 <qstr_str>
    c918:	4601      	mov	r1, r0
    c91a:	4638      	mov	r0, r7
    c91c:	f7f5 f80f 	bl	193e <mp_print_str>
    c920:	e7eb      	b.n	c8fa <mp_obj_exception_print+0x1a>
        mp_print_str(print, ": ");
    c922:	490b      	ldr	r1, [pc, #44]	; (c950 <mp_obj_exception_print+0x70>)
    c924:	4638      	mov	r0, r7
    c926:	f7f5 f80a 	bl	193e <mp_print_str>
    c92a:	e7e8      	b.n	c8fe <mp_obj_exception_print+0x1e>
        if (o->args == NULL || o->args->len == 0) {
    c92c:	68f3      	ldr	r3, [r6, #12]
    c92e:	b14b      	cbz	r3, c944 <mp_obj_exception_print+0x64>
    c930:	685a      	ldr	r2, [r3, #4]
    c932:	b13a      	cbz	r2, c944 <mp_obj_exception_print+0x64>
        } else if (o->args->len == 1) {
    c934:	2a01      	cmp	r2, #1
    c936:	d1e5      	bne.n	c904 <mp_obj_exception_print+0x24>
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
    c938:	2200      	movs	r2, #0
    c93a:	6899      	ldr	r1, [r3, #8]
    c93c:	4638      	mov	r0, r7
    c93e:	f7fe f93f 	bl	abc0 <mp_obj_print_helper>
            return;
    c942:	e7e4      	b.n	c90e <mp_obj_exception_print+0x2e>
            mp_print_str(print, "");
    c944:	4903      	ldr	r1, [pc, #12]	; (c954 <mp_obj_exception_print+0x74>)
    c946:	4638      	mov	r0, r7
    c948:	f7f4 fff9 	bl	193e <mp_print_str>
            return;
    c94c:	e7df      	b.n	c90e <mp_obj_exception_print+0x2e>
    c94e:	bf00      	nop
    c950:	0002636c 	.word	0x0002636c
    c954:	0002bd00 	.word	0x0002bd00

0000c958 <mp_obj_exception_make_new>:

mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    c958:	b5f0      	push	{r4, r5, r6, r7, lr}
    c95a:	b083      	sub	sp, #12
    c95c:	4606      	mov	r6, r0
    c95e:	460d      	mov	r5, r1
    c960:	4611      	mov	r1, r2
    c962:	461f      	mov	r7, r3
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
    c964:	2200      	movs	r2, #0
    c966:	9200      	str	r2, [sp, #0]
    c968:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c96c:	4628      	mov	r0, r5
    c96e:	f7fd fed3 	bl	a718 <mp_arg_check_num>

    // Try to allocate memory for the exception, with fallback to emergency exception object
    mp_obj_exception_t *o_exc = m_new_obj_maybe(mp_obj_exception_t);
    c972:	2010      	movs	r0, #16
    c974:	f7f3 ffb0 	bl	8d8 <m_malloc_maybe>
    if (o_exc == NULL) {
    c978:	4604      	mov	r4, r0
    c97a:	b140      	cbz	r0, c98e <mp_obj_exception_make_new+0x36>
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    }

    // Populate the exception object
    o_exc->base.type = type;
    c97c:	6026      	str	r6, [r4, #0]
    o_exc->traceback_data = NULL;
    c97e:	2300      	movs	r3, #0
    c980:	60a3      	str	r3, [r4, #8]

    mp_obj_tuple_t *o_tuple;
    if (n_args == 0) {
    c982:	b935      	cbnz	r5, c992 <mp_obj_exception_make_new+0x3a>
        // No args, can use the empty tuple straightaway
        o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    c984:	4e0b      	ldr	r6, [pc, #44]	; (c9b4 <mp_obj_exception_make_new+0x5c>)
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
        }
    }

    // Store the tuple of args in the exception object
    o_exc->args = o_tuple;
    c986:	60e6      	str	r6, [r4, #12]

    return MP_OBJ_FROM_PTR(o_exc);
}
    c988:	4620      	mov	r0, r4
    c98a:	b003      	add	sp, #12
    c98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    c98e:	4c0a      	ldr	r4, [pc, #40]	; (c9b8 <mp_obj_exception_make_new+0x60>)
    c990:	e7f4      	b.n	c97c <mp_obj_exception_make_new+0x24>
        o_tuple = m_new_obj_var_maybe(mp_obj_tuple_t, mp_obj_t, n_args);
    c992:	1ca8      	adds	r0, r5, #2
    c994:	0080      	lsls	r0, r0, #2
    c996:	f7f3 ff9f 	bl	8d8 <m_malloc_maybe>
        if (o_tuple == NULL) {
    c99a:	4606      	mov	r6, r0
    c99c:	b140      	cbz	r0, c9b0 <mp_obj_exception_make_new+0x58>
            o_tuple->base.type = &mp_type_tuple;
    c99e:	4b07      	ldr	r3, [pc, #28]	; (c9bc <mp_obj_exception_make_new+0x64>)
    c9a0:	6003      	str	r3, [r0, #0]
            o_tuple->len = n_args;
    c9a2:	6045      	str	r5, [r0, #4]
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
    c9a4:	00aa      	lsls	r2, r5, #2
    c9a6:	4639      	mov	r1, r7
    c9a8:	3008      	adds	r0, #8
    c9aa:	f00e ff23 	bl	1b7f4 <memcpy>
    c9ae:	e7ea      	b.n	c986 <mp_obj_exception_make_new+0x2e>
            o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    c9b0:	4e00      	ldr	r6, [pc, #0]	; (c9b4 <mp_obj_exception_make_new+0x5c>)
    c9b2:	e7e8      	b.n	c986 <mp_obj_exception_make_new+0x2e>
    c9b4:	00028810 	.word	0x00028810
    c9b8:	200008b4 	.word	0x200008b4
    c9bc:	00028844 	.word	0x00028844

0000c9c0 <exc_add_strn>:
    size_t alloc;
    size_t len;
    byte *buf;
};

STATIC void exc_add_strn(void *data, const char *str, size_t len) {
    c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9c2:	4604      	mov	r4, r0
    c9c4:	460f      	mov	r7, r1
    c9c6:	4615      	mov	r5, r2
    struct _exc_printer_t *pr = data;
    if (pr->len + len >= pr->alloc) {
    c9c8:	6882      	ldr	r2, [r0, #8]
    c9ca:	1951      	adds	r1, r2, r5
    c9cc:	6843      	ldr	r3, [r0, #4]
    c9ce:	4299      	cmp	r1, r3
    c9d0:	d303      	bcc.n	c9da <exc_add_strn+0x1a>
        // Not enough room for data plus a null byte so try to grow the buffer
        if (pr->allow_realloc) {
    c9d2:	7801      	ldrb	r1, [r0, #0]
    c9d4:	b961      	cbnz	r1, c9f0 <exc_add_strn+0x30>
            } else {
                pr->alloc = new_alloc;
                pr->buf = new_buf;
            }
        } else {
            len = pr->alloc - pr->len - 1;
    c9d6:	1a9d      	subs	r5, r3, r2
    c9d8:	3d01      	subs	r5, #1
        }
    }
    memcpy(pr->buf + pr->len, str, len);
    c9da:	68e0      	ldr	r0, [r4, #12]
    c9dc:	68a3      	ldr	r3, [r4, #8]
    c9de:	462a      	mov	r2, r5
    c9e0:	4639      	mov	r1, r7
    c9e2:	4418      	add	r0, r3
    c9e4:	f00e ff06 	bl	1b7f4 <memcpy>
    pr->len += len;
    c9e8:	68a3      	ldr	r3, [r4, #8]
    c9ea:	441d      	add	r5, r3
    c9ec:	60a5      	str	r5, [r4, #8]
}
    c9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            size_t new_alloc = pr->alloc + len + 16;
    c9f0:	442b      	add	r3, r5
    c9f2:	f103 0610 	add.w	r6, r3, #16
            byte *new_buf = m_renew_maybe(byte, pr->buf, pr->alloc, new_alloc, true);
    c9f6:	2201      	movs	r2, #1
    c9f8:	4631      	mov	r1, r6
    c9fa:	68c0      	ldr	r0, [r0, #12]
    c9fc:	f7f3 ff83 	bl	906 <m_realloc_maybe>
            if (new_buf == NULL) {
    ca00:	b110      	cbz	r0, ca08 <exc_add_strn+0x48>
                pr->alloc = new_alloc;
    ca02:	6066      	str	r6, [r4, #4]
                pr->buf = new_buf;
    ca04:	60e0      	str	r0, [r4, #12]
    ca06:	e7e8      	b.n	c9da <exc_add_strn+0x1a>
                pr->allow_realloc = false;
    ca08:	2300      	movs	r3, #0
    ca0a:	7023      	strb	r3, [r4, #0]
                len = pr->alloc - pr->len - 1;
    ca0c:	6865      	ldr	r5, [r4, #4]
    ca0e:	68a3      	ldr	r3, [r4, #8]
    ca10:	1aed      	subs	r5, r5, r3
    ca12:	3d01      	subs	r5, #1
    ca14:	e7e1      	b.n	c9da <exc_add_strn+0x1a>
	...

0000ca18 <mp_obj_exception_get_value>:
    if (self->args->len == 0) {
    ca18:	68c3      	ldr	r3, [r0, #12]
    ca1a:	685a      	ldr	r2, [r3, #4]
    ca1c:	b10a      	cbz	r2, ca22 <mp_obj_exception_get_value+0xa>
        return self->args->items[0];
    ca1e:	6898      	ldr	r0, [r3, #8]
    ca20:	4770      	bx	lr
        return mp_const_none;
    ca22:	4801      	ldr	r0, [pc, #4]	; (ca28 <mp_obj_exception_get_value+0x10>)
}
    ca24:	4770      	bx	lr
    ca26:	bf00      	nop
    ca28:	00027b40 	.word	0x00027b40

0000ca2c <mp_obj_exception_attr>:
    if (dest[0] != MP_OBJ_NULL) {
    ca2c:	6813      	ldr	r3, [r2, #0]
    ca2e:	b153      	cbz	r3, ca46 <mp_obj_exception_attr+0x1a>
        if (attr == MP_QSTR___traceback__ && dest[1] == mp_const_none) {
    ca30:	2926      	cmp	r1, #38	; 0x26
    ca32:	d000      	beq.n	ca36 <mp_obj_exception_attr+0xa>
    ca34:	4770      	bx	lr
    ca36:	6851      	ldr	r1, [r2, #4]
    ca38:	4b0d      	ldr	r3, [pc, #52]	; (ca70 <mp_obj_exception_attr+0x44>)
    ca3a:	4299      	cmp	r1, r3
    ca3c:	d1fa      	bne.n	ca34 <mp_obj_exception_attr+0x8>
            self->traceback_len = 0;
    ca3e:	2300      	movs	r3, #0
    ca40:	80c3      	strh	r3, [r0, #6]
            dest[0] = MP_OBJ_NULL; // indicate success
    ca42:	6013      	str	r3, [r2, #0]
    ca44:	4770      	bx	lr
    if (attr == MP_QSTR_args) {
    ca46:	f5b1 7fad 	cmp.w	r1, #346	; 0x15a
    ca4a:	d005      	beq.n	ca58 <mp_obj_exception_attr+0x2c>
void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    ca4c:	b510      	push	{r4, lr}
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    ca4e:	6804      	ldr	r4, [r0, #0]
    ca50:	4b08      	ldr	r3, [pc, #32]	; (ca74 <mp_obj_exception_attr+0x48>)
    ca52:	429c      	cmp	r4, r3
    ca54:	d003      	beq.n	ca5e <mp_obj_exception_attr+0x32>
}
    ca56:	bd10      	pop	{r4, pc}
        dest[0] = MP_OBJ_FROM_PTR(self->args);
    ca58:	68c3      	ldr	r3, [r0, #12]
    ca5a:	6013      	str	r3, [r2, #0]
    ca5c:	4770      	bx	lr
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    ca5e:	f240 2376 	movw	r3, #630	; 0x276
    ca62:	4299      	cmp	r1, r3
    ca64:	d1f7      	bne.n	ca56 <mp_obj_exception_attr+0x2a>
    ca66:	4614      	mov	r4, r2
        dest[0] = mp_obj_exception_get_value(self_in);
    ca68:	f7ff ffd6 	bl	ca18 <mp_obj_exception_get_value>
    ca6c:	6020      	str	r0, [r4, #0]
    ca6e:	e7f2      	b.n	ca56 <mp_obj_exception_attr+0x2a>
    ca70:	00027b40 	.word	0x00027b40
    ca74:	00026bd0 	.word	0x00026bd0

0000ca78 <mp_obj_new_exception_args>:
mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args) {
    ca78:	b538      	push	{r3, r4, r5, lr}
    assert(exc_type->make_new == mp_obj_exception_make_new);
    ca7a:	68c4      	ldr	r4, [r0, #12]
    ca7c:	4d06      	ldr	r5, [pc, #24]	; (ca98 <mp_obj_new_exception_args+0x20>)
    ca7e:	42ac      	cmp	r4, r5
    ca80:	d103      	bne.n	ca8a <mp_obj_new_exception_args+0x12>
    return exc_type->make_new(exc_type, n_args, 0, args);
    ca82:	4613      	mov	r3, r2
    ca84:	2200      	movs	r2, #0
    ca86:	47a0      	blx	r4
}
    ca88:	bd38      	pop	{r3, r4, r5, pc}
    assert(exc_type->make_new == mp_obj_exception_make_new);
    ca8a:	4b04      	ldr	r3, [pc, #16]	; (ca9c <mp_obj_new_exception_args+0x24>)
    ca8c:	4a04      	ldr	r2, [pc, #16]	; (caa0 <mp_obj_new_exception_args+0x28>)
    ca8e:	f240 1137 	movw	r1, #311	; 0x137
    ca92:	4804      	ldr	r0, [pc, #16]	; (caa4 <mp_obj_new_exception_args+0x2c>)
    ca94:	f00b fd62 	bl	1855c <__assert_func>
    ca98:	0000c959 	.word	0x0000c959
    ca9c:	00026708 	.word	0x00026708
    caa0:	00026630 	.word	0x00026630
    caa4:	00026738 	.word	0x00026738

0000caa8 <mp_obj_new_exception>:
mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type) {
    caa8:	b508      	push	{r3, lr}
    return mp_obj_new_exception_args(exc_type, 0, NULL);
    caaa:	2200      	movs	r2, #0
    caac:	4611      	mov	r1, r2
    caae:	f7ff ffe3 	bl	ca78 <mp_obj_new_exception_args>
}
    cab2:	bd08      	pop	{r3, pc}

0000cab4 <mp_obj_new_exception_arg1>:
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg) {
    cab4:	b500      	push	{lr}
    cab6:	b083      	sub	sp, #12
    cab8:	aa02      	add	r2, sp, #8
    caba:	f842 1d04 	str.w	r1, [r2, #-4]!
    return mp_obj_new_exception_args(exc_type, 1, &arg);
    cabe:	2101      	movs	r1, #1
    cac0:	f7ff ffda 	bl	ca78 <mp_obj_new_exception_args>
}
    cac4:	b003      	add	sp, #12
    cac6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000cacc <mp_obj_new_exception_msg_varg>:

mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...) {
    cacc:	b40e      	push	{r1, r2, r3}
    cace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cad2:	b089      	sub	sp, #36	; 0x24
    cad4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    assert(fmt != NULL);
    cad6:	2d00      	cmp	r5, #0
    cad8:	d040      	beq.n	cb5c <mp_obj_new_exception_msg_varg+0x90>
    cada:	4606      	mov	r6, r0

    // Check that the given type is an exception type
    assert(exc_type->make_new == mp_obj_exception_make_new);
    cadc:	68c2      	ldr	r2, [r0, #12]
    cade:	4b2c      	ldr	r3, [pc, #176]	; (cb90 <mp_obj_new_exception_msg_varg+0xc4>)
    cae0:	429a      	cmp	r2, r3
    cae2:	d142      	bne.n	cb6a <mp_obj_new_exception_msg_varg+0x9e>

    // Try to allocate memory for the message
    mp_obj_str_t *o_str = m_new_obj_maybe(mp_obj_str_t);
    cae4:	2010      	movs	r0, #16
    cae6:	f7f3 fef7 	bl	8d8 <m_malloc_maybe>
    caea:	4604      	mov	r4, r0
    size_t o_str_alloc = strlen(fmt) + 1;
    caec:	4628      	mov	r0, r5
    caee:	f00e ff19 	bl	1b924 <strlen>
    caf2:	4680      	mov	r8, r0
    caf4:	1c47      	adds	r7, r0, #1
    byte *o_str_buf = m_new_maybe(byte, o_str_alloc);
    caf6:	4638      	mov	r0, r7
    caf8:	f7f3 feee 	bl	8d8 <m_malloc_maybe>
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
            + mp_emergency_exception_buf_size - o_str_buf;
    }
    #endif

    if (o_str == NULL) {
    cafc:	2c00      	cmp	r4, #0
    cafe:	d03b      	beq.n	cb78 <mp_obj_new_exception_msg_varg+0xac>
        // No memory for the string object so create the exception with no args
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    }

    if (o_str_buf == NULL) {
    cb00:	2800      	cmp	r0, #0
    cb02:	d040      	beq.n	cb86 <mp_obj_new_exception_msg_varg+0xba>
        // and use that data as the data of the string
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
        o_str->data = (const byte*)fmt;
    } else {
        // We have some memory to format the string
        struct _exc_printer_t exc_pr = {!used_emg_buf, o_str_alloc, 0, o_str_buf};
    cb04:	2301      	movs	r3, #1
    cb06:	f88d 300c 	strb.w	r3, [sp, #12]
    cb0a:	9704      	str	r7, [sp, #16]
    cb0c:	2700      	movs	r7, #0
    cb0e:	9705      	str	r7, [sp, #20]
    cb10:	9006      	str	r0, [sp, #24]
        mp_print_t print = {&exc_pr, exc_add_strn};
    cb12:	ab03      	add	r3, sp, #12
    cb14:	9301      	str	r3, [sp, #4]
    cb16:	4b1f      	ldr	r3, [pc, #124]	; (cb94 <mp_obj_new_exception_msg_varg+0xc8>)
    cb18:	9302      	str	r3, [sp, #8]
        va_list ap;
        va_start(ap, fmt);
    cb1a:	aa10      	add	r2, sp, #64	; 0x40
    cb1c:	9200      	str	r2, [sp, #0]
        mp_vprintf(&print, fmt, ap);
    cb1e:	4629      	mov	r1, r5
    cb20:	a801      	add	r0, sp, #4
    cb22:	f7f5 f951 	bl	1dc8 <mp_vprintf>
        va_end(ap);
        exc_pr.buf[exc_pr.len] = '\0';
    cb26:	9a06      	ldr	r2, [sp, #24]
    cb28:	9b05      	ldr	r3, [sp, #20]
    cb2a:	54d7      	strb	r7, [r2, r3]
        o_str->len = exc_pr.len;
    cb2c:	9b05      	ldr	r3, [sp, #20]
    cb2e:	60a3      	str	r3, [r4, #8]
        o_str->data = exc_pr.buf;
    cb30:	9b06      	ldr	r3, [sp, #24]
    cb32:	60e3      	str	r3, [r4, #12]
    }

    // Create the string object and call mp_obj_exception_make_new to create the exception
    o_str->base.type = &mp_type_str;
    cb34:	4b18      	ldr	r3, [pc, #96]	; (cb98 <mp_obj_new_exception_msg_varg+0xcc>)
    cb36:	6023      	str	r3, [r4, #0]
    o_str->hash = qstr_compute_hash(o_str->data, o_str->len);
    cb38:	68a1      	ldr	r1, [r4, #8]
    cb3a:	68e0      	ldr	r0, [r4, #12]
    cb3c:	f7f4 fcc2 	bl	14c4 <qstr_compute_hash>
    cb40:	6060      	str	r0, [r4, #4]
    mp_obj_t arg = MP_OBJ_FROM_PTR(o_str);
    cb42:	ab08      	add	r3, sp, #32
    cb44:	f843 4d04 	str.w	r4, [r3, #-4]!
    return mp_obj_exception_make_new(exc_type, 1, 0, &arg);
    cb48:	2200      	movs	r2, #0
    cb4a:	2101      	movs	r1, #1
    cb4c:	4630      	mov	r0, r6
    cb4e:	f7ff ff03 	bl	c958 <mp_obj_exception_make_new>
}
    cb52:	b009      	add	sp, #36	; 0x24
    cb54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb58:	b003      	add	sp, #12
    cb5a:	4770      	bx	lr
    assert(fmt != NULL);
    cb5c:	4b0f      	ldr	r3, [pc, #60]	; (cb9c <mp_obj_new_exception_msg_varg+0xd0>)
    cb5e:	4a10      	ldr	r2, [pc, #64]	; (cba0 <mp_obj_new_exception_msg_varg+0xd4>)
    cb60:	f240 1161 	movw	r1, #353	; 0x161
    cb64:	480f      	ldr	r0, [pc, #60]	; (cba4 <mp_obj_new_exception_msg_varg+0xd8>)
    cb66:	f00b fcf9 	bl	1855c <__assert_func>
    assert(exc_type->make_new == mp_obj_exception_make_new);
    cb6a:	4b0f      	ldr	r3, [pc, #60]	; (cba8 <mp_obj_new_exception_msg_varg+0xdc>)
    cb6c:	4a0c      	ldr	r2, [pc, #48]	; (cba0 <mp_obj_new_exception_msg_varg+0xd4>)
    cb6e:	f44f 71b2 	mov.w	r1, #356	; 0x164
    cb72:	480c      	ldr	r0, [pc, #48]	; (cba4 <mp_obj_new_exception_msg_varg+0xd8>)
    cb74:	f00b fcf2 	bl	1855c <__assert_func>
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    cb78:	2300      	movs	r3, #0
    cb7a:	461a      	mov	r2, r3
    cb7c:	4619      	mov	r1, r3
    cb7e:	4630      	mov	r0, r6
    cb80:	f7ff feea 	bl	c958 <mp_obj_exception_make_new>
    cb84:	e7e5      	b.n	cb52 <mp_obj_new_exception_msg_varg+0x86>
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
    cb86:	f8c4 8008 	str.w	r8, [r4, #8]
        o_str->data = (const byte*)fmt;
    cb8a:	60e5      	str	r5, [r4, #12]
    cb8c:	e7d2      	b.n	cb34 <mp_obj_new_exception_msg_varg+0x68>
    cb8e:	bf00      	nop
    cb90:	0000c959 	.word	0x0000c959
    cb94:	0000c9c1 	.word	0x0000c9c1
    cb98:	00028104 	.word	0x00028104
    cb9c:	00026750 	.word	0x00026750
    cba0:	0002664c 	.word	0x0002664c
    cba4:	00026738 	.word	0x00026738
    cba8:	00026708 	.word	0x00026708

0000cbac <mp_obj_new_exception_msg>:
mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg) {
    cbac:	b508      	push	{r3, lr}
    return mp_obj_new_exception_msg_varg(exc_type, msg);
    cbae:	f7ff ff8d 	bl	cacc <mp_obj_new_exception_msg_varg>
}
    cbb2:	bd08      	pop	{r3, pc}

0000cbb4 <mp_obj_is_exception_type>:

// return true if the given object is an exception type
bool mp_obj_is_exception_type(mp_obj_t self_in) {
    cbb4:	b508      	push	{r3, lr}
    if (MP_OBJ_IS_TYPE(self_in, &mp_type_type)) {
    cbb6:	f010 0f03 	tst.w	r0, #3
    cbba:	d103      	bne.n	cbc4 <mp_obj_is_exception_type+0x10>
    cbbc:	6802      	ldr	r2, [r0, #0]
    cbbe:	4b06      	ldr	r3, [pc, #24]	; (cbd8 <mp_obj_is_exception_type+0x24>)
    cbc0:	429a      	cmp	r2, r3
    cbc2:	d003      	beq.n	cbcc <mp_obj_is_exception_type+0x18>
        mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
        if (self->make_new == mp_obj_exception_make_new) {
            return true;
        }
    }
    return mp_obj_is_subclass_fast(self_in, MP_OBJ_FROM_PTR(&mp_type_BaseException));
    cbc4:	4905      	ldr	r1, [pc, #20]	; (cbdc <mp_obj_is_exception_type+0x28>)
    cbc6:	f005 fd9f 	bl	12708 <mp_obj_is_subclass_fast>
}
    cbca:	bd08      	pop	{r3, pc}
        if (self->make_new == mp_obj_exception_make_new) {
    cbcc:	68c2      	ldr	r2, [r0, #12]
    cbce:	4b04      	ldr	r3, [pc, #16]	; (cbe0 <mp_obj_is_exception_type+0x2c>)
    cbd0:	429a      	cmp	r2, r3
    cbd2:	d1f7      	bne.n	cbc4 <mp_obj_is_exception_type+0x10>
            return true;
    cbd4:	2001      	movs	r0, #1
    cbd6:	e7f8      	b.n	cbca <mp_obj_is_exception_type+0x16>
    cbd8:	00028dd0 	.word	0x00028dd0
    cbdc:	00026810 	.word	0x00026810
    cbe0:	0000c959 	.word	0x0000c959

0000cbe4 <mp_obj_is_exception_instance>:

// return true if the given object is an instance of an exception type
bool mp_obj_is_exception_instance(mp_obj_t self_in) {
    cbe4:	b508      	push	{r3, lr}
    return mp_obj_is_exception_type(MP_OBJ_FROM_PTR(mp_obj_get_type(self_in)));
    cbe6:	f7fd ffc9 	bl	ab7c <mp_obj_get_type>
    cbea:	f7ff ffe3 	bl	cbb4 <mp_obj_is_exception_type>
}
    cbee:	bd08      	pop	{r3, pc}

0000cbf0 <mp_obj_exception_match>:

// Return true if exception (type or instance) is a subclass of given
// exception type.  Assumes exc_type is a subclass of BaseException, as
// defined by mp_obj_is_exception_type(exc_type).
bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type) {
    cbf0:	b538      	push	{r3, r4, r5, lr}
    cbf2:	4604      	mov	r4, r0
    cbf4:	460d      	mov	r5, r1
    // if exc is an instance of an exception, then extract and use its type
    if (mp_obj_is_exception_instance(exc)) {
    cbf6:	f7ff fff5 	bl	cbe4 <mp_obj_is_exception_instance>
    cbfa:	b920      	cbnz	r0, cc06 <mp_obj_exception_match+0x16>
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    }
    return mp_obj_is_subclass_fast(exc, exc_type);
    cbfc:	4629      	mov	r1, r5
    cbfe:	4620      	mov	r0, r4
    cc00:	f005 fd82 	bl	12708 <mp_obj_is_subclass_fast>
}
    cc04:	bd38      	pop	{r3, r4, r5, pc}
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    cc06:	4620      	mov	r0, r4
    cc08:	f7fd ffb8 	bl	ab7c <mp_obj_get_type>
    cc0c:	4604      	mov	r4, r0
    cc0e:	e7f5      	b.n	cbfc <mp_obj_exception_match+0xc>

0000cc10 <mp_obj_exception_clear_traceback>:
        self = MP_OBJ_TO_PTR(self_in); \
    } else { \
        self = MP_OBJ_TO_PTR(((mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in))->subobj[0]); \
    }

void mp_obj_exception_clear_traceback(mp_obj_t self_in) {
    cc10:	b510      	push	{r4, lr}
    cc12:	4604      	mov	r4, r0
    GET_NATIVE_EXCEPTION(self, self_in);
    cc14:	f7ff ffe6 	bl	cbe4 <mp_obj_is_exception_instance>
    cc18:	b150      	cbz	r0, cc30 <mp_obj_exception_clear_traceback+0x20>
    cc1a:	4620      	mov	r0, r4
    cc1c:	f7fd ffae 	bl	ab7c <mp_obj_get_type>
    cc20:	68c2      	ldr	r2, [r0, #12]
    cc22:	4b07      	ldr	r3, [pc, #28]	; (cc40 <mp_obj_exception_clear_traceback+0x30>)
    cc24:	429a      	cmp	r2, r3
    cc26:	d000      	beq.n	cc2a <mp_obj_exception_clear_traceback+0x1a>
    cc28:	6924      	ldr	r4, [r4, #16]
    // just set the traceback to the null object
    // we don't want to call any memory management functions here
    self->traceback_data = NULL;
    cc2a:	2300      	movs	r3, #0
    cc2c:	60a3      	str	r3, [r4, #8]
}
    cc2e:	bd10      	pop	{r4, pc}
    GET_NATIVE_EXCEPTION(self, self_in);
    cc30:	4b04      	ldr	r3, [pc, #16]	; (cc44 <mp_obj_exception_clear_traceback+0x34>)
    cc32:	4a05      	ldr	r2, [pc, #20]	; (cc48 <mp_obj_exception_clear_traceback+0x38>)
    cc34:	f240 11c3 	movw	r1, #451	; 0x1c3
    cc38:	4804      	ldr	r0, [pc, #16]	; (cc4c <mp_obj_exception_clear_traceback+0x3c>)
    cc3a:	f00b fc8f 	bl	1855c <__assert_func>
    cc3e:	bf00      	nop
    cc40:	0000c959 	.word	0x0000c959
    cc44:	000266e0 	.word	0x000266e0
    cc48:	0002666c 	.word	0x0002666c
    cc4c:	00026738 	.word	0x00026738

0000cc50 <mp_obj_exception_add_traceback>:

void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block) {
    cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc52:	4604      	mov	r4, r0
    cc54:	460f      	mov	r7, r1
    cc56:	4616      	mov	r6, r2
    cc58:	461d      	mov	r5, r3
    GET_NATIVE_EXCEPTION(self, self_in);
    cc5a:	f7ff ffc3 	bl	cbe4 <mp_obj_is_exception_instance>
    cc5e:	b1c8      	cbz	r0, cc94 <mp_obj_exception_add_traceback+0x44>
    cc60:	4620      	mov	r0, r4
    cc62:	f7fd ff8b 	bl	ab7c <mp_obj_get_type>
    cc66:	68c2      	ldr	r2, [r0, #12]
    cc68:	4b19      	ldr	r3, [pc, #100]	; (ccd0 <mp_obj_exception_add_traceback+0x80>)
    cc6a:	429a      	cmp	r2, r3
    cc6c:	d000      	beq.n	cc70 <mp_obj_exception_add_traceback+0x20>
    cc6e:	6924      	ldr	r4, [r4, #16]

    // append this traceback info to traceback data
    // if memory allocation fails (eg because gc is locked), just return

    if (self->traceback_data == NULL) {
    cc70:	68a0      	ldr	r0, [r4, #8]
    cc72:	b1b0      	cbz	r0, cca2 <mp_obj_exception_add_traceback+0x52>
        } else {
            // Allocated the traceback data on the heap
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
        }
        self->traceback_len = 0;
    } else if (self->traceback_len + TRACEBACK_ENTRY_LEN > self->traceback_alloc) {
    cc74:	88e3      	ldrh	r3, [r4, #6]
    cc76:	3303      	adds	r3, #3
    cc78:	88a1      	ldrh	r1, [r4, #4]
    cc7a:	428b      	cmp	r3, r1
    cc7c:	dc1c      	bgt.n	ccb8 <mp_obj_exception_add_traceback+0x68>
        }
        self->traceback_data = tb_data;
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    }

    size_t *tb_data = &self->traceback_data[self->traceback_len];
    cc7e:	68a1      	ldr	r1, [r4, #8]
    cc80:	88e3      	ldrh	r3, [r4, #6]
    cc82:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    self->traceback_len += TRACEBACK_ENTRY_LEN;
    cc86:	1cd8      	adds	r0, r3, #3
    cc88:	80e0      	strh	r0, [r4, #6]
    tb_data[0] = file;
    cc8a:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    tb_data[1] = line;
    cc8e:	6056      	str	r6, [r2, #4]
    tb_data[2] = block;
    cc90:	6095      	str	r5, [r2, #8]
}
    cc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    GET_NATIVE_EXCEPTION(self, self_in);
    cc94:	4b0f      	ldr	r3, [pc, #60]	; (ccd4 <mp_obj_exception_add_traceback+0x84>)
    cc96:	4a10      	ldr	r2, [pc, #64]	; (ccd8 <mp_obj_exception_add_traceback+0x88>)
    cc98:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    cc9c:	480f      	ldr	r0, [pc, #60]	; (ccdc <mp_obj_exception_add_traceback+0x8c>)
    cc9e:	f00b fc5d 	bl	1855c <__assert_func>
        self->traceback_data = m_new_maybe(size_t, TRACEBACK_ENTRY_LEN);
    cca2:	200c      	movs	r0, #12
    cca4:	f7f3 fe18 	bl	8d8 <m_malloc_maybe>
    cca8:	60a0      	str	r0, [r4, #8]
        if (self->traceback_data == NULL) {
    ccaa:	2800      	cmp	r0, #0
    ccac:	d0f1      	beq.n	cc92 <mp_obj_exception_add_traceback+0x42>
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
    ccae:	2303      	movs	r3, #3
    ccb0:	80a3      	strh	r3, [r4, #4]
        self->traceback_len = 0;
    ccb2:	2300      	movs	r3, #0
    ccb4:	80e3      	strh	r3, [r4, #6]
    ccb6:	e7e2      	b.n	cc7e <mp_obj_exception_add_traceback+0x2e>
        size_t *tb_data = m_renew_maybe(size_t, self->traceback_data, self->traceback_alloc,
    ccb8:	3103      	adds	r1, #3
    ccba:	2201      	movs	r2, #1
    ccbc:	0089      	lsls	r1, r1, #2
    ccbe:	f7f3 fe22 	bl	906 <m_realloc_maybe>
        if (tb_data == NULL) {
    ccc2:	2800      	cmp	r0, #0
    ccc4:	d0e5      	beq.n	cc92 <mp_obj_exception_add_traceback+0x42>
        self->traceback_data = tb_data;
    ccc6:	60a0      	str	r0, [r4, #8]
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    ccc8:	88a3      	ldrh	r3, [r4, #4]
    ccca:	3303      	adds	r3, #3
    cccc:	80a3      	strh	r3, [r4, #4]
    ccce:	e7d6      	b.n	cc7e <mp_obj_exception_add_traceback+0x2e>
    ccd0:	0000c959 	.word	0x0000c959
    ccd4:	000266e0 	.word	0x000266e0
    ccd8:	00026690 	.word	0x00026690
    ccdc:	00026738 	.word	0x00026738

0000cce0 <mp_obj_exception_get_traceback>:

void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values) {
    cce0:	b570      	push	{r4, r5, r6, lr}
    cce2:	4604      	mov	r4, r0
    cce4:	460e      	mov	r6, r1
    cce6:	4615      	mov	r5, r2
    GET_NATIVE_EXCEPTION(self, self_in);
    cce8:	f7ff ff7c 	bl	cbe4 <mp_obj_is_exception_instance>
    ccec:	b170      	cbz	r0, cd0c <mp_obj_exception_get_traceback+0x2c>
    ccee:	4620      	mov	r0, r4
    ccf0:	f7fd ff44 	bl	ab7c <mp_obj_get_type>
    ccf4:	68c2      	ldr	r2, [r0, #12]
    ccf6:	4b0a      	ldr	r3, [pc, #40]	; (cd20 <mp_obj_exception_get_traceback+0x40>)
    ccf8:	429a      	cmp	r2, r3
    ccfa:	d000      	beq.n	ccfe <mp_obj_exception_get_traceback+0x1e>
    ccfc:	6924      	ldr	r4, [r4, #16]

    if (self->traceback_data == NULL) {
    ccfe:	68a3      	ldr	r3, [r4, #8]
    cd00:	b15b      	cbz	r3, cd1a <mp_obj_exception_get_traceback+0x3a>
        *n = 0;
        *values = NULL;
    } else {
        *n = self->traceback_len;
    cd02:	88e3      	ldrh	r3, [r4, #6]
    cd04:	6033      	str	r3, [r6, #0]
        *values = self->traceback_data;
    cd06:	68a3      	ldr	r3, [r4, #8]
    cd08:	602b      	str	r3, [r5, #0]
    }
}
    cd0a:	bd70      	pop	{r4, r5, r6, pc}
    GET_NATIVE_EXCEPTION(self, self_in);
    cd0c:	4b05      	ldr	r3, [pc, #20]	; (cd24 <mp_obj_exception_get_traceback+0x44>)
    cd0e:	4a06      	ldr	r2, [pc, #24]	; (cd28 <mp_obj_exception_get_traceback+0x48>)
    cd10:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    cd14:	4805      	ldr	r0, [pc, #20]	; (cd2c <mp_obj_exception_get_traceback+0x4c>)
    cd16:	f00b fc21 	bl	1855c <__assert_func>
        *n = 0;
    cd1a:	6033      	str	r3, [r6, #0]
        *values = NULL;
    cd1c:	602b      	str	r3, [r5, #0]
    cd1e:	e7f4      	b.n	cd0a <mp_obj_exception_get_traceback+0x2a>
    cd20:	0000c959 	.word	0x0000c959
    cd24:	000266e0 	.word	0x000266e0
    cd28:	000266b0 	.word	0x000266b0
    cd2c:	00026738 	.word	0x00026738

0000cd30 <mp_obj_float_divmod>:
    return self->value;
}

#endif

STATIC void mp_obj_float_divmod(mp_float_t *x, mp_float_t *y) {
    cd30:	b538      	push	{r3, r4, r5, lr}
    cd32:	ed2d 8b02 	vpush	{d8}
    cd36:	4605      	mov	r5, r0
    cd38:	460c      	mov	r4, r1
    // logic here follows that of CPython
    // https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations
    // x == (x//y)*y + (x%y)
    // divmod(x, y) == (x//y, x%y)
    mp_float_t mod = MICROPY_FLOAT_C_FUN(fmod)(*x, *y);
    cd3a:	edd1 0a00 	vldr	s1, [r1]
    cd3e:	ed90 0a00 	vldr	s0, [r0]
    cd42:	f012 ff45 	bl	1fbd0 <fmodf>
    mp_float_t div = (*x - mod) / *y;
    cd46:	ed95 7a00 	vldr	s14, [r5]
    cd4a:	ee77 6a40 	vsub.f32	s13, s14, s0
    cd4e:	edd4 7a00 	vldr	s15, [r4]
    cd52:	eec6 8aa7 	vdiv.f32	s17, s13, s15

    // Python specs require that mod has same sign as second operand
    if (mod == 0.0) {
    cd56:	eeb5 0a40 	vcmp.f32	s0, #0.0
    cd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd5e:	d108      	bne.n	cd72 <mp_obj_float_divmod+0x42>
        mod = MICROPY_FLOAT_C_FUN(copysign)(0.0, *y);
    cd60:	ed9f 8a24 	vldr	s16, [pc, #144]	; cdf4 <mp_obj_float_divmod+0xc4>
    cd64:	ee17 3a90 	vmov	r3, s15
    cd68:	2b00      	cmp	r3, #0
    cd6a:	da1a      	bge.n	cda2 <mp_obj_float_divmod+0x72>
    cd6c:	ed9f 8a22 	vldr	s16, [pc, #136]	; cdf8 <mp_obj_float_divmod+0xc8>
    cd70:	e017      	b.n	cda2 <mp_obj_float_divmod+0x72>
    cd72:	eeb0 8a40 	vmov.f32	s16, s0
    } else {
        if ((mod < 0.0) != (*y < 0.0)) {
    cd76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    cd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd7e:	bf4c      	ite	mi
    cd80:	2201      	movmi	r2, #1
    cd82:	2200      	movpl	r2, #0
    cd84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    cd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd8c:	bf4c      	ite	mi
    cd8e:	2301      	movmi	r3, #1
    cd90:	2300      	movpl	r3, #0
    cd92:	429a      	cmp	r2, r3
    cd94:	d005      	beq.n	cda2 <mp_obj_float_divmod+0x72>
            mod += *y;
    cd96:	ee30 8a27 	vadd.f32	s16, s0, s15
            div -= 1.0;
    cd9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cd9e:	ee78 8ae6 	vsub.f32	s17, s17, s13
        }
    }

    mp_float_t floordiv;
    if (div == 0.0) {
    cda2:	eef5 8a40 	vcmp.f32	s17, #0.0
    cda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cdaa:	d017      	beq.n	cddc <mp_obj_float_divmod+0xac>
        // if division is zero, take the correct sign of zero
        floordiv = MICROPY_FLOAT_C_FUN(copysign)(0.0, *x / *y);
    } else {
        // Python specs require that x == (x//y)*y + (x%y)
        floordiv = MICROPY_FLOAT_C_FUN(floor)(div);
    cdac:	eeb0 0a68 	vmov.f32	s0, s17
    cdb0:	f012 fb32 	bl	1f418 <floorf>
        if (div - floordiv > 0.5) {
    cdb4:	ee78 8ac0 	vsub.f32	s17, s17, s0
    cdb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    cdbc:	eef4 8ae7 	vcmpe.f32	s17, s15
    cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cdc4:	dd03      	ble.n	cdce <mp_obj_float_divmod+0x9e>
            floordiv += 1.0;
    cdc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    cdca:	ee30 0a27 	vadd.f32	s0, s0, s15
        }
    }

    // return results
    *x = floordiv;
    cdce:	ed85 0a00 	vstr	s0, [r5]
    *y = mod;
    cdd2:	ed84 8a00 	vstr	s16, [r4]
}
    cdd6:	ecbd 8b02 	vpop	{d8}
    cdda:	bd38      	pop	{r3, r4, r5, pc}
        floordiv = MICROPY_FLOAT_C_FUN(copysign)(0.0, *x / *y);
    cddc:	eec7 7a27 	vdiv.f32	s15, s14, s15
    cde0:	ee17 3a90 	vmov	r3, s15
    cde4:	ed9f 0a03 	vldr	s0, [pc, #12]	; cdf4 <mp_obj_float_divmod+0xc4>
    cde8:	2b00      	cmp	r3, #0
    cdea:	daf0      	bge.n	cdce <mp_obj_float_divmod+0x9e>
    cdec:	ed9f 0a02 	vldr	s0, [pc, #8]	; cdf8 <mp_obj_float_divmod+0xc8>
    cdf0:	e7ed      	b.n	cdce <mp_obj_float_divmod+0x9e>
    cdf2:	bf00      	nop
    cdf4:	00000000 	.word	0x00000000
    cdf8:	80000000 	.word	0x80000000

0000cdfc <mp_obj_new_float>:
mp_obj_t mp_obj_new_float(mp_float_t value) {
    cdfc:	b508      	push	{r3, lr}
    cdfe:	ed2d 8b02 	vpush	{d8}
    ce02:	eeb0 8a40 	vmov.f32	s16, s0
    mp_obj_float_t *o = m_new(mp_obj_float_t, 1);
    ce06:	2008      	movs	r0, #8
    ce08:	f7f3 fd58 	bl	8bc <m_malloc>
    o->base.type = &mp_type_float;
    ce0c:	4a03      	ldr	r2, [pc, #12]	; (ce1c <mp_obj_new_float+0x20>)
    ce0e:	6002      	str	r2, [r0, #0]
    o->value = value;
    ce10:	ed80 8a01 	vstr	s16, [r0, #4]
}
    ce14:	ecbd 8b02 	vpop	{d8}
    ce18:	bd08      	pop	{r3, pc}
    ce1a:	bf00      	nop
    ce1c:	00026d90 	.word	0x00026d90

0000ce20 <float_make_new>:
STATIC mp_obj_t float_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ce20:	b530      	push	{r4, r5, lr}
    ce22:	b087      	sub	sp, #28
    ce24:	460c      	mov	r4, r1
    ce26:	4611      	mov	r1, r2
    ce28:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    ce2a:	2200      	movs	r2, #0
    ce2c:	9200      	str	r2, [sp, #0]
    ce2e:	2301      	movs	r3, #1
    ce30:	4620      	mov	r0, r4
    ce32:	f7fd fc71 	bl	a718 <mp_arg_check_num>
    switch (n_args) {
    ce36:	b194      	cbz	r4, ce5e <float_make_new+0x3e>
            if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
    ce38:	2201      	movs	r2, #1
    ce3a:	a903      	add	r1, sp, #12
    ce3c:	6828      	ldr	r0, [r5, #0]
    ce3e:	f7fe fa24 	bl	b28a <mp_get_buffer>
    ce42:	b990      	cbnz	r0, ce6a <float_make_new+0x4a>
            } else if (mp_obj_is_float(args[0])) {
    ce44:	6828      	ldr	r0, [r5, #0]
    ce46:	f010 0f03 	tst.w	r0, #3
    ce4a:	d103      	bne.n	ce54 <float_make_new+0x34>
    ce4c:	6802      	ldr	r2, [r0, #0]
    ce4e:	4b0b      	ldr	r3, [pc, #44]	; (ce7c <float_make_new+0x5c>)
    ce50:	429a      	cmp	r2, r3
    ce52:	d008      	beq.n	ce66 <float_make_new+0x46>
                return mp_obj_new_float(mp_obj_get_float(args[0]));
    ce54:	f7fe f862 	bl	af1c <mp_obj_get_float>
    ce58:	f7ff ffd0 	bl	cdfc <mp_obj_new_float>
    ce5c:	e003      	b.n	ce66 <float_make_new+0x46>
            return mp_obj_new_float(0);
    ce5e:	ed9f 0a08 	vldr	s0, [pc, #32]	; ce80 <float_make_new+0x60>
    ce62:	f7ff ffcb 	bl	cdfc <mp_obj_new_float>
}
    ce66:	b007      	add	sp, #28
    ce68:	bd30      	pop	{r4, r5, pc}
                return mp_parse_num_decimal(bufinfo.buf, bufinfo.len, false, false, NULL);
    ce6a:	2200      	movs	r2, #0
    ce6c:	9200      	str	r2, [sp, #0]
    ce6e:	4613      	mov	r3, r2
    ce70:	9904      	ldr	r1, [sp, #16]
    ce72:	9803      	ldr	r0, [sp, #12]
    ce74:	f7fc f8f8 	bl	9068 <mp_parse_num_decimal>
    ce78:	e7f5      	b.n	ce66 <float_make_new+0x46>
    ce7a:	bf00      	nop
    ce7c:	00026d90 	.word	0x00026d90
    ce80:	00000000 	.word	0x00000000

0000ce84 <mp_obj_float_get>:
mp_float_t mp_obj_float_get(mp_obj_t self_in) {
    ce84:	b508      	push	{r3, lr}
    assert(mp_obj_is_float(self_in));
    ce86:	f010 0f03 	tst.w	r0, #3
    ce8a:	d106      	bne.n	ce9a <mp_obj_float_get+0x16>
    ce8c:	6802      	ldr	r2, [r0, #0]
    ce8e:	4b06      	ldr	r3, [pc, #24]	; (cea8 <mp_obj_float_get+0x24>)
    ce90:	429a      	cmp	r2, r3
    ce92:	d102      	bne.n	ce9a <mp_obj_float_get+0x16>
}
    ce94:	ed90 0a01 	vldr	s0, [r0, #4]
    ce98:	bd08      	pop	{r3, pc}
    assert(mp_obj_is_float(self_in));
    ce9a:	4b04      	ldr	r3, [pc, #16]	; (ceac <mp_obj_float_get+0x28>)
    ce9c:	4a04      	ldr	r2, [pc, #16]	; (ceb0 <mp_obj_float_get+0x2c>)
    ce9e:	21ce      	movs	r1, #206	; 0xce
    cea0:	4804      	ldr	r0, [pc, #16]	; (ceb4 <mp_obj_float_get+0x30>)
    cea2:	f00b fb5b 	bl	1855c <__assert_func>
    cea6:	bf00      	nop
    cea8:	00026d90 	.word	0x00026d90
    ceac:	00026d60 	.word	0x00026d60
    ceb0:	00026d38 	.word	0x00026d38
    ceb4:	00026d7c 	.word	0x00026d7c

0000ceb8 <float_unary_op>:
STATIC mp_obj_t float_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    ceb8:	b538      	push	{r3, r4, r5, lr}
    ceba:	4605      	mov	r5, r0
    cebc:	460c      	mov	r4, r1
    mp_float_t val = mp_obj_float_get(o_in);
    cebe:	4608      	mov	r0, r1
    cec0:	f7ff ffe0 	bl	ce84 <mp_obj_float_get>
    switch (op) {
    cec4:	2d07      	cmp	r5, #7
    cec6:	d827      	bhi.n	cf18 <float_unary_op+0x60>
    cec8:	e8df f005 	tbb	[pc, r5]
    cecc:	26261504 	.word	0x26261504
    ced0:	1a0d2606 	.word	0x1a0d2606
        case MP_UNARY_OP_POSITIVE: return o_in;
    ced4:	4620      	mov	r0, r4
}
    ced6:	bd38      	pop	{r3, r4, r5, pc}
    ced8:	eeb5 0a40 	vcmp.f32	s0, #0.0
    cedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cee0:	d01c      	beq.n	cf1c <float_unary_op+0x64>
    cee2:	480f      	ldr	r0, [pc, #60]	; (cf20 <float_unary_op+0x68>)
    cee4:	e7f7      	b.n	ced6 <float_unary_op+0x1e>
static inline mp_int_t mp_float_hash(mp_float_t val) { return (mp_int_t)val; }
    cee6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    ceea:	ee17 0a90 	vmov	r0, s15
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT(mp_float_hash(val));
    ceee:	0044      	lsls	r4, r0, #1
    cef0:	f044 0001 	orr.w	r0, r4, #1
    cef4:	e7ef      	b.n	ced6 <float_unary_op+0x1e>
        case MP_UNARY_OP_NEGATIVE: return mp_obj_new_float(-val);
    cef6:	eeb1 0a40 	vneg.f32	s0, s0
    cefa:	f7ff ff7f 	bl	cdfc <mp_obj_new_float>
    cefe:	e7ea      	b.n	ced6 <float_unary_op+0x1e>
            if (val < 0) {
    cf00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    cf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cf08:	d401      	bmi.n	cf0e <float_unary_op+0x56>
                return o_in;
    cf0a:	4620      	mov	r0, r4
    cf0c:	e7e3      	b.n	ced6 <float_unary_op+0x1e>
                return mp_obj_new_float(-val);
    cf0e:	eeb1 0a40 	vneg.f32	s0, s0
    cf12:	f7ff ff73 	bl	cdfc <mp_obj_new_float>
    cf16:	e7de      	b.n	ced6 <float_unary_op+0x1e>
        default: return MP_OBJ_NULL; // op not supported
    cf18:	2000      	movs	r0, #0
    cf1a:	e7dc      	b.n	ced6 <float_unary_op+0x1e>
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    cf1c:	4801      	ldr	r0, [pc, #4]	; (cf24 <float_unary_op+0x6c>)
    cf1e:	e7da      	b.n	ced6 <float_unary_op+0x1e>
    cf20:	00025f4c 	.word	0x00025f4c
    cf24:	00025f44 	.word	0x00025f44

0000cf28 <float_print>:
STATIC void float_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    cf28:	b510      	push	{r4, lr}
    cf2a:	b086      	sub	sp, #24
    cf2c:	4604      	mov	r4, r0
    mp_float_t o_val = mp_obj_float_get(o_in);
    cf2e:	4608      	mov	r0, r1
    cf30:	f7ff ffa8 	bl	ce84 <mp_obj_float_get>
    mp_format_float(o_val, buf, sizeof(buf), 'g', precision, '\0');
    cf34:	2300      	movs	r3, #0
    cf36:	9300      	str	r3, [sp, #0]
    cf38:	2307      	movs	r3, #7
    cf3a:	2267      	movs	r2, #103	; 0x67
    cf3c:	2110      	movs	r1, #16
    cf3e:	a802      	add	r0, sp, #8
    cf40:	f7fb fd6a 	bl	8a18 <mp_format_float>
    mp_print_str(print, buf);
    cf44:	a902      	add	r1, sp, #8
    cf46:	4620      	mov	r0, r4
    cf48:	f7f4 fcf9 	bl	193e <mp_print_str>
    if (strchr(buf, '.') == NULL && strchr(buf, 'e') == NULL && strchr(buf, 'n') == NULL) {
    cf4c:	212e      	movs	r1, #46	; 0x2e
    cf4e:	a802      	add	r0, sp, #8
    cf50:	f00e fd38 	bl	1b9c4 <strchr>
    cf54:	b108      	cbz	r0, cf5a <float_print+0x32>
}
    cf56:	b006      	add	sp, #24
    cf58:	bd10      	pop	{r4, pc}
    if (strchr(buf, '.') == NULL && strchr(buf, 'e') == NULL && strchr(buf, 'n') == NULL) {
    cf5a:	2165      	movs	r1, #101	; 0x65
    cf5c:	a802      	add	r0, sp, #8
    cf5e:	f00e fd31 	bl	1b9c4 <strchr>
    cf62:	2800      	cmp	r0, #0
    cf64:	d1f7      	bne.n	cf56 <float_print+0x2e>
    cf66:	216e      	movs	r1, #110	; 0x6e
    cf68:	a802      	add	r0, sp, #8
    cf6a:	f00e fd2b 	bl	1b9c4 <strchr>
    cf6e:	2800      	cmp	r0, #0
    cf70:	d1f1      	bne.n	cf56 <float_print+0x2e>
        mp_print_str(print, ".0");
    cf72:	4902      	ldr	r1, [pc, #8]	; (cf7c <float_print+0x54>)
    cf74:	4620      	mov	r0, r4
    cf76:	f7f4 fce2 	bl	193e <mp_print_str>
}
    cf7a:	e7ec      	b.n	cf56 <float_print+0x2e>
    cf7c:	00026d4c 	.word	0x00026d4c

0000cf80 <mp_obj_float_binary_op>:

mp_obj_t mp_obj_float_binary_op(mp_binary_op_t op, mp_float_t lhs_val, mp_obj_t rhs_in) {
    cf80:	b530      	push	{r4, r5, lr}
    cf82:	ed2d 8b02 	vpush	{d8}
    cf86:	b087      	sub	sp, #28
    cf88:	4604      	mov	r4, r0
    cf8a:	ed8d 0a01 	vstr	s0, [sp, #4]
    cf8e:	460d      	mov	r5, r1
    mp_float_t rhs_val;
    if (!mp_obj_get_float_maybe(rhs_in, &rhs_val)) {
    cf90:	a905      	add	r1, sp, #20
    cf92:	4628      	mov	r0, r5
    cf94:	f7fd ff88 	bl	aea8 <mp_obj_get_float_maybe>
    cf98:	2800      	cmp	r0, #0
    cf9a:	f000 8122 	beq.w	d1e2 <mp_obj_float_binary_op+0x262>
        return MP_OBJ_NULL; // op not supported
    }

    switch (op) {
    cf9e:	2c21      	cmp	r4, #33	; 0x21
    cfa0:	f200 8121 	bhi.w	d1e6 <mp_obj_float_binary_op+0x266>
    cfa4:	e8df f014 	tbh	[pc, r4, lsl #1]
    cfa8:	00f100e6 	.word	0x00f100e6
    cfac:	010700fc 	.word	0x010700fc
    cfb0:	011f0112 	.word	0x011f0112
    cfb4:	011f011f 	.word	0x011f011f
    cfb8:	011f011f 	.word	0x011f011f
    cfbc:	011f011f 	.word	0x011f011f
    cfc0:	011f011f 	.word	0x011f011f
    cfc4:	00320022 	.word	0x00320022
    cfc8:	0044003b 	.word	0x0044003b
    cfcc:	005e0050 	.word	0x005e0050
    cfd0:	011f008f 	.word	0x011f008f
    cfd4:	011f011f 	.word	0x011f011f
    cfd8:	011f011f 	.word	0x011f011f
    cfdc:	00320022 	.word	0x00320022
    cfe0:	0044003b 	.word	0x0044003b
    cfe4:	005e0050 	.word	0x005e0050
    cfe8:	00cc008f 	.word	0x00cc008f
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    cfec:	eddd 7a01 	vldr	s15, [sp, #4]
    cff0:	ed9d 7a05 	vldr	s14, [sp, #20]
    cff4:	ee77 7a87 	vadd.f32	s15, s15, s14
    cff8:	edcd 7a01 	vstr	s15, [sp, #4]
        case MP_BINARY_OP_MORE_EQUAL: return mp_obj_new_bool(lhs_val >= rhs_val);

        default:
            return MP_OBJ_NULL; // op not supported
    }
    return mp_obj_new_float(lhs_val);
    cffc:	ed9d 0a01 	vldr	s0, [sp, #4]
    d000:	f7ff fefc 	bl	cdfc <mp_obj_new_float>
}
    d004:	b007      	add	sp, #28
    d006:	ecbd 8b02 	vpop	{d8}
    d00a:	bd30      	pop	{r4, r5, pc}
        case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    d00c:	eddd 7a01 	vldr	s15, [sp, #4]
    d010:	ed9d 7a05 	vldr	s14, [sp, #20]
    d014:	ee77 7ac7 	vsub.f32	s15, s15, s14
    d018:	edcd 7a01 	vstr	s15, [sp, #4]
    d01c:	e7ee      	b.n	cffc <mp_obj_float_binary_op+0x7c>
        case MP_BINARY_OP_INPLACE_MULTIPLY: lhs_val *= rhs_val; break;
    d01e:	eddd 7a01 	vldr	s15, [sp, #4]
    d022:	ed9d 7a05 	vldr	s14, [sp, #20]
    d026:	ee67 7a87 	vmul.f32	s15, s15, s14
    d02a:	edcd 7a01 	vstr	s15, [sp, #4]
    d02e:	e7e5      	b.n	cffc <mp_obj_float_binary_op+0x7c>
            if (rhs_val == 0) {
    d030:	eddd 7a05 	vldr	s15, [sp, #20]
    d034:	eef5 7a40 	vcmp.f32	s15, #0.0
    d038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d03c:	d073      	beq.n	d126 <mp_obj_float_binary_op+0x1a6>
            mp_obj_float_divmod(&lhs_val, &rhs_val);
    d03e:	a905      	add	r1, sp, #20
    d040:	a801      	add	r0, sp, #4
    d042:	f7ff fe75 	bl	cd30 <mp_obj_float_divmod>
            break;
    d046:	e7d9      	b.n	cffc <mp_obj_float_binary_op+0x7c>
            if (rhs_val == 0) {
    d048:	eddd 7a05 	vldr	s15, [sp, #20]
    d04c:	eef5 7a40 	vcmp.f32	s15, #0.0
    d050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d054:	d067      	beq.n	d126 <mp_obj_float_binary_op+0x1a6>
            lhs_val /= rhs_val;
    d056:	eddd 6a01 	vldr	s13, [sp, #4]
    d05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    d05e:	ed8d 7a01 	vstr	s14, [sp, #4]
            break;
    d062:	e7cb      	b.n	cffc <mp_obj_float_binary_op+0x7c>
            if (rhs_val == 0) {
    d064:	eddd 0a05 	vldr	s1, [sp, #20]
    d068:	eef5 0a40 	vcmp.f32	s1, #0.0
    d06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d070:	d059      	beq.n	d126 <mp_obj_float_binary_op+0x1a6>
            lhs_val = MICROPY_FLOAT_C_FUN(fmod)(lhs_val, rhs_val);
    d072:	ed9d 0a01 	vldr	s0, [sp, #4]
    d076:	f012 fdab 	bl	1fbd0 <fmodf>
    d07a:	ed8d 0a01 	vstr	s0, [sp, #4]
            if (lhs_val == 0.0) {
    d07e:	eeb5 0a40 	vcmp.f32	s0, #0.0
    d082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d086:	d107      	bne.n	d098 <mp_obj_float_binary_op+0x118>
                lhs_val = MICROPY_FLOAT_C_FUN(copysign)(0.0, rhs_val);
    d088:	2300      	movs	r3, #0
    d08a:	9a05      	ldr	r2, [sp, #20]
    d08c:	2a00      	cmp	r2, #0
    d08e:	da01      	bge.n	d094 <mp_obj_float_binary_op+0x114>
    d090:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    d094:	9301      	str	r3, [sp, #4]
    d096:	e7b1      	b.n	cffc <mp_obj_float_binary_op+0x7c>
                if ((lhs_val < 0.0) != (rhs_val < 0.0)) {
    d098:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d0a0:	bf4c      	ite	mi
    d0a2:	2201      	movmi	r2, #1
    d0a4:	2200      	movpl	r2, #0
    d0a6:	eddd 7a05 	vldr	s15, [sp, #20]
    d0aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d0b2:	bf4c      	ite	mi
    d0b4:	2301      	movmi	r3, #1
    d0b6:	2300      	movpl	r3, #0
    d0b8:	429a      	cmp	r2, r3
    d0ba:	d09f      	beq.n	cffc <mp_obj_float_binary_op+0x7c>
                    lhs_val += rhs_val;
    d0bc:	ee30 0a27 	vadd.f32	s0, s0, s15
    d0c0:	ed8d 0a01 	vstr	s0, [sp, #4]
    d0c4:	e79a      	b.n	cffc <mp_obj_float_binary_op+0x7c>
            if (lhs_val == 0 && rhs_val < 0 && !isinf(rhs_val)) {
    d0c6:	ed9d 8a01 	vldr	s16, [sp, #4]
    d0ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
    d0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d0d2:	d106      	bne.n	d0e2 <mp_obj_float_binary_op+0x162>
    d0d4:	eddd 7a05 	vldr	s15, [sp, #20]
    d0d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d0e0:	d418      	bmi.n	d114 <mp_obj_float_binary_op+0x194>
            if (lhs_val < 0 && rhs_val != MICROPY_FLOAT_C_FUN(floor)(rhs_val)) {
    d0e2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d0ea:	d50a      	bpl.n	d102 <mp_obj_float_binary_op+0x182>
    d0ec:	eddd 8a05 	vldr	s17, [sp, #20]
    d0f0:	eeb0 0a68 	vmov.f32	s0, s17
    d0f4:	f012 f990 	bl	1f418 <floorf>
    d0f8:	eef4 8a40 	vcmp.f32	s17, s0
    d0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d100:	d115      	bne.n	d12e <mp_obj_float_binary_op+0x1ae>
            lhs_val = MICROPY_FLOAT_C_FUN(pow)(lhs_val, rhs_val);
    d102:	eddd 0a05 	vldr	s1, [sp, #20]
    d106:	eeb0 0a48 	vmov.f32	s0, s16
    d10a:	f011 fbe3 	bl	1e8d4 <powf>
    d10e:	ed8d 0a01 	vstr	s0, [sp, #4]
            break;
    d112:	e773      	b.n	cffc <mp_obj_float_binary_op+0x7c>
            if (lhs_val == 0 && rhs_val < 0 && !isinf(rhs_val)) {
    d114:	eef0 7ae7 	vabs.f32	s15, s15
    d118:	ed9f 7a39 	vldr	s14, [pc, #228]	; d200 <mp_obj_float_binary_op+0x280>
    d11c:	eef4 7a47 	vcmp.f32	s15, s14
    d120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d124:	dcdd      	bgt.n	d0e2 <mp_obj_float_binary_op+0x162>
                mp_raise_msg(&mp_type_ZeroDivisionError, "division by zero");
    d126:	4937      	ldr	r1, [pc, #220]	; (d204 <mp_obj_float_binary_op+0x284>)
    d128:	4837      	ldr	r0, [pc, #220]	; (d208 <mp_obj_float_binary_op+0x288>)
    d12a:	f7fd f89d 	bl	a268 <mp_raise_msg>
                return mp_obj_complex_binary_op(MP_BINARY_OP_POWER, lhs_val, 0, rhs_in);
    d12e:	4629      	mov	r1, r5
    d130:	eddf 0a36 	vldr	s1, [pc, #216]	; d20c <mp_obj_float_binary_op+0x28c>
    d134:	eeb0 0a48 	vmov.f32	s0, s16
    d138:	2020      	movs	r0, #32
    d13a:	f7fe fe7f 	bl	be3c <mp_obj_complex_binary_op>
    d13e:	e761      	b.n	d004 <mp_obj_float_binary_op+0x84>
            if (rhs_val == 0) {
    d140:	eddd 7a05 	vldr	s15, [sp, #20]
    d144:	eef5 7a40 	vcmp.f32	s15, #0.0
    d148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d14c:	d0eb      	beq.n	d126 <mp_obj_float_binary_op+0x1a6>
            mp_obj_float_divmod(&lhs_val, &rhs_val);
    d14e:	a905      	add	r1, sp, #20
    d150:	a801      	add	r0, sp, #4
    d152:	f7ff fded 	bl	cd30 <mp_obj_float_divmod>
                mp_obj_new_float(lhs_val),
    d156:	ed9d 0a01 	vldr	s0, [sp, #4]
    d15a:	f7ff fe4f 	bl	cdfc <mp_obj_new_float>
            mp_obj_t tuple[2] = {
    d15e:	9003      	str	r0, [sp, #12]
                mp_obj_new_float(rhs_val),
    d160:	ed9d 0a05 	vldr	s0, [sp, #20]
    d164:	f7ff fe4a 	bl	cdfc <mp_obj_new_float>
            mp_obj_t tuple[2] = {
    d168:	9004      	str	r0, [sp, #16]
            return mp_obj_new_tuple(2, tuple);
    d16a:	a903      	add	r1, sp, #12
    d16c:	2002      	movs	r0, #2
    d16e:	f004 fb69 	bl	11844 <mp_obj_new_tuple>
    d172:	e747      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d174:	ed9d 7a01 	vldr	s14, [sp, #4]
    d178:	eddd 7a05 	vldr	s15, [sp, #20]
    d17c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    d180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d184:	d531      	bpl.n	d1ea <mp_obj_float_binary_op+0x26a>
    d186:	4822      	ldr	r0, [pc, #136]	; (d210 <mp_obj_float_binary_op+0x290>)
    d188:	e73c      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d18a:	ed9d 7a01 	vldr	s14, [sp, #4]
    d18e:	eddd 7a05 	vldr	s15, [sp, #20]
    d192:	eeb4 7ae7 	vcmpe.f32	s14, s15
    d196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d19a:	dd28      	ble.n	d1ee <mp_obj_float_binary_op+0x26e>
    d19c:	481c      	ldr	r0, [pc, #112]	; (d210 <mp_obj_float_binary_op+0x290>)
    d19e:	e731      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d1a0:	ed9d 7a01 	vldr	s14, [sp, #4]
    d1a4:	eddd 7a05 	vldr	s15, [sp, #20]
    d1a8:	eeb4 7a67 	vcmp.f32	s14, s15
    d1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1b0:	d11f      	bne.n	d1f2 <mp_obj_float_binary_op+0x272>
    d1b2:	4817      	ldr	r0, [pc, #92]	; (d210 <mp_obj_float_binary_op+0x290>)
    d1b4:	e726      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d1b6:	ed9d 7a01 	vldr	s14, [sp, #4]
    d1ba:	eddd 7a05 	vldr	s15, [sp, #20]
    d1be:	eeb4 7ae7 	vcmpe.f32	s14, s15
    d1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1c6:	d816      	bhi.n	d1f6 <mp_obj_float_binary_op+0x276>
    d1c8:	4811      	ldr	r0, [pc, #68]	; (d210 <mp_obj_float_binary_op+0x290>)
    d1ca:	e71b      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d1cc:	ed9d 7a01 	vldr	s14, [sp, #4]
    d1d0:	eddd 7a05 	vldr	s15, [sp, #20]
    d1d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    d1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1dc:	db0d      	blt.n	d1fa <mp_obj_float_binary_op+0x27a>
    d1de:	480c      	ldr	r0, [pc, #48]	; (d210 <mp_obj_float_binary_op+0x290>)
    d1e0:	e710      	b.n	d004 <mp_obj_float_binary_op+0x84>
        return MP_OBJ_NULL; // op not supported
    d1e2:	2000      	movs	r0, #0
    d1e4:	e70e      	b.n	d004 <mp_obj_float_binary_op+0x84>
            return MP_OBJ_NULL; // op not supported
    d1e6:	2000      	movs	r0, #0
    d1e8:	e70c      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d1ea:	480a      	ldr	r0, [pc, #40]	; (d214 <mp_obj_float_binary_op+0x294>)
    d1ec:	e70a      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d1ee:	4809      	ldr	r0, [pc, #36]	; (d214 <mp_obj_float_binary_op+0x294>)
    d1f0:	e708      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d1f2:	4808      	ldr	r0, [pc, #32]	; (d214 <mp_obj_float_binary_op+0x294>)
    d1f4:	e706      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d1f6:	4807      	ldr	r0, [pc, #28]	; (d214 <mp_obj_float_binary_op+0x294>)
    d1f8:	e704      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d1fa:	4806      	ldr	r0, [pc, #24]	; (d214 <mp_obj_float_binary_op+0x294>)
    d1fc:	e702      	b.n	d004 <mp_obj_float_binary_op+0x84>
    d1fe:	bf00      	nop
    d200:	7f7fffff 	.word	0x7f7fffff
    d204:	000260a4 	.word	0x000260a4
    d208:	00026cfc 	.word	0x00026cfc
    d20c:	00000000 	.word	0x00000000
    d210:	00025f4c 	.word	0x00025f4c
    d214:	00025f44 	.word	0x00025f44

0000d218 <float_binary_op>:
STATIC mp_obj_t float_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    d218:	b538      	push	{r3, r4, r5, lr}
    d21a:	4605      	mov	r5, r0
    d21c:	4614      	mov	r4, r2
    mp_float_t lhs_val = mp_obj_float_get(lhs_in);
    d21e:	4608      	mov	r0, r1
    d220:	f7ff fe30 	bl	ce84 <mp_obj_float_get>
    if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_complex)) {
    d224:	f014 0f03 	tst.w	r4, #3
    d228:	d103      	bne.n	d232 <float_binary_op+0x1a>
    d22a:	6822      	ldr	r2, [r4, #0]
    d22c:	4b07      	ldr	r3, [pc, #28]	; (d24c <float_binary_op+0x34>)
    d22e:	429a      	cmp	r2, r3
    d230:	d004      	beq.n	d23c <float_binary_op+0x24>
        return mp_obj_float_binary_op(op, lhs_val, rhs_in);
    d232:	4621      	mov	r1, r4
    d234:	4628      	mov	r0, r5
    d236:	f7ff fea3 	bl	cf80 <mp_obj_float_binary_op>
}
    d23a:	bd38      	pop	{r3, r4, r5, pc}
        return mp_obj_complex_binary_op(op, lhs_val, 0, rhs_in);
    d23c:	4621      	mov	r1, r4
    d23e:	eddf 0a04 	vldr	s1, [pc, #16]	; d250 <float_binary_op+0x38>
    d242:	4628      	mov	r0, r5
    d244:	f7fe fdfa 	bl	be3c <mp_obj_complex_binary_op>
    d248:	e7f7      	b.n	d23a <float_binary_op+0x22>
    d24a:	bf00      	nop
    d24c:	00026114 	.word	0x00026114
    d250:	00000000 	.word	0x00000000

0000d254 <fun_builtin_0_call>:
// function type.

/******************************************************************************/
/* builtin functions                                                          */

STATIC mp_obj_t fun_builtin_0_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    d254:	b510      	push	{r4, lr}
    d256:	b082      	sub	sp, #8
    d258:	4604      	mov	r4, r0
    (void)args;
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    d25a:	f010 0f03 	tst.w	r0, #3
    d25e:	d10e      	bne.n	d27e <fun_builtin_0_call+0x2a>
    d260:	4608      	mov	r0, r1
    d262:	4611      	mov	r1, r2
    d264:	6822      	ldr	r2, [r4, #0]
    d266:	4b09      	ldr	r3, [pc, #36]	; (d28c <fun_builtin_0_call+0x38>)
    d268:	429a      	cmp	r2, r3
    d26a:	d108      	bne.n	d27e <fun_builtin_0_call+0x2a>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    d26c:	2200      	movs	r2, #0
    d26e:	9200      	str	r2, [sp, #0]
    d270:	4613      	mov	r3, r2
    d272:	f7fd fa51 	bl	a718 <mp_arg_check_num>
    return self->fun._0();
    d276:	6863      	ldr	r3, [r4, #4]
    d278:	4798      	blx	r3
}
    d27a:	b002      	add	sp, #8
    d27c:	bd10      	pop	{r4, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    d27e:	4b04      	ldr	r3, [pc, #16]	; (d290 <fun_builtin_0_call+0x3c>)
    d280:	4a04      	ldr	r2, [pc, #16]	; (d294 <fun_builtin_0_call+0x40>)
    d282:	2135      	movs	r1, #53	; 0x35
    d284:	4804      	ldr	r0, [pc, #16]	; (d298 <fun_builtin_0_call+0x44>)
    d286:	f00b f969 	bl	1855c <__assert_func>
    d28a:	bf00      	nop
    d28c:	00026ff0 	.word	0x00026ff0
    d290:	00026e80 	.word	0x00026e80
    d294:	00026dcc 	.word	0x00026dcc
    d298:	00026eb0 	.word	0x00026eb0

0000d29c <fun_builtin_1_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_0_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_1_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    d29c:	b530      	push	{r4, r5, lr}
    d29e:	b083      	sub	sp, #12
    d2a0:	4604      	mov	r4, r0
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    d2a2:	f010 0f03 	tst.w	r0, #3
    d2a6:	d111      	bne.n	d2cc <fun_builtin_1_call+0x30>
    d2a8:	4608      	mov	r0, r1
    d2aa:	4611      	mov	r1, r2
    d2ac:	461d      	mov	r5, r3
    d2ae:	6822      	ldr	r2, [r4, #0]
    d2b0:	4b09      	ldr	r3, [pc, #36]	; (d2d8 <fun_builtin_1_call+0x3c>)
    d2b2:	429a      	cmp	r2, r3
    d2b4:	d10a      	bne.n	d2cc <fun_builtin_1_call+0x30>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
    d2b6:	2300      	movs	r3, #0
    d2b8:	9300      	str	r3, [sp, #0]
    d2ba:	2301      	movs	r3, #1
    d2bc:	461a      	mov	r2, r3
    d2be:	f7fd fa2b 	bl	a718 <mp_arg_check_num>
    return self->fun._1(args[0]);
    d2c2:	6863      	ldr	r3, [r4, #4]
    d2c4:	6828      	ldr	r0, [r5, #0]
    d2c6:	4798      	blx	r3
}
    d2c8:	b003      	add	sp, #12
    d2ca:	bd30      	pop	{r4, r5, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    d2cc:	4b03      	ldr	r3, [pc, #12]	; (d2dc <fun_builtin_1_call+0x40>)
    d2ce:	4a04      	ldr	r2, [pc, #16]	; (d2e0 <fun_builtin_1_call+0x44>)
    d2d0:	2143      	movs	r1, #67	; 0x43
    d2d2:	4804      	ldr	r0, [pc, #16]	; (d2e4 <fun_builtin_1_call+0x48>)
    d2d4:	f00b f942 	bl	1855c <__assert_func>
    d2d8:	0002702c 	.word	0x0002702c
    d2dc:	00026ec4 	.word	0x00026ec4
    d2e0:	00026de0 	.word	0x00026de0
    d2e4:	00026eb0 	.word	0x00026eb0

0000d2e8 <fun_builtin_2_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_1_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_2_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    d2e8:	b530      	push	{r4, r5, lr}
    d2ea:	b083      	sub	sp, #12
    d2ec:	4604      	mov	r4, r0
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    d2ee:	f010 0f03 	tst.w	r0, #3
    d2f2:	d112      	bne.n	d31a <fun_builtin_2_call+0x32>
    d2f4:	4608      	mov	r0, r1
    d2f6:	4611      	mov	r1, r2
    d2f8:	461d      	mov	r5, r3
    d2fa:	6822      	ldr	r2, [r4, #0]
    d2fc:	4b0a      	ldr	r3, [pc, #40]	; (d328 <fun_builtin_2_call+0x40>)
    d2fe:	429a      	cmp	r2, r3
    d300:	d10b      	bne.n	d31a <fun_builtin_2_call+0x32>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
    d302:	2300      	movs	r3, #0
    d304:	9300      	str	r3, [sp, #0]
    d306:	2302      	movs	r3, #2
    d308:	461a      	mov	r2, r3
    d30a:	f7fd fa05 	bl	a718 <mp_arg_check_num>
    return self->fun._2(args[0], args[1]);
    d30e:	6863      	ldr	r3, [r4, #4]
    d310:	6869      	ldr	r1, [r5, #4]
    d312:	6828      	ldr	r0, [r5, #0]
    d314:	4798      	blx	r3
}
    d316:	b003      	add	sp, #12
    d318:	bd30      	pop	{r4, r5, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    d31a:	4b04      	ldr	r3, [pc, #16]	; (d32c <fun_builtin_2_call+0x44>)
    d31c:	4a04      	ldr	r2, [pc, #16]	; (d330 <fun_builtin_2_call+0x48>)
    d31e:	2151      	movs	r1, #81	; 0x51
    d320:	4804      	ldr	r0, [pc, #16]	; (d334 <fun_builtin_2_call+0x4c>)
    d322:	f00b f91b 	bl	1855c <__assert_func>
    d326:	bf00      	nop
    d328:	00027068 	.word	0x00027068
    d32c:	00026ef4 	.word	0x00026ef4
    d330:	00026df4 	.word	0x00026df4
    d334:	00026eb0 	.word	0x00026eb0

0000d338 <fun_builtin_3_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_2_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_3_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    d338:	b530      	push	{r4, r5, lr}
    d33a:	b083      	sub	sp, #12
    d33c:	4604      	mov	r4, r0
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    d33e:	f010 0f03 	tst.w	r0, #3
    d342:	d113      	bne.n	d36c <fun_builtin_3_call+0x34>
    d344:	4608      	mov	r0, r1
    d346:	4611      	mov	r1, r2
    d348:	461d      	mov	r5, r3
    d34a:	6822      	ldr	r2, [r4, #0]
    d34c:	4b0a      	ldr	r3, [pc, #40]	; (d378 <fun_builtin_3_call+0x40>)
    d34e:	429a      	cmp	r2, r3
    d350:	d10c      	bne.n	d36c <fun_builtin_3_call+0x34>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    d352:	2300      	movs	r3, #0
    d354:	9300      	str	r3, [sp, #0]
    d356:	2303      	movs	r3, #3
    d358:	461a      	mov	r2, r3
    d35a:	f7fd f9dd 	bl	a718 <mp_arg_check_num>
    return self->fun._3(args[0], args[1], args[2]);
    d35e:	6863      	ldr	r3, [r4, #4]
    d360:	68aa      	ldr	r2, [r5, #8]
    d362:	6869      	ldr	r1, [r5, #4]
    d364:	6828      	ldr	r0, [r5, #0]
    d366:	4798      	blx	r3
}
    d368:	b003      	add	sp, #12
    d36a:	bd30      	pop	{r4, r5, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    d36c:	4b03      	ldr	r3, [pc, #12]	; (d37c <fun_builtin_3_call+0x44>)
    d36e:	4a04      	ldr	r2, [pc, #16]	; (d380 <fun_builtin_3_call+0x48>)
    d370:	215f      	movs	r1, #95	; 0x5f
    d372:	4804      	ldr	r0, [pc, #16]	; (d384 <fun_builtin_3_call+0x4c>)
    d374:	f00b f8f2 	bl	1855c <__assert_func>
    d378:	000270a4 	.word	0x000270a4
    d37c:	00026f24 	.word	0x00026f24
    d380:	00026e08 	.word	0x00026e08
    d384:	00026eb0 	.word	0x00026eb0

0000d388 <fun_builtin_var_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_3_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_var_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    d388:	b5f0      	push	{r4, r5, r6, r7, lr}
    d38a:	b087      	sub	sp, #28
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
    d38c:	f010 0f03 	tst.w	r0, #3
    d390:	d11c      	bne.n	d3cc <fun_builtin_var_call+0x44>
    d392:	4604      	mov	r4, r0
    d394:	460d      	mov	r5, r1
    d396:	4616      	mov	r6, r2
    d398:	461f      	mov	r7, r3
    d39a:	6802      	ldr	r2, [r0, #0]
    d39c:	4b14      	ldr	r3, [pc, #80]	; (d3f0 <fun_builtin_var_call+0x68>)
    d39e:	429a      	cmp	r2, r3
    d3a0:	d114      	bne.n	d3cc <fun_builtin_var_call+0x44>
    mp_obj_fun_builtin_var_t *self = MP_OBJ_TO_PTR(self_in);

    // check number of arguments
    mp_arg_check_num(n_args, n_kw, self->n_args_min, self->n_args_max, self->is_kw);
    d3a2:	8882      	ldrh	r2, [r0, #4]
    d3a4:	88c3      	ldrh	r3, [r0, #6]
    d3a6:	7901      	ldrb	r1, [r0, #4]
    d3a8:	f001 0101 	and.w	r1, r1, #1
    d3ac:	9100      	str	r1, [sp, #0]
    d3ae:	0852      	lsrs	r2, r2, #1
    d3b0:	4631      	mov	r1, r6
    d3b2:	4628      	mov	r0, r5
    d3b4:	f7fd f9b0 	bl	a718 <mp_arg_check_num>

    if (self->is_kw) {
    d3b8:	7923      	ldrb	r3, [r4, #4]
    d3ba:	f013 0f01 	tst.w	r3, #1
    d3be:	d10b      	bne.n	d3d8 <fun_builtin_var_call+0x50>
        return self->fun.kw(n_args, args, &kw_args);

    } else {
        // function takes a variable number of arguments, but no keywords

        return self->fun.var(n_args, args);
    d3c0:	68a3      	ldr	r3, [r4, #8]
    d3c2:	4639      	mov	r1, r7
    d3c4:	4628      	mov	r0, r5
    d3c6:	4798      	blx	r3
    }
}
    d3c8:	b007      	add	sp, #28
    d3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
    d3cc:	4b09      	ldr	r3, [pc, #36]	; (d3f4 <fun_builtin_var_call+0x6c>)
    d3ce:	4a0a      	ldr	r2, [pc, #40]	; (d3f8 <fun_builtin_var_call+0x70>)
    d3d0:	216d      	movs	r1, #109	; 0x6d
    d3d2:	480a      	ldr	r0, [pc, #40]	; (d3fc <fun_builtin_var_call+0x74>)
    d3d4:	f00b f8c2 	bl	1855c <__assert_func>
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
    d3d8:	eb07 0285 	add.w	r2, r7, r5, lsl #2
    d3dc:	4631      	mov	r1, r6
    d3de:	a803      	add	r0, sp, #12
    d3e0:	f7fd fa87 	bl	a8f2 <mp_map_init_fixed_table>
        return self->fun.kw(n_args, args, &kw_args);
    d3e4:	68a3      	ldr	r3, [r4, #8]
    d3e6:	aa03      	add	r2, sp, #12
    d3e8:	4639      	mov	r1, r7
    d3ea:	4628      	mov	r0, r5
    d3ec:	4798      	blx	r3
    d3ee:	e7eb      	b.n	d3c8 <fun_builtin_var_call+0x40>
    d3f0:	000270e0 	.word	0x000270e0
    d3f4:	00026f54 	.word	0x00026f54
    d3f8:	00026e1c 	.word	0x00026e1c
    d3fc:	00026eb0 	.word	0x00026eb0

0000d400 <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d404:	b083      	sub	sp, #12
    d406:	af00      	add	r7, sp, #0
    d408:	4606      	mov	r6, r0
    d40a:	6079      	str	r1, [r7, #4]
    d40c:	4692      	mov	sl, r2
    d40e:	469b      	mov	fp, r3
    dump_args(args + n_args, n_kw * 2);
    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);
    DEBUG_printf("Func n_def_args: %d\n", self->n_def_args);

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
    d410:	6880      	ldr	r0, [r0, #8]
    d412:	f008 fabb 	bl	1598c <mp_decode_uint_value>
    d416:	4680      	mov	r8, r0
    d418:	68b0      	ldr	r0, [r6, #8]
    d41a:	f008 fac2 	bl	159a2 <mp_decode_uint_skip>
    d41e:	f008 fab5 	bl	1598c <mp_decode_uint_value>
    d422:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d426:	eb00 0408 	add.w	r4, r0, r8
    d42a:	00a4      	lsls	r4, r4, #2
    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
    d42c:	2c2c      	cmp	r4, #44	; 0x2c
    d42e:	d82c      	bhi.n	d48a <fun_bc_call+0x8a>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
    }
    if (code_state == NULL) {
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
    d430:	3422      	adds	r4, #34	; 0x22
    d432:	f024 0407 	bic.w	r4, r4, #7
    d436:	ebad 0d04 	sub.w	sp, sp, r4
    d43a:	466d      	mov	r5, sp
        state_size = 0; // indicate that we allocated using alloca
    d43c:	2400      	movs	r4, #0
    }
    #endif

    INIT_CODESTATE(code_state, self, n_args, n_kw, args);
    d43e:	602e      	str	r6, [r5, #0]
    d440:	f04f 0900 	mov.w	r9, #0
    d444:	f8c5 9004 	str.w	r9, [r5, #4]
    d448:	465b      	mov	r3, fp
    d44a:	4652      	mov	r2, sl
    d44c:	6879      	ldr	r1, [r7, #4]
    d44e:	4628      	mov	r0, r5
    d450:	f008 fab0 	bl	159b4 <mp_setup_code_state>
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    d454:	f8df a07c 	ldr.w	sl, [pc, #124]	; d4d4 <fun_bc_call+0xd4>
    d458:	f8da 3004 	ldr.w	r3, [sl, #4]
    d45c:	612b      	str	r3, [r5, #16]

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
    d45e:	6873      	ldr	r3, [r6, #4]
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    d460:	f8ca 3004 	str.w	r3, [sl, #4]
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
    d464:	4649      	mov	r1, r9
    d466:	4628      	mov	r0, r5
    d468:	f007 fa88 	bl	1497c <mp_execute_bytecode>
    mp_globals_set(code_state->old_globals);
    d46c:	692b      	ldr	r3, [r5, #16]
    d46e:	f8ca 3004 	str.w	r3, [sl, #4]
        }
    }
#endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    d472:	4606      	mov	r6, r0
    d474:	b988      	cbnz	r0, d49a <fun_bc_call+0x9a>
        // return value is in *sp
        result = *code_state->sp;
    d476:	68ab      	ldr	r3, [r5, #8]
    d478:	f8d3 8000 	ldr.w	r8, [r3]

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
    d47c:	b9ec      	cbnz	r4, d4ba <fun_bc_call+0xba>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    d47e:	bb06      	cbnz	r6, d4c2 <fun_bc_call+0xc2>
        return result;
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
    }
}
    d480:	4640      	mov	r0, r8
    d482:	370c      	adds	r7, #12
    d484:	46bd      	mov	sp, r7
    d486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
    d48a:	f104 0014 	add.w	r0, r4, #20
    d48e:	f7f3 fa23 	bl	8d8 <m_malloc_maybe>
    if (code_state == NULL) {
    d492:	4605      	mov	r5, r0
    d494:	2800      	cmp	r0, #0
    d496:	d1d2      	bne.n	d43e <fun_bc_call+0x3e>
    d498:	e7ca      	b.n	d430 <fun_bc_call+0x30>
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
    d49a:	2802      	cmp	r0, #2
    d49c:	d106      	bne.n	d4ac <fun_bc_call+0xac>
        result = code_state->state[n_state - 1];
    d49e:	f108 0803 	add.w	r8, r8, #3
    d4a2:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    d4a6:	f8d8 8004 	ldr.w	r8, [r8, #4]
    d4aa:	e7e7      	b.n	d47c <fun_bc_call+0x7c>
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
    d4ac:	4b06      	ldr	r3, [pc, #24]	; (d4c8 <fun_bc_call+0xc8>)
    d4ae:	4a07      	ldr	r2, [pc, #28]	; (d4cc <fun_bc_call+0xcc>)
    d4b0:	f44f 719f 	mov.w	r1, #318	; 0x13e
    d4b4:	4806      	ldr	r0, [pc, #24]	; (d4d0 <fun_bc_call+0xd0>)
    d4b6:	f00b f851 	bl	1855c <__assert_func>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
    d4ba:	4628      	mov	r0, r5
    d4bc:	f7f3 fa27 	bl	90e <m_free>
    d4c0:	e7dd      	b.n	d47e <fun_bc_call+0x7e>
        nlr_raise(result);
    d4c2:	4640      	mov	r0, r8
    d4c4:	f7f3 f9dc 	bl	880 <nlr_jump>
    d4c8:	00026e54 	.word	0x00026e54
    d4cc:	00026e34 	.word	0x00026e34
    d4d0:	00026eb0 	.word	0x00026eb0
    d4d4:	200008a0 	.word	0x200008a0

0000d4d8 <mp_obj_code_get_name>:
qstr mp_obj_code_get_name(const byte *code_info) {
    d4d8:	b508      	push	{r3, lr}
    code_info = mp_decode_uint_skip(code_info); // skip code_info_size entry
    d4da:	f008 fa62 	bl	159a2 <mp_decode_uint_skip>
    return mp_decode_uint_value(code_info);
    d4de:	f008 fa55 	bl	1598c <mp_decode_uint_value>
}
    d4e2:	bd08      	pop	{r3, pc}

0000d4e4 <mp_obj_fun_get_name>:
qstr mp_obj_fun_get_name(mp_const_obj_t fun_in) {
    d4e4:	b508      	push	{r3, lr}
    bc = mp_decode_uint_skip(bc); // skip n_state
    d4e6:	6880      	ldr	r0, [r0, #8]
    d4e8:	f008 fa5b 	bl	159a2 <mp_decode_uint_skip>
    bc = mp_decode_uint_skip(bc); // skip n_exc_stack
    d4ec:	f008 fa59 	bl	159a2 <mp_decode_uint_skip>
    return mp_obj_code_get_name(bc);
    d4f0:	3004      	adds	r0, #4
    d4f2:	f7ff fff1 	bl	d4d8 <mp_obj_code_get_name>
}
    d4f6:	bd08      	pop	{r3, pc}

0000d4f8 <mp_obj_new_fun_bc>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = fun_bc_attr,
#endif
};

mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args_in, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table) {
    d4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d4fc:	460f      	mov	r7, r1
    d4fe:	4691      	mov	r9, r2
    d500:	4698      	mov	r8, r3
    size_t n_def_args = 0;
    size_t n_extra_args = 0;
    mp_obj_tuple_t *def_args = MP_OBJ_TO_PTR(def_args_in);
    if (def_args_in != MP_OBJ_NULL) {
    d502:	4606      	mov	r6, r0
    d504:	b360      	cbz	r0, d560 <mp_obj_new_fun_bc+0x68>
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
    d506:	f010 0f03 	tst.w	r0, #3
    d50a:	d122      	bne.n	d552 <mp_obj_new_fun_bc+0x5a>
    d50c:	6802      	ldr	r2, [r0, #0]
    d50e:	4b16      	ldr	r3, [pc, #88]	; (d568 <mp_obj_new_fun_bc+0x70>)
    d510:	429a      	cmp	r2, r3
    d512:	d11e      	bne.n	d552 <mp_obj_new_fun_bc+0x5a>
        n_def_args = def_args->len;
    d514:	6845      	ldr	r5, [r0, #4]
        n_extra_args = def_args->len;
    }
    if (def_kw_args != MP_OBJ_NULL) {
    d516:	b32f      	cbz	r7, d564 <mp_obj_new_fun_bc+0x6c>
        n_extra_args += 1;
    d518:	1c68      	adds	r0, r5, #1
    }
    mp_obj_fun_bc_t *o = m_new_obj_var(mp_obj_fun_bc_t, mp_obj_t, n_extra_args);
    d51a:	3004      	adds	r0, #4
    d51c:	0080      	lsls	r0, r0, #2
    d51e:	f7f3 f9cd 	bl	8bc <m_malloc>
    d522:	4604      	mov	r4, r0
    o->base.type = &mp_type_fun_bc;
    d524:	4b11      	ldr	r3, [pc, #68]	; (d56c <mp_obj_new_fun_bc+0x74>)
    d526:	6003      	str	r3, [r0, #0]
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    d528:	4b11      	ldr	r3, [pc, #68]	; (d570 <mp_obj_new_fun_bc+0x78>)
    d52a:	685b      	ldr	r3, [r3, #4]
    o->globals = mp_globals_get();
    d52c:	6043      	str	r3, [r0, #4]
    o->bytecode = code;
    d52e:	f8c0 9008 	str.w	r9, [r0, #8]
    o->const_table = const_table;
    d532:	f8c0 800c 	str.w	r8, [r0, #12]
    if (def_args != NULL) {
    d536:	b12e      	cbz	r6, d544 <mp_obj_new_fun_bc+0x4c>
        memcpy(o->extra_args, def_args->items, n_def_args * sizeof(mp_obj_t));
    d538:	00aa      	lsls	r2, r5, #2
    d53a:	f106 0108 	add.w	r1, r6, #8
    d53e:	3010      	adds	r0, #16
    d540:	f00e f958 	bl	1b7f4 <memcpy>
    }
    if (def_kw_args != MP_OBJ_NULL) {
    d544:	b117      	cbz	r7, d54c <mp_obj_new_fun_bc+0x54>
        o->extra_args[n_def_args] = def_kw_args;
    d546:	3504      	adds	r5, #4
    d548:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    }
    return MP_OBJ_FROM_PTR(o);
}
    d54c:	4620      	mov	r0, r4
    d54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
    d552:	4b08      	ldr	r3, [pc, #32]	; (d574 <mp_obj_new_fun_bc+0x7c>)
    d554:	4a08      	ldr	r2, [pc, #32]	; (d578 <mp_obj_new_fun_bc+0x80>)
    d556:	f240 1171 	movw	r1, #369	; 0x171
    d55a:	4808      	ldr	r0, [pc, #32]	; (d57c <mp_obj_new_fun_bc+0x84>)
    d55c:	f00a fffe 	bl	1855c <__assert_func>
    size_t n_def_args = 0;
    d560:	2500      	movs	r5, #0
    d562:	e7d8      	b.n	d516 <mp_obj_new_fun_bc+0x1e>
    d564:	4628      	mov	r0, r5
    d566:	e7d8      	b.n	d51a <mp_obj_new_fun_bc+0x22>
    d568:	00028844 	.word	0x00028844
    d56c:	00026fb4 	.word	0x00026fb4
    d570:	200008a0 	.word	0x200008a0
    d574:	00026f88 	.word	0x00026f88
    d578:	00026e40 	.word	0x00026e40
    d57c:	00026eb0 	.word	0x00026eb0

0000d580 <gen_wrap_call>:
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
    mp_code_state_t code_state;
} mp_obj_gen_instance_t;

STATIC mp_obj_t gen_wrap_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    d580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d584:	4617      	mov	r7, r2
    d586:	4698      	mov	r8, r3
    mp_obj_gen_wrap_t *self = MP_OBJ_TO_PTR(self_in);
    mp_obj_fun_bc_t *self_fun = (mp_obj_fun_bc_t*)self->fun;
    d588:	6845      	ldr	r5, [r0, #4]
    assert(self_fun->base.type == &mp_type_fun_bc);
    d58a:	682a      	ldr	r2, [r5, #0]
    d58c:	4b15      	ldr	r3, [pc, #84]	; (d5e4 <gen_wrap_call+0x64>)
    d58e:	429a      	cmp	r2, r3
    d590:	d121      	bne.n	d5d6 <gen_wrap_call+0x56>
    d592:	460e      	mov	r6, r1

    // bytecode prelude: get state size and exception stack size
    size_t n_state = mp_decode_uint_value(self_fun->bytecode);
    d594:	68a8      	ldr	r0, [r5, #8]
    d596:	f008 f9f9 	bl	1598c <mp_decode_uint_value>
    d59a:	4604      	mov	r4, r0
    size_t n_exc_stack = mp_decode_uint_value(mp_decode_uint_skip(self_fun->bytecode));
    d59c:	68a8      	ldr	r0, [r5, #8]
    d59e:	f008 fa00 	bl	159a2 <mp_decode_uint_skip>
    d5a2:	f008 f9f3 	bl	1598c <mp_decode_uint_value>

    // allocate the generator object, with room for local stack and exception stack
    mp_obj_gen_instance_t *o = m_new_obj_var(mp_obj_gen_instance_t, byte,
    d5a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d5aa:	4420      	add	r0, r4
    d5ac:	3007      	adds	r0, #7
    d5ae:	0080      	lsls	r0, r0, #2
    d5b0:	f7f3 f984 	bl	8bc <m_malloc>
    d5b4:	4604      	mov	r4, r0
        n_state * sizeof(mp_obj_t) + n_exc_stack * sizeof(mp_exc_stack_t));
    o->base.type = &mp_type_gen_instance;
    d5b6:	4b0c      	ldr	r3, [pc, #48]	; (d5e8 <gen_wrap_call+0x68>)
    d5b8:	6003      	str	r3, [r0, #0]

    o->globals = self_fun->globals;
    d5ba:	686b      	ldr	r3, [r5, #4]
    d5bc:	6043      	str	r3, [r0, #4]
    o->code_state.fun_bc = self_fun;
    d5be:	6085      	str	r5, [r0, #8]
    o->code_state.ip = 0;
    d5c0:	2300      	movs	r3, #0
    d5c2:	60c3      	str	r3, [r0, #12]
    mp_setup_code_state(&o->code_state, n_args, n_kw, args);
    d5c4:	4643      	mov	r3, r8
    d5c6:	463a      	mov	r2, r7
    d5c8:	4631      	mov	r1, r6
    d5ca:	3008      	adds	r0, #8
    d5cc:	f008 f9f2 	bl	159b4 <mp_setup_code_state>
    return MP_OBJ_FROM_PTR(o);
}
    d5d0:	4620      	mov	r0, r4
    d5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(self_fun->base.type == &mp_type_fun_bc);
    d5d6:	4b05      	ldr	r3, [pc, #20]	; (d5ec <gen_wrap_call+0x6c>)
    d5d8:	4a05      	ldr	r2, [pc, #20]	; (d5f0 <gen_wrap_call+0x70>)
    d5da:	2136      	movs	r1, #54	; 0x36
    d5dc:	4805      	ldr	r0, [pc, #20]	; (d5f4 <gen_wrap_call+0x74>)
    d5de:	f00a ffbd 	bl	1855c <__assert_func>
    d5e2:	bf00      	nop
    d5e4:	00026fb4 	.word	0x00026fb4
    d5e8:	000272dc 	.word	0x000272dc
    d5ec:	00027200 	.word	0x00027200
    d5f0:	0002711c 	.word	0x0002711c
    d5f4:	00027228 	.word	0x00027228

0000d5f8 <gen_instance_pend_throw>:
    }
}

STATIC MP_DEFINE_CONST_FUN_OBJ_1(gen_instance_close_obj, gen_instance_close);

STATIC mp_obj_t gen_instance_pend_throw(mp_obj_t self_in, mp_obj_t exc_in) {
    d5f8:	b508      	push	{r3, lr}
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
    if (self->code_state.sp == self->code_state.state - 1) {
    d5fa:	6903      	ldr	r3, [r0, #16]
    d5fc:	3018      	adds	r0, #24
    d5fe:	4283      	cmp	r3, r0
    d600:	d002      	beq.n	d608 <gen_instance_pend_throw+0x10>
        mp_raise_TypeError("can't pend throw to just-started generator");
    }
    mp_obj_t prev = *self->code_state.sp;
    d602:	6818      	ldr	r0, [r3, #0]
    *self->code_state.sp = exc_in;
    d604:	6019      	str	r1, [r3, #0]
    return prev;
}
    d606:	bd08      	pop	{r3, pc}
        mp_raise_TypeError("can't pend throw to just-started generator");
    d608:	4801      	ldr	r0, [pc, #4]	; (d610 <gen_instance_pend_throw+0x18>)
    d60a:	f7fd f84d 	bl	a6a8 <mp_raise_TypeError>
    d60e:	bf00      	nop
    d610:	00027198 	.word	0x00027198

0000d614 <gen_instance_print>:
STATIC void gen_instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    d614:	b538      	push	{r3, r4, r5, lr}
    d616:	4605      	mov	r5, r0
    d618:	460c      	mov	r4, r1
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
    d61a:	6888      	ldr	r0, [r1, #8]
    d61c:	f7ff ff62 	bl	d4e4 <mp_obj_fun_get_name>
    d620:	4623      	mov	r3, r4
    d622:	4602      	mov	r2, r0
    d624:	4902      	ldr	r1, [pc, #8]	; (d630 <gen_instance_print+0x1c>)
    d626:	4628      	mov	r0, r5
    d628:	f7f4 fd20 	bl	206c <mp_printf>
}
    d62c:	bd38      	pop	{r3, r4, r5, pc}
    d62e:	bf00      	nop
    d630:	000271cc 	.word	0x000271cc

0000d634 <mp_obj_new_gen_wrap>:
mp_obj_t mp_obj_new_gen_wrap(mp_obj_t fun) {
    d634:	b510      	push	{r4, lr}
    d636:	4604      	mov	r4, r0
    mp_obj_gen_wrap_t *o = m_new_obj(mp_obj_gen_wrap_t);
    d638:	2008      	movs	r0, #8
    d63a:	f7f3 f93f 	bl	8bc <m_malloc>
    o->base.type = &mp_type_gen_wrap;
    d63e:	4a02      	ldr	r2, [pc, #8]	; (d648 <mp_obj_new_gen_wrap+0x14>)
    d640:	6002      	str	r2, [r0, #0]
    o->fun = MP_OBJ_TO_PTR(fun);
    d642:	6044      	str	r4, [r0, #4]
}
    d644:	bd10      	pop	{r4, pc}
    d646:	bf00      	nop
    d648:	00027318 	.word	0x00027318

0000d64c <mp_obj_gen_resume>:
mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    d64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
    d650:	f010 0f03 	tst.w	r0, #3
    d654:	d12a      	bne.n	d6ac <mp_obj_gen_resume+0x60>
    d656:	4604      	mov	r4, r0
    d658:	461f      	mov	r7, r3
    d65a:	6800      	ldr	r0, [r0, #0]
    d65c:	4b27      	ldr	r3, [pc, #156]	; (d6fc <mp_obj_gen_resume+0xb0>)
    d65e:	4298      	cmp	r0, r3
    d660:	d124      	bne.n	d6ac <mp_obj_gen_resume+0x60>
    if (self->code_state.ip == 0) {
    d662:	68e3      	ldr	r3, [r4, #12]
    d664:	b343      	cbz	r3, d6b8 <mp_obj_gen_resume+0x6c>
    if (self->code_state.sp == self->code_state.state - 1) {
    d666:	6923      	ldr	r3, [r4, #16]
    d668:	f104 0018 	add.w	r0, r4, #24
    d66c:	4283      	cmp	r3, r0
    d66e:	d029      	beq.n	d6c4 <mp_obj_gen_resume+0x78>
        if (*self->code_state.sp != mp_const_none) {
    d670:	6818      	ldr	r0, [r3, #0]
    d672:	4d23      	ldr	r5, [pc, #140]	; (d700 <mp_obj_gen_resume+0xb4>)
    d674:	42a8      	cmp	r0, r5
    d676:	d02b      	beq.n	d6d0 <mp_obj_gen_resume+0x84>
            *self->code_state.sp = MP_OBJ_NULL;
    d678:	2200      	movs	r2, #0
    d67a:	601a      	str	r2, [r3, #0]
            throw_value = *self->code_state.sp;
    d67c:	4602      	mov	r2, r0
    d67e:	4e21      	ldr	r6, [pc, #132]	; (d704 <mp_obj_gen_resume+0xb8>)
    d680:	f8d6 8004 	ldr.w	r8, [r6, #4]
    mp_globals_set(self->globals);
    d684:	6863      	ldr	r3, [r4, #4]
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    d686:	6073      	str	r3, [r6, #4]
    mp_vm_return_kind_t ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
    d688:	4611      	mov	r1, r2
    d68a:	f104 0008 	add.w	r0, r4, #8
    d68e:	f007 f975 	bl	1497c <mp_execute_bytecode>
    d692:	4605      	mov	r5, r0
    d694:	f8c6 8004 	str.w	r8, [r6, #4]
    switch (ret_kind) {
    d698:	2801      	cmp	r0, #1
    d69a:	d01b      	beq.n	d6d4 <mp_obj_gen_resume+0x88>
    d69c:	2802      	cmp	r0, #2
    d69e:	d020      	beq.n	d6e2 <mp_obj_gen_resume+0x96>
            self->code_state.ip = 0;
    d6a0:	2300      	movs	r3, #0
    d6a2:	60e3      	str	r3, [r4, #12]
            *ret_val = *self->code_state.sp;
    d6a4:	6923      	ldr	r3, [r4, #16]
    d6a6:	681b      	ldr	r3, [r3, #0]
    d6a8:	603b      	str	r3, [r7, #0]
            break;
    d6aa:	e008      	b.n	d6be <mp_obj_gen_resume+0x72>
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
    d6ac:	4b16      	ldr	r3, [pc, #88]	; (d708 <mp_obj_gen_resume+0xbc>)
    d6ae:	4a17      	ldr	r2, [pc, #92]	; (d70c <mp_obj_gen_resume+0xc0>)
    d6b0:	2161      	movs	r1, #97	; 0x61
    d6b2:	4817      	ldr	r0, [pc, #92]	; (d710 <mp_obj_gen_resume+0xc4>)
    d6b4:	f00a ff52 	bl	1855c <__assert_func>
        *ret_val = MP_OBJ_STOP_ITERATION;
    d6b8:	2304      	movs	r3, #4
    d6ba:	603b      	str	r3, [r7, #0]
        return MP_VM_RETURN_NORMAL;
    d6bc:	2500      	movs	r5, #0
}
    d6be:	4628      	mov	r0, r5
    d6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (send_value != mp_const_none) {
    d6c4:	4b0e      	ldr	r3, [pc, #56]	; (d700 <mp_obj_gen_resume+0xb4>)
    d6c6:	4299      	cmp	r1, r3
    d6c8:	d0d9      	beq.n	d67e <mp_obj_gen_resume+0x32>
            mp_raise_TypeError("can't send non-None value to a just-started generator");
    d6ca:	4812      	ldr	r0, [pc, #72]	; (d714 <mp_obj_gen_resume+0xc8>)
    d6cc:	f7fc ffec 	bl	a6a8 <mp_raise_TypeError>
            *self->code_state.sp = send_value;
    d6d0:	6019      	str	r1, [r3, #0]
    d6d2:	e7d4      	b.n	d67e <mp_obj_gen_resume+0x32>
            *ret_val = *self->code_state.sp;
    d6d4:	6923      	ldr	r3, [r4, #16]
    d6d6:	681b      	ldr	r3, [r3, #0]
    d6d8:	603b      	str	r3, [r7, #0]
            *self->code_state.sp = mp_const_none;
    d6da:	6923      	ldr	r3, [r4, #16]
    d6dc:	4a08      	ldr	r2, [pc, #32]	; (d700 <mp_obj_gen_resume+0xb4>)
    d6de:	601a      	str	r2, [r3, #0]
            break;
    d6e0:	e7ed      	b.n	d6be <mp_obj_gen_resume+0x72>
            size_t n_state = mp_decode_uint_value(self->code_state.fun_bc->bytecode);
    d6e2:	68a3      	ldr	r3, [r4, #8]
    d6e4:	6898      	ldr	r0, [r3, #8]
    d6e6:	f008 f951 	bl	1598c <mp_decode_uint_value>
            self->code_state.ip = 0;
    d6ea:	2300      	movs	r3, #0
    d6ec:	60e3      	str	r3, [r4, #12]
            *ret_val = self->code_state.state[n_state - 1];
    d6ee:	3005      	adds	r0, #5
    d6f0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    d6f4:	6863      	ldr	r3, [r4, #4]
    d6f6:	603b      	str	r3, [r7, #0]
            break;
    d6f8:	e7e1      	b.n	d6be <mp_obj_gen_resume+0x72>
    d6fa:	bf00      	nop
    d6fc:	000272dc 	.word	0x000272dc
    d700:	00027b40 	.word	0x00027b40
    d704:	200008a0 	.word	0x200008a0
    d708:	00027240 	.word	0x00027240
    d70c:	0002712c 	.word	0x0002712c
    d710:	00027228 	.word	0x00027228
    d714:	000272a4 	.word	0x000272a4

0000d718 <gen_resume_and_raise>:
STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value) {
    d718:	b500      	push	{lr}
    d71a:	b083      	sub	sp, #12
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
    d71c:	ab01      	add	r3, sp, #4
    d71e:	f7ff ff95 	bl	d64c <mp_obj_gen_resume>
    d722:	2801      	cmp	r0, #1
    d724:	d010      	beq.n	d748 <gen_resume_and_raise+0x30>
    d726:	2802      	cmp	r0, #2
    d728:	d012      	beq.n	d750 <gen_resume_and_raise+0x38>
            if (ret == mp_const_none || ret == MP_OBJ_STOP_ITERATION) {
    d72a:	9b01      	ldr	r3, [sp, #4]
    d72c:	4a12      	ldr	r2, [pc, #72]	; (d778 <gen_resume_and_raise+0x60>)
    d72e:	4293      	cmp	r3, r2
    d730:	d020      	beq.n	d774 <gen_resume_and_raise+0x5c>
    d732:	2b04      	cmp	r3, #4
    d734:	d101      	bne.n	d73a <gen_resume_and_raise+0x22>
                return MP_OBJ_STOP_ITERATION;
    d736:	2004      	movs	r0, #4
    d738:	e007      	b.n	d74a <gen_resume_and_raise+0x32>
                nlr_raise(mp_obj_new_exception_args(&mp_type_StopIteration, 1, &ret));
    d73a:	aa01      	add	r2, sp, #4
    d73c:	2101      	movs	r1, #1
    d73e:	480f      	ldr	r0, [pc, #60]	; (d77c <gen_resume_and_raise+0x64>)
    d740:	f7ff f99a 	bl	ca78 <mp_obj_new_exception_args>
    d744:	f7f3 f89c 	bl	880 <nlr_jump>
            return ret;
    d748:	9801      	ldr	r0, [sp, #4]
}
    d74a:	b003      	add	sp, #12
    d74c:	f85d fb04 	ldr.w	pc, [sp], #4
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    d750:	9801      	ldr	r0, [sp, #4]
    d752:	f7fd fa13 	bl	ab7c <mp_obj_get_type>
    d756:	4909      	ldr	r1, [pc, #36]	; (d77c <gen_resume_and_raise+0x64>)
    d758:	f004 ffd6 	bl	12708 <mp_obj_is_subclass_fast>
    d75c:	b138      	cbz	r0, d76e <gen_resume_and_raise+0x56>
                mp_obj_t val = mp_obj_exception_get_value(ret);
    d75e:	9801      	ldr	r0, [sp, #4]
    d760:	f7ff f95a 	bl	ca18 <mp_obj_exception_get_value>
                if (val == mp_const_none) {
    d764:	4b04      	ldr	r3, [pc, #16]	; (d778 <gen_resume_and_raise+0x60>)
    d766:	4283      	cmp	r3, r0
    d768:	d101      	bne.n	d76e <gen_resume_and_raise+0x56>
                    return MP_OBJ_STOP_ITERATION;
    d76a:	2004      	movs	r0, #4
    d76c:	e7ed      	b.n	d74a <gen_resume_and_raise+0x32>
            nlr_raise(ret);
    d76e:	9801      	ldr	r0, [sp, #4]
    d770:	f7f3 f886 	bl	880 <nlr_jump>
                return MP_OBJ_STOP_ITERATION;
    d774:	2004      	movs	r0, #4
    d776:	e7e8      	b.n	d74a <gen_resume_and_raise+0x32>
    d778:	00027b40 	.word	0x00027b40
    d77c:	00026bd0 	.word	0x00026bd0

0000d780 <gen_instance_throw>:
STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
    d780:	b508      	push	{r3, lr}
    d782:	460b      	mov	r3, r1
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
    d784:	2802      	cmp	r0, #2
    d786:	d007      	beq.n	d798 <gen_instance_throw+0x18>
    d788:	688a      	ldr	r2, [r1, #8]
    mp_obj_t ret = gen_resume_and_raise(args[0], mp_const_none, exc);
    d78a:	4907      	ldr	r1, [pc, #28]	; (d7a8 <gen_instance_throw+0x28>)
    d78c:	6818      	ldr	r0, [r3, #0]
    d78e:	f7ff ffc3 	bl	d718 <gen_resume_and_raise>
    if (ret == MP_OBJ_STOP_ITERATION) {
    d792:	2804      	cmp	r0, #4
    d794:	d002      	beq.n	d79c <gen_instance_throw+0x1c>
}
    d796:	bd08      	pop	{r3, pc}
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
    d798:	684a      	ldr	r2, [r1, #4]
    d79a:	e7f6      	b.n	d78a <gen_instance_throw+0xa>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
    d79c:	4803      	ldr	r0, [pc, #12]	; (d7ac <gen_instance_throw+0x2c>)
    d79e:	f7ff f983 	bl	caa8 <mp_obj_new_exception>
    d7a2:	f7f3 f86d 	bl	880 <nlr_jump>
    d7a6:	bf00      	nop
    d7a8:	00027b40 	.word	0x00027b40
    d7ac:	00026bd0 	.word	0x00026bd0

0000d7b0 <gen_instance_send>:
STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
    d7b0:	b508      	push	{r3, lr}
    mp_obj_t ret = gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL);
    d7b2:	2200      	movs	r2, #0
    d7b4:	f7ff ffb0 	bl	d718 <gen_resume_and_raise>
    if (ret == MP_OBJ_STOP_ITERATION) {
    d7b8:	2804      	cmp	r0, #4
    d7ba:	d000      	beq.n	d7be <gen_instance_send+0xe>
}
    d7bc:	bd08      	pop	{r3, pc}
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
    d7be:	4802      	ldr	r0, [pc, #8]	; (d7c8 <gen_instance_send+0x18>)
    d7c0:	f7ff f972 	bl	caa8 <mp_obj_new_exception>
    d7c4:	f7f3 f85c 	bl	880 <nlr_jump>
    d7c8:	00026bd0 	.word	0x00026bd0

0000d7cc <gen_instance_iternext>:
STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
    d7cc:	b508      	push	{r3, lr}
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL);
    d7ce:	2200      	movs	r2, #0
    d7d0:	4901      	ldr	r1, [pc, #4]	; (d7d8 <gen_instance_iternext+0xc>)
    d7d2:	f7ff ffa1 	bl	d718 <gen_resume_and_raise>
}
    d7d6:	bd08      	pop	{r3, pc}
    d7d8:	00027b40 	.word	0x00027b40

0000d7dc <gen_instance_close>:
STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
    d7dc:	b500      	push	{lr}
    d7de:	b083      	sub	sp, #12
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
    d7e0:	ab01      	add	r3, sp, #4
    d7e2:	4a11      	ldr	r2, [pc, #68]	; (d828 <gen_instance_close+0x4c>)
    d7e4:	4911      	ldr	r1, [pc, #68]	; (d82c <gen_instance_close+0x50>)
    d7e6:	f7ff ff31 	bl	d64c <mp_obj_gen_resume>
    d7ea:	2801      	cmp	r0, #1
    d7ec:	d005      	beq.n	d7fa <gen_instance_close+0x1e>
    d7ee:	2802      	cmp	r0, #2
    d7f0:	d007      	beq.n	d802 <gen_instance_close+0x26>
}
    d7f2:	480e      	ldr	r0, [pc, #56]	; (d82c <gen_instance_close+0x50>)
    d7f4:	b003      	add	sp, #12
    d7f6:	f85d fb04 	ldr.w	pc, [sp], #4
            mp_raise_msg(&mp_type_RuntimeError, "generator ignored GeneratorExit");
    d7fa:	490d      	ldr	r1, [pc, #52]	; (d830 <gen_instance_close+0x54>)
    d7fc:	480d      	ldr	r0, [pc, #52]	; (d834 <gen_instance_close+0x58>)
    d7fe:	f7fc fd33 	bl	a268 <mp_raise_msg>
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
    d802:	9801      	ldr	r0, [sp, #4]
    d804:	f7fd f9ba 	bl	ab7c <mp_obj_get_type>
    d808:	490b      	ldr	r1, [pc, #44]	; (d838 <gen_instance_close+0x5c>)
    d80a:	f004 ff7d 	bl	12708 <mp_obj_is_subclass_fast>
    d80e:	2800      	cmp	r0, #0
    d810:	d1ef      	bne.n	d7f2 <gen_instance_close+0x16>
                mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    d812:	9801      	ldr	r0, [sp, #4]
    d814:	f7fd f9b2 	bl	ab7c <mp_obj_get_type>
    d818:	4908      	ldr	r1, [pc, #32]	; (d83c <gen_instance_close+0x60>)
    d81a:	f004 ff75 	bl	12708 <mp_obj_is_subclass_fast>
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
    d81e:	2800      	cmp	r0, #0
    d820:	d1e7      	bne.n	d7f2 <gen_instance_close+0x16>
            nlr_raise(ret);
    d822:	9801      	ldr	r0, [sp, #4]
    d824:	f7f3 f82c 	bl	880 <nlr_jump>
    d828:	000266d0 	.word	0x000266d0
    d82c:	00027b40 	.word	0x00027b40
    d830:	00027140 	.word	0x00027140
    d834:	00026b94 	.word	0x00026b94
    d838:	000268c4 	.word	0x000268c4
    d83c:	00026bd0 	.word	0x00026bd0

0000d840 <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
    d840:	b530      	push	{r4, r5, lr}
    d842:	b08d      	sub	sp, #52	; 0x34
    d844:	4605      	mov	r5, r0
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    d846:	4668      	mov	r0, sp
    d848:	f7f3 f808 	bl	85c <nlr_push>
    d84c:	b158      	cbz	r0, d866 <it_iternext+0x26>
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
        nlr_pop();
        return value;
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t*)((mp_obj_base_t*)nlr.ret_val)->type;
    d84e:	9801      	ldr	r0, [sp, #4]
    d850:	6803      	ldr	r3, [r0, #0]
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
    d852:	4a0f      	ldr	r2, [pc, #60]	; (d890 <it_iternext+0x50>)
    d854:	4293      	cmp	r3, r2
    d856:	d018      	beq.n	d88a <it_iternext+0x4a>
    d858:	4a0e      	ldr	r2, [pc, #56]	; (d894 <it_iternext+0x54>)
    d85a:	4293      	cmp	r3, r2
    d85c:	d113      	bne.n	d886 <it_iternext+0x46>
            // return MP_OBJ_STOP_ITERATION instead of raising
            return MP_OBJ_STOP_ITERATION;
    d85e:	2404      	movs	r4, #4
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
        }
    }
}
    d860:	4620      	mov	r0, r4
    d862:	b00d      	add	sp, #52	; 0x34
    d864:	bd30      	pop	{r4, r5, pc}
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
    d866:	1d2a      	adds	r2, r5, #4
    d868:	2100      	movs	r1, #0
    d86a:	2001      	movs	r0, #1
    d86c:	f7fb ff3d 	bl	96ea <mp_call_method_n_kw>
    d870:	4604      	mov	r4, r0
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
    d872:	68eb      	ldr	r3, [r5, #12]
    d874:	105b      	asrs	r3, r3, #1
    d876:	3301      	adds	r3, #1
    d878:	005b      	lsls	r3, r3, #1
    d87a:	f043 0301 	orr.w	r3, r3, #1
    d87e:	60eb      	str	r3, [r5, #12]
        nlr_pop();
    d880:	f7f2 ffe4 	bl	84c <nlr_pop>
        return value;
    d884:	e7ec      	b.n	d860 <it_iternext+0x20>
            nlr_jump(nlr.ret_val);
    d886:	f7f2 fffb 	bl	880 <nlr_jump>
            return MP_OBJ_STOP_ITERATION;
    d88a:	2404      	movs	r4, #4
    d88c:	e7e8      	b.n	d860 <it_iternext+0x20>
    d88e:	bf00      	nop
    d890:	00026bd0 	.word	0x00026bd0
    d894:	00026978 	.word	0x00026978

0000d898 <mp_obj_new_getitem_iter>:

// args are those returned from mp_load_method_maybe (ie either an attribute or a method)
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf) {
    assert(sizeof(mp_obj_getitem_iter_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_getitem_iter_t *o = (mp_obj_getitem_iter_t*)iter_buf;
    o->base.type = &it_type;
    d898:	4b04      	ldr	r3, [pc, #16]	; (d8ac <mp_obj_new_getitem_iter+0x14>)
    d89a:	600b      	str	r3, [r1, #0]
    o->args[0] = args[0];
    d89c:	6803      	ldr	r3, [r0, #0]
    d89e:	604b      	str	r3, [r1, #4]
    o->args[1] = args[1];
    d8a0:	6843      	ldr	r3, [r0, #4]
    d8a2:	608b      	str	r3, [r1, #8]
    o->args[2] = MP_OBJ_NEW_SMALL_INT(0);
    d8a4:	2301      	movs	r3, #1
    d8a6:	60cb      	str	r3, [r1, #12]
    return MP_OBJ_FROM_PTR(o);
}
    d8a8:	4608      	mov	r0, r1
    d8aa:	4770      	bx	lr
    d8ac:	00027354 	.word	0x00027354

0000d8b0 <mp_classify_fp_as_int>:
    e = u.i[MP_ENDIANNESS_LITTLE];
#endif
#define MP_FLOAT_SIGN_SHIFT_I32 ((MP_FLOAT_FRAC_BITS + MP_FLOAT_EXP_BITS) % 32)
#define MP_FLOAT_EXP_SHIFT_I32 (MP_FLOAT_FRAC_BITS % 32)

    if (e & (1U << MP_FLOAT_SIGN_SHIFT_I32)) {
    d8b0:	ee10 3a10 	vmov	r3, s0
    d8b4:	2b00      	cmp	r3, #0
    d8b6:	db06      	blt.n	d8c6 <mp_classify_fp_as_int+0x16>
            e = 0;
        } else {
            e += ((1 << MP_FLOAT_EXP_BITS) - 1) << MP_FLOAT_EXP_SHIFT_I32;
        }
    } else {
        e &= ~((1 << MP_FLOAT_EXP_SHIFT_I32) - 1);
    d8b8:	0ddb      	lsrs	r3, r3, #23
    d8ba:	05db      	lsls	r3, r3, #23
    }
    // 8 * sizeof(uintptr_t) counts the number of bits for a small int
    // TODO provide a way to configure this properly
    if (e <= ((8 * sizeof(uintptr_t) + MP_FLOAT_EXP_BIAS - 3) << MP_FLOAT_EXP_SHIFT_I32)) {
    d8bc:	f1b3 4f9c 	cmp.w	r3, #1308622848	; 0x4e000000
    d8c0:	d907      	bls.n	d8d2 <mp_classify_fp_as_int+0x22>
    if (e <= (((sizeof(long long) * BITS_PER_BYTE) + MP_FLOAT_EXP_BIAS - 2) << MP_FLOAT_EXP_SHIFT_I32)) {
        return MP_FP_CLASS_FIT_LONGINT;
    }
#endif
#if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_MPZ
    return MP_FP_CLASS_FIT_LONGINT;
    d8c2:	2001      	movs	r0, #1
#else
    return MP_FP_CLASS_OVERFLOW;
#endif
}
    d8c4:	4770      	bx	lr
        if ((e & ~(1 << MP_FLOAT_SIGN_SHIFT_I32)) == 0) {
    d8c6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
    d8ca:	d004      	beq.n	d8d6 <mp_classify_fp_as_int+0x26>
            e += ((1 << MP_FLOAT_EXP_BITS) - 1) << MP_FLOAT_EXP_SHIFT_I32;
    d8cc:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
    d8d0:	e7f4      	b.n	d8bc <mp_classify_fp_as_int+0xc>
        return MP_FP_CLASS_FIT_SMALLINT;
    d8d2:	2000      	movs	r0, #0
    d8d4:	4770      	bx	lr
    d8d6:	2000      	movs	r0, #0
    d8d8:	4770      	bx	lr
	...

0000d8dc <int_to_bytes>:
}

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(int_from_bytes_fun_obj, 3, 4, int_from_bytes);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(int_from_bytes_obj, MP_ROM_PTR(&int_from_bytes_fun_obj));

STATIC mp_obj_t int_to_bytes(size_t n_args, const mp_obj_t *args) {
    d8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8e0:	b084      	sub	sp, #16
    d8e2:	460d      	mov	r5, r1
    // TODO: Support signed param (assumes signed=False)
    (void)n_args;

    mp_int_t len = mp_obj_get_int(args[1]);
    d8e4:	6848      	ldr	r0, [r1, #4]
    d8e6:	f7fd fa71 	bl	adcc <mp_obj_get_int>
    if (len < 0) {
    d8ea:	1e04      	subs	r4, r0, #0
    d8ec:	db2a      	blt.n	d944 <int_to_bytes+0x68>
        mp_raise_ValueError(NULL);
    }
    bool big_endian = args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little);
    d8ee:	f8d5 8008 	ldr.w	r8, [r5, #8]
    d8f2:	f240 766a 	movw	r6, #1898	; 0x76a
    d8f6:	ebb8 0606 	subs.w	r6, r8, r6
    d8fa:	bf18      	it	ne
    d8fc:	2601      	movne	r6, #1

    vstr_t vstr;
    vstr_init_len(&vstr, len);
    d8fe:	4621      	mov	r1, r4
    d900:	4668      	mov	r0, sp
    d902:	f7f3 ff6a 	bl	17da <vstr_init_len>
    byte *data = (byte*)vstr.buf;
    d906:	9f02      	ldr	r7, [sp, #8]
    memset(data, 0, len);
    d908:	4622      	mov	r2, r4
    d90a:	2100      	movs	r1, #0
    d90c:	4638      	mov	r0, r7
    d90e:	f00d ffb5 	bl	1b87c <memset>

    #if MICROPY_LONGINT_IMPL != MICROPY_LONGINT_IMPL_NONE
    if (!MP_OBJ_IS_SMALL_INT(args[0])) {
    d912:	6828      	ldr	r0, [r5, #0]
    d914:	f010 0f01 	tst.w	r0, #1
    d918:	d017      	beq.n	d94a <int_to_bytes+0x6e>
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    } else
    #endif
    {
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(args[0]);
    d91a:	1043      	asrs	r3, r0, #1
        size_t l = MIN((size_t)len, sizeof(val));
    d91c:	4620      	mov	r0, r4
    d91e:	2c04      	cmp	r4, #4
    d920:	bf28      	it	cs
    d922:	2004      	movcs	r0, #4
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
    d924:	f240 726a 	movw	r2, #1898	; 0x76a
    d928:	4590      	cmp	r8, r2
    d92a:	d014      	beq.n	d956 <int_to_bytes+0x7a>
    d92c:	1a22      	subs	r2, r4, r0
    d92e:	443a      	add	r2, r7
    d930:	4631      	mov	r1, r6
    d932:	f005 fd30 	bl	13396 <mp_binary_set_int>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
    d936:	4669      	mov	r1, sp
    d938:	4808      	ldr	r0, [pc, #32]	; (d95c <int_to_bytes+0x80>)
    d93a:	f002 f803 	bl	f944 <mp_obj_new_str_from_vstr>
}
    d93e:	b004      	add	sp, #16
    d940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mp_raise_ValueError(NULL);
    d944:	2000      	movs	r0, #0
    d946:	f7fc fcaf 	bl	a2a8 <mp_raise_ValueError>
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    d94a:	463b      	mov	r3, r7
    d94c:	4622      	mov	r2, r4
    d94e:	4631      	mov	r1, r6
    d950:	f000 fa64 	bl	de1c <mp_obj_int_to_bytes_impl>
    d954:	e7ef      	b.n	d936 <int_to_bytes+0x5a>
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
    d956:	2200      	movs	r2, #0
    d958:	e7e9      	b.n	d92e <int_to_bytes+0x52>
    d95a:	bf00      	nop
    d95c:	000280c8 	.word	0x000280c8

0000d960 <int_from_bytes>:
STATIC mp_obj_t int_from_bytes(size_t n_args, const mp_obj_t *args) {
    d960:	b5f0      	push	{r4, r5, r6, r7, lr}
    d962:	b085      	sub	sp, #20
    d964:	460c      	mov	r4, r1
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
    d966:	2201      	movs	r2, #1
    d968:	a901      	add	r1, sp, #4
    d96a:	6860      	ldr	r0, [r4, #4]
    d96c:	f7fd fca0 	bl	b2b0 <mp_get_buffer_raise>
    const byte* buf = (const byte*)bufinfo.buf;
    d970:	9a01      	ldr	r2, [sp, #4]
    if (args[2] == MP_OBJ_NEW_QSTR(MP_QSTR_little)) {
    d972:	68a7      	ldr	r7, [r4, #8]
    d974:	f240 736a 	movw	r3, #1898	; 0x76a
    d978:	429f      	cmp	r7, r3
    d97a:	d00f      	beq.n	d99c <int_from_bytes+0x3c>
    const byte* buf = (const byte*)bufinfo.buf;
    d97c:	4614      	mov	r4, r2
    int delta = 1;
    d97e:	2601      	movs	r6, #1
    size_t len = bufinfo.len;
    d980:	9902      	ldr	r1, [sp, #8]
    d982:	460b      	mov	r3, r1
    mp_uint_t value = 0;
    d984:	2000      	movs	r0, #0
    for (; len--; buf += delta) {
    d986:	1e5d      	subs	r5, r3, #1
    d988:	b1b3      	cbz	r3, d9b8 <int_from_bytes+0x58>
        if (value > (MP_SMALL_INT_MAX >> 8)) {
    d98a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    d98e:	d20b      	bcs.n	d9a8 <int_from_bytes+0x48>
        value = (value << 8) | *buf;
    d990:	7823      	ldrb	r3, [r4, #0]
    d992:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    for (; len--; buf += delta) {
    d996:	4434      	add	r4, r6
    d998:	462b      	mov	r3, r5
    d99a:	e7f4      	b.n	d986 <int_from_bytes+0x26>
        buf += bufinfo.len - 1;
    d99c:	9c02      	ldr	r4, [sp, #8]
    d99e:	3c01      	subs	r4, #1
    d9a0:	4414      	add	r4, r2
        delta = -1;
    d9a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    d9a6:	e7eb      	b.n	d980 <int_from_bytes+0x20>
            return mp_obj_int_from_bytes_impl(args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little), bufinfo.len, bufinfo.buf);
    d9a8:	f240 706a 	movw	r0, #1898	; 0x76a
    d9ac:	1a38      	subs	r0, r7, r0
    d9ae:	bf18      	it	ne
    d9b0:	2001      	movne	r0, #1
    d9b2:	f000 fa23 	bl	ddfc <mp_obj_int_from_bytes_impl>
    d9b6:	e001      	b.n	d9bc <int_from_bytes+0x5c>
    return mp_obj_new_int_from_uint(value);
    d9b8:	f000 fadc 	bl	df74 <mp_obj_new_int_from_uint>
}
    d9bc:	b005      	add	sp, #20
    d9be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d9c0 <mp_obj_new_int_from_float>:
mp_obj_t mp_obj_new_int_from_float(mp_float_t val) {
    d9c0:	b510      	push	{r4, lr}
    d9c2:	ed2d 8b02 	vpush	{d8}
    d9c6:	eeb0 8a40 	vmov.f32	s16, s0
    int cl = fpclassify(val);
    d9ca:	eef0 7ac0 	vabs.f32	s15, s0
    d9ce:	eef4 7a67 	vcmp.f32	s15, s15
    d9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d9d6:	d61a      	bvs.n	da0e <mp_obj_new_int_from_float+0x4e>
    d9d8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; da54 <mp_obj_new_int_from_float+0x94>
    d9dc:	eef4 7ac7 	vcmpe.f32	s15, s14
    d9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d9e4:	dc0d      	bgt.n	da02 <mp_obj_new_int_from_float+0x42>
    d9e6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; da58 <mp_obj_new_int_from_float+0x98>
    d9ea:	eef4 7ac7 	vcmpe.f32	s15, s14
    d9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d9f2:	da0e      	bge.n	da12 <mp_obj_new_int_from_float+0x52>
    d9f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
    d9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d9fc:	d01b      	beq.n	da36 <mp_obj_new_int_from_float+0x76>
    d9fe:	2303      	movs	r3, #3
    da00:	e008      	b.n	da14 <mp_obj_new_int_from_float+0x54>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_OverflowError, "can't convert inf to int"));
    da02:	4916      	ldr	r1, [pc, #88]	; (da5c <mp_obj_new_int_from_float+0x9c>)
    da04:	4816      	ldr	r0, [pc, #88]	; (da60 <mp_obj_new_int_from_float+0xa0>)
    da06:	f7ff f8d1 	bl	cbac <mp_obj_new_exception_msg>
    da0a:	f7f2 ff39 	bl	880 <nlr_jump>
    int cl = fpclassify(val);
    da0e:	2300      	movs	r3, #0
    da10:	e000      	b.n	da14 <mp_obj_new_int_from_float+0x54>
    da12:	2304      	movs	r3, #4
    } else if (cl == FP_NAN) {
    da14:	b18b      	cbz	r3, da3a <mp_obj_new_int_from_float+0x7a>
        mp_fp_as_int_class_t icl = mp_classify_fp_as_int(val);
    da16:	eeb0 0a48 	vmov.f32	s0, s16
    da1a:	f7ff ff49 	bl	d8b0 <mp_classify_fp_as_int>
        if (icl == MP_FP_CLASS_FIT_SMALLINT) {
    da1e:	b978      	cbnz	r0, da40 <mp_obj_new_int_from_float+0x80>
            return MP_OBJ_NEW_SMALL_INT((mp_int_t)val);
    da20:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    da24:	ee17 0a90 	vmov	r0, s15
    da28:	0040      	lsls	r0, r0, #1
    da2a:	f040 0401 	orr.w	r4, r0, #1
}
    da2e:	4620      	mov	r0, r4
    da30:	ecbd 8b02 	vpop	{d8}
    da34:	bd10      	pop	{r4, pc}
    int cl = fpclassify(val);
    da36:	2302      	movs	r3, #2
    da38:	e7ec      	b.n	da14 <mp_obj_new_int_from_float+0x54>
        mp_raise_ValueError("can't convert NaN to int");
    da3a:	480a      	ldr	r0, [pc, #40]	; (da64 <mp_obj_new_int_from_float+0xa4>)
    da3c:	f7fc fc34 	bl	a2a8 <mp_raise_ValueError>
            mp_obj_int_t *o = mp_obj_int_new_mpz();
    da40:	f000 f98e 	bl	dd60 <mp_obj_int_new_mpz>
    da44:	4604      	mov	r4, r0
            mpz_set_from_float(&o->mpz, val);
    da46:	eeb0 0a48 	vmov.f32	s0, s16
    da4a:	3004      	adds	r0, #4
    da4c:	f7f4 ffb8 	bl	29c0 <mpz_set_from_float>
            return MP_OBJ_FROM_PTR(o);
    da50:	e7ed      	b.n	da2e <mp_obj_new_int_from_float+0x6e>
    da52:	bf00      	nop
    da54:	7f7fffff 	.word	0x7f7fffff
    da58:	00800000 	.word	0x00800000
    da5c:	00027460 	.word	0x00027460
    da60:	00026b58 	.word	0x00026b58
    da64:	0002747c 	.word	0x0002747c

0000da68 <mp_obj_int_make_new>:
STATIC mp_obj_t mp_obj_int_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    da68:	b570      	push	{r4, r5, r6, lr}
    da6a:	b084      	sub	sp, #16
    da6c:	460c      	mov	r4, r1
    da6e:	4611      	mov	r1, r2
    da70:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
    da72:	2200      	movs	r2, #0
    da74:	9200      	str	r2, [sp, #0]
    da76:	2302      	movs	r3, #2
    da78:	4620      	mov	r0, r4
    da7a:	f7fc fe4d 	bl	a718 <mp_arg_check_num>
    switch (n_args) {
    da7e:	2c00      	cmp	r4, #0
    da80:	d03e      	beq.n	db00 <mp_obj_int_make_new+0x98>
    da82:	2c01      	cmp	r4, #1
    da84:	d12b      	bne.n	dade <mp_obj_int_make_new+0x76>
            if (MP_OBJ_IS_INT(args[0])) {
    da86:	6828      	ldr	r0, [r5, #0]
    da88:	f010 0f01 	tst.w	r0, #1
    da8c:	d136      	bne.n	dafc <mp_obj_int_make_new+0x94>
    da8e:	f010 0303 	ands.w	r3, r0, #3
    da92:	d103      	bne.n	da9c <mp_obj_int_make_new+0x34>
    da94:	6801      	ldr	r1, [r0, #0]
    da96:	4a1b      	ldr	r2, [pc, #108]	; (db04 <mp_obj_int_make_new+0x9c>)
    da98:	4291      	cmp	r1, r2
    da9a:	d02f      	beq.n	dafc <mp_obj_int_make_new+0x94>
            } else if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
    da9c:	2b02      	cmp	r3, #2
    da9e:	d010      	beq.n	dac2 <mp_obj_int_make_new+0x5a>
    daa0:	b923      	cbnz	r3, daac <mp_obj_int_make_new+0x44>
    daa2:	6802      	ldr	r2, [r0, #0]
    daa4:	6991      	ldr	r1, [r2, #24]
    daa6:	4a18      	ldr	r2, [pc, #96]	; (db08 <mp_obj_int_make_new+0xa0>)
    daa8:	4291      	cmp	r1, r2
    daaa:	d00a      	beq.n	dac2 <mp_obj_int_make_new+0x5a>
            } else if (mp_obj_is_float(args[0])) {
    daac:	b91b      	cbnz	r3, dab6 <mp_obj_int_make_new+0x4e>
    daae:	6802      	ldr	r2, [r0, #0]
    dab0:	4b16      	ldr	r3, [pc, #88]	; (db0c <mp_obj_int_make_new+0xa4>)
    dab2:	429a      	cmp	r2, r3
    dab4:	d00e      	beq.n	dad4 <mp_obj_int_make_new+0x6c>
                return MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(args[0]));
    dab6:	f7fd f989 	bl	adcc <mp_obj_get_int>
    daba:	0040      	lsls	r0, r0, #1
    dabc:	f040 0001 	orr.w	r0, r0, #1
    dac0:	e01c      	b.n	dafc <mp_obj_int_make_new+0x94>
                const char *s = mp_obj_str_get_data(args[0], &l);
    dac2:	a903      	add	r1, sp, #12
    dac4:	f002 fbde 	bl	10284 <mp_obj_str_get_data>
                return mp_parse_num_integer(s, l, 0, NULL);
    dac8:	2300      	movs	r3, #0
    daca:	461a      	mov	r2, r3
    dacc:	9903      	ldr	r1, [sp, #12]
    dace:	f7fb fa4f 	bl	8f70 <mp_parse_num_integer>
    dad2:	e013      	b.n	dafc <mp_obj_int_make_new+0x94>
                return mp_obj_new_int_from_float(mp_obj_float_get(args[0]));
    dad4:	f7ff f9d6 	bl	ce84 <mp_obj_float_get>
    dad8:	f7ff ff72 	bl	d9c0 <mp_obj_new_int_from_float>
    dadc:	e00e      	b.n	dafc <mp_obj_int_make_new+0x94>
            const char *s = mp_obj_str_get_data(args[0], &l);
    dade:	a903      	add	r1, sp, #12
    dae0:	6828      	ldr	r0, [r5, #0]
    dae2:	f002 fbcf 	bl	10284 <mp_obj_str_get_data>
    dae6:	4604      	mov	r4, r0
            return mp_parse_num_integer(s, l, mp_obj_get_int(args[1]), NULL);
    dae8:	9e03      	ldr	r6, [sp, #12]
    daea:	6868      	ldr	r0, [r5, #4]
    daec:	f7fd f96e 	bl	adcc <mp_obj_get_int>
    daf0:	2300      	movs	r3, #0
    daf2:	4602      	mov	r2, r0
    daf4:	4631      	mov	r1, r6
    daf6:	4620      	mov	r0, r4
    daf8:	f7fb fa3a 	bl	8f70 <mp_parse_num_integer>
}
    dafc:	b004      	add	sp, #16
    dafe:	bd70      	pop	{r4, r5, r6, pc}
            return MP_OBJ_NEW_SMALL_INT(0);
    db00:	2001      	movs	r0, #1
    db02:	e7fb      	b.n	dafc <mp_obj_int_make_new+0x94>
    db04:	00027498 	.word	0x00027498
    db08:	000106e5 	.word	0x000106e5
    db0c:	00026d90 	.word	0x00026d90

0000db10 <mp_int_format_size>:
size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma) {
    db10:	b538      	push	{r3, r4, r5, lr}
    assert(2 <= base && base <= 16);
    db12:	1e8c      	subs	r4, r1, #2
    db14:	2c0e      	cmp	r4, #14
    db16:	d812      	bhi.n	db3e <mp_int_format_size+0x2e>
    size_t num_digits = num_bits / log_base2_floor[base - 1] + 1;
    db18:	3901      	subs	r1, #1
    db1a:	4c0e      	ldr	r4, [pc, #56]	; (db54 <mp_int_format_size+0x44>)
    db1c:	5c65      	ldrb	r5, [r4, r1]
    db1e:	fbb0 f5f5 	udiv	r5, r0, r5
    db22:	3501      	adds	r5, #1
    size_t num_commas = comma ? num_digits / 3 : 0;
    db24:	b18b      	cbz	r3, db4a <mp_int_format_size+0x3a>
    db26:	4b0c      	ldr	r3, [pc, #48]	; (db58 <mp_int_format_size+0x48>)
    db28:	fba3 1305 	umull	r1, r3, r3, r5
    db2c:	085c      	lsrs	r4, r3, #1
    size_t prefix_len = prefix ? strlen(prefix) : 0;
    db2e:	b172      	cbz	r2, db4e <mp_int_format_size+0x3e>
    db30:	4610      	mov	r0, r2
    db32:	f00d fef7 	bl	1b924 <strlen>
    return num_digits + num_commas + prefix_len + 2; // +1 for sign, +1 for null byte
    db36:	1963      	adds	r3, r4, r5
    db38:	4418      	add	r0, r3
}
    db3a:	3002      	adds	r0, #2
    db3c:	bd38      	pop	{r3, r4, r5, pc}
    assert(2 <= base && base <= 16);
    db3e:	4b07      	ldr	r3, [pc, #28]	; (db5c <mp_int_format_size+0x4c>)
    db40:	4a07      	ldr	r2, [pc, #28]	; (db60 <mp_int_format_size+0x50>)
    db42:	21d0      	movs	r1, #208	; 0xd0
    db44:	4807      	ldr	r0, [pc, #28]	; (db64 <mp_int_format_size+0x54>)
    db46:	f00a fd09 	bl	1855c <__assert_func>
    size_t num_commas = comma ? num_digits / 3 : 0;
    db4a:	2400      	movs	r4, #0
    db4c:	e7ef      	b.n	db2e <mp_int_format_size+0x1e>
    size_t prefix_len = prefix ? strlen(prefix) : 0;
    db4e:	2000      	movs	r0, #0
    db50:	e7f1      	b.n	db36 <mp_int_format_size+0x26>
    db52:	bf00      	nop
    db54:	000273fc 	.word	0x000273fc
    db58:	aaaaaaab 	.word	0xaaaaaaab
    db5c:	0002740c 	.word	0x0002740c
    db60:	00027390 	.word	0x00027390
    db64:	00027424 	.word	0x00027424

0000db68 <mp_obj_int_formatted>:
                           int base, const char *prefix, char base_char, char comma) {
    db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db6c:	b089      	sub	sp, #36	; 0x24
    db6e:	9005      	str	r0, [sp, #20]
    db70:	460d      	mov	r5, r1
    db72:	9206      	str	r2, [sp, #24]
    db74:	9f12      	ldr	r7, [sp, #72]	; 0x48
    db76:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    db78:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    db7c:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    if (MP_OBJ_IS_SMALL_INT(self_in)) {
    db80:	f013 0f01 	tst.w	r3, #1
    db84:	d035      	beq.n	dbf2 <mp_obj_int_formatted+0x8a>
    if (num < 0) {
    db86:	105c      	asrs	r4, r3, #1
    db88:	d44d      	bmi.n	dc26 <mp_obj_int_formatted+0xbe>
    char sign = '\0';
    db8a:	2300      	movs	r3, #0
    db8c:	9307      	str	r3, [sp, #28]
    size_t needed_size = mp_int_format_size(sizeof(fmt_int_t) * 8, base, prefix, comma);
    db8e:	4643      	mov	r3, r8
    db90:	4632      	mov	r2, r6
    db92:	4639      	mov	r1, r7
    db94:	2020      	movs	r0, #32
    db96:	f7ff ffbb 	bl	db10 <mp_int_format_size>
    db9a:	4683      	mov	fp, r0
    if (needed_size > *buf_size) {
    db9c:	682b      	ldr	r3, [r5, #0]
    db9e:	4283      	cmp	r3, r0
    dba0:	d345      	bcc.n	dc2e <mp_obj_int_formatted+0xc6>
    char *str = *buf;
    dba2:	9b05      	ldr	r3, [sp, #20]
    dba4:	f8d3 9000 	ldr.w	r9, [r3]
    char *b = str + needed_size;
    dba8:	eb09 030b 	add.w	r3, r9, fp
    *(--b) = '\0';
    dbac:	1e58      	subs	r0, r3, #1
    dbae:	2200      	movs	r2, #0
    dbb0:	f803 2c01 	strb.w	r2, [r3, #-1]
    if (num == 0) {
    dbb4:	2c00      	cmp	r4, #0
    dbb6:	d141      	bne.n	dc3c <mp_obj_int_formatted+0xd4>
        *(--b) = '0';
    dbb8:	1e9d      	subs	r5, r3, #2
    dbba:	2230      	movs	r2, #48	; 0x30
    dbbc:	f803 2c02 	strb.w	r2, [r3, #-2]
    if (prefix) {
    dbc0:	b12e      	cbz	r6, dbce <mp_obj_int_formatted+0x66>
        size_t prefix_len = strlen(prefix);
    dbc2:	4630      	mov	r0, r6
    dbc4:	f00d feae 	bl	1b924 <strlen>
        char *p = b - prefix_len;
    dbc8:	1a28      	subs	r0, r5, r0
        if (p > str) {
    dbca:	4581      	cmp	r9, r0
    dbcc:	d364      	bcc.n	dc98 <mp_obj_int_formatted+0x130>
    if (sign && b > str) {
    dbce:	9b07      	ldr	r3, [sp, #28]
    dbd0:	b123      	cbz	r3, dbdc <mp_obj_int_formatted+0x74>
    dbd2:	454d      	cmp	r5, r9
    dbd4:	d902      	bls.n	dbdc <mp_obj_int_formatted+0x74>
        *(--b) = sign;
    dbd6:	f805 3c01 	strb.w	r3, [r5, #-1]
    dbda:	3d01      	subs	r5, #1
    *fmt_size = *buf + needed_size - b - 1;
    dbdc:	9b05      	ldr	r3, [sp, #20]
    dbde:	681b      	ldr	r3, [r3, #0]
    dbe0:	445b      	add	r3, fp
    dbe2:	1b5b      	subs	r3, r3, r5
    dbe4:	3b01      	subs	r3, #1
    dbe6:	9a06      	ldr	r2, [sp, #24]
    dbe8:	6013      	str	r3, [r2, #0]
}
    dbea:	4628      	mov	r0, r5
    dbec:	b009      	add	sp, #36	; 0x24
    dbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(MP_OBJ_IS_TYPE(self_in, &mp_type_int));
    dbf2:	f013 0f03 	tst.w	r3, #3
    dbf6:	d110      	bne.n	dc1a <mp_obj_int_formatted+0xb2>
    dbf8:	6819      	ldr	r1, [r3, #0]
    dbfa:	4a28      	ldr	r2, [pc, #160]	; (dc9c <mp_obj_int_formatted+0x134>)
    dbfc:	4291      	cmp	r1, r2
    dbfe:	d10c      	bne.n	dc1a <mp_obj_int_formatted+0xb2>
        return mp_obj_int_formatted_impl(buf, buf_size, fmt_size, self_in, base, prefix, base_char, comma);
    dc00:	f8cd 800c 	str.w	r8, [sp, #12]
    dc04:	f8cd a008 	str.w	sl, [sp, #8]
    dc08:	9601      	str	r6, [sp, #4]
    dc0a:	9700      	str	r7, [sp, #0]
    dc0c:	9a06      	ldr	r2, [sp, #24]
    dc0e:	4629      	mov	r1, r5
    dc10:	9805      	ldr	r0, [sp, #20]
    dc12:	f000 f8b3 	bl	dd7c <mp_obj_int_formatted_impl>
    dc16:	4605      	mov	r5, r0
    dc18:	e7e7      	b.n	dbea <mp_obj_int_formatted+0x82>
        assert(MP_OBJ_IS_TYPE(self_in, &mp_type_int));
    dc1a:	4b21      	ldr	r3, [pc, #132]	; (dca0 <mp_obj_int_formatted+0x138>)
    dc1c:	4a21      	ldr	r2, [pc, #132]	; (dca4 <mp_obj_int_formatted+0x13c>)
    dc1e:	21e9      	movs	r1, #233	; 0xe9
    dc20:	4821      	ldr	r0, [pc, #132]	; (dca8 <mp_obj_int_formatted+0x140>)
    dc22:	f00a fc9b 	bl	1855c <__assert_func>
        num = -num;
    dc26:	4264      	negs	r4, r4
        sign = '-';
    dc28:	232d      	movs	r3, #45	; 0x2d
    dc2a:	9307      	str	r3, [sp, #28]
    dc2c:	e7af      	b.n	db8e <mp_obj_int_formatted+0x26>
        *buf = m_new(char, needed_size);
    dc2e:	f7f2 fe45 	bl	8bc <m_malloc>
    dc32:	9b05      	ldr	r3, [sp, #20]
    dc34:	6018      	str	r0, [r3, #0]
        *buf_size = needed_size;
    dc36:	f8c5 b000 	str.w	fp, [r5]
    dc3a:	e7b2      	b.n	dba2 <mp_obj_int_formatted+0x3a>
    char *last_comma = b;
    dc3c:	4684      	mov	ip, r0
    dc3e:	4641      	mov	r1, r8
    dc40:	e006      	b.n	dc50 <mp_obj_int_formatted+0xe8>
                c += '0';
    dc42:	3330      	adds	r3, #48	; 0x30
    dc44:	e00e      	b.n	dc64 <mp_obj_int_formatted+0xfc>
        while (b > str && num != 0);
    dc46:	454d      	cmp	r5, r9
    dc48:	d9ba      	bls.n	dbc0 <mp_obj_int_formatted+0x58>
    dc4a:	2a00      	cmp	r2, #0
    dc4c:	d0b8      	beq.n	dbc0 <mp_obj_int_formatted+0x58>
    dc4e:	4628      	mov	r0, r5
            int c = (fmt_uint_t)num % base;
    dc50:	fbb4 f2f7 	udiv	r2, r4, r7
    dc54:	fb07 4312 	mls	r3, r7, r2, r4
            num = (fmt_uint_t)num / base;
    dc58:	4614      	mov	r4, r2
            if (c >= 10) {
    dc5a:	2b09      	cmp	r3, #9
    dc5c:	ddf1      	ble.n	dc42 <mp_obj_int_formatted+0xda>
                c += base_char - 10;
    dc5e:	f1aa 050a 	sub.w	r5, sl, #10
    dc62:	442b      	add	r3, r5
            *(--b) = c;
    dc64:	1e45      	subs	r5, r0, #1
    dc66:	f800 3c01 	strb.w	r3, [r0, #-1]
            if (comma && num != 0 && b > str && (last_comma - b) == 3) {
    dc6a:	2900      	cmp	r1, #0
    dc6c:	d0eb      	beq.n	dc46 <mp_obj_int_formatted+0xde>
    dc6e:	2a00      	cmp	r2, #0
    dc70:	d0e9      	beq.n	dc46 <mp_obj_int_formatted+0xde>
    dc72:	45a9      	cmp	r9, r5
    dc74:	d2e7      	bcs.n	dc46 <mp_obj_int_formatted+0xde>
    dc76:	ebac 0305 	sub.w	r3, ip, r5
    dc7a:	2b03      	cmp	r3, #3
    dc7c:	d1e3      	bne.n	dc46 <mp_obj_int_formatted+0xde>
                *(--b) = comma;
    dc7e:	1e85      	subs	r5, r0, #2
    dc80:	f800 1c02 	strb.w	r1, [r0, #-2]
                last_comma = b;
    dc84:	46ac      	mov	ip, r5
    dc86:	e7de      	b.n	dc46 <mp_obj_int_formatted+0xde>
                *p++ = *prefix++;
    dc88:	3601      	adds	r6, #1
    dc8a:	7013      	strb	r3, [r2, #0]
    dc8c:	3201      	adds	r2, #1
            while (*prefix) {
    dc8e:	7833      	ldrb	r3, [r6, #0]
    dc90:	2b00      	cmp	r3, #0
    dc92:	d1f9      	bne.n	dc88 <mp_obj_int_formatted+0x120>
            b = p;
    dc94:	4605      	mov	r5, r0
    dc96:	e79a      	b.n	dbce <mp_obj_int_formatted+0x66>
        char *p = b - prefix_len;
    dc98:	4602      	mov	r2, r0
    dc9a:	e7f8      	b.n	dc8e <mp_obj_int_formatted+0x126>
    dc9c:	00027498 	.word	0x00027498
    dca0:	00027438 	.word	0x00027438
    dca4:	000273a4 	.word	0x000273a4
    dca8:	00027424 	.word	0x00027424

0000dcac <mp_obj_int_print>:
void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    dcac:	b530      	push	{r4, r5, lr}
    dcae:	b08d      	sub	sp, #52	; 0x34
    dcb0:	4605      	mov	r5, r0
    char *buf = stack_buf;
    dcb2:	ac08      	add	r4, sp, #32
    dcb4:	9407      	str	r4, [sp, #28]
    size_t buf_size = sizeof(stack_buf);
    dcb6:	2310      	movs	r3, #16
    dcb8:	9306      	str	r3, [sp, #24]
    char *str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size, self_in, 10, NULL, '\0', '\0');
    dcba:	2300      	movs	r3, #0
    dcbc:	9303      	str	r3, [sp, #12]
    dcbe:	9302      	str	r3, [sp, #8]
    dcc0:	9301      	str	r3, [sp, #4]
    dcc2:	230a      	movs	r3, #10
    dcc4:	9300      	str	r3, [sp, #0]
    dcc6:	460b      	mov	r3, r1
    dcc8:	aa05      	add	r2, sp, #20
    dcca:	a906      	add	r1, sp, #24
    dccc:	a807      	add	r0, sp, #28
    dcce:	f7ff ff4b 	bl	db68 <mp_obj_int_formatted>
    mp_print_str(print, str);
    dcd2:	4601      	mov	r1, r0
    dcd4:	4628      	mov	r0, r5
    dcd6:	f7f3 fe32 	bl	193e <mp_print_str>
    if (buf != stack_buf) {
    dcda:	9807      	ldr	r0, [sp, #28]
    dcdc:	42a0      	cmp	r0, r4
    dcde:	d001      	beq.n	dce4 <mp_obj_int_print+0x38>
        m_del(char, buf, buf_size);
    dce0:	f7f2 fe15 	bl	90e <m_free>
}
    dce4:	b00d      	add	sp, #52	; 0x34
    dce6:	bd30      	pop	{r4, r5, pc}

0000dce8 <mp_obj_int_binary_op_extra_cases>:
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    dce8:	b538      	push	{r3, r4, r5, lr}
    dcea:	4613      	mov	r3, r2
    if (rhs_in == mp_const_false) {
    dcec:	4a17      	ldr	r2, [pc, #92]	; (dd4c <mp_obj_int_binary_op_extra_cases+0x64>)
    dcee:	4293      	cmp	r3, r2
    dcf0:	d01d      	beq.n	dd2e <mp_obj_int_binary_op_extra_cases+0x46>
    } else if (rhs_in == mp_const_true) {
    dcf2:	4a17      	ldr	r2, [pc, #92]	; (dd50 <mp_obj_int_binary_op_extra_cases+0x68>)
    dcf4:	4293      	cmp	r3, r2
    dcf6:	d01e      	beq.n	dd36 <mp_obj_int_binary_op_extra_cases+0x4e>
    } else if (op == MP_BINARY_OP_MULTIPLY) {
    dcf8:	281c      	cmp	r0, #28
    dcfa:	d120      	bne.n	dd3e <mp_obj_int_binary_op_extra_cases+0x56>
    { return ((((mp_int_t)(o)) & 3) == 2); }
    dcfc:	f003 0203 	and.w	r2, r3, #3
        if (MP_OBJ_IS_STR_OR_BYTES(rhs_in) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_list)) {
    dd00:	2a02      	cmp	r2, #2
    dd02:	d00f      	beq.n	dd24 <mp_obj_int_binary_op_extra_cases+0x3c>
    dd04:	b922      	cbnz	r2, dd10 <mp_obj_int_binary_op_extra_cases+0x28>
    dd06:	681c      	ldr	r4, [r3, #0]
    dd08:	69a5      	ldr	r5, [r4, #24]
    dd0a:	4c12      	ldr	r4, [pc, #72]	; (dd54 <mp_obj_int_binary_op_extra_cases+0x6c>)
    dd0c:	42a5      	cmp	r5, r4
    dd0e:	d009      	beq.n	dd24 <mp_obj_int_binary_op_extra_cases+0x3c>
    dd10:	b91a      	cbnz	r2, dd1a <mp_obj_int_binary_op_extra_cases+0x32>
    dd12:	681d      	ldr	r5, [r3, #0]
    dd14:	4c10      	ldr	r4, [pc, #64]	; (dd58 <mp_obj_int_binary_op_extra_cases+0x70>)
    dd16:	42a5      	cmp	r5, r4
    dd18:	d004      	beq.n	dd24 <mp_obj_int_binary_op_extra_cases+0x3c>
    dd1a:	b992      	cbnz	r2, dd42 <mp_obj_int_binary_op_extra_cases+0x5a>
    dd1c:	681c      	ldr	r4, [r3, #0]
    dd1e:	4a0f      	ldr	r2, [pc, #60]	; (dd5c <mp_obj_int_binary_op_extra_cases+0x74>)
    dd20:	4294      	cmp	r4, r2
    dd22:	d110      	bne.n	dd46 <mp_obj_int_binary_op_extra_cases+0x5e>
            return mp_binary_op(op, rhs_in, lhs_in);
    dd24:	460a      	mov	r2, r1
    dd26:	4619      	mov	r1, r3
    dd28:	f7fc fac6 	bl	a2b8 <mp_binary_op>
}
    dd2c:	bd38      	pop	{r3, r4, r5, pc}
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(0));
    dd2e:	2201      	movs	r2, #1
    dd30:	f7fc fac2 	bl	a2b8 <mp_binary_op>
    dd34:	e7fa      	b.n	dd2c <mp_obj_int_binary_op_extra_cases+0x44>
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(1));
    dd36:	2203      	movs	r2, #3
    dd38:	f7fc fabe 	bl	a2b8 <mp_binary_op>
    dd3c:	e7f6      	b.n	dd2c <mp_obj_int_binary_op_extra_cases+0x44>
    return MP_OBJ_NULL; // op not supported
    dd3e:	2000      	movs	r0, #0
    dd40:	e7f4      	b.n	dd2c <mp_obj_int_binary_op_extra_cases+0x44>
    dd42:	2000      	movs	r0, #0
    dd44:	e7f2      	b.n	dd2c <mp_obj_int_binary_op_extra_cases+0x44>
    dd46:	2000      	movs	r0, #0
    dd48:	e7f0      	b.n	dd2c <mp_obj_int_binary_op_extra_cases+0x44>
    dd4a:	bf00      	nop
    dd4c:	00025f44 	.word	0x00025f44
    dd50:	00025f4c 	.word	0x00025f4c
    dd54:	000106e5 	.word	0x000106e5
    dd58:	00028844 	.word	0x00028844
    dd5c:	00027890 	.word	0x00027890

0000dd60 <mp_obj_int_new_mpz>:
};
#undef DIG_MASK
#undef NUM_DIG
#endif

mp_obj_int_t *mp_obj_int_new_mpz(void) {
    dd60:	b510      	push	{r4, lr}
    mp_obj_int_t *o = m_new_obj(mp_obj_int_t);
    dd62:	2010      	movs	r0, #16
    dd64:	f7f2 fdaa 	bl	8bc <m_malloc>
    dd68:	4604      	mov	r4, r0
    o->base.type = &mp_type_int;
    dd6a:	4b03      	ldr	r3, [pc, #12]	; (dd78 <mp_obj_int_new_mpz+0x18>)
    dd6c:	f840 3b04 	str.w	r3, [r0], #4
    mpz_init_zero(&o->mpz);
    dd70:	f7f4 fd8c 	bl	288c <mpz_init_zero>
    return o;
}
    dd74:	4620      	mov	r0, r4
    dd76:	bd10      	pop	{r4, pc}
    dd78:	00027498 	.word	0x00027498

0000dd7c <mp_obj_int_formatted_impl>:
// The resulting formatted string will be returned from this function and the
// formatted size will be in *fmt_size.
//
// This particular routine should only be called for the mpz representation of the int.
char *mp_obj_int_formatted_impl(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                                int base, const char *prefix, char base_char, char comma) {
    dd7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dd80:	b083      	sub	sp, #12
    dd82:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_int));
    dd86:	f013 0f03 	tst.w	r3, #3
    dd8a:	d123      	bne.n	ddd4 <mp_obj_int_formatted_impl+0x58>
    dd8c:	4607      	mov	r7, r0
    dd8e:	4688      	mov	r8, r1
    dd90:	4691      	mov	r9, r2
    dd92:	461c      	mov	r4, r3
    dd94:	681a      	ldr	r2, [r3, #0]
    dd96:	4b15      	ldr	r3, [pc, #84]	; (ddec <mp_obj_int_formatted_impl+0x70>)
    dd98:	429a      	cmp	r2, r3
    dd9a:	d11b      	bne.n	ddd4 <mp_obj_int_formatted_impl+0x58>
void mpz_and_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_or_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_xor_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_divmod_inpl(mpz_t *dest_quo, mpz_t *dest_rem, const mpz_t *lhs, const mpz_t *rhs);

static inline size_t mpz_max_num_bits(const mpz_t *z) { return z->len * MPZ_DIG_SIZE; }
    dd9c:	68a0      	ldr	r0, [r4, #8]
    const mp_obj_int_t *self = MP_OBJ_TO_PTR(self_in);

    size_t needed_size = mp_int_format_size(mpz_max_num_bits(&self->mpz), base, prefix, comma);
    dd9e:	462b      	mov	r3, r5
    dda0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dda2:	990a      	ldr	r1, [sp, #40]	; 0x28
    dda4:	0100      	lsls	r0, r0, #4
    dda6:	f7ff feb3 	bl	db10 <mp_int_format_size>
    ddaa:	4606      	mov	r6, r0
    if (needed_size > *buf_size) {
    ddac:	f8d8 3000 	ldr.w	r3, [r8]
    ddb0:	4283      	cmp	r3, r0
    ddb2:	d315      	bcc.n	dde0 <mp_obj_int_formatted_impl+0x64>
        *buf = m_new(char, needed_size);
        *buf_size = needed_size;
    }
    char *str = *buf;
    ddb4:	683e      	ldr	r6, [r7, #0]

    *fmt_size = mpz_as_str_inpl(&self->mpz, base, prefix, base_char, comma, str);
    ddb6:	9601      	str	r6, [sp, #4]
    ddb8:	9500      	str	r5, [sp, #0]
    ddba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    ddbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ddc0:	990a      	ldr	r1, [sp, #40]	; 0x28
    ddc2:	1d20      	adds	r0, r4, #4
    ddc4:	f7f5 faba 	bl	333c <mpz_as_str_inpl>
    ddc8:	f8c9 0000 	str.w	r0, [r9]

    return str;
}
    ddcc:	4630      	mov	r0, r6
    ddce:	b003      	add	sp, #12
    ddd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_int));
    ddd4:	4b06      	ldr	r3, [pc, #24]	; (ddf0 <mp_obj_int_formatted_impl+0x74>)
    ddd6:	4a07      	ldr	r2, [pc, #28]	; (ddf4 <mp_obj_int_formatted_impl+0x78>)
    ddd8:	215d      	movs	r1, #93	; 0x5d
    ddda:	4807      	ldr	r0, [pc, #28]	; (ddf8 <mp_obj_int_formatted_impl+0x7c>)
    dddc:	f00a fbbe 	bl	1855c <__assert_func>
        *buf = m_new(char, needed_size);
    dde0:	f7f2 fd6c 	bl	8bc <m_malloc>
    dde4:	6038      	str	r0, [r7, #0]
        *buf_size = needed_size;
    dde6:	f8c8 6000 	str.w	r6, [r8]
    ddea:	e7e3      	b.n	ddb4 <mp_obj_int_formatted_impl+0x38>
    ddec:	00027498 	.word	0x00027498
    ddf0:	00027438 	.word	0x00027438
    ddf4:	000274f0 	.word	0x000274f0
    ddf8:	00027584 	.word	0x00027584

0000ddfc <mp_obj_int_from_bytes_impl>:

mp_obj_t mp_obj_int_from_bytes_impl(bool big_endian, size_t len, const byte *buf) {
    ddfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddfe:	4605      	mov	r5, r0
    de00:	460e      	mov	r6, r1
    de02:	4617      	mov	r7, r2
    mp_obj_int_t *o = mp_obj_int_new_mpz();
    de04:	f7ff ffac 	bl	dd60 <mp_obj_int_new_mpz>
    de08:	4604      	mov	r4, r0
    mpz_set_from_bytes(&o->mpz, big_endian, len, buf);
    de0a:	463b      	mov	r3, r7
    de0c:	4632      	mov	r2, r6
    de0e:	4629      	mov	r1, r5
    de10:	3004      	adds	r0, #4
    de12:	f7f4 fe91 	bl	2b38 <mpz_set_from_bytes>
    return MP_OBJ_FROM_PTR(o);
}
    de16:	4620      	mov	r0, r4
    de18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000de1c <mp_obj_int_to_bytes_impl>:

void mp_obj_int_to_bytes_impl(mp_obj_t self_in, bool big_endian, size_t len, byte *buf) {
    de1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_int));
    de1e:	f010 0f03 	tst.w	r0, #3
    de22:	d113      	bne.n	de4c <mp_obj_int_to_bytes_impl+0x30>
    de24:	4604      	mov	r4, r0
    de26:	460f      	mov	r7, r1
    de28:	4615      	mov	r5, r2
    de2a:	461e      	mov	r6, r3
    de2c:	6802      	ldr	r2, [r0, #0]
    de2e:	4b0a      	ldr	r3, [pc, #40]	; (de58 <mp_obj_int_to_bytes_impl+0x3c>)
    de30:	429a      	cmp	r2, r3
    de32:	d10b      	bne.n	de4c <mp_obj_int_to_bytes_impl+0x30>
    mp_obj_int_t *self = MP_OBJ_TO_PTR(self_in);
    memset(buf, 0, len);
    de34:	462a      	mov	r2, r5
    de36:	2100      	movs	r1, #0
    de38:	4630      	mov	r0, r6
    de3a:	f00d fd1f 	bl	1b87c <memset>
    mpz_as_bytes(&self->mpz, big_endian, len, buf);
    de3e:	4633      	mov	r3, r6
    de40:	462a      	mov	r2, r5
    de42:	4639      	mov	r1, r7
    de44:	1d20      	adds	r0, r4, #4
    de46:	f7f5 fa1a 	bl	327e <mpz_as_bytes>
}
    de4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_int));
    de4c:	4b03      	ldr	r3, [pc, #12]	; (de5c <mp_obj_int_to_bytes_impl+0x40>)
    de4e:	4a04      	ldr	r2, [pc, #16]	; (de60 <mp_obj_int_to_bytes_impl+0x44>)
    de50:	2173      	movs	r1, #115	; 0x73
    de52:	4804      	ldr	r0, [pc, #16]	; (de64 <mp_obj_int_to_bytes_impl+0x48>)
    de54:	f00a fb82 	bl	1855c <__assert_func>
    de58:	00027498 	.word	0x00027498
    de5c:	00027438 	.word	0x00027438
    de60:	0002750c 	.word	0x0002750c
    de64:	00027584 	.word	0x00027584

0000de68 <mp_obj_int_sign>:

int mp_obj_int_sign(mp_obj_t self_in) {
    de68:	4603      	mov	r3, r0
    if (MP_OBJ_IS_SMALL_INT(self_in)) {
    de6a:	f010 0001 	ands.w	r0, r0, #1
    de6e:	d005      	beq.n	de7c <mp_obj_int_sign+0x14>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(self_in);
        if (val < 0) {
    de70:	105b      	asrs	r3, r3, #1
    de72:	d40b      	bmi.n	de8c <mp_obj_int_sign+0x24>
            return -1;
        } else if (val > 0) {
    de74:	2b00      	cmp	r3, #0
    de76:	dd0c      	ble.n	de92 <mp_obj_int_sign+0x2a>
            return 1;
    de78:	2001      	movs	r0, #1
    de7a:	4770      	bx	lr
        } else {
            return 0;
        }
    }
    mp_obj_int_t *self = MP_OBJ_TO_PTR(self_in);
    if (self->mpz.len == 0) {
    de7c:	689a      	ldr	r2, [r3, #8]
    de7e:	b162      	cbz	r2, de9a <mp_obj_int_sign+0x32>
        return 0;
    } else if (self->mpz.neg == 0) {
    de80:	791b      	ldrb	r3, [r3, #4]
    de82:	f013 0f01 	tst.w	r3, #1
    de86:	d106      	bne.n	de96 <mp_obj_int_sign+0x2e>
        return 1;
    de88:	2001      	movs	r0, #1
    de8a:	4770      	bx	lr
            return -1;
    de8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    de90:	4770      	bx	lr
            return 0;
    de92:	2000      	movs	r0, #0
    de94:	4770      	bx	lr
    } else {
        return -1;
    de96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
    de9a:	4770      	bx	lr

0000de9c <mp_obj_int_unary_op>:

mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    de9c:	b538      	push	{r3, r4, r5, lr}
    de9e:	460d      	mov	r5, r1
    mp_obj_int_t *o = MP_OBJ_TO_PTR(o_in);
    switch (op) {
    dea0:	2807      	cmp	r0, #7
    dea2:	d831      	bhi.n	df08 <mp_obj_int_unary_op+0x6c>
    dea4:	e8df f000 	tbb	[pc, r0]
    dea8:	301a1204 	.word	0x301a1204
    deac:	220b3007 	.word	0x220b3007
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(!mpz_is_zero(&o->mpz));
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT(mpz_hash(&o->mpz));
        case MP_UNARY_OP_POSITIVE: return o_in;
    deb0:	460c      	mov	r4, r1
            mpz_abs_inpl(&self2->mpz, &self->mpz);
            return MP_OBJ_FROM_PTR(self2);
        }
        default: return MP_OBJ_NULL; // op not supported
    }
}
    deb2:	4620      	mov	r0, r4
    deb4:	bd38      	pop	{r3, r4, r5, pc}
static inline bool mpz_is_zero(const mpz_t *z) { return z->len == 0; }
    deb6:	688b      	ldr	r3, [r1, #8]
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    deb8:	b343      	cbz	r3, df0c <mp_obj_int_unary_op+0x70>
    deba:	4c15      	ldr	r4, [pc, #84]	; (df10 <mp_obj_int_unary_op+0x74>)
    debc:	e7f9      	b.n	deb2 <mp_obj_int_unary_op+0x16>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT(mpz_hash(&o->mpz));
    debe:	1d08      	adds	r0, r1, #4
    dec0:	f7f5 f9a8 	bl	3214 <mpz_hash>
    dec4:	0040      	lsls	r0, r0, #1
    dec6:	f040 0401 	orr.w	r4, r0, #1
    deca:	e7f2      	b.n	deb2 <mp_obj_int_unary_op+0x16>
        case MP_UNARY_OP_NEGATIVE: { mp_obj_int_t *o2 = mp_obj_int_new_mpz(); mpz_neg_inpl(&o2->mpz, &o->mpz); return MP_OBJ_FROM_PTR(o2); }
    decc:	f7ff ff48 	bl	dd60 <mp_obj_int_new_mpz>
    ded0:	4604      	mov	r4, r0
    ded2:	1d29      	adds	r1, r5, #4
    ded4:	3004      	adds	r0, #4
    ded6:	f7f4 fe8b 	bl	2bf0 <mpz_neg_inpl>
    deda:	e7ea      	b.n	deb2 <mp_obj_int_unary_op+0x16>
        case MP_UNARY_OP_INVERT: { mp_obj_int_t *o2 = mp_obj_int_new_mpz(); mpz_not_inpl(&o2->mpz, &o->mpz); return MP_OBJ_FROM_PTR(o2); }
    dedc:	f7ff ff40 	bl	dd60 <mp_obj_int_new_mpz>
    dee0:	4604      	mov	r4, r0
    dee2:	1d29      	adds	r1, r5, #4
    dee4:	3004      	adds	r0, #4
    dee6:	f7f4 fe92 	bl	2c0e <mpz_not_inpl>
    deea:	e7e2      	b.n	deb2 <mp_obj_int_unary_op+0x16>
            if (self->mpz.neg == 0) {
    deec:	790b      	ldrb	r3, [r1, #4]
    deee:	f013 0f01 	tst.w	r3, #1
    def2:	d101      	bne.n	def8 <mp_obj_int_unary_op+0x5c>
                return o_in;
    def4:	460c      	mov	r4, r1
    def6:	e7dc      	b.n	deb2 <mp_obj_int_unary_op+0x16>
            mp_obj_int_t *self2 = mp_obj_int_new_mpz();
    def8:	f7ff ff32 	bl	dd60 <mp_obj_int_new_mpz>
    defc:	4604      	mov	r4, r0
            mpz_abs_inpl(&self2->mpz, &self->mpz);
    defe:	1d29      	adds	r1, r5, #4
    df00:	3004      	adds	r0, #4
    df02:	f7f4 fe6a 	bl	2bda <mpz_abs_inpl>
            return MP_OBJ_FROM_PTR(self2);
    df06:	e7d4      	b.n	deb2 <mp_obj_int_unary_op+0x16>
        default: return MP_OBJ_NULL; // op not supported
    df08:	2400      	movs	r4, #0
    df0a:	e7d2      	b.n	deb2 <mp_obj_int_unary_op+0x16>
    df0c:	4c01      	ldr	r4, [pc, #4]	; (df14 <mp_obj_int_unary_op+0x78>)
    df0e:	e7d0      	b.n	deb2 <mp_obj_int_unary_op+0x16>
    df10:	00025f4c 	.word	0x00025f4c
    df14:	00025f44 	.word	0x00025f44

0000df18 <mp_obj_new_int_from_ll>:
        return MP_OBJ_NEW_SMALL_INT(value);
    }
    return mp_obj_new_int_from_ll(value);
}

mp_obj_t mp_obj_new_int_from_ll(long long val) {
    df18:	b5d0      	push	{r4, r6, r7, lr}
    df1a:	b082      	sub	sp, #8
    df1c:	4606      	mov	r6, r0
    df1e:	460f      	mov	r7, r1
    mp_obj_int_t *o = mp_obj_int_new_mpz();
    df20:	f7ff ff1e 	bl	dd60 <mp_obj_int_new_mpz>
    df24:	4604      	mov	r4, r0
    mpz_set_from_ll(&o->mpz, val, true);
    df26:	2301      	movs	r3, #1
    df28:	9300      	str	r3, [sp, #0]
    df2a:	4632      	mov	r2, r6
    df2c:	463b      	mov	r3, r7
    df2e:	3004      	adds	r0, #4
    df30:	f7f4 fd19 	bl	2966 <mpz_set_from_ll>
    return MP_OBJ_FROM_PTR(o);
}
    df34:	4620      	mov	r0, r4
    df36:	b002      	add	sp, #8
    df38:	bdd0      	pop	{r4, r6, r7, pc}

0000df3a <mp_obj_new_int>:
mp_obj_t mp_obj_new_int(mp_int_t value) {
    df3a:	b508      	push	{r3, lr}
    if (MP_SMALL_INT_FITS(value)) {
    df3c:	ea90 0340 	eors.w	r3, r0, r0, lsl #1
    df40:	d403      	bmi.n	df4a <mp_obj_new_int+0x10>
        return MP_OBJ_NEW_SMALL_INT(value);
    df42:	0040      	lsls	r0, r0, #1
    df44:	f040 0001 	orr.w	r0, r0, #1
}
    df48:	bd08      	pop	{r3, pc}
    return mp_obj_new_int_from_ll(value);
    df4a:	17c1      	asrs	r1, r0, #31
    df4c:	f7ff ffe4 	bl	df18 <mp_obj_new_int_from_ll>
    df50:	e7fa      	b.n	df48 <mp_obj_new_int+0xe>

0000df52 <mp_obj_new_int_from_ull>:

mp_obj_t mp_obj_new_int_from_ull(unsigned long long val) {
    df52:	b5d0      	push	{r4, r6, r7, lr}
    df54:	b082      	sub	sp, #8
    df56:	4606      	mov	r6, r0
    df58:	460f      	mov	r7, r1
    mp_obj_int_t *o = mp_obj_int_new_mpz();
    df5a:	f7ff ff01 	bl	dd60 <mp_obj_int_new_mpz>
    df5e:	4604      	mov	r4, r0
    mpz_set_from_ll(&o->mpz, val, false);
    df60:	2300      	movs	r3, #0
    df62:	9300      	str	r3, [sp, #0]
    df64:	4632      	mov	r2, r6
    df66:	463b      	mov	r3, r7
    df68:	3004      	adds	r0, #4
    df6a:	f7f4 fcfc 	bl	2966 <mpz_set_from_ll>
    return MP_OBJ_FROM_PTR(o);
}
    df6e:	4620      	mov	r0, r4
    df70:	b002      	add	sp, #8
    df72:	bdd0      	pop	{r4, r6, r7, pc}

0000df74 <mp_obj_new_int_from_uint>:

mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
    // SMALL_INT accepts only signed numbers, so make sure the input
    // value fits completely in the small-int positive range.
    if ((value & ~MP_SMALL_INT_POSITIVE_MASK) == 0) {
    df74:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    df78:	d103      	bne.n	df82 <mp_obj_new_int_from_uint+0xe>
        return MP_OBJ_NEW_SMALL_INT(value);
    df7a:	0040      	lsls	r0, r0, #1
    df7c:	f040 0001 	orr.w	r0, r0, #1
    }
    return mp_obj_new_int_from_ull(value);
}
    df80:	4770      	bx	lr
mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
    df82:	b508      	push	{r3, lr}
    return mp_obj_new_int_from_ull(value);
    df84:	2100      	movs	r1, #0
    df86:	f7ff ffe4 	bl	df52 <mp_obj_new_int_from_ull>
}
    df8a:	bd08      	pop	{r3, pc}

0000df8c <mp_obj_new_int_from_str_len>:

mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, bool neg, unsigned int base) {
    df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df90:	b082      	sub	sp, #8
    df92:	4604      	mov	r4, r0
    df94:	460e      	mov	r6, r1
    df96:	4617      	mov	r7, r2
    df98:	4698      	mov	r8, r3
    mp_obj_int_t *o = mp_obj_int_new_mpz();
    df9a:	f7ff fee1 	bl	dd60 <mp_obj_int_new_mpz>
    df9e:	4605      	mov	r5, r0
    size_t n = mpz_set_from_str(&o->mpz, *str, len, neg, base);
    dfa0:	f8cd 8000 	str.w	r8, [sp]
    dfa4:	463b      	mov	r3, r7
    dfa6:	4632      	mov	r2, r6
    dfa8:	6821      	ldr	r1, [r4, #0]
    dfaa:	3004      	adds	r0, #4
    dfac:	f7f4 fd78 	bl	2aa0 <mpz_set_from_str>
    *str += n;
    dfb0:	6823      	ldr	r3, [r4, #0]
    dfb2:	4418      	add	r0, r3
    dfb4:	6020      	str	r0, [r4, #0]
    return MP_OBJ_FROM_PTR(o);
}
    dfb6:	4628      	mov	r0, r5
    dfb8:	b002      	add	sp, #8
    dfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dfbe <mp_obj_int_get_truncated>:

mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
    if (MP_OBJ_IS_SMALL_INT(self_in)) {
    dfbe:	f010 0f01 	tst.w	r0, #1
    dfc2:	d001      	beq.n	dfc8 <mp_obj_int_get_truncated+0xa>
        return MP_OBJ_SMALL_INT_VALUE(self_in);
    dfc4:	1040      	asrs	r0, r0, #1
    } else {
        const mp_obj_int_t *self = MP_OBJ_TO_PTR(self_in);
        // hash returns actual int value if it fits in mp_int_t
        return mpz_hash(&self->mpz);
    }
}
    dfc6:	4770      	bx	lr
mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
    dfc8:	b508      	push	{r3, lr}
        return mpz_hash(&self->mpz);
    dfca:	3004      	adds	r0, #4
    dfcc:	f7f5 f922 	bl	3214 <mpz_hash>
}
    dfd0:	bd08      	pop	{r3, pc}
	...

0000dfd4 <mp_obj_int_get_checked>:

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
    if (MP_OBJ_IS_SMALL_INT(self_in)) {
    dfd4:	f010 0f01 	tst.w	r0, #1
    dfd8:	d001      	beq.n	dfde <mp_obj_int_get_checked+0xa>
        return MP_OBJ_SMALL_INT_VALUE(self_in);
    dfda:	1040      	asrs	r0, r0, #1
        } else {
            // overflow
            mp_raise_msg(&mp_type_OverflowError, "overflow converting long int to machine word");
        }
    }
}
    dfdc:	4770      	bx	lr
mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
    dfde:	b500      	push	{lr}
    dfe0:	b083      	sub	sp, #12
        if (mpz_as_int_checked(&self->mpz, &value)) {
    dfe2:	a901      	add	r1, sp, #4
    dfe4:	3004      	adds	r0, #4
    dfe6:	f7f5 f92d 	bl	3244 <mpz_as_int_checked>
    dfea:	b118      	cbz	r0, dff4 <mp_obj_int_get_checked+0x20>
            return value;
    dfec:	9801      	ldr	r0, [sp, #4]
}
    dfee:	b003      	add	sp, #12
    dff0:	f85d fb04 	ldr.w	pc, [sp], #4
            mp_raise_msg(&mp_type_OverflowError, "overflow converting long int to machine word");
    dff4:	4901      	ldr	r1, [pc, #4]	; (dffc <mp_obj_int_get_checked+0x28>)
    dff6:	4802      	ldr	r0, [pc, #8]	; (e000 <mp_obj_int_get_checked+0x2c>)
    dff8:	f7fc f936 	bl	a268 <mp_raise_msg>
    dffc:	0002759c 	.word	0x0002759c
    e000:	00026b58 	.word	0x00026b58

0000e004 <mp_obj_int_binary_op>:
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e008:	ed2d 8b02 	vpush	{d8}
    e00c:	b088      	sub	sp, #32
    e00e:	4606      	mov	r6, r0
    e010:	460d      	mov	r5, r1
    e012:	4614      	mov	r4, r2
    if (MP_OBJ_IS_SMALL_INT(lhs_in)) {
    e014:	f011 0f01 	tst.w	r1, #1
    e018:	d127      	bne.n	e06a <mp_obj_int_binary_op+0x66>
        assert(MP_OBJ_IS_TYPE(lhs_in, &mp_type_int));
    e01a:	f011 0f03 	tst.w	r1, #3
    e01e:	d12c      	bne.n	e07a <mp_obj_int_binary_op+0x76>
    e020:	680a      	ldr	r2, [r1, #0]
    e022:	4ba8      	ldr	r3, [pc, #672]	; (e2c4 <mp_obj_int_binary_op+0x2c0>)
    e024:	429a      	cmp	r2, r3
    e026:	d128      	bne.n	e07a <mp_obj_int_binary_op+0x76>
        zlhs = &((mp_obj_int_t*)MP_OBJ_TO_PTR(lhs_in))->mpz;
    e028:	1d0f      	adds	r7, r1, #4
    if (MP_OBJ_IS_SMALL_INT(rhs_in)) {
    e02a:	f014 0f01 	tst.w	r4, #1
    e02e:	d12a      	bne.n	e086 <mp_obj_int_binary_op+0x82>
    } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_int)) {
    e030:	f014 0303 	ands.w	r3, r4, #3
    e034:	d103      	bne.n	e03e <mp_obj_int_binary_op+0x3a>
    e036:	6821      	ldr	r1, [r4, #0]
    e038:	4aa2      	ldr	r2, [pc, #648]	; (e2c4 <mp_obj_int_binary_op+0x2c0>)
    e03a:	4291      	cmp	r1, r2
    e03c:	d04a      	beq.n	e0d4 <mp_obj_int_binary_op+0xd0>
    } else if (mp_obj_is_float(rhs_in)) {
    e03e:	b91b      	cbnz	r3, e048 <mp_obj_int_binary_op+0x44>
    e040:	6821      	ldr	r1, [r4, #0]
    e042:	4aa1      	ldr	r2, [pc, #644]	; (e2c8 <mp_obj_int_binary_op+0x2c4>)
    e044:	4291      	cmp	r1, r2
    e046:	d047      	beq.n	e0d8 <mp_obj_int_binary_op+0xd4>
    } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_complex)) {
    e048:	b91b      	cbnz	r3, e052 <mp_obj_int_binary_op+0x4e>
    e04a:	6822      	ldr	r2, [r4, #0]
    e04c:	4b9f      	ldr	r3, [pc, #636]	; (e2cc <mp_obj_int_binary_op+0x2c8>)
    e04e:	429a      	cmp	r2, r3
    e050:	d04b      	beq.n	e0ea <mp_obj_int_binary_op+0xe6>
        return mp_obj_int_binary_op_extra_cases(op, lhs_in, rhs_in);
    e052:	4622      	mov	r2, r4
    e054:	4629      	mov	r1, r5
    e056:	4630      	mov	r0, r6
    e058:	f7ff fe46 	bl	dce8 <mp_obj_int_binary_op_extra_cases>
    e05c:	4680      	mov	r8, r0
}
    e05e:	4640      	mov	r0, r8
    e060:	b008      	add	sp, #32
    e062:	ecbd 8b02 	vpop	{d8}
    e066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mpz_init_fixed_from_int(&z_int, z_int_dig, MPZ_NUM_DIG_FOR_INT, MP_OBJ_SMALL_INT_VALUE(lhs_in));
    e06a:	104b      	asrs	r3, r1, #1
    e06c:	2202      	movs	r2, #2
    e06e:	a904      	add	r1, sp, #16
    e070:	a805      	add	r0, sp, #20
    e072:	f7f4 fc66 	bl	2942 <mpz_init_fixed_from_int>
        zlhs = &z_int;
    e076:	af05      	add	r7, sp, #20
    e078:	e7d7      	b.n	e02a <mp_obj_int_binary_op+0x26>
        assert(MP_OBJ_IS_TYPE(lhs_in, &mp_type_int));
    e07a:	4b95      	ldr	r3, [pc, #596]	; (e2d0 <mp_obj_int_binary_op+0x2cc>)
    e07c:	4a95      	ldr	r2, [pc, #596]	; (e2d4 <mp_obj_int_binary_op+0x2d0>)
    e07e:	21ae      	movs	r1, #174	; 0xae
    e080:	4895      	ldr	r0, [pc, #596]	; (e2d8 <mp_obj_int_binary_op+0x2d4>)
    e082:	f00a fa6b 	bl	1855c <__assert_func>
        mpz_init_fixed_from_int(&z_int, z_int_dig, MPZ_NUM_DIG_FOR_INT, MP_OBJ_SMALL_INT_VALUE(rhs_in));
    e086:	1063      	asrs	r3, r4, #1
    e088:	2202      	movs	r2, #2
    e08a:	a904      	add	r1, sp, #16
    e08c:	a805      	add	r0, sp, #20
    e08e:	f7f4 fc58 	bl	2942 <mpz_init_fixed_from_int>
        zrhs = &z_int;
    e092:	ad05      	add	r5, sp, #20
    } else if (op == MP_BINARY_OP_TRUE_DIVIDE || op == MP_BINARY_OP_INPLACE_TRUE_DIVIDE) {
    e094:	2e1e      	cmp	r6, #30
    e096:	d033      	beq.n	e100 <mp_obj_int_binary_op+0xfc>
    e098:	2e12      	cmp	r6, #18
    e09a:	d031      	beq.n	e100 <mp_obj_int_binary_op+0xfc>
    } else if (op >= MP_BINARY_OP_INPLACE_OR && op < MP_BINARY_OP_CONTAINS) {
    e09c:	f1a6 0309 	sub.w	r3, r6, #9
    e0a0:	b2db      	uxtb	r3, r3
    e0a2:	2b18      	cmp	r3, #24
    e0a4:	f200 80d8 	bhi.w	e258 <mp_obj_int_binary_op+0x254>
        mp_obj_int_t *res = mp_obj_int_new_mpz();
    e0a8:	f7ff fe5a 	bl	dd60 <mp_obj_int_new_mpz>
    e0ac:	4680      	mov	r8, r0
        switch (op) {
    e0ae:	f1a6 0309 	sub.w	r3, r6, #9
    e0b2:	2b17      	cmp	r3, #23
    e0b4:	f200 80b1 	bhi.w	e21a <mp_obj_int_binary_op+0x216>
    e0b8:	e8df f003 	tbb	[pc, r3]
    e0bc:	7b69756f 	.word	0x7b69756f
    e0c0:	3e38327b 	.word	0x3e38327b
    e0c4:	9358af44 	.word	0x9358af44
    e0c8:	7b69756f 	.word	0x7b69756f
    e0cc:	3e38327b 	.word	0x3e38327b
    e0d0:	9358af44 	.word	0x9358af44
        zrhs = &((mp_obj_int_t*)MP_OBJ_TO_PTR(rhs_in))->mpz;
    e0d4:	1d25      	adds	r5, r4, #4
    e0d6:	e7dd      	b.n	e094 <mp_obj_int_binary_op+0x90>
        return mp_obj_float_binary_op(op, mpz_as_float(zlhs), rhs_in);
    e0d8:	4638      	mov	r0, r7
    e0da:	f7f5 f90d 	bl	32f8 <mpz_as_float>
    e0de:	4621      	mov	r1, r4
    e0e0:	4630      	mov	r0, r6
    e0e2:	f7fe ff4d 	bl	cf80 <mp_obj_float_binary_op>
    e0e6:	4680      	mov	r8, r0
    e0e8:	e7b9      	b.n	e05e <mp_obj_int_binary_op+0x5a>
        return mp_obj_complex_binary_op(op, mpz_as_float(zlhs), 0, rhs_in);
    e0ea:	4638      	mov	r0, r7
    e0ec:	f7f5 f904 	bl	32f8 <mpz_as_float>
    e0f0:	4621      	mov	r1, r4
    e0f2:	eddf 0a7a 	vldr	s1, [pc, #488]	; e2dc <mp_obj_int_binary_op+0x2d8>
    e0f6:	4630      	mov	r0, r6
    e0f8:	f7fd fea0 	bl	be3c <mp_obj_complex_binary_op>
    e0fc:	4680      	mov	r8, r0
    e0fe:	e7ae      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e100:	686b      	ldr	r3, [r5, #4]
        if (mpz_is_zero(zrhs)) {
    e102:	b37b      	cbz	r3, e164 <mp_obj_int_binary_op+0x160>
        mp_float_t flhs = mpz_as_float(zlhs);
    e104:	4638      	mov	r0, r7
    e106:	f7f5 f8f7 	bl	32f8 <mpz_as_float>
    e10a:	eeb0 8a40 	vmov.f32	s16, s0
        mp_float_t frhs = mpz_as_float(zrhs);
    e10e:	4628      	mov	r0, r5
    e110:	f7f5 f8f2 	bl	32f8 <mpz_as_float>
        return mp_obj_new_float(flhs / frhs);
    e114:	ee88 0a00 	vdiv.f32	s0, s16, s0
    e118:	f7fe fe70 	bl	cdfc <mp_obj_new_float>
    e11c:	4680      	mov	r8, r0
    e11e:	e79e      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                mpz_add_inpl(&res->mpz, zlhs, zrhs);
    e120:	462a      	mov	r2, r5
    e122:	4639      	mov	r1, r7
    e124:	3004      	adds	r0, #4
    e126:	f7f4 fe25 	bl	2d74 <mpz_add_inpl>
                break;
    e12a:	e798      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                mpz_sub_inpl(&res->mpz, zlhs, zrhs);
    e12c:	462a      	mov	r2, r5
    e12e:	4639      	mov	r1, r7
    e130:	3004      	adds	r0, #4
    e132:	f7f4 fe58 	bl	2de6 <mpz_sub_inpl>
                break;
    e136:	e792      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                mpz_mul_inpl(&res->mpz, zlhs, zrhs);
    e138:	462a      	mov	r2, r5
    e13a:	4639      	mov	r1, r7
    e13c:	3004      	adds	r0, #4
    e13e:	f7f4 ff80 	bl	3042 <mpz_mul_inpl>
                break;
    e142:	e78c      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e144:	686b      	ldr	r3, [r5, #4]
                if (mpz_is_zero(zrhs)) {
    e146:	b16b      	cbz	r3, e164 <mp_obj_int_binary_op+0x160>
                mpz_t rem; mpz_init_zero(&rem);
    e148:	a801      	add	r0, sp, #4
    e14a:	f7f4 fb9f 	bl	288c <mpz_init_zero>
                mpz_divmod_inpl(&res->mpz, &rem, zlhs, zrhs);
    e14e:	462b      	mov	r3, r5
    e150:	463a      	mov	r2, r7
    e152:	a901      	add	r1, sp, #4
    e154:	f108 0004 	add.w	r0, r8, #4
    e158:	f7f5 f804 	bl	3164 <mpz_divmod_inpl>
                mpz_deinit(&rem);
    e15c:	a801      	add	r0, sp, #4
    e15e:	f7f4 fba3 	bl	28a8 <mpz_deinit>
    e162:	e77c      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                    mp_raise_msg(&mp_type_ZeroDivisionError, "division by zero");
    e164:	495e      	ldr	r1, [pc, #376]	; (e2e0 <mp_obj_int_binary_op+0x2dc>)
    e166:	485f      	ldr	r0, [pc, #380]	; (e2e4 <mp_obj_int_binary_op+0x2e0>)
    e168:	f7fc f87e 	bl	a268 <mp_raise_msg>
    e16c:	686b      	ldr	r3, [r5, #4]
                if (mpz_is_zero(zrhs)) {
    e16e:	2b00      	cmp	r3, #0
    e170:	d0f8      	beq.n	e164 <mp_obj_int_binary_op+0x160>
                mpz_t quo; mpz_init_zero(&quo);
    e172:	a801      	add	r0, sp, #4
    e174:	f7f4 fb8a 	bl	288c <mpz_init_zero>
                mpz_divmod_inpl(&quo, &res->mpz, zlhs, zrhs);
    e178:	462b      	mov	r3, r5
    e17a:	463a      	mov	r2, r7
    e17c:	f108 0104 	add.w	r1, r8, #4
    e180:	a801      	add	r0, sp, #4
    e182:	f7f4 ffef 	bl	3164 <mpz_divmod_inpl>
                mpz_deinit(&quo);
    e186:	a801      	add	r0, sp, #4
    e188:	f7f4 fb8e 	bl	28a8 <mpz_deinit>
    e18c:	e767      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                mpz_and_inpl(&res->mpz, zlhs, zrhs);
    e18e:	462a      	mov	r2, r5
    e190:	4639      	mov	r1, r7
    e192:	3004      	adds	r0, #4
    e194:	f7f4 fe6e 	bl	2e74 <mpz_and_inpl>
                break;
    e198:	e761      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                mpz_or_inpl(&res->mpz, zlhs, zrhs);
    e19a:	462a      	mov	r2, r5
    e19c:	4639      	mov	r1, r7
    e19e:	3004      	adds	r0, #4
    e1a0:	f7f4 feb5 	bl	2f0e <mpz_or_inpl>
                break;
    e1a4:	e75b      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                mpz_xor_inpl(&res->mpz, zlhs, zrhs);
    e1a6:	462a      	mov	r2, r5
    e1a8:	4639      	mov	r1, r7
    e1aa:	3004      	adds	r0, #4
    e1ac:	f7f4 fef1 	bl	2f92 <mpz_xor_inpl>
                break;
    e1b0:	e755      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                mp_int_t irhs = mp_obj_int_get_checked(rhs_in);
    e1b2:	4620      	mov	r0, r4
    e1b4:	f7ff ff0e 	bl	dfd4 <mp_obj_int_get_checked>
                if (irhs < 0) {
    e1b8:	1e02      	subs	r2, r0, #0
    e1ba:	db09      	blt.n	e1d0 <mp_obj_int_binary_op+0x1cc>
                if (op == MP_BINARY_OP_LSHIFT || op == MP_BINARY_OP_INPLACE_LSHIFT) {
    e1bc:	2e18      	cmp	r6, #24
    e1be:	d001      	beq.n	e1c4 <mp_obj_int_binary_op+0x1c0>
    e1c0:	2e0c      	cmp	r6, #12
    e1c2:	d108      	bne.n	e1d6 <mp_obj_int_binary_op+0x1d2>
                    mpz_shl_inpl(&res->mpz, zlhs, irhs);
    e1c4:	4639      	mov	r1, r7
    e1c6:	f108 0004 	add.w	r0, r8, #4
    e1ca:	f7f4 fd5e 	bl	2c8a <mpz_shl_inpl>
    e1ce:	e746      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                    mp_raise_ValueError("negative shift count");
    e1d0:	4845      	ldr	r0, [pc, #276]	; (e2e8 <mp_obj_int_binary_op+0x2e4>)
    e1d2:	f7fc f869 	bl	a2a8 <mp_raise_ValueError>
                    mpz_shr_inpl(&res->mpz, zlhs, irhs);
    e1d6:	4639      	mov	r1, r7
    e1d8:	f108 0004 	add.w	r0, r8, #4
    e1dc:	f7f4 fd74 	bl	2cc8 <mpz_shr_inpl>
    e1e0:	e73d      	b.n	e05e <mp_obj_int_binary_op+0x5a>
static inline bool mpz_is_neg(const mpz_t *z) { return z->len != 0 && z->neg != 0; }
    e1e2:	686b      	ldr	r3, [r5, #4]
    e1e4:	b12b      	cbz	r3, e1f2 <mp_obj_int_binary_op+0x1ee>
    e1e6:	782b      	ldrb	r3, [r5, #0]
    e1e8:	f013 0f01 	tst.w	r3, #1
    e1ec:	d10c      	bne.n	e208 <mp_obj_int_binary_op+0x204>
    e1ee:	2300      	movs	r3, #0
    e1f0:	e000      	b.n	e1f4 <mp_obj_int_binary_op+0x1f0>
    e1f2:	2300      	movs	r3, #0
                if (mpz_is_neg(zrhs)) {
    e1f4:	b153      	cbz	r3, e20c <mp_obj_int_binary_op+0x208>
                    return mp_obj_float_binary_op(op, mpz_as_float(zlhs), rhs_in);
    e1f6:	4638      	mov	r0, r7
    e1f8:	f7f5 f87e 	bl	32f8 <mpz_as_float>
    e1fc:	4621      	mov	r1, r4
    e1fe:	4630      	mov	r0, r6
    e200:	f7fe febe 	bl	cf80 <mp_obj_float_binary_op>
    e204:	4680      	mov	r8, r0
    e206:	e72a      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e208:	2301      	movs	r3, #1
    e20a:	e7f3      	b.n	e1f4 <mp_obj_int_binary_op+0x1f0>
                mpz_pow_inpl(&res->mpz, zlhs, zrhs);
    e20c:	462a      	mov	r2, r5
    e20e:	4639      	mov	r1, r7
    e210:	f108 0004 	add.w	r0, r8, #4
    e214:	f7f4 ff64 	bl	30e0 <mpz_pow_inpl>
                break;
    e218:	e721      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                assert(op == MP_BINARY_OP_DIVMOD);
    e21a:	2e21      	cmp	r6, #33	; 0x21
    e21c:	d115      	bne.n	e24a <mp_obj_int_binary_op+0x246>
static inline bool mpz_is_zero(const mpz_t *z) { return z->len == 0; }
    e21e:	686b      	ldr	r3, [r5, #4]
                if (mpz_is_zero(zrhs)) {
    e220:	2b00      	cmp	r3, #0
    e222:	d09f      	beq.n	e164 <mp_obj_int_binary_op+0x160>
                mp_obj_int_t *quo = mp_obj_int_new_mpz();
    e224:	f7ff fd9c 	bl	dd60 <mp_obj_int_new_mpz>
    e228:	4604      	mov	r4, r0
                mpz_divmod_inpl(&quo->mpz, &res->mpz, zlhs, zrhs);
    e22a:	462b      	mov	r3, r5
    e22c:	463a      	mov	r2, r7
    e22e:	f108 0104 	add.w	r1, r8, #4
    e232:	3004      	adds	r0, #4
    e234:	f7f4 ff96 	bl	3164 <mpz_divmod_inpl>
                mp_obj_t tuple[2] = {MP_OBJ_FROM_PTR(quo), MP_OBJ_FROM_PTR(res)};
    e238:	9401      	str	r4, [sp, #4]
    e23a:	f8cd 8008 	str.w	r8, [sp, #8]
                return mp_obj_new_tuple(2, tuple);
    e23e:	a901      	add	r1, sp, #4
    e240:	2002      	movs	r0, #2
    e242:	f003 faff 	bl	11844 <mp_obj_new_tuple>
    e246:	4680      	mov	r8, r0
    e248:	e709      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                assert(op == MP_BINARY_OP_DIVMOD);
    e24a:	4b28      	ldr	r3, [pc, #160]	; (e2ec <mp_obj_int_binary_op+0x2e8>)
    e24c:	4a21      	ldr	r2, [pc, #132]	; (e2d4 <mp_obj_int_binary_op+0x2d0>)
    e24e:	f44f 7190 	mov.w	r1, #288	; 0x120
    e252:	4821      	ldr	r0, [pc, #132]	; (e2d8 <mp_obj_int_binary_op+0x2d4>)
    e254:	f00a f982 	bl	1855c <__assert_func>
        int cmp = mpz_cmp(zlhs, zrhs);
    e258:	4629      	mov	r1, r5
    e25a:	4638      	mov	r0, r7
    e25c:	f7f4 fca1 	bl	2ba2 <mpz_cmp>
        switch (op) {
    e260:	2e04      	cmp	r6, #4
    e262:	d825      	bhi.n	e2b0 <mp_obj_int_binary_op+0x2ac>
    e264:	e8df f006 	tbb	[pc, r6]
    e268:	101d0b03 	.word	0x101d0b03
    e26c:	18          	.byte	0x18
    e26d:	00          	.byte	0x00
    e26e:	2800      	cmp	r0, #0
    e270:	db02      	blt.n	e278 <mp_obj_int_binary_op+0x274>
    e272:	f8df 807c 	ldr.w	r8, [pc, #124]	; e2f0 <mp_obj_int_binary_op+0x2ec>
    e276:	e6f2      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e278:	f8df 8078 	ldr.w	r8, [pc, #120]	; e2f4 <mp_obj_int_binary_op+0x2f0>
    e27c:	e6ef      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e27e:	2800      	cmp	r0, #0
    e280:	dd19      	ble.n	e2b6 <mp_obj_int_binary_op+0x2b2>
    e282:	f8df 8070 	ldr.w	r8, [pc, #112]	; e2f4 <mp_obj_int_binary_op+0x2f0>
    e286:	e6ea      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e288:	2800      	cmp	r0, #0
    e28a:	dd02      	ble.n	e292 <mp_obj_int_binary_op+0x28e>
    e28c:	f8df 8060 	ldr.w	r8, [pc, #96]	; e2f0 <mp_obj_int_binary_op+0x2ec>
    e290:	e6e5      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e292:	f8df 8060 	ldr.w	r8, [pc, #96]	; e2f4 <mp_obj_int_binary_op+0x2f0>
    e296:	e6e2      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e298:	2800      	cmp	r0, #0
    e29a:	db0f      	blt.n	e2bc <mp_obj_int_binary_op+0x2b8>
    e29c:	f8df 8054 	ldr.w	r8, [pc, #84]	; e2f4 <mp_obj_int_binary_op+0x2f0>
    e2a0:	e6dd      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e2a2:	b110      	cbz	r0, e2aa <mp_obj_int_binary_op+0x2a6>
    e2a4:	f8df 8048 	ldr.w	r8, [pc, #72]	; e2f0 <mp_obj_int_binary_op+0x2ec>
    e2a8:	e6d9      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e2aa:	f8df 8048 	ldr.w	r8, [pc, #72]	; e2f4 <mp_obj_int_binary_op+0x2f0>
    e2ae:	e6d6      	b.n	e05e <mp_obj_int_binary_op+0x5a>
                return MP_OBJ_NULL; // op not supported
    e2b0:	f04f 0800 	mov.w	r8, #0
    e2b4:	e6d3      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e2b6:	f8df 8038 	ldr.w	r8, [pc, #56]	; e2f0 <mp_obj_int_binary_op+0x2ec>
    e2ba:	e6d0      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e2bc:	f8df 8030 	ldr.w	r8, [pc, #48]	; e2f0 <mp_obj_int_binary_op+0x2ec>
    e2c0:	e6cd      	b.n	e05e <mp_obj_int_binary_op+0x5a>
    e2c2:	bf00      	nop
    e2c4:	00027498 	.word	0x00027498
    e2c8:	00026d90 	.word	0x00026d90
    e2cc:	00026114 	.word	0x00026114
    e2d0:	00027540 	.word	0x00027540
    e2d4:	00027528 	.word	0x00027528
    e2d8:	00027584 	.word	0x00027584
    e2dc:	00000000 	.word	0x00000000
    e2e0:	000260a4 	.word	0x000260a4
    e2e4:	00026cfc 	.word	0x00026cfc
    e2e8:	00025638 	.word	0x00025638
    e2ec:	00027568 	.word	0x00027568
    e2f0:	00025f44 	.word	0x00025f44
    e2f4:	00025f4c 	.word	0x00025f4c

0000e2f8 <mp_obj_int_as_float_impl>:

#if MICROPY_PY_BUILTINS_FLOAT
mp_float_t mp_obj_int_as_float_impl(mp_obj_t self_in) {
    e2f8:	b508      	push	{r3, lr}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_int));
    e2fa:	f010 0f03 	tst.w	r0, #3
    e2fe:	d107      	bne.n	e310 <mp_obj_int_as_float_impl+0x18>
    e300:	6802      	ldr	r2, [r0, #0]
    e302:	4b07      	ldr	r3, [pc, #28]	; (e320 <mp_obj_int_as_float_impl+0x28>)
    e304:	429a      	cmp	r2, r3
    e306:	d103      	bne.n	e310 <mp_obj_int_as_float_impl+0x18>
    mp_obj_int_t *self = MP_OBJ_TO_PTR(self_in);
    return mpz_as_float(&self->mpz);
    e308:	3004      	adds	r0, #4
    e30a:	f7f4 fff5 	bl	32f8 <mpz_as_float>
}
    e30e:	bd08      	pop	{r3, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_int));
    e310:	4b04      	ldr	r3, [pc, #16]	; (e324 <mp_obj_int_as_float_impl+0x2c>)
    e312:	4a05      	ldr	r2, [pc, #20]	; (e328 <mp_obj_int_as_float_impl+0x30>)
    e314:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    e318:	4804      	ldr	r0, [pc, #16]	; (e32c <mp_obj_int_as_float_impl+0x34>)
    e31a:	f00a f91f 	bl	1855c <__assert_func>
    e31e:	bf00      	nop
    e320:	00027498 	.word	0x00027498
    e324:	00027438 	.word	0x00027438
    e328:	000274d4 	.word	0x000274d4
    e32c:	00027584 	.word	0x00027584

0000e330 <list_unary_op>:
    }
}

STATIC mp_obj_t list_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
    switch (op) {
    e330:	2804      	cmp	r0, #4
    e332:	d003      	beq.n	e33c <list_unary_op+0xc>
    e334:	2805      	cmp	r0, #5
    e336:	d005      	beq.n	e344 <list_unary_op+0x14>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(mp_obj_t) * self->alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    e338:	2000      	movs	r0, #0
    e33a:	4770      	bx	lr
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
    e33c:	688b      	ldr	r3, [r1, #8]
    e33e:	b133      	cbz	r3, e34e <list_unary_op+0x1e>
    e340:	4804      	ldr	r0, [pc, #16]	; (e354 <list_unary_op+0x24>)
    e342:	4770      	bx	lr
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
    e344:	6888      	ldr	r0, [r1, #8]
    e346:	0040      	lsls	r0, r0, #1
    e348:	f040 0001 	orr.w	r0, r0, #1
    e34c:	4770      	bx	lr
    e34e:	4802      	ldr	r0, [pc, #8]	; (e358 <list_unary_op+0x28>)
    }
}
    e350:	4770      	bx	lr
    e352:	bf00      	nop
    e354:	00025f4c 	.word	0x00025f4c
    e358:	00025f44 	.word	0x00025f44

0000e35c <list_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_t list;
    size_t cur;
} mp_obj_list_it_t;

STATIC mp_obj_t list_it_iternext(mp_obj_t self_in) {
    e35c:	4602      	mov	r2, r0
    mp_obj_list_it_t *self = MP_OBJ_TO_PTR(self_in);
    mp_obj_list_t *list = MP_OBJ_TO_PTR(self->list);
    e35e:	6881      	ldr	r1, [r0, #8]
    if (self->cur < list->len) {
    e360:	68c3      	ldr	r3, [r0, #12]
    e362:	6888      	ldr	r0, [r1, #8]
    e364:	4283      	cmp	r3, r0
    e366:	d205      	bcs.n	e374 <list_it_iternext+0x18>
        mp_obj_t o_out = list->items[self->cur];
    e368:	68c9      	ldr	r1, [r1, #12]
    e36a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
        self->cur += 1;
    e36e:	3301      	adds	r3, #1
    e370:	60d3      	str	r3, [r2, #12]
        return o_out;
    e372:	4770      	bx	lr
    } else {
        return MP_OBJ_STOP_ITERATION;
    e374:	2004      	movs	r0, #4
    }
}
    e376:	4770      	bx	lr

0000e378 <mp_obj_new_list_iterator>:

mp_obj_t mp_obj_new_list_iterator(mp_obj_t list, size_t cur, mp_obj_iter_buf_t *iter_buf) {
    assert(sizeof(mp_obj_list_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_list_it_t *o = (mp_obj_list_it_t*)iter_buf;
    o->base.type = &mp_type_polymorph_iter;
    e378:	4b03      	ldr	r3, [pc, #12]	; (e388 <mp_obj_new_list_iterator+0x10>)
    e37a:	6013      	str	r3, [r2, #0]
    o->iternext = list_it_iternext;
    e37c:	4b03      	ldr	r3, [pc, #12]	; (e38c <mp_obj_new_list_iterator+0x14>)
    e37e:	6053      	str	r3, [r2, #4]
    o->list = list;
    e380:	6090      	str	r0, [r2, #8]
    o->cur = cur;
    e382:	60d1      	str	r1, [r2, #12]
    return MP_OBJ_FROM_PTR(o);
}
    e384:	4610      	mov	r0, r2
    e386:	4770      	bx	lr
    e388:	00027b04 	.word	0x00027b04
    e38c:	0000e35d 	.word	0x0000e35d

0000e390 <list_getiter>:
STATIC mp_obj_t list_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    e390:	b508      	push	{r3, lr}
    return mp_obj_new_list_iterator(o_in, 0, iter_buf);
    e392:	460a      	mov	r2, r1
    e394:	2100      	movs	r1, #0
    e396:	f7ff ffef 	bl	e378 <mp_obj_new_list_iterator>
}
    e39a:	bd08      	pop	{r3, pc}

0000e39c <list_reverse>:
STATIC mp_obj_t list_reverse(mp_obj_t self_in) {
    e39c:	b570      	push	{r4, r5, r6, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e39e:	f010 0203 	ands.w	r2, r0, #3
    e3a2:	d105      	bne.n	e3b0 <list_reverse+0x14>
    e3a4:	6801      	ldr	r1, [r0, #0]
    e3a6:	4b11      	ldr	r3, [pc, #68]	; (e3ec <list_reverse+0x50>)
    e3a8:	4299      	cmp	r1, r3
    e3aa:	d101      	bne.n	e3b0 <list_reverse+0x14>
    mp_int_t len = self->len;
    e3ac:	6884      	ldr	r4, [r0, #8]
    for (mp_int_t i = 0; i < len/2; i++) {
    e3ae:	e015      	b.n	e3dc <list_reverse+0x40>
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e3b0:	4b0f      	ldr	r3, [pc, #60]	; (e3f0 <list_reverse+0x54>)
    e3b2:	4a10      	ldr	r2, [pc, #64]	; (e3f4 <list_reverse+0x58>)
    e3b4:	f240 1193 	movw	r1, #403	; 0x193
    e3b8:	480f      	ldr	r0, [pc, #60]	; (e3f8 <list_reverse+0x5c>)
    e3ba:	f00a f8cf 	bl	1855c <__assert_func>
         mp_obj_t a = self->items[i];
    e3be:	68c1      	ldr	r1, [r0, #12]
    e3c0:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
         self->items[i] = self->items[len-i-1];
    e3c4:	1aa3      	subs	r3, r4, r2
    e3c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e3ca:	3b01      	subs	r3, #1
    e3cc:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
    e3d0:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
         self->items[len-i-1] = a;
    e3d4:	68c1      	ldr	r1, [r0, #12]
    e3d6:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    for (mp_int_t i = 0; i < len/2; i++) {
    e3da:	3201      	adds	r2, #1
    e3dc:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
    e3e0:	ebb2 0f63 	cmp.w	r2, r3, asr #1
    e3e4:	dbeb      	blt.n	e3be <list_reverse+0x22>
}
    e3e6:	4805      	ldr	r0, [pc, #20]	; (e3fc <list_reverse+0x60>)
    e3e8:	bd70      	pop	{r4, r5, r6, pc}
    e3ea:	bf00      	nop
    e3ec:	00027890 	.word	0x00027890
    e3f0:	000277a8 	.word	0x000277a8
    e3f4:	0002765c 	.word	0x0002765c
    e3f8:	00027804 	.word	0x00027804
    e3fc:	00027b40 	.word	0x00027b40

0000e400 <mp_obj_list_append>:
mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg) {
    e400:	b570      	push	{r4, r5, r6, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e402:	f010 0f03 	tst.w	r0, #3
    e406:	d111      	bne.n	e42c <mp_obj_list_append+0x2c>
    e408:	4604      	mov	r4, r0
    e40a:	460d      	mov	r5, r1
    e40c:	6802      	ldr	r2, [r0, #0]
    e40e:	4b15      	ldr	r3, [pc, #84]	; (e464 <mp_obj_list_append+0x64>)
    e410:	429a      	cmp	r2, r3
    e412:	d10b      	bne.n	e42c <mp_obj_list_append+0x2c>
    if (self->len >= self->alloc) {
    e414:	6883      	ldr	r3, [r0, #8]
    e416:	6841      	ldr	r1, [r0, #4]
    e418:	428b      	cmp	r3, r1
    e41a:	d20d      	bcs.n	e438 <mp_obj_list_append+0x38>
    self->items[self->len++] = arg;
    e41c:	68e2      	ldr	r2, [r4, #12]
    e41e:	68a3      	ldr	r3, [r4, #8]
    e420:	1c59      	adds	r1, r3, #1
    e422:	60a1      	str	r1, [r4, #8]
    e424:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
    e428:	480f      	ldr	r0, [pc, #60]	; (e468 <mp_obj_list_append+0x68>)
    e42a:	bd70      	pop	{r4, r5, r6, pc}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e42c:	4b0f      	ldr	r3, [pc, #60]	; (e46c <mp_obj_list_append+0x6c>)
    e42e:	4a10      	ldr	r2, [pc, #64]	; (e470 <mp_obj_list_append+0x70>)
    e430:	21eb      	movs	r1, #235	; 0xeb
    e432:	4810      	ldr	r0, [pc, #64]	; (e474 <mp_obj_list_append+0x74>)
    e434:	f00a f892 	bl	1855c <__assert_func>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc * 2);
    e438:	00c9      	lsls	r1, r1, #3
    e43a:	68c0      	ldr	r0, [r0, #12]
    e43c:	f7f2 fa55 	bl	8ea <m_realloc>
    e440:	60e0      	str	r0, [r4, #12]
        self->alloc *= 2;
    e442:	6862      	ldr	r2, [r4, #4]
    e444:	0052      	lsls	r2, r2, #1
    e446:	6062      	str	r2, [r4, #4]
        mp_seq_clear(self->items, self->len + 1, self->alloc, sizeof(*self->items));
    e448:	68a3      	ldr	r3, [r4, #8]
    e44a:	1c5e      	adds	r6, r3, #1
    e44c:	1ad2      	subs	r2, r2, r3
    e44e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e452:	3a01      	subs	r2, #1
    e454:	0092      	lsls	r2, r2, #2
    e456:	2100      	movs	r1, #0
    e458:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    e45c:	f00d fa0e 	bl	1b87c <memset>
    e460:	e7dc      	b.n	e41c <mp_obj_list_append+0x1c>
    e462:	bf00      	nop
    e464:	00027890 	.word	0x00027890
    e468:	00027b40 	.word	0x00027b40
    e46c:	000277a8 	.word	0x000277a8
    e470:	000275cc 	.word	0x000275cc
    e474:	00027804 	.word	0x00027804

0000e478 <list_insert>:
STATIC mp_obj_t list_insert(mp_obj_t self_in, mp_obj_t idx, mp_obj_t obj) {
    e478:	b570      	push	{r4, r5, r6, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e47a:	f010 0503 	ands.w	r5, r0, #3
    e47e:	d115      	bne.n	e4ac <list_insert+0x34>
    e480:	4604      	mov	r4, r0
    e482:	4616      	mov	r6, r2
    e484:	6802      	ldr	r2, [r0, #0]
    e486:	4b16      	ldr	r3, [pc, #88]	; (e4e0 <list_insert+0x68>)
    e488:	429a      	cmp	r2, r3
    e48a:	d10f      	bne.n	e4ac <list_insert+0x34>
    if (index < 0) {
    e48c:	1049      	asrs	r1, r1, #1
    e48e:	d414      	bmi.n	e4ba <list_insert+0x42>
    if (index < 0) {
    e490:	2900      	cmp	r1, #0
    e492:	db00      	blt.n	e496 <list_insert+0x1e>
    e494:	460d      	mov	r5, r1
    if ((size_t)index > self->len) {
    e496:	68a3      	ldr	r3, [r4, #8]
    e498:	42ab      	cmp	r3, r5
    e49a:	d200      	bcs.n	e49e <list_insert+0x26>
         index = self->len;
    e49c:	461d      	mov	r5, r3
    mp_obj_list_append(self_in, mp_const_none);
    e49e:	4911      	ldr	r1, [pc, #68]	; (e4e4 <list_insert+0x6c>)
    e4a0:	4620      	mov	r0, r4
    e4a2:	f7ff ffad 	bl	e400 <mp_obj_list_append>
    for (mp_int_t i = self->len-1; i > index; i--) {
    e4a6:	68a3      	ldr	r3, [r4, #8]
    e4a8:	3b01      	subs	r3, #1
    e4aa:	e012      	b.n	e4d2 <list_insert+0x5a>
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e4ac:	4b0e      	ldr	r3, [pc, #56]	; (e4e8 <list_insert+0x70>)
    e4ae:	4a0f      	ldr	r2, [pc, #60]	; (e4ec <list_insert+0x74>)
    e4b0:	f240 1171 	movw	r1, #369	; 0x171
    e4b4:	480e      	ldr	r0, [pc, #56]	; (e4f0 <list_insert+0x78>)
    e4b6:	f00a f851 	bl	1855c <__assert_func>
         index += self->len;
    e4ba:	6883      	ldr	r3, [r0, #8]
    e4bc:	4419      	add	r1, r3
    e4be:	e7e7      	b.n	e490 <list_insert+0x18>
         self->items[i] = self->items[i-1];
    e4c0:	68e1      	ldr	r1, [r4, #12]
    e4c2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    e4c6:	3a01      	subs	r2, #1
    e4c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    e4cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (mp_int_t i = self->len-1; i > index; i--) {
    e4d0:	3b01      	subs	r3, #1
    e4d2:	429d      	cmp	r5, r3
    e4d4:	dbf4      	blt.n	e4c0 <list_insert+0x48>
    self->items[index] = obj;
    e4d6:	68e3      	ldr	r3, [r4, #12]
    e4d8:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
}
    e4dc:	4801      	ldr	r0, [pc, #4]	; (e4e4 <list_insert+0x6c>)
    e4de:	bd70      	pop	{r4, r5, r6, pc}
    e4e0:	00027890 	.word	0x00027890
    e4e4:	00027b40 	.word	0x00027b40
    e4e8:	000277a8 	.word	0x000277a8
    e4ec:	0002763c 	.word	0x0002763c
    e4f0:	00027804 	.word	0x00027804

0000e4f4 <list_clear>:
STATIC mp_obj_t list_clear(mp_obj_t self_in) {
    e4f4:	b538      	push	{r3, r4, r5, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e4f6:	f010 0f03 	tst.w	r0, #3
    e4fa:	d113      	bne.n	e524 <list_clear+0x30>
    e4fc:	4604      	mov	r4, r0
    e4fe:	6802      	ldr	r2, [r0, #0]
    e500:	4b0c      	ldr	r3, [pc, #48]	; (e534 <list_clear+0x40>)
    e502:	429a      	cmp	r2, r3
    e504:	d10e      	bne.n	e524 <list_clear+0x30>
    self->len = 0;
    e506:	2500      	movs	r5, #0
    e508:	6085      	str	r5, [r0, #8]
    self->items = m_renew(mp_obj_t, self->items, self->alloc, LIST_MIN_ALLOC);
    e50a:	2110      	movs	r1, #16
    e50c:	68c0      	ldr	r0, [r0, #12]
    e50e:	f7f2 f9ec 	bl	8ea <m_realloc>
    e512:	60e0      	str	r0, [r4, #12]
    self->alloc = LIST_MIN_ALLOC;
    e514:	2304      	movs	r3, #4
    e516:	6063      	str	r3, [r4, #4]
    mp_seq_clear(self->items, 0, self->alloc, sizeof(*self->items));
    e518:	6005      	str	r5, [r0, #0]
    e51a:	6045      	str	r5, [r0, #4]
    e51c:	6085      	str	r5, [r0, #8]
    e51e:	60c5      	str	r5, [r0, #12]
}
    e520:	4805      	ldr	r0, [pc, #20]	; (e538 <list_clear+0x44>)
    e522:	bd38      	pop	{r3, r4, r5, pc}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e524:	4b05      	ldr	r3, [pc, #20]	; (e53c <list_clear+0x48>)
    e526:	4a06      	ldr	r2, [pc, #24]	; (e540 <list_clear+0x4c>)
    e528:	f240 1155 	movw	r1, #341	; 0x155
    e52c:	4805      	ldr	r0, [pc, #20]	; (e544 <list_clear+0x50>)
    e52e:	f00a f815 	bl	1855c <__assert_func>
    e532:	bf00      	nop
    e534:	00027890 	.word	0x00027890
    e538:	00027b40 	.word	0x00027b40
    e53c:	000277a8 	.word	0x000277a8
    e540:	0002760c 	.word	0x0002760c
    e544:	00027804 	.word	0x00027804

0000e548 <mp_quicksort>:
STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
    e548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e54c:	4682      	mov	sl, r0
    e54e:	4689      	mov	r9, r1
    e550:	4616      	mov	r6, r2
    e552:	461f      	mov	r7, r3
    while (head < tail) {
    e554:	e046      	b.n	e5e4 <mp_quicksort+0x9c>
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
    e556:	f8d9 b000 	ldr.w	fp, [r9]
    e55a:	e04f      	b.n	e5fc <mp_quicksort+0xb4>
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
    e55c:	6829      	ldr	r1, [r5, #0]
    e55e:	e023      	b.n	e5a8 <mp_quicksort+0x60>
            do --t; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, v, key_fn == MP_OBJ_NULL ? t[0] : mp_call_function_1(key_fn, t[0])) == binop_less_result);
    e560:	6822      	ldr	r2, [r4, #0]
    e562:	4659      	mov	r1, fp
    e564:	2000      	movs	r0, #0
    e566:	f7fb fea7 	bl	a2b8 <mp_binary_op>
    e56a:	4287      	cmp	r7, r0
    e56c:	d10a      	bne.n	e584 <mp_quicksort+0x3c>
    e56e:	3c04      	subs	r4, #4
    e570:	42a5      	cmp	r5, r4
    e572:	d207      	bcs.n	e584 <mp_quicksort+0x3c>
    e574:	2e00      	cmp	r6, #0
    e576:	d0f3      	beq.n	e560 <mp_quicksort+0x18>
    e578:	6821      	ldr	r1, [r4, #0]
    e57a:	4630      	mov	r0, r6
    e57c:	f7fb f8a9 	bl	96d2 <mp_call_function_1>
    e580:	4602      	mov	r2, r0
    e582:	e7ee      	b.n	e562 <mp_quicksort+0x1a>
            if (h >= t) break;
    e584:	42a5      	cmp	r5, r4
    e586:	d216      	bcs.n	e5b6 <mp_quicksort+0x6e>
            mp_obj_t x = h[0];
    e588:	682b      	ldr	r3, [r5, #0]
            h[0] = t[0];
    e58a:	6822      	ldr	r2, [r4, #0]
    e58c:	602a      	str	r2, [r5, #0]
            t[0] = x;
    e58e:	6023      	str	r3, [r4, #0]
STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
    e590:	46a8      	mov	r8, r5
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
    e592:	f108 0504 	add.w	r5, r8, #4
    e596:	42ac      	cmp	r4, r5
    e598:	d9e9      	bls.n	e56e <mp_quicksort+0x26>
    e59a:	2e00      	cmp	r6, #0
    e59c:	d0de      	beq.n	e55c <mp_quicksort+0x14>
    e59e:	6829      	ldr	r1, [r5, #0]
    e5a0:	4630      	mov	r0, r6
    e5a2:	f7fb f896 	bl	96d2 <mp_call_function_1>
    e5a6:	4601      	mov	r1, r0
    e5a8:	465a      	mov	r2, fp
    e5aa:	2000      	movs	r0, #0
    e5ac:	f7fb fe84 	bl	a2b8 <mp_binary_op>
    e5b0:	4287      	cmp	r7, r0
    e5b2:	d1dc      	bne.n	e56e <mp_quicksort+0x26>
    e5b4:	e7ec      	b.n	e590 <mp_quicksort+0x48>
        mp_obj_t x = h[0];
    e5b6:	682b      	ldr	r3, [r5, #0]
        h[0] = tail[0];
    e5b8:	f8d9 2000 	ldr.w	r2, [r9]
    e5bc:	602a      	str	r2, [r5, #0]
        tail[0] = x;
    e5be:	f8c9 3000 	str.w	r3, [r9]
        if (t - head < tail - h - 1) {
    e5c2:	eba4 020a 	sub.w	r2, r4, sl
    e5c6:	eba9 0305 	sub.w	r3, r9, r5
    e5ca:	109b      	asrs	r3, r3, #2
    e5cc:	3b01      	subs	r3, #1
    e5ce:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
    e5d2:	dd15      	ble.n	e600 <mp_quicksort+0xb8>
            mp_quicksort(head, t, key_fn, binop_less_result);
    e5d4:	463b      	mov	r3, r7
    e5d6:	4632      	mov	r2, r6
    e5d8:	4621      	mov	r1, r4
    e5da:	4650      	mov	r0, sl
    e5dc:	f7ff ffb4 	bl	e548 <mp_quicksort>
            head = h + 1;
    e5e0:	f108 0a08 	add.w	sl, r8, #8
    while (head < tail) {
    e5e4:	45ca      	cmp	sl, r9
    e5e6:	d214      	bcs.n	e612 <mp_quicksort+0xca>
        mp_obj_t *h = head - 1;
    e5e8:	f1aa 0804 	sub.w	r8, sl, #4
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
    e5ec:	2e00      	cmp	r6, #0
    e5ee:	d0b2      	beq.n	e556 <mp_quicksort+0xe>
    e5f0:	f8d9 1000 	ldr.w	r1, [r9]
    e5f4:	4630      	mov	r0, r6
    e5f6:	f7fb f86c 	bl	96d2 <mp_call_function_1>
    e5fa:	4683      	mov	fp, r0
        mp_obj_t *t = tail;
    e5fc:	464c      	mov	r4, r9
    e5fe:	e7c8      	b.n	e592 <mp_quicksort+0x4a>
            mp_quicksort(h + 1, tail, key_fn, binop_less_result);
    e600:	463b      	mov	r3, r7
    e602:	4632      	mov	r2, r6
    e604:	4649      	mov	r1, r9
    e606:	f108 0008 	add.w	r0, r8, #8
    e60a:	f7ff ff9d 	bl	e548 <mp_quicksort>
            tail = t;
    e60e:	46a1      	mov	r9, r4
    e610:	e7e8      	b.n	e5e4 <mp_quicksort+0x9c>
}
    e612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0000e618 <mp_obj_list_sort>:
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
    e618:	b510      	push	{r4, lr}
    e61a:	b084      	sub	sp, #16
    e61c:	460c      	mov	r4, r1
    mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args,
    e61e:	ab02      	add	r3, sp, #8
    e620:	9301      	str	r3, [sp, #4]
    e622:	4b18      	ldr	r3, [pc, #96]	; (e684 <mp_obj_list_sort+0x6c>)
    e624:	9300      	str	r3, [sp, #0]
    e626:	2302      	movs	r3, #2
    e628:	3104      	adds	r1, #4
    e62a:	3801      	subs	r0, #1
    e62c:	f7fc f8a6 	bl	a77c <mp_arg_parse_all>
    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
    e630:	6823      	ldr	r3, [r4, #0]
    e632:	f013 0f03 	tst.w	r3, #3
    e636:	d119      	bne.n	e66c <mp_obj_list_sort+0x54>
    e638:	6819      	ldr	r1, [r3, #0]
    e63a:	4a13      	ldr	r2, [pc, #76]	; (e688 <mp_obj_list_sort+0x70>)
    e63c:	4291      	cmp	r1, r2
    e63e:	d115      	bne.n	e66c <mp_obj_list_sort+0x54>
    if (self->len > 1) {
    e640:	6899      	ldr	r1, [r3, #8]
    e642:	2901      	cmp	r1, #1
    e644:	d90f      	bls.n	e666 <mp_obj_list_sort+0x4e>
        mp_quicksort(self->items, self->items + self->len - 1,
    e646:	68d8      	ldr	r0, [r3, #12]
    e648:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    e64c:	3901      	subs	r1, #1
    e64e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
                     args.key.u_obj == mp_const_none ? MP_OBJ_NULL : args.key.u_obj,
    e652:	9a02      	ldr	r2, [sp, #8]
        mp_quicksort(self->items, self->items + self->len - 1,
    e654:	4b0d      	ldr	r3, [pc, #52]	; (e68c <mp_obj_list_sort+0x74>)
    e656:	429a      	cmp	r2, r3
    e658:	d00f      	beq.n	e67a <mp_obj_list_sort+0x62>
                     args.reverse.u_bool ? mp_const_false : mp_const_true);
    e65a:	f89d 300c 	ldrb.w	r3, [sp, #12]
        mp_quicksort(self->items, self->items + self->len - 1,
    e65e:	b173      	cbz	r3, e67e <mp_obj_list_sort+0x66>
    e660:	4b0b      	ldr	r3, [pc, #44]	; (e690 <mp_obj_list_sort+0x78>)
    e662:	f7ff ff71 	bl	e548 <mp_quicksort>
}
    e666:	4809      	ldr	r0, [pc, #36]	; (e68c <mp_obj_list_sort+0x74>)
    e668:	b004      	add	sp, #16
    e66a:	bd10      	pop	{r4, pc}
    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
    e66c:	4b09      	ldr	r3, [pc, #36]	; (e694 <mp_obj_list_sort+0x7c>)
    e66e:	4a0a      	ldr	r2, [pc, #40]	; (e698 <mp_obj_list_sort+0x80>)
    e670:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e674:	4809      	ldr	r0, [pc, #36]	; (e69c <mp_obj_list_sort+0x84>)
    e676:	f009 ff71 	bl	1855c <__assert_func>
        mp_quicksort(self->items, self->items + self->len - 1,
    e67a:	2200      	movs	r2, #0
    e67c:	e7ed      	b.n	e65a <mp_obj_list_sort+0x42>
    e67e:	4b08      	ldr	r3, [pc, #32]	; (e6a0 <mp_obj_list_sort+0x88>)
    e680:	e7ef      	b.n	e662 <mp_obj_list_sort+0x4a>
    e682:	bf00      	nop
    e684:	0002766c 	.word	0x0002766c
    e688:	00027890 	.word	0x00027890
    e68c:	00027b40 	.word	0x00027b40
    e690:	00025f44 	.word	0x00025f44
    e694:	0002782c 	.word	0x0002782c
    e698:	000275f8 	.word	0x000275f8
    e69c:	00027804 	.word	0x00027804
    e6a0:	00025f4c 	.word	0x00025f4c

0000e6a4 <list_index>:
STATIC mp_obj_t list_index(size_t n_args, const mp_obj_t *args) {
    e6a4:	b510      	push	{r4, lr}
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
    e6a6:	680c      	ldr	r4, [r1, #0]
    e6a8:	f014 0f03 	tst.w	r4, #3
    e6ac:	d10a      	bne.n	e6c4 <list_index+0x20>
    e6ae:	6822      	ldr	r2, [r4, #0]
    e6b0:	4b08      	ldr	r3, [pc, #32]	; (e6d4 <list_index+0x30>)
    e6b2:	429a      	cmp	r2, r3
    e6b4:	d106      	bne.n	e6c4 <list_index+0x20>
    return mp_seq_index_obj(self->items, self->len, n_args, args);
    e6b6:	460b      	mov	r3, r1
    e6b8:	4602      	mov	r2, r0
    e6ba:	68a1      	ldr	r1, [r4, #8]
    e6bc:	68e0      	ldr	r0, [r4, #12]
    e6be:	f004 f9df 	bl	12a80 <mp_seq_index_obj>
}
    e6c2:	bd10      	pop	{r4, pc}
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
    e6c4:	4b04      	ldr	r3, [pc, #16]	; (e6d8 <list_index+0x34>)
    e6c6:	4a05      	ldr	r2, [pc, #20]	; (e6dc <list_index+0x38>)
    e6c8:	f240 116b 	movw	r1, #363	; 0x16b
    e6cc:	4804      	ldr	r0, [pc, #16]	; (e6e0 <list_index+0x3c>)
    e6ce:	f009 ff45 	bl	1855c <__assert_func>
    e6d2:	bf00      	nop
    e6d4:	00027890 	.word	0x00027890
    e6d8:	000276a4 	.word	0x000276a4
    e6dc:	00027630 	.word	0x00027630
    e6e0:	00027804 	.word	0x00027804

0000e6e4 <list_pop>:
STATIC mp_obj_t list_pop(size_t n_args, const mp_obj_t *args) {
    e6e4:	b570      	push	{r4, r5, r6, lr}
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
    e6e6:	680c      	ldr	r4, [r1, #0]
    e6e8:	f014 0f03 	tst.w	r4, #3
    e6ec:	d12a      	bne.n	e744 <list_pop+0x60>
    e6ee:	6825      	ldr	r5, [r4, #0]
    e6f0:	4b20      	ldr	r3, [pc, #128]	; (e774 <list_pop+0x90>)
    e6f2:	429d      	cmp	r5, r3
    e6f4:	d126      	bne.n	e744 <list_pop+0x60>
    if (self->len == 0) {
    e6f6:	68a6      	ldr	r6, [r4, #8]
    e6f8:	b35e      	cbz	r6, e752 <list_pop+0x6e>
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
    e6fa:	2801      	cmp	r0, #1
    e6fc:	d02d      	beq.n	e75a <list_pop+0x76>
    e6fe:	684a      	ldr	r2, [r1, #4]
    e700:	2300      	movs	r3, #0
    e702:	4631      	mov	r1, r6
    e704:	4628      	mov	r0, r5
    e706:	f7fc fcb9 	bl	b07c <mp_get_index>
    mp_obj_t ret = self->items[index];
    e70a:	68e3      	ldr	r3, [r4, #12]
    e70c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    self->len -= 1;
    e710:	68a2      	ldr	r2, [r4, #8]
    e712:	3a01      	subs	r2, #1
    e714:	60a2      	str	r2, [r4, #8]
    memmove(self->items + index, self->items + index + 1, (self->len - index) * sizeof(mp_obj_t));
    e716:	1c41      	adds	r1, r0, #1
    e718:	1a12      	subs	r2, r2, r0
    e71a:	0092      	lsls	r2, r2, #2
    e71c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e720:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    e724:	f00d f892 	bl	1b84c <memmove>
    self->items[self->len] = MP_OBJ_NULL;
    e728:	68e3      	ldr	r3, [r4, #12]
    e72a:	68a2      	ldr	r2, [r4, #8]
    e72c:	2100      	movs	r1, #0
    e72e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (self->alloc > LIST_MIN_ALLOC && self->alloc > 2 * self->len) {
    e732:	6861      	ldr	r1, [r4, #4]
    e734:	2904      	cmp	r1, #4
    e736:	d903      	bls.n	e740 <list_pop+0x5c>
    e738:	68a3      	ldr	r3, [r4, #8]
    e73a:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
    e73e:	d80f      	bhi.n	e760 <list_pop+0x7c>
}
    e740:	4628      	mov	r0, r5
    e742:	bd70      	pop	{r4, r5, r6, pc}
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
    e744:	4b0c      	ldr	r3, [pc, #48]	; (e778 <list_pop+0x94>)
    e746:	4a0d      	ldr	r2, [pc, #52]	; (e77c <list_pop+0x98>)
    e748:	f44f 7186 	mov.w	r1, #268	; 0x10c
    e74c:	480c      	ldr	r0, [pc, #48]	; (e780 <list_pop+0x9c>)
    e74e:	f009 ff05 	bl	1855c <__assert_func>
        mp_raise_msg(&mp_type_IndexError, "pop from empty list");
    e752:	490c      	ldr	r1, [pc, #48]	; (e784 <list_pop+0xa0>)
    e754:	480c      	ldr	r0, [pc, #48]	; (e788 <list_pop+0xa4>)
    e756:	f7fb fd87 	bl	a268 <mp_raise_msg>
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
    e75a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e75e:	e7cf      	b.n	e700 <list_pop+0x1c>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc/2);
    e760:	0849      	lsrs	r1, r1, #1
    e762:	0089      	lsls	r1, r1, #2
    e764:	68e0      	ldr	r0, [r4, #12]
    e766:	f7f2 f8c0 	bl	8ea <m_realloc>
    e76a:	60e0      	str	r0, [r4, #12]
        self->alloc /= 2;
    e76c:	6863      	ldr	r3, [r4, #4]
    e76e:	085b      	lsrs	r3, r3, #1
    e770:	6063      	str	r3, [r4, #4]
    return ret;
    e772:	e7e5      	b.n	e740 <list_pop+0x5c>
    e774:	00027890 	.word	0x00027890
    e778:	000276a4 	.word	0x000276a4
    e77c:	000275ec 	.word	0x000275ec
    e780:	00027804 	.word	0x00027804
    e784:	0002777c 	.word	0x0002777c
    e788:	00026978 	.word	0x00026978

0000e78c <mp_obj_list_remove>:
mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value) {
    e78c:	b500      	push	{lr}
    e78e:	b083      	sub	sp, #12
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e790:	f010 0f03 	tst.w	r0, #3
    e794:	d112      	bne.n	e7bc <mp_obj_list_remove+0x30>
    e796:	6802      	ldr	r2, [r0, #0]
    e798:	4b0c      	ldr	r3, [pc, #48]	; (e7cc <mp_obj_list_remove+0x40>)
    e79a:	429a      	cmp	r2, r3
    e79c:	d10e      	bne.n	e7bc <mp_obj_list_remove+0x30>
    mp_obj_t args[] = {self_in, value};
    e79e:	9000      	str	r0, [sp, #0]
    e7a0:	9101      	str	r1, [sp, #4]
    args[1] = list_index(2, args);
    e7a2:	4669      	mov	r1, sp
    e7a4:	2002      	movs	r0, #2
    e7a6:	f7ff ff7d 	bl	e6a4 <list_index>
    e7aa:	9001      	str	r0, [sp, #4]
    list_pop(2, args);
    e7ac:	4669      	mov	r1, sp
    e7ae:	2002      	movs	r0, #2
    e7b0:	f7ff ff98 	bl	e6e4 <list_pop>
}
    e7b4:	4806      	ldr	r0, [pc, #24]	; (e7d0 <mp_obj_list_remove+0x44>)
    e7b6:	b003      	add	sp, #12
    e7b8:	f85d fb04 	ldr.w	pc, [sp], #4
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e7bc:	4b05      	ldr	r3, [pc, #20]	; (e7d4 <mp_obj_list_remove+0x48>)
    e7be:	4a06      	ldr	r2, [pc, #24]	; (e7d8 <mp_obj_list_remove+0x4c>)
    e7c0:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    e7c4:	4805      	ldr	r0, [pc, #20]	; (e7dc <mp_obj_list_remove+0x50>)
    e7c6:	f009 fec9 	bl	1855c <__assert_func>
    e7ca:	bf00      	nop
    e7cc:	00027890 	.word	0x00027890
    e7d0:	00027b40 	.word	0x00027b40
    e7d4:	000277a8 	.word	0x000277a8
    e7d8:	00027648 	.word	0x00027648
    e7dc:	00027804 	.word	0x00027804

0000e7e0 <list_extend_from_iter>:
STATIC mp_obj_t list_extend_from_iter(mp_obj_t list, mp_obj_t iterable) {
    e7e0:	b538      	push	{r3, r4, r5, lr}
    e7e2:	4604      	mov	r4, r0
    e7e4:	4608      	mov	r0, r1
    mp_obj_t iter = mp_getiter(iterable, NULL);
    e7e6:	2100      	movs	r1, #0
    e7e8:	f7fb f892 	bl	9910 <mp_getiter>
    e7ec:	4605      	mov	r5, r0
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e7ee:	e003      	b.n	e7f8 <list_extend_from_iter+0x18>
        mp_obj_list_append(list, item);
    e7f0:	4601      	mov	r1, r0
    e7f2:	4620      	mov	r0, r4
    e7f4:	f7ff fe04 	bl	e400 <mp_obj_list_append>
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e7f8:	4628      	mov	r0, r5
    e7fa:	f7fb f8f7 	bl	99ec <mp_iternext>
    e7fe:	2804      	cmp	r0, #4
    e800:	d1f6      	bne.n	e7f0 <list_extend_from_iter+0x10>
}
    e802:	4620      	mov	r0, r4
    e804:	bd38      	pop	{r3, r4, r5, pc}
	...

0000e808 <list_extend>:
STATIC mp_obj_t list_extend(mp_obj_t self_in, mp_obj_t arg_in) {
    e808:	b538      	push	{r3, r4, r5, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e80a:	f010 0f03 	tst.w	r0, #3
    e80e:	d112      	bne.n	e836 <list_extend+0x2e>
    e810:	4604      	mov	r4, r0
    e812:	460d      	mov	r5, r1
    e814:	6802      	ldr	r2, [r0, #0]
    e816:	4b1f      	ldr	r3, [pc, #124]	; (e894 <list_extend+0x8c>)
    e818:	429a      	cmp	r2, r3
    e81a:	d10c      	bne.n	e836 <list_extend+0x2e>
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
    e81c:	f011 0f03 	tst.w	r1, #3
    e820:	d103      	bne.n	e82a <list_extend+0x22>
    e822:	680a      	ldr	r2, [r1, #0]
    e824:	4b1b      	ldr	r3, [pc, #108]	; (e894 <list_extend+0x8c>)
    e826:	429a      	cmp	r2, r3
    e828:	d00b      	beq.n	e842 <list_extend+0x3a>
        list_extend_from_iter(self_in, arg_in);
    e82a:	4629      	mov	r1, r5
    e82c:	4620      	mov	r0, r4
    e82e:	f7ff ffd7 	bl	e7e0 <list_extend_from_iter>
}
    e832:	4819      	ldr	r0, [pc, #100]	; (e898 <list_extend+0x90>)
    e834:	bd38      	pop	{r3, r4, r5, pc}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e836:	4b19      	ldr	r3, [pc, #100]	; (e89c <list_extend+0x94>)
    e838:	4a19      	ldr	r2, [pc, #100]	; (e8a0 <list_extend+0x98>)
    e83a:	21f7      	movs	r1, #247	; 0xf7
    e83c:	4819      	ldr	r0, [pc, #100]	; (e8a4 <list_extend+0x9c>)
    e83e:	f009 fe8d 	bl	1855c <__assert_func>
        if (self->len + arg->len > self->alloc) {
    e842:	6881      	ldr	r1, [r0, #8]
    e844:	68ab      	ldr	r3, [r5, #8]
    e846:	4419      	add	r1, r3
    e848:	6843      	ldr	r3, [r0, #4]
    e84a:	4299      	cmp	r1, r3
    e84c:	d80d      	bhi.n	e86a <list_extend+0x62>
        memcpy(self->items + self->len, arg->items, sizeof(mp_obj_t) * arg->len);
    e84e:	68e3      	ldr	r3, [r4, #12]
    e850:	68a0      	ldr	r0, [r4, #8]
    e852:	68aa      	ldr	r2, [r5, #8]
    e854:	0092      	lsls	r2, r2, #2
    e856:	68e9      	ldr	r1, [r5, #12]
    e858:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    e85c:	f00c ffca 	bl	1b7f4 <memcpy>
        self->len += arg->len;
    e860:	68aa      	ldr	r2, [r5, #8]
    e862:	68a3      	ldr	r3, [r4, #8]
    e864:	4413      	add	r3, r2
    e866:	60a3      	str	r3, [r4, #8]
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
    e868:	e7e3      	b.n	e832 <list_extend+0x2a>
            self->items = m_renew(mp_obj_t, self->items, self->alloc, self->len + arg->len + 4);
    e86a:	3104      	adds	r1, #4
    e86c:	0089      	lsls	r1, r1, #2
    e86e:	68c0      	ldr	r0, [r0, #12]
    e870:	f7f2 f83b 	bl	8ea <m_realloc>
    e874:	60e0      	str	r0, [r4, #12]
            self->alloc = self->len + arg->len + 4;
    e876:	68a3      	ldr	r3, [r4, #8]
    e878:	68aa      	ldr	r2, [r5, #8]
    e87a:	441a      	add	r2, r3
    e87c:	3204      	adds	r2, #4
    e87e:	6062      	str	r2, [r4, #4]
            mp_seq_clear(self->items, self->len + arg->len, self->alloc, sizeof(*self->items));
    e880:	68a9      	ldr	r1, [r5, #8]
    e882:	440b      	add	r3, r1
    e884:	1ad2      	subs	r2, r2, r3
    e886:	0092      	lsls	r2, r2, #2
    e888:	2100      	movs	r1, #0
    e88a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e88e:	f00c fff5 	bl	1b87c <memset>
    e892:	e7dc      	b.n	e84e <list_extend+0x46>
    e894:	00027890 	.word	0x00027890
    e898:	00027b40 	.word	0x00027b40
    e89c:	000277a8 	.word	0x000277a8
    e8a0:	000275e0 	.word	0x000275e0
    e8a4:	00027804 	.word	0x00027804

0000e8a8 <list_count>:
STATIC mp_obj_t list_count(mp_obj_t self_in, mp_obj_t value) {
    e8a8:	b508      	push	{r3, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e8aa:	f010 0f03 	tst.w	r0, #3
    e8ae:	d109      	bne.n	e8c4 <list_count+0x1c>
    e8b0:	6802      	ldr	r2, [r0, #0]
    e8b2:	4b08      	ldr	r3, [pc, #32]	; (e8d4 <list_count+0x2c>)
    e8b4:	429a      	cmp	r2, r3
    e8b6:	d105      	bne.n	e8c4 <list_count+0x1c>
    return mp_seq_count_obj(self->items, self->len, value);
    e8b8:	460a      	mov	r2, r1
    e8ba:	6881      	ldr	r1, [r0, #8]
    e8bc:	68c0      	ldr	r0, [r0, #12]
    e8be:	f004 f917 	bl	12af0 <mp_seq_count_obj>
}
    e8c2:	bd08      	pop	{r3, pc}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    e8c4:	4b04      	ldr	r3, [pc, #16]	; (e8d8 <list_count+0x30>)
    e8c6:	4a05      	ldr	r2, [pc, #20]	; (e8dc <list_count+0x34>)
    e8c8:	f240 1165 	movw	r1, #357	; 0x165
    e8cc:	4804      	ldr	r0, [pc, #16]	; (e8e0 <list_count+0x38>)
    e8ce:	f009 fe45 	bl	1855c <__assert_func>
    e8d2:	bf00      	nop
    e8d4:	00027890 	.word	0x00027890
    e8d8:	000277a8 	.word	0x000277a8
    e8dc:	00027624 	.word	0x00027624
    e8e0:	00027804 	.word	0x00027804

0000e8e4 <list_print>:
STATIC void list_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    e8e4:	b570      	push	{r4, r5, r6, lr}
    e8e6:	4606      	mov	r6, r0
    e8e8:	460d      	mov	r5, r1
    mp_print_str(print, "[");
    e8ea:	490e      	ldr	r1, [pc, #56]	; (e924 <list_print+0x40>)
    e8ec:	f7f3 f827 	bl	193e <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
    e8f0:	2400      	movs	r4, #0
    e8f2:	e007      	b.n	e904 <list_print+0x20>
        mp_obj_print_helper(print, o->items[i], kind);
    e8f4:	68eb      	ldr	r3, [r5, #12]
    e8f6:	2201      	movs	r2, #1
    e8f8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    e8fc:	4630      	mov	r0, r6
    e8fe:	f7fc f95f 	bl	abc0 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
    e902:	3401      	adds	r4, #1
    e904:	68ab      	ldr	r3, [r5, #8]
    e906:	42a3      	cmp	r3, r4
    e908:	d906      	bls.n	e918 <list_print+0x34>
        if (i > 0) {
    e90a:	2c00      	cmp	r4, #0
    e90c:	d0f2      	beq.n	e8f4 <list_print+0x10>
            mp_print_str(print, ", ");
    e90e:	4906      	ldr	r1, [pc, #24]	; (e928 <list_print+0x44>)
    e910:	4630      	mov	r0, r6
    e912:	f7f3 f814 	bl	193e <mp_print_str>
    e916:	e7ed      	b.n	e8f4 <list_print+0x10>
    mp_print_str(print, "]");
    e918:	4904      	ldr	r1, [pc, #16]	; (e92c <list_print+0x48>)
    e91a:	4630      	mov	r0, r6
    e91c:	f7f3 f80f 	bl	193e <mp_print_str>
}
    e920:	bd70      	pop	{r4, r5, r6, pc}
    e922:	bf00      	nop
    e924:	0002779c 	.word	0x0002779c
    e928:	00025e80 	.word	0x00025e80
    e92c:	00025e84 	.word	0x00025e84

0000e930 <mp_obj_list_init>:
void mp_obj_list_init(mp_obj_list_t *o, size_t n) {
    e930:	b538      	push	{r3, r4, r5, lr}
    e932:	4604      	mov	r4, r0
    e934:	460d      	mov	r5, r1
    o->base.type = &mp_type_list;
    e936:	4b0a      	ldr	r3, [pc, #40]	; (e960 <mp_obj_list_init+0x30>)
    e938:	6003      	str	r3, [r0, #0]
    o->alloc = n < LIST_MIN_ALLOC ? LIST_MIN_ALLOC : n;
    e93a:	4608      	mov	r0, r1
    e93c:	2904      	cmp	r1, #4
    e93e:	bf38      	it	cc
    e940:	2004      	movcc	r0, #4
    e942:	6060      	str	r0, [r4, #4]
    o->len = n;
    e944:	60a1      	str	r1, [r4, #8]
    o->items = m_new(mp_obj_t, o->alloc);
    e946:	0080      	lsls	r0, r0, #2
    e948:	f7f1 ffb8 	bl	8bc <m_malloc>
    e94c:	60e0      	str	r0, [r4, #12]
    mp_seq_clear(o->items, n, o->alloc, sizeof(*o->items));
    e94e:	6862      	ldr	r2, [r4, #4]
    e950:	1b52      	subs	r2, r2, r5
    e952:	0092      	lsls	r2, r2, #2
    e954:	2100      	movs	r1, #0
    e956:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    e95a:	f00c ff8f 	bl	1b87c <memset>
}
    e95e:	bd38      	pop	{r3, r4, r5, pc}
    e960:	00027890 	.word	0x00027890

0000e964 <list_new>:
STATIC mp_obj_list_t *list_new(size_t n) {
    e964:	b538      	push	{r3, r4, r5, lr}
    e966:	4605      	mov	r5, r0
    mp_obj_list_t *o = m_new_obj(mp_obj_list_t);
    e968:	2010      	movs	r0, #16
    e96a:	f7f1 ffa7 	bl	8bc <m_malloc>
    e96e:	4604      	mov	r4, r0
    mp_obj_list_init(o, n);
    e970:	4629      	mov	r1, r5
    e972:	f7ff ffdd 	bl	e930 <mp_obj_list_init>
}
    e976:	4620      	mov	r0, r4
    e978:	bd38      	pop	{r3, r4, r5, pc}
	...

0000e97c <list_binary_op>:
STATIC mp_obj_t list_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    e97c:	b570      	push	{r4, r5, r6, lr}
    e97e:	b084      	sub	sp, #16
    e980:	460e      	mov	r6, r1
    e982:	4614      	mov	r4, r2
    switch (op) {
    e984:	281c      	cmp	r0, #28
    e986:	d869      	bhi.n	ea5c <list_binary_op+0xe0>
    e988:	e8df f000 	tbb	[pc, r0]
    e98c:	51515151 	.word	0x51515151
    e990:	68686851 	.word	0x68686851
    e994:	68686868 	.word	0x68686868
    e998:	682c6868 	.word	0x682c6868
    e99c:	68686868 	.word	0x68686868
    e9a0:	68686868 	.word	0x68686868
    e9a4:	680f6868 	.word	0x680f6868
    e9a8:	34          	.byte	0x34
    e9a9:	00          	.byte	0x00
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
    e9aa:	f012 0f03 	tst.w	r2, #3
    e9ae:	d157      	bne.n	ea60 <list_binary_op+0xe4>
    e9b0:	6812      	ldr	r2, [r2, #0]
    e9b2:	4b2e      	ldr	r3, [pc, #184]	; (ea6c <list_binary_op+0xf0>)
    e9b4:	429a      	cmp	r2, r3
    e9b6:	d155      	bne.n	ea64 <list_binary_op+0xe8>
            mp_obj_list_t *s = list_new(o->len + p->len);
    e9b8:	6888      	ldr	r0, [r1, #8]
    e9ba:	68a3      	ldr	r3, [r4, #8]
    e9bc:	4418      	add	r0, r3
    e9be:	f7ff ffd1 	bl	e964 <list_new>
    e9c2:	4605      	mov	r5, r0
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
    e9c4:	68b2      	ldr	r2, [r6, #8]
    e9c6:	0092      	lsls	r2, r2, #2
    e9c8:	68f1      	ldr	r1, [r6, #12]
    e9ca:	68c0      	ldr	r0, [r0, #12]
    e9cc:	f00c ff12 	bl	1b7f4 <memcpy>
    e9d0:	68eb      	ldr	r3, [r5, #12]
    e9d2:	68b0      	ldr	r0, [r6, #8]
    e9d4:	68a2      	ldr	r2, [r4, #8]
    e9d6:	0092      	lsls	r2, r2, #2
    e9d8:	68e1      	ldr	r1, [r4, #12]
    e9da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    e9de:	f00c ff09 	bl	1b7f4 <memcpy>
            return MP_OBJ_FROM_PTR(s);
    e9e2:	e004      	b.n	e9ee <list_binary_op+0x72>
            list_extend(lhs, rhs);
    e9e4:	4611      	mov	r1, r2
    e9e6:	4630      	mov	r0, r6
    e9e8:	f7ff ff0e 	bl	e808 <list_extend>
            return lhs;
    e9ec:	4635      	mov	r5, r6
}
    e9ee:	4628      	mov	r0, r5
    e9f0:	b004      	add	sp, #16
    e9f2:	bd70      	pop	{r4, r5, r6, pc}
            if (!mp_obj_get_int_maybe(rhs, &n)) {
    e9f4:	a903      	add	r1, sp, #12
    e9f6:	4610      	mov	r0, r2
    e9f8:	f7fc fa2a 	bl	ae50 <mp_obj_get_int_maybe>
    e9fc:	b1a8      	cbz	r0, ea2a <list_binary_op+0xae>
            if (n < 0) {
    e9fe:	9b03      	ldr	r3, [sp, #12]
    ea00:	2b00      	cmp	r3, #0
    ea02:	db0f      	blt.n	ea24 <list_binary_op+0xa8>
            mp_obj_list_t *s = list_new(o->len * n);
    ea04:	68b3      	ldr	r3, [r6, #8]
    ea06:	9803      	ldr	r0, [sp, #12]
    ea08:	fb00 f003 	mul.w	r0, r0, r3
    ea0c:	f7ff ffaa 	bl	e964 <list_new>
    ea10:	4605      	mov	r5, r0
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
    ea12:	68f0      	ldr	r0, [r6, #12]
    ea14:	68eb      	ldr	r3, [r5, #12]
    ea16:	68b2      	ldr	r2, [r6, #8]
    ea18:	9300      	str	r3, [sp, #0]
    ea1a:	9b03      	ldr	r3, [sp, #12]
    ea1c:	2104      	movs	r1, #4
    ea1e:	f003 ff8c 	bl	1293a <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
    ea22:	e7e4      	b.n	e9ee <list_binary_op+0x72>
                n = 0;
    ea24:	2300      	movs	r3, #0
    ea26:	9303      	str	r3, [sp, #12]
    ea28:	e7ec      	b.n	ea04 <list_binary_op+0x88>
                return MP_OBJ_NULL; // op not supported
    ea2a:	2500      	movs	r5, #0
    ea2c:	e7df      	b.n	e9ee <list_binary_op+0x72>
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
    ea2e:	f012 0f03 	tst.w	r2, #3
    ea32:	d103      	bne.n	ea3c <list_binary_op+0xc0>
    ea34:	6812      	ldr	r2, [r2, #0]
    ea36:	4b0d      	ldr	r3, [pc, #52]	; (ea6c <list_binary_op+0xf0>)
    ea38:	429a      	cmp	r2, r3
    ea3a:	d003      	beq.n	ea44 <list_binary_op+0xc8>
                if (op == MP_BINARY_OP_EQUAL) {
    ea3c:	2802      	cmp	r0, #2
    ea3e:	d113      	bne.n	ea68 <list_binary_op+0xec>
                    return mp_const_false;
    ea40:	4d0b      	ldr	r5, [pc, #44]	; (ea70 <list_binary_op+0xf4>)
    ea42:	e7d4      	b.n	e9ee <list_binary_op+0x72>
            bool res = mp_seq_cmp_objs(op, o->items, o->len, another->items, another->len);
    ea44:	68c9      	ldr	r1, [r1, #12]
    ea46:	68b2      	ldr	r2, [r6, #8]
    ea48:	68e3      	ldr	r3, [r4, #12]
    ea4a:	68a4      	ldr	r4, [r4, #8]
    ea4c:	9400      	str	r4, [sp, #0]
    ea4e:	f003 ffc3 	bl	129d8 <mp_seq_cmp_objs>
    ea52:	b908      	cbnz	r0, ea58 <list_binary_op+0xdc>
    ea54:	4d06      	ldr	r5, [pc, #24]	; (ea70 <list_binary_op+0xf4>)
    ea56:	e7ca      	b.n	e9ee <list_binary_op+0x72>
    ea58:	4d06      	ldr	r5, [pc, #24]	; (ea74 <list_binary_op+0xf8>)
    ea5a:	e7c8      	b.n	e9ee <list_binary_op+0x72>
            return MP_OBJ_NULL; // op not supported
    ea5c:	2500      	movs	r5, #0
    ea5e:	e7c6      	b.n	e9ee <list_binary_op+0x72>
                return MP_OBJ_NULL; // op not supported
    ea60:	2500      	movs	r5, #0
    ea62:	e7c4      	b.n	e9ee <list_binary_op+0x72>
    ea64:	2500      	movs	r5, #0
    ea66:	e7c2      	b.n	e9ee <list_binary_op+0x72>
                return MP_OBJ_NULL; // op not supported
    ea68:	2500      	movs	r5, #0
    ea6a:	e7c0      	b.n	e9ee <list_binary_op+0x72>
    ea6c:	00027890 	.word	0x00027890
    ea70:	00025f44 	.word	0x00025f44
    ea74:	00025f4c 	.word	0x00025f4c

0000ea78 <mp_obj_new_list>:
mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items) {
    ea78:	b538      	push	{r3, r4, r5, lr}
    ea7a:	4605      	mov	r5, r0
    ea7c:	460c      	mov	r4, r1
    mp_obj_list_t *o = list_new(n);
    ea7e:	f7ff ff71 	bl	e964 <list_new>
    if (items != NULL) {
    ea82:	b14c      	cbz	r4, ea98 <mp_obj_new_list+0x20>
        for (size_t i = 0; i < n; i++) {
    ea84:	2300      	movs	r3, #0
    ea86:	e005      	b.n	ea94 <mp_obj_new_list+0x1c>
            o->items[i] = items[i];
    ea88:	68c2      	ldr	r2, [r0, #12]
    ea8a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    ea8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (size_t i = 0; i < n; i++) {
    ea92:	3301      	adds	r3, #1
    ea94:	42ab      	cmp	r3, r5
    ea96:	d3f7      	bcc.n	ea88 <mp_obj_new_list+0x10>
}
    ea98:	bd38      	pop	{r3, r4, r5, pc}
	...

0000ea9c <list_copy>:
STATIC mp_obj_t list_copy(mp_obj_t self_in) {
    ea9c:	b508      	push	{r3, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    ea9e:	f010 0f03 	tst.w	r0, #3
    eaa2:	d108      	bne.n	eab6 <list_copy+0x1a>
    eaa4:	6802      	ldr	r2, [r0, #0]
    eaa6:	4b07      	ldr	r3, [pc, #28]	; (eac4 <list_copy+0x28>)
    eaa8:	429a      	cmp	r2, r3
    eaaa:	d104      	bne.n	eab6 <list_copy+0x1a>
    return mp_obj_new_list(self->len, self->items);
    eaac:	68c1      	ldr	r1, [r0, #12]
    eaae:	6880      	ldr	r0, [r0, #8]
    eab0:	f7ff ffe2 	bl	ea78 <mp_obj_new_list>
}
    eab4:	bd08      	pop	{r3, pc}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
    eab6:	4b04      	ldr	r3, [pc, #16]	; (eac8 <list_copy+0x2c>)
    eab8:	4a04      	ldr	r2, [pc, #16]	; (eacc <list_copy+0x30>)
    eaba:	f240 115f 	movw	r1, #351	; 0x15f
    eabe:	4804      	ldr	r0, [pc, #16]	; (ead0 <list_copy+0x34>)
    eac0:	f009 fd4c 	bl	1855c <__assert_func>
    eac4:	00027890 	.word	0x00027890
    eac8:	000277a8 	.word	0x000277a8
    eacc:	00027618 	.word	0x00027618
    ead0:	00027804 	.word	0x00027804

0000ead4 <list_make_new>:
STATIC mp_obj_t list_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ead4:	b530      	push	{r4, r5, lr}
    ead6:	b083      	sub	sp, #12
    ead8:	460c      	mov	r4, r1
    eada:	4611      	mov	r1, r2
    eadc:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    eade:	2200      	movs	r2, #0
    eae0:	9200      	str	r2, [sp, #0]
    eae2:	2301      	movs	r3, #1
    eae4:	4620      	mov	r0, r4
    eae6:	f7fb fe17 	bl	a718 <mp_arg_check_num>
    switch (n_args) {
    eaea:	b144      	cbz	r4, eafe <list_make_new+0x2a>
            mp_obj_t list = mp_obj_new_list(0, NULL);
    eaec:	2100      	movs	r1, #0
    eaee:	4608      	mov	r0, r1
    eaf0:	f7ff ffc2 	bl	ea78 <mp_obj_new_list>
            return list_extend_from_iter(list, args[0]);
    eaf4:	6829      	ldr	r1, [r5, #0]
    eaf6:	f7ff fe73 	bl	e7e0 <list_extend_from_iter>
}
    eafa:	b003      	add	sp, #12
    eafc:	bd30      	pop	{r4, r5, pc}
            return mp_obj_new_list(0, NULL);
    eafe:	2100      	movs	r1, #0
    eb00:	4608      	mov	r0, r1
    eb02:	f7ff ffb9 	bl	ea78 <mp_obj_new_list>
    eb06:	e7f8      	b.n	eafa <list_make_new+0x26>

0000eb08 <mp_obj_list_get>:
    *len = self->len;
    eb08:	6883      	ldr	r3, [r0, #8]
    eb0a:	600b      	str	r3, [r1, #0]
    *items = self->items;
    eb0c:	68c3      	ldr	r3, [r0, #12]
    eb0e:	6013      	str	r3, [r2, #0]
}
    eb10:	4770      	bx	lr

0000eb12 <mp_obj_list_set_len>:
    self->len = len;
    eb12:	6081      	str	r1, [r0, #8]
}
    eb14:	4770      	bx	lr

0000eb16 <mp_obj_list_store>:
void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    eb16:	b538      	push	{r3, r4, r5, lr}
    eb18:	4604      	mov	r4, r0
    eb1a:	4615      	mov	r5, r2
    size_t i = mp_get_index(self->base.type, self->len, index, false);
    eb1c:	2300      	movs	r3, #0
    eb1e:	460a      	mov	r2, r1
    eb20:	6881      	ldr	r1, [r0, #8]
    eb22:	6800      	ldr	r0, [r0, #0]
    eb24:	f7fc faaa 	bl	b07c <mp_get_index>
    self->items[i] = value;
    eb28:	68e3      	ldr	r3, [r4, #12]
    eb2a:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
}
    eb2e:	bd38      	pop	{r3, r4, r5, pc}

0000eb30 <list_subscr>:
STATIC mp_obj_t list_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    eb30:	b510      	push	{r4, lr}
    eb32:	b082      	sub	sp, #8
    eb34:	4604      	mov	r4, r0
    if (value == MP_OBJ_NULL) {
    eb36:	b132      	cbz	r2, eb46 <list_subscr+0x16>
    } else if (value == MP_OBJ_SENTINEL) {
    eb38:	2a08      	cmp	r2, #8
    eb3a:	d00c      	beq.n	eb56 <list_subscr+0x26>
        mp_obj_list_store(self_in, index, value);
    eb3c:	f7ff ffeb 	bl	eb16 <mp_obj_list_store>
        return mp_const_none;
    eb40:	480a      	ldr	r0, [pc, #40]	; (eb6c <list_subscr+0x3c>)
}
    eb42:	b002      	add	sp, #8
    eb44:	bd10      	pop	{r4, pc}
        mp_obj_t args[2] = {self_in, index};
    eb46:	9000      	str	r0, [sp, #0]
    eb48:	9101      	str	r1, [sp, #4]
        list_pop(2, args);
    eb4a:	4669      	mov	r1, sp
    eb4c:	2002      	movs	r0, #2
    eb4e:	f7ff fdc9 	bl	e6e4 <list_pop>
        return mp_const_none;
    eb52:	4806      	ldr	r0, [pc, #24]	; (eb6c <list_subscr+0x3c>)
    eb54:	e7f5      	b.n	eb42 <list_subscr+0x12>
        size_t index_val = mp_get_index(self->base.type, self->len, index, false);
    eb56:	2300      	movs	r3, #0
    eb58:	460a      	mov	r2, r1
    eb5a:	6881      	ldr	r1, [r0, #8]
    eb5c:	6800      	ldr	r0, [r0, #0]
    eb5e:	f7fc fa8d 	bl	b07c <mp_get_index>
        return self->items[index_val];
    eb62:	68e3      	ldr	r3, [r4, #12]
    eb64:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    eb68:	e7eb      	b.n	eb42 <list_subscr+0x12>
    eb6a:	bf00      	nop
    eb6c:	00027b40 	.word	0x00027b40

0000eb70 <map_iternext>:
        o->iters[i] = mp_getiter(args[i + 1], NULL);
    }
    return MP_OBJ_FROM_PTR(o);
}

STATIC mp_obj_t map_iternext(mp_obj_t self_in) {
    eb70:	b570      	push	{r4, r5, r6, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
    eb72:	f010 0f03 	tst.w	r0, #3
    eb76:	d119      	bne.n	ebac <map_iternext+0x3c>
    eb78:	4605      	mov	r5, r0
    eb7a:	6802      	ldr	r2, [r0, #0]
    eb7c:	4b14      	ldr	r3, [pc, #80]	; (ebd0 <map_iternext+0x60>)
    eb7e:	429a      	cmp	r2, r3
    eb80:	d114      	bne.n	ebac <map_iternext+0x3c>
    mp_obj_map_t *self = MP_OBJ_TO_PTR(self_in);
    mp_obj_t *nextses = m_new(mp_obj_t, self->n_iters);
    eb82:	6840      	ldr	r0, [r0, #4]
    eb84:	0080      	lsls	r0, r0, #2
    eb86:	f7f1 fe99 	bl	8bc <m_malloc>
    eb8a:	4606      	mov	r6, r0

    for (size_t i = 0; i < self->n_iters; i++) {
    eb8c:	2400      	movs	r4, #0
    eb8e:	6869      	ldr	r1, [r5, #4]
    eb90:	42a1      	cmp	r1, r4
    eb92:	d916      	bls.n	ebc2 <map_iternext+0x52>
        mp_obj_t next = mp_iternext(self->iters[i]);
    eb94:	1ca3      	adds	r3, r4, #2
    eb96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    eb9a:	6858      	ldr	r0, [r3, #4]
    eb9c:	f7fa ff26 	bl	99ec <mp_iternext>
        if (next == MP_OBJ_STOP_ITERATION) {
    eba0:	2804      	cmp	r0, #4
    eba2:	d009      	beq.n	ebb8 <map_iternext+0x48>
            m_del(mp_obj_t, nextses, self->n_iters);
            return MP_OBJ_STOP_ITERATION;
        }
        nextses[i] = next;
    eba4:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
    eba8:	3401      	adds	r4, #1
    ebaa:	e7f0      	b.n	eb8e <map_iternext+0x1e>
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
    ebac:	4b09      	ldr	r3, [pc, #36]	; (ebd4 <map_iternext+0x64>)
    ebae:	4a0a      	ldr	r2, [pc, #40]	; (ebd8 <map_iternext+0x68>)
    ebb0:	2134      	movs	r1, #52	; 0x34
    ebb2:	480a      	ldr	r0, [pc, #40]	; (ebdc <map_iternext+0x6c>)
    ebb4:	f009 fcd2 	bl	1855c <__assert_func>
            m_del(mp_obj_t, nextses, self->n_iters);
    ebb8:	4630      	mov	r0, r6
    ebba:	f7f1 fea8 	bl	90e <m_free>
            return MP_OBJ_STOP_ITERATION;
    ebbe:	2004      	movs	r0, #4
    ebc0:	e004      	b.n	ebcc <map_iternext+0x5c>
    }
    return mp_call_function_n_kw(self->fun, self->n_iters, 0, nextses);
    ebc2:	4633      	mov	r3, r6
    ebc4:	2200      	movs	r2, #0
    ebc6:	68a8      	ldr	r0, [r5, #8]
    ebc8:	f7fa fd5c 	bl	9684 <mp_call_function_n_kw>
}
    ebcc:	bd70      	pop	{r4, r5, r6, pc}
    ebce:	bf00      	nop
    ebd0:	0002794c 	.word	0x0002794c
    ebd4:	000278dc 	.word	0x000278dc
    ebd8:	000278cc 	.word	0x000278cc
    ebdc:	00027938 	.word	0x00027938

0000ebe0 <map_make_new>:
STATIC mp_obj_t map_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ebe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebe4:	b082      	sub	sp, #8
    ebe6:	4605      	mov	r5, r0
    ebe8:	460e      	mov	r6, r1
    ebea:	4611      	mov	r1, r2
    ebec:	4698      	mov	r8, r3
    mp_arg_check_num(n_args, n_kw, 2, MP_OBJ_FUN_ARGS_MAX, false);
    ebee:	2400      	movs	r4, #0
    ebf0:	9400      	str	r4, [sp, #0]
    ebf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ebf6:	2202      	movs	r2, #2
    ebf8:	4630      	mov	r0, r6
    ebfa:	f7fb fd8d 	bl	a718 <mp_arg_check_num>
    mp_obj_map_t *o = m_new_obj_var(mp_obj_map_t, mp_obj_t, n_args - 1);
    ebfe:	1cb0      	adds	r0, r6, #2
    ec00:	0080      	lsls	r0, r0, #2
    ec02:	f7f1 fe5b 	bl	8bc <m_malloc>
    ec06:	4607      	mov	r7, r0
    o->base.type = type;
    ec08:	6005      	str	r5, [r0, #0]
    o->n_iters = n_args - 1;
    ec0a:	3e01      	subs	r6, #1
    ec0c:	6046      	str	r6, [r0, #4]
    o->fun = args[0];
    ec0e:	f8d8 3000 	ldr.w	r3, [r8]
    ec12:	6083      	str	r3, [r0, #8]
    for (size_t i = 0; i < n_args - 1; i++) {
    ec14:	e00a      	b.n	ec2c <map_make_new+0x4c>
        o->iters[i] = mp_getiter(args[i + 1], NULL);
    ec16:	1c65      	adds	r5, r4, #1
    ec18:	2100      	movs	r1, #0
    ec1a:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
    ec1e:	f7fa fe77 	bl	9910 <mp_getiter>
    ec22:	3402      	adds	r4, #2
    ec24:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    ec28:	6060      	str	r0, [r4, #4]
    for (size_t i = 0; i < n_args - 1; i++) {
    ec2a:	462c      	mov	r4, r5
    ec2c:	42a6      	cmp	r6, r4
    ec2e:	d8f2      	bhi.n	ec16 <map_make_new+0x36>
}
    ec30:	4638      	mov	r0, r7
    ec32:	b002      	add	sp, #8
    ec34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ec38 <module_attr>:
#endif

    mp_printf(print, "<module '%s'>", module_name);
}

STATIC void module_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    ec38:	b510      	push	{r4, lr}
    ec3a:	4614      	mov	r4, r2
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
    if (dest[0] == MP_OBJ_NULL) {
    ec3c:	6813      	ldr	r3, [r2, #0]
    ec3e:	b173      	cbz	r3, ec5e <module_attr+0x26>
        if (elem != NULL) {
            dest[0] = elem->value;
        }
    } else {
        // delete/store attribute
        mp_obj_dict_t *dict = self->globals;
    ec40:	6840      	ldr	r0, [r0, #4]
        if (dict->map.is_fixed) {
    ec42:	7903      	ldrb	r3, [r0, #4]
    ec44:	f013 0f02 	tst.w	r3, #2
    ec48:	d108      	bne.n	ec5c <module_attr+0x24>
            {
                // can't delete or store to fixed map
                return;
            }
        }
        if (dest[1] == MP_OBJ_NULL) {
    ec4a:	6852      	ldr	r2, [r2, #4]
    ec4c:	b1a2      	cbz	r2, ec78 <module_attr+0x40>
            // delete attribute
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
        } else {
            // store attribute
            // TODO CPython allows STORE_ATTR to a module, but is this the correct implementation?
            mp_obj_dict_store(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr), dest[1]);
    ec4e:	0089      	lsls	r1, r1, #2
    ec50:	f041 0102 	orr.w	r1, r1, #2
    ec54:	f7fd fdd8 	bl	c808 <mp_obj_dict_store>
        }
        dest[0] = MP_OBJ_NULL; // indicate success
    ec58:	2300      	movs	r3, #0
    ec5a:	6023      	str	r3, [r4, #0]
    }
}
    ec5c:	bd10      	pop	{r4, pc}
        mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    ec5e:	6840      	ldr	r0, [r0, #4]
    ec60:	0089      	lsls	r1, r1, #2
    ec62:	2200      	movs	r2, #0
    ec64:	f041 0102 	orr.w	r1, r1, #2
    ec68:	3004      	adds	r0, #4
    ec6a:	f7fb fe65 	bl	a938 <mp_map_lookup>
        if (elem != NULL) {
    ec6e:	2800      	cmp	r0, #0
    ec70:	d0f4      	beq.n	ec5c <module_attr+0x24>
            dest[0] = elem->value;
    ec72:	6843      	ldr	r3, [r0, #4]
    ec74:	6023      	str	r3, [r4, #0]
    ec76:	e7f1      	b.n	ec5c <module_attr+0x24>
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
    ec78:	0089      	lsls	r1, r1, #2
    ec7a:	f041 0102 	orr.w	r1, r1, #2
    ec7e:	f7fd fde9 	bl	c854 <mp_obj_dict_delete>
    ec82:	e7e9      	b.n	ec58 <module_attr+0x20>

0000ec84 <module_print>:
STATIC void module_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    ec84:	b510      	push	{r4, lr}
    ec86:	4604      	mov	r4, r0
    mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_MAP_LOOKUP);
    ec88:	6848      	ldr	r0, [r1, #4]
    ec8a:	2200      	movs	r2, #0
    ec8c:	2172      	movs	r1, #114	; 0x72
    ec8e:	3004      	adds	r0, #4
    ec90:	f7fb fe52 	bl	a938 <mp_map_lookup>
    if (elem != NULL) {
    ec94:	b140      	cbz	r0, eca8 <module_print+0x24>
        module_name = mp_obj_str_get_str(elem->value);
    ec96:	6840      	ldr	r0, [r0, #4]
    ec98:	f001 fad8 	bl	1024c <mp_obj_str_get_str>
    ec9c:	4602      	mov	r2, r0
    mp_printf(print, "<module '%s'>", module_name);
    ec9e:	4903      	ldr	r1, [pc, #12]	; (ecac <module_print+0x28>)
    eca0:	4620      	mov	r0, r4
    eca2:	f7f3 f9e3 	bl	206c <mp_printf>
}
    eca6:	bd10      	pop	{r4, pc}
    const char *module_name = "";
    eca8:	4a01      	ldr	r2, [pc, #4]	; (ecb0 <module_print+0x2c>)
    ecaa:	e7f8      	b.n	ec9e <module_print+0x1a>
    ecac:	000279a4 	.word	0x000279a4
    ecb0:	0002bd00 	.word	0x0002bd00

0000ecb4 <mp_obj_new_module>:
    .name = MP_QSTR_module,
    .print = module_print,
    .attr = module_attr,
};

mp_obj_t mp_obj_new_module(qstr module_name) {
    ecb4:	b570      	push	{r4, r5, r6, lr}
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    ecb6:	0080      	lsls	r0, r0, #2
    ecb8:	f040 0402 	orr.w	r4, r0, #2
    ecbc:	2201      	movs	r2, #1
    ecbe:	4621      	mov	r1, r4
    ecc0:	480b      	ldr	r0, [pc, #44]	; (ecf0 <mp_obj_new_module+0x3c>)
    ecc2:	f7fb fe39 	bl	a938 <mp_map_lookup>
    // We could error out if module already exists, but let C extensions
    // add new members to existing modules.
    if (el->value != MP_OBJ_NULL) {
    ecc6:	6845      	ldr	r5, [r0, #4]
    ecc8:	b10d      	cbz	r5, ecce <mp_obj_new_module+0x1a>
    // store the new module into the slot in the global dict holding all modules
    el->value = MP_OBJ_FROM_PTR(o);

    // return the new module
    return MP_OBJ_FROM_PTR(o);
}
    ecca:	4628      	mov	r0, r5
    eccc:	bd70      	pop	{r4, r5, r6, pc}
    ecce:	4606      	mov	r6, r0
    mp_obj_module_t *o = m_new_obj(mp_obj_module_t);
    ecd0:	2008      	movs	r0, #8
    ecd2:	f7f1 fdf3 	bl	8bc <m_malloc>
    ecd6:	4605      	mov	r5, r0
    o->base.type = &mp_type_module;
    ecd8:	4b06      	ldr	r3, [pc, #24]	; (ecf4 <mp_obj_new_module+0x40>)
    ecda:	6003      	str	r3, [r0, #0]
    o->globals = MP_OBJ_TO_PTR(mp_obj_new_dict(MICROPY_MODULE_DICT_SIZE));
    ecdc:	2001      	movs	r0, #1
    ecde:	f7fd fcfd 	bl	c6dc <mp_obj_new_dict>
    ece2:	6068      	str	r0, [r5, #4]
    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(module_name));
    ece4:	4622      	mov	r2, r4
    ece6:	2172      	movs	r1, #114	; 0x72
    ece8:	f7fd fd8e 	bl	c808 <mp_obj_dict_store>
    el->value = MP_OBJ_FROM_PTR(o);
    ecec:	6075      	str	r5, [r6, #4]
    return MP_OBJ_FROM_PTR(o);
    ecee:	e7ec      	b.n	ecca <mp_obj_new_module+0x16>
    ecf0:	200008d8 	.word	0x200008d8
    ecf4:	00027a8c 	.word	0x00027a8c

0000ecf8 <mp_obj_module_get_globals>:

mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t self_in) {
    ecf8:	b508      	push	{r3, lr}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_module));
    ecfa:	f010 0f03 	tst.w	r0, #3
    ecfe:	d105      	bne.n	ed0c <mp_obj_module_get_globals+0x14>
    ed00:	6802      	ldr	r2, [r0, #0]
    ed02:	4b05      	ldr	r3, [pc, #20]	; (ed18 <mp_obj_module_get_globals+0x20>)
    ed04:	429a      	cmp	r2, r3
    ed06:	d101      	bne.n	ed0c <mp_obj_module_get_globals+0x14>
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
    return self->globals;
}
    ed08:	6840      	ldr	r0, [r0, #4]
    ed0a:	bd08      	pop	{r3, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_module));
    ed0c:	4b03      	ldr	r3, [pc, #12]	; (ed1c <mp_obj_module_get_globals+0x24>)
    ed0e:	4a04      	ldr	r2, [pc, #16]	; (ed20 <mp_obj_module_get_globals+0x28>)
    ed10:	217e      	movs	r1, #126	; 0x7e
    ed12:	4804      	ldr	r0, [pc, #16]	; (ed24 <mp_obj_module_get_globals+0x2c>)
    ed14:	f009 fc22 	bl	1855c <__assert_func>
    ed18:	00027a8c 	.word	0x00027a8c
    ed1c:	00027a48 	.word	0x00027a48
    ed20:	00027988 	.word	0x00027988
    ed24:	00027a74 	.word	0x00027a74

0000ed28 <mp_module_get>:

MP_DEFINE_CONST_MAP(mp_builtin_module_weak_links_map, mp_builtin_module_weak_links_table);
#endif

// returns MP_OBJ_NULL if not found
mp_obj_t mp_module_get(qstr module_name) {
    ed28:	b510      	push	{r4, lr}
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
    // lookup module
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
    ed2a:	0080      	lsls	r0, r0, #2
    ed2c:	f040 0402 	orr.w	r4, r0, #2
    ed30:	2200      	movs	r2, #0
    ed32:	4621      	mov	r1, r4
    ed34:	4808      	ldr	r0, [pc, #32]	; (ed58 <mp_module_get+0x30>)
    ed36:	f7fb fdff 	bl	a938 <mp_map_lookup>

    if (el == NULL) {
    ed3a:	4603      	mov	r3, r0
    ed3c:	b108      	cbz	r0, ed42 <mp_module_get+0x1a>
        }
        mp_module_call_init(module_name, el->value);
    }

    // module found, return it
    return el->value;
    ed3e:	6858      	ldr	r0, [r3, #4]
}
    ed40:	bd10      	pop	{r4, pc}
        el = mp_map_lookup((mp_map_t*)&mp_builtin_module_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
    ed42:	2200      	movs	r2, #0
    ed44:	4621      	mov	r1, r4
    ed46:	4805      	ldr	r0, [pc, #20]	; (ed5c <mp_module_get+0x34>)
    ed48:	f7fb fdf6 	bl	a938 <mp_map_lookup>
        if (el == NULL) {
    ed4c:	4603      	mov	r3, r0
    ed4e:	2800      	cmp	r0, #0
    ed50:	d1f5      	bne.n	ed3e <mp_module_get+0x16>
            return MP_OBJ_NULL;
    ed52:	2000      	movs	r0, #0
    ed54:	e7f4      	b.n	ed40 <mp_module_get+0x18>
    ed56:	bf00      	nop
    ed58:	200008d8 	.word	0x200008d8
    ed5c:	000279b4 	.word	0x000279b4

0000ed60 <object_make_new>:

typedef struct _mp_obj_object_t {
    mp_obj_base_t base;
} mp_obj_object_t;

STATIC mp_obj_t object_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ed60:	b510      	push	{r4, lr}
    ed62:	b082      	sub	sp, #8
    ed64:	4604      	mov	r4, r0
    ed66:	4608      	mov	r0, r1
    ed68:	4611      	mov	r1, r2
    (void)args;
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    ed6a:	2200      	movs	r2, #0
    ed6c:	9200      	str	r2, [sp, #0]
    ed6e:	4613      	mov	r3, r2
    ed70:	f7fb fcd2 	bl	a718 <mp_arg_check_num>
    mp_obj_object_t *o = m_new_obj(mp_obj_object_t);
    ed74:	2004      	movs	r0, #4
    ed76:	f7f1 fda1 	bl	8bc <m_malloc>
    o->base.type = type;
    ed7a:	6004      	str	r4, [r0, #0]
    return MP_OBJ_FROM_PTR(o);
}
    ed7c:	b002      	add	sp, #8
    ed7e:	bd10      	pop	{r4, pc}

0000ed80 <polymorph_it_iternext>:
typedef struct _mp_obj_polymorph_iter_t {
    mp_obj_base_t base;
    mp_fun_1_t iternext;
} mp_obj_polymorph_iter_t;

STATIC mp_obj_t polymorph_it_iternext(mp_obj_t self_in) {
    ed80:	b508      	push	{r3, lr}
    mp_obj_polymorph_iter_t *self = MP_OBJ_TO_PTR(self_in);
    // Redirect call to object instance's iternext method
    return self->iternext(self_in);
    ed82:	6843      	ldr	r3, [r0, #4]
    ed84:	4798      	blx	r3
}
    ed86:	bd08      	pop	{r3, pc}

0000ed88 <none_print>:

typedef struct _mp_obj_none_t {
    mp_obj_base_t base;
} mp_obj_none_t;

STATIC void none_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    ed88:	b508      	push	{r3, lr}
    (void)self_in;
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "null");
    } else {
        mp_print_str(print, "None");
    ed8a:	4902      	ldr	r1, [pc, #8]	; (ed94 <none_print+0xc>)
    ed8c:	f7f2 fdd7 	bl	193e <mp_print_str>
    }
}
    ed90:	bd08      	pop	{r3, pc}
    ed92:	bf00      	nop
    ed94:	000238f0 	.word	0x000238f0

0000ed98 <namedtuple_print>:
    return dict;
}
MP_DEFINE_CONST_FUN_OBJ_1(namedtuple_asdict_obj, namedtuple_asdict);
#endif

STATIC void namedtuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    ed98:	b538      	push	{r3, r4, r5, lr}
    ed9a:	4605      	mov	r5, r0
    ed9c:	460c      	mov	r4, r1
    (void)kind;
    mp_obj_namedtuple_t *o = MP_OBJ_TO_PTR(o_in);
    mp_printf(print, "%q", o->tuple.base.type->name);
    ed9e:	680b      	ldr	r3, [r1, #0]
    eda0:	685a      	ldr	r2, [r3, #4]
    eda2:	4905      	ldr	r1, [pc, #20]	; (edb8 <namedtuple_print+0x20>)
    eda4:	f7f3 f962 	bl	206c <mp_printf>
    const qstr *fields = ((mp_obj_namedtuple_type_t*)o->tuple.base.type)->fields;
    eda8:	6821      	ldr	r1, [r4, #0]
    mp_obj_attrtuple_print_helper(print, fields, &o->tuple);
    edaa:	4622      	mov	r2, r4
    edac:	3140      	adds	r1, #64	; 0x40
    edae:	4628      	mov	r0, r5
    edb0:	f7fc fda4 	bl	b8fc <mp_obj_attrtuple_print_helper>
}
    edb4:	bd38      	pop	{r3, r4, r5, pc}
    edb6:	bf00      	nop
    edb8:	00027bf0 	.word	0x00027bf0

0000edbc <mp_obj_namedtuple_find_field>:
    for (size_t i = 0; i < type->n_fields; i++) {
    edbc:	2300      	movs	r3, #0
    edbe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    edc0:	429a      	cmp	r2, r3
    edc2:	d907      	bls.n	edd4 <mp_obj_namedtuple_find_field+0x18>
        if (type->fields[i] == name) {
    edc4:	f103 0210 	add.w	r2, r3, #16
    edc8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    edcc:	428a      	cmp	r2, r1
    edce:	d003      	beq.n	edd8 <mp_obj_namedtuple_find_field+0x1c>
    for (size_t i = 0; i < type->n_fields; i++) {
    edd0:	3301      	adds	r3, #1
    edd2:	e7f4      	b.n	edbe <mp_obj_namedtuple_find_field+0x2>
    return (size_t)-1;
    edd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    edd8:	4618      	mov	r0, r3
    edda:	4770      	bx	lr

0000eddc <namedtuple_attr>:

STATIC void namedtuple_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    eddc:	b538      	push	{r3, r4, r5, lr}
    if (dest[0] == MP_OBJ_NULL) {
    edde:	6813      	ldr	r3, [r2, #0]
    ede0:	b963      	cbnz	r3, edfc <namedtuple_attr+0x20>
    ede2:	4605      	mov	r5, r0
    ede4:	4614      	mov	r4, r2
            dest[0] = MP_OBJ_FROM_PTR(&namedtuple_asdict_obj);
            dest[1] = self_in;
            return;
        }
        #endif
        size_t id = mp_obj_namedtuple_find_field((mp_obj_namedtuple_type_t*)self->tuple.base.type, attr);
    ede6:	6800      	ldr	r0, [r0, #0]
    ede8:	f7ff ffe8 	bl	edbc <mp_obj_namedtuple_find_field>
        if (id == (size_t)-1) {
    edec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    edf0:	d003      	beq.n	edfa <namedtuple_attr+0x1e>
            return;
        }
        dest[0] = self->tuple.items[id];
    edf2:	3002      	adds	r0, #2
    edf4:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
    edf8:	6023      	str	r3, [r4, #0]
    } else {
        // delete/store attribute
        // provide more detailed error message than we'd get by just returning
        mp_raise_msg(&mp_type_AttributeError, "can't set attribute");
    }
}
    edfa:	bd38      	pop	{r3, r4, r5, pc}
        mp_raise_msg(&mp_type_AttributeError, "can't set attribute");
    edfc:	4901      	ldr	r1, [pc, #4]	; (ee04 <namedtuple_attr+0x28>)
    edfe:	4802      	ldr	r0, [pc, #8]	; (ee08 <namedtuple_attr+0x2c>)
    ee00:	f7fb fa32 	bl	a268 <mp_raise_msg>
    ee04:	00027b88 	.word	0x00027b88
    ee08:	000267d4 	.word	0x000267d4

0000ee0c <namedtuple_make_new>:

STATIC mp_obj_t namedtuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ee0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee10:	4681      	mov	r9, r0
    ee12:	461e      	mov	r6, r3
    const mp_obj_namedtuple_type_t *type = (const mp_obj_namedtuple_type_t*)type_in;
    size_t num_fields = type->n_fields;
    ee14:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    if (n_args + n_kw != num_fields) {
    ee16:	188b      	adds	r3, r1, r2
    ee18:	4283      	cmp	r3, r0
    ee1a:	d130      	bne.n	ee7e <namedtuple_make_new+0x72>
    ee1c:	460f      	mov	r7, r1
    ee1e:	4690      	mov	r8, r2
                type->base.name, num_fields, n_args + n_kw));
        }
    }

    // Create a tuple and set the type to this namedtuple
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(num_fields, NULL));
    ee20:	2100      	movs	r1, #0
    ee22:	f002 fd0f 	bl	11844 <mp_obj_new_tuple>
    ee26:	4605      	mov	r5, r0
    tuple->base.type = type_in;
    ee28:	f840 9b08 	str.w	r9, [r0], #8

    // Copy the positional args into the first slots of the namedtuple
    memcpy(&tuple->items[0], args, sizeof(mp_obj_t) * n_args);
    ee2c:	00ba      	lsls	r2, r7, #2
    ee2e:	4631      	mov	r1, r6
    ee30:	f00c fce0 	bl	1b7f4 <memcpy>

    // Fill in the remaining slots with the keyword args
    memset(&tuple->items[n_args], 0, sizeof(mp_obj_t) * n_kw);
    ee34:	1cb8      	adds	r0, r7, #2
    ee36:	ea4f 0288 	mov.w	r2, r8, lsl #2
    ee3a:	2100      	movs	r1, #0
    ee3c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    ee40:	f00c fd1c 	bl	1b87c <memset>
    for (size_t i = n_args; i < n_args + 2 * n_kw; i += 2) {
    ee44:	463c      	mov	r4, r7
    ee46:	eb07 0348 	add.w	r3, r7, r8, lsl #1
    ee4a:	429c      	cmp	r4, r3
    ee4c:	d22c      	bcs.n	eea8 <namedtuple_make_new+0x9c>
        qstr kw = mp_obj_str_get_qstr(args[i]);
    ee4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    ee52:	f001 f9e5 	bl	10220 <mp_obj_str_get_qstr>
    ee56:	4682      	mov	sl, r0
        size_t id = mp_obj_namedtuple_find_field(type, kw);
    ee58:	4601      	mov	r1, r0
    ee5a:	4648      	mov	r0, r9
    ee5c:	f7ff ffae 	bl	edbc <mp_obj_namedtuple_find_field>
        if (id == (size_t)-1) {
    ee60:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ee64:	d012      	beq.n	ee8c <namedtuple_make_new+0x80>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "unexpected keyword argument '%q'", kw));
            }
        }
        if (tuple->items[id] != MP_OBJ_NULL) {
    ee66:	1c83      	adds	r3, r0, #2
    ee68:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    ee6c:	b9ab      	cbnz	r3, ee9a <namedtuple_make_new+0x8e>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function got multiple values for argument '%q'", kw));
            }
        }
        tuple->items[id] = args[i + 1];
    ee6e:	1c63      	adds	r3, r4, #1
    ee70:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    ee74:	3002      	adds	r0, #2
    ee76:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
    for (size_t i = n_args; i < n_args + 2 * n_kw; i += 2) {
    ee7a:	3402      	adds	r4, #2
    ee7c:	e7e3      	b.n	ee46 <namedtuple_make_new+0x3a>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    ee7e:	4602      	mov	r2, r0
    ee80:	490b      	ldr	r1, [pc, #44]	; (eeb0 <namedtuple_make_new+0xa4>)
    ee82:	480c      	ldr	r0, [pc, #48]	; (eeb4 <namedtuple_make_new+0xa8>)
    ee84:	f7fd fe22 	bl	cacc <mp_obj_new_exception_msg_varg>
    ee88:	f7f1 fcfa 	bl	880 <nlr_jump>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    ee8c:	4652      	mov	r2, sl
    ee8e:	490a      	ldr	r1, [pc, #40]	; (eeb8 <namedtuple_make_new+0xac>)
    ee90:	4808      	ldr	r0, [pc, #32]	; (eeb4 <namedtuple_make_new+0xa8>)
    ee92:	f7fd fe1b 	bl	cacc <mp_obj_new_exception_msg_varg>
    ee96:	f7f1 fcf3 	bl	880 <nlr_jump>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    ee9a:	4652      	mov	r2, sl
    ee9c:	4907      	ldr	r1, [pc, #28]	; (eebc <namedtuple_make_new+0xb0>)
    ee9e:	4805      	ldr	r0, [pc, #20]	; (eeb4 <namedtuple_make_new+0xa8>)
    eea0:	f7fd fe14 	bl	cacc <mp_obj_new_exception_msg_varg>
    eea4:	f7f1 fcec 	bl	880 <nlr_jump>
    }

    return MP_OBJ_FROM_PTR(tuple);
}
    eea8:	4628      	mov	r0, r5
    eeaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eeae:	bf00      	nop
    eeb0:	0002591c 	.word	0x0002591c
    eeb4:	00026c84 	.word	0x00026c84
    eeb8:	00027b9c 	.word	0x00027b9c
    eebc:	00027bc0 	.word	0x00027bc0

0000eec0 <mp_obj_new_namedtuple_base>:

mp_obj_namedtuple_type_t *mp_obj_new_namedtuple_base(size_t n_fields, mp_obj_t *fields) {
    eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eec2:	4605      	mov	r5, r0
    eec4:	460f      	mov	r7, r1
    mp_obj_namedtuple_type_t *o = m_new_obj_var(mp_obj_namedtuple_type_t, qstr, n_fields);
    eec6:	3010      	adds	r0, #16
    eec8:	0080      	lsls	r0, r0, #2
    eeca:	f7f1 fcf7 	bl	8bc <m_malloc>
    eece:	4606      	mov	r6, r0
    memset(&o->base, 0, sizeof(o->base));
    eed0:	223c      	movs	r2, #60	; 0x3c
    eed2:	2100      	movs	r1, #0
    eed4:	f00c fcd2 	bl	1b87c <memset>
    o->n_fields = n_fields;
    eed8:	63f5      	str	r5, [r6, #60]	; 0x3c
    for (size_t i = 0; i < n_fields; i++) {
    eeda:	2400      	movs	r4, #0
    eedc:	e008      	b.n	eef0 <mp_obj_new_namedtuple_base+0x30>
        o->fields[i] = mp_obj_str_get_qstr(fields[i]);
    eede:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
    eee2:	f001 f99d 	bl	10220 <mp_obj_str_get_qstr>
    eee6:	f104 0310 	add.w	r3, r4, #16
    eeea:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    for (size_t i = 0; i < n_fields; i++) {
    eeee:	3401      	adds	r4, #1
    eef0:	42ac      	cmp	r4, r5
    eef2:	d3f4      	bcc.n	eede <mp_obj_new_namedtuple_base+0x1e>
    }
    return o;
}
    eef4:	4630      	mov	r0, r6
    eef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000eef8 <mp_obj_new_namedtuple_type>:

STATIC mp_obj_t mp_obj_new_namedtuple_type(qstr name, size_t n_fields, mp_obj_t *fields) {
    eef8:	b510      	push	{r4, lr}
    eefa:	4604      	mov	r4, r0
    eefc:	4608      	mov	r0, r1
    mp_obj_namedtuple_type_t *o = mp_obj_new_namedtuple_base(n_fields, fields);
    eefe:	4611      	mov	r1, r2
    ef00:	f7ff ffde 	bl	eec0 <mp_obj_new_namedtuple_base>
    o->base.base.type = &mp_type_type;
    ef04:	4a09      	ldr	r2, [pc, #36]	; (ef2c <mp_obj_new_namedtuple_type+0x34>)
    ef06:	6002      	str	r2, [r0, #0]
    o->base.name = name;
    ef08:	6044      	str	r4, [r0, #4]
    o->base.print = namedtuple_print;
    ef0a:	4a09      	ldr	r2, [pc, #36]	; (ef30 <mp_obj_new_namedtuple_type+0x38>)
    ef0c:	6082      	str	r2, [r0, #8]
    o->base.make_new = namedtuple_make_new;
    ef0e:	4a09      	ldr	r2, [pc, #36]	; (ef34 <mp_obj_new_namedtuple_type+0x3c>)
    ef10:	60c2      	str	r2, [r0, #12]
    o->base.unary_op = mp_obj_tuple_unary_op;
    ef12:	4a09      	ldr	r2, [pc, #36]	; (ef38 <mp_obj_new_namedtuple_type+0x40>)
    ef14:	6142      	str	r2, [r0, #20]
    o->base.binary_op = mp_obj_tuple_binary_op;
    ef16:	4a09      	ldr	r2, [pc, #36]	; (ef3c <mp_obj_new_namedtuple_type+0x44>)
    ef18:	6182      	str	r2, [r0, #24]
    o->base.attr = namedtuple_attr;
    ef1a:	4a09      	ldr	r2, [pc, #36]	; (ef40 <mp_obj_new_namedtuple_type+0x48>)
    ef1c:	61c2      	str	r2, [r0, #28]
    o->base.subscr = mp_obj_tuple_subscr;
    ef1e:	4a09      	ldr	r2, [pc, #36]	; (ef44 <mp_obj_new_namedtuple_type+0x4c>)
    ef20:	6202      	str	r2, [r0, #32]
    o->base.getiter = mp_obj_tuple_getiter;
    ef22:	4a09      	ldr	r2, [pc, #36]	; (ef48 <mp_obj_new_namedtuple_type+0x50>)
    ef24:	6242      	str	r2, [r0, #36]	; 0x24
    o->base.parent = &mp_type_tuple;
    ef26:	4a09      	ldr	r2, [pc, #36]	; (ef4c <mp_obj_new_namedtuple_type+0x54>)
    ef28:	6342      	str	r2, [r0, #52]	; 0x34
    return MP_OBJ_FROM_PTR(o);
}
    ef2a:	bd10      	pop	{r4, pc}
    ef2c:	00028dd0 	.word	0x00028dd0
    ef30:	0000ed99 	.word	0x0000ed99
    ef34:	0000ee0d 	.word	0x0000ee0d
    ef38:	000116c9 	.word	0x000116c9
    ef3c:	00011881 	.word	0x00011881
    ef40:	0000eddd 	.word	0x0000eddd
    ef44:	000117ad 	.word	0x000117ad
    ef48:	00011651 	.word	0x00011651
    ef4c:	00028844 	.word	0x00028844

0000ef50 <new_namedtuple_type>:

STATIC mp_obj_t new_namedtuple_type(mp_obj_t name_in, mp_obj_t fields_in) {
    ef50:	b530      	push	{r4, r5, lr}
    ef52:	b083      	sub	sp, #12
    ef54:	460d      	mov	r5, r1
    qstr name = mp_obj_str_get_qstr(name_in);
    ef56:	f001 f963 	bl	10220 <mp_obj_str_get_qstr>
    ef5a:	4604      	mov	r4, r0
    #if MICROPY_CPYTHON_COMPAT
    if (MP_OBJ_IS_STR(fields_in)) {
        fields_in = mp_obj_str_split(1, &fields_in);
    }
    #endif
    mp_obj_get_array(fields_in, &n_fields, &fields);
    ef5c:	466a      	mov	r2, sp
    ef5e:	a901      	add	r1, sp, #4
    ef60:	4628      	mov	r0, r5
    ef62:	f7fc f851 	bl	b008 <mp_obj_get_array>
    return mp_obj_new_namedtuple_type(name, n_fields, fields);
    ef66:	9a00      	ldr	r2, [sp, #0]
    ef68:	9901      	ldr	r1, [sp, #4]
    ef6a:	4620      	mov	r0, r4
    ef6c:	f7ff ffc4 	bl	eef8 <mp_obj_new_namedtuple_type>
}
    ef70:	b003      	add	sp, #12
    ef72:	bd30      	pop	{r4, r5, pc}

0000ef74 <range_it_iternext>:
    mp_int_t cur;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_it_t;

STATIC mp_obj_t range_it_iternext(mp_obj_t o_in) {
    ef74:	4603      	mov	r3, r0
    mp_obj_range_it_t *o = MP_OBJ_TO_PTR(o_in);
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
    ef76:	68c2      	ldr	r2, [r0, #12]
    ef78:	2a00      	cmp	r2, #0
    ef7a:	dd03      	ble.n	ef84 <range_it_iternext+0x10>
    ef7c:	6840      	ldr	r0, [r0, #4]
    ef7e:	6899      	ldr	r1, [r3, #8]
    ef80:	4288      	cmp	r0, r1
    ef82:	db07      	blt.n	ef94 <range_it_iternext+0x20>
    ef84:	2a00      	cmp	r2, #0
    ef86:	db01      	blt.n	ef8c <range_it_iternext+0x18>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
        o->cur += o->step;
        return o_out;
    } else {
        return MP_OBJ_STOP_ITERATION;
    ef88:	2004      	movs	r0, #4
    ef8a:	4770      	bx	lr
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
    ef8c:	6858      	ldr	r0, [r3, #4]
    ef8e:	6899      	ldr	r1, [r3, #8]
    ef90:	4288      	cmp	r0, r1
    ef92:	dd06      	ble.n	efa2 <range_it_iternext+0x2e>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
    ef94:	6859      	ldr	r1, [r3, #4]
    ef96:	0048      	lsls	r0, r1, #1
    ef98:	f040 0001 	orr.w	r0, r0, #1
        o->cur += o->step;
    ef9c:	440a      	add	r2, r1
    ef9e:	605a      	str	r2, [r3, #4]
        return o_out;
    efa0:	4770      	bx	lr
        return MP_OBJ_STOP_ITERATION;
    efa2:	2004      	movs	r0, #4
    }
}
    efa4:	4770      	bx	lr
	...

0000efa8 <mp_obj_new_range_iterator>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = range_it_iternext,
};

STATIC mp_obj_t mp_obj_new_range_iterator(mp_int_t cur, mp_int_t stop, mp_int_t step, mp_obj_iter_buf_t *iter_buf) {
    efa8:	b410      	push	{r4}
    assert(sizeof(mp_obj_range_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_range_it_t *o = (mp_obj_range_it_t*)iter_buf;
    o->base.type = &range_it_type;
    efaa:	4c04      	ldr	r4, [pc, #16]	; (efbc <mp_obj_new_range_iterator+0x14>)
    efac:	601c      	str	r4, [r3, #0]
    o->cur = cur;
    efae:	6058      	str	r0, [r3, #4]
    o->stop = stop;
    efb0:	6099      	str	r1, [r3, #8]
    o->step = step;
    efb2:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
}
    efb4:	4618      	mov	r0, r3
    efb6:	f85d 4b04 	ldr.w	r4, [sp], #4
    efba:	4770      	bx	lr
    efbc:	00027c30 	.word	0x00027c30

0000efc0 <range_len>:
    return MP_OBJ_FROM_PTR(o);
}

STATIC mp_int_t range_len(mp_obj_range_t *self) {
    // When computing length, need to take into account step!=1 and step<0.
    mp_int_t len = self->stop - self->start + self->step;
    efc0:	6883      	ldr	r3, [r0, #8]
    efc2:	6842      	ldr	r2, [r0, #4]
    efc4:	1a9b      	subs	r3, r3, r2
    efc6:	68c2      	ldr	r2, [r0, #12]
    efc8:	1898      	adds	r0, r3, r2
    if (self->step > 0) {
    efca:	2a00      	cmp	r2, #0
    efcc:	dd05      	ble.n	efda <range_len+0x1a>
        len -= 1;
    efce:	3801      	subs	r0, #1
    } else {
        len += 1;
    }
    len = len / self->step;
    efd0:	fb90 f0f2 	sdiv	r0, r0, r2
    if (len < 0) {
    efd4:	2800      	cmp	r0, #0
    efd6:	db02      	blt.n	efde <range_len+0x1e>
        len = 0;
    }
    return len;
}
    efd8:	4770      	bx	lr
        len += 1;
    efda:	3001      	adds	r0, #1
    efdc:	e7f8      	b.n	efd0 <range_len+0x10>
        len = 0;
    efde:	2000      	movs	r0, #0
    return len;
    efe0:	e7fa      	b.n	efd8 <range_len+0x18>
	...

0000efe4 <range_unary_op>:

STATIC mp_obj_t range_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    efe4:	b510      	push	{r4, lr}
    efe6:	4604      	mov	r4, r0
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
    mp_int_t len = range_len(self);
    efe8:	4608      	mov	r0, r1
    efea:	f7ff ffe9 	bl	efc0 <range_len>
    switch (op) {
    efee:	2c04      	cmp	r4, #4
    eff0:	d003      	beq.n	effa <range_unary_op+0x16>
    eff2:	2c05      	cmp	r4, #5
    eff4:	d005      	beq.n	f002 <range_unary_op+0x1e>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(len > 0);
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
        default: return MP_OBJ_NULL; // op not supported
    eff6:	2000      	movs	r0, #0
    eff8:	e006      	b.n	f008 <range_unary_op+0x24>
    effa:	2800      	cmp	r0, #0
    effc:	dd05      	ble.n	f00a <range_unary_op+0x26>
    effe:	4804      	ldr	r0, [pc, #16]	; (f010 <range_unary_op+0x2c>)
    f000:	e002      	b.n	f008 <range_unary_op+0x24>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
    f002:	0040      	lsls	r0, r0, #1
    f004:	f040 0001 	orr.w	r0, r0, #1
    }
}
    f008:	bd10      	pop	{r4, pc}
    f00a:	4802      	ldr	r0, [pc, #8]	; (f014 <range_unary_op+0x30>)
    f00c:	e7fc      	b.n	f008 <range_unary_op+0x24>
    f00e:	bf00      	nop
    f010:	00025f4c 	.word	0x00025f4c
    f014:	00025f44 	.word	0x00025f44

0000f018 <range_getiter>:
    } else {
        return MP_OBJ_NULL; // op not supported
    }
}

STATIC mp_obj_t range_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    f018:	b508      	push	{r3, lr}
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
    return mp_obj_new_range_iterator(o->start, o->stop, o->step, iter_buf);
    f01a:	460b      	mov	r3, r1
    f01c:	68c2      	ldr	r2, [r0, #12]
    f01e:	6881      	ldr	r1, [r0, #8]
    f020:	6840      	ldr	r0, [r0, #4]
    f022:	f7ff ffc1 	bl	efa8 <mp_obj_new_range_iterator>
}
    f026:	bd08      	pop	{r3, pc}

0000f028 <range_subscr>:
    if (value == MP_OBJ_SENTINEL) {
    f028:	2a08      	cmp	r2, #8
    f02a:	d112      	bne.n	f052 <range_subscr+0x2a>
STATIC mp_obj_t range_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    f02c:	b538      	push	{r3, r4, r5, lr}
    f02e:	460d      	mov	r5, r1
    f030:	4604      	mov	r4, r0
        mp_int_t len = range_len(self);
    f032:	f7ff ffc5 	bl	efc0 <range_len>
        size_t index_val = mp_get_index(self->base.type, len, index, false);
    f036:	2300      	movs	r3, #0
    f038:	462a      	mov	r2, r5
    f03a:	4601      	mov	r1, r0
    f03c:	6820      	ldr	r0, [r4, #0]
    f03e:	f7fc f81d 	bl	b07c <mp_get_index>
        return MP_OBJ_NEW_SMALL_INT(self->start + index_val * self->step);
    f042:	6862      	ldr	r2, [r4, #4]
    f044:	68e3      	ldr	r3, [r4, #12]
    f046:	fb00 2003 	mla	r0, r0, r3, r2
    f04a:	0040      	lsls	r0, r0, #1
    f04c:	f040 0001 	orr.w	r0, r0, #1
}
    f050:	bd38      	pop	{r3, r4, r5, pc}
        return MP_OBJ_NULL; // op not supported
    f052:	2000      	movs	r0, #0
}
    f054:	4770      	bx	lr

0000f056 <range_attr>:


#if MICROPY_PY_BUILTINS_RANGE_ATTRS
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
    if (dest[0] != MP_OBJ_NULL) {
    f056:	6813      	ldr	r3, [r2, #0]
    f058:	b103      	cbz	r3, f05c <range_attr+0x6>
    f05a:	4770      	bx	lr
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
    f05c:	b510      	push	{r4, lr}
    f05e:	4614      	mov	r4, r2
        // not load attribute
        return;
    }
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
    if (attr == MP_QSTR_start) {
    f060:	f240 2342 	movw	r3, #578	; 0x242
    f064:	4299      	cmp	r1, r3
    f066:	d007      	beq.n	f078 <range_attr+0x22>
        dest[0] = mp_obj_new_int(o->start);
    } else if (attr == MP_QSTR_stop) {
    f068:	f240 2349 	movw	r3, #585	; 0x249
    f06c:	4299      	cmp	r1, r3
    f06e:	d008      	beq.n	f082 <range_attr+0x2c>
        dest[0] = mp_obj_new_int(o->stop);
    } else if (attr == MP_QSTR_step) {
    f070:	f5b1 7f12 	cmp.w	r1, #584	; 0x248
    f074:	d00a      	beq.n	f08c <range_attr+0x36>
        dest[0] = mp_obj_new_int(o->step);
    }
}
    f076:	bd10      	pop	{r4, pc}
        dest[0] = mp_obj_new_int(o->start);
    f078:	6840      	ldr	r0, [r0, #4]
    f07a:	f7fe ff5e 	bl	df3a <mp_obj_new_int>
    f07e:	6020      	str	r0, [r4, #0]
    f080:	e7f9      	b.n	f076 <range_attr+0x20>
        dest[0] = mp_obj_new_int(o->stop);
    f082:	6880      	ldr	r0, [r0, #8]
    f084:	f7fe ff59 	bl	df3a <mp_obj_new_int>
    f088:	6020      	str	r0, [r4, #0]
    f08a:	e7f4      	b.n	f076 <range_attr+0x20>
        dest[0] = mp_obj_new_int(o->step);
    f08c:	68c0      	ldr	r0, [r0, #12]
    f08e:	f7fe ff54 	bl	df3a <mp_obj_new_int>
    f092:	6020      	str	r0, [r4, #0]
    f094:	e7ef      	b.n	f076 <range_attr+0x20>
	...

0000f098 <range_make_new>:
STATIC mp_obj_t range_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f09c:	b082      	sub	sp, #8
    f09e:	4680      	mov	r8, r0
    f0a0:	460d      	mov	r5, r1
    f0a2:	4611      	mov	r1, r2
    f0a4:	461f      	mov	r7, r3
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
    f0a6:	2600      	movs	r6, #0
    f0a8:	9600      	str	r6, [sp, #0]
    f0aa:	2303      	movs	r3, #3
    f0ac:	2201      	movs	r2, #1
    f0ae:	4628      	mov	r0, r5
    f0b0:	f7fb fb32 	bl	a718 <mp_arg_check_num>
    mp_obj_range_t *o = m_new_obj(mp_obj_range_t);
    f0b4:	2010      	movs	r0, #16
    f0b6:	f7f1 fc01 	bl	8bc <m_malloc>
    f0ba:	4604      	mov	r4, r0
    o->base.type = type;
    f0bc:	f8c0 8000 	str.w	r8, [r0]
    o->start = 0;
    f0c0:	6046      	str	r6, [r0, #4]
    o->step = 1;
    f0c2:	2301      	movs	r3, #1
    f0c4:	60c3      	str	r3, [r0, #12]
    if (n_args == 1) {
    f0c6:	429d      	cmp	r5, r3
    f0c8:	d00d      	beq.n	f0e6 <range_make_new+0x4e>
        o->start = mp_obj_get_int(args[0]);
    f0ca:	6838      	ldr	r0, [r7, #0]
    f0cc:	f7fb fe7e 	bl	adcc <mp_obj_get_int>
    f0d0:	6060      	str	r0, [r4, #4]
        o->stop = mp_obj_get_int(args[1]);
    f0d2:	6878      	ldr	r0, [r7, #4]
    f0d4:	f7fb fe7a 	bl	adcc <mp_obj_get_int>
    f0d8:	60a0      	str	r0, [r4, #8]
        if (n_args == 3) {
    f0da:	2d03      	cmp	r5, #3
    f0dc:	d008      	beq.n	f0f0 <range_make_new+0x58>
}
    f0de:	4620      	mov	r0, r4
    f0e0:	b002      	add	sp, #8
    f0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        o->stop = mp_obj_get_int(args[0]);
    f0e6:	6838      	ldr	r0, [r7, #0]
    f0e8:	f7fb fe70 	bl	adcc <mp_obj_get_int>
    f0ec:	60a0      	str	r0, [r4, #8]
    f0ee:	e7f6      	b.n	f0de <range_make_new+0x46>
            o->step = mp_obj_get_int(args[2]);
    f0f0:	68b8      	ldr	r0, [r7, #8]
    f0f2:	f7fb fe6b 	bl	adcc <mp_obj_get_int>
    f0f6:	60e0      	str	r0, [r4, #12]
            if (o->step == 0) {
    f0f8:	2800      	cmp	r0, #0
    f0fa:	d1f0      	bne.n	f0de <range_make_new+0x46>
                mp_raise_ValueError("zero step");
    f0fc:	4801      	ldr	r0, [pc, #4]	; (f104 <range_make_new+0x6c>)
    f0fe:	f7fb f8d3 	bl	a2a8 <mp_raise_ValueError>
    f102:	bf00      	nop
    f104:	00027c6c 	.word	0x00027c6c

0000f108 <range_print>:
STATIC void range_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    f108:	b538      	push	{r3, r4, r5, lr}
    f10a:	4605      	mov	r5, r0
    f10c:	460c      	mov	r4, r1
    mp_printf(print, "range(" INT_FMT ", " INT_FMT "", self->start, self->stop);
    f10e:	688b      	ldr	r3, [r1, #8]
    f110:	684a      	ldr	r2, [r1, #4]
    f112:	4908      	ldr	r1, [pc, #32]	; (f134 <range_print+0x2c>)
    f114:	f7f2 ffaa 	bl	206c <mp_printf>
    if (self->step == 1) {
    f118:	68e2      	ldr	r2, [r4, #12]
    f11a:	2a01      	cmp	r2, #1
    f11c:	d004      	beq.n	f128 <range_print+0x20>
        mp_printf(print, ", " INT_FMT ")", self->step);
    f11e:	4906      	ldr	r1, [pc, #24]	; (f138 <range_print+0x30>)
    f120:	4628      	mov	r0, r5
    f122:	f7f2 ffa3 	bl	206c <mp_printf>
}
    f126:	bd38      	pop	{r3, r4, r5, pc}
        mp_print_str(print, ")");
    f128:	4904      	ldr	r1, [pc, #16]	; (f13c <range_print+0x34>)
    f12a:	4628      	mov	r0, r5
    f12c:	f7f2 fc07 	bl	193e <mp_print_str>
    f130:	e7f9      	b.n	f126 <range_print+0x1e>
    f132:	bf00      	nop
    f134:	00027c78 	.word	0x00027c78
    f138:	00027c88 	.word	0x00027c88
    f13c:	000272a0 	.word	0x000272a0

0000f140 <singleton_print>:
typedef struct _mp_obj_singleton_t {
    mp_obj_base_t base;
    qstr name;
} mp_obj_singleton_t;

STATIC void singleton_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    f140:	b508      	push	{r3, lr}
    (void)kind;
    mp_obj_singleton_t *self = MP_OBJ_TO_PTR(self_in);
    mp_printf(print, "%q", self->name);
    f142:	684a      	ldr	r2, [r1, #4]
    f144:	4901      	ldr	r1, [pc, #4]	; (f14c <singleton_print+0xc>)
    f146:	f7f2 ff91 	bl	206c <mp_printf>
}
    f14a:	bd08      	pop	{r3, pc}
    f14c:	00027bf0 	.word	0x00027bf0

0000f150 <str_to_int>:
#endif

// Takes an int arg, but only parses unsigned numbers, and only changes
// *num if at least one digit was parsed.
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
    if (str < top && '0' <= *str && *str <= '9') {
    f150:	4288      	cmp	r0, r1
    f152:	d21a      	bcs.n	f18a <str_to_int+0x3a>
    f154:	7803      	ldrb	r3, [r0, #0]
    f156:	2b2f      	cmp	r3, #47	; 0x2f
    f158:	d917      	bls.n	f18a <str_to_int+0x3a>
    f15a:	2b39      	cmp	r3, #57	; 0x39
    f15c:	d815      	bhi.n	f18a <str_to_int+0x3a>
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
    f15e:	b410      	push	{r4}
        *num = 0;
    f160:	2300      	movs	r3, #0
    f162:	6013      	str	r3, [r2, #0]
        do {
            *num = *num * 10 + (*str - '0');
    f164:	6813      	ldr	r3, [r2, #0]
    f166:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f16a:	005c      	lsls	r4, r3, #1
    f16c:	f810 3b01 	ldrb.w	r3, [r0], #1
    f170:	3b30      	subs	r3, #48	; 0x30
    f172:	441c      	add	r4, r3
    f174:	6014      	str	r4, [r2, #0]
            str++;
        }
        while (str < top && '0' <= *str && *str <= '9');
    f176:	4281      	cmp	r1, r0
    f178:	d904      	bls.n	f184 <str_to_int+0x34>
    f17a:	7803      	ldrb	r3, [r0, #0]
    f17c:	2b2f      	cmp	r3, #47	; 0x2f
    f17e:	d901      	bls.n	f184 <str_to_int+0x34>
    f180:	2b39      	cmp	r3, #57	; 0x39
    f182:	d9ef      	bls.n	f164 <str_to_int+0x14>
    }
    return str;
}
    f184:	f85d 4b04 	ldr.w	r4, [sp], #4
    f188:	4770      	bx	lr
    f18a:	4770      	bx	lr

0000f18c <arg_looks_integer>:
STATIC bool istype(char ch) {
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
}

STATIC bool arg_looks_integer(mp_obj_t arg) {
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
    f18c:	f010 0203 	ands.w	r2, r0, #3
    f190:	d103      	bne.n	f19a <arg_looks_integer+0xe>
    f192:	6801      	ldr	r1, [r0, #0]
    f194:	4b0a      	ldr	r3, [pc, #40]	; (f1c0 <arg_looks_integer+0x34>)
    f196:	4299      	cmp	r1, r3
    f198:	d009      	beq.n	f1ae <arg_looks_integer+0x22>
    f19a:	f010 0301 	ands.w	r3, r0, #1
    f19e:	d108      	bne.n	f1b2 <arg_looks_integer+0x26>
    f1a0:	b942      	cbnz	r2, f1b4 <arg_looks_integer+0x28>
    f1a2:	6801      	ldr	r1, [r0, #0]
    f1a4:	4b07      	ldr	r3, [pc, #28]	; (f1c4 <arg_looks_integer+0x38>)
    f1a6:	4299      	cmp	r1, r3
    f1a8:	d007      	beq.n	f1ba <arg_looks_integer+0x2e>
    f1aa:	4613      	mov	r3, r2
    f1ac:	e002      	b.n	f1b4 <arg_looks_integer+0x28>
    f1ae:	2301      	movs	r3, #1
    f1b0:	e000      	b.n	f1b4 <arg_looks_integer+0x28>
    f1b2:	2301      	movs	r3, #1
}
    f1b4:	f003 0001 	and.w	r0, r3, #1
    f1b8:	4770      	bx	lr
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
    f1ba:	2301      	movs	r3, #1
    f1bc:	e7fa      	b.n	f1b4 <arg_looks_integer+0x28>
    f1be:	bf00      	nop
    f1c0:	00025f54 	.word	0x00025f54
    f1c4:	00027498 	.word	0x00027498

0000f1c8 <arg_looks_numeric>:

STATIC bool arg_looks_numeric(mp_obj_t arg) {
    f1c8:	b510      	push	{r4, lr}
    f1ca:	4604      	mov	r4, r0
    return arg_looks_integer(arg)
    f1cc:	f7ff ffde 	bl	f18c <arg_looks_integer>
#if MICROPY_PY_BUILTINS_FLOAT
        || mp_obj_is_float(arg)
    f1d0:	b940      	cbnz	r0, f1e4 <arg_looks_numeric+0x1c>
    f1d2:	f014 0003 	ands.w	r0, r4, #3
    f1d6:	d109      	bne.n	f1ec <arg_looks_numeric+0x24>
    f1d8:	6822      	ldr	r2, [r4, #0]
    f1da:	4b05      	ldr	r3, [pc, #20]	; (f1f0 <arg_looks_numeric+0x28>)
    f1dc:	429a      	cmp	r2, r3
    f1de:	d102      	bne.n	f1e6 <arg_looks_numeric+0x1e>
    f1e0:	2001      	movs	r0, #1
    f1e2:	e000      	b.n	f1e6 <arg_looks_numeric+0x1e>
    f1e4:	2001      	movs	r0, #1
#endif
    ;
}
    f1e6:	f000 0001 	and.w	r0, r0, #1
    f1ea:	bd10      	pop	{r4, pc}
        || mp_obj_is_float(arg)
    f1ec:	2000      	movs	r0, #0
    f1ee:	e7fa      	b.n	f1e6 <arg_looks_numeric+0x1e>
    f1f0:	00026d90 	.word	0x00026d90

0000f1f4 <mp_obj_new_str_iterator>:
}

STATIC mp_obj_t mp_obj_new_str_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
    o->base.type = &mp_type_polymorph_iter;
    f1f4:	4b04      	ldr	r3, [pc, #16]	; (f208 <mp_obj_new_str_iterator+0x14>)
    f1f6:	600b      	str	r3, [r1, #0]
    o->iternext = str_it_iternext;
    f1f8:	4b04      	ldr	r3, [pc, #16]	; (f20c <mp_obj_new_str_iterator+0x18>)
    f1fa:	604b      	str	r3, [r1, #4]
    o->str = str;
    f1fc:	6088      	str	r0, [r1, #8]
    o->cur = 0;
    f1fe:	2300      	movs	r3, #0
    f200:	60cb      	str	r3, [r1, #12]
    return MP_OBJ_FROM_PTR(o);
}
    f202:	4608      	mov	r0, r1
    f204:	4770      	bx	lr
    f206:	bf00      	nop
    f208:	00027b04 	.word	0x00027b04
    f20c:	0000f8a5 	.word	0x0000f8a5

0000f210 <mp_obj_new_bytes_iterator>:
}

mp_obj_t mp_obj_new_bytes_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
    o->base.type = &mp_type_polymorph_iter;
    f210:	4b04      	ldr	r3, [pc, #16]	; (f224 <mp_obj_new_bytes_iterator+0x14>)
    f212:	600b      	str	r3, [r1, #0]
    o->iternext = bytes_it_iternext;
    f214:	4b04      	ldr	r3, [pc, #16]	; (f228 <mp_obj_new_bytes_iterator+0x18>)
    f216:	604b      	str	r3, [r1, #4]
    o->str = str;
    f218:	6088      	str	r0, [r1, #8]
    o->cur = 0;
    f21a:	2300      	movs	r3, #0
    f21c:	60cb      	str	r3, [r1, #12]
    return MP_OBJ_FROM_PTR(o);
}
    f21e:	4608      	mov	r0, r1
    f220:	4770      	bx	lr
    f222:	bf00      	nop
    f224:	00027b04 	.word	0x00027b04
    f228:	0000f26f 	.word	0x0000f26f

0000f22c <mp_obj_str_get_buffer>:
    if (flags == MP_BUFFER_READ) {
    f22c:	2a01      	cmp	r2, #1
    f22e:	d007      	beq.n	f240 <mp_obj_str_get_buffer+0x14>
        bufinfo->buf = NULL;
    f230:	2300      	movs	r3, #0
    f232:	600b      	str	r3, [r1, #0]
        bufinfo->len = 0;
    f234:	604b      	str	r3, [r1, #4]
        bufinfo->typecode = -1;
    f236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f23a:	608b      	str	r3, [r1, #8]
        return 1;
    f23c:	2001      	movs	r0, #1
}
    f23e:	4770      	bx	lr
mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    f240:	b510      	push	{r4, lr}
    f242:	b082      	sub	sp, #8
    f244:	460c      	mov	r4, r1
    { return ((((mp_int_t)(o)) & 3) == 2); }
    f246:	f000 0303 	and.w	r3, r0, #3
        GET_STR_DATA_LEN(self_in, str_data, str_len);
    f24a:	2b02      	cmp	r3, #2
    f24c:	d00a      	beq.n	f264 <mp_obj_str_get_buffer+0x38>
    f24e:	6883      	ldr	r3, [r0, #8]
    f250:	9301      	str	r3, [sp, #4]
    f252:	68c0      	ldr	r0, [r0, #12]
        bufinfo->buf = (void*)str_data;
    f254:	6020      	str	r0, [r4, #0]
        bufinfo->len = str_len;
    f256:	9b01      	ldr	r3, [sp, #4]
    f258:	6063      	str	r3, [r4, #4]
        bufinfo->typecode = 'B'; // bytes should be unsigned, so should unicode byte-access
    f25a:	2342      	movs	r3, #66	; 0x42
    f25c:	60a3      	str	r3, [r4, #8]
        return 0;
    f25e:	2000      	movs	r0, #0
}
    f260:	b002      	add	sp, #8
    f262:	bd10      	pop	{r4, pc}
        GET_STR_DATA_LEN(self_in, str_data, str_len);
    f264:	a901      	add	r1, sp, #4
    f266:	0880      	lsrs	r0, r0, #2
    f268:	f7f2 fa18 	bl	169c <qstr_data>
    f26c:	e7f2      	b.n	f254 <mp_obj_str_get_buffer+0x28>

0000f26e <bytes_it_iternext>:
STATIC mp_obj_t bytes_it_iternext(mp_obj_t self_in) {
    f26e:	b510      	push	{r4, lr}
    f270:	b082      	sub	sp, #8
    f272:	4604      	mov	r4, r0
    GET_STR_DATA_LEN(self->str, str, len);
    f274:	6880      	ldr	r0, [r0, #8]
    f276:	f000 0303 	and.w	r3, r0, #3
    f27a:	2b02      	cmp	r3, #2
    f27c:	d00e      	beq.n	f29c <bytes_it_iternext+0x2e>
    f27e:	6883      	ldr	r3, [r0, #8]
    f280:	9301      	str	r3, [sp, #4]
    f282:	68c0      	ldr	r0, [r0, #12]
    if (self->cur < len) {
    f284:	68e3      	ldr	r3, [r4, #12]
    f286:	9a01      	ldr	r2, [sp, #4]
    f288:	4293      	cmp	r3, r2
    f28a:	d20c      	bcs.n	f2a6 <bytes_it_iternext+0x38>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(str[self->cur]);
    f28c:	5cc0      	ldrb	r0, [r0, r3]
    f28e:	0040      	lsls	r0, r0, #1
    f290:	f040 0001 	orr.w	r0, r0, #1
        self->cur += 1;
    f294:	3301      	adds	r3, #1
    f296:	60e3      	str	r3, [r4, #12]
}
    f298:	b002      	add	sp, #8
    f29a:	bd10      	pop	{r4, pc}
    GET_STR_DATA_LEN(self->str, str, len);
    f29c:	a901      	add	r1, sp, #4
    f29e:	0880      	lsrs	r0, r0, #2
    f2a0:	f7f2 f9fc 	bl	169c <qstr_data>
    f2a4:	e7ee      	b.n	f284 <bytes_it_iternext+0x16>
        return MP_OBJ_STOP_ITERATION;
    f2a6:	2004      	movs	r0, #4
    f2a8:	e7f6      	b.n	f298 <bytes_it_iternext+0x2a>
	...

0000f2ac <bad_implicit_conversion>:
STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in) {
    f2ac:	b508      	push	{r3, lr}
        const qstr src_name = mp_obj_get_type(self_in)->name;
    f2ae:	f7fb fc65 	bl	ab7c <mp_obj_get_type>
    f2b2:	6842      	ldr	r2, [r0, #4]
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
    f2b4:	f240 234b 	movw	r3, #587	; 0x24b
    f2b8:	429a      	cmp	r2, r3
    f2ba:	d107      	bne.n	f2cc <bad_implicit_conversion+0x20>
    f2bc:	f44f 73b7 	mov.w	r3, #366	; 0x16e
    f2c0:	4904      	ldr	r1, [pc, #16]	; (f2d4 <bad_implicit_conversion+0x28>)
    f2c2:	4805      	ldr	r0, [pc, #20]	; (f2d8 <bad_implicit_conversion+0x2c>)
    f2c4:	f7fd fc02 	bl	cacc <mp_obj_new_exception_msg_varg>
    f2c8:	f7f1 fada 	bl	880 <nlr_jump>
    f2cc:	f240 234b 	movw	r3, #587	; 0x24b
    f2d0:	e7f6      	b.n	f2c0 <bad_implicit_conversion+0x14>
    f2d2:	bf00      	nop
    f2d4:	00027d58 	.word	0x00027d58
    f2d8:	00026c84 	.word	0x00026c84

0000f2dc <arg_as_int>:
    if (mp_obj_is_float(arg)) {
    f2dc:	f010 0f03 	tst.w	r0, #3
    f2e0:	d10a      	bne.n	f2f8 <arg_as_int+0x1c>
STATIC mp_obj_t arg_as_int(mp_obj_t arg) {
    f2e2:	b508      	push	{r3, lr}
    if (mp_obj_is_float(arg)) {
    f2e4:	6802      	ldr	r2, [r0, #0]
    f2e6:	4b05      	ldr	r3, [pc, #20]	; (f2fc <arg_as_int+0x20>)
    f2e8:	429a      	cmp	r2, r3
    f2ea:	d000      	beq.n	f2ee <arg_as_int+0x12>
}
    f2ec:	bd08      	pop	{r3, pc}
        return mp_obj_new_int_from_float(mp_obj_float_get(arg));
    f2ee:	f7fd fdc9 	bl	ce84 <mp_obj_float_get>
    f2f2:	f7fe fb65 	bl	d9c0 <mp_obj_new_int_from_float>
    f2f6:	e7f9      	b.n	f2ec <arg_as_int+0x10>
}
    f2f8:	4770      	bx	lr
    f2fa:	bf00      	nop
    f2fc:	00026d90 	.word	0x00026d90

0000f300 <isalignment>:
    return ch && strchr("<>=^", ch) != NULL;
    f300:	b138      	cbz	r0, f312 <isalignment+0x12>
STATIC bool isalignment(char ch) {
    f302:	b508      	push	{r3, lr}
    f304:	4601      	mov	r1, r0
    return ch && strchr("<>=^", ch) != NULL;
    f306:	4804      	ldr	r0, [pc, #16]	; (f318 <isalignment+0x18>)
    f308:	f00c fb5c 	bl	1b9c4 <strchr>
    f30c:	b100      	cbz	r0, f310 <isalignment+0x10>
    f30e:	2001      	movs	r0, #1
}
    f310:	bd08      	pop	{r3, pc}
    return ch && strchr("<>=^", ch) != NULL;
    f312:	2000      	movs	r0, #0
}
    f314:	4770      	bx	lr
    f316:	bf00      	nop
    f318:	00027dbc 	.word	0x00027dbc

0000f31c <istype>:
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
    f31c:	b138      	cbz	r0, f32e <istype+0x12>
STATIC bool istype(char ch) {
    f31e:	b508      	push	{r3, lr}
    f320:	4601      	mov	r1, r0
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
    f322:	4804      	ldr	r0, [pc, #16]	; (f334 <istype+0x18>)
    f324:	f00c fb4e 	bl	1b9c4 <strchr>
    f328:	b100      	cbz	r0, f32c <istype+0x10>
    f32a:	2001      	movs	r0, #1
}
    f32c:	bd08      	pop	{r3, pc}
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
    f32e:	2000      	movs	r0, #0
}
    f330:	4770      	bx	lr
    f332:	bf00      	nop
    f334:	00027dc4 	.word	0x00027dc4

0000f338 <str_uni_istype>:
STATIC mp_obj_t str_uni_istype(bool (*f)(unichar), mp_obj_t self_in) {
    f338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f33c:	b082      	sub	sp, #8
    f33e:	4606      	mov	r6, r0
    f340:	4608      	mov	r0, r1
    f342:	f001 0303 	and.w	r3, r1, #3
    GET_STR_DATA_LEN(self_in, self_data, self_len);
    f346:	2b02      	cmp	r3, #2
    f348:	d00d      	beq.n	f366 <str_uni_istype+0x2e>
    f34a:	688b      	ldr	r3, [r1, #8]
    f34c:	9301      	str	r3, [sp, #4]
    f34e:	68cc      	ldr	r4, [r1, #12]
    if (self_len == 0) {
    f350:	9b01      	ldr	r3, [sp, #4]
    f352:	2b00      	cmp	r3, #0
    f354:	d03a      	beq.n	f3cc <str_uni_istype+0x94>
    if (f != unichar_isupper && f != unichar_islower) {
    f356:	4b1f      	ldr	r3, [pc, #124]	; (f3d4 <str_uni_istype+0x9c>)
    f358:	429e      	cmp	r6, r3
    f35a:	d02d      	beq.n	f3b8 <str_uni_istype+0x80>
    f35c:	4b1e      	ldr	r3, [pc, #120]	; (f3d8 <str_uni_istype+0xa0>)
    f35e:	429e      	cmp	r6, r3
    f360:	d007      	beq.n	f372 <str_uni_istype+0x3a>
        for (size_t i = 0; i < self_len; i++) {
    f362:	2500      	movs	r5, #0
    f364:	e00a      	b.n	f37c <str_uni_istype+0x44>
    GET_STR_DATA_LEN(self_in, self_data, self_len);
    f366:	a901      	add	r1, sp, #4
    f368:	0880      	lsrs	r0, r0, #2
    f36a:	f7f2 f997 	bl	169c <qstr_data>
    f36e:	4604      	mov	r4, r0
    f370:	e7ee      	b.n	f350 <str_uni_istype+0x18>
    f372:	2500      	movs	r5, #0
    f374:	46a8      	mov	r8, r5
    f376:	e00f      	b.n	f398 <str_uni_istype+0x60>
        for (size_t i = 0; i < self_len; i++) {
    f378:	3501      	adds	r5, #1
            if (!f(*self_data++)) {
    f37a:	463c      	mov	r4, r7
        for (size_t i = 0; i < self_len; i++) {
    f37c:	9b01      	ldr	r3, [sp, #4]
    f37e:	42ab      	cmp	r3, r5
    f380:	d906      	bls.n	f390 <str_uni_istype+0x58>
            if (!f(*self_data++)) {
    f382:	1c67      	adds	r7, r4, #1
    f384:	7820      	ldrb	r0, [r4, #0]
    f386:	47b0      	blx	r6
    f388:	2800      	cmp	r0, #0
    f38a:	d1f5      	bne.n	f378 <str_uni_istype+0x40>
                return mp_const_false;
    f38c:	4813      	ldr	r0, [pc, #76]	; (f3dc <str_uni_istype+0xa4>)
    f38e:	e01e      	b.n	f3ce <str_uni_istype+0x96>
    return mp_const_true;
    f390:	4813      	ldr	r0, [pc, #76]	; (f3e0 <str_uni_istype+0xa8>)
    f392:	e01c      	b.n	f3ce <str_uni_istype+0x96>
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
    f394:	3501      	adds	r5, #1
            if (unichar_isalpha(*self_data++)) {
    f396:	463c      	mov	r4, r7
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
    f398:	9b01      	ldr	r3, [sp, #4]
    f39a:	42ab      	cmp	r3, r5
    f39c:	d90f      	bls.n	f3be <str_uni_istype+0x86>
            if (unichar_isalpha(*self_data++)) {
    f39e:	1c67      	adds	r7, r4, #1
    f3a0:	7820      	ldrb	r0, [r4, #0]
    f3a2:	f7f2 fe81 	bl	20a8 <unichar_isalpha>
    f3a6:	2800      	cmp	r0, #0
    f3a8:	d0f4      	beq.n	f394 <str_uni_istype+0x5c>
                if (!f(*(self_data - 1))) { // -1 because we already incremented above
    f3aa:	7820      	ldrb	r0, [r4, #0]
    f3ac:	47b0      	blx	r6
    f3ae:	4680      	mov	r8, r0
    f3b0:	2800      	cmp	r0, #0
    f3b2:	d1ef      	bne.n	f394 <str_uni_istype+0x5c>
                    return mp_const_false;
    f3b4:	4809      	ldr	r0, [pc, #36]	; (f3dc <str_uni_istype+0xa4>)
    f3b6:	e00a      	b.n	f3ce <str_uni_istype+0x96>
    f3b8:	2500      	movs	r5, #0
    f3ba:	46a8      	mov	r8, r5
    f3bc:	e7ec      	b.n	f398 <str_uni_istype+0x60>
        if (!contains_alpha) {
    f3be:	f1b8 0f00 	cmp.w	r8, #0
    f3c2:	d001      	beq.n	f3c8 <str_uni_istype+0x90>
    return mp_const_true;
    f3c4:	4806      	ldr	r0, [pc, #24]	; (f3e0 <str_uni_istype+0xa8>)
    f3c6:	e002      	b.n	f3ce <str_uni_istype+0x96>
            return mp_const_false;
    f3c8:	4804      	ldr	r0, [pc, #16]	; (f3dc <str_uni_istype+0xa4>)
    f3ca:	e000      	b.n	f3ce <str_uni_istype+0x96>
        return mp_const_false; // default to False for empty str
    f3cc:	4803      	ldr	r0, [pc, #12]	; (f3dc <str_uni_istype+0xa4>)
}
    f3ce:	b002      	add	sp, #8
    f3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3d4:	00002131 	.word	0x00002131
    f3d8:	00002151 	.word	0x00002151
    f3dc:	00025f44 	.word	0x00025f44
    f3e0:	00025f4c 	.word	0x00025f4c

0000f3e4 <str_isspace>:
STATIC mp_obj_t str_isspace(mp_obj_t self_in) {
    f3e4:	b508      	push	{r3, lr}
    return str_uni_istype(unichar_isspace, self_in);
    f3e6:	4601      	mov	r1, r0
    f3e8:	4801      	ldr	r0, [pc, #4]	; (f3f0 <str_isspace+0xc>)
    f3ea:	f7ff ffa5 	bl	f338 <str_uni_istype>
}
    f3ee:	bd08      	pop	{r3, pc}
    f3f0:	00002089 	.word	0x00002089

0000f3f4 <str_isalpha>:
STATIC mp_obj_t str_isalpha(mp_obj_t self_in) {
    f3f4:	b508      	push	{r3, lr}
    return str_uni_istype(unichar_isalpha, self_in);
    f3f6:	4601      	mov	r1, r0
    f3f8:	4801      	ldr	r0, [pc, #4]	; (f400 <str_isalpha+0xc>)
    f3fa:	f7ff ff9d 	bl	f338 <str_uni_istype>
}
    f3fe:	bd08      	pop	{r3, pc}
    f400:	000020a9 	.word	0x000020a9

0000f404 <str_isdigit>:
STATIC mp_obj_t str_isdigit(mp_obj_t self_in) {
    f404:	b508      	push	{r3, lr}
    return str_uni_istype(unichar_isdigit, self_in);
    f406:	4601      	mov	r1, r0
    f408:	4801      	ldr	r0, [pc, #4]	; (f410 <str_isdigit+0xc>)
    f40a:	f7ff ff95 	bl	f338 <str_uni_istype>
}
    f40e:	bd08      	pop	{r3, pc}
    f410:	000020c9 	.word	0x000020c9

0000f414 <str_isupper>:
STATIC mp_obj_t str_isupper(mp_obj_t self_in) {
    f414:	b508      	push	{r3, lr}
    return str_uni_istype(unichar_isupper, self_in);
    f416:	4601      	mov	r1, r0
    f418:	4801      	ldr	r0, [pc, #4]	; (f420 <str_isupper+0xc>)
    f41a:	f7ff ff8d 	bl	f338 <str_uni_istype>
}
    f41e:	bd08      	pop	{r3, pc}
    f420:	00002131 	.word	0x00002131

0000f424 <str_islower>:
STATIC mp_obj_t str_islower(mp_obj_t self_in) {
    f424:	b508      	push	{r3, lr}
    return str_uni_istype(unichar_islower, self_in);
    f426:	4601      	mov	r1, r0
    f428:	4801      	ldr	r0, [pc, #4]	; (f430 <str_islower+0xc>)
    f42a:	f7ff ff85 	bl	f338 <str_uni_istype>
}
    f42e:	bd08      	pop	{r3, pc}
    f430:	00002151 	.word	0x00002151

0000f434 <mp_str_print_quoted>:
void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, bool is_bytes) {
    f434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f438:	4606      	mov	r6, r0
    f43a:	460c      	mov	r4, r1
    f43c:	461f      	mov	r7, r3
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
    f43e:	188d      	adds	r5, r1, r2
    f440:	460b      	mov	r3, r1
    bool has_double_quote = false;
    f442:	2100      	movs	r1, #0
    bool has_single_quote = false;
    f444:	4608      	mov	r0, r1
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
    f446:	e001      	b.n	f44c <mp_str_print_quoted+0x18>
            has_single_quote = true;
    f448:	2001      	movs	r0, #1
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
    f44a:	3301      	adds	r3, #1
    f44c:	b941      	cbnz	r1, f460 <mp_str_print_quoted+0x2c>
    f44e:	42ab      	cmp	r3, r5
    f450:	d206      	bcs.n	f460 <mp_str_print_quoted+0x2c>
        if (*s == '\'') {
    f452:	781a      	ldrb	r2, [r3, #0]
    f454:	2a27      	cmp	r2, #39	; 0x27
    f456:	d0f7      	beq.n	f448 <mp_str_print_quoted+0x14>
        } else if (*s == '"') {
    f458:	2a22      	cmp	r2, #34	; 0x22
    f45a:	d1f6      	bne.n	f44a <mp_str_print_quoted+0x16>
            has_double_quote = true;
    f45c:	2101      	movs	r1, #1
    f45e:	e7f4      	b.n	f44a <mp_str_print_quoted+0x16>
    if (has_single_quote && !has_double_quote) {
    f460:	b118      	cbz	r0, f46a <mp_str_print_quoted+0x36>
    f462:	b151      	cbz	r1, f47a <mp_str_print_quoted+0x46>
    int quote_char = '\'';
    f464:	f04f 0827 	mov.w	r8, #39	; 0x27
    f468:	e001      	b.n	f46e <mp_str_print_quoted+0x3a>
    f46a:	f04f 0827 	mov.w	r8, #39	; 0x27
    mp_printf(print, "%c", quote_char);
    f46e:	4642      	mov	r2, r8
    f470:	4923      	ldr	r1, [pc, #140]	; (f500 <mp_str_print_quoted+0xcc>)
    f472:	4630      	mov	r0, r6
    f474:	f7f2 fdfa 	bl	206c <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
    f478:	e008      	b.n	f48c <mp_str_print_quoted+0x58>
        quote_char = '"';
    f47a:	f04f 0822 	mov.w	r8, #34	; 0x22
    f47e:	e7f6      	b.n	f46e <mp_str_print_quoted+0x3a>
            mp_printf(print, "\\%c", quote_char);
    f480:	4642      	mov	r2, r8
    f482:	4920      	ldr	r1, [pc, #128]	; (f504 <mp_str_print_quoted+0xd0>)
    f484:	4630      	mov	r0, r6
    f486:	f7f2 fdf1 	bl	206c <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
    f48a:	3401      	adds	r4, #1
    f48c:	42ac      	cmp	r4, r5
    f48e:	d230      	bcs.n	f4f2 <mp_str_print_quoted+0xbe>
        if (*s == quote_char) {
    f490:	7822      	ldrb	r2, [r4, #0]
    f492:	4542      	cmp	r2, r8
    f494:	d0f4      	beq.n	f480 <mp_str_print_quoted+0x4c>
        } else if (*s == '\\') {
    f496:	2a5c      	cmp	r2, #92	; 0x5c
    f498:	d00c      	beq.n	f4b4 <mp_str_print_quoted+0x80>
        } else if (*s >= 0x20 && *s != 0x7f && (!is_bytes || *s < 0x80)) {
    f49a:	2a1f      	cmp	r2, #31
    f49c:	d90f      	bls.n	f4be <mp_str_print_quoted+0x8a>
    f49e:	2a7f      	cmp	r2, #127	; 0x7f
    f4a0:	d00d      	beq.n	f4be <mp_str_print_quoted+0x8a>
    f4a2:	b117      	cbz	r7, f4aa <mp_str_print_quoted+0x76>
    f4a4:	f012 0f80 	tst.w	r2, #128	; 0x80
    f4a8:	d109      	bne.n	f4be <mp_str_print_quoted+0x8a>
            mp_printf(print, "%c", *s);
    f4aa:	4915      	ldr	r1, [pc, #84]	; (f500 <mp_str_print_quoted+0xcc>)
    f4ac:	4630      	mov	r0, r6
    f4ae:	f7f2 fddd 	bl	206c <mp_printf>
    f4b2:	e7ea      	b.n	f48a <mp_str_print_quoted+0x56>
            mp_print_str(print, "\\\\");
    f4b4:	4914      	ldr	r1, [pc, #80]	; (f508 <mp_str_print_quoted+0xd4>)
    f4b6:	4630      	mov	r0, r6
    f4b8:	f7f2 fa41 	bl	193e <mp_print_str>
    f4bc:	e7e5      	b.n	f48a <mp_str_print_quoted+0x56>
        } else if (*s == '\n') {
    f4be:	2a0a      	cmp	r2, #10
    f4c0:	d008      	beq.n	f4d4 <mp_str_print_quoted+0xa0>
        } else if (*s == '\r') {
    f4c2:	2a0d      	cmp	r2, #13
    f4c4:	d00b      	beq.n	f4de <mp_str_print_quoted+0xaa>
        } else if (*s == '\t') {
    f4c6:	2a09      	cmp	r2, #9
    f4c8:	d00e      	beq.n	f4e8 <mp_str_print_quoted+0xb4>
            mp_printf(print, "\\x%02x", *s);
    f4ca:	4910      	ldr	r1, [pc, #64]	; (f50c <mp_str_print_quoted+0xd8>)
    f4cc:	4630      	mov	r0, r6
    f4ce:	f7f2 fdcd 	bl	206c <mp_printf>
    f4d2:	e7da      	b.n	f48a <mp_str_print_quoted+0x56>
            mp_print_str(print, "\\n");
    f4d4:	490e      	ldr	r1, [pc, #56]	; (f510 <mp_str_print_quoted+0xdc>)
    f4d6:	4630      	mov	r0, r6
    f4d8:	f7f2 fa31 	bl	193e <mp_print_str>
    f4dc:	e7d5      	b.n	f48a <mp_str_print_quoted+0x56>
            mp_print_str(print, "\\r");
    f4de:	490d      	ldr	r1, [pc, #52]	; (f514 <mp_str_print_quoted+0xe0>)
    f4e0:	4630      	mov	r0, r6
    f4e2:	f7f2 fa2c 	bl	193e <mp_print_str>
    f4e6:	e7d0      	b.n	f48a <mp_str_print_quoted+0x56>
            mp_print_str(print, "\\t");
    f4e8:	490b      	ldr	r1, [pc, #44]	; (f518 <mp_str_print_quoted+0xe4>)
    f4ea:	4630      	mov	r0, r6
    f4ec:	f7f2 fa27 	bl	193e <mp_print_str>
    f4f0:	e7cb      	b.n	f48a <mp_str_print_quoted+0x56>
    mp_printf(print, "%c", quote_char);
    f4f2:	4642      	mov	r2, r8
    f4f4:	4902      	ldr	r1, [pc, #8]	; (f500 <mp_str_print_quoted+0xcc>)
    f4f6:	4630      	mov	r0, r6
    f4f8:	f7f2 fdb8 	bl	206c <mp_printf>
}
    f4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f500:	00020ee8 	.word	0x00020ee8
    f504:	000280ac 	.word	0x000280ac
    f508:	000280b0 	.word	0x000280b0
    f50c:	000280c0 	.word	0x000280c0
    f510:	000280b4 	.word	0x000280b4
    f514:	000280b8 	.word	0x000280b8
    f518:	000280bc 	.word	0x000280bc

0000f51c <str_print>:
STATIC void str_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    f51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f520:	b082      	sub	sp, #8
    f522:	4607      	mov	r7, r0
    f524:	460c      	mov	r4, r1
    f526:	4616      	mov	r6, r2
    f528:	f001 0503 	and.w	r5, r1, #3
    GET_STR_DATA_LEN(self_in, str_data, str_len);
    f52c:	2d02      	cmp	r5, #2
    f52e:	d00a      	beq.n	f546 <str_print+0x2a>
    f530:	688b      	ldr	r3, [r1, #8]
    f532:	9301      	str	r3, [sp, #4]
    f534:	f8d1 800c 	ldr.w	r8, [r1, #12]
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
    f538:	b95d      	cbnz	r5, f552 <str_print+0x36>
    f53a:	6822      	ldr	r2, [r4, #0]
    f53c:	4b13      	ldr	r3, [pc, #76]	; (f58c <str_print+0x70>)
    f53e:	429a      	cmp	r2, r3
    f540:	d016      	beq.n	f570 <str_print+0x54>
    f542:	2400      	movs	r4, #0
    f544:	e006      	b.n	f554 <str_print+0x38>
    GET_STR_DATA_LEN(self_in, str_data, str_len);
    f546:	a901      	add	r1, sp, #4
    f548:	08a0      	lsrs	r0, r4, #2
    f54a:	f7f2 f8a7 	bl	169c <qstr_data>
    f54e:	4680      	mov	r8, r0
    f550:	e7f2      	b.n	f538 <str_print+0x1c>
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
    f552:	2400      	movs	r4, #0
    if (kind == PRINT_RAW || (!MICROPY_PY_BUILTINS_STR_UNICODE && kind == PRINT_STR && !is_bytes)) {
    f554:	2e04      	cmp	r6, #4
    f556:	d00d      	beq.n	f574 <str_print+0x58>
    f558:	b906      	cbnz	r6, f55c <str_print+0x40>
    f55a:	b15c      	cbz	r4, f574 <str_print+0x58>
        if (is_bytes) {
    f55c:	b98c      	cbnz	r4, f582 <str_print+0x66>
        mp_str_print_quoted(print, str_data, str_len, is_bytes);
    f55e:	4623      	mov	r3, r4
    f560:	9a01      	ldr	r2, [sp, #4]
    f562:	4641      	mov	r1, r8
    f564:	4638      	mov	r0, r7
    f566:	f7ff ff65 	bl	f434 <mp_str_print_quoted>
}
    f56a:	b002      	add	sp, #8
    f56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
    f570:	2401      	movs	r4, #1
    f572:	e7ef      	b.n	f554 <str_print+0x38>
        mp_printf(print, "%.*s", str_len, str_data);
    f574:	4643      	mov	r3, r8
    f576:	9a01      	ldr	r2, [sp, #4]
    f578:	4905      	ldr	r1, [pc, #20]	; (f590 <str_print+0x74>)
    f57a:	4638      	mov	r0, r7
    f57c:	f7f2 fd76 	bl	206c <mp_printf>
    f580:	e7f3      	b.n	f56a <str_print+0x4e>
            mp_print_str(print, "b");
    f582:	4904      	ldr	r1, [pc, #16]	; (f594 <str_print+0x78>)
    f584:	4638      	mov	r0, r7
    f586:	f7f2 f9da 	bl	193e <mp_print_str>
    f58a:	e7e8      	b.n	f55e <str_print+0x42>
    f58c:	000280c8 	.word	0x000280c8
    f590:	000285a8 	.word	0x000285a8
    f594:	000229f0 	.word	0x000229f0

0000f598 <find_subbytes>:
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction) {
    f598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f59c:	f8dd 9020 	ldr.w	r9, [sp, #32]
    if (hlen >= nlen) {
    f5a0:	4299      	cmp	r1, r3
    f5a2:	d316      	bcc.n	f5d2 <find_subbytes+0x3a>
    f5a4:	461f      	mov	r7, r3
    f5a6:	4690      	mov	r8, r2
    f5a8:	4682      	mov	sl, r0
        if (direction > 0) {
    f5aa:	f1b9 0f00 	cmp.w	r9, #0
    f5ae:	dd0d      	ble.n	f5cc <find_subbytes+0x34>
            str_index_end = hlen - nlen;
    f5b0:	1ace      	subs	r6, r1, r3
            str_index = 0;
    f5b2:	2400      	movs	r4, #0
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
    f5b4:	eb0a 0504 	add.w	r5, sl, r4
    f5b8:	463a      	mov	r2, r7
    f5ba:	4641      	mov	r1, r8
    f5bc:	4628      	mov	r0, r5
    f5be:	f00c f98f 	bl	1b8e0 <memcmp>
    f5c2:	b148      	cbz	r0, f5d8 <find_subbytes+0x40>
            if (str_index == str_index_end) {
    f5c4:	42b4      	cmp	r4, r6
    f5c6:	d006      	beq.n	f5d6 <find_subbytes+0x3e>
            str_index += direction;
    f5c8:	444c      	add	r4, r9
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
    f5ca:	e7f3      	b.n	f5b4 <find_subbytes+0x1c>
            str_index = hlen - nlen;
    f5cc:	1acc      	subs	r4, r1, r3
            str_index_end = 0;
    f5ce:	2600      	movs	r6, #0
    f5d0:	e7f0      	b.n	f5b4 <find_subbytes+0x1c>
    return NULL;
    f5d2:	2500      	movs	r5, #0
    f5d4:	e000      	b.n	f5d8 <find_subbytes+0x40>
    f5d6:	2500      	movs	r5, #0
}
    f5d8:	4628      	mov	r0, r5
    f5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f5de <str_index_to_ptr>:
                             mp_obj_t index, bool is_slice) {
    f5de:	b510      	push	{r4, lr}
    f5e0:	460c      	mov	r4, r1
    f5e2:	4611      	mov	r1, r2
    f5e4:	461a      	mov	r2, r3
    size_t index_val = mp_get_index(type, self_len, index, is_slice);
    f5e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    f5ea:	f7fb fd47 	bl	b07c <mp_get_index>
}
    f5ee:	4420      	add	r0, r4
    f5f0:	bd10      	pop	{r4, pc}
	...

0000f5f4 <str_finder>:
STATIC mp_obj_t str_finder(size_t n_args, const mp_obj_t *args, int direction, bool is_index) {
    f5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5f8:	b087      	sub	sp, #28
    f5fa:	4606      	mov	r6, r0
    f5fc:	460c      	mov	r4, r1
    f5fe:	9203      	str	r2, [sp, #12]
    f600:	469a      	mov	sl, r3
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
    f602:	6808      	ldr	r0, [r1, #0]
    f604:	f7fb faba 	bl	ab7c <mp_obj_get_type>
    f608:	4681      	mov	r9, r0
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
    f60a:	6823      	ldr	r3, [r4, #0]
    f60c:	f003 0203 	and.w	r2, r3, #3
    f610:	2a02      	cmp	r2, #2
    f612:	d005      	beq.n	f620 <str_finder+0x2c>
    f614:	bb62      	cbnz	r2, f670 <str_finder+0x7c>
    f616:	681b      	ldr	r3, [r3, #0]
    f618:	699a      	ldr	r2, [r3, #24]
    f61a:	4b37      	ldr	r3, [pc, #220]	; (f6f8 <str_finder+0x104>)
    f61c:	429a      	cmp	r2, r3
    f61e:	d127      	bne.n	f670 <str_finder+0x7c>
    if (mp_obj_get_type(args[1]) != self_type) {
    f620:	6860      	ldr	r0, [r4, #4]
    f622:	f7fb faab 	bl	ab7c <mp_obj_get_type>
    f626:	4581      	cmp	r9, r0
    f628:	d129      	bne.n	f67e <str_finder+0x8a>
    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
    f62a:	6820      	ldr	r0, [r4, #0]
    f62c:	f000 0303 	and.w	r3, r0, #3
    f630:	2b02      	cmp	r3, #2
    f632:	d027      	beq.n	f684 <str_finder+0x90>
    f634:	6883      	ldr	r3, [r0, #8]
    f636:	9305      	str	r3, [sp, #20]
    f638:	6823      	ldr	r3, [r4, #0]
    f63a:	68dd      	ldr	r5, [r3, #12]
    GET_STR_DATA_LEN(args[1], needle, needle_len);
    f63c:	6860      	ldr	r0, [r4, #4]
    f63e:	f000 0303 	and.w	r3, r0, #3
    f642:	2b02      	cmp	r3, #2
    f644:	d024      	beq.n	f690 <str_finder+0x9c>
    f646:	6883      	ldr	r3, [r0, #8]
    f648:	9304      	str	r3, [sp, #16]
    f64a:	f8d0 b00c 	ldr.w	fp, [r0, #12]
    const byte *end = haystack + haystack_len;
    f64e:	9a05      	ldr	r2, [sp, #20]
    f650:	eb05 0802 	add.w	r8, r5, r2
    if (n_args >= 3 && args[2] != mp_const_none) {
    f654:	2e02      	cmp	r6, #2
    f656:	d921      	bls.n	f69c <str_finder+0xa8>
    f658:	68a3      	ldr	r3, [r4, #8]
    f65a:	4928      	ldr	r1, [pc, #160]	; (f6fc <str_finder+0x108>)
    f65c:	428b      	cmp	r3, r1
    f65e:	d036      	beq.n	f6ce <str_finder+0xda>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
    f660:	2101      	movs	r1, #1
    f662:	9100      	str	r1, [sp, #0]
    f664:	4629      	mov	r1, r5
    f666:	4648      	mov	r0, r9
    f668:	f7ff ffb9 	bl	f5de <str_index_to_ptr>
    f66c:	4607      	mov	r7, r0
    f66e:	e016      	b.n	f69e <str_finder+0xaa>
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
    f670:	4b23      	ldr	r3, [pc, #140]	; (f700 <str_finder+0x10c>)
    f672:	4a24      	ldr	r2, [pc, #144]	; (f704 <str_finder+0x110>)
    f674:	f240 21ab 	movw	r1, #683	; 0x2ab
    f678:	4823      	ldr	r0, [pc, #140]	; (f708 <str_finder+0x114>)
    f67a:	f008 ff6f 	bl	1855c <__assert_func>
        bad_implicit_conversion(args[1]);
    f67e:	6860      	ldr	r0, [r4, #4]
    f680:	f7ff fe14 	bl	f2ac <bad_implicit_conversion>
    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
    f684:	a905      	add	r1, sp, #20
    f686:	0880      	lsrs	r0, r0, #2
    f688:	f7f2 f808 	bl	169c <qstr_data>
    f68c:	4605      	mov	r5, r0
    f68e:	e7d5      	b.n	f63c <str_finder+0x48>
    GET_STR_DATA_LEN(args[1], needle, needle_len);
    f690:	a904      	add	r1, sp, #16
    f692:	0880      	lsrs	r0, r0, #2
    f694:	f7f2 f802 	bl	169c <qstr_data>
    f698:	4683      	mov	fp, r0
    f69a:	e7d8      	b.n	f64e <str_finder+0x5a>
    const byte *start = haystack;
    f69c:	462f      	mov	r7, r5
    if (n_args >= 4 && args[3] != mp_const_none) {
    f69e:	2e03      	cmp	r6, #3
    f6a0:	d90b      	bls.n	f6ba <str_finder+0xc6>
    f6a2:	68e3      	ldr	r3, [r4, #12]
    f6a4:	4a15      	ldr	r2, [pc, #84]	; (f6fc <str_finder+0x108>)
    f6a6:	4293      	cmp	r3, r2
    f6a8:	d007      	beq.n	f6ba <str_finder+0xc6>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
    f6aa:	2201      	movs	r2, #1
    f6ac:	9200      	str	r2, [sp, #0]
    f6ae:	9a05      	ldr	r2, [sp, #20]
    f6b0:	4629      	mov	r1, r5
    f6b2:	4648      	mov	r0, r9
    f6b4:	f7ff ff93 	bl	f5de <str_index_to_ptr>
    f6b8:	4680      	mov	r8, r0
    if (end < start) {
    f6ba:	4547      	cmp	r7, r8
    f6bc:	d909      	bls.n	f6d2 <str_finder+0xde>
        if (is_index) {
    f6be:	f1ba 0f00 	cmp.w	sl, #0
    f6c2:	d116      	bne.n	f6f2 <str_finder+0xfe>
            return MP_OBJ_NEW_SMALL_INT(-1);
    f6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f6c8:	b007      	add	sp, #28
    f6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const byte *start = haystack;
    f6ce:	462f      	mov	r7, r5
    f6d0:	e7e5      	b.n	f69e <str_finder+0xaa>
    const byte *p = find_subbytes(start, end - start, needle, needle_len, direction);
    f6d2:	9b03      	ldr	r3, [sp, #12]
    f6d4:	9300      	str	r3, [sp, #0]
    f6d6:	9b04      	ldr	r3, [sp, #16]
    f6d8:	465a      	mov	r2, fp
    f6da:	eba8 0107 	sub.w	r1, r8, r7
    f6de:	4638      	mov	r0, r7
    f6e0:	f7ff ff5a 	bl	f598 <find_subbytes>
    if (p == NULL) {
    f6e4:	2800      	cmp	r0, #0
    f6e6:	d0ea      	beq.n	f6be <str_finder+0xca>
        return MP_OBJ_NEW_SMALL_INT(p - haystack);
    f6e8:	1b40      	subs	r0, r0, r5
    f6ea:	0040      	lsls	r0, r0, #1
    f6ec:	f040 0001 	orr.w	r0, r0, #1
    f6f0:	e7ea      	b.n	f6c8 <str_finder+0xd4>
            mp_raise_ValueError("substring not found");
    f6f2:	4806      	ldr	r0, [pc, #24]	; (f70c <str_finder+0x118>)
    f6f4:	f7fa fdd8 	bl	a2a8 <mp_raise_ValueError>
    f6f8:	000106e5 	.word	0x000106e5
    f6fc:	00027b40 	.word	0x00027b40
    f700:	00028238 	.word	0x00028238
    f704:	00027ce0 	.word	0x00027ce0
    f708:	000282c0 	.word	0x000282c0
    f70c:	000282d4 	.word	0x000282d4

0000f710 <str_find>:
STATIC mp_obj_t str_find(size_t n_args, const mp_obj_t *args) {
    f710:	b508      	push	{r3, lr}
    return str_finder(n_args, args, 1, false);
    f712:	2300      	movs	r3, #0
    f714:	2201      	movs	r2, #1
    f716:	f7ff ff6d 	bl	f5f4 <str_finder>
}
    f71a:	bd08      	pop	{r3, pc}

0000f71c <str_rfind>:
STATIC mp_obj_t str_rfind(size_t n_args, const mp_obj_t *args) {
    f71c:	b508      	push	{r3, lr}
    return str_finder(n_args, args, -1, false);
    f71e:	2300      	movs	r3, #0
    f720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f724:	f7ff ff66 	bl	f5f4 <str_finder>
}
    f728:	bd08      	pop	{r3, pc}

0000f72a <str_index>:
STATIC mp_obj_t str_index(size_t n_args, const mp_obj_t *args) {
    f72a:	b508      	push	{r3, lr}
    return str_finder(n_args, args, 1, true);
    f72c:	2301      	movs	r3, #1
    f72e:	461a      	mov	r2, r3
    f730:	f7ff ff60 	bl	f5f4 <str_finder>
}
    f734:	bd08      	pop	{r3, pc}

0000f736 <str_rindex>:
STATIC mp_obj_t str_rindex(size_t n_args, const mp_obj_t *args) {
    f736:	b508      	push	{r3, lr}
    return str_finder(n_args, args, -1, true);
    f738:	2301      	movs	r3, #1
    f73a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f73e:	f7ff ff59 	bl	f5f4 <str_finder>
}
    f742:	bd08      	pop	{r3, pc}

0000f744 <str_count>:
STATIC mp_obj_t str_count(size_t n_args, const mp_obj_t *args) {
    f744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f748:	b084      	sub	sp, #16
    f74a:	4607      	mov	r7, r0
    f74c:	460d      	mov	r5, r1
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
    f74e:	6808      	ldr	r0, [r1, #0]
    f750:	f7fb fa14 	bl	ab7c <mp_obj_get_type>
    f754:	4682      	mov	sl, r0
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
    f756:	682b      	ldr	r3, [r5, #0]
    f758:	f003 0203 	and.w	r2, r3, #3
    f75c:	2a02      	cmp	r2, #2
    f75e:	d005      	beq.n	f76c <str_count+0x28>
    f760:	bb62      	cbnz	r2, f7bc <str_count+0x78>
    f762:	681b      	ldr	r3, [r3, #0]
    f764:	699a      	ldr	r2, [r3, #24]
    f766:	4b38      	ldr	r3, [pc, #224]	; (f848 <str_count+0x104>)
    f768:	429a      	cmp	r2, r3
    f76a:	d127      	bne.n	f7bc <str_count+0x78>
    if (mp_obj_get_type(args[1]) != self_type) {
    f76c:	6868      	ldr	r0, [r5, #4]
    f76e:	f7fb fa05 	bl	ab7c <mp_obj_get_type>
    f772:	4582      	cmp	sl, r0
    f774:	d129      	bne.n	f7ca <str_count+0x86>
    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
    f776:	6828      	ldr	r0, [r5, #0]
    f778:	f000 0303 	and.w	r3, r0, #3
    f77c:	2b02      	cmp	r3, #2
    f77e:	d027      	beq.n	f7d0 <str_count+0x8c>
    f780:	6883      	ldr	r3, [r0, #8]
    f782:	9303      	str	r3, [sp, #12]
    f784:	682b      	ldr	r3, [r5, #0]
    f786:	68de      	ldr	r6, [r3, #12]
    GET_STR_DATA_LEN(args[1], needle, needle_len);
    f788:	6868      	ldr	r0, [r5, #4]
    f78a:	f000 0303 	and.w	r3, r0, #3
    f78e:	2b02      	cmp	r3, #2
    f790:	d024      	beq.n	f7dc <str_count+0x98>
    f792:	6883      	ldr	r3, [r0, #8]
    f794:	9302      	str	r3, [sp, #8]
    f796:	f8d0 900c 	ldr.w	r9, [r0, #12]
    const byte *end = haystack + haystack_len;
    f79a:	9a03      	ldr	r2, [sp, #12]
    f79c:	eb06 0802 	add.w	r8, r6, r2
    if (n_args >= 3 && args[2] != mp_const_none) {
    f7a0:	2f02      	cmp	r7, #2
    f7a2:	d921      	bls.n	f7e8 <str_count+0xa4>
    f7a4:	68ab      	ldr	r3, [r5, #8]
    f7a6:	4929      	ldr	r1, [pc, #164]	; (f84c <str_count+0x108>)
    f7a8:	428b      	cmp	r3, r1
    f7aa:	d030      	beq.n	f80e <str_count+0xca>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
    f7ac:	2101      	movs	r1, #1
    f7ae:	9100      	str	r1, [sp, #0]
    f7b0:	4631      	mov	r1, r6
    f7b2:	4650      	mov	r0, sl
    f7b4:	f7ff ff13 	bl	f5de <str_index_to_ptr>
    f7b8:	4604      	mov	r4, r0
    f7ba:	e016      	b.n	f7ea <str_count+0xa6>
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
    f7bc:	4b24      	ldr	r3, [pc, #144]	; (f850 <str_count+0x10c>)
    f7be:	4a25      	ldr	r2, [pc, #148]	; (f854 <str_count+0x110>)
    f7c0:	f240 619c 	movw	r1, #1692	; 0x69c
    f7c4:	4824      	ldr	r0, [pc, #144]	; (f858 <str_count+0x114>)
    f7c6:	f008 fec9 	bl	1855c <__assert_func>
        bad_implicit_conversion(args[1]);
    f7ca:	6868      	ldr	r0, [r5, #4]
    f7cc:	f7ff fd6e 	bl	f2ac <bad_implicit_conversion>
    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
    f7d0:	a903      	add	r1, sp, #12
    f7d2:	0880      	lsrs	r0, r0, #2
    f7d4:	f7f1 ff62 	bl	169c <qstr_data>
    f7d8:	4606      	mov	r6, r0
    f7da:	e7d5      	b.n	f788 <str_count+0x44>
    GET_STR_DATA_LEN(args[1], needle, needle_len);
    f7dc:	a902      	add	r1, sp, #8
    f7de:	0880      	lsrs	r0, r0, #2
    f7e0:	f7f1 ff5c 	bl	169c <qstr_data>
    f7e4:	4681      	mov	r9, r0
    f7e6:	e7d8      	b.n	f79a <str_count+0x56>
    const byte *start = haystack;
    f7e8:	4634      	mov	r4, r6
    if (n_args >= 4 && args[3] != mp_const_none) {
    f7ea:	2f03      	cmp	r7, #3
    f7ec:	d90b      	bls.n	f806 <str_count+0xc2>
    f7ee:	68eb      	ldr	r3, [r5, #12]
    f7f0:	4a16      	ldr	r2, [pc, #88]	; (f84c <str_count+0x108>)
    f7f2:	4293      	cmp	r3, r2
    f7f4:	d007      	beq.n	f806 <str_count+0xc2>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
    f7f6:	2201      	movs	r2, #1
    f7f8:	9200      	str	r2, [sp, #0]
    f7fa:	9a03      	ldr	r2, [sp, #12]
    f7fc:	4631      	mov	r1, r6
    f7fe:	4650      	mov	r0, sl
    f800:	f7ff feed 	bl	f5de <str_index_to_ptr>
    f804:	4680      	mov	r8, r0
    if (needle_len == 0) {
    f806:	9f02      	ldr	r7, [sp, #8]
    f808:	b11f      	cbz	r7, f812 <str_count+0xce>
    mp_int_t num_occurrences = 0;
    f80a:	2500      	movs	r5, #0
    f80c:	e009      	b.n	f822 <str_count+0xde>
    const byte *start = haystack;
    f80e:	4634      	mov	r4, r6
    f810:	e7eb      	b.n	f7ea <str_count+0xa6>
        return MP_OBJ_NEW_SMALL_INT(utf8_charlen(start, end - start) + 1);
    f812:	eba8 0004 	sub.w	r0, r8, r4
    f816:	3001      	adds	r0, #1
    f818:	0040      	lsls	r0, r0, #1
    f81a:	f040 0001 	orr.w	r0, r0, #1
    f81e:	e010      	b.n	f842 <str_count+0xfe>
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
    f820:	3401      	adds	r4, #1
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
    f822:	19e6      	adds	r6, r4, r7
    f824:	4546      	cmp	r6, r8
    f826:	d809      	bhi.n	f83c <str_count+0xf8>
        if (memcmp(haystack_ptr, needle, needle_len) == 0) {
    f828:	463a      	mov	r2, r7
    f82a:	4649      	mov	r1, r9
    f82c:	4620      	mov	r0, r4
    f82e:	f00c f857 	bl	1b8e0 <memcmp>
    f832:	2800      	cmp	r0, #0
    f834:	d1f4      	bne.n	f820 <str_count+0xdc>
            num_occurrences++;
    f836:	3501      	adds	r5, #1
            haystack_ptr += needle_len;
    f838:	4634      	mov	r4, r6
    f83a:	e7f2      	b.n	f822 <str_count+0xde>
    return MP_OBJ_NEW_SMALL_INT(num_occurrences);
    f83c:	0068      	lsls	r0, r5, #1
    f83e:	f040 0001 	orr.w	r0, r0, #1
}
    f842:	b004      	add	sp, #16
    f844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f848:	000106e5 	.word	0x000106e5
    f84c:	00027b40 	.word	0x00027b40
    f850:	00028238 	.word	0x00028238
    f854:	00027d4c 	.word	0x00027d4c
    f858:	000282c0 	.word	0x000282c0

0000f85c <mp_obj_new_str_copy>:
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len) {
    f85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f85e:	4607      	mov	r7, r0
    f860:	460e      	mov	r6, r1
    f862:	4615      	mov	r5, r2
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
    f864:	2010      	movs	r0, #16
    f866:	f7f1 f829 	bl	8bc <m_malloc>
    f86a:	4604      	mov	r4, r0
    o->base.type = type;
    f86c:	6007      	str	r7, [r0, #0]
    o->len = len;
    f86e:	6085      	str	r5, [r0, #8]
    if (data) {
    f870:	b17e      	cbz	r6, f892 <mp_obj_new_str_copy+0x36>
        o->hash = qstr_compute_hash(data, len);
    f872:	4629      	mov	r1, r5
    f874:	4630      	mov	r0, r6
    f876:	f7f1 fe25 	bl	14c4 <qstr_compute_hash>
    f87a:	6060      	str	r0, [r4, #4]
        byte *p = m_new(byte, len + 1);
    f87c:	1c68      	adds	r0, r5, #1
    f87e:	f7f1 f81d 	bl	8bc <m_malloc>
    f882:	4607      	mov	r7, r0
        o->data = p;
    f884:	60e0      	str	r0, [r4, #12]
        memcpy(p, data, len * sizeof(byte));
    f886:	462a      	mov	r2, r5
    f888:	4631      	mov	r1, r6
    f88a:	f00b ffb3 	bl	1b7f4 <memcpy>
        p[len] = '\0'; // for now we add null for compatibility with C ASCIIZ strings
    f88e:	2300      	movs	r3, #0
    f890:	557b      	strb	r3, [r7, r5]
}
    f892:	4620      	mov	r0, r4
    f894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f896 <mp_obj_new_str_via_qstr>:
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len) {
    f896:	b508      	push	{r3, lr}
    return MP_OBJ_NEW_QSTR(qstr_from_strn(data, len));
    f898:	f7f1 fe66 	bl	1568 <qstr_from_strn>
    f89c:	0080      	lsls	r0, r0, #2
}
    f89e:	f040 0002 	orr.w	r0, r0, #2
    f8a2:	bd08      	pop	{r3, pc}

0000f8a4 <str_it_iternext>:
STATIC mp_obj_t str_it_iternext(mp_obj_t self_in) {
    f8a4:	b510      	push	{r4, lr}
    f8a6:	b082      	sub	sp, #8
    f8a8:	4604      	mov	r4, r0
    GET_STR_DATA_LEN(self->str, str, len);
    f8aa:	6880      	ldr	r0, [r0, #8]
    f8ac:	f000 0303 	and.w	r3, r0, #3
    f8b0:	2b02      	cmp	r3, #2
    f8b2:	d009      	beq.n	f8c8 <str_it_iternext+0x24>
    f8b4:	6883      	ldr	r3, [r0, #8]
    f8b6:	9301      	str	r3, [sp, #4]
    f8b8:	68c0      	ldr	r0, [r0, #12]
    if (self->cur < len) {
    f8ba:	68e3      	ldr	r3, [r4, #12]
    f8bc:	9a01      	ldr	r2, [sp, #4]
    f8be:	4293      	cmp	r3, r2
    f8c0:	d307      	bcc.n	f8d2 <str_it_iternext+0x2e>
        return MP_OBJ_STOP_ITERATION;
    f8c2:	2004      	movs	r0, #4
}
    f8c4:	b002      	add	sp, #8
    f8c6:	bd10      	pop	{r4, pc}
    GET_STR_DATA_LEN(self->str, str, len);
    f8c8:	a901      	add	r1, sp, #4
    f8ca:	0880      	lsrs	r0, r0, #2
    f8cc:	f7f1 fee6 	bl	169c <qstr_data>
    f8d0:	e7f3      	b.n	f8ba <str_it_iternext+0x16>
        mp_obj_t o_out = mp_obj_new_str_via_qstr((const char*)str + self->cur, 1);
    f8d2:	2101      	movs	r1, #1
    f8d4:	4418      	add	r0, r3
    f8d6:	f7ff ffde 	bl	f896 <mp_obj_new_str_via_qstr>
        self->cur += 1;
    f8da:	68e3      	ldr	r3, [r4, #12]
    f8dc:	3301      	adds	r3, #1
    f8de:	60e3      	str	r3, [r4, #12]
        return o_out;
    f8e0:	e7f0      	b.n	f8c4 <str_it_iternext+0x20>
	...

0000f8e4 <bytes_subscr>:
STATIC mp_obj_t bytes_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    f8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8e6:	b083      	sub	sp, #12
    f8e8:	4604      	mov	r4, r0
    f8ea:	460f      	mov	r7, r1
    f8ec:	4616      	mov	r6, r2
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    f8ee:	f7fb f945 	bl	ab7c <mp_obj_get_type>
    f8f2:	4605      	mov	r5, r0
    f8f4:	f004 0303 	and.w	r3, r4, #3
    GET_STR_DATA_LEN(self_in, self_data, self_len);
    f8f8:	2b02      	cmp	r3, #2
    f8fa:	d013      	beq.n	f924 <bytes_subscr+0x40>
    f8fc:	68a3      	ldr	r3, [r4, #8]
    f8fe:	9301      	str	r3, [sp, #4]
    f900:	68e4      	ldr	r4, [r4, #12]
    if (value == MP_OBJ_SENTINEL) {
    f902:	2e08      	cmp	r6, #8
    f904:	d119      	bne.n	f93a <bytes_subscr+0x56>
        size_t index_val = mp_get_index(type, self_len, index, false);
    f906:	2300      	movs	r3, #0
    f908:	463a      	mov	r2, r7
    f90a:	9901      	ldr	r1, [sp, #4]
    f90c:	4628      	mov	r0, r5
    f90e:	f7fb fbb5 	bl	b07c <mp_get_index>
        if (MICROPY_PY_BUILTINS_STR_UNICODE || type == &mp_type_bytes) {
    f912:	4b0b      	ldr	r3, [pc, #44]	; (f940 <bytes_subscr+0x5c>)
    f914:	429d      	cmp	r5, r3
    f916:	d00b      	beq.n	f930 <bytes_subscr+0x4c>
            return mp_obj_new_str_via_qstr((char*)&self_data[index_val], 1);
    f918:	2101      	movs	r1, #1
    f91a:	4420      	add	r0, r4
    f91c:	f7ff ffbb 	bl	f896 <mp_obj_new_str_via_qstr>
}
    f920:	b003      	add	sp, #12
    f922:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GET_STR_DATA_LEN(self_in, self_data, self_len);
    f924:	a901      	add	r1, sp, #4
    f926:	08a0      	lsrs	r0, r4, #2
    f928:	f7f1 feb8 	bl	169c <qstr_data>
    f92c:	4604      	mov	r4, r0
    f92e:	e7e8      	b.n	f902 <bytes_subscr+0x1e>
            return MP_OBJ_NEW_SMALL_INT(self_data[index_val]);
    f930:	5c20      	ldrb	r0, [r4, r0]
    f932:	0040      	lsls	r0, r0, #1
    f934:	f040 0001 	orr.w	r0, r0, #1
    f938:	e7f2      	b.n	f920 <bytes_subscr+0x3c>
        return MP_OBJ_NULL; // op not supported
    f93a:	2000      	movs	r0, #0
    f93c:	e7f0      	b.n	f920 <bytes_subscr+0x3c>
    f93e:	bf00      	nop
    f940:	000280c8 	.word	0x000280c8

0000f944 <mp_obj_new_str_from_vstr>:
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr) {
    f944:	b570      	push	{r4, r5, r6, lr}
    f946:	4606      	mov	r6, r0
    f948:	460c      	mov	r4, r1
    if (type == &mp_type_str) {
    f94a:	4b19      	ldr	r3, [pc, #100]	; (f9b0 <mp_obj_new_str_from_vstr+0x6c>)
    f94c:	4298      	cmp	r0, r3
    f94e:	d01a      	beq.n	f986 <mp_obj_new_str_from_vstr+0x42>
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
    f950:	2010      	movs	r0, #16
    f952:	f7f0 ffb3 	bl	8bc <m_malloc>
    f956:	4605      	mov	r5, r0
    o->base.type = type;
    f958:	6006      	str	r6, [r0, #0]
    o->len = vstr->len;
    f95a:	6863      	ldr	r3, [r4, #4]
    f95c:	6083      	str	r3, [r0, #8]
    o->hash = qstr_compute_hash((byte*)vstr->buf, vstr->len);
    f95e:	6861      	ldr	r1, [r4, #4]
    f960:	68a0      	ldr	r0, [r4, #8]
    f962:	f7f1 fdaf 	bl	14c4 <qstr_compute_hash>
    f966:	6068      	str	r0, [r5, #4]
    if (vstr->len + 1 == vstr->alloc) {
    f968:	6861      	ldr	r1, [r4, #4]
    f96a:	3101      	adds	r1, #1
    f96c:	6823      	ldr	r3, [r4, #0]
    f96e:	4299      	cmp	r1, r3
    f970:	d119      	bne.n	f9a6 <mp_obj_new_str_from_vstr+0x62>
        o->data = (byte*)vstr->buf;
    f972:	68a3      	ldr	r3, [r4, #8]
    f974:	60eb      	str	r3, [r5, #12]
    ((byte*)o->data)[o->len] = '\0'; // add null byte
    f976:	68e9      	ldr	r1, [r5, #12]
    f978:	68aa      	ldr	r2, [r5, #8]
    f97a:	2300      	movs	r3, #0
    f97c:	548b      	strb	r3, [r1, r2]
    vstr->buf = NULL;
    f97e:	60a3      	str	r3, [r4, #8]
    vstr->alloc = 0;
    f980:	6023      	str	r3, [r4, #0]
}
    f982:	4628      	mov	r0, r5
    f984:	bd70      	pop	{r4, r5, r6, pc}
        qstr q = qstr_find_strn(vstr->buf, vstr->len);
    f986:	6849      	ldr	r1, [r1, #4]
    f988:	68a0      	ldr	r0, [r4, #8]
    f98a:	f7f1 fdb7 	bl	14fc <qstr_find_strn>
        if (q != MP_QSTR_NULL) {
    f98e:	4605      	mov	r5, r0
    f990:	2800      	cmp	r0, #0
    f992:	d0dd      	beq.n	f950 <mp_obj_new_str_from_vstr+0xc>
            vstr_clear(vstr);
    f994:	4620      	mov	r0, r4
    f996:	f7f1 ff3d 	bl	1814 <vstr_clear>
            vstr->alloc = 0;
    f99a:	2300      	movs	r3, #0
    f99c:	6023      	str	r3, [r4, #0]
            return MP_OBJ_NEW_QSTR(q);
    f99e:	00ad      	lsls	r5, r5, #2
    f9a0:	f045 0502 	orr.w	r5, r5, #2
    f9a4:	e7ed      	b.n	f982 <mp_obj_new_str_from_vstr+0x3e>
        o->data = (byte*)m_renew(char, vstr->buf, vstr->alloc, vstr->len + 1);
    f9a6:	68a0      	ldr	r0, [r4, #8]
    f9a8:	f7f0 ff9f 	bl	8ea <m_realloc>
    f9ac:	60e8      	str	r0, [r5, #12]
    f9ae:	e7e2      	b.n	f976 <mp_obj_new_str_from_vstr+0x32>
    f9b0:	00028104 	.word	0x00028104

0000f9b4 <str_join>:
STATIC mp_obj_t str_join(mp_obj_t self_in, mp_obj_t arg) {
    f9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9b8:	b08a      	sub	sp, #40	; 0x28
    f9ba:	4604      	mov	r4, r0
    f9bc:	9101      	str	r1, [sp, #4]
    f9be:	f000 0503 	and.w	r5, r0, #3
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
    f9c2:	2d02      	cmp	r5, #2
    f9c4:	d005      	beq.n	f9d2 <str_join+0x1e>
    f9c6:	bb2d      	cbnz	r5, fa14 <str_join+0x60>
    f9c8:	6803      	ldr	r3, [r0, #0]
    f9ca:	699a      	ldr	r2, [r3, #24]
    f9cc:	4b45      	ldr	r3, [pc, #276]	; (fae4 <str_join+0x130>)
    f9ce:	429a      	cmp	r2, r3
    f9d0:	d120      	bne.n	fa14 <str_join+0x60>
    const mp_obj_type_t *self_type = mp_obj_get_type(self_in);
    f9d2:	4620      	mov	r0, r4
    f9d4:	f7fb f8d2 	bl	ab7c <mp_obj_get_type>
    f9d8:	4606      	mov	r6, r0
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
    f9da:	2d02      	cmp	r5, #2
    f9dc:	d021      	beq.n	fa22 <str_join+0x6e>
    f9de:	68a3      	ldr	r3, [r4, #8]
    f9e0:	9309      	str	r3, [sp, #36]	; 0x24
    f9e2:	68e7      	ldr	r7, [r4, #12]
    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
    f9e4:	9b01      	ldr	r3, [sp, #4]
    f9e6:	f013 0203 	ands.w	r2, r3, #3
    f9ea:	d103      	bne.n	f9f4 <str_join+0x40>
    f9ec:	6818      	ldr	r0, [r3, #0]
    f9ee:	493e      	ldr	r1, [pc, #248]	; (fae8 <str_join+0x134>)
    f9f0:	4288      	cmp	r0, r1
    f9f2:	d007      	beq.n	fa04 <str_join+0x50>
    f9f4:	b1da      	cbz	r2, fa2e <str_join+0x7a>
        arg = mp_type_list.make_new(&mp_type_list, 1, 0, &arg);
    f9f6:	483c      	ldr	r0, [pc, #240]	; (fae8 <str_join+0x134>)
    f9f8:	68c4      	ldr	r4, [r0, #12]
    f9fa:	ab01      	add	r3, sp, #4
    f9fc:	2200      	movs	r2, #0
    f9fe:	2101      	movs	r1, #1
    fa00:	47a0      	blx	r4
    fa02:	9001      	str	r0, [sp, #4]
    mp_obj_get_array(arg, &seq_len, &seq_items);
    fa04:	aa07      	add	r2, sp, #28
    fa06:	a908      	add	r1, sp, #32
    fa08:	9801      	ldr	r0, [sp, #4]
    fa0a:	f7fb fafd 	bl	b008 <mp_obj_get_array>
    for (size_t i = 0; i < seq_len; i++) {
    fa0e:	2400      	movs	r4, #0
    size_t required_len = 0;
    fa10:	4625      	mov	r5, r4
    for (size_t i = 0; i < seq_len; i++) {
    fa12:	e01e      	b.n	fa52 <str_join+0x9e>
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
    fa14:	4b35      	ldr	r3, [pc, #212]	; (faec <str_join+0x138>)
    fa16:	4a36      	ldr	r2, [pc, #216]	; (faf0 <str_join+0x13c>)
    fa18:	f240 11bb 	movw	r1, #443	; 0x1bb
    fa1c:	4835      	ldr	r0, [pc, #212]	; (faf4 <str_join+0x140>)
    fa1e:	f008 fd9d 	bl	1855c <__assert_func>
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
    fa22:	a909      	add	r1, sp, #36	; 0x24
    fa24:	08a0      	lsrs	r0, r4, #2
    fa26:	f7f1 fe39 	bl	169c <qstr_data>
    fa2a:	4607      	mov	r7, r0
    fa2c:	e7da      	b.n	f9e4 <str_join+0x30>
    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
    fa2e:	681a      	ldr	r2, [r3, #0]
    fa30:	4b31      	ldr	r3, [pc, #196]	; (faf8 <str_join+0x144>)
    fa32:	429a      	cmp	r2, r3
    fa34:	d1df      	bne.n	f9f6 <str_join+0x42>
    fa36:	e7e5      	b.n	fa04 <str_join+0x50>
            mp_raise_TypeError(
    fa38:	4830      	ldr	r0, [pc, #192]	; (fafc <str_join+0x148>)
    fa3a:	f7fa fe35 	bl	a6a8 <mp_raise_TypeError>
        GET_STR_LEN(seq_items[i], l);
    fa3e:	9b07      	ldr	r3, [sp, #28]
    fa40:	f853 0008 	ldr.w	r0, [r3, r8]
    fa44:	f000 0303 	and.w	r3, r0, #3
    fa48:	2b02      	cmp	r3, #2
    fa4a:	d013      	beq.n	fa74 <str_join+0xc0>
    fa4c:	6880      	ldr	r0, [r0, #8]
        required_len += l;
    fa4e:	4405      	add	r5, r0
    for (size_t i = 0; i < seq_len; i++) {
    fa50:	3401      	adds	r4, #1
    fa52:	9b08      	ldr	r3, [sp, #32]
    fa54:	42a3      	cmp	r3, r4
    fa56:	d911      	bls.n	fa7c <str_join+0xc8>
        if (mp_obj_get_type(seq_items[i]) != self_type) {
    fa58:	ea4f 0884 	mov.w	r8, r4, lsl #2
    fa5c:	9b07      	ldr	r3, [sp, #28]
    fa5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    fa62:	f7fb f88b 	bl	ab7c <mp_obj_get_type>
    fa66:	4286      	cmp	r6, r0
    fa68:	d1e6      	bne.n	fa38 <str_join+0x84>
        if (i > 0) {
    fa6a:	2c00      	cmp	r4, #0
    fa6c:	d0e7      	beq.n	fa3e <str_join+0x8a>
            required_len += sep_len;
    fa6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa70:	441d      	add	r5, r3
    fa72:	e7e4      	b.n	fa3e <str_join+0x8a>
        GET_STR_LEN(seq_items[i], l);
    fa74:	0880      	lsrs	r0, r0, #2
    fa76:	f7f1 fe07 	bl	1688 <qstr_len>
    fa7a:	e7e8      	b.n	fa4e <str_join+0x9a>
    vstr_init_len(&vstr, required_len);
    fa7c:	4629      	mov	r1, r5
    fa7e:	a803      	add	r0, sp, #12
    fa80:	f7f1 feab 	bl	17da <vstr_init_len>
    byte *data = (byte*)vstr.buf;
    fa84:	9d05      	ldr	r5, [sp, #20]
    for (size_t i = 0; i < seq_len; i++) {
    fa86:	2400      	movs	r4, #0
    fa88:	e012      	b.n	fab0 <str_join+0xfc>
        GET_STR_DATA_LEN(seq_items[i], s, l);
    fa8a:	9b07      	ldr	r3, [sp, #28]
    fa8c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    fa90:	f000 0203 	and.w	r2, r0, #3
    fa94:	2a02      	cmp	r2, #2
    fa96:	d018      	beq.n	faca <str_join+0x116>
    fa98:	6882      	ldr	r2, [r0, #8]
    fa9a:	9202      	str	r2, [sp, #8]
    fa9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    faa0:	68d9      	ldr	r1, [r3, #12]
        memcpy(data, s, l);
    faa2:	9a02      	ldr	r2, [sp, #8]
    faa4:	4628      	mov	r0, r5
    faa6:	f00b fea5 	bl	1b7f4 <memcpy>
        data += l;
    faaa:	9b02      	ldr	r3, [sp, #8]
    faac:	441d      	add	r5, r3
    for (size_t i = 0; i < seq_len; i++) {
    faae:	3401      	adds	r4, #1
    fab0:	9b08      	ldr	r3, [sp, #32]
    fab2:	42a3      	cmp	r3, r4
    fab4:	d90f      	bls.n	fad6 <str_join+0x122>
        if (i > 0) {
    fab6:	2c00      	cmp	r4, #0
    fab8:	d0e7      	beq.n	fa8a <str_join+0xd6>
            memcpy(data, sep_str, sep_len);
    faba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fabc:	4639      	mov	r1, r7
    fabe:	4628      	mov	r0, r5
    fac0:	f00b fe98 	bl	1b7f4 <memcpy>
            data += sep_len;
    fac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fac6:	441d      	add	r5, r3
    fac8:	e7df      	b.n	fa8a <str_join+0xd6>
        GET_STR_DATA_LEN(seq_items[i], s, l);
    faca:	a902      	add	r1, sp, #8
    facc:	0880      	lsrs	r0, r0, #2
    face:	f7f1 fde5 	bl	169c <qstr_data>
    fad2:	4601      	mov	r1, r0
    fad4:	e7e5      	b.n	faa2 <str_join+0xee>
    return mp_obj_new_str_from_vstr(self_type, &vstr);
    fad6:	a903      	add	r1, sp, #12
    fad8:	4630      	mov	r0, r6
    fada:	f7ff ff33 	bl	f944 <mp_obj_new_str_from_vstr>
}
    fade:	b00a      	add	sp, #40	; 0x28
    fae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fae4:	000106e5 	.word	0x000106e5
    fae8:	00027890 	.word	0x00027890
    faec:	00028328 	.word	0x00028328
    faf0:	00027cd4 	.word	0x00027cd4
    faf4:	000282c0 	.word	0x000282c0
    faf8:	00028844 	.word	0x00028844
    fafc:	000283b0 	.word	0x000283b0

0000fb00 <str_replace>:
STATIC mp_obj_t str_replace(size_t n_args, const mp_obj_t *args) {
    fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb04:	b091      	sub	sp, #68	; 0x44
    fb06:	9106      	str	r1, [sp, #24]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
    fb08:	680b      	ldr	r3, [r1, #0]
    fb0a:	f003 0203 	and.w	r2, r3, #3
    fb0e:	2a02      	cmp	r2, #2
    fb10:	d006      	beq.n	fb20 <str_replace+0x20>
    fb12:	2a00      	cmp	r2, #0
    fb14:	d141      	bne.n	fb9a <str_replace+0x9a>
    fb16:	681b      	ldr	r3, [r3, #0]
    fb18:	699a      	ldr	r2, [r3, #24]
    fb1a:	4b70      	ldr	r3, [pc, #448]	; (fcdc <str_replace+0x1dc>)
    fb1c:	429a      	cmp	r2, r3
    fb1e:	d13c      	bne.n	fb9a <str_replace+0x9a>
    if (n_args == 4) {
    fb20:	2804      	cmp	r0, #4
    fb22:	d041      	beq.n	fba8 <str_replace+0xa8>
    mp_int_t max_rep = -1;
    fb24:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
    fb28:	9c06      	ldr	r4, [sp, #24]
    fb2a:	6820      	ldr	r0, [r4, #0]
    fb2c:	f7fb f826 	bl	ab7c <mp_obj_get_type>
    fb30:	4605      	mov	r5, r0
    fb32:	9007      	str	r0, [sp, #28]
    if (mp_obj_get_type(args[1]) != self_type) {
    fb34:	6860      	ldr	r0, [r4, #4]
    fb36:	f7fb f821 	bl	ab7c <mp_obj_get_type>
    fb3a:	4285      	cmp	r5, r0
    fb3c:	d141      	bne.n	fbc2 <str_replace+0xc2>
    if (mp_obj_get_type(args[2]) != self_type) {
    fb3e:	9b06      	ldr	r3, [sp, #24]
    fb40:	6898      	ldr	r0, [r3, #8]
    fb42:	f7fb f81b 	bl	ab7c <mp_obj_get_type>
    fb46:	9b07      	ldr	r3, [sp, #28]
    fb48:	4283      	cmp	r3, r0
    fb4a:	d13e      	bne.n	fbca <str_replace+0xca>
    GET_STR_DATA_LEN(args[0], str, str_len);
    fb4c:	9b06      	ldr	r3, [sp, #24]
    fb4e:	6818      	ldr	r0, [r3, #0]
    fb50:	f000 0303 	and.w	r3, r0, #3
    fb54:	2b02      	cmp	r3, #2
    fb56:	d03c      	beq.n	fbd2 <str_replace+0xd2>
    fb58:	6883      	ldr	r3, [r0, #8]
    fb5a:	930f      	str	r3, [sp, #60]	; 0x3c
    fb5c:	9b06      	ldr	r3, [sp, #24]
    fb5e:	681b      	ldr	r3, [r3, #0]
    fb60:	68db      	ldr	r3, [r3, #12]
    fb62:	9303      	str	r3, [sp, #12]
    GET_STR_DATA_LEN(args[1], old, old_len);
    fb64:	9b06      	ldr	r3, [sp, #24]
    fb66:	6858      	ldr	r0, [r3, #4]
    fb68:	f000 0303 	and.w	r3, r0, #3
    fb6c:	2b02      	cmp	r3, #2
    fb6e:	d036      	beq.n	fbde <str_replace+0xde>
    fb70:	6883      	ldr	r3, [r0, #8]
    fb72:	930e      	str	r3, [sp, #56]	; 0x38
    fb74:	68c3      	ldr	r3, [r0, #12]
    fb76:	9304      	str	r3, [sp, #16]
    GET_STR_DATA_LEN(args[2], new, new_len);
    fb78:	9b06      	ldr	r3, [sp, #24]
    fb7a:	6898      	ldr	r0, [r3, #8]
    fb7c:	f000 0303 	and.w	r3, r0, #3
    fb80:	2b02      	cmp	r3, #2
    fb82:	d032      	beq.n	fbea <str_replace+0xea>
    fb84:	6883      	ldr	r3, [r0, #8]
    fb86:	930d      	str	r3, [sp, #52]	; 0x34
    fb88:	68c3      	ldr	r3, [r0, #12]
    fb8a:	9305      	str	r3, [sp, #20]
    if (old_len > str_len) {
    fb8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fb8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fb90:	429a      	cmp	r2, r3
    fb92:	d830      	bhi.n	fbf6 <str_replace+0xf6>
    byte *data = NULL;
    fb94:	f04f 0800 	mov.w	r8, #0
    fb98:	e080      	b.n	fc9c <str_replace+0x19c>
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
    fb9a:	4b51      	ldr	r3, [pc, #324]	; (fce0 <str_replace+0x1e0>)
    fb9c:	4a51      	ldr	r2, [pc, #324]	; (fce4 <str_replace+0x1e4>)
    fb9e:	f240 6131 	movw	r1, #1585	; 0x631
    fba2:	4851      	ldr	r0, [pc, #324]	; (fce8 <str_replace+0x1e8>)
    fba4:	f008 fcda 	bl	1855c <__assert_func>
        max_rep = mp_obj_get_int(args[3]);
    fba8:	9c06      	ldr	r4, [sp, #24]
    fbaa:	68e0      	ldr	r0, [r4, #12]
    fbac:	f7fb f90e 	bl	adcc <mp_obj_get_int>
        if (max_rep == 0) {
    fbb0:	4683      	mov	fp, r0
    fbb2:	b120      	cbz	r0, fbbe <str_replace+0xbe>
        } else if (max_rep < 0) {
    fbb4:	2800      	cmp	r0, #0
    fbb6:	dab7      	bge.n	fb28 <str_replace+0x28>
            max_rep = -1;
    fbb8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    fbbc:	e7b4      	b.n	fb28 <str_replace+0x28>
            return args[0];
    fbbe:	6820      	ldr	r0, [r4, #0]
    fbc0:	e01b      	b.n	fbfa <str_replace+0xfa>
        bad_implicit_conversion(args[1]);
    fbc2:	9b06      	ldr	r3, [sp, #24]
    fbc4:	6858      	ldr	r0, [r3, #4]
    fbc6:	f7ff fb71 	bl	f2ac <bad_implicit_conversion>
        bad_implicit_conversion(args[2]);
    fbca:	9b06      	ldr	r3, [sp, #24]
    fbcc:	6898      	ldr	r0, [r3, #8]
    fbce:	f7ff fb6d 	bl	f2ac <bad_implicit_conversion>
    GET_STR_DATA_LEN(args[0], str, str_len);
    fbd2:	a90f      	add	r1, sp, #60	; 0x3c
    fbd4:	0880      	lsrs	r0, r0, #2
    fbd6:	f7f1 fd61 	bl	169c <qstr_data>
    fbda:	9003      	str	r0, [sp, #12]
    fbdc:	e7c2      	b.n	fb64 <str_replace+0x64>
    GET_STR_DATA_LEN(args[1], old, old_len);
    fbde:	a90e      	add	r1, sp, #56	; 0x38
    fbe0:	0880      	lsrs	r0, r0, #2
    fbe2:	f7f1 fd5b 	bl	169c <qstr_data>
    fbe6:	9004      	str	r0, [sp, #16]
    fbe8:	e7c6      	b.n	fb78 <str_replace+0x78>
    GET_STR_DATA_LEN(args[2], new, new_len);
    fbea:	a90d      	add	r1, sp, #52	; 0x34
    fbec:	0880      	lsrs	r0, r0, #2
    fbee:	f7f1 fd55 	bl	169c <qstr_data>
    fbf2:	9005      	str	r0, [sp, #20]
    fbf4:	e7ca      	b.n	fb8c <str_replace+0x8c>
        return args[0];
    fbf6:	9b06      	ldr	r3, [sp, #24]
    fbf8:	6818      	ldr	r0, [r3, #0]
}
    fbfa:	b011      	add	sp, #68	; 0x44
    fbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (data != NULL) {
    fc00:	f1b8 0f00 	cmp.w	r8, #0
    fc04:	d005      	beq.n	fc12 <str_replace+0x112>
                memcpy(data + replaced_str_index, offset_ptr, old_occurrence - offset_ptr);
    fc06:	1bba      	subs	r2, r7, r6
    fc08:	4631      	mov	r1, r6
    fc0a:	eb08 0004 	add.w	r0, r8, r4
    fc0e:	f00b fdf1 	bl	1b7f4 <memcpy>
            replaced_str_index += old_occurrence - offset_ptr;
    fc12:	1bbe      	subs	r6, r7, r6
    fc14:	4434      	add	r4, r6
            if (data != NULL) {
    fc16:	f1b8 0f00 	cmp.w	r8, #0
    fc1a:	d005      	beq.n	fc28 <str_replace+0x128>
                memcpy(data + replaced_str_index, new, new_len);
    fc1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    fc1e:	9905      	ldr	r1, [sp, #20]
    fc20:	eb08 0004 	add.w	r0, r8, r4
    fc24:	f00b fde6 	bl	1b7f4 <memcpy>
            replaced_str_index += new_len;
    fc28:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    fc2a:	4434      	add	r4, r6
            offset_ptr = old_occurrence + old_len;
    fc2c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    fc2e:	443e      	add	r6, r7
            str_len_remain = str + str_len - offset_ptr;
    fc30:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    fc32:	9b03      	ldr	r3, [sp, #12]
    fc34:	441d      	add	r5, r3
    fc36:	1bad      	subs	r5, r5, r6
            num_replacements_done++;
    fc38:	f109 0901 	add.w	r9, r9, #1
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
    fc3c:	45cb      	cmp	fp, r9
    fc3e:	d015      	beq.n	fc6c <str_replace+0x16c>
    fc40:	b1a5      	cbz	r5, fc6c <str_replace+0x16c>
    fc42:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    fc46:	2301      	movs	r3, #1
    fc48:	9300      	str	r3, [sp, #0]
    fc4a:	4653      	mov	r3, sl
    fc4c:	9a04      	ldr	r2, [sp, #16]
    fc4e:	4629      	mov	r1, r5
    fc50:	4630      	mov	r0, r6
    fc52:	f7ff fca1 	bl	f598 <find_subbytes>
    fc56:	4607      	mov	r7, r0
    fc58:	b140      	cbz	r0, fc6c <str_replace+0x16c>
            if (old_len == 0) {
    fc5a:	f1ba 0f00 	cmp.w	sl, #0
    fc5e:	d1cf      	bne.n	fc00 <str_replace+0x100>
                old_occurrence += 1;
    fc60:	3701      	adds	r7, #1
    fc62:	e7cd      	b.n	fc00 <str_replace+0x100>
        size_t num_replacements_done = 0;
    fc64:	f04f 0900 	mov.w	r9, #0
        size_t replaced_str_index = 0;
    fc68:	464c      	mov	r4, r9
    fc6a:	e026      	b.n	fcba <str_replace+0x1ba>
        if (data != NULL) {
    fc6c:	f1b8 0f00 	cmp.w	r8, #0
    fc70:	d005      	beq.n	fc7e <str_replace+0x17e>
            memcpy(data + replaced_str_index, offset_ptr, str_len_remain);
    fc72:	462a      	mov	r2, r5
    fc74:	4631      	mov	r1, r6
    fc76:	eb08 0004 	add.w	r0, r8, r4
    fc7a:	f00b fdbb 	bl	1b7f4 <memcpy>
        replaced_str_index += str_len_remain;
    fc7e:	1961      	adds	r1, r4, r5
        if (data == NULL) {
    fc80:	f1b8 0f00 	cmp.w	r8, #0
    fc84:	d125      	bne.n	fcd2 <str_replace+0x1d2>
            if (num_replacements_done == 0) {
    fc86:	f1b9 0f00 	cmp.w	r9, #0
    fc8a:	d018      	beq.n	fcbe <str_replace+0x1be>
                vstr_init_len(&vstr, replaced_str_index);
    fc8c:	a809      	add	r0, sp, #36	; 0x24
    fc8e:	f7f1 fda4 	bl	17da <vstr_init_len>
                data = (byte*)vstr.buf;
    fc92:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
                assert(data != NULL);
    fc96:	f1b8 0f00 	cmp.w	r8, #0
    fc9a:	d013      	beq.n	fcc4 <str_replace+0x1c4>
        size_t str_len_remain = str_len;
    fc9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
        if (old_len == 0) {
    fc9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fca0:	2b00      	cmp	r3, #0
    fca2:	d1df      	bne.n	fc64 <str_replace+0x164>
            if (data != NULL) {
    fca4:	f1b8 0f00 	cmp.w	r8, #0
    fca8:	d004      	beq.n	fcb4 <str_replace+0x1b4>
                memcpy(data, new, new_len);
    fcaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    fcac:	9905      	ldr	r1, [sp, #20]
    fcae:	4640      	mov	r0, r8
    fcb0:	f00b fda0 	bl	1b7f4 <memcpy>
            replaced_str_index += new_len;
    fcb4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            num_replacements_done++;
    fcb6:	f04f 0901 	mov.w	r9, #1
    fcba:	9e03      	ldr	r6, [sp, #12]
    fcbc:	e7be      	b.n	fc3c <str_replace+0x13c>
                return args[0];
    fcbe:	9b06      	ldr	r3, [sp, #24]
    fcc0:	6818      	ldr	r0, [r3, #0]
    fcc2:	e79a      	b.n	fbfa <str_replace+0xfa>
                assert(data != NULL);
    fcc4:	4b09      	ldr	r3, [pc, #36]	; (fcec <str_replace+0x1ec>)
    fcc6:	4a07      	ldr	r2, [pc, #28]	; (fce4 <str_replace+0x1e4>)
    fcc8:	f240 618e 	movw	r1, #1678	; 0x68e
    fccc:	4806      	ldr	r0, [pc, #24]	; (fce8 <str_replace+0x1e8>)
    fcce:	f008 fc45 	bl	1855c <__assert_func>
    return mp_obj_new_str_from_vstr(self_type, &vstr);
    fcd2:	a909      	add	r1, sp, #36	; 0x24
    fcd4:	9807      	ldr	r0, [sp, #28]
    fcd6:	f7ff fe35 	bl	f944 <mp_obj_new_str_from_vstr>
    fcda:	e78e      	b.n	fbfa <str_replace+0xfa>
    fcdc:	000106e5 	.word	0x000106e5
    fce0:	00028238 	.word	0x00028238
    fce4:	00027d40 	.word	0x00027d40
    fce8:	000282c0 	.word	0x000282c0
    fcec:	000285b0 	.word	0x000285b0

0000fcf0 <str_caseconv>:
STATIC mp_obj_t str_caseconv(unichar (*op)(unichar), mp_obj_t self_in) {
    fcf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fcf4:	b087      	sub	sp, #28
    fcf6:	4680      	mov	r8, r0
    fcf8:	4689      	mov	r9, r1
    fcfa:	f001 0303 	and.w	r3, r1, #3
    GET_STR_DATA_LEN(self_in, self_data, self_len);
    fcfe:	2b02      	cmp	r3, #2
    fd00:	d009      	beq.n	fd16 <str_caseconv+0x26>
    fd02:	688b      	ldr	r3, [r1, #8]
    fd04:	9305      	str	r3, [sp, #20]
    fd06:	68ce      	ldr	r6, [r1, #12]
    vstr_init_len(&vstr, self_len);
    fd08:	9905      	ldr	r1, [sp, #20]
    fd0a:	a801      	add	r0, sp, #4
    fd0c:	f7f1 fd65 	bl	17da <vstr_init_len>
    byte *data = (byte*)vstr.buf;
    fd10:	9d03      	ldr	r5, [sp, #12]
    for (size_t i = 0; i < self_len; i++) {
    fd12:	2400      	movs	r4, #0
    fd14:	e00d      	b.n	fd32 <str_caseconv+0x42>
    GET_STR_DATA_LEN(self_in, self_data, self_len);
    fd16:	a905      	add	r1, sp, #20
    fd18:	ea4f 0099 	mov.w	r0, r9, lsr #2
    fd1c:	f7f1 fcbe 	bl	169c <qstr_data>
    fd20:	4606      	mov	r6, r0
    fd22:	e7f1      	b.n	fd08 <str_caseconv+0x18>
        *data++ = op(*self_data++);
    fd24:	1c77      	adds	r7, r6, #1
    fd26:	7830      	ldrb	r0, [r6, #0]
    fd28:	47c0      	blx	r8
    fd2a:	7028      	strb	r0, [r5, #0]
    for (size_t i = 0; i < self_len; i++) {
    fd2c:	3401      	adds	r4, #1
        *data++ = op(*self_data++);
    fd2e:	3501      	adds	r5, #1
    fd30:	463e      	mov	r6, r7
    for (size_t i = 0; i < self_len; i++) {
    fd32:	9b05      	ldr	r3, [sp, #20]
    fd34:	42a3      	cmp	r3, r4
    fd36:	d8f5      	bhi.n	fd24 <str_caseconv+0x34>
    return mp_obj_new_str_from_vstr(mp_obj_get_type(self_in), &vstr);
    fd38:	4648      	mov	r0, r9
    fd3a:	f7fa ff1f 	bl	ab7c <mp_obj_get_type>
    fd3e:	a901      	add	r1, sp, #4
    fd40:	f7ff fe00 	bl	f944 <mp_obj_new_str_from_vstr>
}
    fd44:	b007      	add	sp, #28
    fd46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0000fd4c <str_lower>:
STATIC mp_obj_t str_lower(mp_obj_t self_in) {
    fd4c:	b508      	push	{r3, lr}
    return str_caseconv(unichar_tolower, self_in);
    fd4e:	4601      	mov	r1, r0
    fd50:	4801      	ldr	r0, [pc, #4]	; (fd58 <str_lower+0xc>)
    fd52:	f7ff ffcd 	bl	fcf0 <str_caseconv>
}
    fd56:	bd08      	pop	{r3, pc}
    fd58:	00002171 	.word	0x00002171

0000fd5c <str_upper>:
STATIC mp_obj_t str_upper(mp_obj_t self_in) {
    fd5c:	b508      	push	{r3, lr}
    return str_caseconv(unichar_toupper, self_in);
    fd5e:	4601      	mov	r1, r0
    fd60:	4801      	ldr	r0, [pc, #4]	; (fd68 <str_upper+0xc>)
    fd62:	f7ff ffc5 	bl	fcf0 <str_caseconv>
}
    fd66:	bd08      	pop	{r3, pc}
    fd68:	00002185 	.word	0x00002185

0000fd6c <mp_obj_new_str>:
mp_obj_t mp_obj_new_str(const char* data, size_t len) {
    fd6c:	b538      	push	{r3, r4, r5, lr}
    fd6e:	4604      	mov	r4, r0
    fd70:	460d      	mov	r5, r1
    qstr q = qstr_find_strn(data, len);
    fd72:	f7f1 fbc3 	bl	14fc <qstr_find_strn>
    if (q != MP_QSTR_NULL) {
    fd76:	b118      	cbz	r0, fd80 <mp_obj_new_str+0x14>
        return MP_OBJ_NEW_QSTR(q);
    fd78:	0080      	lsls	r0, r0, #2
    fd7a:	f040 0002 	orr.w	r0, r0, #2
}
    fd7e:	bd38      	pop	{r3, r4, r5, pc}
        return mp_obj_new_str_copy(&mp_type_str, (const byte*)data, len);
    fd80:	462a      	mov	r2, r5
    fd82:	4621      	mov	r1, r4
    fd84:	4801      	ldr	r0, [pc, #4]	; (fd8c <mp_obj_new_str+0x20>)
    fd86:	f7ff fd69 	bl	f85c <mp_obj_new_str_copy>
    fd8a:	e7f8      	b.n	fd7e <mp_obj_new_str+0x12>
    fd8c:	00028104 	.word	0x00028104

0000fd90 <mp_obj_str_make_new>:
mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fd90:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd92:	b089      	sub	sp, #36	; 0x24
    fd94:	4606      	mov	r6, r0
    fd96:	460c      	mov	r4, r1
    fd98:	4611      	mov	r1, r2
    fd9a:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 0, 3, false);
    fd9c:	2200      	movs	r2, #0
    fd9e:	9200      	str	r2, [sp, #0]
    fda0:	2303      	movs	r3, #3
    fda2:	4620      	mov	r0, r4
    fda4:	f7fa fcb8 	bl	a718 <mp_arg_check_num>
    switch (n_args) {
    fda8:	2c00      	cmp	r4, #0
    fdaa:	d052      	beq.n	fe52 <mp_obj_str_make_new+0xc2>
    fdac:	2c01      	cmp	r4, #1
    fdae:	d110      	bne.n	fdd2 <mp_obj_str_make_new+0x42>
            vstr_init_print(&vstr, 16, &print);
    fdb0:	aa02      	add	r2, sp, #8
    fdb2:	2110      	movs	r1, #16
    fdb4:	eb0d 0001 	add.w	r0, sp, r1
    fdb8:	f7f1 fd20 	bl	17fc <vstr_init_print>
            mp_obj_print_helper(&print, args[0], PRINT_STR);
    fdbc:	2200      	movs	r2, #0
    fdbe:	6829      	ldr	r1, [r5, #0]
    fdc0:	a802      	add	r0, sp, #8
    fdc2:	f7fa fefd 	bl	abc0 <mp_obj_print_helper>
            return mp_obj_new_str_from_vstr(type, &vstr);
    fdc6:	a904      	add	r1, sp, #16
    fdc8:	4630      	mov	r0, r6
    fdca:	f7ff fdbb 	bl	f944 <mp_obj_new_str_from_vstr>
}
    fdce:	b009      	add	sp, #36	; 0x24
    fdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_bytes)) {
    fdd2:	6828      	ldr	r0, [r5, #0]
    fdd4:	f010 0103 	ands.w	r1, r0, #3
    fdd8:	d103      	bne.n	fde2 <mp_obj_str_make_new+0x52>
    fdda:	6802      	ldr	r2, [r0, #0]
    fddc:	4b1e      	ldr	r3, [pc, #120]	; (fe58 <mp_obj_str_make_new+0xc8>)
    fdde:	429a      	cmp	r2, r3
    fde0:	d008      	beq.n	fdf4 <mp_obj_str_make_new+0x64>
                mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
    fde2:	2201      	movs	r2, #1
    fde4:	a904      	add	r1, sp, #16
    fde6:	f7fb fa63 	bl	b2b0 <mp_get_buffer_raise>
                return mp_obj_new_str(bufinfo.buf, bufinfo.len);
    fdea:	9905      	ldr	r1, [sp, #20]
    fdec:	9804      	ldr	r0, [sp, #16]
    fdee:	f7ff ffbd 	bl	fd6c <mp_obj_new_str>
    fdf2:	e7ec      	b.n	fdce <mp_obj_str_make_new+0x3e>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
    fdf4:	2902      	cmp	r1, #2
    fdf6:	d013      	beq.n	fe20 <mp_obj_str_make_new+0x90>
    fdf8:	6883      	ldr	r3, [r0, #8]
    fdfa:	9304      	str	r3, [sp, #16]
    fdfc:	682b      	ldr	r3, [r5, #0]
    fdfe:	68df      	ldr	r7, [r3, #12]
                GET_STR_HASH(args[0], str_hash);
    fe00:	6828      	ldr	r0, [r5, #0]
    fe02:	f000 0303 	and.w	r3, r0, #3
    fe06:	2b02      	cmp	r3, #2
    fe08:	d010      	beq.n	fe2c <mp_obj_str_make_new+0x9c>
    fe0a:	6844      	ldr	r4, [r0, #4]
                if (str_hash == 0) {
    fe0c:	b19c      	cbz	r4, fe36 <mp_obj_str_make_new+0xa6>
                qstr q = qstr_find_strn((const char*)str_data, str_len);
    fe0e:	9904      	ldr	r1, [sp, #16]
    fe10:	4638      	mov	r0, r7
    fe12:	f7f1 fb73 	bl	14fc <qstr_find_strn>
                if (q != MP_QSTR_NULL) {
    fe16:	b1a0      	cbz	r0, fe42 <mp_obj_str_make_new+0xb2>
                    return MP_OBJ_NEW_QSTR(q);
    fe18:	0080      	lsls	r0, r0, #2
    fe1a:	f040 0002 	orr.w	r0, r0, #2
    fe1e:	e7d6      	b.n	fdce <mp_obj_str_make_new+0x3e>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
    fe20:	a904      	add	r1, sp, #16
    fe22:	0880      	lsrs	r0, r0, #2
    fe24:	f7f1 fc3a 	bl	169c <qstr_data>
    fe28:	4607      	mov	r7, r0
    fe2a:	e7e9      	b.n	fe00 <mp_obj_str_make_new+0x70>
                GET_STR_HASH(args[0], str_hash);
    fe2c:	0880      	lsrs	r0, r0, #2
    fe2e:	f7f1 fc26 	bl	167e <qstr_hash>
    fe32:	4604      	mov	r4, r0
    fe34:	e7ea      	b.n	fe0c <mp_obj_str_make_new+0x7c>
                    str_hash = qstr_compute_hash(str_data, str_len);
    fe36:	9904      	ldr	r1, [sp, #16]
    fe38:	4638      	mov	r0, r7
    fe3a:	f7f1 fb43 	bl	14c4 <qstr_compute_hash>
    fe3e:	4604      	mov	r4, r0
    fe40:	e7e5      	b.n	fe0e <mp_obj_str_make_new+0x7e>
                mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(type, NULL, str_len));
    fe42:	9a04      	ldr	r2, [sp, #16]
    fe44:	2100      	movs	r1, #0
    fe46:	4630      	mov	r0, r6
    fe48:	f7ff fd08 	bl	f85c <mp_obj_new_str_copy>
                o->data = str_data;
    fe4c:	60c7      	str	r7, [r0, #12]
                o->hash = str_hash;
    fe4e:	6044      	str	r4, [r0, #4]
                return MP_OBJ_FROM_PTR(o);
    fe50:	e7bd      	b.n	fdce <mp_obj_str_make_new+0x3e>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
    fe52:	2006      	movs	r0, #6
    fe54:	e7bb      	b.n	fdce <mp_obj_str_make_new+0x3e>
    fe56:	bf00      	nop
    fe58:	000280c8 	.word	0x000280c8

0000fe5c <mp_obj_new_bytes>:
mp_obj_t mp_obj_new_bytes(const byte* data, size_t len) {
    fe5c:	b508      	push	{r3, lr}
    return mp_obj_new_str_copy(&mp_type_bytes, data, len);
    fe5e:	460a      	mov	r2, r1
    fe60:	4601      	mov	r1, r0
    fe62:	4802      	ldr	r0, [pc, #8]	; (fe6c <mp_obj_new_bytes+0x10>)
    fe64:	f7ff fcfa 	bl	f85c <mp_obj_new_str_copy>
}
    fe68:	bd08      	pop	{r3, pc}
    fe6a:	bf00      	nop
    fe6c:	000280c8 	.word	0x000280c8

0000fe70 <bytes_make_new>:
    if (n_args == 0) {
    fe70:	2900      	cmp	r1, #0
    fe72:	f000 8085 	beq.w	ff80 <bytes_make_new+0x110>
STATIC mp_obj_t bytes_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fe76:	b530      	push	{r4, r5, lr}
    fe78:	b091      	sub	sp, #68	; 0x44
    fe7a:	460a      	mov	r2, r1
    fe7c:	461c      	mov	r4, r3
    if (MP_OBJ_IS_STR(args[0])) {
    fe7e:	6818      	ldr	r0, [r3, #0]
    fe80:	f000 0303 	and.w	r3, r0, #3
    fe84:	2b02      	cmp	r3, #2
    fe86:	d019      	beq.n	febc <bytes_make_new+0x4c>
    fe88:	b91b      	cbnz	r3, fe92 <bytes_make_new+0x22>
    fe8a:	6805      	ldr	r5, [r0, #0]
    fe8c:	493d      	ldr	r1, [pc, #244]	; (ff84 <bytes_make_new+0x114>)
    fe8e:	428d      	cmp	r5, r1
    fe90:	d014      	beq.n	febc <bytes_make_new+0x4c>
    if (n_args > 1) {
    fe92:	2a01      	cmp	r2, #1
    fe94:	d871      	bhi.n	ff7a <bytes_make_new+0x10a>
    if (MP_OBJ_IS_SMALL_INT(args[0])) {
    fe96:	f010 0f01 	tst.w	r0, #1
    fe9a:	d03c      	beq.n	ff16 <bytes_make_new+0xa6>
        if (len < 0) {
    fe9c:	1044      	asrs	r4, r0, #1
    fe9e:	d437      	bmi.n	ff10 <bytes_make_new+0xa0>
        vstr_init_len(&vstr, len);
    fea0:	4621      	mov	r1, r4
    fea2:	a801      	add	r0, sp, #4
    fea4:	f7f1 fc99 	bl	17da <vstr_init_len>
        memset(vstr.buf, 0, len);
    fea8:	4622      	mov	r2, r4
    feaa:	2100      	movs	r1, #0
    feac:	9803      	ldr	r0, [sp, #12]
    feae:	f00b fce5 	bl	1b87c <memset>
        return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
    feb2:	a901      	add	r1, sp, #4
    feb4:	4834      	ldr	r0, [pc, #208]	; (ff88 <bytes_make_new+0x118>)
    feb6:	f7ff fd45 	bl	f944 <mp_obj_new_str_from_vstr>
    feba:	e016      	b.n	feea <bytes_make_new+0x7a>
        if (n_args < 2 || n_args > 3) {
    febc:	3a02      	subs	r2, #2
    febe:	2a01      	cmp	r2, #1
    fec0:	d85b      	bhi.n	ff7a <bytes_make_new+0x10a>
        GET_STR_DATA_LEN(args[0], str_data, str_len);
    fec2:	2b02      	cmp	r3, #2
    fec4:	d013      	beq.n	feee <bytes_make_new+0x7e>
    fec6:	6883      	ldr	r3, [r0, #8]
    fec8:	9301      	str	r3, [sp, #4]
    feca:	6823      	ldr	r3, [r4, #0]
    fecc:	68dd      	ldr	r5, [r3, #12]
        GET_STR_HASH(args[0], str_hash);
    fece:	6820      	ldr	r0, [r4, #0]
    fed0:	f000 0303 	and.w	r3, r0, #3
    fed4:	2b02      	cmp	r3, #2
    fed6:	d010      	beq.n	fefa <bytes_make_new+0x8a>
    fed8:	6844      	ldr	r4, [r0, #4]
        if (str_hash == 0) {
    feda:	b19c      	cbz	r4, ff04 <bytes_make_new+0x94>
        mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(&mp_type_bytes, NULL, str_len));
    fedc:	9a01      	ldr	r2, [sp, #4]
    fede:	2100      	movs	r1, #0
    fee0:	4829      	ldr	r0, [pc, #164]	; (ff88 <bytes_make_new+0x118>)
    fee2:	f7ff fcbb 	bl	f85c <mp_obj_new_str_copy>
        o->data = str_data;
    fee6:	60c5      	str	r5, [r0, #12]
        o->hash = str_hash;
    fee8:	6044      	str	r4, [r0, #4]
}
    feea:	b011      	add	sp, #68	; 0x44
    feec:	bd30      	pop	{r4, r5, pc}
        GET_STR_DATA_LEN(args[0], str_data, str_len);
    feee:	a901      	add	r1, sp, #4
    fef0:	0880      	lsrs	r0, r0, #2
    fef2:	f7f1 fbd3 	bl	169c <qstr_data>
    fef6:	4605      	mov	r5, r0
    fef8:	e7e9      	b.n	fece <bytes_make_new+0x5e>
        GET_STR_HASH(args[0], str_hash);
    fefa:	0880      	lsrs	r0, r0, #2
    fefc:	f7f1 fbbf 	bl	167e <qstr_hash>
    ff00:	4604      	mov	r4, r0
    ff02:	e7ea      	b.n	feda <bytes_make_new+0x6a>
            str_hash = qstr_compute_hash(str_data, str_len);
    ff04:	9901      	ldr	r1, [sp, #4]
    ff06:	4628      	mov	r0, r5
    ff08:	f7f1 fadc 	bl	14c4 <qstr_compute_hash>
    ff0c:	4604      	mov	r4, r0
    ff0e:	e7e5      	b.n	fedc <bytes_make_new+0x6c>
            mp_raise_ValueError(NULL);
    ff10:	2000      	movs	r0, #0
    ff12:	f7fa f9c9 	bl	a2a8 <mp_raise_ValueError>
    if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
    ff16:	2201      	movs	r2, #1
    ff18:	a90d      	add	r1, sp, #52	; 0x34
    ff1a:	f7fb f9b6 	bl	b28a <mp_get_buffer>
    ff1e:	b9d0      	cbnz	r0, ff56 <bytes_make_new+0xe6>
    mp_obj_t len_in = mp_obj_len_maybe(args[0]);
    ff20:	6820      	ldr	r0, [r4, #0]
    ff22:	f7fb f901 	bl	b128 <mp_obj_len_maybe>
    if (len_in == MP_OBJ_NULL) {
    ff26:	b1d8      	cbz	r0, ff60 <bytes_make_new+0xf0>
        vstr_init(&vstr, len);
    ff28:	1041      	asrs	r1, r0, #1
    ff2a:	a809      	add	r0, sp, #36	; 0x24
    ff2c:	f7f1 fc45 	bl	17ba <vstr_init>
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
    ff30:	a905      	add	r1, sp, #20
    ff32:	6820      	ldr	r0, [r4, #0]
    ff34:	f7f9 fcec 	bl	9910 <mp_getiter>
    ff38:	4604      	mov	r4, r0
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    ff3a:	4620      	mov	r0, r4
    ff3c:	f7f9 fd56 	bl	99ec <mp_iternext>
    ff40:	2804      	cmp	r0, #4
    ff42:	d015      	beq.n	ff70 <bytes_make_new+0x100>
        mp_int_t val = mp_obj_get_int(item);
    ff44:	f7fa ff42 	bl	adcc <mp_obj_get_int>
        if (val < 0 || val > 255) {
    ff48:	28ff      	cmp	r0, #255	; 0xff
    ff4a:	d80e      	bhi.n	ff6a <bytes_make_new+0xfa>
        vstr_add_byte(&vstr, val);
    ff4c:	b2c1      	uxtb	r1, r0
    ff4e:	a809      	add	r0, sp, #36	; 0x24
    ff50:	f7f1 fcab 	bl	18aa <vstr_add_byte>
    ff54:	e7f1      	b.n	ff3a <bytes_make_new+0xca>
        return mp_obj_new_bytes(bufinfo.buf, bufinfo.len);
    ff56:	990e      	ldr	r1, [sp, #56]	; 0x38
    ff58:	980d      	ldr	r0, [sp, #52]	; 0x34
    ff5a:	f7ff ff7f 	bl	fe5c <mp_obj_new_bytes>
    ff5e:	e7c4      	b.n	feea <bytes_make_new+0x7a>
        vstr_init(&vstr, 16);
    ff60:	2110      	movs	r1, #16
    ff62:	a809      	add	r0, sp, #36	; 0x24
    ff64:	f7f1 fc29 	bl	17ba <vstr_init>
    ff68:	e7e2      	b.n	ff30 <bytes_make_new+0xc0>
            mp_raise_ValueError("bytes value out of range");
    ff6a:	4808      	ldr	r0, [pc, #32]	; (ff8c <bytes_make_new+0x11c>)
    ff6c:	f7fa f99c 	bl	a2a8 <mp_raise_ValueError>
    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
    ff70:	a909      	add	r1, sp, #36	; 0x24
    ff72:	4805      	ldr	r0, [pc, #20]	; (ff88 <bytes_make_new+0x118>)
    ff74:	f7ff fce6 	bl	f944 <mp_obj_new_str_from_vstr>
    ff78:	e7b7      	b.n	feea <bytes_make_new+0x7a>
    mp_raise_TypeError("wrong number of arguments");
    ff7a:	4805      	ldr	r0, [pc, #20]	; (ff90 <bytes_make_new+0x120>)
    ff7c:	f7fa fb94 	bl	a6a8 <mp_raise_TypeError>
        return mp_const_empty_bytes;
    ff80:	4804      	ldr	r0, [pc, #16]	; (ff94 <bytes_make_new+0x124>)
}
    ff82:	4770      	bx	lr
    ff84:	00028104 	.word	0x00028104
    ff88:	000280c8 	.word	0x000280c8
    ff8c:	00027d84 	.word	0x00027d84
    ff90:	00027da0 	.word	0x00027da0
    ff94:	00027dd4 	.word	0x00027dd4

0000ff98 <mp_obj_new_str_of_type>:
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len) {
    ff98:	b510      	push	{r4, lr}
    ff9a:	460c      	mov	r4, r1
    if (type == &mp_type_str) {
    ff9c:	4b06      	ldr	r3, [pc, #24]	; (ffb8 <mp_obj_new_str_of_type+0x20>)
    ff9e:	4283      	cmp	r3, r0
    ffa0:	d004      	beq.n	ffac <mp_obj_new_str_of_type+0x14>
        return mp_obj_new_bytes(data, len);
    ffa2:	4611      	mov	r1, r2
    ffa4:	4620      	mov	r0, r4
    ffa6:	f7ff ff59 	bl	fe5c <mp_obj_new_bytes>
}
    ffaa:	bd10      	pop	{r4, pc}
        return mp_obj_new_str((const char*)data, len);
    ffac:	4611      	mov	r1, r2
    ffae:	4620      	mov	r0, r4
    ffb0:	f7ff fedc 	bl	fd6c <mp_obj_new_str>
    ffb4:	e7f9      	b.n	ffaa <mp_obj_new_str_of_type+0x12>
    ffb6:	bf00      	nop
    ffb8:	00028104 	.word	0x00028104

0000ffbc <str_uni_strip>:
STATIC mp_obj_t str_uni_strip(int type, size_t n_args, const mp_obj_t *args) {
    ffbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffc0:	b08b      	sub	sp, #44	; 0x2c
    ffc2:	4682      	mov	sl, r0
    ffc4:	460c      	mov	r4, r1
    ffc6:	4693      	mov	fp, r2
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
    ffc8:	6810      	ldr	r0, [r2, #0]
    ffca:	f000 0303 	and.w	r3, r0, #3
    ffce:	2b02      	cmp	r3, #2
    ffd0:	d005      	beq.n	ffde <str_uni_strip+0x22>
    ffd2:	bb33      	cbnz	r3, 10022 <str_uni_strip+0x66>
    ffd4:	6803      	ldr	r3, [r0, #0]
    ffd6:	699a      	ldr	r2, [r3, #24]
    ffd8:	4b55      	ldr	r3, [pc, #340]	; (10130 <str_uni_strip+0x174>)
    ffda:	429a      	cmp	r2, r3
    ffdc:	d121      	bne.n	10022 <str_uni_strip+0x66>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
    ffde:	f7fa fdcd 	bl	ab7c <mp_obj_get_type>
    ffe2:	4605      	mov	r5, r0
    ffe4:	9006      	str	r0, [sp, #24]
    if (n_args == 1) {
    ffe6:	2c01      	cmp	r4, #1
    ffe8:	d122      	bne.n	10030 <str_uni_strip+0x74>
        chars_to_del_len = sizeof(whitespace) - 1;
    ffea:	2706      	movs	r7, #6
        chars_to_del = whitespace;
    ffec:	4b51      	ldr	r3, [pc, #324]	; (10134 <str_uni_strip+0x178>)
    ffee:	9303      	str	r3, [sp, #12]
    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
    fff0:	f8db 0000 	ldr.w	r0, [fp]
    fff4:	f000 0303 	and.w	r3, r0, #3
    fff8:	2b02      	cmp	r3, #2
    fffa:	d035      	beq.n	10068 <str_uni_strip+0xac>
    fffc:	6883      	ldr	r3, [r0, #8]
    fffe:	9309      	str	r3, [sp, #36]	; 0x24
   10000:	f8db 3000 	ldr.w	r3, [fp]
   10004:	68de      	ldr	r6, [r3, #12]
    if (type == RSTRIP) {
   10006:	f1ba 0f01 	cmp.w	sl, #1
   1000a:	d033      	beq.n	10074 <str_uni_strip+0xb8>
    int delta = 1;
   1000c:	f04f 0801 	mov.w	r8, #1
    size_t i = 0;
   10010:	2400      	movs	r4, #0
    for (size_t len = orig_str_len; len > 0; len--) {
   10012:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10014:	9307      	str	r3, [sp, #28]
   10016:	461d      	mov	r5, r3
    size_t last_good_char_pos = 0;
   10018:	2300      	movs	r3, #0
   1001a:	9304      	str	r3, [sp, #16]
    bool first_good_char_pos_set = false;
   1001c:	4699      	mov	r9, r3
    size_t first_good_char_pos = 0;
   1001e:	9305      	str	r3, [sp, #20]
    for (size_t len = orig_str_len; len > 0; len--) {
   10020:	e041      	b.n	100a6 <str_uni_strip+0xea>
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   10022:	4b45      	ldr	r3, [pc, #276]	; (10138 <str_uni_strip+0x17c>)
   10024:	4a45      	ldr	r2, [pc, #276]	; (1013c <str_uni_strip+0x180>)
   10026:	f240 310d 	movw	r1, #781	; 0x30d
   1002a:	4845      	ldr	r0, [pc, #276]	; (10140 <str_uni_strip+0x184>)
   1002c:	f008 fa96 	bl	1855c <__assert_func>
        if (mp_obj_get_type(args[1]) != self_type) {
   10030:	f8db 0004 	ldr.w	r0, [fp, #4]
   10034:	f7fa fda2 	bl	ab7c <mp_obj_get_type>
   10038:	4285      	cmp	r5, r0
   1003a:	d10b      	bne.n	10054 <str_uni_strip+0x98>
        GET_STR_DATA_LEN(args[1], s, l);
   1003c:	f8db 0004 	ldr.w	r0, [fp, #4]
   10040:	f000 0303 	and.w	r3, r0, #3
   10044:	2b02      	cmp	r3, #2
   10046:	d009      	beq.n	1005c <str_uni_strip+0xa0>
   10048:	6883      	ldr	r3, [r0, #8]
   1004a:	9308      	str	r3, [sp, #32]
   1004c:	68c3      	ldr	r3, [r0, #12]
   1004e:	9303      	str	r3, [sp, #12]
        chars_to_del_len = l;
   10050:	9f08      	ldr	r7, [sp, #32]
   10052:	e7cd      	b.n	fff0 <str_uni_strip+0x34>
            bad_implicit_conversion(args[1]);
   10054:	f8db 0004 	ldr.w	r0, [fp, #4]
   10058:	f7ff f928 	bl	f2ac <bad_implicit_conversion>
        GET_STR_DATA_LEN(args[1], s, l);
   1005c:	a908      	add	r1, sp, #32
   1005e:	0880      	lsrs	r0, r0, #2
   10060:	f7f1 fb1c 	bl	169c <qstr_data>
   10064:	9003      	str	r0, [sp, #12]
   10066:	e7f3      	b.n	10050 <str_uni_strip+0x94>
    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
   10068:	a909      	add	r1, sp, #36	; 0x24
   1006a:	0880      	lsrs	r0, r0, #2
   1006c:	f7f1 fb16 	bl	169c <qstr_data>
   10070:	4606      	mov	r6, r0
   10072:	e7c8      	b.n	10006 <str_uni_strip+0x4a>
        i = orig_str_len - 1;
   10074:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10076:	3c01      	subs	r4, #1
        delta = -1;
   10078:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1007c:	e7c9      	b.n	10012 <str_uni_strip+0x56>
                    last_good_char_pos = orig_str_len - 1;
   1007e:	9b07      	ldr	r3, [sp, #28]
   10080:	3b01      	subs	r3, #1
   10082:	9304      	str	r3, [sp, #16]
                first_good_char_pos = i;
   10084:	9405      	str	r4, [sp, #20]
                first_good_char_pos_set = true;
   10086:	f04f 0901 	mov.w	r9, #1
    if (!first_good_char_pos_set) {
   1008a:	f1b9 0f00 	cmp.w	r9, #0
   1008e:	d12b      	bne.n	100e8 <str_uni_strip+0x12c>
        if (self_type == &mp_type_str) {
   10090:	4b2c      	ldr	r3, [pc, #176]	; (10144 <str_uni_strip+0x188>)
   10092:	9a06      	ldr	r2, [sp, #24]
   10094:	429a      	cmp	r2, r3
   10096:	d025      	beq.n	100e4 <str_uni_strip+0x128>
            return mp_const_empty_bytes;
   10098:	482b      	ldr	r0, [pc, #172]	; (10148 <str_uni_strip+0x18c>)
}
   1009a:	b00b      	add	sp, #44	; 0x2c
   1009c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            last_good_char_pos = i;
   100a0:	9404      	str	r4, [sp, #16]
        i += delta;
   100a2:	4444      	add	r4, r8
    for (size_t len = orig_str_len; len > 0; len--) {
   100a4:	3d01      	subs	r5, #1
   100a6:	2d00      	cmp	r5, #0
   100a8:	d0ef      	beq.n	1008a <str_uni_strip+0xce>
        if (find_subbytes(chars_to_del, chars_to_del_len, &orig_str[i], 1, 1) == NULL) {
   100aa:	2301      	movs	r3, #1
   100ac:	9300      	str	r3, [sp, #0]
   100ae:	1932      	adds	r2, r6, r4
   100b0:	4639      	mov	r1, r7
   100b2:	9803      	ldr	r0, [sp, #12]
   100b4:	f7ff fa70 	bl	f598 <find_subbytes>
   100b8:	2800      	cmp	r0, #0
   100ba:	d1f2      	bne.n	100a2 <str_uni_strip+0xe6>
            if (!first_good_char_pos_set) {
   100bc:	f1b9 0f00 	cmp.w	r9, #0
   100c0:	d1ee      	bne.n	100a0 <str_uni_strip+0xe4>
                if (type == LSTRIP) {
   100c2:	f1ba 0f00 	cmp.w	sl, #0
   100c6:	d0da      	beq.n	1007e <str_uni_strip+0xc2>
                } else if (type == RSTRIP) {
   100c8:	f1ba 0f01 	cmp.w	sl, #1
   100cc:	d004      	beq.n	100d8 <str_uni_strip+0x11c>
            last_good_char_pos = i;
   100ce:	9404      	str	r4, [sp, #16]
                first_good_char_pos = i;
   100d0:	9405      	str	r4, [sp, #20]
                first_good_char_pos_set = true;
   100d2:	f04f 0901 	mov.w	r9, #1
   100d6:	e7e4      	b.n	100a2 <str_uni_strip+0xe6>
                    last_good_char_pos = i;
   100d8:	9404      	str	r4, [sp, #16]
                first_good_char_pos_set = true;
   100da:	f04f 0901 	mov.w	r9, #1
                    first_good_char_pos = 0;
   100de:	2300      	movs	r3, #0
   100e0:	9305      	str	r3, [sp, #20]
   100e2:	e7d2      	b.n	1008a <str_uni_strip+0xce>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   100e4:	2006      	movs	r0, #6
   100e6:	e7d8      	b.n	1009a <str_uni_strip+0xde>
    assert(last_good_char_pos >= first_good_char_pos);
   100e8:	9b05      	ldr	r3, [sp, #20]
   100ea:	9a04      	ldr	r2, [sp, #16]
   100ec:	4293      	cmp	r3, r2
   100ee:	d80a      	bhi.n	10106 <str_uni_strip+0x14a>
    size_t stripped_len = last_good_char_pos - first_good_char_pos + 1;
   100f0:	9a04      	ldr	r2, [sp, #16]
   100f2:	9b05      	ldr	r3, [sp, #20]
   100f4:	1ad2      	subs	r2, r2, r3
   100f6:	3201      	adds	r2, #1
    if (stripped_len == orig_str_len) {
   100f8:	9907      	ldr	r1, [sp, #28]
   100fa:	4291      	cmp	r1, r2
   100fc:	d111      	bne.n	10122 <str_uni_strip+0x166>
        assert(first_good_char_pos == 0);
   100fe:	b94b      	cbnz	r3, 10114 <str_uni_strip+0x158>
        return args[0];
   10100:	f8db 0000 	ldr.w	r0, [fp]
   10104:	e7c9      	b.n	1009a <str_uni_strip+0xde>
    assert(last_good_char_pos >= first_good_char_pos);
   10106:	4b11      	ldr	r3, [pc, #68]	; (1014c <str_uni_strip+0x190>)
   10108:	4a0c      	ldr	r2, [pc, #48]	; (1013c <str_uni_strip+0x180>)
   1010a:	f240 3147 	movw	r1, #839	; 0x347
   1010e:	480c      	ldr	r0, [pc, #48]	; (10140 <str_uni_strip+0x184>)
   10110:	f008 fa24 	bl	1855c <__assert_func>
        assert(first_good_char_pos == 0);
   10114:	4b0e      	ldr	r3, [pc, #56]	; (10150 <str_uni_strip+0x194>)
   10116:	4a09      	ldr	r2, [pc, #36]	; (1013c <str_uni_strip+0x180>)
   10118:	f240 314d 	movw	r1, #845	; 0x34d
   1011c:	4808      	ldr	r0, [pc, #32]	; (10140 <str_uni_strip+0x184>)
   1011e:	f008 fa1d 	bl	1855c <__assert_func>
    return mp_obj_new_str_of_type(self_type, orig_str + first_good_char_pos, stripped_len);
   10122:	9b05      	ldr	r3, [sp, #20]
   10124:	4433      	add	r3, r6
   10126:	4619      	mov	r1, r3
   10128:	9806      	ldr	r0, [sp, #24]
   1012a:	f7ff ff35 	bl	ff98 <mp_obj_new_str_of_type>
   1012e:	e7b4      	b.n	1009a <str_uni_strip+0xde>
   10130:	000106e5 	.word	0x000106e5
   10134:	00028680 	.word	0x00028680
   10138:	00028238 	.word	0x00028238
   1013c:	00027cec 	.word	0x00027cec
   10140:	000282c0 	.word	0x000282c0
   10144:	00028104 	.word	0x00028104
   10148:	00027dd4 	.word	0x00027dd4
   1014c:	00028630 	.word	0x00028630
   10150:	0002865c 	.word	0x0002865c

00010154 <str_strip>:
STATIC mp_obj_t str_strip(size_t n_args, const mp_obj_t *args) {
   10154:	b508      	push	{r3, lr}
    return str_uni_strip(STRIP, n_args, args);
   10156:	460a      	mov	r2, r1
   10158:	4601      	mov	r1, r0
   1015a:	2002      	movs	r0, #2
   1015c:	f7ff ff2e 	bl	ffbc <str_uni_strip>
}
   10160:	bd08      	pop	{r3, pc}

00010162 <str_lstrip>:
STATIC mp_obj_t str_lstrip(size_t n_args, const mp_obj_t *args) {
   10162:	b508      	push	{r3, lr}
    return str_uni_strip(LSTRIP, n_args, args);
   10164:	460a      	mov	r2, r1
   10166:	4601      	mov	r1, r0
   10168:	2000      	movs	r0, #0
   1016a:	f7ff ff27 	bl	ffbc <str_uni_strip>
}
   1016e:	bd08      	pop	{r3, pc}

00010170 <str_rstrip>:
STATIC mp_obj_t str_rstrip(size_t n_args, const mp_obj_t *args) {
   10170:	b508      	push	{r3, lr}
    return str_uni_strip(RSTRIP, n_args, args);
   10172:	460a      	mov	r2, r1
   10174:	4601      	mov	r1, r0
   10176:	2001      	movs	r0, #1
   10178:	f7ff ff20 	bl	ffbc <str_uni_strip>
}
   1017c:	bd08      	pop	{r3, pc}

0001017e <mp_obj_str_equal>:
bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2) {
   1017e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10182:	b082      	sub	sp, #8
   10184:	f000 0603 	and.w	r6, r0, #3
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   10188:	2e02      	cmp	r6, #2
   1018a:	d012      	beq.n	101b2 <mp_obj_str_equal+0x34>
   1018c:	460d      	mov	r5, r1
   1018e:	4604      	mov	r4, r0
        GET_STR_HASH(s1, h1);
   10190:	2e02      	cmp	r6, #2
   10192:	d017      	beq.n	101c4 <mp_obj_str_equal+0x46>
   10194:	f8d0 8004 	ldr.w	r8, [r0, #4]
   10198:	f005 0703 	and.w	r7, r5, #3
        GET_STR_HASH(s2, h2);
   1019c:	2f02      	cmp	r7, #2
   1019e:	d016      	beq.n	101ce <mp_obj_str_equal+0x50>
   101a0:	6868      	ldr	r0, [r5, #4]
        if (h1 != 0 && h2 != 0 && h1 != h2) {
   101a2:	f1b8 0f00 	cmp.w	r8, #0
   101a6:	d016      	beq.n	101d6 <mp_obj_str_equal+0x58>
   101a8:	b1a8      	cbz	r0, 101d6 <mp_obj_str_equal+0x58>
   101aa:	4580      	cmp	r8, r0
   101ac:	d013      	beq.n	101d6 <mp_obj_str_equal+0x58>
            return false;
   101ae:	2000      	movs	r0, #0
   101b0:	e020      	b.n	101f4 <mp_obj_str_equal+0x76>
   101b2:	f001 0303 	and.w	r3, r1, #3
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   101b6:	2b02      	cmp	r3, #2
   101b8:	d1e8      	bne.n	1018c <mp_obj_str_equal+0xe>
        return s1 == s2;
   101ba:	4288      	cmp	r0, r1
   101bc:	bf14      	ite	ne
   101be:	2000      	movne	r0, #0
   101c0:	2001      	moveq	r0, #1
   101c2:	e017      	b.n	101f4 <mp_obj_str_equal+0x76>
        GET_STR_HASH(s1, h1);
   101c4:	0880      	lsrs	r0, r0, #2
   101c6:	f7f1 fa5a 	bl	167e <qstr_hash>
   101ca:	4680      	mov	r8, r0
   101cc:	e7e4      	b.n	10198 <mp_obj_str_equal+0x1a>
        GET_STR_HASH(s2, h2);
   101ce:	08a8      	lsrs	r0, r5, #2
   101d0:	f7f1 fa55 	bl	167e <qstr_hash>
   101d4:	e7e5      	b.n	101a2 <mp_obj_str_equal+0x24>
        GET_STR_DATA_LEN(s1, d1, l1);
   101d6:	2e02      	cmp	r6, #2
   101d8:	d00f      	beq.n	101fa <mp_obj_str_equal+0x7c>
   101da:	68a3      	ldr	r3, [r4, #8]
   101dc:	9300      	str	r3, [sp, #0]
   101de:	68e4      	ldr	r4, [r4, #12]
        GET_STR_DATA_LEN(s2, d2, l2);
   101e0:	2f02      	cmp	r7, #2
   101e2:	d010      	beq.n	10206 <mp_obj_str_equal+0x88>
   101e4:	68ab      	ldr	r3, [r5, #8]
   101e6:	9301      	str	r3, [sp, #4]
   101e8:	68e9      	ldr	r1, [r5, #12]
        if (l1 != l2) {
   101ea:	9a00      	ldr	r2, [sp, #0]
   101ec:	9b01      	ldr	r3, [sp, #4]
   101ee:	429a      	cmp	r2, r3
   101f0:	d00f      	beq.n	10212 <mp_obj_str_equal+0x94>
            return false;
   101f2:	2000      	movs	r0, #0
}
   101f4:	b002      	add	sp, #8
   101f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        GET_STR_DATA_LEN(s1, d1, l1);
   101fa:	4669      	mov	r1, sp
   101fc:	08a0      	lsrs	r0, r4, #2
   101fe:	f7f1 fa4d 	bl	169c <qstr_data>
   10202:	4604      	mov	r4, r0
   10204:	e7ec      	b.n	101e0 <mp_obj_str_equal+0x62>
        GET_STR_DATA_LEN(s2, d2, l2);
   10206:	a901      	add	r1, sp, #4
   10208:	08a8      	lsrs	r0, r5, #2
   1020a:	f7f1 fa47 	bl	169c <qstr_data>
   1020e:	4601      	mov	r1, r0
   10210:	e7eb      	b.n	101ea <mp_obj_str_equal+0x6c>
        return memcmp(d1, d2, l1) == 0;
   10212:	4620      	mov	r0, r4
   10214:	f00b fb64 	bl	1b8e0 <memcmp>
   10218:	fab0 f080 	clz	r0, r0
   1021c:	0940      	lsrs	r0, r0, #5
   1021e:	e7e9      	b.n	101f4 <mp_obj_str_equal+0x76>

00010220 <mp_obj_str_get_qstr>:
qstr mp_obj_str_get_qstr(mp_obj_t self_in) {
   10220:	b508      	push	{r3, lr}
   10222:	f000 0303 	and.w	r3, r0, #3
    if (MP_OBJ_IS_QSTR(self_in)) {
   10226:	2b02      	cmp	r3, #2
   10228:	d009      	beq.n	1023e <mp_obj_str_get_qstr+0x1e>
    } else if (MP_OBJ_IS_TYPE(self_in, &mp_type_str)) {
   1022a:	b953      	cbnz	r3, 10242 <mp_obj_str_get_qstr+0x22>
   1022c:	6802      	ldr	r2, [r0, #0]
   1022e:	4b06      	ldr	r3, [pc, #24]	; (10248 <mp_obj_str_get_qstr+0x28>)
   10230:	429a      	cmp	r2, r3
   10232:	d106      	bne.n	10242 <mp_obj_str_get_qstr+0x22>
        return qstr_from_strn((char*)self->data, self->len);
   10234:	6881      	ldr	r1, [r0, #8]
   10236:	68c0      	ldr	r0, [r0, #12]
   10238:	f7f1 f996 	bl	1568 <qstr_from_strn>
}
   1023c:	bd08      	pop	{r3, pc}
        return MP_OBJ_QSTR_VALUE(self_in);
   1023e:	0880      	lsrs	r0, r0, #2
   10240:	e7fc      	b.n	1023c <mp_obj_str_get_qstr+0x1c>
        bad_implicit_conversion(self_in);
   10242:	f7ff f833 	bl	f2ac <bad_implicit_conversion>
   10246:	bf00      	nop
   10248:	00028104 	.word	0x00028104

0001024c <mp_obj_str_get_str>:
const char *mp_obj_str_get_str(mp_obj_t self_in) {
   1024c:	b500      	push	{lr}
   1024e:	b083      	sub	sp, #12
   10250:	f000 0303 	and.w	r3, r0, #3
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   10254:	2b02      	cmp	r3, #2
   10256:	d005      	beq.n	10264 <mp_obj_str_get_str+0x18>
   10258:	b97b      	cbnz	r3, 1027a <mp_obj_str_get_str+0x2e>
   1025a:	6802      	ldr	r2, [r0, #0]
   1025c:	6991      	ldr	r1, [r2, #24]
   1025e:	4a08      	ldr	r2, [pc, #32]	; (10280 <mp_obj_str_get_str+0x34>)
   10260:	4291      	cmp	r1, r2
   10262:	d10a      	bne.n	1027a <mp_obj_str_get_str+0x2e>
        GET_STR_DATA_LEN(self_in, s, l);
   10264:	2b02      	cmp	r3, #2
   10266:	d003      	beq.n	10270 <mp_obj_str_get_str+0x24>
   10268:	68c0      	ldr	r0, [r0, #12]
}
   1026a:	b003      	add	sp, #12
   1026c:	f85d fb04 	ldr.w	pc, [sp], #4
        GET_STR_DATA_LEN(self_in, s, l);
   10270:	a901      	add	r1, sp, #4
   10272:	0880      	lsrs	r0, r0, #2
   10274:	f7f1 fa12 	bl	169c <qstr_data>
   10278:	e7f7      	b.n	1026a <mp_obj_str_get_str+0x1e>
        bad_implicit_conversion(self_in);
   1027a:	f7ff f817 	bl	f2ac <bad_implicit_conversion>
   1027e:	bf00      	nop
   10280:	000106e5 	.word	0x000106e5

00010284 <mp_obj_str_get_data>:
const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len) {
   10284:	b510      	push	{r4, lr}
   10286:	b082      	sub	sp, #8
   10288:	460c      	mov	r4, r1
   1028a:	f000 0303 	and.w	r3, r0, #3
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   1028e:	2b02      	cmp	r3, #2
   10290:	d005      	beq.n	1029e <mp_obj_str_get_data+0x1a>
   10292:	b993      	cbnz	r3, 102ba <mp_obj_str_get_data+0x36>
   10294:	6802      	ldr	r2, [r0, #0]
   10296:	6991      	ldr	r1, [r2, #24]
   10298:	4a09      	ldr	r2, [pc, #36]	; (102c0 <mp_obj_str_get_data+0x3c>)
   1029a:	4291      	cmp	r1, r2
   1029c:	d10d      	bne.n	102ba <mp_obj_str_get_data+0x36>
        GET_STR_DATA_LEN(self_in, s, l);
   1029e:	2b02      	cmp	r3, #2
   102a0:	d006      	beq.n	102b0 <mp_obj_str_get_data+0x2c>
   102a2:	6883      	ldr	r3, [r0, #8]
   102a4:	9301      	str	r3, [sp, #4]
   102a6:	68c0      	ldr	r0, [r0, #12]
        *len = l;
   102a8:	9b01      	ldr	r3, [sp, #4]
   102aa:	6023      	str	r3, [r4, #0]
}
   102ac:	b002      	add	sp, #8
   102ae:	bd10      	pop	{r4, pc}
        GET_STR_DATA_LEN(self_in, s, l);
   102b0:	a901      	add	r1, sp, #4
   102b2:	0880      	lsrs	r0, r0, #2
   102b4:	f7f1 f9f2 	bl	169c <qstr_data>
   102b8:	e7f6      	b.n	102a8 <mp_obj_str_get_data+0x24>
        bad_implicit_conversion(self_in);
   102ba:	f7fe fff7 	bl	f2ac <bad_implicit_conversion>
   102be:	bf00      	nop
   102c0:	000106e5 	.word	0x000106e5

000102c4 <str_modulo_format>:
STATIC mp_obj_t str_modulo_format(mp_obj_t pattern, size_t n_args, const mp_obj_t *args, mp_obj_t dict) {
   102c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102c8:	b09b      	sub	sp, #108	; 0x6c
   102ca:	4604      	mov	r4, r0
   102cc:	468b      	mov	fp, r1
   102ce:	9206      	str	r2, [sp, #24]
   102d0:	9305      	str	r3, [sp, #20]
   102d2:	f000 0503 	and.w	r5, r0, #3
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   102d6:	2d02      	cmp	r5, #2
   102d8:	d005      	beq.n	102e6 <str_modulo_format+0x22>
   102da:	b98d      	cbnz	r5, 10300 <str_modulo_format+0x3c>
   102dc:	6803      	ldr	r3, [r0, #0]
   102de:	699a      	ldr	r2, [r3, #24]
   102e0:	4ba6      	ldr	r3, [pc, #664]	; (1057c <str_modulo_format+0x2b8>)
   102e2:	429a      	cmp	r2, r3
   102e4:	d10c      	bne.n	10300 <str_modulo_format+0x3c>
    GET_STR_DATA_LEN(pattern, str, len);
   102e6:	2d02      	cmp	r5, #2
   102e8:	d011      	beq.n	1030e <str_modulo_format+0x4a>
   102ea:	68a3      	ldr	r3, [r4, #8]
   102ec:	9319      	str	r3, [sp, #100]	; 0x64
   102ee:	68e3      	ldr	r3, [r4, #12]
   102f0:	9309      	str	r3, [sp, #36]	; 0x24
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   102f2:	b995      	cbnz	r5, 1031a <str_modulo_format+0x56>
   102f4:	6822      	ldr	r2, [r4, #0]
   102f6:	4ba2      	ldr	r3, [pc, #648]	; (10580 <str_modulo_format+0x2bc>)
   102f8:	429a      	cmp	r2, r3
   102fa:	d01b      	beq.n	10334 <str_modulo_format+0x70>
   102fc:	2300      	movs	r3, #0
   102fe:	e00d      	b.n	1031c <str_modulo_format+0x58>
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   10300:	4ba0      	ldr	r3, [pc, #640]	; (10584 <str_modulo_format+0x2c0>)
   10302:	4aa1      	ldr	r2, [pc, #644]	; (10588 <str_modulo_format+0x2c4>)
   10304:	f240 516b 	movw	r1, #1387	; 0x56b
   10308:	48a0      	ldr	r0, [pc, #640]	; (1058c <str_modulo_format+0x2c8>)
   1030a:	f008 f927 	bl	1855c <__assert_func>
    GET_STR_DATA_LEN(pattern, str, len);
   1030e:	a919      	add	r1, sp, #100	; 0x64
   10310:	08a0      	lsrs	r0, r4, #2
   10312:	f7f1 f9c3 	bl	169c <qstr_data>
   10316:	9009      	str	r0, [sp, #36]	; 0x24
   10318:	e7eb      	b.n	102f2 <str_modulo_format+0x2e>
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   1031a:	2300      	movs	r3, #0
   1031c:	9308      	str	r3, [sp, #32]
    vstr_init_print(&vstr, 16, &print);
   1031e:	aa13      	add	r2, sp, #76	; 0x4c
   10320:	2110      	movs	r1, #16
   10322:	a815      	add	r0, sp, #84	; 0x54
   10324:	f7f1 fa6a 	bl	17fc <vstr_init_print>
    for (const byte *top = str + len; str < top; str++) {
   10328:	9f19      	ldr	r7, [sp, #100]	; 0x64
   1032a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1032c:	442f      	add	r7, r5
    size_t arg_i = 0;
   1032e:	f04f 0a00 	mov.w	sl, #0
    for (const byte *top = str + len; str < top; str++) {
   10332:	e006      	b.n	10342 <str_modulo_format+0x7e>
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   10334:	2301      	movs	r3, #1
   10336:	e7f1      	b.n	1031c <str_modulo_format+0x58>
            vstr_add_byte(&vstr, *str);
   10338:	a815      	add	r0, sp, #84	; 0x54
   1033a:	f7f1 fab6 	bl	18aa <vstr_add_byte>
            continue;
   1033e:	462c      	mov	r4, r5
    for (const byte *top = str + len; str < top; str++) {
   10340:	1c65      	adds	r5, r4, #1
   10342:	42bd      	cmp	r5, r7
   10344:	f080 81b1 	bcs.w	106aa <str_modulo_format+0x3e6>
        if (*str != '%') {
   10348:	7829      	ldrb	r1, [r5, #0]
   1034a:	2925      	cmp	r1, #37	; 0x25
   1034c:	d1f4      	bne.n	10338 <str_modulo_format+0x74>
        if (++str >= top) {
   1034e:	1c6c      	adds	r4, r5, #1
   10350:	42a7      	cmp	r7, r4
   10352:	f240 80d1 	bls.w	104f8 <str_modulo_format+0x234>
        if (*str == '%') {
   10356:	786b      	ldrb	r3, [r5, #1]
   10358:	2b25      	cmp	r3, #37	; 0x25
   1035a:	d008      	beq.n	1036e <str_modulo_format+0xaa>
        if (*str == '(') {
   1035c:	2b28      	cmp	r3, #40	; 0x28
   1035e:	d00b      	beq.n	10378 <str_modulo_format+0xb4>
        mp_obj_t arg = MP_OBJ_NULL;
   10360:	2600      	movs	r6, #0
        int alt = 0;
   10362:	f04f 0900 	mov.w	r9, #0
        char fill = ' ';
   10366:	f04f 0820 	mov.w	r8, #32
        int flags = 0;
   1036a:	464d      	mov	r5, r9
        while (str < top) {
   1036c:	e024      	b.n	103b8 <str_modulo_format+0xf4>
            vstr_add_byte(&vstr, '%');
   1036e:	2125      	movs	r1, #37	; 0x25
   10370:	a815      	add	r0, sp, #84	; 0x54
   10372:	f7f1 fa9a 	bl	18aa <vstr_add_byte>
            continue;
   10376:	e7e3      	b.n	10340 <str_modulo_format+0x7c>
            if (dict == MP_OBJ_NULL) {
   10378:	9b05      	ldr	r3, [sp, #20]
   1037a:	b143      	cbz	r3, 1038e <str_modulo_format+0xca>
            const byte *key = ++str;
   1037c:	1ca8      	adds	r0, r5, #2
   1037e:	4604      	mov	r4, r0
            while (*str != ')') {
   10380:	7823      	ldrb	r3, [r4, #0]
   10382:	2b29      	cmp	r3, #41	; 0x29
   10384:	d009      	beq.n	1039a <str_modulo_format+0xd6>
                if (str >= top) {
   10386:	42bc      	cmp	r4, r7
   10388:	d204      	bcs.n	10394 <str_modulo_format+0xd0>
                ++str;
   1038a:	3401      	adds	r4, #1
   1038c:	e7f8      	b.n	10380 <str_modulo_format+0xbc>
                mp_raise_TypeError("format requires a dict");
   1038e:	4880      	ldr	r0, [pc, #512]	; (10590 <str_modulo_format+0x2cc>)
   10390:	f7fa f98a 	bl	a6a8 <mp_raise_TypeError>
                        mp_raise_ValueError("incomplete format key");
   10394:	487f      	ldr	r0, [pc, #508]	; (10594 <str_modulo_format+0x2d0>)
   10396:	f7f9 ff87 	bl	a2a8 <mp_raise_ValueError>
            mp_obj_t k_obj = mp_obj_new_str_via_qstr((const char*)key, str - key);
   1039a:	1a21      	subs	r1, r4, r0
   1039c:	f7ff fa7b 	bl	f896 <mp_obj_new_str_via_qstr>
            arg = mp_obj_dict_get(dict, k_obj);
   103a0:	4601      	mov	r1, r0
   103a2:	9805      	ldr	r0, [sp, #20]
   103a4:	f7fc f97e 	bl	c6a4 <mp_obj_dict_get>
   103a8:	4606      	mov	r6, r0
            str++;
   103aa:	3401      	adds	r4, #1
            arg_i = 1; // we used up the single dict argument
   103ac:	f04f 0a01 	mov.w	sl, #1
   103b0:	e7d7      	b.n	10362 <str_modulo_format+0x9e>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   103b2:	f045 0501 	orr.w	r5, r5, #1
            str++;
   103b6:	3401      	adds	r4, #1
        while (str < top) {
   103b8:	42bc      	cmp	r4, r7
   103ba:	d218      	bcs.n	103ee <str_modulo_format+0x12a>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   103bc:	7823      	ldrb	r3, [r4, #0]
   103be:	2b2d      	cmp	r3, #45	; 0x2d
   103c0:	d0f7      	beq.n	103b2 <str_modulo_format+0xee>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   103c2:	2b2b      	cmp	r3, #43	; 0x2b
   103c4:	d00a      	beq.n	103dc <str_modulo_format+0x118>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   103c6:	2b20      	cmp	r3, #32
   103c8:	d00b      	beq.n	103e2 <str_modulo_format+0x11e>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   103ca:	2b23      	cmp	r3, #35	; 0x23
   103cc:	d00c      	beq.n	103e8 <str_modulo_format+0x124>
            else if (*str == '0') {
   103ce:	2b30      	cmp	r3, #48	; 0x30
   103d0:	d10d      	bne.n	103ee <str_modulo_format+0x12a>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
   103d2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
                fill = '0';
   103d6:	f04f 0830 	mov.w	r8, #48	; 0x30
   103da:	e7ec      	b.n	103b6 <str_modulo_format+0xf2>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   103dc:	f045 0502 	orr.w	r5, r5, #2
   103e0:	e7e9      	b.n	103b6 <str_modulo_format+0xf2>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   103e2:	f045 0504 	orr.w	r5, r5, #4
   103e6:	e7e6      	b.n	103b6 <str_modulo_format+0xf2>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   103e8:	f04f 0910 	mov.w	r9, #16
   103ec:	e7e3      	b.n	103b6 <str_modulo_format+0xf2>
        int width = 0;
   103ee:	2300      	movs	r3, #0
   103f0:	930b      	str	r3, [sp, #44]	; 0x2c
        if (str < top) {
   103f2:	42bc      	cmp	r4, r7
   103f4:	d211      	bcs.n	1041a <str_modulo_format+0x156>
            if (*str == '*') {
   103f6:	7823      	ldrb	r3, [r4, #0]
   103f8:	2b2a      	cmp	r3, #42	; 0x2a
   103fa:	d156      	bne.n	104aa <str_modulo_format+0x1e6>
                if (arg_i >= n_args) {
   103fc:	45da      	cmp	sl, fp
   103fe:	f080 8086 	bcs.w	1050e <str_modulo_format+0x24a>
                width = mp_obj_get_int(args[arg_i++]);
   10402:	f10a 0301 	add.w	r3, sl, #1
   10406:	9307      	str	r3, [sp, #28]
   10408:	9a06      	ldr	r2, [sp, #24]
   1040a:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
   1040e:	f7fa fcdd 	bl	adcc <mp_obj_get_int>
   10412:	900b      	str	r0, [sp, #44]	; 0x2c
                str++;
   10414:	3401      	adds	r4, #1
                width = mp_obj_get_int(args[arg_i++]);
   10416:	f8dd a01c 	ldr.w	sl, [sp, #28]
        int prec = -1;
   1041a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1041e:	930c      	str	r3, [sp, #48]	; 0x30
        if (str < top && *str == '.') {
   10420:	42bc      	cmp	r4, r7
   10422:	d202      	bcs.n	1042a <str_modulo_format+0x166>
   10424:	7823      	ldrb	r3, [r4, #0]
   10426:	2b2e      	cmp	r3, #46	; 0x2e
   10428:	d046      	beq.n	104b8 <str_modulo_format+0x1f4>
        if (str >= top) {
   1042a:	42bc      	cmp	r4, r7
   1042c:	d264      	bcs.n	104f8 <str_modulo_format+0x234>
        if (arg == MP_OBJ_NULL) {
   1042e:	2e00      	cmp	r6, #0
   10430:	d065      	beq.n	104fe <str_modulo_format+0x23a>
        switch (*str) {
   10432:	7823      	ldrb	r3, [r4, #0]
   10434:	f1a3 0145 	sub.w	r1, r3, #69	; 0x45
   10438:	2933      	cmp	r1, #51	; 0x33
   1043a:	f200 812b 	bhi.w	10694 <str_modulo_format+0x3d0>
   1043e:	e8df f011 	tbh	[pc, r1, lsl #1]
   10442:	00c7      	.short	0x00c7
   10444:	00c700c7 	.word	0x00c700c7
   10448:	01290129 	.word	0x01290129
   1044c:	01290129 	.word	0x01290129
   10450:	01290129 	.word	0x01290129
   10454:	01290129 	.word	0x01290129
   10458:	01290129 	.word	0x01290129
   1045c:	01290129 	.word	0x01290129
   10460:	01290129 	.word	0x01290129
   10464:	01290129 	.word	0x01290129
   10468:	01290119 	.word	0x01290119
   1046c:	01290129 	.word	0x01290129
   10470:	01290129 	.word	0x01290129
   10474:	01290129 	.word	0x01290129
   10478:	01290129 	.word	0x01290129
   1047c:	00690129 	.word	0x00690129
   10480:	00c700b6 	.word	0x00c700b6
   10484:	00c700c7 	.word	0x00c700c7
   10488:	00b60129 	.word	0x00b60129
   1048c:	01290129 	.word	0x01290129
   10490:	01290129 	.word	0x01290129
   10494:	00d50129 	.word	0x00d50129
   10498:	01290129 	.word	0x01290129
   1049c:	00e800e8 	.word	0x00e800e8
   104a0:	00b60129 	.word	0x00b60129
   104a4:	01290129 	.word	0x01290129
   104a8:	0119      	.short	0x0119
                str = (const byte*)str_to_int((const char*)str, (const char*)top, &width);
   104aa:	aa0b      	add	r2, sp, #44	; 0x2c
   104ac:	4639      	mov	r1, r7
   104ae:	4620      	mov	r0, r4
   104b0:	f7fe fe4e 	bl	f150 <str_to_int>
   104b4:	4604      	mov	r4, r0
   104b6:	e7b0      	b.n	1041a <str_modulo_format+0x156>
            if (++str < top) {
   104b8:	1c60      	adds	r0, r4, #1
   104ba:	4287      	cmp	r7, r0
   104bc:	d91a      	bls.n	104f4 <str_modulo_format+0x230>
                if (*str == '*') {
   104be:	7863      	ldrb	r3, [r4, #1]
   104c0:	2b2a      	cmp	r3, #42	; 0x2a
   104c2:	d10e      	bne.n	104e2 <str_modulo_format+0x21e>
                    if (arg_i >= n_args) {
   104c4:	45da      	cmp	sl, fp
   104c6:	d222      	bcs.n	1050e <str_modulo_format+0x24a>
                    prec = mp_obj_get_int(args[arg_i++]);
   104c8:	f10a 0301 	add.w	r3, sl, #1
   104cc:	9307      	str	r3, [sp, #28]
   104ce:	9a06      	ldr	r2, [sp, #24]
   104d0:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
   104d4:	f7fa fc7a 	bl	adcc <mp_obj_get_int>
   104d8:	900c      	str	r0, [sp, #48]	; 0x30
                    str++;
   104da:	3402      	adds	r4, #2
                    prec = mp_obj_get_int(args[arg_i++]);
   104dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
   104e0:	e7a3      	b.n	1042a <str_modulo_format+0x166>
                    prec = 0;
   104e2:	aa1a      	add	r2, sp, #104	; 0x68
   104e4:	2300      	movs	r3, #0
   104e6:	f842 3d38 	str.w	r3, [r2, #-56]!
                    str = (const byte*)str_to_int((const char*)str, (const char*)top, &prec);
   104ea:	4639      	mov	r1, r7
   104ec:	f7fe fe30 	bl	f150 <str_to_int>
   104f0:	4604      	mov	r4, r0
   104f2:	e79a      	b.n	1042a <str_modulo_format+0x166>
            if (++str < top) {
   104f4:	4604      	mov	r4, r0
   104f6:	e798      	b.n	1042a <str_modulo_format+0x166>
                mp_raise_ValueError("incomplete format");
   104f8:	4827      	ldr	r0, [pc, #156]	; (10598 <str_modulo_format+0x2d4>)
   104fa:	f7f9 fed5 	bl	a2a8 <mp_raise_ValueError>
            if (arg_i >= n_args) {
   104fe:	45da      	cmp	sl, fp
   10500:	d205      	bcs.n	1050e <str_modulo_format+0x24a>
            arg = args[arg_i++];
   10502:	9b06      	ldr	r3, [sp, #24]
   10504:	f853 602a 	ldr.w	r6, [r3, sl, lsl #2]
   10508:	f10a 0a01 	add.w	sl, sl, #1
   1050c:	e791      	b.n	10432 <str_modulo_format+0x16e>
                mp_raise_TypeError("not enough arguments for format string");
   1050e:	4823      	ldr	r0, [pc, #140]	; (1059c <str_modulo_format+0x2d8>)
   10510:	f7fa f8ca 	bl	a6a8 <mp_raise_TypeError>
   10514:	f006 0303 	and.w	r3, r6, #3
                if (MP_OBJ_IS_STR(arg)) {
   10518:	2b02      	cmp	r3, #2
   1051a:	d019      	beq.n	10550 <str_modulo_format+0x28c>
   1051c:	b91b      	cbnz	r3, 10526 <str_modulo_format+0x262>
   1051e:	6832      	ldr	r2, [r6, #0]
   10520:	4b1f      	ldr	r3, [pc, #124]	; (105a0 <str_modulo_format+0x2dc>)
   10522:	429a      	cmp	r2, r3
   10524:	d014      	beq.n	10550 <str_modulo_format+0x28c>
                } else if (arg_looks_integer(arg)) {
   10526:	4630      	mov	r0, r6
   10528:	f7fe fe30 	bl	f18c <arg_looks_integer>
   1052c:	2800      	cmp	r0, #0
   1052e:	d03b      	beq.n	105a8 <str_modulo_format+0x2e4>
                    char ch = mp_obj_get_int(arg);
   10530:	4630      	mov	r0, r6
   10532:	f7fa fc4b 	bl	adcc <mp_obj_get_int>
   10536:	a91a      	add	r1, sp, #104	; 0x68
   10538:	f801 0d2c 	strb.w	r0, [r1, #-44]!
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
   1053c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1053e:	9301      	str	r3, [sp, #4]
   10540:	2320      	movs	r3, #32
   10542:	9300      	str	r3, [sp, #0]
   10544:	462b      	mov	r3, r5
   10546:	2201      	movs	r2, #1
   10548:	a813      	add	r0, sp, #76	; 0x4c
   1054a:	f7f1 fa07 	bl	195c <mp_print_strn>
   1054e:	e6f7      	b.n	10340 <str_modulo_format+0x7c>
                    const char *s = mp_obj_str_get_data(arg, &slen);
   10550:	a90f      	add	r1, sp, #60	; 0x3c
   10552:	4630      	mov	r0, r6
   10554:	f7ff fe96 	bl	10284 <mp_obj_str_get_data>
   10558:	4601      	mov	r1, r0
                    if (slen != 1) {
   1055a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1055c:	2b01      	cmp	r3, #1
   1055e:	d109      	bne.n	10574 <str_modulo_format+0x2b0>
                    mp_print_strn(&print, s, 1, flags, ' ', width);
   10560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10562:	9301      	str	r3, [sp, #4]
   10564:	2320      	movs	r3, #32
   10566:	9300      	str	r3, [sp, #0]
   10568:	462b      	mov	r3, r5
   1056a:	2201      	movs	r2, #1
   1056c:	a813      	add	r0, sp, #76	; 0x4c
   1056e:	f7f1 f9f5 	bl	195c <mp_print_strn>
                if (MP_OBJ_IS_STR(arg)) {
   10572:	e6e5      	b.n	10340 <str_modulo_format+0x7c>
                        mp_raise_TypeError("%%c requires int or char");
   10574:	480b      	ldr	r0, [pc, #44]	; (105a4 <str_modulo_format+0x2e0>)
   10576:	f7fa f897 	bl	a6a8 <mp_raise_TypeError>
   1057a:	bf00      	nop
   1057c:	000106e5 	.word	0x000106e5
   10580:	000280c8 	.word	0x000280c8
   10584:	00028414 	.word	0x00028414
   10588:	00027d2c 	.word	0x00027d2c
   1058c:	000282c0 	.word	0x000282c0
   10590:	0002849c 	.word	0x0002849c
   10594:	000284b4 	.word	0x000284b4
   10598:	000284cc 	.word	0x000284cc
   1059c:	000284e0 	.word	0x000284e0
   105a0:	00028104 	.word	0x00028104
   105a4:	00028508 	.word	0x00028508
                    mp_raise_TypeError("integer required");
   105a8:	4848      	ldr	r0, [pc, #288]	; (106cc <str_modulo_format+0x408>)
   105aa:	f7fa f87d 	bl	a6a8 <mp_raise_TypeError>
                mp_print_mp_int(&print, arg_as_int(arg), 10, 'a', flags, fill, width, prec);
   105ae:	4630      	mov	r0, r6
   105b0:	f7fe fe94 	bl	f2dc <arg_as_int>
   105b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   105b6:	9303      	str	r3, [sp, #12]
   105b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   105ba:	9302      	str	r3, [sp, #8]
   105bc:	f8cd 8004 	str.w	r8, [sp, #4]
   105c0:	9500      	str	r5, [sp, #0]
   105c2:	2361      	movs	r3, #97	; 0x61
   105c4:	220a      	movs	r2, #10
   105c6:	4601      	mov	r1, r0
   105c8:	a813      	add	r0, sp, #76	; 0x4c
   105ca:	f7f1 fa83 	bl	1ad4 <mp_print_mp_int>
                break;
   105ce:	e6b7      	b.n	10340 <str_modulo_format+0x7c>
                mp_print_float(&print, mp_obj_get_float(arg), *str, flags, fill, width, prec);
   105d0:	4630      	mov	r0, r6
   105d2:	f7fa fca3 	bl	af1c <mp_obj_get_float>
   105d6:	7821      	ldrb	r1, [r4, #0]
   105d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   105da:	9301      	str	r3, [sp, #4]
   105dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   105de:	9300      	str	r3, [sp, #0]
   105e0:	4643      	mov	r3, r8
   105e2:	462a      	mov	r2, r5
   105e4:	a813      	add	r0, sp, #76	; 0x4c
   105e6:	f7f1 fba1 	bl	1d2c <mp_print_float>
                break;
   105ea:	e6a9      	b.n	10340 <str_modulo_format+0x7c>
                if (alt) {
   105ec:	f1b9 0f00 	cmp.w	r9, #0
   105f0:	d001      	beq.n	105f6 <str_modulo_format+0x332>
                    flags |= (PF_FLAG_SHOW_PREFIX | PF_FLAG_SHOW_OCTAL_LETTER);
   105f2:	f445 7504 	orr.w	r5, r5, #528	; 0x210
                mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, prec);
   105f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   105f8:	9303      	str	r3, [sp, #12]
   105fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   105fc:	9302      	str	r3, [sp, #8]
   105fe:	f8cd 8004 	str.w	r8, [sp, #4]
   10602:	9500      	str	r5, [sp, #0]
   10604:	2361      	movs	r3, #97	; 0x61
   10606:	2208      	movs	r2, #8
   10608:	4631      	mov	r1, r6
   1060a:	a813      	add	r0, sp, #76	; 0x4c
   1060c:	f7f1 fa62 	bl	1ad4 <mp_print_mp_int>
                break;
   10610:	e696      	b.n	10340 <str_modulo_format+0x7c>
                vstr_init_print(&arg_vstr, 16, &arg_print);
   10612:	aa0d      	add	r2, sp, #52	; 0x34
   10614:	2110      	movs	r1, #16
   10616:	a80f      	add	r0, sp, #60	; 0x3c
   10618:	f7f1 f8f0 	bl	17fc <vstr_init_print>
                mp_print_kind_t print_kind = (*str == 'r' ? PRINT_REPR : PRINT_STR);
   1061c:	7823      	ldrb	r3, [r4, #0]
   1061e:	2b72      	cmp	r3, #114	; 0x72
   10620:	bf0c      	ite	eq
   10622:	2201      	moveq	r2, #1
   10624:	2200      	movne	r2, #0
                if (print_kind == PRINT_STR && is_bytes && MP_OBJ_IS_TYPE(arg, &mp_type_bytes)) {
   10626:	d008      	beq.n	1063a <str_modulo_format+0x376>
   10628:	9b08      	ldr	r3, [sp, #32]
   1062a:	b133      	cbz	r3, 1063a <str_modulo_format+0x376>
   1062c:	f016 0f03 	tst.w	r6, #3
   10630:	d103      	bne.n	1063a <str_modulo_format+0x376>
   10632:	6831      	ldr	r1, [r6, #0]
   10634:	4b26      	ldr	r3, [pc, #152]	; (106d0 <str_modulo_format+0x40c>)
   10636:	4299      	cmp	r1, r3
   10638:	d018      	beq.n	1066c <str_modulo_format+0x3a8>
                mp_obj_print_helper(&arg_print, arg, print_kind);
   1063a:	4631      	mov	r1, r6
   1063c:	a80d      	add	r0, sp, #52	; 0x34
   1063e:	f7fa fabf 	bl	abc0 <mp_obj_print_helper>
                uint vlen = arg_vstr.len;
   10642:	9b10      	ldr	r3, [sp, #64]	; 0x40
                if (prec < 0) {
   10644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10646:	2a00      	cmp	r2, #0
   10648:	db12      	blt.n	10670 <str_modulo_format+0x3ac>
                if (vlen > (uint)prec) {
   1064a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1064c:	429a      	cmp	r2, r3
   1064e:	d300      	bcc.n	10652 <str_modulo_format+0x38e>
                uint vlen = arg_vstr.len;
   10650:	461a      	mov	r2, r3
                mp_print_strn(&print, arg_vstr.buf, vlen, flags, ' ', width);
   10652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10654:	9301      	str	r3, [sp, #4]
   10656:	2320      	movs	r3, #32
   10658:	9300      	str	r3, [sp, #0]
   1065a:	462b      	mov	r3, r5
   1065c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1065e:	a813      	add	r0, sp, #76	; 0x4c
   10660:	f7f1 f97c 	bl	195c <mp_print_strn>
                vstr_clear(&arg_vstr);
   10664:	a80f      	add	r0, sp, #60	; 0x3c
   10666:	f7f1 f8d5 	bl	1814 <vstr_clear>
   1066a:	e669      	b.n	10340 <str_modulo_format+0x7c>
                    print_kind = PRINT_RAW;
   1066c:	2204      	movs	r2, #4
   1066e:	e7e4      	b.n	1063a <str_modulo_format+0x376>
                    prec = vlen;
   10670:	930c      	str	r3, [sp, #48]	; 0x30
   10672:	e7ea      	b.n	1064a <str_modulo_format+0x386>
                mp_print_mp_int(&print, arg, 16, *str - ('X' - 'A'), flags | alt, fill, width, prec);
   10674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10676:	9203      	str	r2, [sp, #12]
   10678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1067a:	9202      	str	r2, [sp, #8]
   1067c:	f8cd 8004 	str.w	r8, [sp, #4]
   10680:	ea45 0509 	orr.w	r5, r5, r9
   10684:	9500      	str	r5, [sp, #0]
   10686:	3b17      	subs	r3, #23
   10688:	2210      	movs	r2, #16
   1068a:	4631      	mov	r1, r6
   1068c:	a813      	add	r0, sp, #76	; 0x4c
   1068e:	f7f1 fa21 	bl	1ad4 <mp_print_mp_int>
                break;
   10692:	e655      	b.n	10340 <str_modulo_format+0x7c>
   10694:	461a      	mov	r2, r3
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
   10696:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10698:	1ae4      	subs	r4, r4, r3
   1069a:	9400      	str	r4, [sp, #0]
   1069c:	4613      	mov	r3, r2
   1069e:	490d      	ldr	r1, [pc, #52]	; (106d4 <str_modulo_format+0x410>)
   106a0:	480d      	ldr	r0, [pc, #52]	; (106d8 <str_modulo_format+0x414>)
   106a2:	f7fc fa13 	bl	cacc <mp_obj_new_exception_msg_varg>
   106a6:	f7f0 f8eb 	bl	880 <nlr_jump>
    if (arg_i != n_args) {
   106aa:	45da      	cmp	sl, fp
   106ac:	d108      	bne.n	106c0 <str_modulo_format+0x3fc>
    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   106ae:	9b08      	ldr	r3, [sp, #32]
   106b0:	b94b      	cbnz	r3, 106c6 <str_modulo_format+0x402>
   106b2:	480a      	ldr	r0, [pc, #40]	; (106dc <str_modulo_format+0x418>)
   106b4:	a915      	add	r1, sp, #84	; 0x54
   106b6:	f7ff f945 	bl	f944 <mp_obj_new_str_from_vstr>
}
   106ba:	b01b      	add	sp, #108	; 0x6c
   106bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mp_raise_TypeError("not all arguments converted during string formatting");
   106c0:	4807      	ldr	r0, [pc, #28]	; (106e0 <str_modulo_format+0x41c>)
   106c2:	f7f9 fff1 	bl	a6a8 <mp_raise_TypeError>
    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   106c6:	4802      	ldr	r0, [pc, #8]	; (106d0 <str_modulo_format+0x40c>)
   106c8:	e7f4      	b.n	106b4 <str_modulo_format+0x3f0>
   106ca:	bf00      	nop
   106cc:	00028524 	.word	0x00028524
   106d0:	000280c8 	.word	0x000280c8
   106d4:	00028538 	.word	0x00028538
   106d8:	00026cc0 	.word	0x00026cc0
   106dc:	00028104 	.word	0x00028104
   106e0:	00028570 	.word	0x00028570

000106e4 <mp_obj_str_binary_op>:
mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   106e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   106e8:	b08b      	sub	sp, #44	; 0x2c
   106ea:	460c      	mov	r4, r1
   106ec:	9203      	str	r2, [sp, #12]
    if (op == MP_BINARY_OP_MODULO) {
   106ee:	281f      	cmp	r0, #31
   106f0:	d122      	bne.n	10738 <mp_obj_str_binary_op+0x54>
        mp_obj_t *args = &rhs_in;
   106f2:	ab03      	add	r3, sp, #12
   106f4:	9304      	str	r3, [sp, #16]
        size_t n_args = 1;
   106f6:	2301      	movs	r3, #1
   106f8:	9305      	str	r3, [sp, #20]
        if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple)) {
   106fa:	4613      	mov	r3, r2
   106fc:	f012 0203 	ands.w	r2, r2, #3
   10700:	d103      	bne.n	1070a <mp_obj_str_binary_op+0x26>
   10702:	6818      	ldr	r0, [r3, #0]
   10704:	4968      	ldr	r1, [pc, #416]	; (108a8 <mp_obj_str_binary_op+0x1c4>)
   10706:	4288      	cmp	r0, r1
   10708:	d006      	beq.n	10718 <mp_obj_str_binary_op+0x34>
        } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
   1070a:	b962      	cbnz	r2, 10726 <mp_obj_str_binary_op+0x42>
   1070c:	6819      	ldr	r1, [r3, #0]
   1070e:	4a67      	ldr	r2, [pc, #412]	; (108ac <mp_obj_str_binary_op+0x1c8>)
   10710:	4291      	cmp	r1, r2
   10712:	d009      	beq.n	10728 <mp_obj_str_binary_op+0x44>
        mp_obj_t dict = MP_OBJ_NULL;
   10714:	2300      	movs	r3, #0
   10716:	e007      	b.n	10728 <mp_obj_str_binary_op+0x44>
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   10718:	aa04      	add	r2, sp, #16
   1071a:	a905      	add	r1, sp, #20
   1071c:	4618      	mov	r0, r3
   1071e:	f001 f95b 	bl	119d8 <mp_obj_tuple_get>
        mp_obj_t dict = MP_OBJ_NULL;
   10722:	2300      	movs	r3, #0
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   10724:	e000      	b.n	10728 <mp_obj_str_binary_op+0x44>
        mp_obj_t dict = MP_OBJ_NULL;
   10726:	2300      	movs	r3, #0
        return str_modulo_format(lhs_in, n_args, args, dict);
   10728:	9a04      	ldr	r2, [sp, #16]
   1072a:	9905      	ldr	r1, [sp, #20]
   1072c:	4620      	mov	r0, r4
   1072e:	f7ff fdc9 	bl	102c4 <str_modulo_format>
}
   10732:	b00b      	add	sp, #44	; 0x2c
   10734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10738:	4605      	mov	r5, r0
    mp_obj_type_t *lhs_type = mp_obj_get_type(lhs_in);
   1073a:	4608      	mov	r0, r1
   1073c:	f7fa fa1e 	bl	ab7c <mp_obj_get_type>
   10740:	4606      	mov	r6, r0
   10742:	f004 0303 	and.w	r3, r4, #3
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   10746:	2b02      	cmp	r3, #2
   10748:	d02e      	beq.n	107a8 <mp_obj_str_binary_op+0xc4>
   1074a:	68a3      	ldr	r3, [r4, #8]
   1074c:	9309      	str	r3, [sp, #36]	; 0x24
   1074e:	68e7      	ldr	r7, [r4, #12]
    if (op == MP_BINARY_OP_MULTIPLY) {
   10750:	2d1c      	cmp	r5, #28
   10752:	d02f      	beq.n	107b4 <mp_obj_str_binary_op+0xd0>
    if (lhs_type == mp_obj_get_type(rhs_in)) {
   10754:	9803      	ldr	r0, [sp, #12]
   10756:	f7fa fa11 	bl	ab7c <mp_obj_get_type>
   1075a:	4286      	cmp	r6, r0
   1075c:	d04e      	beq.n	107fc <mp_obj_str_binary_op+0x118>
    } else if (lhs_type == &mp_type_bytes) {
   1075e:	4b54      	ldr	r3, [pc, #336]	; (108b0 <mp_obj_str_binary_op+0x1cc>)
   10760:	429e      	cmp	r6, r3
   10762:	d15d      	bne.n	10820 <mp_obj_str_binary_op+0x13c>
        if (!mp_get_buffer(rhs_in, &bufinfo, MP_BUFFER_READ)) {
   10764:	2201      	movs	r2, #1
   10766:	a905      	add	r1, sp, #20
   10768:	9803      	ldr	r0, [sp, #12]
   1076a:	f7fa fd8e 	bl	b28a <mp_get_buffer>
   1076e:	2800      	cmp	r0, #0
   10770:	d0df      	beq.n	10732 <mp_obj_str_binary_op+0x4e>
        rhs_data = bufinfo.buf;
   10772:	f8dd 9014 	ldr.w	r9, [sp, #20]
        rhs_len = bufinfo.len;
   10776:	f8dd 8018 	ldr.w	r8, [sp, #24]
    switch (op) {
   1077a:	2d22      	cmp	r5, #34	; 0x22
   1077c:	f200 8090 	bhi.w	108a0 <mp_obj_str_binary_op+0x1bc>
   10780:	e8df f005 	tbb	[pc, r5]
   10784:	81818181 	.word	0x81818181
   10788:	8e8e8e81 	.word	0x8e8e8e81
   1078c:	8e8e8e8e 	.word	0x8e8e8e8e
   10790:	8e518e8e 	.word	0x8e518e8e
   10794:	8e8e8e8e 	.word	0x8e8e8e8e
   10798:	8e8e8e8e 	.word	0x8e8e8e8e
   1079c:	8e518e8e 	.word	0x8e518e8e
   107a0:	8e8e8e8e 	.word	0x8e8e8e8e
   107a4:	8e8e      	.short	0x8e8e
   107a6:	76          	.byte	0x76
   107a7:	00          	.byte	0x00
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   107a8:	a909      	add	r1, sp, #36	; 0x24
   107aa:	08a0      	lsrs	r0, r4, #2
   107ac:	f7f0 ff76 	bl	169c <qstr_data>
   107b0:	4607      	mov	r7, r0
   107b2:	e7cd      	b.n	10750 <mp_obj_str_binary_op+0x6c>
        if (!mp_obj_get_int_maybe(rhs_in, &n)) {
   107b4:	a904      	add	r1, sp, #16
   107b6:	9803      	ldr	r0, [sp, #12]
   107b8:	f7fa fb4a 	bl	ae50 <mp_obj_get_int_maybe>
   107bc:	b1e0      	cbz	r0, 107f8 <mp_obj_str_binary_op+0x114>
        if (n <= 0) {
   107be:	9b04      	ldr	r3, [sp, #16]
   107c0:	2b00      	cmp	r3, #0
   107c2:	dc06      	bgt.n	107d2 <mp_obj_str_binary_op+0xee>
            if (lhs_type == &mp_type_str) {
   107c4:	4b3b      	ldr	r3, [pc, #236]	; (108b4 <mp_obj_str_binary_op+0x1d0>)
   107c6:	429e      	cmp	r6, r3
   107c8:	d001      	beq.n	107ce <mp_obj_str_binary_op+0xea>
                return mp_const_empty_bytes;
   107ca:	483b      	ldr	r0, [pc, #236]	; (108b8 <mp_obj_str_binary_op+0x1d4>)
   107cc:	e7b1      	b.n	10732 <mp_obj_str_binary_op+0x4e>
                return MP_OBJ_NEW_QSTR(MP_QSTR_); // empty str
   107ce:	2006      	movs	r0, #6
   107d0:	e7af      	b.n	10732 <mp_obj_str_binary_op+0x4e>
        vstr_init_len(&vstr, lhs_len * n);
   107d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   107d4:	fb01 f103 	mul.w	r1, r1, r3
   107d8:	a805      	add	r0, sp, #20
   107da:	f7f0 fffe 	bl	17da <vstr_init_len>
        mp_seq_multiply(lhs_data, sizeof(*lhs_data), lhs_len, n, vstr.buf);
   107de:	9b07      	ldr	r3, [sp, #28]
   107e0:	9300      	str	r3, [sp, #0]
   107e2:	9b04      	ldr	r3, [sp, #16]
   107e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   107e6:	2101      	movs	r1, #1
   107e8:	4638      	mov	r0, r7
   107ea:	f002 f8a6 	bl	1293a <mp_seq_multiply>
        return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   107ee:	a905      	add	r1, sp, #20
   107f0:	4630      	mov	r0, r6
   107f2:	f7ff f8a7 	bl	f944 <mp_obj_new_str_from_vstr>
   107f6:	e79c      	b.n	10732 <mp_obj_str_binary_op+0x4e>
            return MP_OBJ_NULL; // op not supported
   107f8:	2000      	movs	r0, #0
   107fa:	e79a      	b.n	10732 <mp_obj_str_binary_op+0x4e>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   107fc:	9803      	ldr	r0, [sp, #12]
   107fe:	f000 0303 	and.w	r3, r0, #3
   10802:	2b02      	cmp	r3, #2
   10804:	d006      	beq.n	10814 <mp_obj_str_binary_op+0x130>
   10806:	6883      	ldr	r3, [r0, #8]
   10808:	9305      	str	r3, [sp, #20]
   1080a:	f8d0 900c 	ldr.w	r9, [r0, #12]
        rhs_len = rhs_len_;
   1080e:	f8dd 8014 	ldr.w	r8, [sp, #20]
   10812:	e7b2      	b.n	1077a <mp_obj_str_binary_op+0x96>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   10814:	a905      	add	r1, sp, #20
   10816:	0880      	lsrs	r0, r0, #2
   10818:	f7f0 ff40 	bl	169c <qstr_data>
   1081c:	4681      	mov	r9, r0
   1081e:	e7f6      	b.n	1080e <mp_obj_str_binary_op+0x12a>
        bad_implicit_conversion(rhs_in);
   10820:	9803      	ldr	r0, [sp, #12]
   10822:	f7fe fd43 	bl	f2ac <bad_implicit_conversion>
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   10826:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10828:	b123      	cbz	r3, 10834 <mp_obj_str_binary_op+0x150>
            if (rhs_len == 0) {
   1082a:	f1b8 0f00 	cmp.w	r8, #0
   1082e:	d108      	bne.n	10842 <mp_obj_str_binary_op+0x15e>
   10830:	4620      	mov	r0, r4
   10832:	e77e      	b.n	10732 <mp_obj_str_binary_op+0x4e>
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   10834:	9803      	ldr	r0, [sp, #12]
   10836:	f7fa f9a1 	bl	ab7c <mp_obj_get_type>
   1083a:	4286      	cmp	r6, r0
   1083c:	d1f5      	bne.n	1082a <mp_obj_str_binary_op+0x146>
                return rhs_in;
   1083e:	9c03      	ldr	r4, [sp, #12]
   10840:	e7f6      	b.n	10830 <mp_obj_str_binary_op+0x14c>
            vstr_init_len(&vstr, lhs_len + rhs_len);
   10842:	9909      	ldr	r1, [sp, #36]	; 0x24
   10844:	4441      	add	r1, r8
   10846:	a805      	add	r0, sp, #20
   10848:	f7f0 ffc7 	bl	17da <vstr_init_len>
            memcpy(vstr.buf, lhs_data, lhs_len);
   1084c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1084e:	4639      	mov	r1, r7
   10850:	9807      	ldr	r0, [sp, #28]
   10852:	f00a ffcf 	bl	1b7f4 <memcpy>
            memcpy(vstr.buf + lhs_len, rhs_data, rhs_len);
   10856:	4642      	mov	r2, r8
   10858:	4649      	mov	r1, r9
   1085a:	9807      	ldr	r0, [sp, #28]
   1085c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1085e:	4418      	add	r0, r3
   10860:	f00a ffc8 	bl	1b7f4 <memcpy>
            return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   10864:	a905      	add	r1, sp, #20
   10866:	4630      	mov	r0, r6
   10868:	f7ff f86c 	bl	f944 <mp_obj_new_str_from_vstr>
   1086c:	4604      	mov	r4, r0
   1086e:	e7df      	b.n	10830 <mp_obj_str_binary_op+0x14c>
            return mp_obj_new_bool(find_subbytes(lhs_data, lhs_len, rhs_data, rhs_len, 1) != NULL);
   10870:	2301      	movs	r3, #1
   10872:	9300      	str	r3, [sp, #0]
   10874:	4643      	mov	r3, r8
   10876:	464a      	mov	r2, r9
   10878:	9909      	ldr	r1, [sp, #36]	; 0x24
   1087a:	4638      	mov	r0, r7
   1087c:	f7fe fe8c 	bl	f598 <find_subbytes>
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   10880:	b180      	cbz	r0, 108a4 <mp_obj_str_binary_op+0x1c0>
   10882:	480e      	ldr	r0, [pc, #56]	; (108bc <mp_obj_str_binary_op+0x1d8>)
   10884:	e755      	b.n	10732 <mp_obj_str_binary_op+0x4e>
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_data, lhs_len, rhs_data, rhs_len));
   10886:	f8cd 8000 	str.w	r8, [sp]
   1088a:	464b      	mov	r3, r9
   1088c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1088e:	4639      	mov	r1, r7
   10890:	4628      	mov	r0, r5
   10892:	f002 f868 	bl	12966 <mp_seq_cmp_bytes>
   10896:	b908      	cbnz	r0, 1089c <mp_obj_str_binary_op+0x1b8>
   10898:	4809      	ldr	r0, [pc, #36]	; (108c0 <mp_obj_str_binary_op+0x1dc>)
   1089a:	e74a      	b.n	10732 <mp_obj_str_binary_op+0x4e>
   1089c:	4807      	ldr	r0, [pc, #28]	; (108bc <mp_obj_str_binary_op+0x1d8>)
   1089e:	e748      	b.n	10732 <mp_obj_str_binary_op+0x4e>
            return MP_OBJ_NULL; // op not supported
   108a0:	2000      	movs	r0, #0
   108a2:	e746      	b.n	10732 <mp_obj_str_binary_op+0x4e>
   108a4:	4806      	ldr	r0, [pc, #24]	; (108c0 <mp_obj_str_binary_op+0x1dc>)
   108a6:	e744      	b.n	10732 <mp_obj_str_binary_op+0x4e>
   108a8:	00028844 	.word	0x00028844
   108ac:	000265d0 	.word	0x000265d0
   108b0:	000280c8 	.word	0x000280c8
   108b4:	00028104 	.word	0x00028104
   108b8:	00027dd4 	.word	0x00027dd4
   108bc:	00025f4c 	.word	0x00025f4c
   108c0:	00025f44 	.word	0x00025f44

000108c4 <mp_obj_str_split>:
mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args) {
   108c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   108c8:	b082      	sub	sp, #8
   108ca:	4605      	mov	r5, r0
   108cc:	460c      	mov	r4, r1
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   108ce:	6808      	ldr	r0, [r1, #0]
   108d0:	f7fa f954 	bl	ab7c <mp_obj_get_type>
   108d4:	4681      	mov	r9, r0
    if (n_args > 1) {
   108d6:	2d01      	cmp	r5, #1
   108d8:	d92d      	bls.n	10936 <mp_obj_str_split+0x72>
        sep = args[1];
   108da:	f8d4 a004 	ldr.w	sl, [r4, #4]
        if (n_args > 2) {
   108de:	2d02      	cmp	r5, #2
   108e0:	d824      	bhi.n	1092c <mp_obj_str_split+0x68>
    mp_int_t splits = -1;
   108e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    mp_obj_t res = mp_obj_new_list(0, NULL);
   108e6:	2100      	movs	r1, #0
   108e8:	4608      	mov	r0, r1
   108ea:	f7fe f8c5 	bl	ea78 <mp_obj_new_list>
   108ee:	4680      	mov	r8, r0
    GET_STR_DATA_LEN(args[0], s, len);
   108f0:	6820      	ldr	r0, [r4, #0]
    { return ((((mp_int_t)(o)) & 3) == 2); }
   108f2:	f000 0303 	and.w	r3, r0, #3
   108f6:	2b02      	cmp	r3, #2
   108f8:	d022      	beq.n	10940 <mp_obj_str_split+0x7c>
   108fa:	6883      	ldr	r3, [r0, #8]
   108fc:	9301      	str	r3, [sp, #4]
   108fe:	6823      	ldr	r3, [r4, #0]
   10900:	68de      	ldr	r6, [r3, #12]
    const byte *top = s + len;
   10902:	9d01      	ldr	r5, [sp, #4]
   10904:	4435      	add	r5, r6
    if (sep == mp_const_none) {
   10906:	4b43      	ldr	r3, [pc, #268]	; (10a14 <mp_obj_str_split+0x150>)
   10908:	459a      	cmp	sl, r3
   1090a:	d020      	beq.n	1094e <mp_obj_str_split+0x8a>
        if (mp_obj_get_type(sep) != self_type) {
   1090c:	4650      	mov	r0, sl
   1090e:	f7fa f935 	bl	ab7c <mp_obj_get_type>
   10912:	4581      	cmp	r9, r0
   10914:	d159      	bne.n	109ca <mp_obj_str_split+0x106>
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   10916:	4669      	mov	r1, sp
   10918:	4650      	mov	r0, sl
   1091a:	f7ff fcb3 	bl	10284 <mp_obj_str_get_data>
   1091e:	4682      	mov	sl, r0
        if (sep_len == 0) {
   10920:	9b00      	ldr	r3, [sp, #0]
   10922:	2b00      	cmp	r3, #0
   10924:	d165      	bne.n	109f2 <mp_obj_str_split+0x12e>
            mp_raise_ValueError("empty separator");
   10926:	483c      	ldr	r0, [pc, #240]	; (10a18 <mp_obj_str_split+0x154>)
   10928:	f7f9 fcbe 	bl	a2a8 <mp_raise_ValueError>
            splits = mp_obj_get_int(args[2]);
   1092c:	68a0      	ldr	r0, [r4, #8]
   1092e:	f7fa fa4d 	bl	adcc <mp_obj_get_int>
   10932:	4607      	mov	r7, r0
   10934:	e7d7      	b.n	108e6 <mp_obj_str_split+0x22>
    mp_obj_t sep = mp_const_none;
   10936:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 10a14 <mp_obj_str_split+0x150>
    mp_int_t splits = -1;
   1093a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1093e:	e7d2      	b.n	108e6 <mp_obj_str_split+0x22>
    GET_STR_DATA_LEN(args[0], s, len);
   10940:	a901      	add	r1, sp, #4
   10942:	0880      	lsrs	r0, r0, #2
   10944:	f7f0 feaa 	bl	169c <qstr_data>
   10948:	4606      	mov	r6, r0
   1094a:	e7da      	b.n	10902 <mp_obj_str_split+0x3e>
        while (s < top && unichar_isspace(*s)) s++;
   1094c:	3601      	adds	r6, #1
   1094e:	42ae      	cmp	r6, r5
   10950:	d22b      	bcs.n	109aa <mp_obj_str_split+0xe6>
   10952:	7830      	ldrb	r0, [r6, #0]
   10954:	f7f1 fb98 	bl	2088 <unichar_isspace>
   10958:	2800      	cmp	r0, #0
   1095a:	d1f7      	bne.n	1094c <mp_obj_str_split+0x88>
   1095c:	e025      	b.n	109aa <mp_obj_str_split+0xe6>
            while (s < top && !unichar_isspace(*s)) s++;
   1095e:	3401      	adds	r4, #1
   10960:	42ac      	cmp	r4, r5
   10962:	d204      	bcs.n	1096e <mp_obj_str_split+0xaa>
   10964:	7820      	ldrb	r0, [r4, #0]
   10966:	f7f1 fb8f 	bl	2088 <unichar_isspace>
   1096a:	2800      	cmp	r0, #0
   1096c:	d0f7      	beq.n	1095e <mp_obj_str_split+0x9a>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   1096e:	1ba2      	subs	r2, r4, r6
   10970:	4631      	mov	r1, r6
   10972:	4648      	mov	r0, r9
   10974:	f7ff fb10 	bl	ff98 <mp_obj_new_str_of_type>
   10978:	4601      	mov	r1, r0
   1097a:	4640      	mov	r0, r8
   1097c:	f7fd fd40 	bl	e400 <mp_obj_list_append>
            if (s >= top) {
   10980:	42ac      	cmp	r4, r5
   10982:	d307      	bcc.n	10994 <mp_obj_str_split+0xd0>
   10984:	4626      	mov	r6, r4
        if (s < top) {
   10986:	42ae      	cmp	r6, r5
   10988:	d315      	bcc.n	109b6 <mp_obj_str_split+0xf2>
}
   1098a:	4640      	mov	r0, r8
   1098c:	b002      	add	sp, #8
   1098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            while (s < top && unichar_isspace(*s)) s++;
   10992:	3401      	adds	r4, #1
   10994:	42ac      	cmp	r4, r5
   10996:	d204      	bcs.n	109a2 <mp_obj_str_split+0xde>
   10998:	7820      	ldrb	r0, [r4, #0]
   1099a:	f7f1 fb75 	bl	2088 <unichar_isspace>
   1099e:	2800      	cmp	r0, #0
   109a0:	d1f7      	bne.n	10992 <mp_obj_str_split+0xce>
            if (splits > 0) {
   109a2:	2f00      	cmp	r7, #0
   109a4:	dd00      	ble.n	109a8 <mp_obj_str_split+0xe4>
                splits--;
   109a6:	3f01      	subs	r7, #1
   109a8:	4626      	mov	r6, r4
        while (s < top && splits != 0) {
   109aa:	42ae      	cmp	r6, r5
   109ac:	d2eb      	bcs.n	10986 <mp_obj_str_split+0xc2>
   109ae:	2f00      	cmp	r7, #0
   109b0:	d0e9      	beq.n	10986 <mp_obj_str_split+0xc2>
   109b2:	4634      	mov	r4, r6
   109b4:	e7d4      	b.n	10960 <mp_obj_str_split+0x9c>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, s, top - s));
   109b6:	1baa      	subs	r2, r5, r6
   109b8:	4631      	mov	r1, r6
   109ba:	4648      	mov	r0, r9
   109bc:	f7ff faec 	bl	ff98 <mp_obj_new_str_of_type>
   109c0:	4601      	mov	r1, r0
   109c2:	4640      	mov	r0, r8
   109c4:	f7fd fd1c 	bl	e400 <mp_obj_list_append>
   109c8:	e7df      	b.n	1098a <mp_obj_str_split+0xc6>
            bad_implicit_conversion(sep);
   109ca:	4650      	mov	r0, sl
   109cc:	f7fe fc6e 	bl	f2ac <bad_implicit_conversion>
                    s = top;
   109d0:	462c      	mov	r4, r5
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   109d2:	1ba2      	subs	r2, r4, r6
   109d4:	4631      	mov	r1, r6
   109d6:	4648      	mov	r0, r9
   109d8:	f7ff fade 	bl	ff98 <mp_obj_new_str_of_type>
   109dc:	4601      	mov	r1, r0
   109de:	4640      	mov	r0, r8
   109e0:	f7fd fd0e 	bl	e400 <mp_obj_list_append>
            if (s >= top) {
   109e4:	42ac      	cmp	r4, r5
   109e6:	d2d0      	bcs.n	1098a <mp_obj_str_split+0xc6>
            s += sep_len;
   109e8:	9e00      	ldr	r6, [sp, #0]
   109ea:	4426      	add	r6, r4
            if (splits > 0) {
   109ec:	2f00      	cmp	r7, #0
   109ee:	dd00      	ble.n	109f2 <mp_obj_str_split+0x12e>
                splits--;
   109f0:	3f01      	subs	r7, #1
   109f2:	4634      	mov	r4, r6
                if (splits == 0 || s + sep_len > top) {
   109f4:	2f00      	cmp	r7, #0
   109f6:	d0eb      	beq.n	109d0 <mp_obj_str_split+0x10c>
   109f8:	9a00      	ldr	r2, [sp, #0]
   109fa:	18a3      	adds	r3, r4, r2
   109fc:	42ab      	cmp	r3, r5
   109fe:	d807      	bhi.n	10a10 <mp_obj_str_split+0x14c>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   10a00:	4651      	mov	r1, sl
   10a02:	4620      	mov	r0, r4
   10a04:	f00a ff6c 	bl	1b8e0 <memcmp>
   10a08:	2800      	cmp	r0, #0
   10a0a:	d0e2      	beq.n	109d2 <mp_obj_str_split+0x10e>
                s++;
   10a0c:	3401      	adds	r4, #1
                if (splits == 0 || s + sep_len > top) {
   10a0e:	e7f1      	b.n	109f4 <mp_obj_str_split+0x130>
                    s = top;
   10a10:	462c      	mov	r4, r5
   10a12:	e7de      	b.n	109d2 <mp_obj_str_split+0x10e>
   10a14:	00027b40 	.word	0x00027b40
   10a18:	0002809c 	.word	0x0002809c

00010a1c <str_rsplit>:
STATIC mp_obj_t str_rsplit(size_t n_args, const mp_obj_t *args) {
   10a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a20:	b085      	sub	sp, #20
   10a22:	4606      	mov	r6, r0
   10a24:	460c      	mov	r4, r1
    if (n_args < 3) {
   10a26:	2802      	cmp	r0, #2
   10a28:	d928      	bls.n	10a7c <str_rsplit+0x60>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   10a2a:	6808      	ldr	r0, [r1, #0]
   10a2c:	f7fa f8a6 	bl	ab7c <mp_obj_get_type>
   10a30:	9000      	str	r0, [sp, #0]
    mp_obj_t sep = args[1];
   10a32:	f8d4 8004 	ldr.w	r8, [r4, #4]
    GET_STR_DATA_LEN(args[0], s, len);
   10a36:	6820      	ldr	r0, [r4, #0]
   10a38:	f000 0303 	and.w	r3, r0, #3
   10a3c:	2b02      	cmp	r3, #2
   10a3e:	d024      	beq.n	10a8a <str_rsplit+0x6e>
   10a40:	6883      	ldr	r3, [r0, #8]
   10a42:	9303      	str	r3, [sp, #12]
   10a44:	6823      	ldr	r3, [r4, #0]
   10a46:	68df      	ldr	r7, [r3, #12]
    mp_int_t splits = mp_obj_get_int(args[2]);
   10a48:	68a0      	ldr	r0, [r4, #8]
   10a4a:	f7fa f9bf 	bl	adcc <mp_obj_get_int>
    if (splits < 0) {
   10a4e:	1e05      	subs	r5, r0, #0
   10a50:	db21      	blt.n	10a96 <str_rsplit+0x7a>
    mp_obj_list_t *res = MP_OBJ_TO_PTR(mp_obj_new_list(splits + 1, NULL));
   10a52:	1c6b      	adds	r3, r5, #1
   10a54:	9301      	str	r3, [sp, #4]
   10a56:	2100      	movs	r1, #0
   10a58:	4618      	mov	r0, r3
   10a5a:	f7fe f80d 	bl	ea78 <mp_obj_new_list>
   10a5e:	4681      	mov	r9, r0
    if (sep == mp_const_none) {
   10a60:	4b35      	ldr	r3, [pc, #212]	; (10b38 <str_rsplit+0x11c>)
   10a62:	4598      	cmp	r8, r3
   10a64:	d01d      	beq.n	10aa2 <str_rsplit+0x86>
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   10a66:	a902      	add	r1, sp, #8
   10a68:	4640      	mov	r0, r8
   10a6a:	f7ff fc0b 	bl	10284 <mp_obj_str_get_data>
   10a6e:	4680      	mov	r8, r0
        if (sep_len == 0) {
   10a70:	9b02      	ldr	r3, [sp, #8]
   10a72:	b1cb      	cbz	r3, 10aa8 <str_rsplit+0x8c>
        const byte *last = s + len;
   10a74:	9a03      	ldr	r2, [sp, #12]
   10a76:	eb07 0a02 	add.w	sl, r7, r2
   10a7a:	e02a      	b.n	10ad2 <str_rsplit+0xb6>
        return mp_obj_str_split(n_args, args);
   10a7c:	f7ff ff22 	bl	108c4 <mp_obj_str_split>
   10a80:	4681      	mov	r9, r0
}
   10a82:	4648      	mov	r0, r9
   10a84:	b005      	add	sp, #20
   10a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GET_STR_DATA_LEN(args[0], s, len);
   10a8a:	a903      	add	r1, sp, #12
   10a8c:	0880      	lsrs	r0, r0, #2
   10a8e:	f7f0 fe05 	bl	169c <qstr_data>
   10a92:	4607      	mov	r7, r0
   10a94:	e7d8      	b.n	10a48 <str_rsplit+0x2c>
        return mp_obj_str_split(n_args, args);
   10a96:	4621      	mov	r1, r4
   10a98:	4630      	mov	r0, r6
   10a9a:	f7ff ff13 	bl	108c4 <mp_obj_str_split>
   10a9e:	4681      	mov	r9, r0
   10aa0:	e7ef      	b.n	10a82 <str_rsplit+0x66>
        mp_raise_NotImplementedError("rsplit(None,n)");
   10aa2:	4826      	ldr	r0, [pc, #152]	; (10b3c <str_rsplit+0x120>)
   10aa4:	f7f9 fe14 	bl	a6d0 <mp_raise_NotImplementedError>
            mp_raise_ValueError("empty separator");
   10aa8:	4825      	ldr	r0, [pc, #148]	; (10b40 <str_rsplit+0x124>)
   10aaa:	f7f9 fbfd 	bl	a2a8 <mp_raise_ValueError>
            if (s < beg || splits == 0) {
   10aae:	42a7      	cmp	r7, r4
   10ab0:	d81f      	bhi.n	10af2 <str_rsplit+0xd6>
   10ab2:	b1f5      	cbz	r5, 10af2 <str_rsplit+0xd6>
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
   10ab4:	ebaa 0204 	sub.w	r2, sl, r4
   10ab8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
   10abc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   10ac0:	1b92      	subs	r2, r2, r6
   10ac2:	19a1      	adds	r1, r4, r6
   10ac4:	9800      	ldr	r0, [sp, #0]
   10ac6:	f7ff fa67 	bl	ff98 <mp_obj_new_str_of_type>
   10aca:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
            splits--;
   10ace:	4655      	mov	r5, sl
            last = s;
   10ad0:	46a2      	mov	sl, r4
            s = last - sep_len;
   10ad2:	9e02      	ldr	r6, [sp, #8]
   10ad4:	ebaa 0406 	sub.w	r4, sl, r6
                if (splits == 0 || s < beg) {
   10ad8:	2d00      	cmp	r5, #0
   10ada:	d0e8      	beq.n	10aae <str_rsplit+0x92>
   10adc:	42a7      	cmp	r7, r4
   10ade:	d8e6      	bhi.n	10aae <str_rsplit+0x92>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   10ae0:	4632      	mov	r2, r6
   10ae2:	4641      	mov	r1, r8
   10ae4:	4620      	mov	r0, r4
   10ae6:	f00a fefb 	bl	1b8e0 <memcmp>
   10aea:	2800      	cmp	r0, #0
   10aec:	d0df      	beq.n	10aae <str_rsplit+0x92>
                s--;
   10aee:	3c01      	subs	r4, #1
                if (splits == 0 || s < beg) {
   10af0:	e7f2      	b.n	10ad8 <str_rsplit+0xbc>
                res->items[idx] = mp_obj_new_str_of_type(self_type, beg, last - beg);
   10af2:	f8d9 600c 	ldr.w	r6, [r9, #12]
   10af6:	00ac      	lsls	r4, r5, #2
   10af8:	ebaa 0207 	sub.w	r2, sl, r7
   10afc:	4639      	mov	r1, r7
   10afe:	9800      	ldr	r0, [sp, #0]
   10b00:	f7ff fa4a 	bl	ff98 <mp_obj_new_str_of_type>
   10b04:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
        if (idx != 0) {
   10b08:	2d00      	cmp	r5, #0
   10b0a:	d0ba      	beq.n	10a82 <str_rsplit+0x66>
            size_t used = org_splits + 1 - idx;
   10b0c:	9b01      	ldr	r3, [sp, #4]
   10b0e:	1b5d      	subs	r5, r3, r5
            memmove(res->items, &res->items[idx], used * sizeof(mp_obj_t));
   10b10:	f8d9 000c 	ldr.w	r0, [r9, #12]
   10b14:	00ae      	lsls	r6, r5, #2
   10b16:	4632      	mov	r2, r6
   10b18:	1901      	adds	r1, r0, r4
   10b1a:	f00a fe97 	bl	1b84c <memmove>
            mp_seq_clear(res->items, used, res->alloc, sizeof(*res->items));
   10b1e:	f8d9 000c 	ldr.w	r0, [r9, #12]
   10b22:	f8d9 3004 	ldr.w	r3, [r9, #4]
   10b26:	1b5b      	subs	r3, r3, r5
   10b28:	009a      	lsls	r2, r3, #2
   10b2a:	2100      	movs	r1, #0
   10b2c:	4430      	add	r0, r6
   10b2e:	f00a fea5 	bl	1b87c <memset>
            res->len = used;
   10b32:	f8c9 5008 	str.w	r5, [r9, #8]
    return MP_OBJ_FROM_PTR(res);
   10b36:	e7a4      	b.n	10a82 <str_rsplit+0x66>
   10b38:	00027b40 	.word	0x00027b40
   10b3c:	000285e4 	.word	0x000285e4
   10b40:	0002809c 	.word	0x0002809c

00010b44 <str_startswith>:
STATIC mp_obj_t str_startswith(size_t n_args, const mp_obj_t *args) {
   10b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b48:	b084      	sub	sp, #16
   10b4a:	4607      	mov	r7, r0
   10b4c:	460d      	mov	r5, r1
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   10b4e:	6808      	ldr	r0, [r1, #0]
   10b50:	f7fa f814 	bl	ab7c <mp_obj_get_type>
   10b54:	4680      	mov	r8, r0
    GET_STR_DATA_LEN(args[0], str, str_len);
   10b56:	6828      	ldr	r0, [r5, #0]
   10b58:	f000 0303 	and.w	r3, r0, #3
   10b5c:	2b02      	cmp	r3, #2
   10b5e:	d017      	beq.n	10b90 <str_startswith+0x4c>
   10b60:	6883      	ldr	r3, [r0, #8]
   10b62:	9303      	str	r3, [sp, #12]
   10b64:	682b      	ldr	r3, [r5, #0]
   10b66:	68dc      	ldr	r4, [r3, #12]
    const char *prefix = mp_obj_str_get_data(args[1], &prefix_len);
   10b68:	a902      	add	r1, sp, #8
   10b6a:	6868      	ldr	r0, [r5, #4]
   10b6c:	f7ff fb8a 	bl	10284 <mp_obj_str_get_data>
   10b70:	4606      	mov	r6, r0
    if (n_args > 2) {
   10b72:	2f02      	cmp	r7, #2
   10b74:	d812      	bhi.n	10b9c <str_startswith+0x58>
    const byte *start = str;
   10b76:	4620      	mov	r0, r4
    if (prefix_len + (start - str) > str_len) {
   10b78:	1b04      	subs	r4, r0, r4
   10b7a:	9a02      	ldr	r2, [sp, #8]
   10b7c:	4414      	add	r4, r2
   10b7e:	9b03      	ldr	r3, [sp, #12]
   10b80:	429c      	cmp	r4, r3
   10b82:	d816      	bhi.n	10bb2 <str_startswith+0x6e>
    return mp_obj_new_bool(memcmp(start, prefix, prefix_len) == 0);
   10b84:	4631      	mov	r1, r6
   10b86:	f00a feab 	bl	1b8e0 <memcmp>
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   10b8a:	b180      	cbz	r0, 10bae <str_startswith+0x6a>
   10b8c:	480b      	ldr	r0, [pc, #44]	; (10bbc <str_startswith+0x78>)
   10b8e:	e011      	b.n	10bb4 <str_startswith+0x70>
    GET_STR_DATA_LEN(args[0], str, str_len);
   10b90:	a903      	add	r1, sp, #12
   10b92:	0880      	lsrs	r0, r0, #2
   10b94:	f7f0 fd82 	bl	169c <qstr_data>
   10b98:	4604      	mov	r4, r0
   10b9a:	e7e5      	b.n	10b68 <str_startswith+0x24>
        start = str_index_to_ptr(self_type, str, str_len, args[2], true);
   10b9c:	68ab      	ldr	r3, [r5, #8]
   10b9e:	2201      	movs	r2, #1
   10ba0:	9200      	str	r2, [sp, #0]
   10ba2:	9a03      	ldr	r2, [sp, #12]
   10ba4:	4621      	mov	r1, r4
   10ba6:	4640      	mov	r0, r8
   10ba8:	f7fe fd19 	bl	f5de <str_index_to_ptr>
   10bac:	e7e4      	b.n	10b78 <str_startswith+0x34>
   10bae:	4804      	ldr	r0, [pc, #16]	; (10bc0 <str_startswith+0x7c>)
   10bb0:	e000      	b.n	10bb4 <str_startswith+0x70>
        return mp_const_false;
   10bb2:	4802      	ldr	r0, [pc, #8]	; (10bbc <str_startswith+0x78>)
}
   10bb4:	b004      	add	sp, #16
   10bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10bba:	bf00      	nop
   10bbc:	00025f44 	.word	0x00025f44
   10bc0:	00025f4c 	.word	0x00025f4c

00010bc4 <str_endswith>:
STATIC mp_obj_t str_endswith(size_t n_args, const mp_obj_t *args) {
   10bc4:	b570      	push	{r4, r5, r6, lr}
   10bc6:	b082      	sub	sp, #8
   10bc8:	4605      	mov	r5, r0
   10bca:	460c      	mov	r4, r1
    GET_STR_DATA_LEN(args[0], str, str_len);
   10bcc:	6808      	ldr	r0, [r1, #0]
    { return ((((mp_int_t)(o)) & 3) == 2); }
   10bce:	f000 0303 	and.w	r3, r0, #3
   10bd2:	2b02      	cmp	r3, #2
   10bd4:	d015      	beq.n	10c02 <str_endswith+0x3e>
   10bd6:	6883      	ldr	r3, [r0, #8]
   10bd8:	9301      	str	r3, [sp, #4]
   10bda:	680b      	ldr	r3, [r1, #0]
   10bdc:	68de      	ldr	r6, [r3, #12]
    const char *suffix = mp_obj_str_get_data(args[1], &suffix_len);
   10bde:	4669      	mov	r1, sp
   10be0:	6860      	ldr	r0, [r4, #4]
   10be2:	f7ff fb4f 	bl	10284 <mp_obj_str_get_data>
    if (n_args > 2) {
   10be6:	2d02      	cmp	r5, #2
   10be8:	d811      	bhi.n	10c0e <str_endswith+0x4a>
    if (suffix_len > str_len) {
   10bea:	9a00      	ldr	r2, [sp, #0]
   10bec:	9b01      	ldr	r3, [sp, #4]
   10bee:	429a      	cmp	r2, r3
   10bf0:	d812      	bhi.n	10c18 <str_endswith+0x54>
    return mp_obj_new_bool(memcmp(str + (str_len - suffix_len), suffix, suffix_len) == 0);
   10bf2:	1a9b      	subs	r3, r3, r2
   10bf4:	4601      	mov	r1, r0
   10bf6:	18f0      	adds	r0, r6, r3
   10bf8:	f00a fe72 	bl	1b8e0 <memcmp>
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   10bfc:	b150      	cbz	r0, 10c14 <str_endswith+0x50>
   10bfe:	4808      	ldr	r0, [pc, #32]	; (10c20 <str_endswith+0x5c>)
   10c00:	e00b      	b.n	10c1a <str_endswith+0x56>
    GET_STR_DATA_LEN(args[0], str, str_len);
   10c02:	a901      	add	r1, sp, #4
   10c04:	0880      	lsrs	r0, r0, #2
   10c06:	f7f0 fd49 	bl	169c <qstr_data>
   10c0a:	4606      	mov	r6, r0
   10c0c:	e7e7      	b.n	10bde <str_endswith+0x1a>
        mp_raise_NotImplementedError("start/end indices");
   10c0e:	4805      	ldr	r0, [pc, #20]	; (10c24 <str_endswith+0x60>)
   10c10:	f7f9 fd5e 	bl	a6d0 <mp_raise_NotImplementedError>
   10c14:	4804      	ldr	r0, [pc, #16]	; (10c28 <str_endswith+0x64>)
   10c16:	e000      	b.n	10c1a <str_endswith+0x56>
        return mp_const_false;
   10c18:	4801      	ldr	r0, [pc, #4]	; (10c20 <str_endswith+0x5c>)
}
   10c1a:	b002      	add	sp, #8
   10c1c:	bd70      	pop	{r4, r5, r6, pc}
   10c1e:	bf00      	nop
   10c20:	00025f44 	.word	0x00025f44
   10c24:	0002820c 	.word	0x0002820c
   10c28:	00025f4c 	.word	0x00025f4c

00010c2c <mp_obj_str_format_helper>:
STATIC vstr_t mp_obj_str_format_helper(const char *str, const char *top, int *arg_i, size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   10c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c30:	b097      	sub	sp, #92	; 0x5c
   10c32:	9007      	str	r0, [sp, #28]
   10c34:	460e      	mov	r6, r1
   10c36:	4615      	mov	r5, r2
   10c38:	469a      	mov	sl, r3
    vstr_init_print(&vstr, 16, &print);
   10c3a:	aa10      	add	r2, sp, #64	; 0x40
   10c3c:	2110      	movs	r1, #16
   10c3e:	a812      	add	r0, sp, #72	; 0x48
   10c40:	f7f0 fddc 	bl	17fc <vstr_init_print>
   10c44:	46d3      	mov	fp, sl
    for (; str < top; str++) {
   10c46:	e009      	b.n	10c5c <mp_obj_str_format_helper+0x30>
            str++;
   10c48:	1c74      	adds	r4, r6, #1
            if (str < top && *str == '}') {
   10c4a:	42a5      	cmp	r5, r4
   10c4c:	d920      	bls.n	10c90 <mp_obj_str_format_helper+0x64>
   10c4e:	7873      	ldrb	r3, [r6, #1]
   10c50:	2b7d      	cmp	r3, #125	; 0x7d
   10c52:	d11d      	bne.n	10c90 <mp_obj_str_format_helper+0x64>
                vstr_add_byte(&vstr, '}');
   10c54:	a812      	add	r0, sp, #72	; 0x48
   10c56:	f7f0 fe28 	bl	18aa <vstr_add_byte>
    for (; str < top; str++) {
   10c5a:	1c66      	adds	r6, r4, #1
   10c5c:	42ae      	cmp	r6, r5
   10c5e:	f080 8356 	bcs.w	1130e <mp_obj_str_format_helper+0x6e2>
        if (*str == '}') {
   10c62:	7831      	ldrb	r1, [r6, #0]
   10c64:	297d      	cmp	r1, #125	; 0x7d
   10c66:	d0ef      	beq.n	10c48 <mp_obj_str_format_helper+0x1c>
        if (*str != '{') {
   10c68:	297b      	cmp	r1, #123	; 0x7b
   10c6a:	d114      	bne.n	10c96 <mp_obj_str_format_helper+0x6a>
        str++;
   10c6c:	1c74      	adds	r4, r6, #1
        if (str < top && *str == '{') {
   10c6e:	42a5      	cmp	r5, r4
   10c70:	d902      	bls.n	10c78 <mp_obj_str_format_helper+0x4c>
   10c72:	7873      	ldrb	r3, [r6, #1]
   10c74:	2b7b      	cmp	r3, #123	; 0x7b
   10c76:	d013      	beq.n	10ca0 <mp_obj_str_format_helper+0x74>
        if (str < top && *str != '}' && *str != '!' && *str != ':') {
   10c78:	42a5      	cmp	r5, r4
   10c7a:	d925      	bls.n	10cc8 <mp_obj_str_format_helper+0x9c>
   10c7c:	7873      	ldrb	r3, [r6, #1]
   10c7e:	2b7d      	cmp	r3, #125	; 0x7d
   10c80:	d02c      	beq.n	10cdc <mp_obj_str_format_helper+0xb0>
   10c82:	2b21      	cmp	r3, #33	; 0x21
   10c84:	d02d      	beq.n	10ce2 <mp_obj_str_format_helper+0xb6>
   10c86:	2b3a      	cmp	r3, #58	; 0x3a
   10c88:	d11c      	bne.n	10cc4 <mp_obj_str_format_helper+0x98>
        const char *field_name_top = NULL;
   10c8a:	2600      	movs	r6, #0
        const char *field_name = NULL;
   10c8c:	46b1      	mov	r9, r6
   10c8e:	e01d      	b.n	10ccc <mp_obj_str_format_helper+0xa0>
                mp_raise_ValueError("single '}' encountered in format string");
   10c90:	4831      	ldr	r0, [pc, #196]	; (10d58 <mp_obj_str_format_helper+0x12c>)
   10c92:	f7f9 fb09 	bl	a2a8 <mp_raise_ValueError>
            vstr_add_byte(&vstr, *str);
   10c96:	a812      	add	r0, sp, #72	; 0x48
   10c98:	f7f0 fe07 	bl	18aa <vstr_add_byte>
            continue;
   10c9c:	4634      	mov	r4, r6
   10c9e:	e7dc      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
            vstr_add_byte(&vstr, '{');
   10ca0:	217b      	movs	r1, #123	; 0x7b
   10ca2:	a812      	add	r0, sp, #72	; 0x48
   10ca4:	f7f0 fe01 	bl	18aa <vstr_add_byte>
            continue;
   10ca8:	e7d7      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
                ++str;
   10caa:	3601      	adds	r6, #1
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   10cac:	42ae      	cmp	r6, r5
   10cae:	d21b      	bcs.n	10ce8 <mp_obj_str_format_helper+0xbc>
   10cb0:	7833      	ldrb	r3, [r6, #0]
   10cb2:	2b7d      	cmp	r3, #125	; 0x7d
   10cb4:	d01b      	beq.n	10cee <mp_obj_str_format_helper+0xc2>
   10cb6:	2b21      	cmp	r3, #33	; 0x21
   10cb8:	d01c      	beq.n	10cf4 <mp_obj_str_format_helper+0xc8>
   10cba:	2b3a      	cmp	r3, #58	; 0x3a
   10cbc:	d1f5      	bne.n	10caa <mp_obj_str_format_helper+0x7e>
            field_name = (const char *)str;
   10cbe:	46a1      	mov	r9, r4
   10cc0:	4634      	mov	r4, r6
   10cc2:	e003      	b.n	10ccc <mp_obj_str_format_helper+0xa0>
        str++;
   10cc4:	4626      	mov	r6, r4
   10cc6:	e7f1      	b.n	10cac <mp_obj_str_format_helper+0x80>
        const char *field_name_top = NULL;
   10cc8:	2600      	movs	r6, #0
        const char *field_name = NULL;
   10cca:	46b1      	mov	r9, r6
        if (str < top && *str == '!') {
   10ccc:	42ac      	cmp	r4, r5
   10cce:	d223      	bcs.n	10d18 <mp_obj_str_format_helper+0xec>
   10cd0:	7823      	ldrb	r3, [r4, #0]
   10cd2:	2b21      	cmp	r3, #33	; 0x21
   10cd4:	d011      	beq.n	10cfa <mp_obj_str_format_helper+0xce>
        char conversion = '\0';
   10cd6:	f04f 0800 	mov.w	r8, #0
   10cda:	e01f      	b.n	10d1c <mp_obj_str_format_helper+0xf0>
        const char *field_name_top = NULL;
   10cdc:	2600      	movs	r6, #0
        const char *field_name = NULL;
   10cde:	46b1      	mov	r9, r6
   10ce0:	e7f4      	b.n	10ccc <mp_obj_str_format_helper+0xa0>
        const char *field_name_top = NULL;
   10ce2:	2600      	movs	r6, #0
        const char *field_name = NULL;
   10ce4:	46b1      	mov	r9, r6
   10ce6:	e7f1      	b.n	10ccc <mp_obj_str_format_helper+0xa0>
            field_name = (const char *)str;
   10ce8:	46a1      	mov	r9, r4
   10cea:	4634      	mov	r4, r6
   10cec:	e7ee      	b.n	10ccc <mp_obj_str_format_helper+0xa0>
   10cee:	46a1      	mov	r9, r4
   10cf0:	4634      	mov	r4, r6
   10cf2:	e7eb      	b.n	10ccc <mp_obj_str_format_helper+0xa0>
   10cf4:	46a1      	mov	r9, r4
   10cf6:	4634      	mov	r4, r6
   10cf8:	e7e8      	b.n	10ccc <mp_obj_str_format_helper+0xa0>
            str++;
   10cfa:	1c63      	adds	r3, r4, #1
            if (str < top && (*str == 'r' || *str == 's')) {
   10cfc:	429d      	cmp	r5, r3
   10cfe:	d908      	bls.n	10d12 <mp_obj_str_format_helper+0xe6>
   10d00:	f894 8001 	ldrb.w	r8, [r4, #1]
   10d04:	f1a8 0372 	sub.w	r3, r8, #114	; 0x72
   10d08:	b2db      	uxtb	r3, r3
   10d0a:	2b01      	cmp	r3, #1
   10d0c:	d801      	bhi.n	10d12 <mp_obj_str_format_helper+0xe6>
                conversion = *str++;
   10d0e:	3402      	adds	r4, #2
   10d10:	e004      	b.n	10d1c <mp_obj_str_format_helper+0xf0>
                    mp_raise_ValueError("bad conversion specifier");
   10d12:	4812      	ldr	r0, [pc, #72]	; (10d5c <mp_obj_str_format_helper+0x130>)
   10d14:	f7f9 fac8 	bl	a2a8 <mp_raise_ValueError>
        char conversion = '\0';
   10d18:	f04f 0800 	mov.w	r8, #0
        if (str < top && *str == ':') {
   10d1c:	42ac      	cmp	r4, r5
   10d1e:	d21f      	bcs.n	10d60 <mp_obj_str_format_helper+0x134>
   10d20:	7823      	ldrb	r3, [r4, #0]
   10d22:	2b3a      	cmp	r3, #58	; 0x3a
   10d24:	d001      	beq.n	10d2a <mp_obj_str_format_helper+0xfe>
        const char *format_spec = NULL;
   10d26:	2700      	movs	r7, #0
   10d28:	e01b      	b.n	10d62 <mp_obj_str_format_helper+0x136>
            str++;
   10d2a:	1c67      	adds	r7, r4, #1
            if (*str != '}') {
   10d2c:	7863      	ldrb	r3, [r4, #1]
   10d2e:	2b7d      	cmp	r3, #125	; 0x7d
   10d30:	d10e      	bne.n	10d50 <mp_obj_str_format_helper+0x124>
            str++;
   10d32:	463c      	mov	r4, r7
        const char *format_spec = NULL;
   10d34:	2700      	movs	r7, #0
   10d36:	e014      	b.n	10d62 <mp_obj_str_format_helper+0x136>
                        ++nest;
   10d38:	3201      	adds	r2, #1
                    ++str;
   10d3a:	3401      	adds	r4, #1
                for (int nest = 1; str < top;) {
   10d3c:	42ac      	cmp	r4, r5
   10d3e:	d210      	bcs.n	10d62 <mp_obj_str_format_helper+0x136>
                    if (*str == '{') {
   10d40:	7823      	ldrb	r3, [r4, #0]
   10d42:	2b7b      	cmp	r3, #123	; 0x7b
   10d44:	d0f8      	beq.n	10d38 <mp_obj_str_format_helper+0x10c>
                    } else if (*str == '}') {
   10d46:	2b7d      	cmp	r3, #125	; 0x7d
   10d48:	d1f7      	bne.n	10d3a <mp_obj_str_format_helper+0x10e>
                        if (--nest == 0) {
   10d4a:	3a01      	subs	r2, #1
   10d4c:	d1f5      	bne.n	10d3a <mp_obj_str_format_helper+0x10e>
   10d4e:	e008      	b.n	10d62 <mp_obj_str_format_helper+0x136>
            str++;
   10d50:	463c      	mov	r4, r7
                for (int nest = 1; str < top;) {
   10d52:	2201      	movs	r2, #1
   10d54:	e7f2      	b.n	10d3c <mp_obj_str_format_helper+0x110>
   10d56:	bf00      	nop
   10d58:	00027de4 	.word	0x00027de4
   10d5c:	00027e0c 	.word	0x00027e0c
        const char *format_spec = NULL;
   10d60:	2700      	movs	r7, #0
        if (str >= top) {
   10d62:	42ac      	cmp	r4, r5
   10d64:	f080 8100 	bcs.w	10f68 <mp_obj_str_format_helper+0x33c>
        if (*str != '}') {
   10d68:	7823      	ldrb	r3, [r4, #0]
   10d6a:	2b7d      	cmp	r3, #125	; 0x7d
   10d6c:	f040 80ff 	bne.w	10f6e <mp_obj_str_format_helper+0x342>
        if (field_name) {
   10d70:	f1b9 0f00 	cmp.w	r9, #0
   10d74:	f000 8129 	beq.w	10fca <mp_obj_str_format_helper+0x39e>
            int index = 0;
   10d78:	2300      	movs	r3, #0
   10d7a:	930c      	str	r3, [sp, #48]	; 0x30
            if (MP_LIKELY(unichar_isdigit(*field_name))) {
   10d7c:	f899 0000 	ldrb.w	r0, [r9]
   10d80:	f7f1 f9a2 	bl	20c8 <unichar_isdigit>
   10d84:	2800      	cmp	r0, #0
   10d86:	f000 8115 	beq.w	10fb4 <mp_obj_str_format_helper+0x388>
                if (*arg_i > 0) {
   10d8a:	f8db 3000 	ldr.w	r3, [fp]
   10d8e:	2b00      	cmp	r3, #0
   10d90:	f300 80f0 	bgt.w	10f74 <mp_obj_str_format_helper+0x348>
                field_name = str_to_int(field_name, field_name_top, &index);
   10d94:	aa0c      	add	r2, sp, #48	; 0x30
   10d96:	4631      	mov	r1, r6
   10d98:	4648      	mov	r0, r9
   10d9a:	f7fe f9d9 	bl	f150 <str_to_int>
   10d9e:	4682      	mov	sl, r0
                if ((uint)index >= n_args - 1) {
   10da0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   10da2:	1e5a      	subs	r2, r3, #1
   10da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10da6:	429a      	cmp	r2, r3
   10da8:	f240 80e7 	bls.w	10f7a <mp_obj_str_format_helper+0x34e>
                arg = args[index + 1];
   10dac:	3301      	adds	r3, #1
   10dae:	9a21      	ldr	r2, [sp, #132]	; 0x84
   10db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10db4:	9305      	str	r3, [sp, #20]
                *arg_i = -1;
   10db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10dba:	f8cb 3000 	str.w	r3, [fp]
            if (field_name < field_name_top) {
   10dbe:	45b2      	cmp	sl, r6
   10dc0:	f0c0 8100 	bcc.w	10fc4 <mp_obj_str_format_helper+0x398>
        if (!format_spec && !conversion) {
   10dc4:	2f00      	cmp	r7, #0
   10dc6:	f000 8118 	beq.w	10ffa <mp_obj_str_format_helper+0x3ce>
        if (conversion) {
   10dca:	f1b8 0f00 	cmp.w	r8, #0
   10dce:	d017      	beq.n	10e00 <mp_obj_str_format_helper+0x1d4>
            if (conversion == 's') {
   10dd0:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
   10dd4:	f000 811f 	beq.w	11016 <mp_obj_str_format_helper+0x3ea>
                assert(conversion == 'r');
   10dd8:	f1b8 0f72 	cmp.w	r8, #114	; 0x72
   10ddc:	f040 8114 	bne.w	11008 <mp_obj_str_format_helper+0x3dc>
                print_kind = PRINT_REPR;
   10de0:	2601      	movs	r6, #1
            vstr_init_print(&arg_vstr, 16, &arg_print);
   10de2:	aa0a      	add	r2, sp, #40	; 0x28
   10de4:	2110      	movs	r1, #16
   10de6:	a80c      	add	r0, sp, #48	; 0x30
   10de8:	f7f0 fd08 	bl	17fc <vstr_init_print>
            mp_obj_print_helper(&arg_print, arg, print_kind);
   10dec:	4632      	mov	r2, r6
   10dee:	9905      	ldr	r1, [sp, #20]
   10df0:	a80a      	add	r0, sp, #40	; 0x28
   10df2:	f7f9 fee5 	bl	abc0 <mp_obj_print_helper>
            arg = mp_obj_new_str_from_vstr(&mp_type_str, &arg_vstr);
   10df6:	a90c      	add	r1, sp, #48	; 0x30
   10df8:	489a      	ldr	r0, [pc, #616]	; (11064 <mp_obj_str_format_helper+0x438>)
   10dfa:	f7fe fda3 	bl	f944 <mp_obj_new_str_from_vstr>
   10dfe:	9005      	str	r0, [sp, #20]
        int width = -1;
   10e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e04:	9309      	str	r3, [sp, #36]	; 0x24
        int precision = -1;
   10e06:	930a      	str	r3, [sp, #40]	; 0x28
        if (format_spec) {
   10e08:	2f00      	cmp	r7, #0
   10e0a:	f040 8106 	bne.w	1101a <mp_obj_str_format_helper+0x3ee>
        int flags = 0;
   10e0e:	2600      	movs	r6, #0
        char type = '\0';
   10e10:	4637      	mov	r7, r6
        char align = '\0';
   10e12:	46b0      	mov	r8, r6
        char fill = '\0';
   10e14:	46b2      	mov	sl, r6
        if (!align) {
   10e16:	f1b8 0f00 	cmp.w	r8, #0
   10e1a:	d107      	bne.n	10e2c <mp_obj_str_format_helper+0x200>
            if (arg_looks_numeric(arg)) {
   10e1c:	9805      	ldr	r0, [sp, #20]
   10e1e:	f7fe f9d3 	bl	f1c8 <arg_looks_numeric>
   10e22:	2800      	cmp	r0, #0
   10e24:	f000 8197 	beq.w	11156 <mp_obj_str_format_helper+0x52a>
                align = '>';
   10e28:	f04f 083e 	mov.w	r8, #62	; 0x3e
        if (!fill) {
   10e2c:	f1ba 0f00 	cmp.w	sl, #0
   10e30:	d101      	bne.n	10e36 <mp_obj_str_format_helper+0x20a>
            fill = ' ';
   10e32:	f04f 0a20 	mov.w	sl, #32
        if (flags & (PF_FLAG_SHOW_SIGN | PF_FLAG_SPACE_SIGN)) {
   10e36:	f016 0f06 	tst.w	r6, #6
   10e3a:	d005      	beq.n	10e48 <mp_obj_str_format_helper+0x21c>
            if (type == 's') {
   10e3c:	2f73      	cmp	r7, #115	; 0x73
   10e3e:	f000 818d 	beq.w	1115c <mp_obj_str_format_helper+0x530>
            if (type == 'c') {
   10e42:	2f63      	cmp	r7, #99	; 0x63
   10e44:	f000 818d 	beq.w	11162 <mp_obj_str_format_helper+0x536>
        switch (align) {
   10e48:	f1b8 0f3d 	cmp.w	r8, #61	; 0x3d
   10e4c:	f000 818f 	beq.w	1116e <mp_obj_str_format_helper+0x542>
   10e50:	f1b8 0f5e 	cmp.w	r8, #94	; 0x5e
   10e54:	f000 818e 	beq.w	11174 <mp_obj_str_format_helper+0x548>
   10e58:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   10e5c:	f000 8184 	beq.w	11168 <mp_obj_str_format_helper+0x53c>
        if (arg_looks_integer(arg)) {
   10e60:	9805      	ldr	r0, [sp, #20]
   10e62:	f7fe f993 	bl	f18c <arg_looks_integer>
   10e66:	2800      	cmp	r0, #0
   10e68:	f000 81e0 	beq.w	1122c <mp_obj_str_format_helper+0x600>
            switch (type) {
   10e6c:	2f78      	cmp	r7, #120	; 0x78
   10e6e:	f200 81d2 	bhi.w	11216 <mp_obj_str_format_helper+0x5ea>
   10e72:	e8df f017 	tbh	[pc, r7, lsl #1]
   10e76:	01a0      	.short	0x01a0
   10e78:	01d001d0 	.word	0x01d001d0
   10e7c:	01d001d0 	.word	0x01d001d0
   10e80:	01d001d0 	.word	0x01d001d0
   10e84:	01d001d0 	.word	0x01d001d0
   10e88:	01d001d0 	.word	0x01d001d0
   10e8c:	01d001d0 	.word	0x01d001d0
   10e90:	01d001d0 	.word	0x01d001d0
   10e94:	01d001d0 	.word	0x01d001d0
   10e98:	01d001d0 	.word	0x01d001d0
   10e9c:	01d001d0 	.word	0x01d001d0
   10ea0:	01d001d0 	.word	0x01d001d0
   10ea4:	01d001d0 	.word	0x01d001d0
   10ea8:	01d001d0 	.word	0x01d001d0
   10eac:	01d001d0 	.word	0x01d001d0
   10eb0:	01d001d0 	.word	0x01d001d0
   10eb4:	01d001d0 	.word	0x01d001d0
   10eb8:	01d001d0 	.word	0x01d001d0
   10ebc:	01d001d0 	.word	0x01d001d0
   10ec0:	01d001db 	.word	0x01d001db
   10ec4:	01d001d0 	.word	0x01d001d0
   10ec8:	01d001d0 	.word	0x01d001d0
   10ecc:	01d001d0 	.word	0x01d001d0
   10ed0:	01d001d0 	.word	0x01d001d0
   10ed4:	01d001d0 	.word	0x01d001d0
   10ed8:	01d001d0 	.word	0x01d001d0
   10edc:	01d001d0 	.word	0x01d001d0
   10ee0:	01d001d0 	.word	0x01d001d0
   10ee4:	01d001d0 	.word	0x01d001d0
   10ee8:	01d001d0 	.word	0x01d001d0
   10eec:	01d001d0 	.word	0x01d001d0
   10ef0:	01d001d0 	.word	0x01d001d0
   10ef4:	01d001d0 	.word	0x01d001d0
   10ef8:	01d001d0 	.word	0x01d001d0
   10efc:	01d001d0 	.word	0x01d001d0
   10f00:	01db01db 	.word	0x01db01db
   10f04:	01d001db 	.word	0x01d001db
   10f08:	01d001d0 	.word	0x01d001d0
   10f0c:	01d001d0 	.word	0x01d001d0
   10f10:	01d001d0 	.word	0x01d001d0
   10f14:	01d001d0 	.word	0x01d001d0
   10f18:	01d001d0 	.word	0x01d001d0
   10f1c:	01d001d0 	.word	0x01d001d0
   10f20:	01d001d0 	.word	0x01d001d0
   10f24:	01c101d0 	.word	0x01c101d0
   10f28:	01d001d0 	.word	0x01d001d0
   10f2c:	01d001d0 	.word	0x01d001d0
   10f30:	01d001d0 	.word	0x01d001d0
   10f34:	01d001d0 	.word	0x01d001d0
   10f38:	018201d0 	.word	0x018201d0
   10f3c:	01a00190 	.word	0x01a00190
   10f40:	01db01db 	.word	0x01db01db
   10f44:	01d001db 	.word	0x01d001db
   10f48:	01d001d0 	.word	0x01d001d0
   10f4c:	01d001d0 	.word	0x01d001d0
   10f50:	01a001d0 	.word	0x01a001d0
   10f54:	01d001ae 	.word	0x01d001ae
   10f58:	01d001d0 	.word	0x01d001d0
   10f5c:	01d001d0 	.word	0x01d001d0
   10f60:	01d001d0 	.word	0x01d001d0
   10f64:	01c101d0 	.word	0x01c101d0
                mp_raise_ValueError("unmatched '{' in format");
   10f68:	483f      	ldr	r0, [pc, #252]	; (11068 <mp_obj_str_format_helper+0x43c>)
   10f6a:	f7f9 f99d 	bl	a2a8 <mp_raise_ValueError>
                mp_raise_ValueError("expected ':' after format specifier");
   10f6e:	483f      	ldr	r0, [pc, #252]	; (1106c <mp_obj_str_format_helper+0x440>)
   10f70:	f7f9 f99a 	bl	a2a8 <mp_raise_ValueError>
                        mp_raise_ValueError(
   10f74:	483e      	ldr	r0, [pc, #248]	; (11070 <mp_obj_str_format_helper+0x444>)
   10f76:	f7f9 f997 	bl	a2a8 <mp_raise_ValueError>
                    mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   10f7a:	493e      	ldr	r1, [pc, #248]	; (11074 <mp_obj_str_format_helper+0x448>)
   10f7c:	483e      	ldr	r0, [pc, #248]	; (11078 <mp_obj_str_format_helper+0x44c>)
   10f7e:	f7f9 f973 	bl	a268 <mp_raise_msg>
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   10f82:	f10a 0a01 	add.w	sl, sl, #1
   10f86:	4556      	cmp	r6, sl
   10f88:	d905      	bls.n	10f96 <mp_obj_str_format_helper+0x36a>
   10f8a:	f89a 3000 	ldrb.w	r3, [sl]
   10f8e:	2b2e      	cmp	r3, #46	; 0x2e
   10f90:	d001      	beq.n	10f96 <mp_obj_str_format_helper+0x36a>
   10f92:	2b5b      	cmp	r3, #91	; 0x5b
   10f94:	d1f5      	bne.n	10f82 <mp_obj_str_format_helper+0x356>
                mp_obj_t field_q = mp_obj_new_str_via_qstr(field_name, lookup - field_name); // should it be via qstr?
   10f96:	ebaa 0109 	sub.w	r1, sl, r9
   10f9a:	4648      	mov	r0, r9
   10f9c:	f7fe fc7b 	bl	f896 <mp_obj_new_str_via_qstr>
   10fa0:	4681      	mov	r9, r0
                mp_map_elem_t *key_elem = mp_map_lookup(kwargs, field_q, MP_MAP_LOOKUP);
   10fa2:	2200      	movs	r2, #0
   10fa4:	4601      	mov	r1, r0
   10fa6:	9822      	ldr	r0, [sp, #136]	; 0x88
   10fa8:	f7f9 fcc6 	bl	a938 <mp_map_lookup>
                if (key_elem == NULL) {
   10fac:	b120      	cbz	r0, 10fb8 <mp_obj_str_format_helper+0x38c>
                arg = key_elem->value;
   10fae:	6843      	ldr	r3, [r0, #4]
   10fb0:	9305      	str	r3, [sp, #20]
   10fb2:	e704      	b.n	10dbe <mp_obj_str_format_helper+0x192>
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   10fb4:	46ca      	mov	sl, r9
   10fb6:	e7e6      	b.n	10f86 <mp_obj_str_format_helper+0x35a>
                    nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, field_q));
   10fb8:	4649      	mov	r1, r9
   10fba:	4830      	ldr	r0, [pc, #192]	; (1107c <mp_obj_str_format_helper+0x450>)
   10fbc:	f7fb fd7a 	bl	cab4 <mp_obj_new_exception_arg1>
   10fc0:	f7ef fc5e 	bl	880 <nlr_jump>
                mp_raise_NotImplementedError("attributes not supported yet");
   10fc4:	482e      	ldr	r0, [pc, #184]	; (11080 <mp_obj_str_format_helper+0x454>)
   10fc6:	f7f9 fb83 	bl	a6d0 <mp_raise_NotImplementedError>
            if (*arg_i < 0) {
   10fca:	f8db 3000 	ldr.w	r3, [fp]
   10fce:	2b00      	cmp	r3, #0
   10fd0:	db0c      	blt.n	10fec <mp_obj_str_format_helper+0x3c0>
            if ((uint)*arg_i >= n_args - 1) {
   10fd2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   10fd4:	3a01      	subs	r2, #1
   10fd6:	4293      	cmp	r3, r2
   10fd8:	d20b      	bcs.n	10ff2 <mp_obj_str_format_helper+0x3c6>
            arg = args[(*arg_i) + 1];
   10fda:	1c5a      	adds	r2, r3, #1
   10fdc:	9921      	ldr	r1, [sp, #132]	; 0x84
   10fde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   10fe2:	9205      	str	r2, [sp, #20]
            (*arg_i)++;
   10fe4:	3301      	adds	r3, #1
   10fe6:	f8cb 3000 	str.w	r3, [fp]
   10fea:	e6eb      	b.n	10dc4 <mp_obj_str_format_helper+0x198>
                    mp_raise_ValueError(
   10fec:	4825      	ldr	r0, [pc, #148]	; (11084 <mp_obj_str_format_helper+0x458>)
   10fee:	f7f9 f95b 	bl	a2a8 <mp_raise_ValueError>
                mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   10ff2:	4920      	ldr	r1, [pc, #128]	; (11074 <mp_obj_str_format_helper+0x448>)
   10ff4:	4820      	ldr	r0, [pc, #128]	; (11078 <mp_obj_str_format_helper+0x44c>)
   10ff6:	f7f9 f937 	bl	a268 <mp_raise_msg>
        if (!format_spec && !conversion) {
   10ffa:	f1b8 0f00 	cmp.w	r8, #0
   10ffe:	f47f aee4 	bne.w	10dca <mp_obj_str_format_helper+0x19e>
            conversion = 's';
   11002:	f04f 0873 	mov.w	r8, #115	; 0x73
   11006:	e6e3      	b.n	10dd0 <mp_obj_str_format_helper+0x1a4>
                assert(conversion == 'r');
   11008:	4b1f      	ldr	r3, [pc, #124]	; (11088 <mp_obj_str_format_helper+0x45c>)
   1100a:	4a20      	ldr	r2, [pc, #128]	; (1108c <mp_obj_str_format_helper+0x460>)
   1100c:	f240 4147 	movw	r1, #1095	; 0x447
   11010:	481f      	ldr	r0, [pc, #124]	; (11090 <mp_obj_str_format_helper+0x464>)
   11012:	f007 faa3 	bl	1855c <__assert_func>
                print_kind = PRINT_STR;
   11016:	2600      	movs	r6, #0
   11018:	e6e3      	b.n	10de2 <mp_obj_str_format_helper+0x1b6>
            vstr_t format_spec_vstr = mp_obj_str_format_helper(format_spec, str, arg_i, n_args, args, kwargs);
   1101a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1101c:	9302      	str	r3, [sp, #8]
   1101e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11020:	9301      	str	r3, [sp, #4]
   11022:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11024:	9300      	str	r3, [sp, #0]
   11026:	465b      	mov	r3, fp
   11028:	4622      	mov	r2, r4
   1102a:	4639      	mov	r1, r7
   1102c:	a80c      	add	r0, sp, #48	; 0x30
   1102e:	f7ff fdfd 	bl	10c2c <mp_obj_str_format_helper>
            const char *s = vstr_null_terminated_str(&format_spec_vstr);
   11032:	a80c      	add	r0, sp, #48	; 0x30
   11034:	f7f0 fc29 	bl	188a <vstr_null_terminated_str>
   11038:	4607      	mov	r7, r0
            const char *stop = s + format_spec_vstr.len;
   1103a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1103c:	18c3      	adds	r3, r0, r3
   1103e:	9306      	str	r3, [sp, #24]
            if (isalignment(*s)) {
   11040:	f890 8000 	ldrb.w	r8, [r0]
   11044:	4640      	mov	r0, r8
   11046:	f7fe f95b 	bl	f300 <isalignment>
   1104a:	b318      	cbz	r0, 11094 <mp_obj_str_format_helper+0x468>
                align = *s++;
   1104c:	3701      	adds	r7, #1
        char fill = '\0';
   1104e:	f04f 0a00 	mov.w	sl, #0
            if (*s == '+' || *s == '-' || *s == ' ') {
   11052:	783b      	ldrb	r3, [r7, #0]
   11054:	2b2b      	cmp	r3, #43	; 0x2b
   11056:	d031      	beq.n	110bc <mp_obj_str_format_helper+0x490>
   11058:	2b2d      	cmp	r3, #45	; 0x2d
   1105a:	d02f      	beq.n	110bc <mp_obj_str_format_helper+0x490>
   1105c:	2b20      	cmp	r3, #32
   1105e:	d02d      	beq.n	110bc <mp_obj_str_format_helper+0x490>
        int flags = 0;
   11060:	2600      	movs	r6, #0
   11062:	e031      	b.n	110c8 <mp_obj_str_format_helper+0x49c>
   11064:	00028104 	.word	0x00028104
   11068:	00027e28 	.word	0x00027e28
   1106c:	00027e40 	.word	0x00027e40
   11070:	00027e64 	.word	0x00027e64
   11074:	00027eb0 	.word	0x00027eb0
   11078:	00026978 	.word	0x00026978
   1107c:	000269b4 	.word	0x000269b4
   11080:	00027ecc 	.word	0x00027ecc
   11084:	00027eec 	.word	0x00027eec
   11088:	00027f38 	.word	0x00027f38
   1108c:	00027cfc 	.word	0x00027cfc
   11090:	000282c0 	.word	0x000282c0
            } else if (*s && isalignment(s[1])) {
   11094:	f1b8 0f00 	cmp.w	r8, #0
   11098:	d008      	beq.n	110ac <mp_obj_str_format_helper+0x480>
   1109a:	787e      	ldrb	r6, [r7, #1]
   1109c:	4630      	mov	r0, r6
   1109e:	f7fe f92f 	bl	f300 <isalignment>
   110a2:	b138      	cbz	r0, 110b4 <mp_obj_str_format_helper+0x488>
                align = *s++;
   110a4:	3702      	adds	r7, #2
                fill = *s++;
   110a6:	46c2      	mov	sl, r8
                align = *s++;
   110a8:	46b0      	mov	r8, r6
   110aa:	e7d2      	b.n	11052 <mp_obj_str_format_helper+0x426>
        char align = '\0';
   110ac:	f04f 0800 	mov.w	r8, #0
        char fill = '\0';
   110b0:	46c2      	mov	sl, r8
   110b2:	e7ce      	b.n	11052 <mp_obj_str_format_helper+0x426>
        char align = '\0';
   110b4:	f04f 0800 	mov.w	r8, #0
        char fill = '\0';
   110b8:	46c2      	mov	sl, r8
   110ba:	e7ca      	b.n	11052 <mp_obj_str_format_helper+0x426>
                if (*s == '+') {
   110bc:	2b2b      	cmp	r3, #43	; 0x2b
   110be:	d025      	beq.n	1110c <mp_obj_str_format_helper+0x4e0>
                } else if (*s == ' ') {
   110c0:	2b20      	cmp	r3, #32
   110c2:	d025      	beq.n	11110 <mp_obj_str_format_helper+0x4e4>
        int flags = 0;
   110c4:	2600      	movs	r6, #0
                s++;
   110c6:	3701      	adds	r7, #1
            if (*s == '#') {
   110c8:	783b      	ldrb	r3, [r7, #0]
   110ca:	2b23      	cmp	r3, #35	; 0x23
   110cc:	d022      	beq.n	11114 <mp_obj_str_format_helper+0x4e8>
            if (*s == '0') {
   110ce:	783b      	ldrb	r3, [r7, #0]
   110d0:	2b30      	cmp	r3, #48	; 0x30
   110d2:	d023      	beq.n	1111c <mp_obj_str_format_helper+0x4f0>
            s = str_to_int(s, stop, &width);
   110d4:	aa09      	add	r2, sp, #36	; 0x24
   110d6:	9906      	ldr	r1, [sp, #24]
   110d8:	4638      	mov	r0, r7
   110da:	f7fe f839 	bl	f150 <str_to_int>
   110de:	4681      	mov	r9, r0
            if (*s == ',') {
   110e0:	7803      	ldrb	r3, [r0, #0]
   110e2:	2b2c      	cmp	r3, #44	; 0x2c
   110e4:	d025      	beq.n	11132 <mp_obj_str_format_helper+0x506>
            if (*s == '.') {
   110e6:	f899 3000 	ldrb.w	r3, [r9]
   110ea:	2b2e      	cmp	r3, #46	; 0x2e
   110ec:	d026      	beq.n	1113c <mp_obj_str_format_helper+0x510>
            if (istype(*s)) {
   110ee:	f899 7000 	ldrb.w	r7, [r9]
   110f2:	4638      	mov	r0, r7
   110f4:	f7fe f912 	bl	f31c <istype>
   110f8:	b340      	cbz	r0, 1114c <mp_obj_str_format_helper+0x520>
                type = *s++;
   110fa:	f109 0901 	add.w	r9, r9, #1
            if (*s) {
   110fe:	f899 3000 	ldrb.w	r3, [r9]
   11102:	bb2b      	cbnz	r3, 11150 <mp_obj_str_format_helper+0x524>
            vstr_clear(&format_spec_vstr);
   11104:	a80c      	add	r0, sp, #48	; 0x30
   11106:	f7f0 fb85 	bl	1814 <vstr_clear>
   1110a:	e684      	b.n	10e16 <mp_obj_str_format_helper+0x1ea>
                    flags |= PF_FLAG_SHOW_SIGN;
   1110c:	2602      	movs	r6, #2
   1110e:	e7da      	b.n	110c6 <mp_obj_str_format_helper+0x49a>
                    flags |= PF_FLAG_SPACE_SIGN;
   11110:	2604      	movs	r6, #4
   11112:	e7d8      	b.n	110c6 <mp_obj_str_format_helper+0x49a>
                flags |= PF_FLAG_SHOW_PREFIX;
   11114:	f046 0610 	orr.w	r6, r6, #16
                s++;
   11118:	3701      	adds	r7, #1
   1111a:	e7d8      	b.n	110ce <mp_obj_str_format_helper+0x4a2>
                if (!align) {
   1111c:	f1b8 0f00 	cmp.w	r8, #0
   11120:	d101      	bne.n	11126 <mp_obj_str_format_helper+0x4fa>
                    align = '=';
   11122:	f04f 083d 	mov.w	r8, #61	; 0x3d
                if (!fill) {
   11126:	f1ba 0f00 	cmp.w	sl, #0
   1112a:	d1d3      	bne.n	110d4 <mp_obj_str_format_helper+0x4a8>
                    fill = '0';
   1112c:	f04f 0a30 	mov.w	sl, #48	; 0x30
   11130:	e7d0      	b.n	110d4 <mp_obj_str_format_helper+0x4a8>
                flags |= PF_FLAG_SHOW_COMMA;
   11132:	f046 0620 	orr.w	r6, r6, #32
                s++;
   11136:	f100 0901 	add.w	r9, r0, #1
   1113a:	e7d4      	b.n	110e6 <mp_obj_str_format_helper+0x4ba>
                s = str_to_int(s, stop, &precision);
   1113c:	aa0a      	add	r2, sp, #40	; 0x28
   1113e:	9906      	ldr	r1, [sp, #24]
   11140:	f109 0001 	add.w	r0, r9, #1
   11144:	f7fe f804 	bl	f150 <str_to_int>
   11148:	4681      	mov	r9, r0
   1114a:	e7d0      	b.n	110ee <mp_obj_str_format_helper+0x4c2>
        char type = '\0';
   1114c:	2700      	movs	r7, #0
   1114e:	e7d6      	b.n	110fe <mp_obj_str_format_helper+0x4d2>
                    mp_raise_ValueError("invalid format specifier");
   11150:	4874      	ldr	r0, [pc, #464]	; (11324 <mp_obj_str_format_helper+0x6f8>)
   11152:	f7f9 f8a9 	bl	a2a8 <mp_raise_ValueError>
                align = '<';
   11156:	f04f 083c 	mov.w	r8, #60	; 0x3c
   1115a:	e667      	b.n	10e2c <mp_obj_str_format_helper+0x200>
                    mp_raise_ValueError("sign not allowed in string format specifier");
   1115c:	4872      	ldr	r0, [pc, #456]	; (11328 <mp_obj_str_format_helper+0x6fc>)
   1115e:	f7f9 f8a3 	bl	a2a8 <mp_raise_ValueError>
                    mp_raise_ValueError(
   11162:	4872      	ldr	r0, [pc, #456]	; (1132c <mp_obj_str_format_helper+0x700>)
   11164:	f7f9 f8a0 	bl	a2a8 <mp_raise_ValueError>
            case '<': flags |= PF_FLAG_LEFT_ADJUST;     break;
   11168:	f046 0601 	orr.w	r6, r6, #1
   1116c:	e678      	b.n	10e60 <mp_obj_str_format_helper+0x234>
            case '=': flags |= PF_FLAG_PAD_AFTER_SIGN;  break;
   1116e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   11172:	e675      	b.n	10e60 <mp_obj_str_format_helper+0x234>
            case '^': flags |= PF_FLAG_CENTER_ADJUST;   break;
   11174:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   11178:	e672      	b.n	10e60 <mp_obj_str_format_helper+0x234>
                    mp_print_mp_int(&print, arg, 2, 'a', flags, fill, width, 0);
   1117a:	2300      	movs	r3, #0
   1117c:	9303      	str	r3, [sp, #12]
   1117e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11180:	9302      	str	r3, [sp, #8]
   11182:	f8cd a004 	str.w	sl, [sp, #4]
   11186:	9600      	str	r6, [sp, #0]
   11188:	2361      	movs	r3, #97	; 0x61
   1118a:	2202      	movs	r2, #2
   1118c:	9905      	ldr	r1, [sp, #20]
   1118e:	a810      	add	r0, sp, #64	; 0x40
   11190:	f7f0 fca0 	bl	1ad4 <mp_print_mp_int>
                    continue;
   11194:	e561      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
                    char ch = mp_obj_get_int(arg);
   11196:	9805      	ldr	r0, [sp, #20]
   11198:	f7f9 fe18 	bl	adcc <mp_obj_get_int>
   1119c:	a916      	add	r1, sp, #88	; 0x58
   1119e:	f801 0d28 	strb.w	r0, [r1, #-40]!
                    mp_print_strn(&print, &ch, 1, flags, fill, width);
   111a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111a4:	9301      	str	r3, [sp, #4]
   111a6:	f8cd a000 	str.w	sl, [sp]
   111aa:	4633      	mov	r3, r6
   111ac:	2201      	movs	r2, #1
   111ae:	a810      	add	r0, sp, #64	; 0x40
   111b0:	f7f0 fbd4 	bl	195c <mp_print_strn>
   111b4:	e551      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
                    mp_print_mp_int(&print, arg, 10, 'a', flags, fill, width, 0);
   111b6:	2300      	movs	r3, #0
   111b8:	9303      	str	r3, [sp, #12]
   111ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111bc:	9302      	str	r3, [sp, #8]
   111be:	f8cd a004 	str.w	sl, [sp, #4]
   111c2:	9600      	str	r6, [sp, #0]
   111c4:	2361      	movs	r3, #97	; 0x61
   111c6:	220a      	movs	r2, #10
   111c8:	9905      	ldr	r1, [sp, #20]
   111ca:	a810      	add	r0, sp, #64	; 0x40
   111cc:	f7f0 fc82 	bl	1ad4 <mp_print_mp_int>
                    continue;
   111d0:	e543      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
                    if (flags & PF_FLAG_SHOW_PREFIX) {
   111d2:	f016 0f10 	tst.w	r6, #16
   111d6:	d001      	beq.n	111dc <mp_obj_str_format_helper+0x5b0>
                        flags |= PF_FLAG_SHOW_OCTAL_LETTER;
   111d8:	f446 7600 	orr.w	r6, r6, #512	; 0x200
                    mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, 0);
   111dc:	2300      	movs	r3, #0
   111de:	9303      	str	r3, [sp, #12]
   111e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111e2:	9302      	str	r3, [sp, #8]
   111e4:	f8cd a004 	str.w	sl, [sp, #4]
   111e8:	9600      	str	r6, [sp, #0]
   111ea:	2361      	movs	r3, #97	; 0x61
   111ec:	2208      	movs	r2, #8
   111ee:	9905      	ldr	r1, [sp, #20]
   111f0:	a810      	add	r0, sp, #64	; 0x40
   111f2:	f7f0 fc6f 	bl	1ad4 <mp_print_mp_int>
                    continue;
   111f6:	e530      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
                    mp_print_mp_int(&print, arg, 16, type - ('X' - 'A'), flags, fill, width, 0);
   111f8:	2300      	movs	r3, #0
   111fa:	9303      	str	r3, [sp, #12]
   111fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111fe:	9302      	str	r3, [sp, #8]
   11200:	f8cd a004 	str.w	sl, [sp, #4]
   11204:	9600      	str	r6, [sp, #0]
   11206:	f1a7 0317 	sub.w	r3, r7, #23
   1120a:	2210      	movs	r2, #16
   1120c:	9905      	ldr	r1, [sp, #20]
   1120e:	a810      	add	r0, sp, #64	; 0x40
   11210:	f7f0 fc60 	bl	1ad4 <mp_print_mp_int>
                    continue;
   11214:	e521      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
   11216:	9805      	ldr	r0, [sp, #20]
   11218:	f7f9 fcca 	bl	abb0 <mp_obj_get_type_str>
   1121c:	4603      	mov	r3, r0
   1121e:	463a      	mov	r2, r7
   11220:	4943      	ldr	r1, [pc, #268]	; (11330 <mp_obj_str_format_helper+0x704>)
   11222:	4844      	ldr	r0, [pc, #272]	; (11334 <mp_obj_str_format_helper+0x708>)
   11224:	f7fb fc52 	bl	cacc <mp_obj_new_exception_msg_varg>
   11228:	f7ef fb2a 	bl	880 <nlr_jump>
        if (arg_looks_numeric(arg)) {
   1122c:	9805      	ldr	r0, [sp, #20]
   1122e:	f7fd ffcb 	bl	f1c8 <arg_looks_numeric>
   11232:	2800      	cmp	r0, #0
   11234:	d03d      	beq.n	112b2 <mp_obj_str_format_helper+0x686>
            if (!type) {
   11236:	b11f      	cbz	r7, 11240 <mp_obj_str_format_helper+0x614>
            if (type == 'n') {
   11238:	2f6e      	cmp	r7, #110	; 0x6e
   1123a:	d102      	bne.n	11242 <mp_obj_str_format_helper+0x616>
                type = 'g';
   1123c:	2767      	movs	r7, #103	; 0x67
   1123e:	e01f      	b.n	11280 <mp_obj_str_format_helper+0x654>
                type = 'g';
   11240:	2767      	movs	r7, #103	; 0x67
            switch (type) {
   11242:	46b8      	mov	r8, r7
   11244:	2f47      	cmp	r7, #71	; 0x47
   11246:	d817      	bhi.n	11278 <mp_obj_str_format_helper+0x64c>
   11248:	2f45      	cmp	r7, #69	; 0x45
   1124a:	d219      	bcs.n	11280 <mp_obj_str_format_helper+0x654>
   1124c:	2f25      	cmp	r7, #37	; 0x25
   1124e:	d125      	bne.n	1129c <mp_obj_str_format_helper+0x670>
                    flags |= PF_FLAG_ADD_PERCENT;
   11250:	f446 7680 	orr.w	r6, r6, #256	; 0x100
                    mp_print_float(&print, mp_obj_get_float(arg) * F100, 'f', flags, fill, width, precision);
   11254:	9805      	ldr	r0, [sp, #20]
   11256:	f7f9 fe61 	bl	af1c <mp_obj_get_float>
   1125a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1125c:	9301      	str	r3, [sp, #4]
   1125e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11260:	9300      	str	r3, [sp, #0]
   11262:	4653      	mov	r3, sl
   11264:	4632      	mov	r2, r6
   11266:	2166      	movs	r1, #102	; 0x66
   11268:	eddf 7a33 	vldr	s15, [pc, #204]	; 11338 <mp_obj_str_format_helper+0x70c>
   1126c:	ee20 0a27 	vmul.f32	s0, s0, s15
   11270:	a810      	add	r0, sp, #64	; 0x40
   11272:	f7f0 fd5b 	bl	1d2c <mp_print_float>
                    break;
   11276:	e4f0      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
            switch (type) {
   11278:	f1a7 0365 	sub.w	r3, r7, #101	; 0x65
   1127c:	2b02      	cmp	r3, #2
   1127e:	d80d      	bhi.n	1129c <mp_obj_str_format_helper+0x670>
                    mp_print_float(&print, mp_obj_get_float(arg), type, flags, fill, width, precision);
   11280:	9805      	ldr	r0, [sp, #20]
   11282:	f7f9 fe4b 	bl	af1c <mp_obj_get_float>
   11286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11288:	9301      	str	r3, [sp, #4]
   1128a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1128c:	9300      	str	r3, [sp, #0]
   1128e:	4653      	mov	r3, sl
   11290:	4632      	mov	r2, r6
   11292:	4639      	mov	r1, r7
   11294:	a810      	add	r0, sp, #64	; 0x40
   11296:	f7f0 fd49 	bl	1d2c <mp_print_float>
                    break;
   1129a:	e4de      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
   1129c:	9805      	ldr	r0, [sp, #20]
   1129e:	f7f9 fc87 	bl	abb0 <mp_obj_get_type_str>
   112a2:	4603      	mov	r3, r0
   112a4:	4642      	mov	r2, r8
   112a6:	4925      	ldr	r1, [pc, #148]	; (1133c <mp_obj_str_format_helper+0x710>)
   112a8:	4822      	ldr	r0, [pc, #136]	; (11334 <mp_obj_str_format_helper+0x708>)
   112aa:	f7fb fc0f 	bl	cacc <mp_obj_new_exception_msg_varg>
   112ae:	f7ef fae7 	bl	880 <nlr_jump>
            if (align == '=') {
   112b2:	f1b8 0f3d 	cmp.w	r8, #61	; 0x3d
   112b6:	d019      	beq.n	112ec <mp_obj_str_format_helper+0x6c0>
            switch (type) {
   112b8:	b10f      	cbz	r7, 112be <mp_obj_str_format_helper+0x692>
   112ba:	2f73      	cmp	r7, #115	; 0x73
   112bc:	d11c      	bne.n	112f8 <mp_obj_str_format_helper+0x6cc>
                    const char *s = mp_obj_str_get_data(arg, &slen);
   112be:	a90c      	add	r1, sp, #48	; 0x30
   112c0:	9805      	ldr	r0, [sp, #20]
   112c2:	f7fe ffdf 	bl	10284 <mp_obj_str_get_data>
   112c6:	4601      	mov	r1, r0
                    if (precision < 0) {
   112c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   112ca:	2b00      	cmp	r3, #0
   112cc:	db11      	blt.n	112f2 <mp_obj_str_format_helper+0x6c6>
                    if (slen > (size_t)precision) {
   112ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   112d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   112d2:	429a      	cmp	r2, r3
   112d4:	d900      	bls.n	112d8 <mp_obj_str_format_helper+0x6ac>
                        slen = precision;
   112d6:	930c      	str	r3, [sp, #48]	; 0x30
                    mp_print_strn(&print, s, slen, flags, fill, width);
   112d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   112da:	9301      	str	r3, [sp, #4]
   112dc:	f8cd a000 	str.w	sl, [sp]
   112e0:	4633      	mov	r3, r6
   112e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   112e4:	a810      	add	r0, sp, #64	; 0x40
   112e6:	f7f0 fb39 	bl	195c <mp_print_strn>
   112ea:	e4b6      	b.n	10c5a <mp_obj_str_format_helper+0x2e>
                    mp_raise_ValueError(
   112ec:	4814      	ldr	r0, [pc, #80]	; (11340 <mp_obj_str_format_helper+0x714>)
   112ee:	f7f8 ffdb 	bl	a2a8 <mp_raise_ValueError>
                        precision = slen;
   112f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   112f4:	930a      	str	r3, [sp, #40]	; 0x28
   112f6:	e7ea      	b.n	112ce <mp_obj_str_format_helper+0x6a2>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
   112f8:	9805      	ldr	r0, [sp, #20]
   112fa:	f7f9 fc59 	bl	abb0 <mp_obj_get_type_str>
   112fe:	4603      	mov	r3, r0
   11300:	463a      	mov	r2, r7
   11302:	4910      	ldr	r1, [pc, #64]	; (11344 <mp_obj_str_format_helper+0x718>)
   11304:	480b      	ldr	r0, [pc, #44]	; (11334 <mp_obj_str_format_helper+0x708>)
   11306:	f7fb fbe1 	bl	cacc <mp_obj_new_exception_msg_varg>
   1130a:	f7ef fab9 	bl	880 <nlr_jump>
    return vstr;
   1130e:	ab16      	add	r3, sp, #88	; 0x58
   11310:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   11314:	9c07      	ldr	r4, [sp, #28]
   11316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1131a:	4620      	mov	r0, r4
   1131c:	b017      	add	sp, #92	; 0x5c
   1131e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11322:	bf00      	nop
   11324:	00027f4c 	.word	0x00027f4c
   11328:	00027f68 	.word	0x00027f68
   1132c:	00027f94 	.word	0x00027f94
   11330:	00027fc8 	.word	0x00027fc8
   11334:	00026cc0 	.word	0x00026cc0
   11338:	42c80000 	.word	0x42c80000
   1133c:	00027ffc 	.word	0x00027ffc
   11340:	00028030 	.word	0x00028030
   11344:	00028068 	.word	0x00028068

00011348 <mp_obj_str_format>:
mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   11348:	b570      	push	{r4, r5, r6, lr}
   1134a:	b08a      	sub	sp, #40	; 0x28
   1134c:	4605      	mov	r5, r0
   1134e:	460c      	mov	r4, r1
   11350:	4616      	mov	r6, r2
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   11352:	6808      	ldr	r0, [r1, #0]
    { return ((((mp_int_t)(o)) & 3) == 2); }
   11354:	f000 0303 	and.w	r3, r0, #3
   11358:	2b02      	cmp	r3, #2
   1135a:	d005      	beq.n	11368 <mp_obj_str_format+0x20>
   1135c:	b9db      	cbnz	r3, 11396 <mp_obj_str_format+0x4e>
   1135e:	6802      	ldr	r2, [r0, #0]
   11360:	6991      	ldr	r1, [r2, #24]
   11362:	4a13      	ldr	r2, [pc, #76]	; (113b0 <mp_obj_str_format+0x68>)
   11364:	4291      	cmp	r1, r2
   11366:	d116      	bne.n	11396 <mp_obj_str_format+0x4e>
    GET_STR_DATA_LEN(args[0], str, len);
   11368:	2b02      	cmp	r3, #2
   1136a:	d01b      	beq.n	113a4 <mp_obj_str_format+0x5c>
   1136c:	6883      	ldr	r3, [r0, #8]
   1136e:	9309      	str	r3, [sp, #36]	; 0x24
   11370:	6823      	ldr	r3, [r4, #0]
   11372:	68d9      	ldr	r1, [r3, #12]
    int arg_i = 0;
   11374:	2300      	movs	r3, #0
   11376:	9308      	str	r3, [sp, #32]
    vstr_t vstr = mp_obj_str_format_helper((const char*)str, (const char*)str + len, &arg_i, n_args, args, kwargs);
   11378:	9602      	str	r6, [sp, #8]
   1137a:	9401      	str	r4, [sp, #4]
   1137c:	9500      	str	r5, [sp, #0]
   1137e:	ab08      	add	r3, sp, #32
   11380:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11382:	440a      	add	r2, r1
   11384:	a804      	add	r0, sp, #16
   11386:	f7ff fc51 	bl	10c2c <mp_obj_str_format_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   1138a:	a904      	add	r1, sp, #16
   1138c:	4809      	ldr	r0, [pc, #36]	; (113b4 <mp_obj_str_format+0x6c>)
   1138e:	f7fe fad9 	bl	f944 <mp_obj_new_str_from_vstr>
}
   11392:	b00a      	add	sp, #40	; 0x28
   11394:	bd70      	pop	{r4, r5, r6, pc}
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   11396:	4b08      	ldr	r3, [pc, #32]	; (113b8 <mp_obj_str_format+0x70>)
   11398:	4a08      	ldr	r2, [pc, #32]	; (113bc <mp_obj_str_format+0x74>)
   1139a:	f240 5161 	movw	r1, #1377	; 0x561
   1139e:	4808      	ldr	r0, [pc, #32]	; (113c0 <mp_obj_str_format+0x78>)
   113a0:	f007 f8dc 	bl	1855c <__assert_func>
    GET_STR_DATA_LEN(args[0], str, len);
   113a4:	a909      	add	r1, sp, #36	; 0x24
   113a6:	0880      	lsrs	r0, r0, #2
   113a8:	f7f0 f978 	bl	169c <qstr_data>
   113ac:	4601      	mov	r1, r0
   113ae:	e7e1      	b.n	11374 <mp_obj_str_format+0x2c>
   113b0:	000106e5 	.word	0x000106e5
   113b4:	00028104 	.word	0x00028104
   113b8:	00028238 	.word	0x00028238
   113bc:	00027d18 	.word	0x00027d18
   113c0:	000282c0 	.word	0x000282c0

000113c4 <mp_obj_str_intern_checked>:
mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj) {
   113c4:	b500      	push	{lr}
   113c6:	b083      	sub	sp, #12
    const char *data = mp_obj_str_get_data(obj, &len);
   113c8:	a901      	add	r1, sp, #4
   113ca:	f7fe ff5b 	bl	10284 <mp_obj_str_get_data>
    return mp_obj_new_str_via_qstr((const char*)data, len);
   113ce:	9901      	ldr	r1, [sp, #4]
   113d0:	f7fe fa61 	bl	f896 <mp_obj_new_str_via_qstr>
}
   113d4:	b003      	add	sp, #12
   113d6:	f85d fb04 	ldr.w	pc, [sp], #4

000113da <stringio___exit__>:
    // TODO: Try to avoid copying string
    return mp_obj_new_str_of_type(STREAM_TO_CONTENT_TYPE(self), (byte*)self->vstr->buf, self->vstr->len);
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(stringio_getvalue_obj, stringio_getvalue);

STATIC mp_obj_t stringio___exit__(size_t n_args, const mp_obj_t *args) {
   113da:	b508      	push	{r3, lr}
    (void)n_args;
    return mp_stream_close(args[0]);
   113dc:	6808      	ldr	r0, [r1, #0]
   113de:	f001 fd29 	bl	12e34 <mp_stream_close>
}
   113e2:	bd08      	pop	{r3, pc}

000113e4 <stringio_getvalue>:
STATIC mp_obj_t stringio_getvalue(mp_obj_t self_in) {
   113e4:	b508      	push	{r3, lr}
   113e6:	4603      	mov	r3, r0
    return mp_obj_new_str_of_type(STREAM_TO_CONTENT_TYPE(self), (byte*)self->vstr->buf, self->vstr->len);
   113e8:	6801      	ldr	r1, [r0, #0]
   113ea:	4a06      	ldr	r2, [pc, #24]	; (11404 <stringio_getvalue+0x20>)
   113ec:	4291      	cmp	r1, r2
   113ee:	d006      	beq.n	113fe <stringio_getvalue+0x1a>
   113f0:	4805      	ldr	r0, [pc, #20]	; (11408 <stringio_getvalue+0x24>)
   113f2:	685b      	ldr	r3, [r3, #4]
   113f4:	685a      	ldr	r2, [r3, #4]
   113f6:	6899      	ldr	r1, [r3, #8]
   113f8:	f7fe fdce 	bl	ff98 <mp_obj_new_str_of_type>
}
   113fc:	bd08      	pop	{r3, pc}
    return mp_obj_new_str_of_type(STREAM_TO_CONTENT_TYPE(self), (byte*)self->vstr->buf, self->vstr->len);
   113fe:	4803      	ldr	r0, [pc, #12]	; (1140c <stringio_getvalue+0x28>)
   11400:	e7f7      	b.n	113f2 <stringio_getvalue+0xe>
   11402:	bf00      	nop
   11404:	000286d4 	.word	0x000286d4
   11408:	000280c8 	.word	0x000280c8
   1140c:	00028104 	.word	0x00028104

00011410 <stringio_ioctl>:
STATIC mp_uint_t stringio_ioctl(mp_obj_t o_in, mp_uint_t request, uintptr_t arg, int *errcode) {
   11410:	b570      	push	{r4, r5, r6, lr}
    switch (request) {
   11412:	2902      	cmp	r1, #2
   11414:	d008      	beq.n	11428 <stringio_ioctl+0x18>
   11416:	2904      	cmp	r1, #4
   11418:	d025      	beq.n	11466 <stringio_ioctl+0x56>
   1141a:	2901      	cmp	r1, #1
   1141c:	d02e      	beq.n	1147c <stringio_ioctl+0x6c>
            *errcode = MP_EINVAL;
   1141e:	2216      	movs	r2, #22
   11420:	601a      	str	r2, [r3, #0]
            return MP_STREAM_ERROR;
   11422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11426:	e028      	b.n	1147a <stringio_ioctl+0x6a>
            switch (s->whence) {
   11428:	6851      	ldr	r1, [r2, #4]
   1142a:	2901      	cmp	r1, #1
   1142c:	d003      	beq.n	11436 <stringio_ioctl+0x26>
   1142e:	2902      	cmp	r1, #2
   11430:	d00d      	beq.n	1144e <stringio_ioctl+0x3e>
            mp_uint_t ref = 0;
   11432:	2500      	movs	r5, #0
   11434:	e000      	b.n	11438 <stringio_ioctl+0x28>
                    ref = o->pos;
   11436:	6885      	ldr	r5, [r0, #8]
            mp_uint_t new_pos = ref + s->offset;
   11438:	6816      	ldr	r6, [r2, #0]
   1143a:	1974      	adds	r4, r6, r5
            if (s->whence != MP_SEEK_SET && s->offset < 0) {
   1143c:	b109      	cbz	r1, 11442 <stringio_ioctl+0x32>
   1143e:	2e00      	cmp	r6, #0
   11440:	db08      	blt.n	11454 <stringio_ioctl+0x44>
            } else if (new_pos < ref) {
   11442:	42a5      	cmp	r5, r4
   11444:	d80a      	bhi.n	1145c <stringio_ioctl+0x4c>
            s->offset = o->pos = new_pos;
   11446:	6084      	str	r4, [r0, #8]
   11448:	6014      	str	r4, [r2, #0]
            return 0;
   1144a:	2000      	movs	r0, #0
   1144c:	e015      	b.n	1147a <stringio_ioctl+0x6a>
                    ref = o->vstr->len;
   1144e:	6844      	ldr	r4, [r0, #4]
   11450:	6865      	ldr	r5, [r4, #4]
                    break;
   11452:	e7f1      	b.n	11438 <stringio_ioctl+0x28>
                if (new_pos > ref) {
   11454:	42a5      	cmp	r5, r4
   11456:	d2f6      	bcs.n	11446 <stringio_ioctl+0x36>
                    new_pos = 0;
   11458:	2400      	movs	r4, #0
   1145a:	e7f4      	b.n	11446 <stringio_ioctl+0x36>
                *errcode = MP_EINVAL;  // replace with MP_EOVERFLOW when defined
   1145c:	2216      	movs	r2, #22
   1145e:	601a      	str	r2, [r3, #0]
                return MP_STREAM_ERROR;
   11460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11464:	e009      	b.n	1147a <stringio_ioctl+0x6a>
   11466:	4604      	mov	r4, r0
            vstr_clear(o->vstr);
   11468:	6840      	ldr	r0, [r0, #4]
   1146a:	f7f0 f9d3 	bl	1814 <vstr_clear>
            o->vstr->alloc = 0;
   1146e:	6863      	ldr	r3, [r4, #4]
   11470:	2000      	movs	r0, #0
   11472:	6018      	str	r0, [r3, #0]
            o->vstr->len = 0;
   11474:	6863      	ldr	r3, [r4, #4]
   11476:	6058      	str	r0, [r3, #4]
            o->pos = 0;
   11478:	60a0      	str	r0, [r4, #8]
}
   1147a:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1147c:	2000      	movs	r0, #0
   1147e:	e7fc      	b.n	1147a <stringio_ioctl+0x6a>

00011480 <stringio_read>:
STATIC mp_uint_t stringio_read(mp_obj_t o_in, void *buf, mp_uint_t size, int *errcode) {
   11480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (o->vstr->len <= o->pos) {  // read to EOF, or seeked to EOF or beyond
   11482:	6847      	ldr	r7, [r0, #4]
   11484:	687c      	ldr	r4, [r7, #4]
   11486:	6883      	ldr	r3, [r0, #8]
   11488:	429c      	cmp	r4, r3
   1148a:	d910      	bls.n	114ae <stringio_read+0x2e>
    mp_uint_t remaining = o->vstr->len - o->pos;
   1148c:	1ae4      	subs	r4, r4, r3
    if (size > remaining) {
   1148e:	4294      	cmp	r4, r2
   11490:	d300      	bcc.n	11494 <stringio_read+0x14>
   11492:	4614      	mov	r4, r2
   11494:	460e      	mov	r6, r1
   11496:	4605      	mov	r5, r0
    memcpy(buf, o->vstr->buf + o->pos, size);
   11498:	68b9      	ldr	r1, [r7, #8]
   1149a:	4622      	mov	r2, r4
   1149c:	4419      	add	r1, r3
   1149e:	4630      	mov	r0, r6
   114a0:	f00a f9a8 	bl	1b7f4 <memcpy>
    o->pos += size;
   114a4:	68ab      	ldr	r3, [r5, #8]
   114a6:	4423      	add	r3, r4
   114a8:	60ab      	str	r3, [r5, #8]
}
   114aa:	4620      	mov	r0, r4
   114ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   114ae:	2400      	movs	r4, #0
   114b0:	e7fb      	b.n	114aa <stringio_read+0x2a>

000114b2 <stringio_copy_on_write>:
STATIC void stringio_copy_on_write(mp_obj_stringio_t *o) {
   114b2:	b570      	push	{r4, r5, r6, lr}
   114b4:	4604      	mov	r4, r0
    const void *buf = o->vstr->buf;
   114b6:	6845      	ldr	r5, [r0, #4]
   114b8:	68ae      	ldr	r6, [r5, #8]
    o->vstr->buf = m_new(char, o->vstr->len);
   114ba:	6868      	ldr	r0, [r5, #4]
   114bc:	f7ef f9fe 	bl	8bc <m_malloc>
   114c0:	60a8      	str	r0, [r5, #8]
    memcpy(o->vstr->buf, buf, o->vstr->len);
   114c2:	6863      	ldr	r3, [r4, #4]
   114c4:	685a      	ldr	r2, [r3, #4]
   114c6:	4631      	mov	r1, r6
   114c8:	6898      	ldr	r0, [r3, #8]
   114ca:	f00a f993 	bl	1b7f4 <memcpy>
    o->vstr->fixed_buf = false;
   114ce:	6863      	ldr	r3, [r4, #4]
   114d0:	7b1a      	ldrb	r2, [r3, #12]
   114d2:	f36f 0200 	bfc	r2, #0, #1
   114d6:	731a      	strb	r2, [r3, #12]
    o->ref_obj = MP_OBJ_NULL;
   114d8:	2300      	movs	r3, #0
   114da:	60e3      	str	r3, [r4, #12]
}
   114dc:	bd70      	pop	{r4, r5, r6, pc}

000114de <stringio_write>:
STATIC mp_uint_t stringio_write(mp_obj_t o_in, const void *buf, mp_uint_t size, int *errcode) {
   114de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114e2:	4604      	mov	r4, r0
   114e4:	460f      	mov	r7, r1
   114e6:	4616      	mov	r6, r2
   114e8:	4698      	mov	r8, r3
    if (o->vstr->fixed_buf) {
   114ea:	6843      	ldr	r3, [r0, #4]
   114ec:	7b1b      	ldrb	r3, [r3, #12]
   114ee:	f013 0f01 	tst.w	r3, #1
   114f2:	d11c      	bne.n	1152e <stringio_write+0x50>
    mp_uint_t new_pos = o->pos + size;
   114f4:	68a3      	ldr	r3, [r4, #8]
    if (new_pos < size) {
   114f6:	199d      	adds	r5, r3, r6
   114f8:	d21c      	bcs.n	11534 <stringio_write+0x56>
    mp_uint_t org_len = o->vstr->len;
   114fa:	6863      	ldr	r3, [r4, #4]
   114fc:	f8d3 8004 	ldr.w	r8, [r3, #4]
    if (new_pos > o->vstr->alloc) {
   11500:	681a      	ldr	r2, [r3, #0]
   11502:	42aa      	cmp	r2, r5
   11504:	d31c      	bcc.n	11540 <stringio_write+0x62>
    if (o->pos > org_len) {
   11506:	68a2      	ldr	r2, [r4, #8]
   11508:	4542      	cmp	r2, r8
   1150a:	d820      	bhi.n	1154e <stringio_write+0x70>
    memcpy(o->vstr->buf + o->pos, buf, size);
   1150c:	6863      	ldr	r3, [r4, #4]
   1150e:	6898      	ldr	r0, [r3, #8]
   11510:	68a3      	ldr	r3, [r4, #8]
   11512:	4632      	mov	r2, r6
   11514:	4639      	mov	r1, r7
   11516:	4418      	add	r0, r3
   11518:	f00a f96c 	bl	1b7f4 <memcpy>
    o->pos = new_pos;
   1151c:	60a5      	str	r5, [r4, #8]
    if (new_pos > o->vstr->len) {
   1151e:	6863      	ldr	r3, [r4, #4]
   11520:	685a      	ldr	r2, [r3, #4]
   11522:	42aa      	cmp	r2, r5
   11524:	d200      	bcs.n	11528 <stringio_write+0x4a>
        o->vstr->len = new_pos;
   11526:	605d      	str	r5, [r3, #4]
}
   11528:	4630      	mov	r0, r6
   1152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        stringio_copy_on_write(o);
   1152e:	f7ff ffc0 	bl	114b2 <stringio_copy_on_write>
   11532:	e7df      	b.n	114f4 <stringio_write+0x16>
        *errcode = MP_EFBIG;
   11534:	231b      	movs	r3, #27
   11536:	f8c8 3000 	str.w	r3, [r8]
        return MP_STREAM_ERROR;
   1153a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1153e:	e7f3      	b.n	11528 <stringio_write+0x4a>
        o->vstr->len = o->vstr->alloc;
   11540:	605a      	str	r2, [r3, #4]
        vstr_add_len(o->vstr, new_pos - o->vstr->alloc);
   11542:	6860      	ldr	r0, [r4, #4]
   11544:	6801      	ldr	r1, [r0, #0]
   11546:	1a69      	subs	r1, r5, r1
   11548:	f7f0 f994 	bl	1874 <vstr_add_len>
   1154c:	e7db      	b.n	11506 <stringio_write+0x28>
        memset(o->vstr->buf + org_len, 0, o->pos - org_len);
   1154e:	6863      	ldr	r3, [r4, #4]
   11550:	6898      	ldr	r0, [r3, #8]
   11552:	eba2 0208 	sub.w	r2, r2, r8
   11556:	2100      	movs	r1, #0
   11558:	4440      	add	r0, r8
   1155a:	f00a f98f 	bl	1b87c <memset>
   1155e:	e7d5      	b.n	1150c <stringio_write+0x2e>

00011560 <stringio_new>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(stringio___exit___obj, 4, 4, stringio___exit__);

STATIC mp_obj_stringio_t *stringio_new(const mp_obj_type_t *type) {
   11560:	b510      	push	{r4, lr}
   11562:	4604      	mov	r4, r0
    mp_obj_stringio_t *o = m_new_obj(mp_obj_stringio_t);
   11564:	2010      	movs	r0, #16
   11566:	f7ef f9a9 	bl	8bc <m_malloc>
    o->base.type = type;
   1156a:	6004      	str	r4, [r0, #0]
    o->pos = 0;
   1156c:	2200      	movs	r2, #0
   1156e:	6082      	str	r2, [r0, #8]
    o->ref_obj = MP_OBJ_NULL;
   11570:	60c2      	str	r2, [r0, #12]
    return o;
}
   11572:	bd10      	pop	{r4, pc}

00011574 <stringio_make_new>:

STATIC mp_obj_t stringio_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11574:	b570      	push	{r4, r5, r6, lr}
   11576:	b084      	sub	sp, #16
   11578:	460e      	mov	r6, r1
   1157a:	461d      	mov	r5, r3

    mp_uint_t sz = 16;
    bool initdata = false;
    mp_buffer_info_t bufinfo;

    mp_obj_stringio_t *o = stringio_new(type_in);
   1157c:	f7ff fff0 	bl	11560 <stringio_new>
   11580:	4604      	mov	r4, r0

    if (n_args > 0) {
   11582:	b376      	cbz	r6, 115e2 <stringio_make_new+0x6e>
        if (MP_OBJ_IS_INT(args[0])) {
   11584:	6828      	ldr	r0, [r5, #0]
   11586:	f010 0f01 	tst.w	r0, #1
   1158a:	d118      	bne.n	115be <stringio_make_new+0x4a>
   1158c:	f010 0f03 	tst.w	r0, #3
   11590:	d103      	bne.n	1159a <stringio_make_new+0x26>
   11592:	6802      	ldr	r2, [r0, #0]
   11594:	4b1c      	ldr	r3, [pc, #112]	; (11608 <stringio_make_new+0x94>)
   11596:	429a      	cmp	r2, r3
   11598:	d011      	beq.n	115be <stringio_make_new+0x4a>
            sz = mp_obj_get_int(args[0]);
        } else {
            mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   1159a:	2201      	movs	r2, #1
   1159c:	a901      	add	r1, sp, #4
   1159e:	f7f9 fe87 	bl	b2b0 <mp_get_buffer_raise>

            if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
   115a2:	682a      	ldr	r2, [r5, #0]
   115a4:	f002 0303 	and.w	r3, r2, #3
   115a8:	2b02      	cmp	r3, #2
   115aa:	d00c      	beq.n	115c6 <stringio_make_new+0x52>
   115ac:	b923      	cbnz	r3, 115b8 <stringio_make_new+0x44>
   115ae:	6813      	ldr	r3, [r2, #0]
   115b0:	699a      	ldr	r2, [r3, #24]
   115b2:	4b16      	ldr	r3, [pc, #88]	; (1160c <stringio_make_new+0x98>)
   115b4:	429a      	cmp	r2, r3
   115b6:	d006      	beq.n	115c6 <stringio_make_new+0x52>
                o->vstr->len = bufinfo.len;
                o->ref_obj = args[0];
                return MP_OBJ_FROM_PTR(o);
            }

            sz = bufinfo.len;
   115b8:	9802      	ldr	r0, [sp, #8]
            initdata = true;
   115ba:	2501      	movs	r5, #1
   115bc:	e013      	b.n	115e6 <stringio_make_new+0x72>
            sz = mp_obj_get_int(args[0]);
   115be:	f7f9 fc05 	bl	adcc <mp_obj_get_int>
    bool initdata = false;
   115c2:	2500      	movs	r5, #0
            sz = mp_obj_get_int(args[0]);
   115c4:	e00f      	b.n	115e6 <stringio_make_new+0x72>
                o->vstr = m_new_obj(vstr_t);
   115c6:	2010      	movs	r0, #16
   115c8:	f7ef f978 	bl	8bc <m_malloc>
   115cc:	6060      	str	r0, [r4, #4]
                vstr_init_fixed_buf(o->vstr, bufinfo.len, bufinfo.buf);
   115ce:	9a01      	ldr	r2, [sp, #4]
   115d0:	9902      	ldr	r1, [sp, #8]
   115d2:	f7f0 f90a 	bl	17ea <vstr_init_fixed_buf>
                o->vstr->len = bufinfo.len;
   115d6:	6863      	ldr	r3, [r4, #4]
   115d8:	9a02      	ldr	r2, [sp, #8]
   115da:	605a      	str	r2, [r3, #4]
                o->ref_obj = args[0];
   115dc:	682b      	ldr	r3, [r5, #0]
   115de:	60e3      	str	r3, [r4, #12]
                return MP_OBJ_FROM_PTR(o);
   115e0:	e005      	b.n	115ee <stringio_make_new+0x7a>
    bool initdata = false;
   115e2:	2500      	movs	r5, #0
    mp_uint_t sz = 16;
   115e4:	2010      	movs	r0, #16
        }
    }

    o->vstr = vstr_new(sz);
   115e6:	f7f0 f922 	bl	182e <vstr_new>
   115ea:	6060      	str	r0, [r4, #4]

    if (initdata) {
   115ec:	b915      	cbnz	r5, 115f4 <stringio_make_new+0x80>
        stringio_write(MP_OBJ_FROM_PTR(o), bufinfo.buf, bufinfo.len, NULL);
        // Cur ptr is always at the beginning of buffer at the construction
        o->pos = 0;
    }
    return MP_OBJ_FROM_PTR(o);
}
   115ee:	4620      	mov	r0, r4
   115f0:	b004      	add	sp, #16
   115f2:	bd70      	pop	{r4, r5, r6, pc}
        stringio_write(MP_OBJ_FROM_PTR(o), bufinfo.buf, bufinfo.len, NULL);
   115f4:	2300      	movs	r3, #0
   115f6:	9a02      	ldr	r2, [sp, #8]
   115f8:	9901      	ldr	r1, [sp, #4]
   115fa:	4620      	mov	r0, r4
   115fc:	f7ff ff6f 	bl	114de <stringio_write>
        o->pos = 0;
   11600:	2300      	movs	r3, #0
   11602:	60a3      	str	r3, [r4, #8]
   11604:	e7f3      	b.n	115ee <stringio_make_new+0x7a>
   11606:	bf00      	nop
   11608:	00027498 	.word	0x00027498
   1160c:	000106e5 	.word	0x000106e5

00011610 <stringio_print>:
STATIC void stringio_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11610:	b508      	push	{r3, lr}
   11612:	460a      	mov	r2, r1
    mp_printf(print, self->base.type == &mp_type_stringio ? "<io.StringIO 0x%x>" : "<io.BytesIO 0x%x>", self);
   11614:	6809      	ldr	r1, [r1, #0]
   11616:	4b04      	ldr	r3, [pc, #16]	; (11628 <stringio_print+0x18>)
   11618:	4299      	cmp	r1, r3
   1161a:	d003      	beq.n	11624 <stringio_print+0x14>
   1161c:	4903      	ldr	r1, [pc, #12]	; (1162c <stringio_print+0x1c>)
   1161e:	f7f0 fd25 	bl	206c <mp_printf>
}
   11622:	bd08      	pop	{r3, pc}
    mp_printf(print, self->base.type == &mp_type_stringio ? "<io.StringIO 0x%x>" : "<io.BytesIO 0x%x>", self);
   11624:	4902      	ldr	r1, [pc, #8]	; (11630 <stringio_print+0x20>)
   11626:	e7fa      	b.n	1161e <stringio_print+0xe>
   11628:	000286d4 	.word	0x000286d4
   1162c:	00028798 	.word	0x00028798
   11630:	00028784 	.word	0x00028784

00011634 <tuple_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_tuple_t *tuple;
    size_t cur;
} mp_obj_tuple_it_t;

STATIC mp_obj_t tuple_it_iternext(mp_obj_t self_in) {
   11634:	4602      	mov	r2, r0
    mp_obj_tuple_it_t *self = MP_OBJ_TO_PTR(self_in);
    if (self->cur < self->tuple->len) {
   11636:	68c3      	ldr	r3, [r0, #12]
   11638:	6881      	ldr	r1, [r0, #8]
   1163a:	6848      	ldr	r0, [r1, #4]
   1163c:	4283      	cmp	r3, r0
   1163e:	d205      	bcs.n	1164c <tuple_it_iternext+0x18>
        mp_obj_t o_out = self->tuple->items[self->cur];
   11640:	1c98      	adds	r0, r3, #2
   11642:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
        self->cur += 1;
   11646:	3301      	adds	r3, #1
   11648:	60d3      	str	r3, [r2, #12]
        return o_out;
   1164a:	4770      	bx	lr
    } else {
        return MP_OBJ_STOP_ITERATION;
   1164c:	2004      	movs	r0, #4
    }
}
   1164e:	4770      	bx	lr

00011650 <mp_obj_tuple_getiter>:

mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    assert(sizeof(mp_obj_tuple_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_tuple_it_t *o = (mp_obj_tuple_it_t*)iter_buf;
    o->base.type = &mp_type_polymorph_iter;
   11650:	4b04      	ldr	r3, [pc, #16]	; (11664 <mp_obj_tuple_getiter+0x14>)
   11652:	600b      	str	r3, [r1, #0]
    o->iternext = tuple_it_iternext;
   11654:	4b04      	ldr	r3, [pc, #16]	; (11668 <mp_obj_tuple_getiter+0x18>)
   11656:	604b      	str	r3, [r1, #4]
    o->tuple = MP_OBJ_TO_PTR(o_in);
   11658:	6088      	str	r0, [r1, #8]
    o->cur = 0;
   1165a:	2300      	movs	r3, #0
   1165c:	60cb      	str	r3, [r1, #12]
    return MP_OBJ_FROM_PTR(o);
}
   1165e:	4608      	mov	r0, r1
   11660:	4770      	bx	lr
   11662:	bf00      	nop
   11664:	00027b04 	.word	0x00027b04
   11668:	00011635 	.word	0x00011635

0001166c <mp_obj_tuple_print>:
void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   1166c:	b570      	push	{r4, r5, r6, lr}
   1166e:	4606      	mov	r6, r0
   11670:	460d      	mov	r5, r1
        mp_print_str(print, "(");
   11672:	4911      	ldr	r1, [pc, #68]	; (116b8 <mp_obj_tuple_print+0x4c>)
   11674:	f7f0 f963 	bl	193e <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
   11678:	2400      	movs	r4, #0
   1167a:	e007      	b.n	1168c <mp_obj_tuple_print+0x20>
        mp_obj_print_helper(print, o->items[i], kind);
   1167c:	1ca3      	adds	r3, r4, #2
   1167e:	2201      	movs	r2, #1
   11680:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   11684:	4630      	mov	r0, r6
   11686:	f7f9 fa9b 	bl	abc0 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   1168a:	3401      	adds	r4, #1
   1168c:	686b      	ldr	r3, [r5, #4]
   1168e:	42a3      	cmp	r3, r4
   11690:	d906      	bls.n	116a0 <mp_obj_tuple_print+0x34>
        if (i > 0) {
   11692:	2c00      	cmp	r4, #0
   11694:	d0f2      	beq.n	1167c <mp_obj_tuple_print+0x10>
            mp_print_str(print, ", ");
   11696:	4909      	ldr	r1, [pc, #36]	; (116bc <mp_obj_tuple_print+0x50>)
   11698:	4630      	mov	r0, r6
   1169a:	f7f0 f950 	bl	193e <mp_print_str>
   1169e:	e7ed      	b.n	1167c <mp_obj_tuple_print+0x10>
        if (o->len == 1) {
   116a0:	2b01      	cmp	r3, #1
   116a2:	d004      	beq.n	116ae <mp_obj_tuple_print+0x42>
        mp_print_str(print, ")");
   116a4:	4906      	ldr	r1, [pc, #24]	; (116c0 <mp_obj_tuple_print+0x54>)
   116a6:	4630      	mov	r0, r6
   116a8:	f7f0 f949 	bl	193e <mp_print_str>
}
   116ac:	bd70      	pop	{r4, r5, r6, pc}
            mp_print_str(print, ",");
   116ae:	4905      	ldr	r1, [pc, #20]	; (116c4 <mp_obj_tuple_print+0x58>)
   116b0:	4630      	mov	r0, r6
   116b2:	f7f0 f944 	bl	193e <mp_print_str>
   116b6:	e7f5      	b.n	116a4 <mp_obj_tuple_print+0x38>
   116b8:	00025f00 	.word	0x00025f00
   116bc:	00025e80 	.word	0x00025e80
   116c0:	000272a0 	.word	0x000272a0
   116c4:	00028840 	.word	0x00028840

000116c8 <mp_obj_tuple_unary_op>:
    switch (op) {
   116c8:	2805      	cmp	r0, #5
   116ca:	d01e      	beq.n	1170a <mp_obj_tuple_unary_op+0x42>
   116cc:	2806      	cmp	r0, #6
   116ce:	d007      	beq.n	116e0 <mp_obj_tuple_unary_op+0x18>
   116d0:	2804      	cmp	r0, #4
   116d2:	d001      	beq.n	116d8 <mp_obj_tuple_unary_op+0x10>
        default: return MP_OBJ_NULL; // op not supported
   116d4:	2000      	movs	r0, #0
   116d6:	4770      	bx	lr
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   116d8:	684b      	ldr	r3, [r1, #4]
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   116da:	b1db      	cbz	r3, 11714 <mp_obj_tuple_unary_op+0x4c>
   116dc:	480e      	ldr	r0, [pc, #56]	; (11718 <mp_obj_tuple_unary_op+0x50>)
   116de:	4770      	bx	lr
mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   116e0:	b570      	push	{r4, r5, r6, lr}
   116e2:	460e      	mov	r6, r1
            mp_int_t hash = (mp_int_t)mp_const_empty_tuple;
   116e4:	4c0d      	ldr	r4, [pc, #52]	; (1171c <mp_obj_tuple_unary_op+0x54>)
            for (size_t i = 0; i < self->len; i++) {
   116e6:	2500      	movs	r5, #0
   116e8:	e008      	b.n	116fc <mp_obj_tuple_unary_op+0x34>
                hash += MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, self->items[i]));
   116ea:	1cab      	adds	r3, r5, #2
   116ec:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   116f0:	2006      	movs	r0, #6
   116f2:	f7f7 ff27 	bl	9544 <mp_unary_op>
   116f6:	eb04 0460 	add.w	r4, r4, r0, asr #1
            for (size_t i = 0; i < self->len; i++) {
   116fa:	3501      	adds	r5, #1
   116fc:	6873      	ldr	r3, [r6, #4]
   116fe:	42ab      	cmp	r3, r5
   11700:	d8f3      	bhi.n	116ea <mp_obj_tuple_unary_op+0x22>
            return MP_OBJ_NEW_SMALL_INT(hash);
   11702:	0060      	lsls	r0, r4, #1
   11704:	f040 0001 	orr.w	r0, r0, #1
}
   11708:	bd70      	pop	{r4, r5, r6, pc}
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   1170a:	6848      	ldr	r0, [r1, #4]
   1170c:	0040      	lsls	r0, r0, #1
   1170e:	f040 0001 	orr.w	r0, r0, #1
   11712:	4770      	bx	lr
   11714:	4802      	ldr	r0, [pc, #8]	; (11720 <mp_obj_tuple_unary_op+0x58>)
}
   11716:	4770      	bx	lr
   11718:	00025f4c 	.word	0x00025f4c
   1171c:	00028810 	.word	0x00028810
   11720:	00025f44 	.word	0x00025f44

00011724 <tuple_cmp_helper>:
STATIC mp_obj_t tuple_cmp_helper(mp_uint_t op, mp_obj_t self_in, mp_obj_t another_in) {
   11724:	b570      	push	{r4, r5, r6, lr}
   11726:	b082      	sub	sp, #8
   11728:	4606      	mov	r6, r0
   1172a:	460d      	mov	r5, r1
   1172c:	4614      	mov	r4, r2
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   1172e:	4608      	mov	r0, r1
   11730:	f7f9 fa24 	bl	ab7c <mp_obj_get_type>
   11734:	6a42      	ldr	r2, [r0, #36]	; 0x24
   11736:	4b16      	ldr	r3, [pc, #88]	; (11790 <tuple_cmp_helper+0x6c>)
   11738:	429a      	cmp	r2, r3
   1173a:	d11a      	bne.n	11772 <tuple_cmp_helper+0x4e>
    mp_obj_type_t *another_type = mp_obj_get_type(another_in);
   1173c:	4620      	mov	r0, r4
   1173e:	f7f9 fa1d 	bl	ab7c <mp_obj_get_type>
    if (another_type->getiter != mp_obj_tuple_getiter) {
   11742:	6a42      	ldr	r2, [r0, #36]	; 0x24
   11744:	4b12      	ldr	r3, [pc, #72]	; (11790 <tuple_cmp_helper+0x6c>)
   11746:	429a      	cmp	r2, r3
   11748:	d005      	beq.n	11756 <tuple_cmp_helper+0x32>
        another_in = mp_instance_cast_to_native_base(another_in, MP_OBJ_FROM_PTR(&mp_type_tuple));
   1174a:	4912      	ldr	r1, [pc, #72]	; (11794 <tuple_cmp_helper+0x70>)
   1174c:	4620      	mov	r0, r4
   1174e:	f001 f867 	bl	12820 <mp_instance_cast_to_native_base>
        if (another_in == MP_OBJ_NULL) {
   11752:	4604      	mov	r4, r0
   11754:	b198      	cbz	r0, 1177e <tuple_cmp_helper+0x5a>
    return mp_obj_new_bool(mp_seq_cmp_objs(op, self->items, self->len, another->items, another->len));
   11756:	6863      	ldr	r3, [r4, #4]
   11758:	9300      	str	r3, [sp, #0]
   1175a:	f104 0308 	add.w	r3, r4, #8
   1175e:	686a      	ldr	r2, [r5, #4]
   11760:	f105 0108 	add.w	r1, r5, #8
   11764:	4630      	mov	r0, r6
   11766:	f001 f937 	bl	129d8 <mp_seq_cmp_objs>
   1176a:	b960      	cbnz	r0, 11786 <tuple_cmp_helper+0x62>
   1176c:	480a      	ldr	r0, [pc, #40]	; (11798 <tuple_cmp_helper+0x74>)
}
   1176e:	b002      	add	sp, #8
   11770:	bd70      	pop	{r4, r5, r6, pc}
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   11772:	4b0a      	ldr	r3, [pc, #40]	; (1179c <tuple_cmp_helper+0x78>)
   11774:	4a0a      	ldr	r2, [pc, #40]	; (117a0 <tuple_cmp_helper+0x7c>)
   11776:	2168      	movs	r1, #104	; 0x68
   11778:	480a      	ldr	r0, [pc, #40]	; (117a4 <tuple_cmp_helper+0x80>)
   1177a:	f006 feef 	bl	1855c <__assert_func>
            if (op == MP_BINARY_OP_EQUAL) {
   1177e:	2e02      	cmp	r6, #2
   11780:	d103      	bne.n	1178a <tuple_cmp_helper+0x66>
                return mp_const_false;
   11782:	4805      	ldr	r0, [pc, #20]	; (11798 <tuple_cmp_helper+0x74>)
   11784:	e7f3      	b.n	1176e <tuple_cmp_helper+0x4a>
   11786:	4808      	ldr	r0, [pc, #32]	; (117a8 <tuple_cmp_helper+0x84>)
   11788:	e7f1      	b.n	1176e <tuple_cmp_helper+0x4a>
            return MP_OBJ_NULL;
   1178a:	2000      	movs	r0, #0
   1178c:	e7ef      	b.n	1176e <tuple_cmp_helper+0x4a>
   1178e:	bf00      	nop
   11790:	00011651 	.word	0x00011651
   11794:	00028844 	.word	0x00028844
   11798:	00025f44 	.word	0x00025f44
   1179c:	00028880 	.word	0x00028880
   117a0:	000287bc 	.word	0x000287bc
   117a4:	000288bc 	.word	0x000288bc
   117a8:	00025f4c 	.word	0x00025f4c

000117ac <mp_obj_tuple_subscr>:
    if (value == MP_OBJ_SENTINEL) {
   117ac:	2a08      	cmp	r2, #8
   117ae:	d10b      	bne.n	117c8 <mp_obj_tuple_subscr+0x1c>
mp_obj_t mp_obj_tuple_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   117b0:	b510      	push	{r4, lr}
   117b2:	460a      	mov	r2, r1
   117b4:	4604      	mov	r4, r0
        size_t index_value = mp_get_index(self->base.type, self->len, index, false);
   117b6:	2300      	movs	r3, #0
   117b8:	6841      	ldr	r1, [r0, #4]
   117ba:	6800      	ldr	r0, [r0, #0]
   117bc:	f7f9 fc5e 	bl	b07c <mp_get_index>
        return self->items[index_value];
   117c0:	3002      	adds	r0, #2
   117c2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
}
   117c6:	bd10      	pop	{r4, pc}
        return MP_OBJ_NULL; // op not supported
   117c8:	2000      	movs	r0, #0
}
   117ca:	4770      	bx	lr

000117cc <tuple_index>:
STATIC mp_obj_t tuple_index(size_t n_args, const mp_obj_t *args) {
   117cc:	b510      	push	{r4, lr}
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   117ce:	680c      	ldr	r4, [r1, #0]
   117d0:	f014 0f03 	tst.w	r4, #3
   117d4:	d10b      	bne.n	117ee <tuple_index+0x22>
   117d6:	6822      	ldr	r2, [r4, #0]
   117d8:	4b08      	ldr	r3, [pc, #32]	; (117fc <tuple_index+0x30>)
   117da:	429a      	cmp	r2, r3
   117dc:	d107      	bne.n	117ee <tuple_index+0x22>
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   117de:	460b      	mov	r3, r1
   117e0:	4602      	mov	r2, r0
   117e2:	6861      	ldr	r1, [r4, #4]
   117e4:	f104 0008 	add.w	r0, r4, #8
   117e8:	f001 f94a 	bl	12a80 <mp_seq_index_obj>
}
   117ec:	bd10      	pop	{r4, pc}
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   117ee:	4b04      	ldr	r3, [pc, #16]	; (11800 <tuple_index+0x34>)
   117f0:	4a04      	ldr	r2, [pc, #16]	; (11804 <tuple_index+0x38>)
   117f2:	21cf      	movs	r1, #207	; 0xcf
   117f4:	4804      	ldr	r0, [pc, #16]	; (11808 <tuple_index+0x3c>)
   117f6:	f006 feb1 	bl	1855c <__assert_func>
   117fa:	bf00      	nop
   117fc:	00028844 	.word	0x00028844
   11800:	00028934 	.word	0x00028934
   11804:	000287dc 	.word	0x000287dc
   11808:	000288bc 	.word	0x000288bc

0001180c <tuple_count>:
STATIC mp_obj_t tuple_count(mp_obj_t self_in, mp_obj_t value) {
   1180c:	b508      	push	{r3, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   1180e:	f010 0f03 	tst.w	r0, #3
   11812:	d109      	bne.n	11828 <tuple_count+0x1c>
   11814:	6802      	ldr	r2, [r0, #0]
   11816:	4b07      	ldr	r3, [pc, #28]	; (11834 <tuple_count+0x28>)
   11818:	429a      	cmp	r2, r3
   1181a:	d105      	bne.n	11828 <tuple_count+0x1c>
    return mp_seq_count_obj(self->items, self->len, value);
   1181c:	460a      	mov	r2, r1
   1181e:	6841      	ldr	r1, [r0, #4]
   11820:	3008      	adds	r0, #8
   11822:	f001 f965 	bl	12af0 <mp_seq_count_obj>
}
   11826:	bd08      	pop	{r3, pc}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   11828:	4b03      	ldr	r3, [pc, #12]	; (11838 <tuple_count+0x2c>)
   1182a:	4a04      	ldr	r2, [pc, #16]	; (1183c <tuple_count+0x30>)
   1182c:	21c8      	movs	r1, #200	; 0xc8
   1182e:	4804      	ldr	r0, [pc, #16]	; (11840 <tuple_count+0x34>)
   11830:	f006 fe94 	bl	1855c <__assert_func>
   11834:	00028844 	.word	0x00028844
   11838:	000288d0 	.word	0x000288d0
   1183c:	000287d0 	.word	0x000287d0
   11840:	000288bc 	.word	0x000288bc

00011844 <mp_obj_new_tuple>:
    if (n == 0) {
   11844:	b908      	cbnz	r0, 1184a <mp_obj_new_tuple+0x6>
        return mp_const_empty_tuple;
   11846:	480c      	ldr	r0, [pc, #48]	; (11878 <mp_obj_new_tuple+0x34>)
}
   11848:	4770      	bx	lr
mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items) {
   1184a:	b538      	push	{r3, r4, r5, lr}
   1184c:	4604      	mov	r4, r0
   1184e:	460d      	mov	r5, r1
    mp_obj_tuple_t *o = m_new_obj_var(mp_obj_tuple_t, mp_obj_t, n);
   11850:	3002      	adds	r0, #2
   11852:	0080      	lsls	r0, r0, #2
   11854:	f7ef f832 	bl	8bc <m_malloc>
    o->base.type = &mp_type_tuple;
   11858:	4b08      	ldr	r3, [pc, #32]	; (1187c <mp_obj_new_tuple+0x38>)
   1185a:	6003      	str	r3, [r0, #0]
    o->len = n;
   1185c:	6044      	str	r4, [r0, #4]
    if (items) {
   1185e:	b14d      	cbz	r5, 11874 <mp_obj_new_tuple+0x30>
        for (size_t i = 0; i < n; i++) {
   11860:	2300      	movs	r3, #0
   11862:	e005      	b.n	11870 <mp_obj_new_tuple+0x2c>
            o->items[i] = items[i];
   11864:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   11868:	1c9a      	adds	r2, r3, #2
   1186a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        for (size_t i = 0; i < n; i++) {
   1186e:	3301      	adds	r3, #1
   11870:	42a3      	cmp	r3, r4
   11872:	d3f7      	bcc.n	11864 <mp_obj_new_tuple+0x20>
}
   11874:	bd38      	pop	{r3, r4, r5, pc}
   11876:	bf00      	nop
   11878:	00028810 	.word	0x00028810
   1187c:	00028844 	.word	0x00028844

00011880 <mp_obj_tuple_binary_op>:
mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   11880:	b5f0      	push	{r4, r5, r6, r7, lr}
   11882:	b085      	sub	sp, #20
   11884:	460d      	mov	r5, r1
   11886:	4614      	mov	r4, r2
    switch (op) {
   11888:	281c      	cmp	r0, #28
   1188a:	d856      	bhi.n	1193a <mp_obj_tuple_binary_op+0xba>
   1188c:	e8df f000 	tbb	[pc, r0]
   11890:	4f4f4f4f 	.word	0x4f4f4f4f
   11894:	5555554f 	.word	0x5555554f
   11898:	55555555 	.word	0x55555555
   1189c:	550f5555 	.word	0x550f5555
   118a0:	55555531 	.word	0x55555531
   118a4:	55555555 	.word	0x55555555
   118a8:	550f5555 	.word	0x550f5555
   118ac:	31          	.byte	0x31
   118ad:	00          	.byte	0x00
            if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(rhs)), MP_OBJ_FROM_PTR(&mp_type_tuple))) {
   118ae:	4610      	mov	r0, r2
   118b0:	f7f9 f964 	bl	ab7c <mp_obj_get_type>
   118b4:	4923      	ldr	r1, [pc, #140]	; (11944 <mp_obj_tuple_binary_op+0xc4>)
   118b6:	f000 ff27 	bl	12708 <mp_obj_is_subclass_fast>
   118ba:	2800      	cmp	r0, #0
   118bc:	d03f      	beq.n	1193e <mp_obj_tuple_binary_op+0xbe>
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len + p->len, NULL));
   118be:	6868      	ldr	r0, [r5, #4]
   118c0:	6863      	ldr	r3, [r4, #4]
   118c2:	2100      	movs	r1, #0
   118c4:	4418      	add	r0, r3
   118c6:	f7ff ffbd 	bl	11844 <mp_obj_new_tuple>
   118ca:	4606      	mov	r6, r0
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   118cc:	f100 0708 	add.w	r7, r0, #8
   118d0:	686a      	ldr	r2, [r5, #4]
   118d2:	0092      	lsls	r2, r2, #2
   118d4:	f105 0108 	add.w	r1, r5, #8
   118d8:	4638      	mov	r0, r7
   118da:	f009 ff8b 	bl	1b7f4 <memcpy>
   118de:	6868      	ldr	r0, [r5, #4]
   118e0:	6862      	ldr	r2, [r4, #4]
   118e2:	0092      	lsls	r2, r2, #2
   118e4:	f104 0108 	add.w	r1, r4, #8
   118e8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   118ec:	f009 ff82 	bl	1b7f4 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   118f0:	e020      	b.n	11934 <mp_obj_tuple_binary_op+0xb4>
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   118f2:	a903      	add	r1, sp, #12
   118f4:	4610      	mov	r0, r2
   118f6:	f7f9 faab 	bl	ae50 <mp_obj_get_int_maybe>
   118fa:	b1a0      	cbz	r0, 11926 <mp_obj_tuple_binary_op+0xa6>
            if (n <= 0) {
   118fc:	9b03      	ldr	r3, [sp, #12]
   118fe:	2b00      	cmp	r3, #0
   11900:	dd13      	ble.n	1192a <mp_obj_tuple_binary_op+0xaa>
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len * n, NULL));
   11902:	6868      	ldr	r0, [r5, #4]
   11904:	2100      	movs	r1, #0
   11906:	fb00 f003 	mul.w	r0, r0, r3
   1190a:	f7ff ff9b 	bl	11844 <mp_obj_new_tuple>
   1190e:	4606      	mov	r6, r0
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   11910:	f100 0308 	add.w	r3, r0, #8
   11914:	9300      	str	r3, [sp, #0]
   11916:	9b03      	ldr	r3, [sp, #12]
   11918:	686a      	ldr	r2, [r5, #4]
   1191a:	2104      	movs	r1, #4
   1191c:	f105 0008 	add.w	r0, r5, #8
   11920:	f001 f80b 	bl	1293a <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   11924:	e006      	b.n	11934 <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   11926:	2600      	movs	r6, #0
   11928:	e004      	b.n	11934 <mp_obj_tuple_binary_op+0xb4>
                return mp_const_empty_tuple;
   1192a:	4e07      	ldr	r6, [pc, #28]	; (11948 <mp_obj_tuple_binary_op+0xc8>)
   1192c:	e002      	b.n	11934 <mp_obj_tuple_binary_op+0xb4>
            return tuple_cmp_helper(op, lhs, rhs);
   1192e:	f7ff fef9 	bl	11724 <tuple_cmp_helper>
   11932:	4606      	mov	r6, r0
}
   11934:	4630      	mov	r0, r6
   11936:	b005      	add	sp, #20
   11938:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return MP_OBJ_NULL; // op not supported
   1193a:	2600      	movs	r6, #0
   1193c:	e7fa      	b.n	11934 <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   1193e:	2600      	movs	r6, #0
   11940:	e7f8      	b.n	11934 <mp_obj_tuple_binary_op+0xb4>
   11942:	bf00      	nop
   11944:	00028844 	.word	0x00028844
   11948:	00028810 	.word	0x00028810

0001194c <mp_obj_tuple_make_new>:
STATIC mp_obj_t mp_obj_tuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1194c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11950:	b082      	sub	sp, #8
   11952:	460c      	mov	r4, r1
   11954:	4611      	mov	r1, r2
   11956:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   11958:	2200      	movs	r2, #0
   1195a:	9200      	str	r2, [sp, #0]
   1195c:	2301      	movs	r3, #1
   1195e:	4620      	mov	r0, r4
   11960:	f7f8 feda 	bl	a718 <mp_arg_check_num>
    switch (n_args) {
   11964:	b374      	cbz	r4, 119c4 <mp_obj_tuple_make_new+0x78>
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_tuple)) {
   11966:	682c      	ldr	r4, [r5, #0]
   11968:	f014 0f03 	tst.w	r4, #3
   1196c:	d103      	bne.n	11976 <mp_obj_tuple_make_new+0x2a>
   1196e:	6822      	ldr	r2, [r4, #0]
   11970:	4b17      	ldr	r3, [pc, #92]	; (119d0 <mp_obj_tuple_make_new+0x84>)
   11972:	429a      	cmp	r2, r3
   11974:	d027      	beq.n	119c6 <mp_obj_tuple_make_new+0x7a>
            mp_obj_t *items = m_new(mp_obj_t, alloc);
   11976:	2010      	movs	r0, #16
   11978:	f7ee ffa0 	bl	8bc <m_malloc>
   1197c:	4606      	mov	r6, r0
            mp_obj_t iterable = mp_getiter(args[0], NULL);
   1197e:	2100      	movs	r1, #0
   11980:	6828      	ldr	r0, [r5, #0]
   11982:	f7f7 ffc5 	bl	9910 <mp_getiter>
   11986:	4680      	mov	r8, r0
            size_t len = 0;
   11988:	2400      	movs	r4, #0
            size_t alloc = 4;
   1198a:	2704      	movs	r7, #4
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1198c:	e002      	b.n	11994 <mp_obj_tuple_make_new+0x48>
                items[len++] = item;
   1198e:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
   11992:	3401      	adds	r4, #1
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   11994:	4640      	mov	r0, r8
   11996:	f7f8 f829 	bl	99ec <mp_iternext>
   1199a:	4605      	mov	r5, r0
   1199c:	2804      	cmp	r0, #4
   1199e:	d008      	beq.n	119b2 <mp_obj_tuple_make_new+0x66>
                if (len >= alloc) {
   119a0:	42a7      	cmp	r7, r4
   119a2:	d8f4      	bhi.n	1198e <mp_obj_tuple_make_new+0x42>
                    items = m_renew(mp_obj_t, items, alloc, alloc * 2);
   119a4:	00f9      	lsls	r1, r7, #3
   119a6:	4630      	mov	r0, r6
   119a8:	f7ee ff9f 	bl	8ea <m_realloc>
   119ac:	4606      	mov	r6, r0
                    alloc *= 2;
   119ae:	007f      	lsls	r7, r7, #1
   119b0:	e7ed      	b.n	1198e <mp_obj_tuple_make_new+0x42>
            mp_obj_t tuple = mp_obj_new_tuple(len, items);
   119b2:	4631      	mov	r1, r6
   119b4:	4620      	mov	r0, r4
   119b6:	f7ff ff45 	bl	11844 <mp_obj_new_tuple>
   119ba:	4604      	mov	r4, r0
            m_del(mp_obj_t, items, alloc);
   119bc:	4630      	mov	r0, r6
   119be:	f7ee ffa6 	bl	90e <m_free>
            return tuple;
   119c2:	e000      	b.n	119c6 <mp_obj_tuple_make_new+0x7a>
            return mp_const_empty_tuple;
   119c4:	4c03      	ldr	r4, [pc, #12]	; (119d4 <mp_obj_tuple_make_new+0x88>)
}
   119c6:	4620      	mov	r0, r4
   119c8:	b002      	add	sp, #8
   119ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   119ce:	bf00      	nop
   119d0:	00028844 	.word	0x00028844
   119d4:	00028810 	.word	0x00028810

000119d8 <mp_obj_tuple_get>:
void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   119d8:	b510      	push	{r4, lr}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   119da:	f010 0f03 	tst.w	r0, #3
   119de:	d108      	bne.n	119f2 <mp_obj_tuple_get+0x1a>
   119e0:	6804      	ldr	r4, [r0, #0]
   119e2:	4b07      	ldr	r3, [pc, #28]	; (11a00 <mp_obj_tuple_get+0x28>)
   119e4:	429c      	cmp	r4, r3
   119e6:	d104      	bne.n	119f2 <mp_obj_tuple_get+0x1a>
    *len = self->len;
   119e8:	6843      	ldr	r3, [r0, #4]
   119ea:	600b      	str	r3, [r1, #0]
    *items = &self->items[0];
   119ec:	3008      	adds	r0, #8
   119ee:	6010      	str	r0, [r2, #0]
}
   119f0:	bd10      	pop	{r4, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   119f2:	4b04      	ldr	r3, [pc, #16]	; (11a04 <mp_obj_tuple_get+0x2c>)
   119f4:	4a04      	ldr	r2, [pc, #16]	; (11a08 <mp_obj_tuple_get+0x30>)
   119f6:	21fb      	movs	r1, #251	; 0xfb
   119f8:	4804      	ldr	r0, [pc, #16]	; (11a0c <mp_obj_tuple_get+0x34>)
   119fa:	f006 fdaf 	bl	1855c <__assert_func>
   119fe:	bf00      	nop
   11a00:	00028844 	.word	0x00028844
   11a04:	00028818 	.word	0x00028818
   11a08:	000287e8 	.word	0x000287e8
   11a0c:	000288bc 	.word	0x000288bc

00011a10 <mp_obj_tuple_del>:
void mp_obj_tuple_del(mp_obj_t self_in) {
   11a10:	b508      	push	{r3, lr}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   11a12:	f010 0f03 	tst.w	r0, #3
   11a16:	d106      	bne.n	11a26 <mp_obj_tuple_del+0x16>
   11a18:	6802      	ldr	r2, [r0, #0]
   11a1a:	4b06      	ldr	r3, [pc, #24]	; (11a34 <mp_obj_tuple_del+0x24>)
   11a1c:	429a      	cmp	r2, r3
   11a1e:	d102      	bne.n	11a26 <mp_obj_tuple_del+0x16>
    m_del_var(mp_obj_tuple_t, mp_obj_t, self->len, self);
   11a20:	f7ee ff75 	bl	90e <m_free>
}
   11a24:	bd08      	pop	{r3, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   11a26:	4b04      	ldr	r3, [pc, #16]	; (11a38 <mp_obj_tuple_del+0x28>)
   11a28:	4a04      	ldr	r2, [pc, #16]	; (11a3c <mp_obj_tuple_del+0x2c>)
   11a2a:	f44f 7181 	mov.w	r1, #258	; 0x102
   11a2e:	4804      	ldr	r0, [pc, #16]	; (11a40 <mp_obj_tuple_del+0x30>)
   11a30:	f006 fd94 	bl	1855c <__assert_func>
   11a34:	00028844 	.word	0x00028844
   11a38:	00028818 	.word	0x00028818
   11a3c:	000287fc 	.word	0x000287fc
   11a40:	000288bc 	.word	0x000288bc

00011a44 <instance_count_native_bases>:
STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);

/******************************************************************************/
// instance object

STATIC int instance_count_native_bases(const mp_obj_type_t *type, const mp_obj_type_t **last_native_base) {
   11a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a46:	460d      	mov	r5, r1
    int count = 0;
    for (;;) {
        if (type == &mp_type_object) {
   11a48:	4b18      	ldr	r3, [pc, #96]	; (11aac <instance_count_native_bases+0x68>)
   11a4a:	4298      	cmp	r0, r3
   11a4c:	d028      	beq.n	11aa0 <instance_count_native_bases+0x5c>
            // Not a "real" type, end search here.
            return count;
        } else if (mp_obj_is_native_type(type)) {
   11a4e:	68c2      	ldr	r2, [r0, #12]
   11a50:	4b17      	ldr	r3, [pc, #92]	; (11ab0 <instance_count_native_bases+0x6c>)
   11a52:	429a      	cmp	r2, r3
   11a54:	d11b      	bne.n	11a8e <instance_count_native_bases+0x4a>
            // Native types don't have parents (at least not from our perspective) so end.
            *last_native_base = type;
            return count + 1;
        } else if (type->parent == NULL) {
   11a56:	6b40      	ldr	r0, [r0, #52]	; 0x34
   11a58:	b328      	cbz	r0, 11aa6 <instance_count_native_bases+0x62>
            // No parents so end search here.
            return count;
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   11a5a:	6802      	ldr	r2, [r0, #0]
   11a5c:	4b15      	ldr	r3, [pc, #84]	; (11ab4 <instance_count_native_bases+0x70>)
   11a5e:	429a      	cmp	r2, r3
   11a60:	d1f2      	bne.n	11a48 <instance_count_native_bases+0x4>
            // Multiple parents, search through them all recursively.
            const mp_obj_tuple_t *parent_tuple = type->parent;
            const mp_obj_t *item = parent_tuple->items;
   11a62:	f100 0408 	add.w	r4, r0, #8
            const mp_obj_t *top = item + parent_tuple->len;
   11a66:	6847      	ldr	r7, [r0, #4]
   11a68:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    int count = 0;
   11a6c:	2600      	movs	r6, #0
            for (; item < top; ++item) {
   11a6e:	42bc      	cmp	r4, r7
   11a70:	d217      	bcs.n	11aa2 <instance_count_native_bases+0x5e>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   11a72:	6820      	ldr	r0, [r4, #0]
   11a74:	f010 0f03 	tst.w	r0, #3
   11a78:	d10c      	bne.n	11a94 <instance_count_native_bases+0x50>
   11a7a:	6802      	ldr	r2, [r0, #0]
   11a7c:	4b0e      	ldr	r3, [pc, #56]	; (11ab8 <instance_count_native_bases+0x74>)
   11a7e:	429a      	cmp	r2, r3
   11a80:	d108      	bne.n	11a94 <instance_count_native_bases+0x50>
                const mp_obj_type_t *bt = (const mp_obj_type_t *)MP_OBJ_TO_PTR(*item);
                count += instance_count_native_bases(bt, last_native_base);
   11a82:	4629      	mov	r1, r5
   11a84:	f7ff ffde 	bl	11a44 <instance_count_native_bases>
   11a88:	4406      	add	r6, r0
            for (; item < top; ++item) {
   11a8a:	3404      	adds	r4, #4
   11a8c:	e7ef      	b.n	11a6e <instance_count_native_bases+0x2a>
            *last_native_base = type;
   11a8e:	6028      	str	r0, [r5, #0]
            return count + 1;
   11a90:	2601      	movs	r6, #1
   11a92:	e006      	b.n	11aa2 <instance_count_native_bases+0x5e>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   11a94:	4b09      	ldr	r3, [pc, #36]	; (11abc <instance_count_native_bases+0x78>)
   11a96:	4a0a      	ldr	r2, [pc, #40]	; (11ac0 <instance_count_native_bases+0x7c>)
   11a98:	2145      	movs	r1, #69	; 0x45
   11a9a:	480a      	ldr	r0, [pc, #40]	; (11ac4 <instance_count_native_bases+0x80>)
   11a9c:	f006 fd5e 	bl	1855c <__assert_func>
            return count;
   11aa0:	2600      	movs	r6, #0
        } else {
            // A single parent, use iteration to continue the search.
            type = type->parent;
        }
    }
}
   11aa2:	4630      	mov	r0, r6
   11aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return count;
   11aa6:	2600      	movs	r6, #0
   11aa8:	e7fb      	b.n	11aa2 <instance_count_native_bases+0x5e>
   11aaa:	bf00      	nop
   11aac:	00027ac8 	.word	0x00027ac8
   11ab0:	00011d11 	.word	0x00011d11
   11ab4:	00028844 	.word	0x00028844
   11ab8:	00028dd0 	.word	0x00028dd0
   11abc:	00028a80 	.word	0x00028a80
   11ac0:	000289bc 	.word	0x000289bc
   11ac4:	00028aa8 	.word	0x00028aa8

00011ac8 <native_base_init_wrapper>:

// This wrapper function is allows a subclass of a native type to call the
// __init__() method (corresponding to type->make_new) of the native type.
STATIC mp_obj_t native_base_init_wrapper(size_t n_args, const mp_obj_t *args) {
   11ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11acc:	b082      	sub	sp, #8
   11ace:	4680      	mov	r8, r0
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(args[0]);
   11ad0:	460c      	mov	r4, r1
   11ad2:	f854 5b04 	ldr.w	r5, [r4], #4
    const mp_obj_type_t *native_base = NULL;
   11ad6:	2600      	movs	r6, #0
   11ad8:	a902      	add	r1, sp, #8
   11ada:	f841 6d04 	str.w	r6, [r1, #-4]!
    instance_count_native_bases(self->base.type, &native_base);
   11ade:	6828      	ldr	r0, [r5, #0]
   11ae0:	f7ff ffb0 	bl	11a44 <instance_count_native_bases>
    self->subobj[0] = native_base->make_new(native_base, n_args - 1, 0, args + 1);
   11ae4:	9801      	ldr	r0, [sp, #4]
   11ae6:	68c7      	ldr	r7, [r0, #12]
   11ae8:	4623      	mov	r3, r4
   11aea:	4632      	mov	r2, r6
   11aec:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   11af0:	47b8      	blx	r7
   11af2:	6128      	str	r0, [r5, #16]
    return mp_const_none;
}
   11af4:	4801      	ldr	r0, [pc, #4]	; (11afc <native_base_init_wrapper+0x34>)
   11af6:	b002      	add	sp, #8
   11af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11afc:	00027b40 	.word	0x00027b40

00011b00 <type_call>:
        default:
            mp_raise_TypeError("type takes 1 or 3 arguments");
    }
}

STATIC mp_obj_t type_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11b00:	b510      	push	{r4, lr}
    // instantiate an instance of a class

    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);

    if (self->make_new == NULL) {
   11b02:	68c4      	ldr	r4, [r0, #12]
   11b04:	b10c      	cbz	r4, 11b0a <type_call+0xa>
                "cannot create '%q' instances", self->name));
        }
    }

    // make new instance
    mp_obj_t o = self->make_new(self, n_args, n_kw, args);
   11b06:	47a0      	blx	r4

    // return new instance
    return o;
}
   11b08:	bd10      	pop	{r4, pc}
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   11b0a:	6842      	ldr	r2, [r0, #4]
   11b0c:	4902      	ldr	r1, [pc, #8]	; (11b18 <type_call+0x18>)
   11b0e:	4803      	ldr	r0, [pc, #12]	; (11b1c <type_call+0x1c>)
   11b10:	f7fa ffdc 	bl	cacc <mp_obj_new_exception_msg_varg>
   11b14:	f7ee feb4 	bl	880 <nlr_jump>
   11b18:	00028f44 	.word	0x00028f44
   11b1c:	00026c84 	.word	0x00026c84

00011b20 <mp_obj_new_instance>:
mp_obj_instance_t *mp_obj_new_instance(const mp_obj_type_t *class, const mp_obj_type_t **native_base) {
   11b20:	b570      	push	{r4, r5, r6, lr}
   11b22:	4606      	mov	r6, r0
    size_t num_native_bases = instance_count_native_bases(class, native_base);
   11b24:	f7ff ff8e 	bl	11a44 <instance_count_native_bases>
    assert(num_native_bases < 2);
   11b28:	2801      	cmp	r0, #1
   11b2a:	d80f      	bhi.n	11b4c <mp_obj_new_instance+0x2c>
   11b2c:	4604      	mov	r4, r0
    mp_obj_instance_t *o = m_new_obj_var(mp_obj_instance_t, mp_obj_t, num_native_bases);
   11b2e:	3004      	adds	r0, #4
   11b30:	0080      	lsls	r0, r0, #2
   11b32:	f7ee fec3 	bl	8bc <m_malloc>
   11b36:	4605      	mov	r5, r0
    o->base.type = class;
   11b38:	f840 6b04 	str.w	r6, [r0], #4
    mp_map_init(&o->members, 0);
   11b3c:	2100      	movs	r1, #0
   11b3e:	f7f8 febf 	bl	a8c0 <mp_map_init>
    if (num_native_bases != 0) {
   11b42:	b10c      	cbz	r4, 11b48 <mp_obj_new_instance+0x28>
        o->subobj[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   11b44:	4b04      	ldr	r3, [pc, #16]	; (11b58 <mp_obj_new_instance+0x38>)
   11b46:	612b      	str	r3, [r5, #16]
}
   11b48:	4628      	mov	r0, r5
   11b4a:	bd70      	pop	{r4, r5, r6, pc}
    assert(num_native_bases < 2);
   11b4c:	4b03      	ldr	r3, [pc, #12]	; (11b5c <mp_obj_new_instance+0x3c>)
   11b4e:	4a04      	ldr	r2, [pc, #16]	; (11b60 <mp_obj_new_instance+0x40>)
   11b50:	2162      	movs	r1, #98	; 0x62
   11b52:	4804      	ldr	r0, [pc, #16]	; (11b64 <mp_obj_new_instance+0x44>)
   11b54:	f006 fd02 	bl	1855c <__assert_func>
   11b58:	00028e18 	.word	0x00028e18
   11b5c:	00028c20 	.word	0x00028c20
   11b60:	000289d8 	.word	0x000289d8
   11b64:	00028aa8 	.word	0x00028aa8

00011b68 <mp_obj_instance_store_attr>:
STATIC bool mp_obj_instance_store_attr(mp_obj_t self_in, qstr attr, mp_obj_t value) {
   11b68:	b510      	push	{r4, lr}
    if (value == MP_OBJ_NULL) {
   11b6a:	b152      	cbz	r2, 11b82 <mp_obj_instance_store_attr+0x1a>
   11b6c:	4614      	mov	r4, r2
        mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
   11b6e:	0089      	lsls	r1, r1, #2
   11b70:	2201      	movs	r2, #1
   11b72:	f041 0102 	orr.w	r1, r1, #2
   11b76:	3004      	adds	r0, #4
   11b78:	f7f8 fede 	bl	a938 <mp_map_lookup>
   11b7c:	6044      	str	r4, [r0, #4]
        return true;
   11b7e:	2001      	movs	r0, #1
}
   11b80:	bd10      	pop	{r4, pc}
        mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   11b82:	0089      	lsls	r1, r1, #2
   11b84:	2202      	movs	r2, #2
   11b86:	4311      	orrs	r1, r2
   11b88:	3004      	adds	r0, #4
   11b8a:	f7f8 fed5 	bl	a938 <mp_map_lookup>
        return elem != NULL;
   11b8e:	3000      	adds	r0, #0
   11b90:	bf18      	it	ne
   11b92:	2001      	movne	r0, #1
   11b94:	e7f4      	b.n	11b80 <mp_obj_instance_store_attr+0x18>
	...

00011b98 <mp_obj_class_lookup>:
STATIC void mp_obj_class_lookup(struct class_lookup_data  *lookup, const mp_obj_type_t *type) {
   11b98:	b570      	push	{r4, r5, r6, lr}
    assert(lookup->dest[0] == MP_OBJ_NULL);
   11b9a:	68c3      	ldr	r3, [r0, #12]
   11b9c:	681a      	ldr	r2, [r3, #0]
   11b9e:	b952      	cbnz	r2, 11bb6 <mp_obj_class_lookup+0x1e>
   11ba0:	4605      	mov	r5, r0
   11ba2:	460c      	mov	r4, r1
    assert(lookup->dest[1] == MP_OBJ_NULL);
   11ba4:	685b      	ldr	r3, [r3, #4]
   11ba6:	2b00      	cmp	r3, #0
   11ba8:	d038      	beq.n	11c1c <mp_obj_class_lookup+0x84>
   11baa:	4b4e      	ldr	r3, [pc, #312]	; (11ce4 <mp_obj_class_lookup+0x14c>)
   11bac:	4a4e      	ldr	r2, [pc, #312]	; (11ce8 <mp_obj_class_lookup+0x150>)
   11bae:	2187      	movs	r1, #135	; 0x87
   11bb0:	484e      	ldr	r0, [pc, #312]	; (11cec <mp_obj_class_lookup+0x154>)
   11bb2:	f006 fcd3 	bl	1855c <__assert_func>
    assert(lookup->dest[0] == MP_OBJ_NULL);
   11bb6:	4b4e      	ldr	r3, [pc, #312]	; (11cf0 <mp_obj_class_lookup+0x158>)
   11bb8:	4a4b      	ldr	r2, [pc, #300]	; (11ce8 <mp_obj_class_lookup+0x150>)
   11bba:	2186      	movs	r1, #134	; 0x86
   11bbc:	484b      	ldr	r0, [pc, #300]	; (11cec <mp_obj_class_lookup+0x154>)
   11bbe:	f006 fccd 	bl	1855c <__assert_func>
                lookup->dest[0] = MP_OBJ_SENTINEL;
   11bc2:	68eb      	ldr	r3, [r5, #12]
   11bc4:	2208      	movs	r2, #8
   11bc6:	601a      	str	r2, [r3, #0]
                return;
   11bc8:	e07d      	b.n	11cc6 <mp_obj_class_lookup+0x12e>
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   11bca:	4b4a      	ldr	r3, [pc, #296]	; (11cf4 <mp_obj_class_lookup+0x15c>)
   11bcc:	4a46      	ldr	r2, [pc, #280]	; (11ce8 <mp_obj_class_lookup+0x150>)
   11bce:	2199      	movs	r1, #153	; 0x99
   11bd0:	4846      	ldr	r0, [pc, #280]	; (11cec <mp_obj_class_lookup+0x154>)
   11bd2:	f006 fcc3 	bl	1855c <__assert_func>
                if (lookup->is_type) {
   11bd6:	7c2b      	ldrb	r3, [r5, #16]
   11bd8:	b97b      	cbnz	r3, 11bfa <mp_obj_class_lookup+0x62>
                    mp_obj_instance_t *obj = lookup->obj;
   11bda:	6828      	ldr	r0, [r5, #0]
                    if (obj != NULL && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   11bdc:	b138      	cbz	r0, 11bee <mp_obj_class_lookup+0x56>
   11bde:	68e1      	ldr	r1, [r4, #12]
   11be0:	4b45      	ldr	r3, [pc, #276]	; (11cf8 <mp_obj_class_lookup+0x160>)
   11be2:	4299      	cmp	r1, r3
   11be4:	d003      	beq.n	11bee <mp_obj_class_lookup+0x56>
   11be6:	4b45      	ldr	r3, [pc, #276]	; (11cfc <mp_obj_class_lookup+0x164>)
   11be8:	429c      	cmp	r4, r3
   11bea:	d000      	beq.n	11bee <mp_obj_class_lookup+0x56>
                        obj_obj = obj->subobj[0];
   11bec:	6900      	ldr	r0, [r0, #16]
                    mp_convert_member_lookup(obj_obj, type, elem->value, lookup->dest);
   11bee:	68eb      	ldr	r3, [r5, #12]
   11bf0:	6852      	ldr	r2, [r2, #4]
   11bf2:	4621      	mov	r1, r4
   11bf4:	f7f7 fd8a 	bl	970c <mp_convert_member_lookup>
   11bf8:	e065      	b.n	11cc6 <mp_obj_class_lookup+0x12e>
                    mp_convert_member_lookup(MP_OBJ_NULL, org_type, elem->value, lookup->dest);
   11bfa:	68eb      	ldr	r3, [r5, #12]
   11bfc:	6842      	ldr	r2, [r0, #4]
   11bfe:	6829      	ldr	r1, [r5, #0]
   11c00:	2000      	movs	r0, #0
   11c02:	f7f7 fd83 	bl	970c <mp_convert_member_lookup>
   11c06:	e05e      	b.n	11cc6 <mp_obj_class_lookup+0x12e>
        if (type->parent == NULL) {
   11c08:	6b64      	ldr	r4, [r4, #52]	; 0x34
   11c0a:	2c00      	cmp	r4, #0
   11c0c:	d05b      	beq.n	11cc6 <mp_obj_class_lookup+0x12e>
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   11c0e:	6822      	ldr	r2, [r4, #0]
   11c10:	4b3b      	ldr	r3, [pc, #236]	; (11d00 <mp_obj_class_lookup+0x168>)
   11c12:	429a      	cmp	r2, r3
   11c14:	d033      	beq.n	11c7e <mp_obj_class_lookup+0xe6>
        if (type == &mp_type_object) {
   11c16:	4b39      	ldr	r3, [pc, #228]	; (11cfc <mp_obj_class_lookup+0x164>)
   11c18:	429c      	cmp	r4, r3
   11c1a:	d054      	beq.n	11cc6 <mp_obj_class_lookup+0x12e>
        if (lookup->meth_offset != 0 && mp_obj_is_native_type(type)) {
   11c1c:	68ab      	ldr	r3, [r5, #8]
   11c1e:	b133      	cbz	r3, 11c2e <mp_obj_class_lookup+0x96>
   11c20:	68e1      	ldr	r1, [r4, #12]
   11c22:	4a35      	ldr	r2, [pc, #212]	; (11cf8 <mp_obj_class_lookup+0x160>)
   11c24:	4291      	cmp	r1, r2
   11c26:	d002      	beq.n	11c2e <mp_obj_class_lookup+0x96>
            if (*(void**)((char*)type + lookup->meth_offset) != NULL) {
   11c28:	58e3      	ldr	r3, [r4, r3]
   11c2a:	2b00      	cmp	r3, #0
   11c2c:	d1c9      	bne.n	11bc2 <mp_obj_class_lookup+0x2a>
        if (type->locals_dict != NULL) {
   11c2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   11c30:	b170      	cbz	r0, 11c50 <mp_obj_class_lookup+0xb8>
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   11c32:	6802      	ldr	r2, [r0, #0]
   11c34:	4b33      	ldr	r3, [pc, #204]	; (11d04 <mp_obj_class_lookup+0x16c>)
   11c36:	429a      	cmp	r2, r3
   11c38:	d1c7      	bne.n	11bca <mp_obj_class_lookup+0x32>
            mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(lookup->attr), MP_MAP_LOOKUP);
   11c3a:	6869      	ldr	r1, [r5, #4]
   11c3c:	0089      	lsls	r1, r1, #2
   11c3e:	2200      	movs	r2, #0
   11c40:	f041 0102 	orr.w	r1, r1, #2
   11c44:	3004      	adds	r0, #4
   11c46:	f7f8 fe77 	bl	a938 <mp_map_lookup>
            if (elem != NULL) {
   11c4a:	4602      	mov	r2, r0
   11c4c:	2800      	cmp	r0, #0
   11c4e:	d1c2      	bne.n	11bd6 <mp_obj_class_lookup+0x3e>
        if (lookup->obj != NULL && !lookup->is_type && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   11c50:	682b      	ldr	r3, [r5, #0]
   11c52:	2b00      	cmp	r3, #0
   11c54:	d0d8      	beq.n	11c08 <mp_obj_class_lookup+0x70>
   11c56:	7c2a      	ldrb	r2, [r5, #16]
   11c58:	2a00      	cmp	r2, #0
   11c5a:	d1d5      	bne.n	11c08 <mp_obj_class_lookup+0x70>
   11c5c:	68e1      	ldr	r1, [r4, #12]
   11c5e:	4a26      	ldr	r2, [pc, #152]	; (11cf8 <mp_obj_class_lookup+0x160>)
   11c60:	4291      	cmp	r1, r2
   11c62:	d0d1      	beq.n	11c08 <mp_obj_class_lookup+0x70>
   11c64:	4a25      	ldr	r2, [pc, #148]	; (11cfc <mp_obj_class_lookup+0x164>)
   11c66:	4294      	cmp	r4, r2
   11c68:	d0ce      	beq.n	11c08 <mp_obj_class_lookup+0x70>
            mp_load_method_maybe(lookup->obj->subobj[0], lookup->attr, lookup->dest);
   11c6a:	68ea      	ldr	r2, [r5, #12]
   11c6c:	6869      	ldr	r1, [r5, #4]
   11c6e:	6918      	ldr	r0, [r3, #16]
   11c70:	f7f7 fd8a 	bl	9788 <mp_load_method_maybe>
            if (lookup->dest[0] != MP_OBJ_NULL) {
   11c74:	68eb      	ldr	r3, [r5, #12]
   11c76:	681b      	ldr	r3, [r3, #0]
   11c78:	2b00      	cmp	r3, #0
   11c7a:	d0c5      	beq.n	11c08 <mp_obj_class_lookup+0x70>
   11c7c:	e023      	b.n	11cc6 <mp_obj_class_lookup+0x12e>
            const mp_obj_t *item = parent_tuple->items;
   11c7e:	f104 0608 	add.w	r6, r4, #8
            const mp_obj_t *top = item + parent_tuple->len - 1;
   11c82:	6864      	ldr	r4, [r4, #4]
   11c84:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11c88:	3c01      	subs	r4, #1
   11c8a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
            for (; item < top; ++item) {
   11c8e:	e006      	b.n	11c9e <mp_obj_class_lookup+0x106>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   11c90:	4b1d      	ldr	r3, [pc, #116]	; (11d08 <mp_obj_class_lookup+0x170>)
   11c92:	4a15      	ldr	r2, [pc, #84]	; (11ce8 <mp_obj_class_lookup+0x150>)
   11c94:	21cc      	movs	r1, #204	; 0xcc
   11c96:	4815      	ldr	r0, [pc, #84]	; (11cec <mp_obj_class_lookup+0x154>)
   11c98:	f006 fc60 	bl	1855c <__assert_func>
            for (; item < top; ++item) {
   11c9c:	3604      	adds	r6, #4
   11c9e:	42a6      	cmp	r6, r4
   11ca0:	d212      	bcs.n	11cc8 <mp_obj_class_lookup+0x130>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   11ca2:	6831      	ldr	r1, [r6, #0]
   11ca4:	f011 0f03 	tst.w	r1, #3
   11ca8:	d1f2      	bne.n	11c90 <mp_obj_class_lookup+0xf8>
   11caa:	680a      	ldr	r2, [r1, #0]
   11cac:	4b17      	ldr	r3, [pc, #92]	; (11d0c <mp_obj_class_lookup+0x174>)
   11cae:	429a      	cmp	r2, r3
   11cb0:	d1ee      	bne.n	11c90 <mp_obj_class_lookup+0xf8>
                if (bt == &mp_type_object) {
   11cb2:	4b12      	ldr	r3, [pc, #72]	; (11cfc <mp_obj_class_lookup+0x164>)
   11cb4:	4299      	cmp	r1, r3
   11cb6:	d0f1      	beq.n	11c9c <mp_obj_class_lookup+0x104>
                mp_obj_class_lookup(lookup, bt);
   11cb8:	4628      	mov	r0, r5
   11cba:	f7ff ff6d 	bl	11b98 <mp_obj_class_lookup>
                if (lookup->dest[0] != MP_OBJ_NULL) {
   11cbe:	68eb      	ldr	r3, [r5, #12]
   11cc0:	681b      	ldr	r3, [r3, #0]
   11cc2:	2b00      	cmp	r3, #0
   11cc4:	d0ea      	beq.n	11c9c <mp_obj_class_lookup+0x104>
}
   11cc6:	bd70      	pop	{r4, r5, r6, pc}
            assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   11cc8:	6834      	ldr	r4, [r6, #0]
   11cca:	f014 0f03 	tst.w	r4, #3
   11cce:	d103      	bne.n	11cd8 <mp_obj_class_lookup+0x140>
   11cd0:	6822      	ldr	r2, [r4, #0]
   11cd2:	4b0e      	ldr	r3, [pc, #56]	; (11d0c <mp_obj_class_lookup+0x174>)
   11cd4:	429a      	cmp	r2, r3
   11cd6:	d09e      	beq.n	11c16 <mp_obj_class_lookup+0x7e>
   11cd8:	4b0b      	ldr	r3, [pc, #44]	; (11d08 <mp_obj_class_lookup+0x170>)
   11cda:	4a03      	ldr	r2, [pc, #12]	; (11ce8 <mp_obj_class_lookup+0x150>)
   11cdc:	21d9      	movs	r1, #217	; 0xd9
   11cde:	4803      	ldr	r0, [pc, #12]	; (11cec <mp_obj_class_lookup+0x154>)
   11ce0:	f006 fc3c 	bl	1855c <__assert_func>
   11ce4:	00028b48 	.word	0x00028b48
   11ce8:	000289ec 	.word	0x000289ec
   11cec:	00028aa8 	.word	0x00028aa8
   11cf0:	00028b28 	.word	0x00028b28
   11cf4:	00025784 	.word	0x00025784
   11cf8:	00011d11 	.word	0x00011d11
   11cfc:	00027ac8 	.word	0x00027ac8
   11d00:	00028844 	.word	0x00028844
   11d04:	000265d0 	.word	0x000265d0
   11d08:	00028a80 	.word	0x00028a80
   11d0c:	00028dd0 	.word	0x00028dd0

00011d10 <mp_obj_instance_make_new>:
mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11d14:	b08b      	sub	sp, #44	; 0x2c
   11d16:	4617      	mov	r7, r2
   11d18:	4698      	mov	r8, r3
    assert(mp_obj_is_instance_type(self));
   11d1a:	68c2      	ldr	r2, [r0, #12]
   11d1c:	4b4f      	ldr	r3, [pc, #316]	; (11e5c <mp_obj_instance_make_new+0x14c>)
   11d1e:	429a      	cmp	r2, r3
   11d20:	d13a      	bne.n	11d98 <mp_obj_instance_make_new+0x88>
   11d22:	4605      	mov	r5, r0
   11d24:	460e      	mov	r6, r1
    mp_obj_t init_fn[2] = {MP_OBJ_NULL};
   11d26:	ab08      	add	r3, sp, #32
   11d28:	2400      	movs	r4, #0
   11d2a:	9408      	str	r4, [sp, #32]
   11d2c:	9409      	str	r4, [sp, #36]	; 0x24
    struct class_lookup_data lookup = {
   11d2e:	9403      	str	r4, [sp, #12]
   11d30:	221d      	movs	r2, #29
   11d32:	9204      	str	r2, [sp, #16]
   11d34:	220c      	movs	r2, #12
   11d36:	9205      	str	r2, [sp, #20]
   11d38:	9306      	str	r3, [sp, #24]
   11d3a:	f88d 401c 	strb.w	r4, [sp, #28]
    mp_obj_class_lookup(&lookup, self);
   11d3e:	4601      	mov	r1, r0
   11d40:	eb0d 0002 	add.w	r0, sp, r2
   11d44:	f7ff ff28 	bl	11b98 <mp_obj_class_lookup>
    const mp_obj_type_t *native_base = NULL;
   11d48:	9402      	str	r4, [sp, #8]
    if (init_fn[0] == MP_OBJ_NULL || init_fn[0] == MP_OBJ_SENTINEL) {
   11d4a:	9808      	ldr	r0, [sp, #32]
   11d4c:	b358      	cbz	r0, 11da6 <mp_obj_instance_make_new+0x96>
   11d4e:	2808      	cmp	r0, #8
   11d50:	d029      	beq.n	11da6 <mp_obj_instance_make_new+0x96>
        if (n_args == 0 && n_kw == 0) {
   11d52:	b90e      	cbnz	r6, 11d58 <mp_obj_instance_make_new+0x48>
   11d54:	2f00      	cmp	r7, #0
   11d56:	d067      	beq.n	11e28 <mp_obj_instance_make_new+0x118>
            mp_obj_t *args2 = m_new(mp_obj_t, 1 + n_args + 2 * n_kw);
   11d58:	eb06 0447 	add.w	r4, r6, r7, lsl #1
   11d5c:	1c60      	adds	r0, r4, #1
   11d5e:	0080      	lsls	r0, r0, #2
   11d60:	f7ee fdac 	bl	8bc <m_malloc>
   11d64:	4681      	mov	r9, r0
            args2[0] = MP_OBJ_FROM_PTR(self);
   11d66:	f840 5b04 	str.w	r5, [r0], #4
            memcpy(args2 + 1, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   11d6a:	00a2      	lsls	r2, r4, #2
   11d6c:	4641      	mov	r1, r8
   11d6e:	f009 fd41 	bl	1b7f4 <memcpy>
            new_ret = mp_call_function_n_kw(init_fn[0], n_args + 1, n_kw, args2);
   11d72:	464b      	mov	r3, r9
   11d74:	463a      	mov	r2, r7
   11d76:	1c71      	adds	r1, r6, #1
   11d78:	9808      	ldr	r0, [sp, #32]
   11d7a:	f7f7 fc83 	bl	9684 <mp_call_function_n_kw>
   11d7e:	4604      	mov	r4, r0
            m_del(mp_obj_t, args2, 1 + n_args + 2 * n_kw);
   11d80:	4648      	mov	r0, r9
   11d82:	f7ee fdc4 	bl	90e <m_free>
        if (mp_obj_get_type(new_ret) != self) {
   11d86:	4620      	mov	r0, r4
   11d88:	f7f8 fef8 	bl	ab7c <mp_obj_get_type>
   11d8c:	4285      	cmp	r5, r0
   11d8e:	d00f      	beq.n	11db0 <mp_obj_instance_make_new+0xa0>
}
   11d90:	4620      	mov	r0, r4
   11d92:	b00b      	add	sp, #44	; 0x2c
   11d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(mp_obj_is_instance_type(self));
   11d98:	4b31      	ldr	r3, [pc, #196]	; (11e60 <mp_obj_instance_make_new+0x150>)
   11d9a:	4a32      	ldr	r2, [pc, #200]	; (11e64 <mp_obj_instance_make_new+0x154>)
   11d9c:	f240 1111 	movw	r1, #273	; 0x111
   11da0:	4831      	ldr	r0, [pc, #196]	; (11e68 <mp_obj_instance_make_new+0x158>)
   11da2:	f006 fbdb 	bl	1855c <__assert_func>
        o = mp_obj_new_instance(self, &native_base);
   11da6:	a902      	add	r1, sp, #8
   11da8:	4628      	mov	r0, r5
   11daa:	f7ff feb9 	bl	11b20 <mp_obj_new_instance>
   11dae:	4604      	mov	r4, r0
    init_fn[0] = init_fn[1] = MP_OBJ_NULL;
   11db0:	2300      	movs	r3, #0
   11db2:	9309      	str	r3, [sp, #36]	; 0x24
   11db4:	9308      	str	r3, [sp, #32]
    lookup.obj = o;
   11db6:	9403      	str	r4, [sp, #12]
    lookup.attr = MP_QSTR___init__;
   11db8:	2214      	movs	r2, #20
   11dba:	9204      	str	r2, [sp, #16]
    lookup.meth_offset = 0;
   11dbc:	9305      	str	r3, [sp, #20]
    mp_obj_class_lookup(&lookup, self);
   11dbe:	4629      	mov	r1, r5
   11dc0:	a803      	add	r0, sp, #12
   11dc2:	f7ff fee9 	bl	11b98 <mp_obj_class_lookup>
    if (init_fn[0] != MP_OBJ_NULL) {
   11dc6:	9b08      	ldr	r3, [sp, #32]
   11dc8:	b303      	cbz	r3, 11e0c <mp_obj_instance_make_new+0xfc>
        if (n_args == 0 && n_kw == 0) {
   11dca:	b90e      	cbnz	r6, 11dd0 <mp_obj_instance_make_new+0xc0>
   11dcc:	2f00      	cmp	r7, #0
   11dce:	d034      	beq.n	11e3a <mp_obj_instance_make_new+0x12a>
            mp_obj_t *args2 = m_new(mp_obj_t, 2 + n_args + 2 * n_kw);
   11dd0:	eb06 0947 	add.w	r9, r6, r7, lsl #1
   11dd4:	f109 0002 	add.w	r0, r9, #2
   11dd8:	0080      	lsls	r0, r0, #2
   11dda:	f7ee fd6f 	bl	8bc <m_malloc>
   11dde:	4605      	mov	r5, r0
            args2[0] = init_fn[0];
   11de0:	9b08      	ldr	r3, [sp, #32]
   11de2:	6003      	str	r3, [r0, #0]
            args2[1] = init_fn[1];
   11de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11de6:	6043      	str	r3, [r0, #4]
            memcpy(args2 + 2, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   11de8:	ea4f 0289 	mov.w	r2, r9, lsl #2
   11dec:	4641      	mov	r1, r8
   11dee:	3008      	adds	r0, #8
   11df0:	f009 fd00 	bl	1b7f4 <memcpy>
            init_ret = mp_call_method_n_kw(n_args, n_kw, args2);
   11df4:	462a      	mov	r2, r5
   11df6:	4639      	mov	r1, r7
   11df8:	4630      	mov	r0, r6
   11dfa:	f7f7 fc76 	bl	96ea <mp_call_method_n_kw>
   11dfe:	4681      	mov	r9, r0
            m_del(mp_obj_t, args2, 2 + n_args + 2 * n_kw);
   11e00:	4628      	mov	r0, r5
   11e02:	f7ee fd84 	bl	90e <m_free>
        if (init_ret != mp_const_none) {
   11e06:	4b19      	ldr	r3, [pc, #100]	; (11e6c <mp_obj_instance_make_new+0x15c>)
   11e08:	4599      	cmp	r9, r3
   11e0a:	d11d      	bne.n	11e48 <mp_obj_instance_make_new+0x138>
    if (native_base != NULL && o->subobj[0] == MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj)) {
   11e0c:	9802      	ldr	r0, [sp, #8]
   11e0e:	2800      	cmp	r0, #0
   11e10:	d0be      	beq.n	11d90 <mp_obj_instance_make_new+0x80>
   11e12:	6922      	ldr	r2, [r4, #16]
   11e14:	4b16      	ldr	r3, [pc, #88]	; (11e70 <mp_obj_instance_make_new+0x160>)
   11e16:	429a      	cmp	r2, r3
   11e18:	d1ba      	bne.n	11d90 <mp_obj_instance_make_new+0x80>
        o->subobj[0] = native_base->make_new(native_base, n_args, n_kw, args);
   11e1a:	68c5      	ldr	r5, [r0, #12]
   11e1c:	4643      	mov	r3, r8
   11e1e:	463a      	mov	r2, r7
   11e20:	4631      	mov	r1, r6
   11e22:	47a8      	blx	r5
   11e24:	6120      	str	r0, [r4, #16]
   11e26:	e7b3      	b.n	11d90 <mp_obj_instance_make_new+0x80>
            mp_obj_t args2[1] = {MP_OBJ_FROM_PTR(self)};
   11e28:	ab0a      	add	r3, sp, #40	; 0x28
   11e2a:	f843 5d24 	str.w	r5, [r3, #-36]!
            new_ret = mp_call_function_n_kw(init_fn[0], 1, 0, args2);
   11e2e:	2200      	movs	r2, #0
   11e30:	2101      	movs	r1, #1
   11e32:	f7f7 fc27 	bl	9684 <mp_call_function_n_kw>
   11e36:	4604      	mov	r4, r0
        if (n_args == 0 && n_kw == 0) {
   11e38:	e7a5      	b.n	11d86 <mp_obj_instance_make_new+0x76>
            init_ret = mp_call_method_n_kw(0, 0, init_fn);
   11e3a:	aa08      	add	r2, sp, #32
   11e3c:	2100      	movs	r1, #0
   11e3e:	4608      	mov	r0, r1
   11e40:	f7f7 fc53 	bl	96ea <mp_call_method_n_kw>
   11e44:	4681      	mov	r9, r0
   11e46:	e7de      	b.n	11e06 <mp_obj_instance_make_new+0xf6>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   11e48:	4648      	mov	r0, r9
   11e4a:	f7f8 feb1 	bl	abb0 <mp_obj_get_type_str>
   11e4e:	4602      	mov	r2, r0
   11e50:	4908      	ldr	r1, [pc, #32]	; (11e74 <mp_obj_instance_make_new+0x164>)
   11e52:	4809      	ldr	r0, [pc, #36]	; (11e78 <mp_obj_instance_make_new+0x168>)
   11e54:	f7fa fe3a 	bl	cacc <mp_obj_new_exception_msg_varg>
   11e58:	f7ee fd12 	bl	880 <nlr_jump>
   11e5c:	00011d11 	.word	0x00011d11
   11e60:	00028b9c 	.word	0x00028b9c
   11e64:	00028a00 	.word	0x00028a00
   11e68:	00028aa8 	.word	0x00028aa8
   11e6c:	00027b40 	.word	0x00027b40
   11e70:	00028e18 	.word	0x00028e18
   11e74:	00028bbc 	.word	0x00028bbc
   11e78:	00026c84 	.word	0x00026c84

00011e7c <mp_obj_instance_get_call>:
STATIC mp_obj_t mp_obj_instance_get_call(mp_obj_t self_in, mp_obj_t *member) {
   11e7c:	b510      	push	{r4, lr}
   11e7e:	b086      	sub	sp, #24
   11e80:	460c      	mov	r4, r1
    struct class_lookup_data lookup = {
   11e82:	9001      	str	r0, [sp, #4]
   11e84:	2305      	movs	r3, #5
   11e86:	9302      	str	r3, [sp, #8]
   11e88:	2310      	movs	r3, #16
   11e8a:	9303      	str	r3, [sp, #12]
   11e8c:	9104      	str	r1, [sp, #16]
   11e8e:	2300      	movs	r3, #0
   11e90:	f88d 3014 	strb.w	r3, [sp, #20]
    mp_obj_class_lookup(&lookup, self->base.type);
   11e94:	6801      	ldr	r1, [r0, #0]
   11e96:	a801      	add	r0, sp, #4
   11e98:	f7ff fe7e 	bl	11b98 <mp_obj_class_lookup>
}
   11e9c:	6820      	ldr	r0, [r4, #0]
   11e9e:	b006      	add	sp, #24
   11ea0:	bd10      	pop	{r4, pc}
	...

00011ea4 <type_attr>:

STATIC void type_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   11ea4:	b510      	push	{r4, lr}
   11ea6:	b086      	sub	sp, #24
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   11ea8:	f010 0f03 	tst.w	r0, #3
   11eac:	d11f      	bne.n	11eee <type_attr+0x4a>
   11eae:	4614      	mov	r4, r2
   11eb0:	6802      	ldr	r2, [r0, #0]
   11eb2:	4b21      	ldr	r3, [pc, #132]	; (11f38 <type_attr+0x94>)
   11eb4:	429a      	cmp	r2, r3
   11eb6:	d11a      	bne.n	11eee <type_attr+0x4a>
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);

    if (dest[0] == MP_OBJ_NULL) {
   11eb8:	6823      	ldr	r3, [r4, #0]
   11eba:	b1fb      	cbz	r3, 11efc <type_attr+0x58>
    } else {
        // delete/store attribute

        // TODO CPython allows STORE_ATTR to a class, but is this the correct implementation?

        if (self->locals_dict != NULL) {
   11ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   11ebe:	b1a3      	cbz	r3, 11eea <type_attr+0x46>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   11ec0:	6818      	ldr	r0, [r3, #0]
   11ec2:	4a1e      	ldr	r2, [pc, #120]	; (11f3c <type_attr+0x98>)
   11ec4:	4290      	cmp	r0, r2
   11ec6:	d125      	bne.n	11f14 <type_attr+0x70>
            mp_map_t *locals_map = &self->locals_dict->map;
   11ec8:	1d18      	adds	r0, r3, #4
            if (locals_map->is_fixed) {
   11eca:	791b      	ldrb	r3, [r3, #4]
   11ecc:	f013 0f02 	tst.w	r3, #2
   11ed0:	d10b      	bne.n	11eea <type_attr+0x46>
                // can't apply delete/store to a fixed map
                return;
            }
            if (dest[1] == MP_OBJ_NULL) {
   11ed2:	6863      	ldr	r3, [r4, #4]
   11ed4:	b32b      	cbz	r3, 11f22 <type_attr+0x7e>
                if (elem != NULL) {
                    dest[0] = MP_OBJ_NULL; // indicate success
                }
            } else {
                // store attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   11ed6:	0089      	lsls	r1, r1, #2
   11ed8:	2201      	movs	r2, #1
   11eda:	f041 0102 	orr.w	r1, r1, #2
   11ede:	f7f8 fd2b 	bl	a938 <mp_map_lookup>
                elem->value = dest[1];
   11ee2:	6863      	ldr	r3, [r4, #4]
   11ee4:	6043      	str	r3, [r0, #4]
                dest[0] = MP_OBJ_NULL; // indicate success
   11ee6:	2300      	movs	r3, #0
   11ee8:	6023      	str	r3, [r4, #0]
            }
        }
    }
}
   11eea:	b006      	add	sp, #24
   11eec:	bd10      	pop	{r4, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   11eee:	4b14      	ldr	r3, [pc, #80]	; (11f40 <type_attr+0x9c>)
   11ef0:	4a14      	ldr	r2, [pc, #80]	; (11f44 <type_attr+0xa0>)
   11ef2:	f240 31b7 	movw	r1, #951	; 0x3b7
   11ef6:	4814      	ldr	r0, [pc, #80]	; (11f48 <type_attr+0xa4>)
   11ef8:	f006 fb30 	bl	1855c <__assert_func>
        struct class_lookup_data lookup = {
   11efc:	9001      	str	r0, [sp, #4]
   11efe:	9102      	str	r1, [sp, #8]
   11f00:	9303      	str	r3, [sp, #12]
   11f02:	9404      	str	r4, [sp, #16]
   11f04:	2301      	movs	r3, #1
   11f06:	f88d 3014 	strb.w	r3, [sp, #20]
        mp_obj_class_lookup(&lookup, self);
   11f0a:	4601      	mov	r1, r0
   11f0c:	a801      	add	r0, sp, #4
   11f0e:	f7ff fe43 	bl	11b98 <mp_obj_class_lookup>
   11f12:	e7ea      	b.n	11eea <type_attr+0x46>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   11f14:	4b0d      	ldr	r3, [pc, #52]	; (11f4c <type_attr+0xa8>)
   11f16:	4a0b      	ldr	r2, [pc, #44]	; (11f44 <type_attr+0xa0>)
   11f18:	f44f 7174 	mov.w	r1, #976	; 0x3d0
   11f1c:	480a      	ldr	r0, [pc, #40]	; (11f48 <type_attr+0xa4>)
   11f1e:	f006 fb1d 	bl	1855c <__assert_func>
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   11f22:	0089      	lsls	r1, r1, #2
   11f24:	2202      	movs	r2, #2
   11f26:	4311      	orrs	r1, r2
   11f28:	f7f8 fd06 	bl	a938 <mp_map_lookup>
                if (elem != NULL) {
   11f2c:	2800      	cmp	r0, #0
   11f2e:	d0dc      	beq.n	11eea <type_attr+0x46>
                    dest[0] = MP_OBJ_NULL; // indicate success
   11f30:	2300      	movs	r3, #0
   11f32:	6023      	str	r3, [r4, #0]
   11f34:	e7d9      	b.n	11eea <type_attr+0x46>
   11f36:	bf00      	nop
   11f38:	00028dd0 	.word	0x00028dd0
   11f3c:	000265d0 	.word	0x000265d0
   11f40:	00028eec 	.word	0x00028eec
   11f44:	00028a38 	.word	0x00028a38
   11f48:	00028aa8 	.word	0x00028aa8
   11f4c:	00028f14 	.word	0x00028f14

00011f50 <instance_get_buffer>:
STATIC mp_int_t instance_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   11f50:	b570      	push	{r4, r5, r6, lr}
   11f52:	b088      	sub	sp, #32
   11f54:	4604      	mov	r4, r0
   11f56:	460d      	mov	r5, r1
   11f58:	4616      	mov	r6, r2
    mp_obj_t member[2] = {MP_OBJ_NULL};
   11f5a:	aa06      	add	r2, sp, #24
   11f5c:	2300      	movs	r3, #0
   11f5e:	9306      	str	r3, [sp, #24]
   11f60:	9307      	str	r3, [sp, #28]
    struct class_lookup_data lookup = {
   11f62:	9001      	str	r0, [sp, #4]
   11f64:	2101      	movs	r1, #1
   11f66:	9102      	str	r1, [sp, #8]
   11f68:	212c      	movs	r1, #44	; 0x2c
   11f6a:	9103      	str	r1, [sp, #12]
   11f6c:	9204      	str	r2, [sp, #16]
   11f6e:	f88d 3014 	strb.w	r3, [sp, #20]
    mp_obj_class_lookup(&lookup, self->base.type);
   11f72:	6801      	ldr	r1, [r0, #0]
   11f74:	a801      	add	r0, sp, #4
   11f76:	f7ff fe0f 	bl	11b98 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   11f7a:	9b06      	ldr	r3, [sp, #24]
   11f7c:	2b08      	cmp	r3, #8
   11f7e:	d002      	beq.n	11f86 <instance_get_buffer+0x36>
        return 1; // object does not support buffer protocol
   11f80:	2001      	movs	r0, #1
}
   11f82:	b008      	add	sp, #32
   11f84:	bd70      	pop	{r4, r5, r6, pc}
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   11f86:	6920      	ldr	r0, [r4, #16]
   11f88:	f7f8 fdf8 	bl	ab7c <mp_obj_get_type>
        return type->buffer_p.get_buffer(self->subobj[0], bufinfo, flags);
   11f8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   11f8e:	4632      	mov	r2, r6
   11f90:	4629      	mov	r1, r5
   11f92:	6920      	ldr	r0, [r4, #16]
   11f94:	4798      	blx	r3
   11f96:	e7f4      	b.n	11f82 <instance_get_buffer+0x32>

00011f98 <instance_getiter>:
STATIC mp_obj_t instance_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
   11f98:	b530      	push	{r4, r5, lr}
   11f9a:	b089      	sub	sp, #36	; 0x24
   11f9c:	4604      	mov	r4, r0
   11f9e:	460d      	mov	r5, r1
    mp_obj_t member[2] = {MP_OBJ_NULL};
   11fa0:	aa06      	add	r2, sp, #24
   11fa2:	2300      	movs	r3, #0
   11fa4:	9306      	str	r3, [sp, #24]
   11fa6:	9307      	str	r3, [sp, #28]
    struct class_lookup_data lookup = {
   11fa8:	9001      	str	r0, [sp, #4]
   11faa:	2116      	movs	r1, #22
   11fac:	9102      	str	r1, [sp, #8]
   11fae:	2124      	movs	r1, #36	; 0x24
   11fb0:	9103      	str	r1, [sp, #12]
   11fb2:	9204      	str	r2, [sp, #16]
   11fb4:	f88d 3014 	strb.w	r3, [sp, #20]
    mp_obj_class_lookup(&lookup, self->base.type);
   11fb8:	6801      	ldr	r1, [r0, #0]
   11fba:	a801      	add	r0, sp, #4
   11fbc:	f7ff fdec 	bl	11b98 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL) {
   11fc0:	9b06      	ldr	r3, [sp, #24]
   11fc2:	b183      	cbz	r3, 11fe6 <instance_getiter+0x4e>
    } else if (member[0] == MP_OBJ_SENTINEL) {
   11fc4:	2b08      	cmp	r3, #8
   11fc6:	d006      	beq.n	11fd6 <instance_getiter+0x3e>
        return mp_call_method_n_kw(0, 0, member);
   11fc8:	aa06      	add	r2, sp, #24
   11fca:	2100      	movs	r1, #0
   11fcc:	4608      	mov	r0, r1
   11fce:	f7f7 fb8c 	bl	96ea <mp_call_method_n_kw>
}
   11fd2:	b009      	add	sp, #36	; 0x24
   11fd4:	bd30      	pop	{r4, r5, pc}
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   11fd6:	6920      	ldr	r0, [r4, #16]
   11fd8:	f7f8 fdd0 	bl	ab7c <mp_obj_get_type>
        return type->getiter(self->subobj[0], iter_buf);
   11fdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11fde:	4629      	mov	r1, r5
   11fe0:	6920      	ldr	r0, [r4, #16]
   11fe2:	4798      	blx	r3
   11fe4:	e7f5      	b.n	11fd2 <instance_getiter+0x3a>
        return MP_OBJ_NULL;
   11fe6:	2000      	movs	r0, #0
   11fe8:	e7f3      	b.n	11fd2 <instance_getiter+0x3a>
	...

00011fec <super_attr>:
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
    return MP_OBJ_FROM_PTR(o);
}

STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    if (dest[0] != MP_OBJ_NULL) {
   11fec:	6813      	ldr	r3, [r2, #0]
   11fee:	b103      	cbz	r3, 11ff2 <super_attr+0x6>
   11ff0:	4770      	bx	lr
STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   11ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ff6:	b086      	sub	sp, #24
   11ff8:	4616      	mov	r6, r2
   11ffa:	4605      	mov	r5, r0
        // not load attribute
        return;
    }

    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   11ffc:	f010 0f03 	tst.w	r0, #3
   12000:	d129      	bne.n	12056 <super_attr+0x6a>
   12002:	6802      	ldr	r2, [r0, #0]
   12004:	4b34      	ldr	r3, [pc, #208]	; (120d8 <super_attr+0xec>)
   12006:	429a      	cmp	r2, r3
   12008:	d125      	bne.n	12056 <super_attr+0x6a>
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);

    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   1200a:	6843      	ldr	r3, [r0, #4]
   1200c:	f013 0f03 	tst.w	r3, #3
   12010:	d128      	bne.n	12064 <super_attr+0x78>
   12012:	6818      	ldr	r0, [r3, #0]
   12014:	4a31      	ldr	r2, [pc, #196]	; (120dc <super_attr+0xf0>)
   12016:	4290      	cmp	r0, r2
   12018:	d124      	bne.n	12064 <super_attr+0x78>

    mp_obj_type_t *type = MP_OBJ_TO_PTR(self->type);

    struct class_lookup_data lookup = {
        .obj = MP_OBJ_TO_PTR(self->obj),
   1201a:	68aa      	ldr	r2, [r5, #8]
    struct class_lookup_data lookup = {
   1201c:	9201      	str	r2, [sp, #4]
   1201e:	9102      	str	r1, [sp, #8]
   12020:	2200      	movs	r2, #0
   12022:	9203      	str	r2, [sp, #12]
   12024:	9604      	str	r6, [sp, #16]
   12026:	f88d 2014 	strb.w	r2, [sp, #20]
        .dest = dest,
        .is_type = false,
    };

    // Allow a call super().__init__() to reach any native base classes
    if (attr == MP_QSTR___init__) {
   1202a:	2914      	cmp	r1, #20
   1202c:	d021      	beq.n	12072 <super_attr+0x86>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
    }

    if (type->parent == NULL) {
   1202e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   12030:	b149      	cbz	r1, 12046 <super_attr+0x5a>
        // no parents, do nothing
    #if MICROPY_MULTIPLE_INHERITANCE
    } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   12032:	680a      	ldr	r2, [r1, #0]
   12034:	4b2a      	ldr	r3, [pc, #168]	; (120e0 <super_attr+0xf4>)
   12036:	429a      	cmp	r2, r3
   12038:	d01e      	beq.n	12078 <super_attr+0x8c>
            if (dest[0] != MP_OBJ_NULL) {
                break;
            }
        }
    #endif
    } else if (type->parent != &mp_type_object) {
   1203a:	4b2a      	ldr	r3, [pc, #168]	; (120e4 <super_attr+0xf8>)
   1203c:	4299      	cmp	r1, r3
   1203e:	d002      	beq.n	12046 <super_attr+0x5a>
        mp_obj_class_lookup(&lookup, type->parent);
   12040:	a801      	add	r0, sp, #4
   12042:	f7ff fda9 	bl	11b98 <mp_obj_class_lookup>
    }

    if (dest[0] != MP_OBJ_NULL) {
   12046:	6833      	ldr	r3, [r6, #0]
   12048:	2b00      	cmp	r3, #0
   1204a:	d03d      	beq.n	120c8 <super_attr+0xdc>
        if (dest[0] == MP_OBJ_SENTINEL) {
   1204c:	2b08      	cmp	r3, #8
   1204e:	d036      	beq.n	120be <super_attr+0xd2>
    // Reset meth_offset so we don't look up any native methods in object,
    // because object never takes up the native base-class slot.
    lookup.meth_offset = 0;

    mp_obj_class_lookup(&lookup, &mp_type_object);
}
   12050:	b006      	add	sp, #24
   12052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   12056:	4b24      	ldr	r3, [pc, #144]	; (120e8 <super_attr+0xfc>)
   12058:	4a24      	ldr	r2, [pc, #144]	; (120ec <super_attr+0x100>)
   1205a:	f44f 618c 	mov.w	r1, #1120	; 0x460
   1205e:	4824      	ldr	r0, [pc, #144]	; (120f0 <super_attr+0x104>)
   12060:	f006 fa7c 	bl	1855c <__assert_func>
    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   12064:	4b23      	ldr	r3, [pc, #140]	; (120f4 <super_attr+0x108>)
   12066:	4a21      	ldr	r2, [pc, #132]	; (120ec <super_attr+0x100>)
   12068:	f240 4163 	movw	r1, #1123	; 0x463
   1206c:	4820      	ldr	r0, [pc, #128]	; (120f0 <super_attr+0x104>)
   1206e:	f006 fa75 	bl	1855c <__assert_func>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
   12072:	220c      	movs	r2, #12
   12074:	9203      	str	r2, [sp, #12]
   12076:	e7da      	b.n	1202e <super_attr+0x42>
        size_t len = parent_tuple->len;
   12078:	f8d1 8004 	ldr.w	r8, [r1, #4]
        const mp_obj_t *items = parent_tuple->items;
   1207c:	f101 0708 	add.w	r7, r1, #8
        for (size_t i = 0; i < len; i++) {
   12080:	2400      	movs	r4, #0
   12082:	e007      	b.n	12094 <super_attr+0xa8>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   12084:	4b1c      	ldr	r3, [pc, #112]	; (120f8 <super_attr+0x10c>)
   12086:	4a19      	ldr	r2, [pc, #100]	; (120ec <super_attr+0x100>)
   12088:	f240 417c 	movw	r1, #1148	; 0x47c
   1208c:	4818      	ldr	r0, [pc, #96]	; (120f0 <super_attr+0x104>)
   1208e:	f006 fa65 	bl	1855c <__assert_func>
        for (size_t i = 0; i < len; i++) {
   12092:	3401      	adds	r4, #1
   12094:	4544      	cmp	r4, r8
   12096:	d2d6      	bcs.n	12046 <super_attr+0x5a>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   12098:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   1209c:	f011 0f03 	tst.w	r1, #3
   120a0:	d1f0      	bne.n	12084 <super_attr+0x98>
   120a2:	680a      	ldr	r2, [r1, #0]
   120a4:	4b0d      	ldr	r3, [pc, #52]	; (120dc <super_attr+0xf0>)
   120a6:	429a      	cmp	r2, r3
   120a8:	d1ec      	bne.n	12084 <super_attr+0x98>
            if (MP_OBJ_TO_PTR(items[i]) == &mp_type_object) {
   120aa:	4b0e      	ldr	r3, [pc, #56]	; (120e4 <super_attr+0xf8>)
   120ac:	4299      	cmp	r1, r3
   120ae:	d0f0      	beq.n	12092 <super_attr+0xa6>
            mp_obj_class_lookup(&lookup, (mp_obj_type_t*)MP_OBJ_TO_PTR(items[i]));
   120b0:	a801      	add	r0, sp, #4
   120b2:	f7ff fd71 	bl	11b98 <mp_obj_class_lookup>
            if (dest[0] != MP_OBJ_NULL) {
   120b6:	6833      	ldr	r3, [r6, #0]
   120b8:	2b00      	cmp	r3, #0
   120ba:	d0ea      	beq.n	12092 <super_attr+0xa6>
   120bc:	e7c3      	b.n	12046 <super_attr+0x5a>
            dest[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   120be:	4b0f      	ldr	r3, [pc, #60]	; (120fc <super_attr+0x110>)
   120c0:	6033      	str	r3, [r6, #0]
            dest[1] = self->obj;
   120c2:	68ab      	ldr	r3, [r5, #8]
   120c4:	6073      	str	r3, [r6, #4]
   120c6:	e7c3      	b.n	12050 <super_attr+0x64>
    lookup.meth_offset = 0;
   120c8:	2300      	movs	r3, #0
   120ca:	9303      	str	r3, [sp, #12]
    mp_obj_class_lookup(&lookup, &mp_type_object);
   120cc:	4905      	ldr	r1, [pc, #20]	; (120e4 <super_attr+0xf8>)
   120ce:	a801      	add	r0, sp, #4
   120d0:	f7ff fd62 	bl	11b98 <mp_obj_class_lookup>
   120d4:	e7bc      	b.n	12050 <super_attr+0x64>
   120d6:	bf00      	nop
   120d8:	00028d94 	.word	0x00028d94
   120dc:	00028dd0 	.word	0x00028dd0
   120e0:	00028844 	.word	0x00028844
   120e4:	00027ac8 	.word	0x00027ac8
   120e8:	00028e64 	.word	0x00028e64
   120ec:	00028a54 	.word	0x00028a54
   120f0:	00028aa8 	.word	0x00028aa8
   120f4:	00028e8c 	.word	0x00028e8c
   120f8:	00028eb8 	.word	0x00028eb8
   120fc:	00028e18 	.word	0x00028e18

00012100 <mp_obj_instance_load_attr>:
STATIC void mp_obj_instance_load_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   12100:	b5f0      	push	{r4, r5, r6, r7, lr}
   12102:	b089      	sub	sp, #36	; 0x24
   12104:	4605      	mov	r5, r0
   12106:	460e      	mov	r6, r1
   12108:	4617      	mov	r7, r2
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   1210a:	f7f8 fd37 	bl	ab7c <mp_obj_get_type>
   1210e:	68c2      	ldr	r2, [r0, #12]
   12110:	4b1b      	ldr	r3, [pc, #108]	; (12180 <mp_obj_instance_load_attr+0x80>)
   12112:	429a      	cmp	r2, r3
   12114:	d10c      	bne.n	12130 <mp_obj_instance_load_attr+0x30>
    mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   12116:	00b4      	lsls	r4, r6, #2
   12118:	f044 0402 	orr.w	r4, r4, #2
   1211c:	2200      	movs	r2, #0
   1211e:	4621      	mov	r1, r4
   12120:	1d28      	adds	r0, r5, #4
   12122:	f7f8 fc09 	bl	a938 <mp_map_lookup>
    if (elem != NULL) {
   12126:	b150      	cbz	r0, 1213e <mp_obj_instance_load_attr+0x3e>
        dest[0] = elem->value;
   12128:	6843      	ldr	r3, [r0, #4]
   1212a:	603b      	str	r3, [r7, #0]
}
   1212c:	b009      	add	sp, #36	; 0x24
   1212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   12130:	4b14      	ldr	r3, [pc, #80]	; (12184 <mp_obj_instance_load_attr+0x84>)
   12132:	4a15      	ldr	r2, [pc, #84]	; (12188 <mp_obj_instance_load_attr+0x88>)
   12134:	f240 212f 	movw	r1, #559	; 0x22f
   12138:	4814      	ldr	r0, [pc, #80]	; (1218c <mp_obj_instance_load_attr+0x8c>)
   1213a:	f006 fa0f 	bl	1855c <__assert_func>
    struct class_lookup_data lookup = {
   1213e:	9503      	str	r5, [sp, #12]
   12140:	9604      	str	r6, [sp, #16]
   12142:	2300      	movs	r3, #0
   12144:	9305      	str	r3, [sp, #20]
   12146:	9706      	str	r7, [sp, #24]
   12148:	f88d 301c 	strb.w	r3, [sp, #28]
    mp_obj_class_lookup(&lookup, self->base.type);
   1214c:	6829      	ldr	r1, [r5, #0]
   1214e:	a803      	add	r0, sp, #12
   12150:	f7ff fd22 	bl	11b98 <mp_obj_class_lookup>
    mp_obj_t member = dest[0];
   12154:	683b      	ldr	r3, [r7, #0]
    if (member != MP_OBJ_NULL) {
   12156:	2b00      	cmp	r3, #0
   12158:	d1e8      	bne.n	1212c <mp_obj_instance_load_attr+0x2c>
    if (attr != MP_QSTR___getattr__) {
   1215a:	2e0e      	cmp	r6, #14
   1215c:	d0e6      	beq.n	1212c <mp_obj_instance_load_attr+0x2c>
        mp_load_method_maybe(self_in, MP_QSTR___getattr__, dest2);
   1215e:	466a      	mov	r2, sp
   12160:	210e      	movs	r1, #14
   12162:	4628      	mov	r0, r5
   12164:	f7f7 fb10 	bl	9788 <mp_load_method_maybe>
        if (dest2[0] != MP_OBJ_NULL) {
   12168:	9b00      	ldr	r3, [sp, #0]
   1216a:	2b00      	cmp	r3, #0
   1216c:	d0de      	beq.n	1212c <mp_obj_instance_load_attr+0x2c>
            dest2[2] = MP_OBJ_NEW_QSTR(attr);
   1216e:	9402      	str	r4, [sp, #8]
            dest[0] = mp_call_method_n_kw(1, 0, dest2);
   12170:	466a      	mov	r2, sp
   12172:	2100      	movs	r1, #0
   12174:	2001      	movs	r0, #1
   12176:	f7f7 fab8 	bl	96ea <mp_call_method_n_kw>
   1217a:	6038      	str	r0, [r7, #0]
   1217c:	e7d6      	b.n	1212c <mp_obj_instance_load_attr+0x2c>
   1217e:	bf00      	nop
   12180:	00011d11 	.word	0x00011d11
   12184:	00028b68 	.word	0x00028b68
   12188:	00028a1c 	.word	0x00028a1c
   1218c:	00028aa8 	.word	0x00028aa8

00012190 <mp_obj_instance_attr>:
void mp_obj_instance_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   12190:	b510      	push	{r4, lr}
   12192:	4614      	mov	r4, r2
    if (dest[0] == MP_OBJ_NULL) {
   12194:	6813      	ldr	r3, [r2, #0]
   12196:	b133      	cbz	r3, 121a6 <mp_obj_instance_attr+0x16>
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
   12198:	6852      	ldr	r2, [r2, #4]
   1219a:	f7ff fce5 	bl	11b68 <mp_obj_instance_store_attr>
   1219e:	b108      	cbz	r0, 121a4 <mp_obj_instance_attr+0x14>
            dest[0] = MP_OBJ_NULL; // indicate success
   121a0:	2300      	movs	r3, #0
   121a2:	6023      	str	r3, [r4, #0]
}
   121a4:	bd10      	pop	{r4, pc}
        mp_obj_instance_load_attr(self_in, attr, dest);
   121a6:	f7ff ffab 	bl	12100 <mp_obj_instance_load_attr>
   121aa:	e7fb      	b.n	121a4 <mp_obj_instance_attr+0x14>

000121ac <mp_obj_instance_call>:
mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   121ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   121ae:	b085      	sub	sp, #20
   121b0:	4607      	mov	r7, r0
   121b2:	460c      	mov	r4, r1
   121b4:	4615      	mov	r5, r2
   121b6:	461e      	mov	r6, r3
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   121b8:	2300      	movs	r3, #0
   121ba:	9302      	str	r3, [sp, #8]
   121bc:	9303      	str	r3, [sp, #12]
    mp_obj_t call = mp_obj_instance_get_call(self_in, member);
   121be:	a902      	add	r1, sp, #8
   121c0:	f7ff fe5c 	bl	11e7c <mp_obj_instance_get_call>
    if (call == MP_OBJ_NULL) {
   121c4:	b150      	cbz	r0, 121dc <mp_obj_instance_call+0x30>
    if (call == MP_OBJ_SENTINEL) {
   121c6:	2808      	cmp	r0, #8
   121c8:	d012      	beq.n	121f0 <mp_obj_instance_call+0x44>
    return mp_call_method_self_n_kw(member[0], member[1], n_args, n_kw, args);
   121ca:	9600      	str	r6, [sp, #0]
   121cc:	462b      	mov	r3, r5
   121ce:	4622      	mov	r2, r4
   121d0:	9903      	ldr	r1, [sp, #12]
   121d2:	9802      	ldr	r0, [sp, #8]
   121d4:	f7f9 fc0a 	bl	b9ec <mp_call_method_self_n_kw>
}
   121d8:	b005      	add	sp, #20
   121da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   121dc:	4638      	mov	r0, r7
   121de:	f7f8 fce7 	bl	abb0 <mp_obj_get_type_str>
   121e2:	4602      	mov	r2, r0
   121e4:	4906      	ldr	r1, [pc, #24]	; (12200 <mp_obj_instance_call+0x54>)
   121e6:	4807      	ldr	r0, [pc, #28]	; (12204 <mp_obj_instance_call+0x58>)
   121e8:	f7fa fc70 	bl	cacc <mp_obj_new_exception_msg_varg>
   121ec:	f7ee fb48 	bl	880 <nlr_jump>
        return mp_call_function_n_kw(self->subobj[0], n_args, n_kw, args);
   121f0:	4633      	mov	r3, r6
   121f2:	462a      	mov	r2, r5
   121f4:	4621      	mov	r1, r4
   121f6:	6938      	ldr	r0, [r7, #16]
   121f8:	f7f7 fa44 	bl	9684 <mp_call_function_n_kw>
   121fc:	e7ec      	b.n	121d8 <mp_obj_instance_call+0x2c>
   121fe:	bf00      	nop
   12200:	00025678 	.word	0x00025678
   12204:	00026c84 	.word	0x00026c84

00012208 <static_class_method_make_new>:
}

/******************************************************************************/
// staticmethod and classmethod types (probably should go in a different file)

STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12208:	b530      	push	{r4, r5, lr}
   1220a:	b083      	sub	sp, #12
   1220c:	4604      	mov	r4, r0
   1220e:	4608      	mov	r0, r1
   12210:	4611      	mov	r1, r2
   12212:	461d      	mov	r5, r3
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   12214:	4b0d      	ldr	r3, [pc, #52]	; (1224c <static_class_method_make_new+0x44>)
   12216:	429c      	cmp	r4, r3
   12218:	d002      	beq.n	12220 <static_class_method_make_new+0x18>
   1221a:	4b0d      	ldr	r3, [pc, #52]	; (12250 <static_class_method_make_new+0x48>)
   1221c:	429c      	cmp	r4, r3
   1221e:	d10d      	bne.n	1223c <static_class_method_make_new+0x34>

    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   12220:	2300      	movs	r3, #0
   12222:	9300      	str	r3, [sp, #0]
   12224:	2301      	movs	r3, #1
   12226:	461a      	mov	r2, r3
   12228:	f7f8 fa76 	bl	a718 <mp_arg_check_num>

    mp_obj_static_class_method_t *o = m_new_obj(mp_obj_static_class_method_t);
   1222c:	2008      	movs	r0, #8
   1222e:	f7ee fb45 	bl	8bc <m_malloc>
    *o = (mp_obj_static_class_method_t){{self}, args[0]};
   12232:	682a      	ldr	r2, [r5, #0]
   12234:	6004      	str	r4, [r0, #0]
   12236:	6042      	str	r2, [r0, #4]
    return MP_OBJ_FROM_PTR(o);
}
   12238:	b003      	add	sp, #12
   1223a:	bd30      	pop	{r4, r5, pc}
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   1223c:	4b05      	ldr	r3, [pc, #20]	; (12254 <static_class_method_make_new+0x4c>)
   1223e:	4a06      	ldr	r2, [pc, #24]	; (12258 <static_class_method_make_new+0x50>)
   12240:	f240 5109 	movw	r1, #1289	; 0x509
   12244:	4805      	ldr	r0, [pc, #20]	; (1225c <static_class_method_make_new+0x54>)
   12246:	f006 f989 	bl	1855c <__assert_func>
   1224a:	bf00      	nop
   1224c:	00028d58 	.word	0x00028d58
   12250:	00028d1c 	.word	0x00028d1c
   12254:	00028e24 	.word	0x00028e24
   12258:	00028a60 	.word	0x00028a60
   1225c:	00028aa8 	.word	0x00028aa8

00012260 <super_make_new>:
STATIC mp_obj_t super_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12260:	b530      	push	{r4, r5, lr}
   12262:	b083      	sub	sp, #12
   12264:	4605      	mov	r5, r0
   12266:	4608      	mov	r0, r1
   12268:	4611      	mov	r1, r2
   1226a:	461c      	mov	r4, r3
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
   1226c:	2300      	movs	r3, #0
   1226e:	9300      	str	r3, [sp, #0]
   12270:	2302      	movs	r3, #2
   12272:	461a      	mov	r2, r3
   12274:	f7f8 fa50 	bl	a718 <mp_arg_check_num>
    mp_obj_super_t *o = m_new_obj(mp_obj_super_t);
   12278:	200c      	movs	r0, #12
   1227a:	f7ee fb1f 	bl	8bc <m_malloc>
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
   1227e:	6821      	ldr	r1, [r4, #0]
   12280:	6862      	ldr	r2, [r4, #4]
   12282:	6005      	str	r5, [r0, #0]
   12284:	6041      	str	r1, [r0, #4]
   12286:	6082      	str	r2, [r0, #8]
}
   12288:	b003      	add	sp, #12
   1228a:	bd30      	pop	{r4, r5, pc}

0001228c <type_print>:
STATIC void type_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1228c:	b508      	push	{r3, lr}
    mp_printf(print, "<class '%q'>", self->name);
   1228e:	684a      	ldr	r2, [r1, #4]
   12290:	4901      	ldr	r1, [pc, #4]	; (12298 <type_print+0xc>)
   12292:	f7ef feeb 	bl	206c <mp_printf>
}
   12296:	bd08      	pop	{r3, pc}
   12298:	00028f80 	.word	0x00028f80

0001229c <instance_subscr>:
STATIC mp_obj_t instance_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   1229c:	b570      	push	{r4, r5, r6, lr}
   1229e:	b08a      	sub	sp, #40	; 0x28
   122a0:	4604      	mov	r4, r0
   122a2:	460e      	mov	r6, r1
    mp_obj_t member[2] = {MP_OBJ_NULL};
   122a4:	a908      	add	r1, sp, #32
   122a6:	2300      	movs	r3, #0
   122a8:	9308      	str	r3, [sp, #32]
   122aa:	9309      	str	r3, [sp, #36]	; 0x24
    struct class_lookup_data lookup = {
   122ac:	9307      	str	r3, [sp, #28]
   122ae:	9003      	str	r0, [sp, #12]
   122b0:	2320      	movs	r3, #32
   122b2:	9305      	str	r3, [sp, #20]
   122b4:	9106      	str	r1, [sp, #24]
    if (value == MP_OBJ_NULL) {
   122b6:	4615      	mov	r5, r2
   122b8:	b1c2      	cbz	r2, 122ec <instance_subscr+0x50>
    } else if (value == MP_OBJ_SENTINEL) {
   122ba:	2a08      	cmp	r2, #8
   122bc:	d01e      	beq.n	122fc <instance_subscr+0x60>
        lookup.attr = MP_QSTR___setitem__;
   122be:	2323      	movs	r3, #35	; 0x23
   122c0:	9304      	str	r3, [sp, #16]
        mp_obj_class_lookup(&lookup, self->base.type);
   122c2:	6801      	ldr	r1, [r0, #0]
   122c4:	a803      	add	r0, sp, #12
   122c6:	f7ff fc67 	bl	11b98 <mp_obj_class_lookup>
        meth_args = 3;
   122ca:	2103      	movs	r1, #3
    if (member[0] == MP_OBJ_SENTINEL) {
   122cc:	9808      	ldr	r0, [sp, #32]
   122ce:	2808      	cmp	r0, #8
   122d0:	d01c      	beq.n	1230c <instance_subscr+0x70>
    } else if (member[0] != MP_OBJ_NULL) {
   122d2:	b308      	cbz	r0, 12318 <instance_subscr+0x7c>
        mp_obj_t args[3] = {self_in, index, value};
   122d4:	9400      	str	r4, [sp, #0]
   122d6:	9601      	str	r6, [sp, #4]
   122d8:	9502      	str	r5, [sp, #8]
        mp_obj_t ret = mp_call_function_n_kw(member[0], meth_args, 0, args);
   122da:	466b      	mov	r3, sp
   122dc:	2200      	movs	r2, #0
   122de:	f7f7 f9d1 	bl	9684 <mp_call_function_n_kw>
        if (value == MP_OBJ_SENTINEL) {
   122e2:	2d08      	cmp	r5, #8
   122e4:	d000      	beq.n	122e8 <instance_subscr+0x4c>
            return mp_const_none;
   122e6:	480d      	ldr	r0, [pc, #52]	; (1231c <instance_subscr+0x80>)
}
   122e8:	b00a      	add	sp, #40	; 0x28
   122ea:	bd70      	pop	{r4, r5, r6, pc}
        lookup.attr = MP_QSTR___delitem__;
   122ec:	2309      	movs	r3, #9
   122ee:	9304      	str	r3, [sp, #16]
        mp_obj_class_lookup(&lookup, self->base.type);
   122f0:	6801      	ldr	r1, [r0, #0]
   122f2:	a803      	add	r0, sp, #12
   122f4:	f7ff fc50 	bl	11b98 <mp_obj_class_lookup>
        meth_args = 2;
   122f8:	2102      	movs	r1, #2
   122fa:	e7e7      	b.n	122cc <instance_subscr+0x30>
        lookup.attr = MP_QSTR___getitem__;
   122fc:	230f      	movs	r3, #15
   122fe:	9304      	str	r3, [sp, #16]
        mp_obj_class_lookup(&lookup, self->base.type);
   12300:	6801      	ldr	r1, [r0, #0]
   12302:	a803      	add	r0, sp, #12
   12304:	f7ff fc48 	bl	11b98 <mp_obj_class_lookup>
        meth_args = 2;
   12308:	2102      	movs	r1, #2
   1230a:	e7df      	b.n	122cc <instance_subscr+0x30>
        return mp_obj_subscr(self->subobj[0], index, value);
   1230c:	462a      	mov	r2, r5
   1230e:	4631      	mov	r1, r6
   12310:	6920      	ldr	r0, [r4, #16]
   12312:	f7f8 ff81 	bl	b218 <mp_obj_subscr>
   12316:	e7e7      	b.n	122e8 <instance_subscr+0x4c>
        return MP_OBJ_NULL; // op not supported
   12318:	2000      	movs	r0, #0
   1231a:	e7e5      	b.n	122e8 <instance_subscr+0x4c>
   1231c:	00027b40 	.word	0x00027b40

00012320 <instance_binary_op>:
STATIC mp_obj_t instance_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   12320:	b570      	push	{r4, r5, r6, lr}
   12322:	b088      	sub	sp, #32
   12324:	4604      	mov	r4, r0
   12326:	460d      	mov	r5, r1
   12328:	4616      	mov	r6, r2
    qstr op_name = mp_binary_op_method_name[op];
   1232a:	4b17      	ldr	r3, [pc, #92]	; (12388 <instance_binary_op+0x68>)
   1232c:	5d19      	ldrb	r1, [r3, r4]
    mp_obj_t dest[3] = {MP_OBJ_NULL};
   1232e:	aa05      	add	r2, sp, #20
   12330:	2300      	movs	r3, #0
   12332:	9305      	str	r3, [sp, #20]
   12334:	9306      	str	r3, [sp, #24]
   12336:	9307      	str	r3, [sp, #28]
    struct class_lookup_data lookup = {
   12338:	9500      	str	r5, [sp, #0]
   1233a:	9101      	str	r1, [sp, #4]
   1233c:	2118      	movs	r1, #24
   1233e:	9102      	str	r1, [sp, #8]
   12340:	9203      	str	r2, [sp, #12]
   12342:	f88d 3010 	strb.w	r3, [sp, #16]
    mp_obj_class_lookup(&lookup, lhs->base.type);
   12346:	6829      	ldr	r1, [r5, #0]
   12348:	4668      	mov	r0, sp
   1234a:	f7ff fc25 	bl	11b98 <mp_obj_class_lookup>
    if (dest[0] == MP_OBJ_SENTINEL) {
   1234e:	9b05      	ldr	r3, [sp, #20]
   12350:	2b08      	cmp	r3, #8
   12352:	d008      	beq.n	12366 <instance_binary_op+0x46>
    } else if (dest[0] != MP_OBJ_NULL) {
   12354:	b973      	cbnz	r3, 12374 <instance_binary_op+0x54>
        if (op >= MP_BINARY_OP_INPLACE_OR && op <= MP_BINARY_OP_INPLACE_POWER) {
   12356:	f1a4 0309 	sub.w	r3, r4, #9
   1235a:	b2db      	uxtb	r3, r3
   1235c:	2b0b      	cmp	r3, #11
   1235e:	d810      	bhi.n	12382 <instance_binary_op+0x62>
            op -= MP_BINARY_OP_INPLACE_OR - MP_BINARY_OP_OR;
   12360:	340c      	adds	r4, #12
   12362:	b2e4      	uxtb	r4, r4
            goto retry;
   12364:	e7e1      	b.n	1232a <instance_binary_op+0xa>
        res = mp_binary_op(op, lhs->subobj[0], rhs_in);
   12366:	4632      	mov	r2, r6
   12368:	6929      	ldr	r1, [r5, #16]
   1236a:	4620      	mov	r0, r4
   1236c:	f7f7 ffa4 	bl	a2b8 <mp_binary_op>
}
   12370:	b008      	add	sp, #32
   12372:	bd70      	pop	{r4, r5, r6, pc}
        dest[2] = rhs_in;
   12374:	9607      	str	r6, [sp, #28]
        res = mp_call_method_n_kw(1, 0, dest);
   12376:	aa05      	add	r2, sp, #20
   12378:	2100      	movs	r1, #0
   1237a:	2001      	movs	r0, #1
   1237c:	f7f7 f9b5 	bl	96ea <mp_call_method_n_kw>
   12380:	e7f6      	b.n	12370 <instance_binary_op+0x50>
        return MP_OBJ_NULL; // op not supported
   12382:	2000      	movs	r0, #0
   12384:	e7f4      	b.n	12370 <instance_binary_op+0x50>
   12386:	bf00      	nop
   12388:	00028ad0 	.word	0x00028ad0

0001238c <instance_unary_op>:
STATIC mp_obj_t instance_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   1238c:	b530      	push	{r4, r5, lr}
   1238e:	b089      	sub	sp, #36	; 0x24
   12390:	4605      	mov	r5, r0
   12392:	460c      	mov	r4, r1
    qstr op_name = mp_unary_op_method_name[op];
   12394:	4b1c      	ldr	r3, [pc, #112]	; (12408 <instance_unary_op+0x7c>)
   12396:	5c19      	ldrb	r1, [r3, r0]
    mp_obj_t member[2] = {MP_OBJ_NULL};
   12398:	aa06      	add	r2, sp, #24
   1239a:	2300      	movs	r3, #0
   1239c:	9306      	str	r3, [sp, #24]
   1239e:	9307      	str	r3, [sp, #28]
    struct class_lookup_data lookup = {
   123a0:	9401      	str	r4, [sp, #4]
   123a2:	9102      	str	r1, [sp, #8]
   123a4:	2114      	movs	r1, #20
   123a6:	9103      	str	r1, [sp, #12]
   123a8:	9204      	str	r2, [sp, #16]
   123aa:	f88d 3014 	strb.w	r3, [sp, #20]
    mp_obj_class_lookup(&lookup, self->base.type);
   123ae:	6821      	ldr	r1, [r4, #0]
   123b0:	a801      	add	r0, sp, #4
   123b2:	f7ff fbf1 	bl	11b98 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   123b6:	9806      	ldr	r0, [sp, #24]
   123b8:	2808      	cmp	r0, #8
   123ba:	d007      	beq.n	123cc <instance_unary_op+0x40>
    } else if (member[0] != MP_OBJ_NULL) {
   123bc:	b188      	cbz	r0, 123e2 <instance_unary_op+0x56>
        mp_obj_t val = mp_call_function_1(member[0], self_in);
   123be:	4621      	mov	r1, r4
   123c0:	f7f7 f987 	bl	96d2 <mp_call_function_1>
        if (op == MP_UNARY_OP_HASH) {
   123c4:	2d06      	cmp	r5, #6
   123c6:	d006      	beq.n	123d6 <instance_unary_op+0x4a>
}
   123c8:	b009      	add	sp, #36	; 0x24
   123ca:	bd30      	pop	{r4, r5, pc}
        return mp_unary_op(op, self->subobj[0]);
   123cc:	6921      	ldr	r1, [r4, #16]
   123ce:	4628      	mov	r0, r5
   123d0:	f7f7 f8b8 	bl	9544 <mp_unary_op>
   123d4:	e7f8      	b.n	123c8 <instance_unary_op+0x3c>
            val = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int_truncated(val));
   123d6:	f7f8 fd27 	bl	ae28 <mp_obj_get_int_truncated>
   123da:	0040      	lsls	r0, r0, #1
   123dc:	f040 0001 	orr.w	r0, r0, #1
   123e0:	e7f2      	b.n	123c8 <instance_unary_op+0x3c>
        if (op == MP_UNARY_OP_HASH) {
   123e2:	2d06      	cmp	r5, #6
   123e4:	d10b      	bne.n	123fe <instance_unary_op+0x72>
            lookup.attr = MP_QSTR___eq__;
   123e6:	230b      	movs	r3, #11
   123e8:	9302      	str	r3, [sp, #8]
            mp_obj_class_lookup(&lookup, self->base.type);
   123ea:	6821      	ldr	r1, [r4, #0]
   123ec:	a801      	add	r0, sp, #4
   123ee:	f7ff fbd3 	bl	11b98 <mp_obj_class_lookup>
            if (member[0] == MP_OBJ_NULL) {
   123f2:	9b06      	ldr	r3, [sp, #24]
   123f4:	b92b      	cbnz	r3, 12402 <instance_unary_op+0x76>
                return MP_OBJ_NEW_SMALL_INT((mp_uint_t)self_in);
   123f6:	0060      	lsls	r0, r4, #1
   123f8:	f040 0001 	orr.w	r0, r0, #1
   123fc:	e7e4      	b.n	123c8 <instance_unary_op+0x3c>
        return MP_OBJ_NULL; // op not supported
   123fe:	2000      	movs	r0, #0
   12400:	e7e2      	b.n	123c8 <instance_unary_op+0x3c>
   12402:	2000      	movs	r0, #0
   12404:	e7e0      	b.n	123c8 <instance_unary_op+0x3c>
   12406:	bf00      	nop
   12408:	00028e0c 	.word	0x00028e0c

0001240c <instance_print>:
STATIC void instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1240c:	b570      	push	{r4, r5, r6, lr}
   1240e:	b088      	sub	sp, #32
   12410:	4605      	mov	r5, r0
   12412:	460c      	mov	r4, r1
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   12414:	4616      	mov	r6, r2
   12416:	bb02      	cbnz	r2, 1245a <instance_print+0x4e>
   12418:	2124      	movs	r1, #36	; 0x24
    mp_obj_t member[2] = {MP_OBJ_NULL};
   1241a:	aa06      	add	r2, sp, #24
   1241c:	2300      	movs	r3, #0
   1241e:	9306      	str	r3, [sp, #24]
   12420:	9307      	str	r3, [sp, #28]
    struct class_lookup_data lookup = {
   12422:	9401      	str	r4, [sp, #4]
   12424:	9102      	str	r1, [sp, #8]
   12426:	2108      	movs	r1, #8
   12428:	9103      	str	r1, [sp, #12]
   1242a:	9204      	str	r2, [sp, #16]
   1242c:	f88d 3014 	strb.w	r3, [sp, #20]
    mp_obj_class_lookup(&lookup, self->base.type);
   12430:	6821      	ldr	r1, [r4, #0]
   12432:	a801      	add	r0, sp, #4
   12434:	f7ff fbb0 	bl	11b98 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   12438:	9b06      	ldr	r3, [sp, #24]
   1243a:	b183      	cbz	r3, 1245e <instance_print+0x52>
    if (member[0] == MP_OBJ_SENTINEL) {
   1243c:	9806      	ldr	r0, [sp, #24]
   1243e:	2808      	cmp	r0, #8
   12440:	d018      	beq.n	12474 <instance_print+0x68>
    if (member[0] != MP_OBJ_NULL) {
   12442:	2800      	cmp	r0, #0
   12444:	d034      	beq.n	124b0 <instance_print+0xa4>
        mp_obj_t r = mp_call_function_1(member[0], self_in);
   12446:	4621      	mov	r1, r4
   12448:	f7f7 f943 	bl	96d2 <mp_call_function_1>
        mp_obj_print_helper(print, r, PRINT_STR);
   1244c:	2200      	movs	r2, #0
   1244e:	4601      	mov	r1, r0
   12450:	4628      	mov	r0, r5
   12452:	f7f8 fbb5 	bl	abc0 <mp_obj_print_helper>
}
   12456:	b008      	add	sp, #32
   12458:	bd70      	pop	{r4, r5, r6, pc}
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   1245a:	2122      	movs	r1, #34	; 0x22
   1245c:	e7dd      	b.n	1241a <instance_print+0xe>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   1245e:	2e00      	cmp	r6, #0
   12460:	d1ec      	bne.n	1243c <instance_print+0x30>
        lookup.attr = MP_QSTR___repr__;
   12462:	2322      	movs	r3, #34	; 0x22
   12464:	9302      	str	r3, [sp, #8]
        lookup.meth_offset = 0;
   12466:	2300      	movs	r3, #0
   12468:	9303      	str	r3, [sp, #12]
        mp_obj_class_lookup(&lookup, self->base.type);
   1246a:	6821      	ldr	r1, [r4, #0]
   1246c:	a801      	add	r0, sp, #4
   1246e:	f7ff fb93 	bl	11b98 <mp_obj_class_lookup>
   12472:	e7e3      	b.n	1243c <instance_print+0x30>
        if (mp_obj_is_native_exception_instance(self->subobj[0])) {
   12474:	6920      	ldr	r0, [r4, #16]
   12476:	f7f8 fb81 	bl	ab7c <mp_obj_get_type>
   1247a:	68c2      	ldr	r2, [r0, #12]
   1247c:	4b11      	ldr	r3, [pc, #68]	; (124c4 <instance_print+0xb8>)
   1247e:	429a      	cmp	r2, r3
   12480:	d005      	beq.n	1248e <instance_print+0x82>
            mp_obj_print_helper(print, self->subobj[0], kind);
   12482:	4632      	mov	r2, r6
   12484:	6921      	ldr	r1, [r4, #16]
   12486:	4628      	mov	r0, r5
   12488:	f7f8 fb9a 	bl	abc0 <mp_obj_print_helper>
   1248c:	e7e3      	b.n	12456 <instance_print+0x4a>
            if (kind != PRINT_STR) {
   1248e:	b936      	cbnz	r6, 1249e <instance_print+0x92>
            mp_obj_print_helper(print, self->subobj[0], kind | PRINT_EXC_SUBCLASS);
   12490:	f046 0280 	orr.w	r2, r6, #128	; 0x80
   12494:	6921      	ldr	r1, [r4, #16]
   12496:	4628      	mov	r0, r5
   12498:	f7f8 fb92 	bl	abc0 <mp_obj_print_helper>
   1249c:	e7db      	b.n	12456 <instance_print+0x4a>
                mp_print_str(print, qstr_str(self->base.type->name));
   1249e:	6823      	ldr	r3, [r4, #0]
   124a0:	6858      	ldr	r0, [r3, #4]
   124a2:	f7ef f8f6 	bl	1692 <qstr_str>
   124a6:	4601      	mov	r1, r0
   124a8:	4628      	mov	r0, r5
   124aa:	f7ef fa48 	bl	193e <mp_print_str>
   124ae:	e7ef      	b.n	12490 <instance_print+0x84>
    mp_printf(print, "<%s object at %p>", mp_obj_get_type_str(self_in), self);
   124b0:	4620      	mov	r0, r4
   124b2:	f7f8 fb7d 	bl	abb0 <mp_obj_get_type_str>
   124b6:	4623      	mov	r3, r4
   124b8:	4602      	mov	r2, r0
   124ba:	4903      	ldr	r1, [pc, #12]	; (124c8 <instance_print+0xbc>)
   124bc:	4628      	mov	r0, r5
   124be:	f7ef fdd5 	bl	206c <mp_printf>
   124c2:	e7c8      	b.n	12456 <instance_print+0x4a>
   124c4:	0000c959 	.word	0x0000c959
   124c8:	00028abc 	.word	0x00028abc

000124cc <super_print>:
STATIC void super_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   124cc:	b538      	push	{r3, r4, r5, lr}
   124ce:	4604      	mov	r4, r0
   124d0:	460d      	mov	r5, r1
    mp_print_str(print, "<super: ");
   124d2:	490b      	ldr	r1, [pc, #44]	; (12500 <super_print+0x34>)
   124d4:	f7ef fa33 	bl	193e <mp_print_str>
    mp_obj_print_helper(print, self->type, PRINT_STR);
   124d8:	2200      	movs	r2, #0
   124da:	6869      	ldr	r1, [r5, #4]
   124dc:	4620      	mov	r0, r4
   124de:	f7f8 fb6f 	bl	abc0 <mp_obj_print_helper>
    mp_print_str(print, ", ");
   124e2:	4908      	ldr	r1, [pc, #32]	; (12504 <super_print+0x38>)
   124e4:	4620      	mov	r0, r4
   124e6:	f7ef fa2a 	bl	193e <mp_print_str>
    mp_obj_print_helper(print, self->obj, PRINT_STR);
   124ea:	2200      	movs	r2, #0
   124ec:	68a9      	ldr	r1, [r5, #8]
   124ee:	4620      	mov	r0, r4
   124f0:	f7f8 fb66 	bl	abc0 <mp_obj_print_helper>
    mp_print_str(print, ">");
   124f4:	4904      	ldr	r1, [pc, #16]	; (12508 <super_print+0x3c>)
   124f6:	4620      	mov	r0, r4
   124f8:	f7ef fa21 	bl	193e <mp_print_str>
}
   124fc:	bd38      	pop	{r3, r4, r5, pc}
   124fe:	bf00      	nop
   12500:	00028ee0 	.word	0x00028ee0
   12504:	00025e80 	.word	0x00025e80
   12508:	000279b0 	.word	0x000279b0

0001250c <mp_obj_instance_is_callable>:
bool mp_obj_instance_is_callable(mp_obj_t self_in) {
   1250c:	b500      	push	{lr}
   1250e:	b083      	sub	sp, #12
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   12510:	2300      	movs	r3, #0
   12512:	9300      	str	r3, [sp, #0]
   12514:	9301      	str	r3, [sp, #4]
    return mp_obj_instance_get_call(self_in, member) != MP_OBJ_NULL;
   12516:	4669      	mov	r1, sp
   12518:	f7ff fcb0 	bl	11e7c <mp_obj_instance_get_call>
}
   1251c:	3000      	adds	r0, #0
   1251e:	bf18      	it	ne
   12520:	2001      	movne	r0, #1
   12522:	b003      	add	sp, #12
   12524:	f85d fb04 	ldr.w	pc, [sp], #4

00012528 <mp_obj_new_type>:
mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict) {
   12528:	b5f0      	push	{r4, r5, r6, r7, lr}
   1252a:	b085      	sub	sp, #20
    assert(MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)); // MicroPython restriction, for now
   1252c:	f011 0f03 	tst.w	r1, #3
   12530:	d124      	bne.n	1257c <mp_obj_new_type+0x54>
   12532:	4606      	mov	r6, r0
   12534:	460c      	mov	r4, r1
   12536:	4615      	mov	r5, r2
   12538:	680a      	ldr	r2, [r1, #0]
   1253a:	4b44      	ldr	r3, [pc, #272]	; (1264c <mp_obj_new_type+0x124>)
   1253c:	429a      	cmp	r2, r3
   1253e:	d11d      	bne.n	1257c <mp_obj_new_type+0x54>
    assert(MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)); // MicroPython restriction, for now
   12540:	f015 0f03 	tst.w	r5, #3
   12544:	d121      	bne.n	1258a <mp_obj_new_type+0x62>
   12546:	682a      	ldr	r2, [r5, #0]
   12548:	4b41      	ldr	r3, [pc, #260]	; (12650 <mp_obj_new_type+0x128>)
   1254a:	429a      	cmp	r2, r3
   1254c:	d11d      	bne.n	1258a <mp_obj_new_type+0x62>
    mp_obj_tuple_get(bases_tuple, &bases_len, &bases_items);
   1254e:	aa02      	add	r2, sp, #8
   12550:	a903      	add	r1, sp, #12
   12552:	4620      	mov	r0, r4
   12554:	f7ff fa40 	bl	119d8 <mp_obj_tuple_get>
    for (size_t i = 0; i < bases_len; i++) {
   12558:	2300      	movs	r3, #0
   1255a:	9a03      	ldr	r2, [sp, #12]
   1255c:	429a      	cmp	r2, r3
   1255e:	d929      	bls.n	125b4 <mp_obj_new_type+0x8c>
        assert(MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type));
   12560:	9a02      	ldr	r2, [sp, #8]
   12562:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   12566:	f012 0f03 	tst.w	r2, #3
   1256a:	d115      	bne.n	12598 <mp_obj_new_type+0x70>
   1256c:	6810      	ldr	r0, [r2, #0]
   1256e:	4939      	ldr	r1, [pc, #228]	; (12654 <mp_obj_new_type+0x12c>)
   12570:	4288      	cmp	r0, r1
   12572:	d111      	bne.n	12598 <mp_obj_new_type+0x70>
        if (t->make_new == NULL) {
   12574:	68d1      	ldr	r1, [r2, #12]
   12576:	b1b1      	cbz	r1, 125a6 <mp_obj_new_type+0x7e>
    for (size_t i = 0; i < bases_len; i++) {
   12578:	3301      	adds	r3, #1
   1257a:	e7ee      	b.n	1255a <mp_obj_new_type+0x32>
    assert(MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)); // MicroPython restriction, for now
   1257c:	4b36      	ldr	r3, [pc, #216]	; (12658 <mp_obj_new_type+0x130>)
   1257e:	4a37      	ldr	r2, [pc, #220]	; (1265c <mp_obj_new_type+0x134>)
   12580:	f240 31f1 	movw	r1, #1009	; 0x3f1
   12584:	4836      	ldr	r0, [pc, #216]	; (12660 <mp_obj_new_type+0x138>)
   12586:	f005 ffe9 	bl	1855c <__assert_func>
    assert(MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)); // MicroPython restriction, for now
   1258a:	4b36      	ldr	r3, [pc, #216]	; (12664 <mp_obj_new_type+0x13c>)
   1258c:	4a33      	ldr	r2, [pc, #204]	; (1265c <mp_obj_new_type+0x134>)
   1258e:	f240 31f2 	movw	r1, #1010	; 0x3f2
   12592:	4833      	ldr	r0, [pc, #204]	; (12660 <mp_obj_new_type+0x138>)
   12594:	f005 ffe2 	bl	1855c <__assert_func>
        assert(MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type));
   12598:	4b33      	ldr	r3, [pc, #204]	; (12668 <mp_obj_new_type+0x140>)
   1259a:	4a30      	ldr	r2, [pc, #192]	; (1265c <mp_obj_new_type+0x134>)
   1259c:	f240 31fb 	movw	r1, #1019	; 0x3fb
   125a0:	482f      	ldr	r0, [pc, #188]	; (12660 <mp_obj_new_type+0x138>)
   125a2:	f005 ffdb 	bl	1855c <__assert_func>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   125a6:	6852      	ldr	r2, [r2, #4]
   125a8:	4930      	ldr	r1, [pc, #192]	; (1266c <mp_obj_new_type+0x144>)
   125aa:	4831      	ldr	r0, [pc, #196]	; (12670 <mp_obj_new_type+0x148>)
   125ac:	f7fa fa8e 	bl	cacc <mp_obj_new_exception_msg_varg>
   125b0:	f7ee f966 	bl	880 <nlr_jump>
    mp_obj_type_t *o = m_new0(mp_obj_type_t, 1);
   125b4:	203c      	movs	r0, #60	; 0x3c
   125b6:	f7ee f994 	bl	8e2 <m_malloc0>
   125ba:	4607      	mov	r7, r0
    o->base.type = &mp_type_type;
   125bc:	4b25      	ldr	r3, [pc, #148]	; (12654 <mp_obj_new_type+0x12c>)
   125be:	6003      	str	r3, [r0, #0]
    o->name = name;
   125c0:	6046      	str	r6, [r0, #4]
    o->print = instance_print;
   125c2:	4b2c      	ldr	r3, [pc, #176]	; (12674 <mp_obj_new_type+0x14c>)
   125c4:	6083      	str	r3, [r0, #8]
    o->make_new = mp_obj_instance_make_new;
   125c6:	4b2c      	ldr	r3, [pc, #176]	; (12678 <mp_obj_new_type+0x150>)
   125c8:	60c3      	str	r3, [r0, #12]
    o->call = mp_obj_instance_call;
   125ca:	4b2c      	ldr	r3, [pc, #176]	; (1267c <mp_obj_new_type+0x154>)
   125cc:	6103      	str	r3, [r0, #16]
    o->unary_op = instance_unary_op;
   125ce:	4b2c      	ldr	r3, [pc, #176]	; (12680 <mp_obj_new_type+0x158>)
   125d0:	6143      	str	r3, [r0, #20]
    o->binary_op = instance_binary_op;
   125d2:	4b2c      	ldr	r3, [pc, #176]	; (12684 <mp_obj_new_type+0x15c>)
   125d4:	6183      	str	r3, [r0, #24]
    o->attr = mp_obj_instance_attr;
   125d6:	4b2c      	ldr	r3, [pc, #176]	; (12688 <mp_obj_new_type+0x160>)
   125d8:	61c3      	str	r3, [r0, #28]
    o->subscr = instance_subscr;
   125da:	4b2c      	ldr	r3, [pc, #176]	; (1268c <mp_obj_new_type+0x164>)
   125dc:	6203      	str	r3, [r0, #32]
    o->getiter = instance_getiter;
   125de:	4b2c      	ldr	r3, [pc, #176]	; (12690 <mp_obj_new_type+0x168>)
   125e0:	6243      	str	r3, [r0, #36]	; 0x24
    o->buffer_p.get_buffer = instance_get_buffer;
   125e2:	4b2c      	ldr	r3, [pc, #176]	; (12694 <mp_obj_new_type+0x16c>)
   125e4:	62c3      	str	r3, [r0, #44]	; 0x2c
    if (bases_len > 0) {
   125e6:	9b03      	ldr	r3, [sp, #12]
   125e8:	b133      	cbz	r3, 125f8 <mp_obj_new_type+0xd0>
        o->protocol = ((mp_obj_type_t*)MP_OBJ_TO_PTR(bases_items[0]))->protocol;
   125ea:	9a02      	ldr	r2, [sp, #8]
   125ec:	6811      	ldr	r1, [r2, #0]
   125ee:	6b09      	ldr	r1, [r1, #48]	; 0x30
   125f0:	6301      	str	r1, [r0, #48]	; 0x30
        if (bases_len >= 2) {
   125f2:	2b01      	cmp	r3, #1
   125f4:	d91c      	bls.n	12630 <mp_obj_new_type+0x108>
            o->parent = MP_OBJ_TO_PTR(bases_tuple);
   125f6:	6344      	str	r4, [r0, #52]	; 0x34
    o->locals_dict = MP_OBJ_TO_PTR(locals_dict);
   125f8:	63bd      	str	r5, [r7, #56]	; 0x38
    size_t num_native_bases = instance_count_native_bases(o, &native_base);
   125fa:	a901      	add	r1, sp, #4
   125fc:	4638      	mov	r0, r7
   125fe:	f7ff fa21 	bl	11a44 <instance_count_native_bases>
    if (num_native_bases > 1) {
   12602:	2801      	cmp	r0, #1
   12604:	d817      	bhi.n	12636 <mp_obj_new_type+0x10e>
    mp_map_t *locals_map = &o->locals_dict->map;
   12606:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(MP_QSTR___new__), MP_MAP_LOOKUP);
   12608:	2200      	movs	r2, #0
   1260a:	2176      	movs	r1, #118	; 0x76
   1260c:	3004      	adds	r0, #4
   1260e:	f7f8 f993 	bl	a938 <mp_map_lookup>
    if (elem != NULL) {
   12612:	4604      	mov	r4, r0
   12614:	b148      	cbz	r0, 1262a <mp_obj_new_type+0x102>
        if (MP_OBJ_IS_FUN(elem->value)) {
   12616:	6843      	ldr	r3, [r0, #4]
   12618:	f013 0f03 	tst.w	r3, #3
   1261c:	d105      	bne.n	1262a <mp_obj_new_type+0x102>
   1261e:	681b      	ldr	r3, [r3, #0]
   12620:	685a      	ldr	r2, [r3, #4]
   12622:	f240 13a7 	movw	r3, #423	; 0x1a7
   12626:	429a      	cmp	r2, r3
   12628:	d008      	beq.n	1263c <mp_obj_new_type+0x114>
}
   1262a:	4638      	mov	r0, r7
   1262c:	b005      	add	sp, #20
   1262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            o->parent = MP_OBJ_TO_PTR(bases_items[0]);
   12630:	6813      	ldr	r3, [r2, #0]
   12632:	6343      	str	r3, [r0, #52]	; 0x34
   12634:	e7e0      	b.n	125f8 <mp_obj_new_type+0xd0>
        mp_raise_TypeError("multiple bases have instance lay-out conflict");
   12636:	4818      	ldr	r0, [pc, #96]	; (12698 <mp_obj_new_type+0x170>)
   12638:	f7f8 f836 	bl	a6a8 <mp_raise_TypeError>
            elem->value = static_class_method_make_new(&mp_type_staticmethod, 1, 0, &elem->value);
   1263c:	1d03      	adds	r3, r0, #4
   1263e:	2200      	movs	r2, #0
   12640:	2101      	movs	r1, #1
   12642:	4816      	ldr	r0, [pc, #88]	; (1269c <mp_obj_new_type+0x174>)
   12644:	f7ff fde0 	bl	12208 <static_class_method_make_new>
   12648:	6060      	str	r0, [r4, #4]
    return MP_OBJ_FROM_PTR(o);
   1264a:	e7ee      	b.n	1262a <mp_obj_new_type+0x102>
   1264c:	00028844 	.word	0x00028844
   12650:	000265d0 	.word	0x000265d0
   12654:	00028dd0 	.word	0x00028dd0
   12658:	00028c38 	.word	0x00028c38
   1265c:	00028a44 	.word	0x00028a44
   12660:	00028aa8 	.word	0x00028aa8
   12664:	00028c64 	.word	0x00028c64
   12668:	00028c90 	.word	0x00028c90
   1266c:	00028cc0 	.word	0x00028cc0
   12670:	00026c84 	.word	0x00026c84
   12674:	0001240d 	.word	0x0001240d
   12678:	00011d11 	.word	0x00011d11
   1267c:	000121ad 	.word	0x000121ad
   12680:	0001238d 	.word	0x0001238d
   12684:	00012321 	.word	0x00012321
   12688:	00012191 	.word	0x00012191
   1268c:	0001229d 	.word	0x0001229d
   12690:	00011f99 	.word	0x00011f99
   12694:	00011f51 	.word	0x00011f51
   12698:	00028cec 	.word	0x00028cec
   1269c:	00028d58 	.word	0x00028d58

000126a0 <type_make_new>:
STATIC mp_obj_t type_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   126a0:	b530      	push	{r4, r5, lr}
   126a2:	b083      	sub	sp, #12
   126a4:	460c      	mov	r4, r1
   126a6:	4611      	mov	r1, r2
   126a8:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   126aa:	2300      	movs	r3, #0
   126ac:	9300      	str	r3, [sp, #0]
   126ae:	2303      	movs	r3, #3
   126b0:	2201      	movs	r2, #1
   126b2:	4620      	mov	r0, r4
   126b4:	f7f8 f830 	bl	a718 <mp_arg_check_num>
    switch (n_args) {
   126b8:	2c01      	cmp	r4, #1
   126ba:	d009      	beq.n	126d0 <type_make_new+0x30>
   126bc:	2c03      	cmp	r4, #3
   126be:	d10c      	bne.n	126da <type_make_new+0x3a>
            return mp_obj_new_type(mp_obj_str_get_qstr(args[0]), args[1], args[2]);
   126c0:	6828      	ldr	r0, [r5, #0]
   126c2:	f7fd fdad 	bl	10220 <mp_obj_str_get_qstr>
   126c6:	68aa      	ldr	r2, [r5, #8]
   126c8:	6869      	ldr	r1, [r5, #4]
   126ca:	f7ff ff2d 	bl	12528 <mp_obj_new_type>
   126ce:	e002      	b.n	126d6 <type_make_new+0x36>
            return MP_OBJ_FROM_PTR(mp_obj_get_type(args[0]));
   126d0:	6828      	ldr	r0, [r5, #0]
   126d2:	f7f8 fa53 	bl	ab7c <mp_obj_get_type>
}
   126d6:	b003      	add	sp, #12
   126d8:	bd30      	pop	{r4, r5, pc}
            mp_raise_TypeError("type takes 1 or 3 arguments");
   126da:	4801      	ldr	r0, [pc, #4]	; (126e0 <type_make_new+0x40>)
   126dc:	f7f7 ffe4 	bl	a6a8 <mp_raise_TypeError>
   126e0:	00028f64 	.word	0x00028f64

000126e4 <mp_load_super_method>:
void mp_load_super_method(qstr attr, mp_obj_t *dest) {
   126e4:	b500      	push	{lr}
   126e6:	b085      	sub	sp, #20
   126e8:	460a      	mov	r2, r1
    mp_obj_super_t super = {{&mp_type_super}, dest[1], dest[2]};
   126ea:	4b06      	ldr	r3, [pc, #24]	; (12704 <mp_load_super_method+0x20>)
   126ec:	9301      	str	r3, [sp, #4]
   126ee:	684b      	ldr	r3, [r1, #4]
   126f0:	9302      	str	r3, [sp, #8]
   126f2:	688b      	ldr	r3, [r1, #8]
   126f4:	9303      	str	r3, [sp, #12]
    mp_load_method(MP_OBJ_FROM_PTR(&super), attr, dest);
   126f6:	4601      	mov	r1, r0
   126f8:	a801      	add	r0, sp, #4
   126fa:	f7f7 f887 	bl	980c <mp_load_method>
}
   126fe:	b005      	add	sp, #20
   12700:	f85d fb04 	ldr.w	pc, [sp], #4
   12704:	00028d94 	.word	0x00028d94

00012708 <mp_obj_is_subclass_fast>:
bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo) {
   12708:	b570      	push	{r4, r5, r6, lr}
   1270a:	460c      	mov	r4, r1
        if (object == classinfo) {
   1270c:	42a0      	cmp	r0, r4
   1270e:	d020      	beq.n	12752 <mp_obj_is_subclass_fast+0x4a>
        if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   12710:	f010 0f03 	tst.w	r0, #3
   12714:	d120      	bne.n	12758 <mp_obj_is_subclass_fast+0x50>
   12716:	6802      	ldr	r2, [r0, #0]
   12718:	4b12      	ldr	r3, [pc, #72]	; (12764 <mp_obj_is_subclass_fast+0x5c>)
   1271a:	429a      	cmp	r2, r3
   1271c:	d11e      	bne.n	1275c <mp_obj_is_subclass_fast+0x54>
        if (self->parent == NULL) {
   1271e:	6b40      	ldr	r0, [r0, #52]	; 0x34
   12720:	b1f0      	cbz	r0, 12760 <mp_obj_is_subclass_fast+0x58>
        } else if (((mp_obj_base_t*)self->parent)->type == &mp_type_tuple) {
   12722:	6802      	ldr	r2, [r0, #0]
   12724:	4b10      	ldr	r3, [pc, #64]	; (12768 <mp_obj_is_subclass_fast+0x60>)
   12726:	429a      	cmp	r2, r3
   12728:	d1f0      	bne.n	1270c <mp_obj_is_subclass_fast+0x4>
            const mp_obj_t *item = parent_tuple->items;
   1272a:	f100 0508 	add.w	r5, r0, #8
            const mp_obj_t *top = item + parent_tuple->len - 1;
   1272e:	6846      	ldr	r6, [r0, #4]
   12730:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   12734:	3e01      	subs	r6, #1
   12736:	eb05 0686 	add.w	r6, r5, r6, lsl #2
            for (; item < top; ++item) {
   1273a:	42b5      	cmp	r5, r6
   1273c:	d207      	bcs.n	1274e <mp_obj_is_subclass_fast+0x46>
                if (mp_obj_is_subclass_fast(*item, classinfo)) {
   1273e:	4621      	mov	r1, r4
   12740:	6828      	ldr	r0, [r5, #0]
   12742:	f7ff ffe1 	bl	12708 <mp_obj_is_subclass_fast>
   12746:	4603      	mov	r3, r0
   12748:	b920      	cbnz	r0, 12754 <mp_obj_is_subclass_fast+0x4c>
            for (; item < top; ++item) {
   1274a:	3504      	adds	r5, #4
   1274c:	e7f5      	b.n	1273a <mp_obj_is_subclass_fast+0x32>
            object = *item;
   1274e:	6828      	ldr	r0, [r5, #0]
   12750:	e7dc      	b.n	1270c <mp_obj_is_subclass_fast+0x4>
            return true;
   12752:	2301      	movs	r3, #1
}
   12754:	4618      	mov	r0, r3
   12756:	bd70      	pop	{r4, r5, r6, pc}
            return false;
   12758:	2300      	movs	r3, #0
   1275a:	e7fb      	b.n	12754 <mp_obj_is_subclass_fast+0x4c>
   1275c:	2300      	movs	r3, #0
   1275e:	e7f9      	b.n	12754 <mp_obj_is_subclass_fast+0x4c>
            return false;
   12760:	2300      	movs	r3, #0
   12762:	e7f7      	b.n	12754 <mp_obj_is_subclass_fast+0x4c>
   12764:	00028dd0 	.word	0x00028dd0
   12768:	00028844 	.word	0x00028844

0001276c <mp_obj_is_subclass>:
STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   1276c:	b530      	push	{r4, r5, lr}
   1276e:	b085      	sub	sp, #20
   12770:	4605      	mov	r5, r0
   12772:	9101      	str	r1, [sp, #4]
    if (MP_OBJ_IS_TYPE(classinfo, &mp_type_type)) {
   12774:	4608      	mov	r0, r1
   12776:	f011 0303 	ands.w	r3, r1, #3
   1277a:	d103      	bne.n	12784 <mp_obj_is_subclass+0x18>
   1277c:	6809      	ldr	r1, [r1, #0]
   1277e:	4a15      	ldr	r2, [pc, #84]	; (127d4 <mp_obj_is_subclass+0x68>)
   12780:	4291      	cmp	r1, r2
   12782:	d018      	beq.n	127b6 <mp_obj_is_subclass+0x4a>
    } else if (MP_OBJ_IS_TYPE(classinfo, &mp_type_tuple)) {
   12784:	b9e3      	cbnz	r3, 127c0 <mp_obj_is_subclass+0x54>
   12786:	6802      	ldr	r2, [r0, #0]
   12788:	4b13      	ldr	r3, [pc, #76]	; (127d8 <mp_obj_is_subclass+0x6c>)
   1278a:	429a      	cmp	r2, r3
   1278c:	d118      	bne.n	127c0 <mp_obj_is_subclass+0x54>
        mp_obj_tuple_get(classinfo, &len, &items);
   1278e:	aa02      	add	r2, sp, #8
   12790:	a903      	add	r1, sp, #12
   12792:	f7ff f921 	bl	119d8 <mp_obj_tuple_get>
STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   12796:	2400      	movs	r4, #0
    for (size_t i = 0; i < len; i++) {
   12798:	9b03      	ldr	r3, [sp, #12]
   1279a:	42a3      	cmp	r3, r4
   1279c:	d913      	bls.n	127c6 <mp_obj_is_subclass+0x5a>
        if (items[i] == MP_OBJ_FROM_PTR(&mp_type_object) || mp_obj_is_subclass_fast(object, items[i])) {
   1279e:	9b02      	ldr	r3, [sp, #8]
   127a0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   127a4:	4b0d      	ldr	r3, [pc, #52]	; (127dc <mp_obj_is_subclass+0x70>)
   127a6:	4299      	cmp	r1, r3
   127a8:	d010      	beq.n	127cc <mp_obj_is_subclass+0x60>
   127aa:	4628      	mov	r0, r5
   127ac:	f7ff ffac 	bl	12708 <mp_obj_is_subclass_fast>
   127b0:	b970      	cbnz	r0, 127d0 <mp_obj_is_subclass+0x64>
    for (size_t i = 0; i < len; i++) {
   127b2:	3401      	adds	r4, #1
   127b4:	e7f0      	b.n	12798 <mp_obj_is_subclass+0x2c>
        len = 1;
   127b6:	2301      	movs	r3, #1
   127b8:	9303      	str	r3, [sp, #12]
        items = &classinfo;
   127ba:	ab01      	add	r3, sp, #4
   127bc:	9302      	str	r3, [sp, #8]
   127be:	e7ea      	b.n	12796 <mp_obj_is_subclass+0x2a>
        mp_raise_TypeError("issubclass() arg 2 must be a class or a tuple of classes");
   127c0:	4807      	ldr	r0, [pc, #28]	; (127e0 <mp_obj_is_subclass+0x74>)
   127c2:	f7f7 ff71 	bl	a6a8 <mp_raise_TypeError>
    return mp_const_false;
   127c6:	4807      	ldr	r0, [pc, #28]	; (127e4 <mp_obj_is_subclass+0x78>)
}
   127c8:	b005      	add	sp, #20
   127ca:	bd30      	pop	{r4, r5, pc}
            return mp_const_true;
   127cc:	4806      	ldr	r0, [pc, #24]	; (127e8 <mp_obj_is_subclass+0x7c>)
   127ce:	e7fb      	b.n	127c8 <mp_obj_is_subclass+0x5c>
   127d0:	4805      	ldr	r0, [pc, #20]	; (127e8 <mp_obj_is_subclass+0x7c>)
   127d2:	e7f9      	b.n	127c8 <mp_obj_is_subclass+0x5c>
   127d4:	00028dd0 	.word	0x00028dd0
   127d8:	00028844 	.word	0x00028844
   127dc:	00027ac8 	.word	0x00027ac8
   127e0:	00028be4 	.word	0x00028be4
   127e4:	00025f44 	.word	0x00025f44
   127e8:	00025f4c 	.word	0x00025f4c

000127ec <mp_builtin_issubclass>:
STATIC mp_obj_t mp_builtin_issubclass(mp_obj_t object, mp_obj_t classinfo) {
   127ec:	b508      	push	{r3, lr}
    if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   127ee:	f010 0f03 	tst.w	r0, #3
   127f2:	d106      	bne.n	12802 <mp_builtin_issubclass+0x16>
   127f4:	6802      	ldr	r2, [r0, #0]
   127f6:	4b04      	ldr	r3, [pc, #16]	; (12808 <mp_builtin_issubclass+0x1c>)
   127f8:	429a      	cmp	r2, r3
   127fa:	d102      	bne.n	12802 <mp_builtin_issubclass+0x16>
    return mp_obj_is_subclass(object, classinfo);
   127fc:	f7ff ffb6 	bl	1276c <mp_obj_is_subclass>
}
   12800:	bd08      	pop	{r3, pc}
        mp_raise_TypeError("issubclass() arg 1 must be a class");
   12802:	4802      	ldr	r0, [pc, #8]	; (1280c <mp_builtin_issubclass+0x20>)
   12804:	f7f7 ff50 	bl	a6a8 <mp_raise_TypeError>
   12808:	00028dd0 	.word	0x00028dd0
   1280c:	00028afc 	.word	0x00028afc

00012810 <mp_builtin_isinstance>:
STATIC mp_obj_t mp_builtin_isinstance(mp_obj_t object, mp_obj_t classinfo) {
   12810:	b510      	push	{r4, lr}
   12812:	460c      	mov	r4, r1
    return mp_obj_is_subclass(MP_OBJ_FROM_PTR(mp_obj_get_type(object)), classinfo);
   12814:	f7f8 f9b2 	bl	ab7c <mp_obj_get_type>
   12818:	4621      	mov	r1, r4
   1281a:	f7ff ffa7 	bl	1276c <mp_obj_is_subclass>
}
   1281e:	bd10      	pop	{r4, pc}

00012820 <mp_instance_cast_to_native_base>:
mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type) {
   12820:	b538      	push	{r3, r4, r5, lr}
   12822:	4605      	mov	r5, r0
   12824:	460c      	mov	r4, r1
    mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   12826:	f7f8 f9a9 	bl	ab7c <mp_obj_get_type>
    if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(self_type), native_type)) {
   1282a:	4621      	mov	r1, r4
   1282c:	f7ff ff6c 	bl	12708 <mp_obj_is_subclass_fast>
   12830:	b108      	cbz	r0, 12836 <mp_instance_cast_to_native_base+0x16>
    return self->subobj[0];
   12832:	6928      	ldr	r0, [r5, #16]
}
   12834:	bd38      	pop	{r3, r4, r5, pc}
        return MP_OBJ_NULL;
   12836:	2000      	movs	r0, #0
   12838:	e7fc      	b.n	12834 <mp_instance_cast_to_native_base+0x14>
	...

0001283c <zip_iternext>:
        o->iters[i] = mp_getiter(args[i], NULL);
    }
    return MP_OBJ_FROM_PTR(o);
}

STATIC mp_obj_t zip_iternext(mp_obj_t self_in) {
   1283c:	b570      	push	{r4, r5, r6, lr}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   1283e:	f010 0f03 	tst.w	r0, #3
   12842:	d109      	bne.n	12858 <zip_iternext+0x1c>
   12844:	4605      	mov	r5, r0
   12846:	6802      	ldr	r2, [r0, #0]
   12848:	4b13      	ldr	r3, [pc, #76]	; (12898 <zip_iternext+0x5c>)
   1284a:	429a      	cmp	r2, r3
   1284c:	d104      	bne.n	12858 <zip_iternext+0x1c>
    mp_obj_zip_t *self = MP_OBJ_TO_PTR(self_in);
    if (self->n_iters == 0) {
   1284e:	6840      	ldr	r0, [r0, #4]
   12850:	b940      	cbnz	r0, 12864 <zip_iternext+0x28>
        return MP_OBJ_STOP_ITERATION;
   12852:	2604      	movs	r6, #4
            return MP_OBJ_STOP_ITERATION;
        }
        tuple->items[i] = next;
    }
    return MP_OBJ_FROM_PTR(tuple);
}
   12854:	4630      	mov	r0, r6
   12856:	bd70      	pop	{r4, r5, r6, pc}
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   12858:	4b10      	ldr	r3, [pc, #64]	; (1289c <zip_iternext+0x60>)
   1285a:	4a11      	ldr	r2, [pc, #68]	; (128a0 <zip_iternext+0x64>)
   1285c:	2134      	movs	r1, #52	; 0x34
   1285e:	4811      	ldr	r0, [pc, #68]	; (128a4 <zip_iternext+0x68>)
   12860:	f005 fe7c 	bl	1855c <__assert_func>
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(self->n_iters, NULL));
   12864:	2100      	movs	r1, #0
   12866:	f7fe ffed 	bl	11844 <mp_obj_new_tuple>
   1286a:	4606      	mov	r6, r0
    for (size_t i = 0; i < self->n_iters; i++) {
   1286c:	2400      	movs	r4, #0
   1286e:	686b      	ldr	r3, [r5, #4]
   12870:	42a3      	cmp	r3, r4
   12872:	d9ef      	bls.n	12854 <zip_iternext+0x18>
        mp_obj_t next = mp_iternext(self->iters[i]);
   12874:	1ca3      	adds	r3, r4, #2
   12876:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   1287a:	f7f7 f8b7 	bl	99ec <mp_iternext>
        if (next == MP_OBJ_STOP_ITERATION) {
   1287e:	2804      	cmp	r0, #4
   12880:	d004      	beq.n	1288c <zip_iternext+0x50>
        tuple->items[i] = next;
   12882:	1ca3      	adds	r3, r4, #2
   12884:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
   12888:	3401      	adds	r4, #1
   1288a:	e7f0      	b.n	1286e <zip_iternext+0x32>
            mp_obj_tuple_del(MP_OBJ_FROM_PTR(tuple));
   1288c:	4630      	mov	r0, r6
   1288e:	f7ff f8bf 	bl	11a10 <mp_obj_tuple_del>
            return MP_OBJ_STOP_ITERATION;
   12892:	2604      	movs	r6, #4
   12894:	e7de      	b.n	12854 <zip_iternext+0x18>
   12896:	bf00      	nop
   12898:	00028fa0 	.word	0x00028fa0
   1289c:	00028fdc 	.word	0x00028fdc
   128a0:	00028f90 	.word	0x00028f90
   128a4:	00029038 	.word	0x00029038

000128a8 <zip_make_new>:
STATIC mp_obj_t zip_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   128a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128ac:	b082      	sub	sp, #8
   128ae:	4680      	mov	r8, r0
   128b0:	460d      	mov	r5, r1
   128b2:	4611      	mov	r1, r2
   128b4:	461f      	mov	r7, r3
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
   128b6:	2400      	movs	r4, #0
   128b8:	9400      	str	r4, [sp, #0]
   128ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   128be:	4622      	mov	r2, r4
   128c0:	4628      	mov	r0, r5
   128c2:	f7f7 ff29 	bl	a718 <mp_arg_check_num>
    mp_obj_zip_t *o = m_new_obj_var(mp_obj_zip_t, mp_obj_t, n_args);
   128c6:	1ca8      	adds	r0, r5, #2
   128c8:	0080      	lsls	r0, r0, #2
   128ca:	f7ed fff7 	bl	8bc <m_malloc>
   128ce:	4606      	mov	r6, r0
    o->base.type = type;
   128d0:	f8c0 8000 	str.w	r8, [r0]
    o->n_iters = n_args;
   128d4:	6045      	str	r5, [r0, #4]
    for (size_t i = 0; i < n_args; i++) {
   128d6:	e008      	b.n	128ea <zip_make_new+0x42>
        o->iters[i] = mp_getiter(args[i], NULL);
   128d8:	2100      	movs	r1, #0
   128da:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   128de:	f7f7 f817 	bl	9910 <mp_getiter>
   128e2:	1ca3      	adds	r3, r4, #2
   128e4:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    for (size_t i = 0; i < n_args; i++) {
   128e8:	3401      	adds	r4, #1
   128ea:	42ac      	cmp	r4, r5
   128ec:	d3f4      	bcc.n	128d8 <zip_make_new+0x30>
}
   128ee:	4630      	mov	r0, r6
   128f0:	b002      	add	sp, #8
   128f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000128f6 <op_getitem>:
 */

#include "py/obj.h"
#include "py/builtin.h"

STATIC mp_obj_t op_getitem(mp_obj_t self_in, mp_obj_t key_in) {
   128f6:	b538      	push	{r3, r4, r5, lr}
   128f8:	4604      	mov	r4, r0
   128fa:	460d      	mov	r5, r1
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   128fc:	f7f8 f93e 	bl	ab7c <mp_obj_get_type>
    return type->subscr(self_in, key_in, MP_OBJ_SENTINEL);
   12900:	6a03      	ldr	r3, [r0, #32]
   12902:	2208      	movs	r2, #8
   12904:	4629      	mov	r1, r5
   12906:	4620      	mov	r0, r4
   12908:	4798      	blx	r3
}
   1290a:	bd38      	pop	{r3, r4, r5, pc}

0001290c <op_setitem>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_getitem_obj, op_getitem);

STATIC mp_obj_t op_setitem(mp_obj_t self_in, mp_obj_t key_in, mp_obj_t value_in) {
   1290c:	b570      	push	{r4, r5, r6, lr}
   1290e:	4604      	mov	r4, r0
   12910:	460d      	mov	r5, r1
   12912:	4616      	mov	r6, r2
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   12914:	f7f8 f932 	bl	ab7c <mp_obj_get_type>
    return type->subscr(self_in, key_in, value_in);
   12918:	6a03      	ldr	r3, [r0, #32]
   1291a:	4632      	mov	r2, r6
   1291c:	4629      	mov	r1, r5
   1291e:	4620      	mov	r0, r4
   12920:	4798      	blx	r3
}
   12922:	bd70      	pop	{r4, r5, r6, pc}

00012924 <op_delitem>:
MP_DEFINE_CONST_FUN_OBJ_3(mp_op_setitem_obj, op_setitem);

STATIC mp_obj_t op_delitem(mp_obj_t self_in, mp_obj_t key_in) {
   12924:	b538      	push	{r3, r4, r5, lr}
   12926:	4604      	mov	r4, r0
   12928:	460d      	mov	r5, r1
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   1292a:	f7f8 f927 	bl	ab7c <mp_obj_get_type>
    return type->subscr(self_in, key_in, MP_OBJ_NULL);
   1292e:	6a03      	ldr	r3, [r0, #32]
   12930:	2200      	movs	r2, #0
   12932:	4629      	mov	r1, r5
   12934:	4620      	mov	r0, r4
   12936:	4798      	blx	r3
}
   12938:	bd38      	pop	{r3, r4, r5, pc}

0001293a <mp_seq_multiply>:

#define SWAP(type, var1, var2) { type t = var2; var2 = var1; var1 = t; }

// Implements backend of sequence * integer operation. Assumes elements are
// memory-adjacent in sequence.
void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest) {
   1293a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1293e:	4682      	mov	sl, r0
   12940:	4689      	mov	r9, r1
   12942:	4690      	mov	r8, r2
   12944:	461f      	mov	r7, r3
   12946:	9d08      	ldr	r5, [sp, #32]
    for (size_t i = 0; i < times; i++) {
   12948:	2400      	movs	r4, #0
   1294a:	e008      	b.n	1295e <mp_seq_multiply+0x24>
        size_t copy_sz = item_sz * len;
   1294c:	fb08 f609 	mul.w	r6, r8, r9
        memcpy(dest, items, copy_sz);
   12950:	4632      	mov	r2, r6
   12952:	4651      	mov	r1, sl
   12954:	4628      	mov	r0, r5
   12956:	f008 ff4d 	bl	1b7f4 <memcpy>
        dest = (char*)dest + copy_sz;
   1295a:	4435      	add	r5, r6
    for (size_t i = 0; i < times; i++) {
   1295c:	3401      	adds	r4, #1
   1295e:	42bc      	cmp	r4, r7
   12960:	d3f4      	bcc.n	1294c <mp_seq_multiply+0x12>
    }
}
   12962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00012966 <mp_seq_cmp_bytes>:
    return res;
}

// Special-case comparison function for sequences of bytes
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2) {
   12966:	b570      	push	{r4, r5, r6, lr}
   12968:	4604      	mov	r4, r0
   1296a:	4615      	mov	r5, r2
   1296c:	9e04      	ldr	r6, [sp, #16]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   1296e:	2802      	cmp	r0, #2
   12970:	d009      	beq.n	12986 <mp_seq_cmp_bytes+0x20>
        return false;
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   12972:	b164      	cbz	r4, 1298e <mp_seq_cmp_bytes+0x28>
   12974:	2c03      	cmp	r4, #3
   12976:	d00a      	beq.n	1298e <mp_seq_cmp_bytes+0x28>
   12978:	4632      	mov	r2, r6
   1297a:	462e      	mov	r6, r5
   1297c:	4615      	mov	r5, r2
   1297e:	461a      	mov	r2, r3
   12980:	460b      	mov	r3, r1
   12982:	4611      	mov	r1, r2
   12984:	e005      	b.n	12992 <mp_seq_cmp_bytes+0x2c>
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   12986:	42b2      	cmp	r2, r6
   12988:	d0f3      	beq.n	12972 <mp_seq_cmp_bytes+0xc>
        return false;
   1298a:	2000      	movs	r0, #0
   1298c:	e014      	b.n	129b8 <mp_seq_cmp_bytes+0x52>
        SWAP(const byte*, data1, data2);
        SWAP(size_t, len1, len2);
        if (op == MP_BINARY_OP_LESS) {
   1298e:	b974      	cbnz	r4, 129ae <mp_seq_cmp_bytes+0x48>
            op = MP_BINARY_OP_MORE;
   12990:	2401      	movs	r4, #1
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
        }
    }
    size_t min_len = len1 < len2 ? len1 : len2;
    int res = memcmp(data1, data2, min_len);
   12992:	4632      	mov	r2, r6
   12994:	42ae      	cmp	r6, r5
   12996:	bf28      	it	cs
   12998:	462a      	movcs	r2, r5
   1299a:	4618      	mov	r0, r3
   1299c:	f008 ffa0 	bl	1b8e0 <memcmp>
    if (op == MP_BINARY_OP_EQUAL) {
   129a0:	2c02      	cmp	r4, #2
   129a2:	d006      	beq.n	129b2 <mp_seq_cmp_bytes+0x4c>
        // If we are checking for equality, here're the answer
        return res == 0;
    }
    if (res < 0) {
   129a4:	2800      	cmp	r0, #0
   129a6:	db11      	blt.n	129cc <mp_seq_cmp_bytes+0x66>
        return false;
    }
    if (res > 0) {
   129a8:	dd07      	ble.n	129ba <mp_seq_cmp_bytes+0x54>
        return true;
   129aa:	2001      	movs	r0, #1
   129ac:	e004      	b.n	129b8 <mp_seq_cmp_bytes+0x52>
            op = MP_BINARY_OP_MORE_EQUAL;
   129ae:	2404      	movs	r4, #4
   129b0:	e7ef      	b.n	12992 <mp_seq_cmp_bytes+0x2c>
        return res == 0;
   129b2:	fab0 f080 	clz	r0, r0
   129b6:	0940      	lsrs	r0, r0, #5
    } else if (op == MP_BINARY_OP_MORE) {
        // Otherwise, if we have strict relation, equality means failure
        return false;
    }
    return true;
}
   129b8:	bd70      	pop	{r4, r5, r6, pc}
    if (len1 != len2) {
   129ba:	42ae      	cmp	r6, r5
   129bc:	d002      	beq.n	129c4 <mp_seq_cmp_bytes+0x5e>
        if (len1 < len2) {
   129be:	d307      	bcc.n	129d0 <mp_seq_cmp_bytes+0x6a>
    return true;
   129c0:	2001      	movs	r0, #1
   129c2:	e7f9      	b.n	129b8 <mp_seq_cmp_bytes+0x52>
    } else if (op == MP_BINARY_OP_MORE) {
   129c4:	2c01      	cmp	r4, #1
   129c6:	d005      	beq.n	129d4 <mp_seq_cmp_bytes+0x6e>
    return true;
   129c8:	2001      	movs	r0, #1
   129ca:	e7f5      	b.n	129b8 <mp_seq_cmp_bytes+0x52>
        return false;
   129cc:	2000      	movs	r0, #0
   129ce:	e7f3      	b.n	129b8 <mp_seq_cmp_bytes+0x52>
            return false;
   129d0:	2000      	movs	r0, #0
   129d2:	e7f1      	b.n	129b8 <mp_seq_cmp_bytes+0x52>
        return false;
   129d4:	2000      	movs	r0, #0
   129d6:	e7ef      	b.n	129b8 <mp_seq_cmp_bytes+0x52>

000129d8 <mp_seq_cmp_objs>:

// Special-case comparison function for sequences of mp_obj_t
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2) {
   129d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129dc:	4605      	mov	r5, r0
   129de:	460f      	mov	r7, r1
   129e0:	4691      	mov	r9, r2
   129e2:	4698      	mov	r8, r3
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   129e4:	2802      	cmp	r0, #2
   129e6:	d00a      	beq.n	129fe <mp_seq_cmp_objs+0x26>
        return false;
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   129e8:	b175      	cbz	r5, 12a08 <mp_seq_cmp_objs+0x30>
   129ea:	2d03      	cmp	r5, #3
   129ec:	d00c      	beq.n	12a08 <mp_seq_cmp_objs+0x30>
   129ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   129f0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   129f4:	4699      	mov	r9, r3
   129f6:	4643      	mov	r3, r8
   129f8:	46b8      	mov	r8, r7
   129fa:	461f      	mov	r7, r3
   129fc:	e006      	b.n	12a0c <mp_seq_cmp_objs+0x34>
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   129fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12a00:	429a      	cmp	r2, r3
   12a02:	d0f1      	beq.n	129e8 <mp_seq_cmp_objs+0x10>
        return false;
   12a04:	2300      	movs	r3, #0
   12a06:	e017      	b.n	12a38 <mp_seq_cmp_objs+0x60>
        SWAP(const mp_obj_t *, items1, items2);
        SWAP(size_t, len1, len2);
        if (op == MP_BINARY_OP_LESS) {
   12a08:	b9cd      	cbnz	r5, 12a3e <mp_seq_cmp_objs+0x66>
            op = MP_BINARY_OP_MORE;
   12a0a:	2501      	movs	r5, #1
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
        }
    }

    size_t len = len1 < len2 ? len1 : len2;
   12a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12a0e:	454b      	cmp	r3, r9
   12a10:	bf28      	it	cs
   12a12:	464b      	movcs	r3, r9
   12a14:	469a      	mov	sl, r3
    for (size_t i = 0; i < len; i++) {
   12a16:	2400      	movs	r4, #0
   12a18:	4554      	cmp	r4, sl
   12a1a:	d220      	bcs.n	12a5e <mp_seq_cmp_objs+0x86>
        // If current elements equal, can't decide anything - go on
        if (mp_obj_equal(items1[i], items2[i])) {
   12a1c:	00a6      	lsls	r6, r4, #2
   12a1e:	eb08 0b06 	add.w	fp, r8, r6
   12a22:	443e      	add	r6, r7
   12a24:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   12a28:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   12a2c:	f7f8 f95c 	bl	ace8 <mp_obj_equal>
   12a30:	4603      	mov	r3, r0
   12a32:	b930      	cbnz	r0, 12a42 <mp_seq_cmp_objs+0x6a>
            continue;
        }

        // Othewise, if they are not equal, we can have final decision based on them
        if (op == MP_BINARY_OP_EQUAL) {
   12a34:	2d02      	cmp	r5, #2
   12a36:	d106      	bne.n	12a46 <mp_seq_cmp_objs+0x6e>
        // Otherwise, if we have strict relation, sequence equality means failure
        return false;
    }

    return true;
}
   12a38:	4618      	mov	r0, r3
   12a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            op = MP_BINARY_OP_MORE_EQUAL;
   12a3e:	2504      	movs	r5, #4
   12a40:	e7e4      	b.n	12a0c <mp_seq_cmp_objs+0x34>
    for (size_t i = 0; i < len; i++) {
   12a42:	3401      	adds	r4, #1
   12a44:	e7e8      	b.n	12a18 <mp_seq_cmp_objs+0x40>
        return (mp_binary_op(op, items1[i], items2[i]) == mp_const_true);
   12a46:	6832      	ldr	r2, [r6, #0]
   12a48:	f8db 1000 	ldr.w	r1, [fp]
   12a4c:	b2e8      	uxtb	r0, r5
   12a4e:	f7f7 fc33 	bl	a2b8 <mp_binary_op>
   12a52:	4b0a      	ldr	r3, [pc, #40]	; (12a7c <mp_seq_cmp_objs+0xa4>)
   12a54:	4283      	cmp	r3, r0
   12a56:	bf14      	ite	ne
   12a58:	2300      	movne	r3, #0
   12a5a:	2301      	moveq	r3, #1
   12a5c:	e7ec      	b.n	12a38 <mp_seq_cmp_objs+0x60>
    if (len1 != len2) {
   12a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12a60:	454b      	cmp	r3, r9
   12a62:	d002      	beq.n	12a6a <mp_seq_cmp_objs+0x92>
        if (len1 < len2) {
   12a64:	d305      	bcc.n	12a72 <mp_seq_cmp_objs+0x9a>
    return true;
   12a66:	2301      	movs	r3, #1
   12a68:	e7e6      	b.n	12a38 <mp_seq_cmp_objs+0x60>
    } else if (op == MP_BINARY_OP_MORE) {
   12a6a:	2d01      	cmp	r5, #1
   12a6c:	d003      	beq.n	12a76 <mp_seq_cmp_objs+0x9e>
    return true;
   12a6e:	2301      	movs	r3, #1
   12a70:	e7e2      	b.n	12a38 <mp_seq_cmp_objs+0x60>
            return false;
   12a72:	2300      	movs	r3, #0
   12a74:	e7e0      	b.n	12a38 <mp_seq_cmp_objs+0x60>
        return false;
   12a76:	2300      	movs	r3, #0
   12a78:	e7de      	b.n	12a38 <mp_seq_cmp_objs+0x60>
   12a7a:	bf00      	nop
   12a7c:	00025f4c 	.word	0x00025f4c

00012a80 <mp_seq_index_obj>:

// Special-case of index() which searches for mp_obj_t
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args) {
   12a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12a84:	4607      	mov	r7, r0
   12a86:	460d      	mov	r5, r1
   12a88:	4691      	mov	r9, r2
   12a8a:	4698      	mov	r8, r3
    mp_obj_type_t *type = mp_obj_get_type(args[0]);
   12a8c:	6818      	ldr	r0, [r3, #0]
   12a8e:	f7f8 f875 	bl	ab7c <mp_obj_get_type>
    mp_obj_t value = args[1];
   12a92:	f8d8 6004 	ldr.w	r6, [r8, #4]
    size_t start = 0;
    size_t stop = len;

    if (n_args >= 3) {
   12a96:	f1b9 0f02 	cmp.w	r9, #2
   12a9a:	d80a      	bhi.n	12ab2 <mp_seq_index_obj+0x32>
    size_t start = 0;
   12a9c:	2400      	movs	r4, #0
        if (n_args >= 4) {
            stop = mp_get_index(type, len, args[3], true);
        }
    }

    for (size_t i = start; i < stop; i++) {
   12a9e:	42a5      	cmp	r5, r4
   12aa0:	d91b      	bls.n	12ada <mp_seq_index_obj+0x5a>
        if (mp_obj_equal(items[i], value)) {
   12aa2:	4631      	mov	r1, r6
   12aa4:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   12aa8:	f7f8 f91e 	bl	ace8 <mp_obj_equal>
   12aac:	b9c0      	cbnz	r0, 12ae0 <mp_seq_index_obj+0x60>
    for (size_t i = start; i < stop; i++) {
   12aae:	3401      	adds	r4, #1
   12ab0:	e7f5      	b.n	12a9e <mp_seq_index_obj+0x1e>
   12ab2:	4682      	mov	sl, r0
        start = mp_get_index(type, len, args[2], true);
   12ab4:	2301      	movs	r3, #1
   12ab6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   12aba:	4629      	mov	r1, r5
   12abc:	f7f8 fade 	bl	b07c <mp_get_index>
   12ac0:	4604      	mov	r4, r0
        if (n_args >= 4) {
   12ac2:	f1b9 0f03 	cmp.w	r9, #3
   12ac6:	d9ea      	bls.n	12a9e <mp_seq_index_obj+0x1e>
            stop = mp_get_index(type, len, args[3], true);
   12ac8:	2301      	movs	r3, #1
   12aca:	f8d8 200c 	ldr.w	r2, [r8, #12]
   12ace:	4629      	mov	r1, r5
   12ad0:	4650      	mov	r0, sl
   12ad2:	f7f8 fad3 	bl	b07c <mp_get_index>
   12ad6:	4605      	mov	r5, r0
   12ad8:	e7e1      	b.n	12a9e <mp_seq_index_obj+0x1e>
            // Common sense says this cannot overflow small int
            return MP_OBJ_NEW_SMALL_INT(i);
        }
    }

    mp_raise_ValueError("object not in sequence");
   12ada:	4804      	ldr	r0, [pc, #16]	; (12aec <mp_seq_index_obj+0x6c>)
   12adc:	f7f7 fbe4 	bl	a2a8 <mp_raise_ValueError>
            return MP_OBJ_NEW_SMALL_INT(i);
   12ae0:	0060      	lsls	r0, r4, #1
   12ae2:	f040 0001 	orr.w	r0, r0, #1
}
   12ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12aea:	bf00      	nop
   12aec:	00029064 	.word	0x00029064

00012af0 <mp_seq_count_obj>:

mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value) {
   12af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12af4:	4680      	mov	r8, r0
   12af6:	460e      	mov	r6, r1
   12af8:	4617      	mov	r7, r2
    size_t count = 0;
    for (size_t i = 0; i < len; i++) {
   12afa:	2400      	movs	r4, #0
    size_t count = 0;
   12afc:	4625      	mov	r5, r4
    for (size_t i = 0; i < len; i++) {
   12afe:	e000      	b.n	12b02 <mp_seq_count_obj+0x12>
   12b00:	3401      	adds	r4, #1
   12b02:	42b4      	cmp	r4, r6
   12b04:	d208      	bcs.n	12b18 <mp_seq_count_obj+0x28>
         if (mp_obj_equal(items[i], value)) {
   12b06:	4639      	mov	r1, r7
   12b08:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   12b0c:	f7f8 f8ec 	bl	ace8 <mp_obj_equal>
   12b10:	2800      	cmp	r0, #0
   12b12:	d0f5      	beq.n	12b00 <mp_seq_count_obj+0x10>
              count++;
   12b14:	3501      	adds	r5, #1
   12b16:	e7f3      	b.n	12b00 <mp_seq_count_obj+0x10>
         }
    }

    // Common sense says this cannot overflow small int
    return MP_OBJ_NEW_SMALL_INT(count);
   12b18:	0068      	lsls	r0, r5, #1
}
   12b1a:	f040 0001 	orr.w	r0, r0, #1
   12b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012b22 <mp_stream_rw>:
#define STREAM_CONTENT_TYPE(stream) (((stream)->is_text) ? &mp_type_str : &mp_type_bytes)

// Returns error condition in *errcode, if non-zero, return value is number of bytes written
// before error condition occurred. If *errcode == 0, returns total bytes written (which will
// be equal to input size).
mp_uint_t mp_stream_rw(mp_obj_t stream, void *buf_, mp_uint_t size, int *errcode, byte flags) {
   12b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b26:	4680      	mov	r8, r0
   12b28:	460d      	mov	r5, r1
   12b2a:	4614      	mov	r4, r2
   12b2c:	461f      	mov	r7, r3
   12b2e:	f89d 9020 	ldrb.w	r9, [sp, #32]
    byte *buf = buf_;
    mp_obj_base_t* s = (mp_obj_base_t*)MP_OBJ_TO_PTR(stream);
    typedef mp_uint_t (*io_func_t)(mp_obj_t obj, void *buf, mp_uint_t size, int *errcode);
    io_func_t io_func;
    const mp_stream_p_t *stream_p = s->type->protocol;
   12b32:	6803      	ldr	r3, [r0, #0]
   12b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if (flags & MP_STREAM_RW_WRITE) {
   12b36:	f019 0f02 	tst.w	r9, #2
   12b3a:	d014      	beq.n	12b66 <mp_stream_rw+0x44>
        io_func = (io_func_t)stream_p->write;
   12b3c:	f8d3 a004 	ldr.w	sl, [r3, #4]
    } else {
        io_func = stream_p->read;
    }

    *errcode = 0;
   12b40:	2600      	movs	r6, #0
   12b42:	603e      	str	r6, [r7, #0]
    mp_uint_t done = 0;
    while (size > 0) {
   12b44:	b1d4      	cbz	r4, 12b7c <mp_stream_rw+0x5a>
        mp_uint_t out_sz = io_func(stream, buf, size, errcode);
   12b46:	463b      	mov	r3, r7
   12b48:	4622      	mov	r2, r4
   12b4a:	4629      	mov	r1, r5
   12b4c:	4640      	mov	r0, r8
   12b4e:	47d0      	blx	sl
        // For read, out_sz == 0 means EOF. For write, it's unspecified
        // what it means, but we don't make any progress, so returning
        // is still the best option.
        if (out_sz == 0) {
   12b50:	b1a0      	cbz	r0, 12b7c <mp_stream_rw+0x5a>
            return done;
        }
        if (out_sz == MP_STREAM_ERROR) {
   12b52:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12b56:	d009      	beq.n	12b6c <mp_stream_rw+0x4a>
            if (mp_is_nonblocking_error(*errcode) && done != 0) {
                *errcode = 0;
            }
            return done;
        }
        if (flags & MP_STREAM_RW_ONCE) {
   12b58:	f019 0f01 	tst.w	r9, #1
   12b5c:	d10d      	bne.n	12b7a <mp_stream_rw+0x58>
            return out_sz;
        }

        buf += out_sz;
   12b5e:	4405      	add	r5, r0
        size -= out_sz;
   12b60:	1a24      	subs	r4, r4, r0
        done += out_sz;
   12b62:	4406      	add	r6, r0
   12b64:	e7ee      	b.n	12b44 <mp_stream_rw+0x22>
        io_func = stream_p->read;
   12b66:	f8d3 a000 	ldr.w	sl, [r3]
   12b6a:	e7e9      	b.n	12b40 <mp_stream_rw+0x1e>
            if (mp_is_nonblocking_error(*errcode) && done != 0) {
   12b6c:	683b      	ldr	r3, [r7, #0]
   12b6e:	2b0b      	cmp	r3, #11
   12b70:	d104      	bne.n	12b7c <mp_stream_rw+0x5a>
   12b72:	b11e      	cbz	r6, 12b7c <mp_stream_rw+0x5a>
                *errcode = 0;
   12b74:	2300      	movs	r3, #0
   12b76:	603b      	str	r3, [r7, #0]
   12b78:	e000      	b.n	12b7c <mp_stream_rw+0x5a>
            return out_sz;
   12b7a:	4606      	mov	r6, r0
    }
    return done;
}
   12b7c:	4630      	mov	r0, r6
   12b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00012b84 <mp_get_stream_raise>:

const mp_stream_p_t *mp_get_stream_raise(mp_obj_t self_in, int flags) {
   12b84:	b510      	push	{r4, lr}
   12b86:	460c      	mov	r4, r1
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   12b88:	f7f7 fff8 	bl	ab7c <mp_obj_get_type>
    const mp_stream_p_t *stream_p = type->protocol;
   12b8c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    if (stream_p == NULL
   12b8e:	b178      	cbz	r0, 12bb0 <mp_get_stream_raise+0x2c>
        || ((flags & MP_STREAM_OP_READ) && stream_p->read == NULL)
   12b90:	f014 0f01 	tst.w	r4, #1
   12b94:	d001      	beq.n	12b9a <mp_get_stream_raise+0x16>
   12b96:	6803      	ldr	r3, [r0, #0]
   12b98:	b153      	cbz	r3, 12bb0 <mp_get_stream_raise+0x2c>
        || ((flags & MP_STREAM_OP_WRITE) && stream_p->write == NULL)
   12b9a:	f014 0f02 	tst.w	r4, #2
   12b9e:	d001      	beq.n	12ba4 <mp_get_stream_raise+0x20>
   12ba0:	6843      	ldr	r3, [r0, #4]
   12ba2:	b12b      	cbz	r3, 12bb0 <mp_get_stream_raise+0x2c>
        || ((flags & MP_STREAM_OP_IOCTL) && stream_p->ioctl == NULL)) {
   12ba4:	f014 0f04 	tst.w	r4, #4
   12ba8:	d001      	beq.n	12bae <mp_get_stream_raise+0x2a>
   12baa:	6883      	ldr	r3, [r0, #8]
   12bac:	b103      	cbz	r3, 12bb0 <mp_get_stream_raise+0x2c>
        // CPython: io.UnsupportedOperation, OSError subclass
        mp_raise_msg(&mp_type_OSError, "stream operation not supported");
    }
    return stream_p;
}
   12bae:	bd10      	pop	{r4, pc}
        mp_raise_msg(&mp_type_OSError, "stream operation not supported");
   12bb0:	4901      	ldr	r1, [pc, #4]	; (12bb8 <mp_get_stream_raise+0x34>)
   12bb2:	4802      	ldr	r0, [pc, #8]	; (12bbc <mp_get_stream_raise+0x38>)
   12bb4:	f7f7 fb58 	bl	a268 <mp_raise_msg>
   12bb8:	0002907c 	.word	0x0002907c
   12bbc:	00026b1c 	.word	0x00026b1c

00012bc0 <stream_readall>:
        return MP_OBJ_NEW_SMALL_INT(out_sz);
    }
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_stream_readinto_obj, 2, 3, stream_readinto);

STATIC mp_obj_t stream_readall(mp_obj_t self_in) {
   12bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12bc4:	b087      	sub	sp, #28
   12bc6:	4681      	mov	r9, r0
    const mp_stream_p_t *stream_p = mp_get_stream_raise(self_in, MP_STREAM_OP_READ);
   12bc8:	2101      	movs	r1, #1
   12bca:	f7ff ffdb 	bl	12b84 <mp_get_stream_raise>
   12bce:	4680      	mov	r8, r0

    mp_uint_t total_size = 0;
    vstr_t vstr;
    vstr_init(&vstr, DEFAULT_BUFFER_SIZE);
   12bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
   12bd4:	a802      	add	r0, sp, #8
   12bd6:	f7ee fdf0 	bl	17ba <vstr_init>
    char *p = vstr.buf;
   12bda:	9d04      	ldr	r5, [sp, #16]
    mp_uint_t current_read = DEFAULT_BUFFER_SIZE;
   12bdc:	f44f 7480 	mov.w	r4, #256	; 0x100
    mp_uint_t total_size = 0;
   12be0:	2600      	movs	r6, #0
   12be2:	e01c      	b.n	12c1e <stream_readall+0x5e>
    while (true) {
        int error;
        mp_uint_t out_sz = stream_p->read(self_in, p, current_read, &error);
        if (out_sz == MP_STREAM_ERROR) {
            if (mp_is_nonblocking_error(error)) {
   12be4:	9801      	ldr	r0, [sp, #4]
   12be6:	280b      	cmp	r0, #11
   12be8:	d10f      	bne.n	12c0a <stream_readall+0x4a>
                // With non-blocking streams, we read as much as we can.
                // If we read nothing, return None, just like read().
                // Otherwise, return data read so far.
                if (total_size == 0) {
   12bea:	b166      	cbz	r6, 12c06 <stream_readall+0x46>
            p = vstr_extend(&vstr, DEFAULT_BUFFER_SIZE);
            current_read = DEFAULT_BUFFER_SIZE;
        }
    }

    vstr.len = total_size;
   12bec:	9603      	str	r6, [sp, #12]
    return mp_obj_new_str_from_vstr(STREAM_CONTENT_TYPE(stream_p), &vstr);
   12bee:	f898 300c 	ldrb.w	r3, [r8, #12]
   12bf2:	f013 0f01 	tst.w	r3, #1
   12bf6:	d024      	beq.n	12c42 <stream_readall+0x82>
   12bf8:	4813      	ldr	r0, [pc, #76]	; (12c48 <stream_readall+0x88>)
   12bfa:	a902      	add	r1, sp, #8
   12bfc:	f7fc fea2 	bl	f944 <mp_obj_new_str_from_vstr>
}
   12c00:	b007      	add	sp, #28
   12c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    return mp_const_none;
   12c06:	4811      	ldr	r0, [pc, #68]	; (12c4c <stream_readall+0x8c>)
   12c08:	e7fa      	b.n	12c00 <stream_readall+0x40>
            mp_raise_OSError(error);
   12c0a:	f7f7 fd55 	bl	a6b8 <mp_raise_OSError>
            p = vstr_extend(&vstr, DEFAULT_BUFFER_SIZE);
   12c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
   12c12:	a802      	add	r0, sp, #8
   12c14:	f7ee fe16 	bl	1844 <vstr_extend>
   12c18:	4605      	mov	r5, r0
            current_read = DEFAULT_BUFFER_SIZE;
   12c1a:	f44f 7480 	mov.w	r4, #256	; 0x100
        mp_uint_t out_sz = stream_p->read(self_in, p, current_read, &error);
   12c1e:	f8d8 7000 	ldr.w	r7, [r8]
   12c22:	ab01      	add	r3, sp, #4
   12c24:	4622      	mov	r2, r4
   12c26:	4629      	mov	r1, r5
   12c28:	4648      	mov	r0, r9
   12c2a:	47b8      	blx	r7
        if (out_sz == MP_STREAM_ERROR) {
   12c2c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12c30:	d0d8      	beq.n	12be4 <stream_readall+0x24>
        if (out_sz == 0) {
   12c32:	2800      	cmp	r0, #0
   12c34:	d0da      	beq.n	12bec <stream_readall+0x2c>
        total_size += out_sz;
   12c36:	4406      	add	r6, r0
        if (out_sz < current_read) {
   12c38:	4284      	cmp	r4, r0
   12c3a:	d9e8      	bls.n	12c0e <stream_readall+0x4e>
            current_read -= out_sz;
   12c3c:	1a24      	subs	r4, r4, r0
            p += out_sz;
   12c3e:	4405      	add	r5, r0
   12c40:	e7ed      	b.n	12c1e <stream_readall+0x5e>
    return mp_obj_new_str_from_vstr(STREAM_CONTENT_TYPE(stream_p), &vstr);
   12c42:	4803      	ldr	r0, [pc, #12]	; (12c50 <stream_readall+0x90>)
   12c44:	e7d9      	b.n	12bfa <stream_readall+0x3a>
   12c46:	bf00      	nop
   12c48:	00028104 	.word	0x00028104
   12c4c:	00027b40 	.word	0x00027b40
   12c50:	000280c8 	.word	0x000280c8

00012c54 <stream_read_generic>:
STATIC mp_obj_t stream_read_generic(size_t n_args, const mp_obj_t *args, byte flags) {
   12c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c56:	b089      	sub	sp, #36	; 0x24
   12c58:	4605      	mov	r5, r0
   12c5a:	460c      	mov	r4, r1
   12c5c:	4616      	mov	r6, r2
    const mp_stream_p_t *stream_p = mp_get_stream_raise(args[0], MP_STREAM_OP_READ);
   12c5e:	2101      	movs	r1, #1
   12c60:	6820      	ldr	r0, [r4, #0]
   12c62:	f7ff ff8f 	bl	12b84 <mp_get_stream_raise>
    if (n_args == 1 || ((sz = mp_obj_get_int(args[1])) == -1)) {
   12c66:	2d01      	cmp	r5, #1
   12c68:	d01e      	beq.n	12ca8 <stream_read_generic+0x54>
   12c6a:	4607      	mov	r7, r0
   12c6c:	6860      	ldr	r0, [r4, #4]
   12c6e:	f7f8 f8ad 	bl	adcc <mp_obj_get_int>
   12c72:	4605      	mov	r5, r0
   12c74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12c78:	d016      	beq.n	12ca8 <stream_read_generic+0x54>
    vstr_init_len(&vstr, sz);
   12c7a:	4601      	mov	r1, r0
   12c7c:	a804      	add	r0, sp, #16
   12c7e:	f7ee fdac 	bl	17da <vstr_init_len>
    mp_uint_t out_sz = mp_stream_rw(args[0], vstr.buf, sz, &error, flags);
   12c82:	6820      	ldr	r0, [r4, #0]
   12c84:	9600      	str	r6, [sp, #0]
   12c86:	ab03      	add	r3, sp, #12
   12c88:	462a      	mov	r2, r5
   12c8a:	9906      	ldr	r1, [sp, #24]
   12c8c:	f7ff ff49 	bl	12b22 <mp_stream_rw>
    if (error != 0) {
   12c90:	9b03      	ldr	r3, [sp, #12]
   12c92:	b973      	cbnz	r3, 12cb2 <stream_read_generic+0x5e>
        vstr.len = out_sz;
   12c94:	9005      	str	r0, [sp, #20]
        return mp_obj_new_str_from_vstr(STREAM_CONTENT_TYPE(stream_p), &vstr);
   12c96:	7b3b      	ldrb	r3, [r7, #12]
   12c98:	f013 0f01 	tst.w	r3, #1
   12c9c:	d013      	beq.n	12cc6 <stream_read_generic+0x72>
   12c9e:	480b      	ldr	r0, [pc, #44]	; (12ccc <stream_read_generic+0x78>)
   12ca0:	a904      	add	r1, sp, #16
   12ca2:	f7fc fe4f 	bl	f944 <mp_obj_new_str_from_vstr>
   12ca6:	e002      	b.n	12cae <stream_read_generic+0x5a>
        return stream_readall(args[0]);
   12ca8:	6820      	ldr	r0, [r4, #0]
   12caa:	f7ff ff89 	bl	12bc0 <stream_readall>
}
   12cae:	b009      	add	sp, #36	; 0x24
   12cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vstr_clear(&vstr);
   12cb2:	a804      	add	r0, sp, #16
   12cb4:	f7ee fdae 	bl	1814 <vstr_clear>
        if (mp_is_nonblocking_error(error)) {
   12cb8:	9803      	ldr	r0, [sp, #12]
   12cba:	280b      	cmp	r0, #11
   12cbc:	d101      	bne.n	12cc2 <stream_read_generic+0x6e>
            return mp_const_none;
   12cbe:	4804      	ldr	r0, [pc, #16]	; (12cd0 <stream_read_generic+0x7c>)
   12cc0:	e7f5      	b.n	12cae <stream_read_generic+0x5a>
        mp_raise_OSError(error);
   12cc2:	f7f7 fcf9 	bl	a6b8 <mp_raise_OSError>
        return mp_obj_new_str_from_vstr(STREAM_CONTENT_TYPE(stream_p), &vstr);
   12cc6:	4803      	ldr	r0, [pc, #12]	; (12cd4 <stream_read_generic+0x80>)
   12cc8:	e7ea      	b.n	12ca0 <stream_read_generic+0x4c>
   12cca:	bf00      	nop
   12ccc:	00028104 	.word	0x00028104
   12cd0:	00027b40 	.word	0x00027b40
   12cd4:	000280c8 	.word	0x000280c8

00012cd8 <stream_read>:
STATIC mp_obj_t stream_read(size_t n_args, const mp_obj_t *args) {
   12cd8:	b508      	push	{r3, lr}
    return stream_read_generic(n_args, args, MP_STREAM_RW_READ);
   12cda:	2200      	movs	r2, #0
   12cdc:	f7ff ffba 	bl	12c54 <stream_read_generic>
}
   12ce0:	bd08      	pop	{r3, pc}
	...

00012ce4 <stream_readinto>:
STATIC mp_obj_t stream_readinto(size_t n_args, const mp_obj_t *args) {
   12ce4:	b530      	push	{r4, r5, lr}
   12ce6:	b087      	sub	sp, #28
   12ce8:	4605      	mov	r5, r0
   12cea:	460c      	mov	r4, r1
    mp_get_stream_raise(args[0], MP_STREAM_OP_READ);
   12cec:	2101      	movs	r1, #1
   12cee:	6820      	ldr	r0, [r4, #0]
   12cf0:	f7ff ff48 	bl	12b84 <mp_get_stream_raise>
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_WRITE);
   12cf4:	2202      	movs	r2, #2
   12cf6:	a903      	add	r1, sp, #12
   12cf8:	6860      	ldr	r0, [r4, #4]
   12cfa:	f7f8 fad9 	bl	b2b0 <mp_get_buffer_raise>
    mp_uint_t len = bufinfo.len;
   12cfe:	9a04      	ldr	r2, [sp, #16]
    if (n_args > 2) {
   12d00:	2d02      	cmp	r5, #2
   12d02:	d80c      	bhi.n	12d1e <stream_readinto+0x3a>
    mp_uint_t out_sz = mp_stream_read_exactly(args[0], bufinfo.buf, len, &error);
   12d04:	6820      	ldr	r0, [r4, #0]
   12d06:	2300      	movs	r3, #0
   12d08:	9300      	str	r3, [sp, #0]
   12d0a:	ab02      	add	r3, sp, #8
   12d0c:	9903      	ldr	r1, [sp, #12]
   12d0e:	f7ff ff08 	bl	12b22 <mp_stream_rw>
    if (error != 0) {
   12d12:	9b02      	ldr	r3, [sp, #8]
   12d14:	b173      	cbz	r3, 12d34 <stream_readinto+0x50>
        if (mp_is_nonblocking_error(error)) {
   12d16:	2b0b      	cmp	r3, #11
   12d18:	d109      	bne.n	12d2e <stream_readinto+0x4a>
            return mp_const_none;
   12d1a:	4809      	ldr	r0, [pc, #36]	; (12d40 <stream_readinto+0x5c>)
   12d1c:	e00d      	b.n	12d3a <stream_readinto+0x56>
        len = mp_obj_get_int(args[2]);
   12d1e:	68a0      	ldr	r0, [r4, #8]
   12d20:	f7f8 f854 	bl	adcc <mp_obj_get_int>
        if (len > bufinfo.len) {
   12d24:	9a04      	ldr	r2, [sp, #16]
   12d26:	4282      	cmp	r2, r0
   12d28:	d3ec      	bcc.n	12d04 <stream_readinto+0x20>
        len = mp_obj_get_int(args[2]);
   12d2a:	4602      	mov	r2, r0
   12d2c:	e7ea      	b.n	12d04 <stream_readinto+0x20>
        mp_raise_OSError(error);
   12d2e:	4618      	mov	r0, r3
   12d30:	f7f7 fcc2 	bl	a6b8 <mp_raise_OSError>
        return MP_OBJ_NEW_SMALL_INT(out_sz);
   12d34:	0040      	lsls	r0, r0, #1
   12d36:	f040 0001 	orr.w	r0, r0, #1
}
   12d3a:	b007      	add	sp, #28
   12d3c:	bd30      	pop	{r4, r5, pc}
   12d3e:	bf00      	nop
   12d40:	00027b40 	.word	0x00027b40

00012d44 <stream_unbuffered_readline>:

// Unbuffered, inefficient implementation of readline() for raw I/O files.
STATIC mp_obj_t stream_unbuffered_readline(size_t n_args, const mp_obj_t *args) {
   12d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d48:	b086      	sub	sp, #24
   12d4a:	4604      	mov	r4, r0
   12d4c:	460f      	mov	r7, r1
    const mp_stream_p_t *stream_p = mp_get_stream_raise(args[0], MP_STREAM_OP_READ);
   12d4e:	2101      	movs	r1, #1
   12d50:	6838      	ldr	r0, [r7, #0]
   12d52:	f7ff ff17 	bl	12b84 <mp_get_stream_raise>
   12d56:	4680      	mov	r8, r0

    mp_int_t max_size = -1;
    if (n_args > 1) {
   12d58:	2c01      	cmp	r4, #1
   12d5a:	d90e      	bls.n	12d7a <stream_unbuffered_readline+0x36>
        max_size = MP_OBJ_SMALL_INT_VALUE(args[1]);
   12d5c:	687c      	ldr	r4, [r7, #4]
   12d5e:	1064      	asrs	r4, r4, #1
    }

    vstr_t vstr;
    if (max_size != -1) {
   12d60:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12d64:	d104      	bne.n	12d70 <stream_unbuffered_readline+0x2c>
        vstr_init(&vstr, max_size);
    } else {
        vstr_init(&vstr, 16);
   12d66:	2110      	movs	r1, #16
   12d68:	a802      	add	r0, sp, #8
   12d6a:	f7ee fd26 	bl	17ba <vstr_init>
   12d6e:	e01c      	b.n	12daa <stream_unbuffered_readline+0x66>
        vstr_init(&vstr, max_size);
   12d70:	4621      	mov	r1, r4
   12d72:	a802      	add	r0, sp, #8
   12d74:	f7ee fd21 	bl	17ba <vstr_init>
   12d78:	e017      	b.n	12daa <stream_unbuffered_readline+0x66>
    mp_int_t max_size = -1;
   12d7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12d7e:	e7f2      	b.n	12d66 <stream_unbuffered_readline+0x22>
   12d80:	4626      	mov	r6, r4
    }

    while (max_size == -1 || max_size-- != 0) {
        char *p = vstr_add_len(&vstr, 1);
   12d82:	2101      	movs	r1, #1
   12d84:	a802      	add	r0, sp, #8
   12d86:	f7ee fd75 	bl	1874 <vstr_add_len>
   12d8a:	4604      	mov	r4, r0
        int error;
        mp_uint_t out_sz = stream_p->read(args[0], p, 1, &error);
   12d8c:	f8d8 5000 	ldr.w	r5, [r8]
   12d90:	ab01      	add	r3, sp, #4
   12d92:	2201      	movs	r2, #1
   12d94:	4601      	mov	r1, r0
   12d96:	6838      	ldr	r0, [r7, #0]
   12d98:	47a8      	blx	r5
        if (out_sz == MP_STREAM_ERROR) {
   12d9a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12d9e:	d00b      	beq.n	12db8 <stream_unbuffered_readline+0x74>
                    goto done;
                }
            }
            mp_raise_OSError(error);
        }
        if (out_sz == 0) {
   12da0:	b180      	cbz	r0, 12dc4 <stream_unbuffered_readline+0x80>
            // Consider, what's better - read a char and get OutOfMemory (so read
            // char is lost), or allocate first as we do.
            vstr_cut_tail_bytes(&vstr, 1);
            break;
        }
        if (*p == '\n') {
   12da2:	7823      	ldrb	r3, [r4, #0]
   12da4:	2b0a      	cmp	r3, #10
   12da6:	d011      	beq.n	12dcc <stream_unbuffered_readline+0x88>
   12da8:	4634      	mov	r4, r6
    while (max_size == -1 || max_size-- != 0) {
   12daa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12dae:	d0e7      	beq.n	12d80 <stream_unbuffered_readline+0x3c>
   12db0:	1e66      	subs	r6, r4, #1
   12db2:	2c00      	cmp	r4, #0
   12db4:	d1e5      	bne.n	12d82 <stream_unbuffered_readline+0x3e>
   12db6:	e009      	b.n	12dcc <stream_unbuffered_readline+0x88>
            if (mp_is_nonblocking_error(error)) {
   12db8:	9801      	ldr	r0, [sp, #4]
   12dba:	280b      	cmp	r0, #11
   12dbc:	d117      	bne.n	12dee <stream_unbuffered_readline+0xaa>
                if (vstr.len == 1) {
   12dbe:	9b03      	ldr	r3, [sp, #12]
   12dc0:	2b01      	cmp	r3, #1
   12dc2:	d00f      	beq.n	12de4 <stream_unbuffered_readline+0xa0>
            vstr_cut_tail_bytes(&vstr, 1);
   12dc4:	2101      	movs	r1, #1
   12dc6:	a802      	add	r0, sp, #8
   12dc8:	f7ee fd95 	bl	18f6 <vstr_cut_tail_bytes>
            break;
        }
    }

    return mp_obj_new_str_from_vstr(STREAM_CONTENT_TYPE(stream_p), &vstr);
   12dcc:	f898 300c 	ldrb.w	r3, [r8, #12]
   12dd0:	f013 0f01 	tst.w	r3, #1
   12dd4:	d00d      	beq.n	12df2 <stream_unbuffered_readline+0xae>
   12dd6:	4808      	ldr	r0, [pc, #32]	; (12df8 <stream_unbuffered_readline+0xb4>)
   12dd8:	a902      	add	r1, sp, #8
   12dda:	f7fc fdb3 	bl	f944 <mp_obj_new_str_from_vstr>
}
   12dde:	b006      	add	sp, #24
   12de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    vstr_clear(&vstr);
   12de4:	a802      	add	r0, sp, #8
   12de6:	f7ee fd15 	bl	1814 <vstr_clear>
                    return mp_const_none;
   12dea:	4804      	ldr	r0, [pc, #16]	; (12dfc <stream_unbuffered_readline+0xb8>)
   12dec:	e7f7      	b.n	12dde <stream_unbuffered_readline+0x9a>
            mp_raise_OSError(error);
   12dee:	f7f7 fc63 	bl	a6b8 <mp_raise_OSError>
    return mp_obj_new_str_from_vstr(STREAM_CONTENT_TYPE(stream_p), &vstr);
   12df2:	4803      	ldr	r0, [pc, #12]	; (12e00 <stream_unbuffered_readline+0xbc>)
   12df4:	e7f0      	b.n	12dd8 <stream_unbuffered_readline+0x94>
   12df6:	bf00      	nop
   12df8:	00028104 	.word	0x00028104
   12dfc:	00027b40 	.word	0x00027b40
   12e00:	000280c8 	.word	0x000280c8

00012e04 <stream_unbuffered_readlines>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_stream_unbuffered_readline_obj, 1, 2, stream_unbuffered_readline);

// TODO take an optional extra argument (what does it do exactly?)
STATIC mp_obj_t stream_unbuffered_readlines(mp_obj_t self) {
   12e04:	b530      	push	{r4, r5, lr}
   12e06:	b083      	sub	sp, #12
   12e08:	9001      	str	r0, [sp, #4]
    mp_obj_t lines = mp_obj_new_list(0, NULL);
   12e0a:	2100      	movs	r1, #0
   12e0c:	4608      	mov	r0, r1
   12e0e:	f7fb fe33 	bl	ea78 <mp_obj_new_list>
   12e12:	4605      	mov	r5, r0
    for (;;) {
        mp_obj_t line = stream_unbuffered_readline(1, &self);
   12e14:	a901      	add	r1, sp, #4
   12e16:	2001      	movs	r0, #1
   12e18:	f7ff ff94 	bl	12d44 <stream_unbuffered_readline>
   12e1c:	4604      	mov	r4, r0
        if (!mp_obj_is_true(line)) {
   12e1e:	f7f8 f9ad 	bl	b17c <mp_obj_is_true>
   12e22:	b120      	cbz	r0, 12e2e <stream_unbuffered_readlines+0x2a>
            break;
        }
        mp_obj_list_append(lines, line);
   12e24:	4621      	mov	r1, r4
   12e26:	4628      	mov	r0, r5
   12e28:	f7fb faea 	bl	e400 <mp_obj_list_append>
    for (;;) {
   12e2c:	e7f2      	b.n	12e14 <stream_unbuffered_readlines+0x10>
    }
    return lines;
}
   12e2e:	4628      	mov	r0, r5
   12e30:	b003      	add	sp, #12
   12e32:	bd30      	pop	{r4, r5, pc}

00012e34 <mp_stream_close>:
        return l_in;
    }
    return MP_OBJ_STOP_ITERATION;
}

mp_obj_t mp_stream_close(mp_obj_t stream) {
   12e34:	b530      	push	{r4, r5, lr}
   12e36:	b083      	sub	sp, #12
   12e38:	4605      	mov	r5, r0
    const mp_stream_p_t *stream_p = mp_get_stream_raise(stream, MP_STREAM_OP_IOCTL);
   12e3a:	2104      	movs	r1, #4
   12e3c:	f7ff fea2 	bl	12b84 <mp_get_stream_raise>
    int error;
    mp_uint_t res = stream_p->ioctl(stream, MP_STREAM_CLOSE, 0, &error);
   12e40:	6884      	ldr	r4, [r0, #8]
   12e42:	ab01      	add	r3, sp, #4
   12e44:	2200      	movs	r2, #0
   12e46:	2104      	movs	r1, #4
   12e48:	4628      	mov	r0, r5
   12e4a:	47a0      	blx	r4
    if (res == MP_STREAM_ERROR) {
   12e4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12e50:	d002      	beq.n	12e58 <mp_stream_close+0x24>
        mp_raise_OSError(error);
    }
    return mp_const_none;
}
   12e52:	4803      	ldr	r0, [pc, #12]	; (12e60 <mp_stream_close+0x2c>)
   12e54:	b003      	add	sp, #12
   12e56:	bd30      	pop	{r4, r5, pc}
        mp_raise_OSError(error);
   12e58:	9801      	ldr	r0, [sp, #4]
   12e5a:	f7f7 fc2d 	bl	a6b8 <mp_raise_OSError>
   12e5e:	bf00      	nop
   12e60:	00027b40 	.word	0x00027b40

00012e64 <stream_seek>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_stream_close_obj, mp_stream_close);

STATIC mp_obj_t stream_seek(size_t n_args, const mp_obj_t *args) {
   12e64:	b570      	push	{r4, r5, r6, lr}
   12e66:	b084      	sub	sp, #16
   12e68:	4605      	mov	r5, r0
   12e6a:	460c      	mov	r4, r1
    const mp_stream_p_t *stream_p = mp_get_stream_raise(args[0], MP_STREAM_OP_IOCTL);
   12e6c:	2104      	movs	r1, #4
   12e6e:	6820      	ldr	r0, [r4, #0]
   12e70:	f7ff fe88 	bl	12b84 <mp_get_stream_raise>
   12e74:	4606      	mov	r6, r0

    struct mp_stream_seek_t seek_s;
    // TODO: Could be uint64
    seek_s.offset = mp_obj_get_int(args[1]);
   12e76:	6860      	ldr	r0, [r4, #4]
   12e78:	f7f7 ffa8 	bl	adcc <mp_obj_get_int>
   12e7c:	9002      	str	r0, [sp, #8]
    seek_s.whence = SEEK_SET;
   12e7e:	2300      	movs	r3, #0
   12e80:	9303      	str	r3, [sp, #12]
    if (n_args == 3) {
   12e82:	2d03      	cmp	r5, #3
   12e84:	d00f      	beq.n	12ea6 <stream_seek+0x42>
        seek_s.whence = mp_obj_get_int(args[2]);
    }

    // In POSIX, it's error to seek before end of stream, we enforce it here.
    if (seek_s.whence == SEEK_SET && seek_s.offset < 0) {
   12e86:	9b03      	ldr	r3, [sp, #12]
   12e88:	b193      	cbz	r3, 12eb0 <stream_seek+0x4c>
        mp_raise_OSError(MP_EINVAL);
    }

    int error;
    mp_uint_t res = stream_p->ioctl(args[0], MP_STREAM_SEEK, (mp_uint_t)(uintptr_t)&seek_s, &error);
   12e8a:	68b5      	ldr	r5, [r6, #8]
   12e8c:	ab01      	add	r3, sp, #4
   12e8e:	aa02      	add	r2, sp, #8
   12e90:	2102      	movs	r1, #2
   12e92:	6820      	ldr	r0, [r4, #0]
   12e94:	47a8      	blx	r5
    if (res == MP_STREAM_ERROR) {
   12e96:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12e9a:	d00f      	beq.n	12ebc <stream_seek+0x58>
        mp_raise_OSError(error);
    }

    // TODO: Could be uint64
    return mp_obj_new_int_from_uint(seek_s.offset);
   12e9c:	9802      	ldr	r0, [sp, #8]
   12e9e:	f7fb f869 	bl	df74 <mp_obj_new_int_from_uint>
}
   12ea2:	b004      	add	sp, #16
   12ea4:	bd70      	pop	{r4, r5, r6, pc}
        seek_s.whence = mp_obj_get_int(args[2]);
   12ea6:	68a0      	ldr	r0, [r4, #8]
   12ea8:	f7f7 ff90 	bl	adcc <mp_obj_get_int>
   12eac:	9003      	str	r0, [sp, #12]
   12eae:	e7ea      	b.n	12e86 <stream_seek+0x22>
    if (seek_s.whence == SEEK_SET && seek_s.offset < 0) {
   12eb0:	9b02      	ldr	r3, [sp, #8]
   12eb2:	2b00      	cmp	r3, #0
   12eb4:	dae9      	bge.n	12e8a <stream_seek+0x26>
        mp_raise_OSError(MP_EINVAL);
   12eb6:	2016      	movs	r0, #22
   12eb8:	f7f7 fbfe 	bl	a6b8 <mp_raise_OSError>
        mp_raise_OSError(error);
   12ebc:	9801      	ldr	r0, [sp, #4]
   12ebe:	f7f7 fbfb 	bl	a6b8 <mp_raise_OSError>

00012ec2 <stream_tell>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_stream_seek_obj, 2, 3, stream_seek);

STATIC mp_obj_t stream_tell(mp_obj_t self) {
   12ec2:	b500      	push	{lr}
   12ec4:	b085      	sub	sp, #20
    mp_obj_t offset = MP_OBJ_NEW_SMALL_INT(0);
    mp_obj_t whence = MP_OBJ_NEW_SMALL_INT(SEEK_CUR);
    const mp_obj_t args[3] = {self, offset, whence};
   12ec6:	9001      	str	r0, [sp, #4]
   12ec8:	2301      	movs	r3, #1
   12eca:	9302      	str	r3, [sp, #8]
   12ecc:	2003      	movs	r0, #3
   12ece:	9003      	str	r0, [sp, #12]
    return stream_seek(3, args);
   12ed0:	a901      	add	r1, sp, #4
   12ed2:	f7ff ffc7 	bl	12e64 <stream_seek>
}
   12ed6:	b005      	add	sp, #20
   12ed8:	f85d fb04 	ldr.w	pc, [sp], #4

00012edc <stream_flush>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_stream_tell_obj, stream_tell);

STATIC mp_obj_t stream_flush(mp_obj_t self) {
   12edc:	b530      	push	{r4, r5, lr}
   12ede:	b083      	sub	sp, #12
   12ee0:	4605      	mov	r5, r0
    const mp_stream_p_t *stream_p = mp_get_stream_raise(self, MP_STREAM_OP_IOCTL);
   12ee2:	2104      	movs	r1, #4
   12ee4:	f7ff fe4e 	bl	12b84 <mp_get_stream_raise>
    int error;
    mp_uint_t res = stream_p->ioctl(self, MP_STREAM_FLUSH, 0, &error);
   12ee8:	6884      	ldr	r4, [r0, #8]
   12eea:	ab01      	add	r3, sp, #4
   12eec:	2200      	movs	r2, #0
   12eee:	2101      	movs	r1, #1
   12ef0:	4628      	mov	r0, r5
   12ef2:	47a0      	blx	r4
    if (res == MP_STREAM_ERROR) {
   12ef4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12ef8:	d002      	beq.n	12f00 <stream_flush+0x24>
        mp_raise_OSError(error);
    }
    return mp_const_none;
}
   12efa:	4803      	ldr	r0, [pc, #12]	; (12f08 <stream_flush+0x2c>)
   12efc:	b003      	add	sp, #12
   12efe:	bd30      	pop	{r4, r5, pc}
        mp_raise_OSError(error);
   12f00:	9801      	ldr	r0, [sp, #4]
   12f02:	f7f7 fbd9 	bl	a6b8 <mp_raise_OSError>
   12f06:	bf00      	nop
   12f08:	00027b40 	.word	0x00027b40

00012f0c <mp_stream_write>:
mp_obj_t mp_stream_write(mp_obj_t self_in, const void *buf, size_t len, byte flags) {
   12f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f0e:	b085      	sub	sp, #20
   12f10:	4604      	mov	r4, r0
   12f12:	460d      	mov	r5, r1
   12f14:	4616      	mov	r6, r2
   12f16:	461f      	mov	r7, r3
    mp_get_stream_raise(self_in, MP_STREAM_OP_WRITE);
   12f18:	2102      	movs	r1, #2
   12f1a:	f7ff fe33 	bl	12b84 <mp_get_stream_raise>
    mp_uint_t out_sz = mp_stream_rw(self_in, (void*)buf, len, &error, flags);
   12f1e:	9700      	str	r7, [sp, #0]
   12f20:	ab03      	add	r3, sp, #12
   12f22:	4632      	mov	r2, r6
   12f24:	4629      	mov	r1, r5
   12f26:	4620      	mov	r0, r4
   12f28:	f7ff fdfb 	bl	12b22 <mp_stream_rw>
    if (error != 0) {
   12f2c:	9b03      	ldr	r3, [sp, #12]
   12f2e:	b133      	cbz	r3, 12f3e <mp_stream_write+0x32>
        if (mp_is_nonblocking_error(error)) {
   12f30:	2b0b      	cmp	r3, #11
   12f32:	d101      	bne.n	12f38 <mp_stream_write+0x2c>
            return mp_const_none;
   12f34:	4804      	ldr	r0, [pc, #16]	; (12f48 <mp_stream_write+0x3c>)
   12f36:	e005      	b.n	12f44 <mp_stream_write+0x38>
        mp_raise_OSError(error);
   12f38:	4618      	mov	r0, r3
   12f3a:	f7f7 fbbd 	bl	a6b8 <mp_raise_OSError>
        return MP_OBJ_NEW_SMALL_INT(out_sz);
   12f3e:	0040      	lsls	r0, r0, #1
   12f40:	f040 0001 	orr.w	r0, r0, #1
}
   12f44:	b005      	add	sp, #20
   12f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f48:	00027b40 	.word	0x00027b40

00012f4c <stream_write_method>:
STATIC mp_obj_t stream_write_method(size_t n_args, const mp_obj_t *args) {
   12f4c:	b530      	push	{r4, r5, lr}
   12f4e:	b085      	sub	sp, #20
   12f50:	4605      	mov	r5, r0
   12f52:	460c      	mov	r4, r1
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   12f54:	2201      	movs	r2, #1
   12f56:	a901      	add	r1, sp, #4
   12f58:	6860      	ldr	r0, [r4, #4]
   12f5a:	f7f8 f9a9 	bl	b2b0 <mp_get_buffer_raise>
    if (n_args == 3) {
   12f5e:	2d03      	cmp	r5, #3
   12f60:	d012      	beq.n	12f88 <stream_write_method+0x3c>
    } else if (n_args == 4) {
   12f62:	2d04      	cmp	r5, #4
   12f64:	d015      	beq.n	12f92 <stream_write_method+0x46>
    size_t off = 0;
   12f66:	2100      	movs	r1, #0
    size_t max_len = (size_t)-1;
   12f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bufinfo.len -= off;
   12f6c:	9b02      	ldr	r3, [sp, #8]
   12f6e:	1a5a      	subs	r2, r3, r1
   12f70:	9202      	str	r2, [sp, #8]
    return mp_stream_write(args[0], (byte*)bufinfo.buf + off, MIN(bufinfo.len, max_len), MP_STREAM_RW_WRITE);
   12f72:	2302      	movs	r3, #2
   12f74:	4282      	cmp	r2, r0
   12f76:	bf28      	it	cs
   12f78:	4602      	movcs	r2, r0
   12f7a:	9801      	ldr	r0, [sp, #4]
   12f7c:	4401      	add	r1, r0
   12f7e:	6820      	ldr	r0, [r4, #0]
   12f80:	f7ff ffc4 	bl	12f0c <mp_stream_write>
}
   12f84:	b005      	add	sp, #20
   12f86:	bd30      	pop	{r4, r5, pc}
        max_len = mp_obj_get_int_truncated(args[2]);
   12f88:	68a0      	ldr	r0, [r4, #8]
   12f8a:	f7f7 ff4d 	bl	ae28 <mp_obj_get_int_truncated>
    size_t off = 0;
   12f8e:	2100      	movs	r1, #0
   12f90:	e7ec      	b.n	12f6c <stream_write_method+0x20>
        off = mp_obj_get_int_truncated(args[2]);
   12f92:	68a0      	ldr	r0, [r4, #8]
   12f94:	f7f7 ff48 	bl	ae28 <mp_obj_get_int_truncated>
   12f98:	4605      	mov	r5, r0
        max_len = mp_obj_get_int_truncated(args[3]);
   12f9a:	68e0      	ldr	r0, [r4, #12]
   12f9c:	f7f7 ff44 	bl	ae28 <mp_obj_get_int_truncated>
        if (off > bufinfo.len) {
   12fa0:	9902      	ldr	r1, [sp, #8]
   12fa2:	42a9      	cmp	r1, r5
   12fa4:	d3e2      	bcc.n	12f6c <stream_write_method+0x20>
        off = mp_obj_get_int_truncated(args[2]);
   12fa6:	4629      	mov	r1, r5
   12fa8:	e7e0      	b.n	12f6c <stream_write_method+0x20>

00012faa <mp_stream_unbuffered_iter>:
mp_obj_t mp_stream_unbuffered_iter(mp_obj_t self) {
   12faa:	b510      	push	{r4, lr}
   12fac:	b082      	sub	sp, #8
   12fae:	a902      	add	r1, sp, #8
   12fb0:	f841 0d04 	str.w	r0, [r1, #-4]!
    mp_obj_t l_in = stream_unbuffered_readline(1, &self);
   12fb4:	2001      	movs	r0, #1
   12fb6:	f7ff fec5 	bl	12d44 <stream_unbuffered_readline>
   12fba:	4604      	mov	r4, r0
    if (mp_obj_is_true(l_in)) {
   12fbc:	f7f8 f8de 	bl	b17c <mp_obj_is_true>
   12fc0:	b900      	cbnz	r0, 12fc4 <mp_stream_unbuffered_iter+0x1a>
    return MP_OBJ_STOP_ITERATION;
   12fc2:	2404      	movs	r4, #4
}
   12fc4:	4620      	mov	r0, r4
   12fc6:	b002      	add	sp, #8
   12fc8:	bd10      	pop	{r4, pc}
	...

00012fcc <mp_binary_get_size>:

#ifndef alignof
#define alignof(type) offsetof(struct { char c; type t; }, t)
#endif

size_t mp_binary_get_size(char struct_type, char val_type, mp_uint_t *palign) {
   12fcc:	b508      	push	{r3, lr}
    size_t size = 0;
    int align = 1;
    switch (struct_type) {
   12fce:	283e      	cmp	r0, #62	; 0x3e
   12fd0:	d044      	beq.n	1305c <mp_binary_get_size+0x90>
   12fd2:	2840      	cmp	r0, #64	; 0x40
   12fd4:	d13d      	bne.n	13052 <mp_binary_get_size+0x86>
            // size, but that doesn't work for "bigger than int" types,
            // for example, long long may very well have long alignment
            // So, we introduce separate alignment handling, but having
            // formal support for that is different from actually supporting
            // particular (or any) ABI.
            switch (val_type) {
   12fd6:	3901      	subs	r1, #1
   12fd8:	2970      	cmp	r1, #112	; 0x70
   12fda:	d83c      	bhi.n	13056 <mp_binary_get_size+0x8a>
   12fdc:	e8df f001 	tbb	[pc, r1]
   12fe0:	3b3b3bb0 	.word	0x3b3b3bb0
   12fe4:	3b3b3b3b 	.word	0x3b3b3b3b
   12fe8:	3b3b3b3b 	.word	0x3b3b3b3b
   12fec:	3b3b3b3b 	.word	0x3b3b3b3b
   12ff0:	3b3b3b3b 	.word	0x3b3b3b3b
   12ff4:	3b3b3b3b 	.word	0x3b3b3b3b
   12ff8:	3b3b3b3b 	.word	0x3b3b3b3b
   12ffc:	3b3b3b3b 	.word	0x3b3b3b3b
   13000:	3b3b3b3b 	.word	0x3b3b3b3b
   13004:	3b3b3b3b 	.word	0x3b3b3b3b
   13008:	3b3b3b3b 	.word	0x3b3b3b3b
   1300c:	3b3b3b3b 	.word	0x3b3b3b3b
   13010:	3b3b3b3b 	.word	0x3b3b3b3b
   13014:	3b3b3b3b 	.word	0x3b3b3b3b
   13018:	3b3b3b3b 	.word	0x3b3b3b3b
   1301c:	3b3b3b3b 	.word	0x3b3b3b3b
   13020:	3b3bb03b 	.word	0x3b3bb03b
   13024:	ad3b3b3b 	.word	0xad3b3b3b
   13028:	bc3b3bbc 	.word	0xbc3b3bbc
   1302c:	bcbc3b3b 	.word	0xbcbc3b3b
   13030:	3bbc3baa 	.word	0x3bbc3baa
   13034:	3b3b3b3b 	.word	0x3b3b3b3b
   13038:	3b3b3b3b 	.word	0x3b3b3b3b
   1303c:	3b3b3b3b 	.word	0x3b3b3b3b
   13040:	aa3bb03b 	.word	0xaa3bb03b
   13044:	ad3bbc3b 	.word	0xad3bbc3b
   13048:	bc3b3bbc 	.word	0xbc3b3bbc
   1304c:	3b3b3b3b 	.word	0x3b3b3b3b
   13050:	aa          	.byte	0xaa
   13051:	00          	.byte	0x00
    switch (struct_type) {
   13052:	283c      	cmp	r0, #60	; 0x3c
   13054:	d002      	beq.n	1305c <mp_binary_get_size+0x90>
            }
        }
    }

    if (size == 0) {
        mp_raise_ValueError("bad typecode");
   13056:	4843      	ldr	r0, [pc, #268]	; (13164 <mp_binary_get_size+0x198>)
   13058:	f7f7 f926 	bl	a2a8 <mp_raise_ValueError>
            switch (val_type) {
   1305c:	3942      	subs	r1, #66	; 0x42
   1305e:	292f      	cmp	r1, #47	; 0x2f
   13060:	d8f9      	bhi.n	13056 <mp_binary_get_size+0x8a>
   13062:	a301      	add	r3, pc, #4	; (adr r3, 13068 <mp_binary_get_size+0x9c>)
   13064:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   13068:	00013147 	.word	0x00013147
   1306c:	00013057 	.word	0x00013057
   13070:	00013057 	.word	0x00013057
   13074:	00013057 	.word	0x00013057
   13078:	00013057 	.word	0x00013057
   1307c:	00013057 	.word	0x00013057
   13080:	0001314d 	.word	0x0001314d
   13084:	00013153 	.word	0x00013153
   13088:	00013057 	.word	0x00013057
   1308c:	00013057 	.word	0x00013057
   13090:	00013153 	.word	0x00013153
   13094:	00013057 	.word	0x00013057
   13098:	00013057 	.word	0x00013057
   1309c:	00013153 	.word	0x00013153
   130a0:	00013153 	.word	0x00013153
   130a4:	00013129 	.word	0x00013129
   130a8:	00013057 	.word	0x00013057
   130ac:	00013153 	.word	0x00013153
   130b0:	00013057 	.word	0x00013057
   130b4:	00013057 	.word	0x00013057
   130b8:	00013057 	.word	0x00013057
   130bc:	00013057 	.word	0x00013057
   130c0:	00013057 	.word	0x00013057
   130c4:	00013057 	.word	0x00013057
   130c8:	00013057 	.word	0x00013057
   130cc:	00013057 	.word	0x00013057
   130d0:	00013057 	.word	0x00013057
   130d4:	00013057 	.word	0x00013057
   130d8:	00013057 	.word	0x00013057
   130dc:	00013057 	.word	0x00013057
   130e0:	00013057 	.word	0x00013057
   130e4:	00013057 	.word	0x00013057
   130e8:	00013147 	.word	0x00013147
   130ec:	00013057 	.word	0x00013057
   130f0:	0001312f 	.word	0x0001312f
   130f4:	00013057 	.word	0x00013057
   130f8:	00013153 	.word	0x00013153
   130fc:	00013057 	.word	0x00013057
   13100:	0001314d 	.word	0x0001314d
   13104:	00013153 	.word	0x00013153
   13108:	00013057 	.word	0x00013057
   1310c:	00013057 	.word	0x00013057
   13110:	00013153 	.word	0x00013153
   13114:	00013057 	.word	0x00013057
   13118:	00013057 	.word	0x00013057
   1311c:	00013057 	.word	0x00013057
   13120:	00013057 	.word	0x00013057
   13124:	00013129 	.word	0x00013129
    int align = 1;
   13128:	2301      	movs	r3, #1
                    size = 8; break;
   1312a:	2008      	movs	r0, #8
   1312c:	e016      	b.n	1315c <mp_binary_get_size+0x190>
    int align = 1;
   1312e:	2301      	movs	r3, #1
                    size = sizeof(double); break;
   13130:	2008      	movs	r0, #8
   13132:	e013      	b.n	1315c <mp_binary_get_size+0x190>
                    align = alignof(double);
   13134:	2308      	movs	r3, #8
                    size = sizeof(double); break;
   13136:	4618      	mov	r0, r3
   13138:	e010      	b.n	1315c <mp_binary_get_size+0x190>
                    align = alignof(short);
   1313a:	2302      	movs	r3, #2
                    size = sizeof(short); break;
   1313c:	4618      	mov	r0, r3
   1313e:	e00d      	b.n	1315c <mp_binary_get_size+0x190>
                    align = size = 1; break;
   13140:	2301      	movs	r3, #1
   13142:	4618      	mov	r0, r3
   13144:	e00a      	b.n	1315c <mp_binary_get_size+0x190>
    int align = 1;
   13146:	2301      	movs	r3, #1
                    size = 1; break;
   13148:	4618      	mov	r0, r3
   1314a:	e007      	b.n	1315c <mp_binary_get_size+0x190>
    int align = 1;
   1314c:	2301      	movs	r3, #1
                    size = 2; break;
   1314e:	2002      	movs	r0, #2
   13150:	e004      	b.n	1315c <mp_binary_get_size+0x190>
    int align = 1;
   13152:	2301      	movs	r3, #1
                    size = 4; break;
   13154:	2004      	movs	r0, #4
   13156:	e001      	b.n	1315c <mp_binary_get_size+0x190>
                    align = alignof(float);
   13158:	2304      	movs	r3, #4
                    size = sizeof(float); break;
   1315a:	4618      	mov	r0, r3
    }

    if (palign != NULL) {
   1315c:	b102      	cbz	r2, 13160 <mp_binary_get_size+0x194>
        *palign = align;
   1315e:	6013      	str	r3, [r2, #0]
    }
    return size;
}
   13160:	bd08      	pop	{r3, pc}
   13162:	bf00      	nop
   13164:	000290f8 	.word	0x000290f8

00013168 <mp_binary_get_val_array>:

mp_obj_t mp_binary_get_val_array(char typecode, void *p, mp_uint_t index) {
   13168:	b508      	push	{r3, lr}
    mp_int_t val = 0;
    switch (typecode) {
   1316a:	3801      	subs	r0, #1
   1316c:	2870      	cmp	r0, #112	; 0x70
   1316e:	f200 8084 	bhi.w	1327a <mp_binary_get_val_array+0x112>
   13172:	e8df f000 	tbb	[pc, r0]
   13176:	823e      	.short	0x823e
   13178:	82828282 	.word	0x82828282
   1317c:	82828282 	.word	0x82828282
   13180:	82828282 	.word	0x82828282
   13184:	82828282 	.word	0x82828282
   13188:	82828282 	.word	0x82828282
   1318c:	82828282 	.word	0x82828282
   13190:	82828282 	.word	0x82828282
   13194:	82828282 	.word	0x82828282
   13198:	82828282 	.word	0x82828282
   1319c:	82828282 	.word	0x82828282
   131a0:	82828282 	.word	0x82828282
   131a4:	82828282 	.word	0x82828282
   131a8:	82828282 	.word	0x82828282
   131ac:	82828282 	.word	0x82828282
   131b0:	82828282 	.word	0x82828282
   131b4:	3e828282 	.word	0x3e828282
   131b8:	82828282 	.word	0x82828282
   131bc:	824b4382 	.word	0x824b4382
   131c0:	82825582 	.word	0x82825582
   131c4:	82617d7a 	.word	0x82617d7a
   131c8:	82828282 	.word	0x82828282
   131cc:	82828282 	.word	0x82828282
   131d0:	82828282 	.word	0x82828282
   131d4:	39828282 	.word	0x39828282
   131d8:	68826f82 	.word	0x68826f82
   131dc:	82464082 	.word	0x82464082
   131e0:	82825082 	.word	0x82825082
   131e4:	8282      	.short	0x8282
   131e6:	5a          	.byte	0x5a
   131e7:	00          	.byte	0x00
        case 'b':
            val = ((signed char*)p)[index];
   131e8:	5688      	ldrsb	r0, [r1, r2]
            return ((mp_obj_t*)p)[index];
        // Extension to CPython: array of pointers
        case 'P':
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
    }
    return MP_OBJ_NEW_SMALL_INT(val);
   131ea:	0040      	lsls	r0, r0, #1
   131ec:	f040 0001 	orr.w	r0, r0, #1
}
   131f0:	bd08      	pop	{r3, pc}
            val = ((unsigned char*)p)[index];
   131f2:	5c88      	ldrb	r0, [r1, r2]
            break;
   131f4:	e7f9      	b.n	131ea <mp_binary_get_val_array+0x82>
            val = ((short*)p)[index];
   131f6:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
            break;
   131fa:	e7f6      	b.n	131ea <mp_binary_get_val_array+0x82>
            val = ((unsigned short*)p)[index];
   131fc:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
            break;
   13200:	e7f3      	b.n	131ea <mp_binary_get_val_array+0x82>
            return mp_obj_new_int(((int*)p)[index]);
   13202:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   13206:	f7fa fe98 	bl	df3a <mp_obj_new_int>
   1320a:	e7f1      	b.n	131f0 <mp_binary_get_val_array+0x88>
            return mp_obj_new_int_from_uint(((unsigned int*)p)[index]);
   1320c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   13210:	f7fa feb0 	bl	df74 <mp_obj_new_int_from_uint>
   13214:	e7ec      	b.n	131f0 <mp_binary_get_val_array+0x88>
            return mp_obj_new_int(((long*)p)[index]);
   13216:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   1321a:	f7fa fe8e 	bl	df3a <mp_obj_new_int>
   1321e:	e7e7      	b.n	131f0 <mp_binary_get_val_array+0x88>
            return mp_obj_new_int_from_uint(((unsigned long*)p)[index]);
   13220:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   13224:	f7fa fea6 	bl	df74 <mp_obj_new_int_from_uint>
   13228:	e7e2      	b.n	131f0 <mp_binary_get_val_array+0x88>
            return mp_obj_new_int_from_ll(((long long*)p)[index]);
   1322a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   1322e:	e9d1 0100 	ldrd	r0, r1, [r1]
   13232:	f7fa fe71 	bl	df18 <mp_obj_new_int_from_ll>
   13236:	e7db      	b.n	131f0 <mp_binary_get_val_array+0x88>
            return mp_obj_new_int_from_ull(((unsigned long long*)p)[index]);
   13238:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   1323c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13240:	f7fa fe87 	bl	df52 <mp_obj_new_int_from_ull>
   13244:	e7d4      	b.n	131f0 <mp_binary_get_val_array+0x88>
            return mp_obj_new_float(((float*)p)[index]);
   13246:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1324a:	ed91 0a00 	vldr	s0, [r1]
   1324e:	f7f9 fdd5 	bl	cdfc <mp_obj_new_float>
   13252:	e7cd      	b.n	131f0 <mp_binary_get_val_array+0x88>
            return mp_obj_new_float(((double*)p)[index]);
   13254:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   13258:	e9d1 0100 	ldrd	r0, r1, [r1]
   1325c:	f7ed fa9e 	bl	79c <__aeabi_d2f>
   13260:	ee00 0a10 	vmov	s0, r0
   13264:	f7f9 fdca 	bl	cdfc <mp_obj_new_float>
   13268:	e7c2      	b.n	131f0 <mp_binary_get_val_array+0x88>
            return ((mp_obj_t*)p)[index];
   1326a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   1326e:	e7bf      	b.n	131f0 <mp_binary_get_val_array+0x88>
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
   13270:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   13274:	f7fa fe61 	bl	df3a <mp_obj_new_int>
   13278:	e7ba      	b.n	131f0 <mp_binary_get_val_array+0x88>
    mp_int_t val = 0;
   1327a:	2000      	movs	r0, #0
   1327c:	e7b5      	b.n	131ea <mp_binary_get_val_array+0x82>

0001327e <mp_binary_get_int>:

// The long long type is guaranteed to hold at least 64 bits, and size is at
// most 8 (for q and Q), so we will always be able to parse the given data
// and fit it into a long long.
long long mp_binary_get_int(mp_uint_t size, bool is_signed, bool big_endian, const byte *src) {
   1327e:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
   13282:	461e      	mov	r6, r3
    int delta;
    if (!big_endian) {
   13284:	b96a      	cbnz	r2, 132a2 <mp_binary_get_int+0x24>
        delta = -1;
        src += size - 1;
   13286:	1e43      	subs	r3, r0, #1
   13288:	441e      	add	r6, r3
        delta = -1;
   1328a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    } else {
        delta = 1;
    }

    long long val = 0;
    if (is_signed && *src & 0x80) {
   1328e:	b1f9      	cbz	r1, 132d0 <mp_binary_get_int+0x52>
   13290:	f996 3000 	ldrsb.w	r3, [r6]
   13294:	2b00      	cmp	r3, #0
   13296:	db21      	blt.n	132dc <mp_binary_get_int+0x5e>
    long long val = 0;
   13298:	f04f 0b00 	mov.w	fp, #0
   1329c:	f04f 0c00 	mov.w	ip, #0
   132a0:	e01a      	b.n	132d8 <mp_binary_get_int+0x5a>
        delta = 1;
   132a2:	2701      	movs	r7, #1
   132a4:	e7f3      	b.n	1328e <mp_binary_get_int+0x10>
        val = -1;
    }
    for (uint i = 0; i < size; i++) {
        val <<= 8;
   132a6:	ea4f 250c 	mov.w	r5, ip, lsl #8
   132aa:	ea45 651b 	orr.w	r5, r5, fp, lsr #24
   132ae:	ea4f 240b 	mov.w	r4, fp, lsl #8
        val |= *src;
   132b2:	7832      	ldrb	r2, [r6, #0]
   132b4:	2300      	movs	r3, #0
   132b6:	ea42 0b04 	orr.w	fp, r2, r4
   132ba:	ea43 0c05 	orr.w	ip, r3, r5
        src += delta;
   132be:	443e      	add	r6, r7
    for (uint i = 0; i < size; i++) {
   132c0:	3101      	adds	r1, #1
   132c2:	4281      	cmp	r1, r0
   132c4:	d3ef      	bcc.n	132a6 <mp_binary_get_int+0x28>
    }

    return val;
}
   132c6:	4658      	mov	r0, fp
   132c8:	4661      	mov	r1, ip
   132ca:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
   132ce:	4770      	bx	lr
    long long val = 0;
   132d0:	f04f 0b00 	mov.w	fp, #0
   132d4:	f04f 0c00 	mov.w	ip, #0
   132d8:	2100      	movs	r1, #0
   132da:	e7f2      	b.n	132c2 <mp_binary_get_int+0x44>
        val = -1;
   132dc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   132e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   132e4:	e7f8      	b.n	132d8 <mp_binary_get_int+0x5a>

000132e6 <mp_binary_get_val>:

#define is_signed(typecode) (typecode > 'Z')
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte **ptr) {
   132e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   132e8:	b083      	sub	sp, #12
   132ea:	4606      	mov	r6, r0
   132ec:	460c      	mov	r4, r1
   132ee:	4617      	mov	r7, r2
    byte *p = *ptr;
   132f0:	6815      	ldr	r5, [r2, #0]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   132f2:	aa01      	add	r2, sp, #4
   132f4:	f7ff fe6a 	bl	12fcc <mp_binary_get_size>
    if (struct_type == '@') {
   132f8:	2e40      	cmp	r6, #64	; 0x40
   132fa:	d023      	beq.n	13344 <mp_binary_get_val+0x5e>
        struct_type = '<';
        #else
        struct_type = '>';
        #endif
    }
    *ptr = p + size;
   132fc:	182b      	adds	r3, r5, r0
   132fe:	603b      	str	r3, [r7, #0]

    long long val = mp_binary_get_int(size, is_signed(val_type), (struct_type == '>'), p);
   13300:	462b      	mov	r3, r5
   13302:	2e3e      	cmp	r6, #62	; 0x3e
   13304:	bf14      	ite	ne
   13306:	2200      	movne	r2, #0
   13308:	2201      	moveq	r2, #1
   1330a:	2c5a      	cmp	r4, #90	; 0x5a
   1330c:	bf94      	ite	ls
   1330e:	2100      	movls	r1, #0
   13310:	2101      	movhi	r1, #1
   13312:	f7ff ffb4 	bl	1327e <mp_binary_get_int>
   13316:	4606      	mov	r6, r0

    if (val_type == 'O') {
   13318:	2c4f      	cmp	r4, #79	; 0x4f
   1331a:	d020      	beq.n	1335e <mp_binary_get_val+0x78>
        return (mp_obj_t)(mp_uint_t)val;
    } else if (val_type == 'S') {
   1331c:	2c53      	cmp	r4, #83	; 0x53
   1331e:	d018      	beq.n	13352 <mp_binary_get_val+0x6c>
        const char *s_val = (const char*)(uintptr_t)(mp_uint_t)val;
        return mp_obj_new_str(s_val, strlen(s_val));
#if MICROPY_PY_BUILTINS_FLOAT
    } else if (val_type == 'f') {
   13320:	2c66      	cmp	r4, #102	; 0x66
   13322:	d01e      	beq.n	13362 <mp_binary_get_val+0x7c>
        union { uint32_t i; float f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
    } else if (val_type == 'd') {
   13324:	2c64      	cmp	r4, #100	; 0x64
   13326:	d021      	beq.n	1336c <mp_binary_get_val+0x86>
        union { uint64_t i; double f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
#endif
    } else if (is_signed(val_type)) {
   13328:	2c5a      	cmp	r4, #90	; 0x5a
   1332a:	d929      	bls.n	13380 <mp_binary_get_val+0x9a>
        if ((long long)MP_SMALL_INT_MIN <= val && val <= (long long)MP_SMALL_INT_MAX) {
   1332c:	f110 4280 	adds.w	r2, r0, #1073741824	; 0x40000000
   13330:	f141 0300 	adc.w	r3, r1, #0
   13334:	2b00      	cmp	r3, #0
   13336:	bf08      	it	eq
   13338:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
   1333c:	d21d      	bcs.n	1337a <mp_binary_get_val+0x94>
            return mp_obj_new_int((mp_int_t)val);
   1333e:	f7fa fdfc 	bl	df3a <mp_obj_new_int>
   13342:	e00c      	b.n	1335e <mp_binary_get_val+0x78>
        p = (byte*)MP_ALIGN(p, (size_t)align);
   13344:	9b01      	ldr	r3, [sp, #4]
   13346:	441d      	add	r5, r3
   13348:	3d01      	subs	r5, #1
   1334a:	425b      	negs	r3, r3
   1334c:	401d      	ands	r5, r3
        struct_type = '<';
   1334e:	263c      	movs	r6, #60	; 0x3c
   13350:	e7d4      	b.n	132fc <mp_binary_get_val+0x16>
        return mp_obj_new_str(s_val, strlen(s_val));
   13352:	f008 fae7 	bl	1b924 <strlen>
   13356:	4601      	mov	r1, r0
   13358:	4630      	mov	r0, r6
   1335a:	f7fc fd07 	bl	fd6c <mp_obj_new_str>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
        } else {
            return mp_obj_new_int_from_ull(val);
        }
    }
}
   1335e:	b003      	add	sp, #12
   13360:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return mp_obj_new_float(fpu.f);
   13362:	ee00 0a10 	vmov	s0, r0
   13366:	f7f9 fd49 	bl	cdfc <mp_obj_new_float>
   1336a:	e7f8      	b.n	1335e <mp_binary_get_val+0x78>
        return mp_obj_new_float(fpu.f);
   1336c:	f7ed fa16 	bl	79c <__aeabi_d2f>
   13370:	ee00 0a10 	vmov	s0, r0
   13374:	f7f9 fd42 	bl	cdfc <mp_obj_new_float>
   13378:	e7f1      	b.n	1335e <mp_binary_get_val+0x78>
            return mp_obj_new_int_from_ll(val);
   1337a:	f7fa fdcd 	bl	df18 <mp_obj_new_int_from_ll>
   1337e:	e7ee      	b.n	1335e <mp_binary_get_val+0x78>
        if ((unsigned long long)val <= (unsigned long long)MP_SMALL_INT_MAX) {
   13380:	2900      	cmp	r1, #0
   13382:	bf08      	it	eq
   13384:	f1b0 4f80 	cmpeq.w	r0, #1073741824	; 0x40000000
   13388:	d302      	bcc.n	13390 <mp_binary_get_val+0xaa>
            return mp_obj_new_int_from_ull(val);
   1338a:	f7fa fde2 	bl	df52 <mp_obj_new_int_from_ull>
   1338e:	e7e6      	b.n	1335e <mp_binary_get_val+0x78>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
   13390:	f7fa fdf0 	bl	df74 <mp_obj_new_int_from_uint>
   13394:	e7e3      	b.n	1335e <mp_binary_get_val+0x78>

00013396 <mp_binary_set_int>:

void mp_binary_set_int(mp_uint_t val_sz, bool big_endian, byte *dest, mp_uint_t val) {
   13396:	b510      	push	{r4, lr}
   13398:	b082      	sub	sp, #8
   1339a:	4614      	mov	r4, r2
   1339c:	9301      	str	r3, [sp, #4]
    if (MP_ENDIANNESS_LITTLE && !big_endian) {
   1339e:	b111      	cbz	r1, 133a6 <mp_binary_set_int+0x10>
        // only copy the least-significant val_sz bytes
        memcpy(dest, (byte*)&val + sizeof(mp_uint_t) - val_sz, val_sz);
    } else {
        const byte *src;
        if (MP_ENDIANNESS_LITTLE) {
            src = (const byte*)&val + val_sz;
   133a0:	ab01      	add	r3, sp, #4
   133a2:	4403      	add	r3, r0
        } else {
            src = (const byte*)&val + sizeof(mp_uint_t);
        }
        while (val_sz--) {
   133a4:	e00a      	b.n	133bc <mp_binary_set_int+0x26>
        memcpy(dest, &val, val_sz);
   133a6:	4602      	mov	r2, r0
   133a8:	a901      	add	r1, sp, #4
   133aa:	4620      	mov	r0, r4
   133ac:	f008 fa22 	bl	1b7f4 <memcpy>
   133b0:	e007      	b.n	133c2 <mp_binary_set_int+0x2c>
            *dest++ = *--src;
   133b2:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   133b6:	7021      	strb	r1, [r4, #0]
   133b8:	3401      	adds	r4, #1
        while (val_sz--) {
   133ba:	4610      	mov	r0, r2
   133bc:	1e42      	subs	r2, r0, #1
   133be:	2800      	cmp	r0, #0
   133c0:	d1f7      	bne.n	133b2 <mp_binary_set_int+0x1c>
        }
    }
}
   133c2:	b002      	add	sp, #8
   133c4:	bd10      	pop	{r4, pc}
	...

000133c8 <mp_binary_set_val>:

void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte **ptr) {
   133c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   133cc:	b085      	sub	sp, #20
   133ce:	4606      	mov	r6, r0
   133d0:	4688      	mov	r8, r1
   133d2:	4615      	mov	r5, r2
   133d4:	4699      	mov	r9, r3
    byte *p = *ptr;
   133d6:	681c      	ldr	r4, [r3, #0]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   133d8:	aa03      	add	r2, sp, #12
   133da:	f7ff fdf7 	bl	12fcc <mp_binary_get_size>
   133de:	4607      	mov	r7, r0
    if (struct_type == '@') {
   133e0:	2e40      	cmp	r6, #64	; 0x40
   133e2:	d01f      	beq.n	13424 <mp_binary_set_val+0x5c>
            struct_type = '<';
        } else {
            struct_type = '>';
        }
    }
    *ptr = p + size;
   133e4:	19e3      	adds	r3, r4, r7
   133e6:	f8c9 3000 	str.w	r3, [r9]

    mp_uint_t val;
    switch (val_type) {
   133ea:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
   133ee:	d034      	beq.n	1345a <mp_binary_set_val+0x92>
   133f0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   133f4:	d01d      	beq.n	13432 <mp_binary_set_val+0x6a>
   133f6:	f1b8 0f4f 	cmp.w	r8, #79	; 0x4f
   133fa:	d01f      	beq.n	1343c <mp_binary_set_val+0x74>
            break;
        }
#endif
        default:
            #if MICROPY_LONGINT_IMPL != MICROPY_LONGINT_IMPL_NONE
            if (MP_OBJ_IS_TYPE(val_in, &mp_type_int)) {
   133fc:	f015 0f03 	tst.w	r5, #3
   13400:	d103      	bne.n	1340a <mp_binary_set_val+0x42>
   13402:	682a      	ldr	r2, [r5, #0]
   13404:	4b30      	ldr	r3, [pc, #192]	; (134c8 <mp_binary_set_val+0x100>)
   13406:	429a      	cmp	r2, r3
   13408:	d048      	beq.n	1349c <mp_binary_set_val+0xd4>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
                return;
            } else
            #endif
            {
                val = mp_obj_get_int(val_in);
   1340a:	4628      	mov	r0, r5
   1340c:	f7f7 fcde 	bl	adcc <mp_obj_get_int>
   13410:	4605      	mov	r5, r0
                // zero/sign extend if needed
                if (BYTES_PER_WORD < 8 && size > sizeof(val)) {
   13412:	2f04      	cmp	r7, #4
   13414:	d912      	bls.n	1343c <mp_binary_set_val+0x74>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   13416:	f1b8 0f5a 	cmp.w	r8, #90	; 0x5a
   1341a:	d949      	bls.n	134b0 <mp_binary_set_val+0xe8>
   1341c:	2800      	cmp	r0, #0
   1341e:	db51      	blt.n	134c4 <mp_binary_set_val+0xfc>
   13420:	2100      	movs	r1, #0
   13422:	e046      	b.n	134b2 <mp_binary_set_val+0xea>
        p = (byte*)MP_ALIGN(p, (size_t)align);
   13424:	9b03      	ldr	r3, [sp, #12]
   13426:	441c      	add	r4, r3
   13428:	3c01      	subs	r4, #1
   1342a:	425b      	negs	r3, r3
   1342c:	401c      	ands	r4, r3
            struct_type = '<';
   1342e:	263c      	movs	r6, #60	; 0x3c
   13430:	e7d8      	b.n	133e4 <mp_binary_set_val+0x1c>
            fp_sp.f = mp_obj_get_float(val_in);
   13432:	4628      	mov	r0, r5
   13434:	f7f7 fd72 	bl	af1c <mp_obj_get_float>
   13438:	ee10 5a10 	vmov	r5, s0
                    }
                }
            }
    }

    mp_binary_set_int(MIN((size_t)size, sizeof(val)), struct_type == '>', p, val);
   1343c:	462b      	mov	r3, r5
   1343e:	4622      	mov	r2, r4
   13440:	2e3e      	cmp	r6, #62	; 0x3e
   13442:	bf14      	ite	ne
   13444:	2100      	movne	r1, #0
   13446:	2101      	moveq	r1, #1
   13448:	4638      	mov	r0, r7
   1344a:	2f04      	cmp	r7, #4
   1344c:	bf28      	it	cs
   1344e:	2004      	movcs	r0, #4
   13450:	f7ff ffa1 	bl	13396 <mp_binary_set_int>
}
   13454:	b005      	add	sp, #20
   13456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            fp_dp.f = mp_obj_get_float(val_in);
   1345a:	4628      	mov	r0, r5
   1345c:	f7f7 fd5e 	bl	af1c <mp_obj_get_float>
   13460:	ee10 0a10 	vmov	r0, s0
   13464:	f7ed f942 	bl	6ec <__aeabi_f2d>
   13468:	e9cd 0100 	strd	r0, r1, [sp]
                int be = struct_type == '>';
   1346c:	2e3e      	cmp	r6, #62	; 0x3e
   1346e:	bf14      	ite	ne
   13470:	2100      	movne	r1, #0
   13472:	2101      	moveq	r1, #1
                mp_binary_set_int(sizeof(uint32_t), be, p, fp_dp.i32[MP_ENDIANNESS_BIG ^ be]);
   13474:	ab04      	add	r3, sp, #16
   13476:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1347a:	f853 3c10 	ldr.w	r3, [r3, #-16]
   1347e:	4622      	mov	r2, r4
   13480:	2004      	movs	r0, #4
   13482:	f7ff ff88 	bl	13396 <mp_binary_set_int>
                p += sizeof(uint32_t);
   13486:	3404      	adds	r4, #4
                val = fp_dp.i32[MP_ENDIANNESS_LITTLE ^ be];
   13488:	f1b6 033e 	subs.w	r3, r6, #62	; 0x3e
   1348c:	bf18      	it	ne
   1348e:	2301      	movne	r3, #1
   13490:	aa04      	add	r2, sp, #16
   13492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13496:	f853 5c10 	ldr.w	r5, [r3, #-16]
   1349a:	e7cf      	b.n	1343c <mp_binary_set_val+0x74>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
   1349c:	4623      	mov	r3, r4
   1349e:	463a      	mov	r2, r7
   134a0:	2e3e      	cmp	r6, #62	; 0x3e
   134a2:	bf14      	ite	ne
   134a4:	2100      	movne	r1, #0
   134a6:	2101      	moveq	r1, #1
   134a8:	4628      	mov	r0, r5
   134aa:	f7fa fcb7 	bl	de1c <mp_obj_int_to_bytes_impl>
   134ae:	e7d1      	b.n	13454 <mp_binary_set_val+0x8c>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   134b0:	2100      	movs	r1, #0
                    memset(p, c, size);
   134b2:	463a      	mov	r2, r7
   134b4:	4620      	mov	r0, r4
   134b6:	f008 f9e1 	bl	1b87c <memset>
                    if (struct_type == '>') {
   134ba:	2e3e      	cmp	r6, #62	; 0x3e
   134bc:	d1be      	bne.n	1343c <mp_binary_set_val+0x74>
                        p += size - sizeof(val);
   134be:	1f3b      	subs	r3, r7, #4
   134c0:	441c      	add	r4, r3
   134c2:	e7bb      	b.n	1343c <mp_binary_set_val+0x74>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   134c4:	21ff      	movs	r1, #255	; 0xff
   134c6:	e7f4      	b.n	134b2 <mp_binary_set_val+0xea>
   134c8:	00027498 	.word	0x00027498

000134cc <mp_binary_set_val_array_from_int>:
            #endif
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
    }
}

void mp_binary_set_val_array_from_int(char typecode, void *p, mp_uint_t index, mp_int_t val) {
   134cc:	b510      	push	{r4, lr}
    switch (typecode) {
   134ce:	3801      	subs	r0, #1
   134d0:	2870      	cmp	r0, #112	; 0x70
   134d2:	d83b      	bhi.n	1354c <mp_binary_set_val_array_from_int+0x80>
   134d4:	e8df f000 	tbb	[pc, r0]
   134d8:	3a3a3a3b 	.word	0x3a3a3a3b
   134dc:	3a3a3a3a 	.word	0x3a3a3a3a
   134e0:	3a3a3a3a 	.word	0x3a3a3a3a
   134e4:	3a3a3a3a 	.word	0x3a3a3a3a
   134e8:	3a3a3a3a 	.word	0x3a3a3a3a
   134ec:	3a3a3a3a 	.word	0x3a3a3a3a
   134f0:	3a3a3a3a 	.word	0x3a3a3a3a
   134f4:	3a3a3a3a 	.word	0x3a3a3a3a
   134f8:	3a3a3a3a 	.word	0x3a3a3a3a
   134fc:	3a3a3a3a 	.word	0x3a3a3a3a
   13500:	3a3a3a3a 	.word	0x3a3a3a3a
   13504:	3a3a3a3a 	.word	0x3a3a3a3a
   13508:	3a3a3a3a 	.word	0x3a3a3a3a
   1350c:	3a3a3a3a 	.word	0x3a3a3a3a
   13510:	3a3a3a3a 	.word	0x3a3a3a3a
   13514:	3a3a3a3a 	.word	0x3a3a3a3a
   13518:	3a3a3b3a 	.word	0x3a3a3b3a
   1351c:	403a3a3a 	.word	0x403a3a3a
   13520:	4c3a3a46 	.word	0x4c3a3a46
   13524:	6e3a3a3a 	.word	0x6e3a3a3a
   13528:	3a3a3a56 	.word	0x3a3a3a56
   1352c:	3a3a3a3a 	.word	0x3a3a3a3a
   13530:	3a3a3a3a 	.word	0x3a3a3a3a
   13534:	3a3a3a3a 	.word	0x3a3a3a3a
   13538:	663a393a 	.word	0x663a393a
   1353c:	3d3a5d3a 	.word	0x3d3a5d3a
   13540:	493a3a43 	.word	0x493a3a43
   13544:	3a3a3a3a 	.word	0x3a3a3a3a
   13548:	4f          	.byte	0x4f
   13549:	00          	.byte	0x00
        case 'b':
            ((signed char*)p)[index] = val;
   1354a:	548b      	strb	r3, [r1, r2]
        // Extension to CPython: array of pointers
        case 'P':
            ((void**)p)[index] = (void*)(uintptr_t)val;
            break;
    }
}
   1354c:	bd10      	pop	{r4, pc}
            ((unsigned char*)p)[index] = val;
   1354e:	548b      	strb	r3, [r1, r2]
            break;
   13550:	e7fc      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((short*)p)[index] = val;
   13552:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            break;
   13556:	e7f9      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((unsigned short*)p)[index] = val;
   13558:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            break;
   1355c:	e7f6      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((int*)p)[index] = val;
   1355e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            break;
   13562:	e7f3      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((unsigned int*)p)[index] = val;
   13564:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            break;
   13568:	e7f0      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((long*)p)[index] = val;
   1356a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            break;
   1356e:	e7ed      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((unsigned long*)p)[index] = val;
   13570:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            break;
   13574:	e7ea      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((long long*)p)[index] = val;
   13576:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   1357a:	461a      	mov	r2, r3
   1357c:	17db      	asrs	r3, r3, #31
   1357e:	e9c1 2300 	strd	r2, r3, [r1]
            break;
   13582:	e7e3      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((unsigned long long*)p)[index] = val;
   13584:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   13588:	461a      	mov	r2, r3
   1358a:	17db      	asrs	r3, r3, #31
   1358c:	e9c1 2300 	strd	r2, r3, [r1]
            break;
   13590:	e7dc      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((float*)p)[index] = val;
   13592:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   13596:	ee07 3a90 	vmov	s15, r3
   1359a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1359e:	edc1 7a00 	vstr	s15, [r1]
            break;
   135a2:	e7d3      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
   135a4:	4618      	mov	r0, r3
            ((double*)p)[index] = val;
   135a6:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
   135aa:	f7ed f88d 	bl	6c8 <__aeabi_i2d>
   135ae:	e9c4 0100 	strd	r0, r1, [r4]
            break;
   135b2:	e7cb      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
            ((void**)p)[index] = (void*)(uintptr_t)val;
   135b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   135b8:	e7c8      	b.n	1354c <mp_binary_set_val_array_from_int+0x80>
	...

000135bc <mp_binary_set_val_array>:
void mp_binary_set_val_array(char typecode, void *p, mp_uint_t index, mp_obj_t val_in) {
   135bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135be:	460d      	mov	r5, r1
   135c0:	4617      	mov	r7, r2
   135c2:	461e      	mov	r6, r3
    switch (typecode) {
   135c4:	2864      	cmp	r0, #100	; 0x64
   135c6:	d01d      	beq.n	13604 <mp_binary_set_val_array+0x48>
   135c8:	4604      	mov	r4, r0
   135ca:	2866      	cmp	r0, #102	; 0x66
   135cc:	d012      	beq.n	135f4 <mp_binary_set_val_array+0x38>
   135ce:	284f      	cmp	r0, #79	; 0x4f
   135d0:	d024      	beq.n	1361c <mp_binary_set_val_array+0x60>
            if (MP_OBJ_IS_TYPE(val_in, &mp_type_int)) {
   135d2:	f013 0f03 	tst.w	r3, #3
   135d6:	d103      	bne.n	135e0 <mp_binary_set_val_array+0x24>
   135d8:	681a      	ldr	r2, [r3, #0]
   135da:	4b18      	ldr	r3, [pc, #96]	; (1363c <mp_binary_set_val_array+0x80>)
   135dc:	429a      	cmp	r2, r3
   135de:	d020      	beq.n	13622 <mp_binary_set_val_array+0x66>
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
   135e0:	4630      	mov	r0, r6
   135e2:	f7f7 fbf3 	bl	adcc <mp_obj_get_int>
   135e6:	4603      	mov	r3, r0
   135e8:	463a      	mov	r2, r7
   135ea:	4629      	mov	r1, r5
   135ec:	4620      	mov	r0, r4
   135ee:	f7ff ff6d 	bl	134cc <mp_binary_set_val_array_from_int>
   135f2:	e006      	b.n	13602 <mp_binary_set_val_array+0x46>
            ((float*)p)[index] = mp_obj_get_float(val_in);
   135f4:	eb01 0582 	add.w	r5, r1, r2, lsl #2
   135f8:	4618      	mov	r0, r3
   135fa:	f7f7 fc8f 	bl	af1c <mp_obj_get_float>
   135fe:	ed85 0a00 	vstr	s0, [r5]
}
   13602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ((double*)p)[index] = mp_obj_get_float(val_in);
   13604:	4618      	mov	r0, r3
   13606:	f7f7 fc89 	bl	af1c <mp_obj_get_float>
   1360a:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
   1360e:	ee10 0a10 	vmov	r0, s0
   13612:	f7ed f86b 	bl	6ec <__aeabi_f2d>
   13616:	e9c5 0100 	strd	r0, r1, [r5]
            break;
   1361a:	e7f2      	b.n	13602 <mp_binary_set_val_array+0x46>
            ((mp_obj_t*)p)[index] = val_in;
   1361c:	f845 3027 	str.w	r3, [r5, r7, lsl #2]
            break;
   13620:	e7ef      	b.n	13602 <mp_binary_set_val_array+0x46>
                size_t size = mp_binary_get_size('@', typecode, NULL);
   13622:	2200      	movs	r2, #0
   13624:	4601      	mov	r1, r0
   13626:	2040      	movs	r0, #64	; 0x40
   13628:	f7ff fcd0 	bl	12fcc <mp_binary_get_size>
   1362c:	4602      	mov	r2, r0
                mp_obj_int_to_bytes_impl(val_in, MP_ENDIANNESS_BIG,
   1362e:	fb00 5307 	mla	r3, r0, r7, r5
   13632:	2100      	movs	r1, #0
   13634:	4630      	mov	r0, r6
   13636:	f7fa fbf1 	bl	de1c <mp_obj_int_to_bytes_impl>
                return;
   1363a:	e7e2      	b.n	13602 <mp_binary_set_val_array+0x46>
   1363c:	00027498 	.word	0x00027498

00013640 <chop_component>:
    mp_raise_msg(&mp_type_ImportError, "script compilation not supported");
    #endif
}

STATIC void chop_component(const char *start, const char **end) {
    const char *p = *end;
   13640:	680b      	ldr	r3, [r1, #0]
    while (p > start) {
   13642:	4283      	cmp	r3, r0
   13644:	d905      	bls.n	13652 <chop_component+0x12>
        if (*--p == '.') {
   13646:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1364a:	2a2e      	cmp	r2, #46	; 0x2e
   1364c:	d1f9      	bne.n	13642 <chop_component+0x2>
            *end = p;
   1364e:	600b      	str	r3, [r1, #0]
            return;
   13650:	4770      	bx	lr
        }
    }
    *end = p;
   13652:	600b      	str	r3, [r1, #0]
}
   13654:	4770      	bx	lr

00013656 <mp_import_stat_any>:
STATIC mp_import_stat_t mp_import_stat_any(const char *path) {
   13656:	b508      	push	{r3, lr}
    return mp_import_stat(path);
   13658:	f004 f86a 	bl	17730 <mp_vfs_import_stat>
}
   1365c:	bd08      	pop	{r3, pc}

0001365e <stat_file_py_or_mpy>:
STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
   1365e:	b508      	push	{r3, lr}
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   13660:	f7ee f913 	bl	188a <vstr_null_terminated_str>
   13664:	f7ff fff7 	bl	13656 <mp_import_stat_any>
    if (stat == MP_IMPORT_STAT_FILE) {
   13668:	2802      	cmp	r0, #2
   1366a:	d000      	beq.n	1366e <stat_file_py_or_mpy+0x10>
    return MP_IMPORT_STAT_NO_EXIST;
   1366c:	2000      	movs	r0, #0
}
   1366e:	bd08      	pop	{r3, pc}

00013670 <stat_dir_or_file>:
STATIC mp_import_stat_t stat_dir_or_file(vstr_t *path) {
   13670:	b510      	push	{r4, lr}
   13672:	4604      	mov	r4, r0
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   13674:	f7ee f909 	bl	188a <vstr_null_terminated_str>
   13678:	f7ff ffed 	bl	13656 <mp_import_stat_any>
    if (stat == MP_IMPORT_STAT_DIR) {
   1367c:	2801      	cmp	r0, #1
   1367e:	d006      	beq.n	1368e <stat_dir_or_file+0x1e>
    vstr_add_str(path, ".py");
   13680:	4903      	ldr	r1, [pc, #12]	; (13690 <stat_dir_or_file+0x20>)
   13682:	4620      	mov	r0, r4
   13684:	f7ee f91d 	bl	18c2 <vstr_add_str>
    return stat_file_py_or_mpy(path);
   13688:	4620      	mov	r0, r4
   1368a:	f7ff ffe8 	bl	1365e <stat_file_py_or_mpy>
}
   1368e:	bd10      	pop	{r4, pc}
   13690:	00029198 	.word	0x00029198

00013694 <find_file>:
STATIC mp_import_stat_t find_file(const char *file_str, uint file_len, vstr_t *dest) {
   13694:	b5f0      	push	{r4, r5, r6, r7, lr}
   13696:	b085      	sub	sp, #20
   13698:	4606      	mov	r6, r0
   1369a:	460f      	mov	r7, r1
   1369c:	4615      	mov	r5, r2
    mp_obj_list_get(mp_sys_path, &path_num, &path_items);
   1369e:	aa02      	add	r2, sp, #8
   136a0:	a903      	add	r1, sp, #12
   136a2:	481b      	ldr	r0, [pc, #108]	; (13710 <find_file+0x7c>)
   136a4:	f7fb fa30 	bl	eb08 <mp_obj_list_get>
    if (path_num == 0) {
   136a8:	9b03      	ldr	r3, [sp, #12]
   136aa:	b10b      	cbz	r3, 136b0 <find_file+0x1c>
        for (size_t i = 0; i < path_num; i++) {
   136ac:	2400      	movs	r4, #0
   136ae:	e014      	b.n	136da <find_file+0x46>
        vstr_add_strn(dest, file_str, file_len);
   136b0:	463a      	mov	r2, r7
   136b2:	4631      	mov	r1, r6
   136b4:	4628      	mov	r0, r5
   136b6:	f7ee f853 	bl	1760 <vstr_add_strn>
        return stat_dir_or_file(dest);
   136ba:	4628      	mov	r0, r5
   136bc:	f7ff ffd8 	bl	13670 <stat_dir_or_file>
   136c0:	4603      	mov	r3, r0
   136c2:	e022      	b.n	1370a <find_file+0x76>
            vstr_add_strn(dest, file_str, file_len);
   136c4:	463a      	mov	r2, r7
   136c6:	4631      	mov	r1, r6
   136c8:	4628      	mov	r0, r5
   136ca:	f7ee f849 	bl	1760 <vstr_add_strn>
            mp_import_stat_t stat = stat_dir_or_file(dest);
   136ce:	4628      	mov	r0, r5
   136d0:	f7ff ffce 	bl	13670 <stat_dir_or_file>
            if (stat != MP_IMPORT_STAT_NO_EXIST) {
   136d4:	4603      	mov	r3, r0
   136d6:	b9c0      	cbnz	r0, 1370a <find_file+0x76>
        for (size_t i = 0; i < path_num; i++) {
   136d8:	3401      	adds	r4, #1
   136da:	9b03      	ldr	r3, [sp, #12]
   136dc:	42a3      	cmp	r3, r4
   136de:	d913      	bls.n	13708 <find_file+0x74>
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   136e0:	2300      	movs	r3, #0
   136e2:	606b      	str	r3, [r5, #4]
            const char *p = mp_obj_str_get_data(path_items[i], &p_len);
   136e4:	a901      	add	r1, sp, #4
   136e6:	9b02      	ldr	r3, [sp, #8]
   136e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   136ec:	f7fc fdca 	bl	10284 <mp_obj_str_get_data>
            if (p_len > 0) {
   136f0:	9a01      	ldr	r2, [sp, #4]
   136f2:	2a00      	cmp	r2, #0
   136f4:	d0e6      	beq.n	136c4 <find_file+0x30>
                vstr_add_strn(dest, p, p_len);
   136f6:	4601      	mov	r1, r0
   136f8:	4628      	mov	r0, r5
   136fa:	f7ee f831 	bl	1760 <vstr_add_strn>
                vstr_add_char(dest, PATH_SEP_CHAR);
   136fe:	212f      	movs	r1, #47	; 0x2f
   13700:	4628      	mov	r0, r5
   13702:	f7ee f8d9 	bl	18b8 <vstr_add_char>
   13706:	e7dd      	b.n	136c4 <find_file+0x30>
        return MP_IMPORT_STAT_NO_EXIST;
   13708:	2300      	movs	r3, #0
}
   1370a:	4618      	mov	r0, r3
   1370c:	b005      	add	sp, #20
   1370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13710:	200008f8 	.word	0x200008f8

00013714 <do_load_from_lexer>:
STATIC void do_load_from_lexer(mp_obj_t module_obj, mp_lexer_t *lex) {
   13714:	b510      	push	{r4, lr}
   13716:	460c      	mov	r4, r1
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   13718:	f7fb faee 	bl	ecf8 <mp_obj_module_get_globals>
   1371c:	4602      	mov	r2, r0
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   1371e:	4603      	mov	r3, r0
   13720:	2101      	movs	r1, #1
   13722:	4620      	mov	r0, r4
   13724:	f7f6 fd6e 	bl	a204 <mp_parse_compile_execute>
}
   13728:	bd10      	pop	{r4, pc}

0001372a <do_load>:
STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   1372a:	b510      	push	{r4, lr}
   1372c:	4604      	mov	r4, r0
    char *file_str = vstr_null_terminated_str(file);
   1372e:	4608      	mov	r0, r1
   13730:	f7ee f8ab 	bl	188a <vstr_null_terminated_str>
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   13734:	f7f0 fc4f 	bl	3fd6 <mp_lexer_new_from_file>
        do_load_from_lexer(module_obj, lex);
   13738:	4601      	mov	r1, r0
   1373a:	4620      	mov	r0, r4
   1373c:	f7ff ffea 	bl	13714 <do_load_from_lexer>
}
   13740:	bd10      	pop	{r4, pc}
	...

00013744 <mp_builtin___import__>:

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   13744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13748:	b0cb      	sub	sp, #300	; 0x12c
   1374a:	af00      	add	r7, sp, #0
        mp_obj_print(args[i], PRINT_REPR);
        DEBUG_printf("\n");
    }
#endif

    mp_obj_t module_name = args[0];
   1374c:	680e      	ldr	r6, [r1, #0]
    mp_obj_t fromtuple = mp_const_none;
    mp_int_t level = 0;
    if (n_args >= 4) {
   1374e:	2803      	cmp	r0, #3
   13750:	d930      	bls.n	137b4 <mp_builtin___import__+0x70>
        fromtuple = args[3];
   13752:	f8d1 a00c 	ldr.w	sl, [r1, #12]
        if (n_args >= 5) {
   13756:	2804      	cmp	r0, #4
   13758:	d930      	bls.n	137bc <mp_builtin___import__+0x78>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   1375a:	690c      	ldr	r4, [r1, #16]
            if (level < 0) {
   1375c:	1064      	asrs	r4, r4, #1
   1375e:	d426      	bmi.n	137ae <mp_builtin___import__+0x6a>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   13760:	f507 7192 	add.w	r1, r7, #292	; 0x124
   13764:	4630      	mov	r0, r6
   13766:	f7fc fd8d 	bl	10284 <mp_obj_str_get_data>
   1376a:	4605      	mov	r5, r0

    if (level != 0) {
   1376c:	2c00      	cmp	r4, #0
   1376e:	d05f      	beq.n	13830 <mp_builtin___import__+0xec>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   13770:	3c01      	subs	r4, #1
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   13772:	2172      	movs	r1, #114	; 0x72
   13774:	4b9d      	ldr	r3, [pc, #628]	; (139ec <mp_builtin___import__+0x2a8>)
   13776:	6858      	ldr	r0, [r3, #4]
   13778:	f7f8 ff94 	bl	c6a4 <mp_obj_dict_get>
        assert(this_name_q != MP_OBJ_NULL);
   1377c:	4680      	mov	r8, r0
   1377e:	b1f8      	cbz	r0, 137c0 <mp_builtin___import__+0x7c>
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   13780:	4b9a      	ldr	r3, [pc, #616]	; (139ec <mp_builtin___import__+0x2a8>)
   13782:	6858      	ldr	r0, [r3, #4]
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   13784:	2200      	movs	r2, #0
   13786:	217e      	movs	r1, #126	; 0x7e
   13788:	3004      	adds	r0, #4
   1378a:	f7f7 f8d5 	bl	a938 <mp_map_lookup>
   1378e:	4606      	mov	r6, r0
        DEBUG_printf(", is_package: %d", is_pkg);
        DEBUG_printf("\n");
#endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   13790:	f107 010c 	add.w	r1, r7, #12
   13794:	4640      	mov	r0, r8
   13796:	f7fc fd75 	bl	10284 <mp_obj_str_get_data>
   1379a:	4680      	mov	r8, r0

        const char *p = this_name + this_name_l;
   1379c:	68fb      	ldr	r3, [r7, #12]
   1379e:	4403      	add	r3, r0
   137a0:	613b      	str	r3, [r7, #16]
        if (!is_pkg) {
   137a2:	b9d6      	cbnz	r6, 137da <mp_builtin___import__+0x96>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
   137a4:	f107 0110 	add.w	r1, r7, #16
   137a8:	f7ff ff4a 	bl	13640 <chop_component>
   137ac:	e015      	b.n	137da <mp_builtin___import__+0x96>
                mp_raise_ValueError(NULL);
   137ae:	2000      	movs	r0, #0
   137b0:	f7f6 fd7a 	bl	a2a8 <mp_raise_ValueError>
    mp_int_t level = 0;
   137b4:	2400      	movs	r4, #0
    mp_obj_t fromtuple = mp_const_none;
   137b6:	f8df a244 	ldr.w	sl, [pc, #580]	; 139fc <mp_builtin___import__+0x2b8>
   137ba:	e7d1      	b.n	13760 <mp_builtin___import__+0x1c>
    mp_int_t level = 0;
   137bc:	2400      	movs	r4, #0
   137be:	e7cf      	b.n	13760 <mp_builtin___import__+0x1c>
        assert(this_name_q != MP_OBJ_NULL);
   137c0:	4b8b      	ldr	r3, [pc, #556]	; (139f0 <mp_builtin___import__+0x2ac>)
   137c2:	4a8c      	ldr	r2, [pc, #560]	; (139f4 <mp_builtin___import__+0x2b0>)
   137c4:	f240 111d 	movw	r1, #285	; 0x11d
   137c8:	488b      	ldr	r0, [pc, #556]	; (139f8 <mp_builtin___import__+0x2b4>)
   137ca:	f004 fec7 	bl	1855c <__assert_func>
        }

        while (level--) {
            chop_component(this_name, &p);
   137ce:	f107 0110 	add.w	r1, r7, #16
   137d2:	4640      	mov	r0, r8
   137d4:	f7ff ff34 	bl	13640 <chop_component>
        while (level--) {
   137d8:	4634      	mov	r4, r6
   137da:	1e66      	subs	r6, r4, #1
   137dc:	2c00      	cmp	r4, #0
   137de:	d1f6      	bne.n	137ce <mp_builtin___import__+0x8a>
        }

        // We must have some component left over to import from
        if (p == this_name) {
   137e0:	693a      	ldr	r2, [r7, #16]
   137e2:	4542      	cmp	r2, r8
   137e4:	d039      	beq.n	1385a <mp_builtin___import__+0x116>
            mp_raise_ValueError("cannot perform relative import");
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   137e6:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
   137ea:	bbcc      	cbnz	r4, 13860 <mp_builtin___import__+0x11c>
   137ec:	eba2 0408 	sub.w	r4, r2, r8
        char *new_mod = mp_local_alloc(new_mod_l);
   137f0:	f104 030e 	add.w	r3, r4, #14
   137f4:	f023 0307 	bic.w	r3, r3, #7
   137f8:	ebad 0d03 	sub.w	sp, sp, r3
   137fc:	466b      	mov	r3, sp
   137fe:	ea4f 09d3 	mov.w	r9, r3, lsr #3
   13802:	ea4f 06c9 	mov.w	r6, r9, lsl #3
        memcpy(new_mod, this_name, p - this_name);
   13806:	eba2 0208 	sub.w	r2, r2, r8
   1380a:	4641      	mov	r1, r8
   1380c:	4630      	mov	r0, r6
   1380e:	f007 fff1 	bl	1b7f4 <memcpy>
        if (mod_len != 0) {
   13812:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   13816:	bb43      	cbnz	r3, 1386a <mp_builtin___import__+0x126>
            new_mod[p - this_name] = '.';
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   13818:	4621      	mov	r1, r4
   1381a:	4630      	mov	r0, r6
   1381c:	f7ed fea4 	bl	1568 <qstr_from_strn>
        mp_local_free(new_mod);
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   13820:	0086      	lsls	r6, r0, #2
   13822:	f046 0602 	orr.w	r6, r6, #2
        mod_str = qstr_str(new_mod_q);
   13826:	f7ed ff34 	bl	1692 <qstr_str>
   1382a:	4605      	mov	r5, r0
        mod_len = new_mod_l;
   1382c:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   13830:	4630      	mov	r0, r6
   13832:	f7fc fcf5 	bl	10220 <mp_obj_str_get_qstr>
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   13836:	f7fb fa77 	bl	ed28 <mp_module_get>
    if (module_obj != MP_OBJ_NULL) {
   1383a:	4606      	mov	r6, r0
   1383c:	b370      	cbz	r0, 1389c <mp_builtin___import__+0x158>
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   1383e:	212e      	movs	r1, #46	; 0x2e
   13840:	4628      	mov	r0, r5
   13842:	f008 f8bf 	bl	1b9c4 <strchr>
        if (p == NULL) {
   13846:	b110      	cbz	r0, 1384e <mp_builtin___import__+0x10a>
            return module_obj;
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   13848:	4b6c      	ldr	r3, [pc, #432]	; (139fc <mp_builtin___import__+0x2b8>)
   1384a:	459a      	cmp	sl, r3
   1384c:	d01e      	beq.n	1388c <mp_builtin___import__+0x148>
    if (fromtuple != mp_const_none) {
        return module_obj;
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
}
   1384e:	4630      	mov	r0, r6
   13850:	f507 7796 	add.w	r7, r7, #300	; 0x12c
   13854:	46bd      	mov	sp, r7
   13856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            mp_raise_ValueError("cannot perform relative import");
   1385a:	4869      	ldr	r0, [pc, #420]	; (13a00 <mp_builtin___import__+0x2bc>)
   1385c:	f7f6 fd24 	bl	a2a8 <mp_raise_ValueError>
        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   13860:	eba2 0308 	sub.w	r3, r2, r8
   13864:	441c      	add	r4, r3
   13866:	3401      	adds	r4, #1
   13868:	e7c2      	b.n	137f0 <mp_builtin___import__+0xac>
            new_mod[p - this_name] = '.';
   1386a:	693b      	ldr	r3, [r7, #16]
   1386c:	eba3 0308 	sub.w	r3, r3, r8
   13870:	222e      	movs	r2, #46	; 0x2e
   13872:	f803 2039 	strb.w	r2, [r3, r9, lsl #3]
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   13876:	6938      	ldr	r0, [r7, #16]
   13878:	eba0 0008 	sub.w	r0, r0, r8
   1387c:	3001      	adds	r0, #1
   1387e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
   13882:	4629      	mov	r1, r5
   13884:	4430      	add	r0, r6
   13886:	f007 ffb5 	bl	1b7f4 <memcpy>
   1388a:	e7c5      	b.n	13818 <mp_builtin___import__+0xd4>
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   1388c:	1b41      	subs	r1, r0, r5
   1388e:	4628      	mov	r0, r5
   13890:	f7ed fe6a 	bl	1568 <qstr_from_strn>
        return mp_module_get(pkg_name);
   13894:	f7fb fa48 	bl	ed28 <mp_module_get>
   13898:	4606      	mov	r6, r0
   1389a:	e7d8      	b.n	1384e <mp_builtin___import__+0x10a>
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
   1389c:	f107 0214 	add.w	r2, r7, #20
   138a0:	f44f 7180 	mov.w	r1, #256	; 0x100
   138a4:	f507 708a 	add.w	r0, r7, #276	; 0x114
   138a8:	f7ed ff9f 	bl	17ea <vstr_init_fixed_buf>
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   138ac:	46b3      	mov	fp, r6
    for (i = 1; i <= mod_len; i++) {
   138ae:	2401      	movs	r4, #1
    uint last = 0;
   138b0:	f04f 0800 	mov.w	r8, #0
    for (i = 1; i <= mod_len; i++) {
   138b4:	e02c      	b.n	13910 <mp_builtin___import__+0x1cc>
                vstr_add_char(&path, PATH_SEP_CHAR);
   138b6:	212f      	movs	r1, #47	; 0x2f
   138b8:	f507 708a 	add.w	r0, r7, #276	; 0x114
   138bc:	f7ed fffc 	bl	18b8 <vstr_add_char>
                vstr_add_strn(&path, mod_str + last, i - last);
   138c0:	eba4 0208 	sub.w	r2, r4, r8
   138c4:	eb05 0108 	add.w	r1, r5, r8
   138c8:	f507 708a 	add.w	r0, r7, #276	; 0x114
   138cc:	f7ed ff48 	bl	1760 <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   138d0:	f507 708a 	add.w	r0, r7, #276	; 0x114
   138d4:	f7ff fecc 	bl	13670 <stat_dir_or_file>
   138d8:	4681      	mov	r9, r0
            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   138da:	f1b9 0f00 	cmp.w	r9, #0
   138de:	d031      	beq.n	13944 <mp_builtin___import__+0x200>
                module_obj = mp_module_get(mod_name);
   138e0:	6838      	ldr	r0, [r7, #0]
   138e2:	f7fb fa21 	bl	ed28 <mp_module_get>
            if (module_obj == MP_OBJ_NULL) {
   138e6:	6078      	str	r0, [r7, #4]
   138e8:	b398      	cbz	r0, 13952 <mp_builtin___import__+0x20e>
            if (outer_module_obj != MP_OBJ_NULL) {
   138ea:	b156      	cbz	r6, 13902 <mp_builtin___import__+0x1be>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   138ec:	eba4 0108 	sub.w	r1, r4, r8
   138f0:	eb05 0008 	add.w	r0, r5, r8
   138f4:	f7ed fe38 	bl	1568 <qstr_from_strn>
                mp_store_attr(outer_module_obj, s, module_obj);
   138f8:	687a      	ldr	r2, [r7, #4]
   138fa:	4601      	mov	r1, r0
   138fc:	4630      	mov	r0, r6
   138fe:	f7f5 ffe3 	bl	98c8 <mp_store_attr>
            if (top_module_obj == MP_OBJ_NULL) {
   13902:	f1bb 0f00 	cmp.w	fp, #0
   13906:	d067      	beq.n	139d8 <mp_builtin___import__+0x294>
            last = i + 1;
   13908:	f104 0801 	add.w	r8, r4, #1
   1390c:	687e      	ldr	r6, [r7, #4]
    for (i = 1; i <= mod_len; i++) {
   1390e:	3401      	adds	r4, #1
   13910:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   13914:	42a3      	cmp	r3, r4
   13916:	d362      	bcc.n	139de <mp_builtin___import__+0x29a>
        if (i == mod_len || mod_str[i] == '.') {
   13918:	42a3      	cmp	r3, r4
   1391a:	d002      	beq.n	13922 <mp_builtin___import__+0x1de>
   1391c:	5d2b      	ldrb	r3, [r5, r4]
   1391e:	2b2e      	cmp	r3, #46	; 0x2e
   13920:	d1f5      	bne.n	1390e <mp_builtin___import__+0x1ca>
            qstr mod_name = qstr_from_strn(mod_str, i);
   13922:	4621      	mov	r1, r4
   13924:	4628      	mov	r0, r5
   13926:	f7ed fe1f 	bl	1568 <qstr_from_strn>
   1392a:	6038      	str	r0, [r7, #0]
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1392c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
            if (vstr_len(&path) == 0) {
   13930:	2b00      	cmp	r3, #0
   13932:	d1c0      	bne.n	138b6 <mp_builtin___import__+0x172>
                stat = find_file(mod_str, i, &path);
   13934:	f507 728a 	add.w	r2, r7, #276	; 0x114
   13938:	4621      	mov	r1, r4
   1393a:	4628      	mov	r0, r5
   1393c:	f7ff feaa 	bl	13694 <find_file>
   13940:	4681      	mov	r9, r0
   13942:	e7ca      	b.n	138da <mp_builtin___import__+0x196>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError,
   13944:	683a      	ldr	r2, [r7, #0]
   13946:	492f      	ldr	r1, [pc, #188]	; (13a04 <mp_builtin___import__+0x2c0>)
   13948:	482f      	ldr	r0, [pc, #188]	; (13a08 <mp_builtin___import__+0x2c4>)
   1394a:	f7f9 f8bf 	bl	cacc <mp_obj_new_exception_msg_varg>
   1394e:	f7ec ff97 	bl	880 <nlr_jump>
                module_obj = mp_obj_new_module(mod_name);
   13952:	6838      	ldr	r0, [r7, #0]
   13954:	f7fb f9ae 	bl	ecb4 <mp_obj_new_module>
   13958:	6078      	str	r0, [r7, #4]
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   1395a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   1395e:	42a3      	cmp	r3, r4
   13960:	d008      	beq.n	13974 <mp_builtin___import__+0x230>
                if (stat == MP_IMPORT_STAT_DIR) {
   13962:	f1b9 0f01 	cmp.w	r9, #1
   13966:	d011      	beq.n	1398c <mp_builtin___import__+0x248>
                    do_load(module_obj, &path);
   13968:	f507 718a 	add.w	r1, r7, #276	; 0x114
   1396c:	6878      	ldr	r0, [r7, #4]
   1396e:	f7ff fedc 	bl	1372a <do_load>
   13972:	e7ba      	b.n	138ea <mp_builtin___import__+0x1a6>
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   13974:	4b25      	ldr	r3, [pc, #148]	; (13a0c <mp_builtin___import__+0x2c8>)
   13976:	459a      	cmp	sl, r3
   13978:	d1f3      	bne.n	13962 <mp_builtin___import__+0x21e>
   1397a:	f1b9 0f01 	cmp.w	r9, #1
   1397e:	d0f0      	beq.n	13962 <mp_builtin___import__+0x21e>
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   13980:	226a      	movs	r2, #106	; 0x6a
   13982:	2172      	movs	r1, #114	; 0x72
   13984:	6840      	ldr	r0, [r0, #4]
   13986:	f7f8 ff3f 	bl	c808 <mp_obj_dict_store>
   1398a:	e7ea      	b.n	13962 <mp_builtin___import__+0x21e>
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   1398c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
   13990:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
   13994:	f7fc f9ea 	bl	fd6c <mp_obj_new_str>
   13998:	4602      	mov	r2, r0
   1399a:	211f      	movs	r1, #31
   1399c:	6878      	ldr	r0, [r7, #4]
   1399e:	f7f5 ff93 	bl	98c8 <mp_store_attr>
                    size_t orig_path_len = path.len;
   139a2:	f8d7 9118 	ldr.w	r9, [r7, #280]	; 0x118
                    vstr_add_char(&path, PATH_SEP_CHAR);
   139a6:	212f      	movs	r1, #47	; 0x2f
   139a8:	f507 708a 	add.w	r0, r7, #276	; 0x114
   139ac:	f7ed ff84 	bl	18b8 <vstr_add_char>
                    vstr_add_str(&path, "__init__.py");
   139b0:	4917      	ldr	r1, [pc, #92]	; (13a10 <mp_builtin___import__+0x2cc>)
   139b2:	f507 708a 	add.w	r0, r7, #276	; 0x114
   139b6:	f7ed ff84 	bl	18c2 <vstr_add_str>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
   139ba:	f507 708a 	add.w	r0, r7, #276	; 0x114
   139be:	f7ff fe4e 	bl	1365e <stat_file_py_or_mpy>
   139c2:	2802      	cmp	r0, #2
   139c4:	d002      	beq.n	139cc <mp_builtin___import__+0x288>
                    path.len = orig_path_len;
   139c6:	f8c7 9118 	str.w	r9, [r7, #280]	; 0x118
   139ca:	e78e      	b.n	138ea <mp_builtin___import__+0x1a6>
                        do_load(module_obj, &path);
   139cc:	f507 718a 	add.w	r1, r7, #276	; 0x114
   139d0:	6878      	ldr	r0, [r7, #4]
   139d2:	f7ff feaa 	bl	1372a <do_load>
   139d6:	e7f6      	b.n	139c6 <mp_builtin___import__+0x282>
                top_module_obj = module_obj;
   139d8:	f8d7 b004 	ldr.w	fp, [r7, #4]
   139dc:	e794      	b.n	13908 <mp_builtin___import__+0x1c4>
    if (fromtuple != mp_const_none) {
   139de:	4b07      	ldr	r3, [pc, #28]	; (139fc <mp_builtin___import__+0x2b8>)
   139e0:	459a      	cmp	sl, r3
   139e2:	f47f af34 	bne.w	1384e <mp_builtin___import__+0x10a>
    return top_module_obj;
   139e6:	465e      	mov	r6, fp
   139e8:	e731      	b.n	1384e <mp_builtin___import__+0x10a>
   139ea:	bf00      	nop
   139ec:	200008a0 	.word	0x200008a0
   139f0:	00029120 	.word	0x00029120
   139f4:	00029108 	.word	0x00029108
   139f8:	0002913c 	.word	0x0002913c
   139fc:	00027b40 	.word	0x00027b40
   13a00:	00029158 	.word	0x00029158
   13a04:	00029178 	.word	0x00029178
   13a08:	00026900 	.word	0x00026900
   13a0c:	00025f44 	.word	0x00025f44
   13a10:	00029190 	.word	0x00029190

00013a14 <mp_obj_is_package>:
bool mp_obj_is_package(mp_obj_t module) {
   13a14:	b500      	push	{lr}
   13a16:	b083      	sub	sp, #12
    mp_load_method_maybe(module, MP_QSTR___path__, dest);
   13a18:	466a      	mov	r2, sp
   13a1a:	211f      	movs	r1, #31
   13a1c:	f7f5 feb4 	bl	9788 <mp_load_method_maybe>
}
   13a20:	9800      	ldr	r0, [sp, #0]
   13a22:	3000      	adds	r0, #0
   13a24:	bf18      	it	ne
   13a26:	2001      	movne	r0, #1
   13a28:	b003      	add	sp, #12
   13a2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013a30 <eval_exec_helper>:

#endif // MICROPY_PY_BUILTINS_COMPILE

#if MICROPY_PY_BUILTINS_EVAL_EXEC

STATIC mp_obj_t eval_exec_helper(size_t n_args, const mp_obj_t *args, mp_parse_input_kind_t parse_input_kind) {
   13a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a32:	b083      	sub	sp, #12
   13a34:	460c      	mov	r4, r1
   13a36:	4617      	mov	r7, r2
   13a38:	4b17      	ldr	r3, [pc, #92]	; (13a98 <eval_exec_helper+0x68>)
   13a3a:	685e      	ldr	r6, [r3, #4]
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   13a3c:	681d      	ldr	r5, [r3, #0]
    // work out the context
    mp_obj_dict_t *globals = mp_globals_get();
    mp_obj_dict_t *locals = mp_locals_get();
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   13a3e:	2301      	movs	r3, #1
   13a40:	e005      	b.n	13a4e <eval_exec_helper+0x1e>
        if (args[i] != mp_const_none) {
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
                mp_raise_TypeError(NULL);
   13a42:	2000      	movs	r0, #0
   13a44:	f7f6 fe30 	bl	a6a8 <mp_raise_TypeError>
            }
            locals = MP_OBJ_TO_PTR(args[i]);
   13a48:	4615      	mov	r5, r2
            if (i == 1) {
                globals = locals;
   13a4a:	4616      	mov	r6, r2
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   13a4c:	3301      	adds	r3, #1
   13a4e:	2b02      	cmp	r3, #2
   13a50:	d811      	bhi.n	13a76 <eval_exec_helper+0x46>
   13a52:	4283      	cmp	r3, r0
   13a54:	d20f      	bcs.n	13a76 <eval_exec_helper+0x46>
        if (args[i] != mp_const_none) {
   13a56:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   13a5a:	4910      	ldr	r1, [pc, #64]	; (13a9c <eval_exec_helper+0x6c>)
   13a5c:	428a      	cmp	r2, r1
   13a5e:	d0f5      	beq.n	13a4c <eval_exec_helper+0x1c>
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
   13a60:	f012 0f03 	tst.w	r2, #3
   13a64:	d1ed      	bne.n	13a42 <eval_exec_helper+0x12>
   13a66:	6815      	ldr	r5, [r2, #0]
   13a68:	490d      	ldr	r1, [pc, #52]	; (13aa0 <eval_exec_helper+0x70>)
   13a6a:	428d      	cmp	r5, r1
   13a6c:	d1e9      	bne.n	13a42 <eval_exec_helper+0x12>
            if (i == 1) {
   13a6e:	2b01      	cmp	r3, #1
   13a70:	d0ea      	beq.n	13a48 <eval_exec_helper+0x18>
            locals = MP_OBJ_TO_PTR(args[i]);
   13a72:	4615      	mov	r5, r2
   13a74:	e7ea      	b.n	13a4c <eval_exec_helper+0x1c>
        return code_execute(MP_OBJ_TO_PTR(args[0]), globals, locals);
    }
    #endif

    size_t str_len;
    const char *str = mp_obj_str_get_data(args[0], &str_len);
   13a76:	a901      	add	r1, sp, #4
   13a78:	6820      	ldr	r0, [r4, #0]
   13a7a:	f7fc fc03 	bl	10284 <mp_obj_str_get_data>
    mp_lexer_t *lex;
    if (MICROPY_PY_BUILTINS_EXECFILE && parse_input_kind == MP_PARSE_SINGLE_INPUT) {
        lex = mp_lexer_new_from_file(str);
        parse_input_kind = MP_PARSE_FILE_INPUT;
    } else {
        lex = mp_lexer_new_from_str_len(MP_QSTR__lt_string_gt_, str, str_len, 0);
   13a7e:	2300      	movs	r3, #0
   13a80:	9a01      	ldr	r2, [sp, #4]
   13a82:	4601      	mov	r1, r0
   13a84:	2036      	movs	r0, #54	; 0x36
   13a86:	f7f0 fa98 	bl	3fba <mp_lexer_new_from_str_len>
    }

    return mp_parse_compile_execute(lex, parse_input_kind, globals, locals);
   13a8a:	462b      	mov	r3, r5
   13a8c:	4632      	mov	r2, r6
   13a8e:	4639      	mov	r1, r7
   13a90:	f7f6 fbb8 	bl	a204 <mp_parse_compile_execute>
}
   13a94:	b003      	add	sp, #12
   13a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a98:	200008a0 	.word	0x200008a0
   13a9c:	00027b40 	.word	0x00027b40
   13aa0:	000265d0 	.word	0x000265d0

00013aa4 <mp_builtin_eval>:

STATIC mp_obj_t mp_builtin_eval(size_t n_args, const mp_obj_t *args) {
   13aa4:	b508      	push	{r3, lr}
    return eval_exec_helper(n_args, args, MP_PARSE_EVAL_INPUT);
   13aa6:	2202      	movs	r2, #2
   13aa8:	f7ff ffc2 	bl	13a30 <eval_exec_helper>
}
   13aac:	bd08      	pop	{r3, pc}

00013aae <mp_builtin_exec>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_eval_obj, 1, 3, mp_builtin_eval);

STATIC mp_obj_t mp_builtin_exec(size_t n_args, const mp_obj_t *args) {
   13aae:	b508      	push	{r3, lr}
    return eval_exec_helper(n_args, args, MP_PARSE_FILE_INPUT);
   13ab0:	2201      	movs	r2, #1
   13ab2:	f7ff ffbd 	bl	13a30 <eval_exec_helper>
}
   13ab6:	bd08      	pop	{r3, pc}

00013ab8 <mp_builtin_globals>:
}
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_hasattr_obj, mp_builtin_hasattr);

STATIC mp_obj_t mp_builtin_globals(void) {
    return MP_OBJ_FROM_PTR(mp_globals_get());
}
   13ab8:	4b01      	ldr	r3, [pc, #4]	; (13ac0 <mp_builtin_globals+0x8>)
   13aba:	6858      	ldr	r0, [r3, #4]
   13abc:	4770      	bx	lr
   13abe:	bf00      	nop
   13ac0:	200008a0 	.word	0x200008a0

00013ac4 <mp_builtin_locals>:
MP_DEFINE_CONST_FUN_OBJ_0(mp_builtin_globals_obj, mp_builtin_globals);

STATIC mp_obj_t mp_builtin_locals(void) {
    return MP_OBJ_FROM_PTR(mp_locals_get());
}
   13ac4:	4b01      	ldr	r3, [pc, #4]	; (13acc <mp_builtin_locals+0x8>)
   13ac6:	6818      	ldr	r0, [r3, #0]
   13ac8:	4770      	bx	lr
   13aca:	bf00      	nop
   13acc:	200008a0 	.word	0x200008a0

00013ad0 <mp_builtin___build_class__>:
STATIC mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
   13ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13ad4:	b085      	sub	sp, #20
    assert(2 <= n_args);
   13ad6:	2801      	cmp	r0, #1
   13ad8:	d92d      	bls.n	13b36 <mp_builtin___build_class__+0x66>
   13ada:	4605      	mov	r5, r0
   13adc:	460c      	mov	r4, r1
   13ade:	4e1b      	ldr	r6, [pc, #108]	; (13b4c <mp_builtin___build_class__+0x7c>)
   13ae0:	f8d6 9000 	ldr.w	r9, [r6]
    mp_obj_t class_locals = mp_obj_new_dict(0);
   13ae4:	2000      	movs	r0, #0
   13ae6:	f7f8 fdf9 	bl	c6dc <mp_obj_new_dict>
   13aea:	4607      	mov	r7, r0
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   13aec:	6030      	str	r0, [r6, #0]
    mp_obj_t cell = mp_call_function_0(args[0]);
   13aee:	6820      	ldr	r0, [r4, #0]
   13af0:	f7f5 fde8 	bl	96c4 <mp_call_function_0>
   13af4:	4680      	mov	r8, r0
   13af6:	f8c6 9000 	str.w	r9, [r6]
    if (n_args == 2) {
   13afa:	2d02      	cmp	r5, #2
   13afc:	d121      	bne.n	13b42 <mp_builtin___build_class__+0x72>
        meta = MP_OBJ_FROM_PTR(&mp_type_type);
   13afe:	4e14      	ldr	r6, [pc, #80]	; (13b50 <mp_builtin___build_class__+0x80>)
    meta_args[0] = args[1]; // class name
   13b00:	6863      	ldr	r3, [r4, #4]
   13b02:	9301      	str	r3, [sp, #4]
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2); // tuple of bases
   13b04:	f104 0108 	add.w	r1, r4, #8
   13b08:	1ea8      	subs	r0, r5, #2
   13b0a:	f7fd fe9b 	bl	11844 <mp_obj_new_tuple>
   13b0e:	9002      	str	r0, [sp, #8]
    meta_args[2] = class_locals; // dict of members
   13b10:	9703      	str	r7, [sp, #12]
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);
   13b12:	ab01      	add	r3, sp, #4
   13b14:	2200      	movs	r2, #0
   13b16:	2103      	movs	r1, #3
   13b18:	4630      	mov	r0, r6
   13b1a:	f7f5 fdb3 	bl	9684 <mp_call_function_n_kw>
   13b1e:	4604      	mov	r4, r0
    if (cell != mp_const_none) {
   13b20:	4b0c      	ldr	r3, [pc, #48]	; (13b54 <mp_builtin___build_class__+0x84>)
   13b22:	4598      	cmp	r8, r3
   13b24:	d003      	beq.n	13b2e <mp_builtin___build_class__+0x5e>
        mp_obj_cell_set(cell, new_class);
   13b26:	4601      	mov	r1, r0
   13b28:	4640      	mov	r0, r8
   13b2a:	f7f7 ffb3 	bl	ba94 <mp_obj_cell_set>
}
   13b2e:	4620      	mov	r0, r4
   13b30:	b005      	add	sp, #20
   13b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(2 <= n_args);
   13b36:	4b08      	ldr	r3, [pc, #32]	; (13b58 <mp_builtin___build_class__+0x88>)
   13b38:	4a08      	ldr	r2, [pc, #32]	; (13b5c <mp_builtin___build_class__+0x8c>)
   13b3a:	2132      	movs	r1, #50	; 0x32
   13b3c:	4808      	ldr	r0, [pc, #32]	; (13b60 <mp_builtin___build_class__+0x90>)
   13b3e:	f004 fd0d 	bl	1855c <__assert_func>
        meta = MP_OBJ_FROM_PTR(mp_obj_get_type(args[2]));
   13b42:	68a0      	ldr	r0, [r4, #8]
   13b44:	f7f7 f81a 	bl	ab7c <mp_obj_get_type>
   13b48:	4606      	mov	r6, r0
   13b4a:	e7d9      	b.n	13b00 <mp_builtin___build_class__+0x30>
   13b4c:	200008a0 	.word	0x200008a0
   13b50:	00028dd0 	.word	0x00028dd0
   13b54:	00027b40 	.word	0x00027b40
   13b58:	00029214 	.word	0x00029214
   13b5c:	000291e8 	.word	0x000291e8
   13b60:	00029220 	.word	0x00029220

00013b64 <mp_builtin_abs>:
STATIC mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
   13b64:	b508      	push	{r3, lr}
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
   13b66:	4601      	mov	r1, r0
   13b68:	2007      	movs	r0, #7
   13b6a:	f7f5 fceb 	bl	9544 <mp_unary_op>
}
   13b6e:	bd08      	pop	{r3, pc}

00013b70 <mp_builtin_hash>:
STATIC mp_obj_t mp_builtin_hash(mp_obj_t o_in) {
   13b70:	b508      	push	{r3, lr}
    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
   13b72:	4601      	mov	r1, r0
   13b74:	2006      	movs	r0, #6
   13b76:	f7f5 fce5 	bl	9544 <mp_unary_op>
}
   13b7a:	bd08      	pop	{r3, pc}

00013b7c <mp_builtin_iter>:
STATIC mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
   13b7c:	b508      	push	{r3, lr}
    return mp_getiter(o_in, NULL);
   13b7e:	2100      	movs	r1, #0
   13b80:	f7f5 fec6 	bl	9910 <mp_getiter>
}
   13b84:	bd08      	pop	{r3, pc}
	...

00013b88 <mp_builtin_all>:
STATIC mp_obj_t mp_builtin_all(mp_obj_t o_in) {
   13b88:	b510      	push	{r4, lr}
   13b8a:	b084      	sub	sp, #16
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   13b8c:	4669      	mov	r1, sp
   13b8e:	f7f5 febf 	bl	9910 <mp_getiter>
   13b92:	4604      	mov	r4, r0
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   13b94:	4620      	mov	r0, r4
   13b96:	f7f5 ff29 	bl	99ec <mp_iternext>
   13b9a:	2804      	cmp	r0, #4
   13b9c:	d005      	beq.n	13baa <mp_builtin_all+0x22>
        if (!mp_obj_is_true(item)) {
   13b9e:	f7f7 faed 	bl	b17c <mp_obj_is_true>
   13ba2:	2800      	cmp	r0, #0
   13ba4:	d1f6      	bne.n	13b94 <mp_builtin_all+0xc>
            return mp_const_false;
   13ba6:	4802      	ldr	r0, [pc, #8]	; (13bb0 <mp_builtin_all+0x28>)
   13ba8:	e000      	b.n	13bac <mp_builtin_all+0x24>
    return mp_const_true;
   13baa:	4802      	ldr	r0, [pc, #8]	; (13bb4 <mp_builtin_all+0x2c>)
}
   13bac:	b004      	add	sp, #16
   13bae:	bd10      	pop	{r4, pc}
   13bb0:	00025f44 	.word	0x00025f44
   13bb4:	00025f4c 	.word	0x00025f4c

00013bb8 <mp_builtin_any>:
STATIC mp_obj_t mp_builtin_any(mp_obj_t o_in) {
   13bb8:	b510      	push	{r4, lr}
   13bba:	b084      	sub	sp, #16
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   13bbc:	4669      	mov	r1, sp
   13bbe:	f7f5 fea7 	bl	9910 <mp_getiter>
   13bc2:	4604      	mov	r4, r0
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   13bc4:	4620      	mov	r0, r4
   13bc6:	f7f5 ff11 	bl	99ec <mp_iternext>
   13bca:	2804      	cmp	r0, #4
   13bcc:	d005      	beq.n	13bda <mp_builtin_any+0x22>
        if (mp_obj_is_true(item)) {
   13bce:	f7f7 fad5 	bl	b17c <mp_obj_is_true>
   13bd2:	2800      	cmp	r0, #0
   13bd4:	d0f6      	beq.n	13bc4 <mp_builtin_any+0xc>
            return mp_const_true;
   13bd6:	4802      	ldr	r0, [pc, #8]	; (13be0 <mp_builtin_any+0x28>)
   13bd8:	e000      	b.n	13bdc <mp_builtin_any+0x24>
    return mp_const_false;
   13bda:	4802      	ldr	r0, [pc, #8]	; (13be4 <mp_builtin_any+0x2c>)
}
   13bdc:	b004      	add	sp, #16
   13bde:	bd10      	pop	{r4, pc}
   13be0:	00025f4c 	.word	0x00025f4c
   13be4:	00025f44 	.word	0x00025f44

00013be8 <mp_builtin_bin>:
STATIC mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
   13be8:	b500      	push	{lr}
   13bea:	b083      	sub	sp, #12
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_b_brace_close_), o_in };
   13bec:	23b2      	movs	r3, #178	; 0xb2
   13bee:	9300      	str	r3, [sp, #0]
   13bf0:	9001      	str	r0, [sp, #4]
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
   13bf2:	2200      	movs	r2, #0
   13bf4:	4669      	mov	r1, sp
   13bf6:	2002      	movs	r0, #2
   13bf8:	f7fd fba6 	bl	11348 <mp_obj_str_format>
}
   13bfc:	b003      	add	sp, #12
   13bfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013c04 <mp_builtin_callable>:
STATIC mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
   13c04:	b508      	push	{r3, lr}
    if (mp_obj_is_callable(o_in)) {
   13c06:	f7f7 f85d 	bl	acc4 <mp_obj_is_callable>
   13c0a:	b908      	cbnz	r0, 13c10 <mp_builtin_callable+0xc>
        return mp_const_false;
   13c0c:	4801      	ldr	r0, [pc, #4]	; (13c14 <mp_builtin_callable+0x10>)
}
   13c0e:	bd08      	pop	{r3, pc}
        return mp_const_true;
   13c10:	4801      	ldr	r0, [pc, #4]	; (13c18 <mp_builtin_callable+0x14>)
   13c12:	e7fc      	b.n	13c0e <mp_builtin_callable+0xa>
   13c14:	00025f44 	.word	0x00025f44
   13c18:	00025f4c 	.word	0x00025f4c

00013c1c <mp_builtin_chr>:
STATIC mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
   13c1c:	b500      	push	{lr}
   13c1e:	b083      	sub	sp, #12
    mp_int_t ord = mp_obj_get_int(o_in);
   13c20:	f7f7 f8d4 	bl	adcc <mp_obj_get_int>
    if (0 <= ord && ord <= 0xff) {
   13c24:	28ff      	cmp	r0, #255	; 0xff
   13c26:	d809      	bhi.n	13c3c <mp_builtin_chr+0x20>
        uint8_t str[1] = {ord};
   13c28:	ab02      	add	r3, sp, #8
   13c2a:	f803 0d04 	strb.w	r0, [r3, #-4]!
        return mp_obj_new_str_via_qstr((char*)str, 1);
   13c2e:	2101      	movs	r1, #1
   13c30:	4618      	mov	r0, r3
   13c32:	f7fb fe30 	bl	f896 <mp_obj_new_str_via_qstr>
}
   13c36:	b003      	add	sp, #12
   13c38:	f85d fb04 	ldr.w	pc, [sp], #4
        mp_raise_ValueError("chr() arg not in range(256)");
   13c3c:	4801      	ldr	r0, [pc, #4]	; (13c44 <mp_builtin_chr+0x28>)
   13c3e:	f7f6 fb33 	bl	a2a8 <mp_raise_ValueError>
   13c42:	bf00      	nop
   13c44:	00029274 	.word	0x00029274

00013c48 <mp_builtin_dir>:
STATIC mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
   13c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c4a:	b083      	sub	sp, #12
   13c4c:	4604      	mov	r4, r0
   13c4e:	460f      	mov	r7, r1
    mp_obj_t dir = mp_obj_new_list(0, NULL);
   13c50:	2100      	movs	r1, #0
   13c52:	4608      	mov	r0, r1
   13c54:	f7fa ff10 	bl	ea78 <mp_obj_new_list>
   13c58:	4606      	mov	r6, r0
    if (n_args == 0) {
   13c5a:	b9bc      	cbnz	r4, 13c8c <mp_builtin_dir+0x44>
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   13c5c:	4b1a      	ldr	r3, [pc, #104]	; (13cc8 <mp_builtin_dir+0x80>)
   13c5e:	681d      	ldr	r5, [r3, #0]
        for (size_t i = 0; i < dict->map.alloc; i++) {
   13c60:	e004      	b.n	13c6c <mp_builtin_dir+0x24>
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   13c62:	2300      	movs	r3, #0
   13c64:	e000      	b.n	13c68 <mp_builtin_dir+0x20>
   13c66:	2300      	movs	r3, #0
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
   13c68:	b963      	cbnz	r3, 13c84 <mp_builtin_dir+0x3c>
        for (size_t i = 0; i < dict->map.alloc; i++) {
   13c6a:	3401      	adds	r4, #1
   13c6c:	68ab      	ldr	r3, [r5, #8]
   13c6e:	42a3      	cmp	r3, r4
   13c70:	d926      	bls.n	13cc0 <mp_builtin_dir+0x78>
   13c72:	68eb      	ldr	r3, [r5, #12]
   13c74:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   13c78:	2900      	cmp	r1, #0
   13c7a:	d0f4      	beq.n	13c66 <mp_builtin_dir+0x1e>
   13c7c:	2908      	cmp	r1, #8
   13c7e:	d0f0      	beq.n	13c62 <mp_builtin_dir+0x1a>
   13c80:	2301      	movs	r3, #1
   13c82:	e7f1      	b.n	13c68 <mp_builtin_dir+0x20>
                mp_obj_list_append(dir, dict->map.table[i].key);
   13c84:	4630      	mov	r0, r6
   13c86:	f7fa fbbb 	bl	e400 <mp_obj_list_append>
   13c8a:	e7ee      	b.n	13c6a <mp_builtin_dir+0x22>
        size_t nqstr = QSTR_TOTAL();
   13c8c:	4b0e      	ldr	r3, [pc, #56]	; (13cc8 <mp_builtin_dir+0x80>)
   13c8e:	691b      	ldr	r3, [r3, #16]
   13c90:	685d      	ldr	r5, [r3, #4]
   13c92:	68db      	ldr	r3, [r3, #12]
   13c94:	441d      	add	r5, r3
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   13c96:	2402      	movs	r4, #2
   13c98:	e000      	b.n	13c9c <mp_builtin_dir+0x54>
   13c9a:	3401      	adds	r4, #1
   13c9c:	42ac      	cmp	r4, r5
   13c9e:	d20f      	bcs.n	13cc0 <mp_builtin_dir+0x78>
            mp_load_method_protected(args[0], i, dest, false);
   13ca0:	2300      	movs	r3, #0
   13ca2:	466a      	mov	r2, sp
   13ca4:	4621      	mov	r1, r4
   13ca6:	6838      	ldr	r0, [r7, #0]
   13ca8:	f7f5 fdec 	bl	9884 <mp_load_method_protected>
            if (dest[0] != MP_OBJ_NULL) {
   13cac:	9b00      	ldr	r3, [sp, #0]
   13cae:	2b00      	cmp	r3, #0
   13cb0:	d0f3      	beq.n	13c9a <mp_builtin_dir+0x52>
                mp_obj_list_append(dir, MP_OBJ_NEW_QSTR(i));
   13cb2:	00a1      	lsls	r1, r4, #2
   13cb4:	f041 0102 	orr.w	r1, r1, #2
   13cb8:	4630      	mov	r0, r6
   13cba:	f7fa fba1 	bl	e400 <mp_obj_list_append>
   13cbe:	e7ec      	b.n	13c9a <mp_builtin_dir+0x52>
}
   13cc0:	4630      	mov	r0, r6
   13cc2:	b003      	add	sp, #12
   13cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cc6:	bf00      	nop
   13cc8:	200008a0 	.word	0x200008a0

00013ccc <mp_builtin_divmod>:
STATIC mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
   13ccc:	b508      	push	{r3, lr}
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
   13cce:	460a      	mov	r2, r1
   13cd0:	4601      	mov	r1, r0
   13cd2:	2021      	movs	r0, #33	; 0x21
   13cd4:	f7f6 faf0 	bl	a2b8 <mp_binary_op>
}
   13cd8:	bd08      	pop	{r3, pc}

00013cda <mp_builtin_hex>:
STATIC mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
   13cda:	b508      	push	{r3, lr}
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_x), o_in);
   13cdc:	4602      	mov	r2, r0
   13cde:	21ae      	movs	r1, #174	; 0xae
   13ce0:	201f      	movs	r0, #31
   13ce2:	f7f6 fae9 	bl	a2b8 <mp_binary_op>
}
   13ce6:	bd08      	pop	{r3, pc}

00013ce8 <mp_builtin_oct>:
STATIC mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
   13ce8:	b508      	push	{r3, lr}
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_o), o_in);
   13cea:	4602      	mov	r2, r0
   13cec:	21aa      	movs	r1, #170	; 0xaa
   13cee:	201f      	movs	r0, #31
   13cf0:	f7f6 fae2 	bl	a2b8 <mp_binary_op>
}
   13cf4:	bd08      	pop	{r3, pc}

00013cf6 <mp_builtin_sum>:
STATIC mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
   13cf6:	b530      	push	{r4, r5, lr}
   13cf8:	b085      	sub	sp, #20
   13cfa:	460b      	mov	r3, r1
    switch (n_args) {
   13cfc:	2801      	cmp	r0, #1
   13cfe:	d006      	beq.n	13d0e <mp_builtin_sum+0x18>
        default: value = args[1]; break;
   13d00:	684c      	ldr	r4, [r1, #4]
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   13d02:	4669      	mov	r1, sp
   13d04:	6818      	ldr	r0, [r3, #0]
   13d06:	f7f5 fe03 	bl	9910 <mp_getiter>
   13d0a:	4605      	mov	r5, r0
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   13d0c:	e007      	b.n	13d1e <mp_builtin_sum+0x28>
        case 1: value = MP_OBJ_NEW_SMALL_INT(0); break;
   13d0e:	2401      	movs	r4, #1
   13d10:	e7f7      	b.n	13d02 <mp_builtin_sum+0xc>
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
   13d12:	4602      	mov	r2, r0
   13d14:	4621      	mov	r1, r4
   13d16:	201a      	movs	r0, #26
   13d18:	f7f6 face 	bl	a2b8 <mp_binary_op>
   13d1c:	4604      	mov	r4, r0
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   13d1e:	4628      	mov	r0, r5
   13d20:	f7f5 fe64 	bl	99ec <mp_iternext>
   13d24:	2804      	cmp	r0, #4
   13d26:	d1f4      	bne.n	13d12 <mp_builtin_sum+0x1c>
}
   13d28:	4620      	mov	r0, r4
   13d2a:	b005      	add	sp, #20
   13d2c:	bd30      	pop	{r4, r5, pc}
	...

00013d30 <mp_builtin_next>:
STATIC mp_obj_t mp_builtin_next(mp_obj_t o) {
   13d30:	b508      	push	{r3, lr}
    mp_obj_t ret = mp_iternext_allow_raise(o);
   13d32:	f7f5 fe35 	bl	99a0 <mp_iternext_allow_raise>
    if (ret == MP_OBJ_STOP_ITERATION) {
   13d36:	2804      	cmp	r0, #4
   13d38:	d000      	beq.n	13d3c <mp_builtin_next+0xc>
}
   13d3a:	bd08      	pop	{r3, pc}
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   13d3c:	4802      	ldr	r0, [pc, #8]	; (13d48 <mp_builtin_next+0x18>)
   13d3e:	f7f8 feb3 	bl	caa8 <mp_obj_new_exception>
   13d42:	f7ec fd9d 	bl	880 <nlr_jump>
   13d46:	bf00      	nop
   13d48:	00026bd0 	.word	0x00026bd0

00013d4c <mp_builtin_ord>:
STATIC mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
   13d4c:	b500      	push	{lr}
   13d4e:	b083      	sub	sp, #12
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
   13d50:	a901      	add	r1, sp, #4
   13d52:	f7fc fa97 	bl	10284 <mp_obj_str_get_data>
        if (len == 1) {
   13d56:	9a01      	ldr	r2, [sp, #4]
   13d58:	2a01      	cmp	r2, #1
   13d5a:	d106      	bne.n	13d6a <mp_builtin_ord+0x1e>
            return MP_OBJ_NEW_SMALL_INT(str[0]);
   13d5c:	7800      	ldrb	r0, [r0, #0]
   13d5e:	0040      	lsls	r0, r0, #1
   13d60:	f040 0001 	orr.w	r0, r0, #1
}
   13d64:	b003      	add	sp, #12
   13d66:	f85d fb04 	ldr.w	pc, [sp], #4
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   13d6a:	4903      	ldr	r1, [pc, #12]	; (13d78 <mp_builtin_ord+0x2c>)
   13d6c:	4803      	ldr	r0, [pc, #12]	; (13d7c <mp_builtin_ord+0x30>)
   13d6e:	f7f8 fead 	bl	cacc <mp_obj_new_exception_msg_varg>
   13d72:	f7ec fd85 	bl	880 <nlr_jump>
   13d76:	bf00      	nop
   13d78:	00029308 	.word	0x00029308
   13d7c:	00026c84 	.word	0x00026c84

00013d80 <mp_builtin_pow>:
STATIC mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
   13d80:	b508      	push	{r3, lr}
    switch (n_args) {
   13d82:	2802      	cmp	r0, #2
   13d84:	d105      	bne.n	13d92 <mp_builtin_pow+0x12>
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
   13d86:	684a      	ldr	r2, [r1, #4]
   13d88:	6809      	ldr	r1, [r1, #0]
   13d8a:	2020      	movs	r0, #32
   13d8c:	f7f6 fa94 	bl	a2b8 <mp_binary_op>
}
   13d90:	bd08      	pop	{r3, pc}
            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");
   13d92:	4902      	ldr	r1, [pc, #8]	; (13d9c <mp_builtin_pow+0x1c>)
   13d94:	4802      	ldr	r0, [pc, #8]	; (13da0 <mp_builtin_pow+0x20>)
   13d96:	f7f6 fa67 	bl	a268 <mp_raise_msg>
   13d9a:	bf00      	nop
   13d9c:	0002934c 	.word	0x0002934c
   13da0:	00026ae0 	.word	0x00026ae0

00013da4 <mp_builtin_print>:
STATIC mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   13da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13da8:	b084      	sub	sp, #16
   13daa:	4605      	mov	r5, r0
   13dac:	460e      	mov	r6, r1
    mp_arg_parse_all(0, NULL, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, u.args);
   13dae:	af02      	add	r7, sp, #8
   13db0:	9701      	str	r7, [sp, #4]
   13db2:	4b1b      	ldr	r3, [pc, #108]	; (13e20 <mp_builtin_print+0x7c>)
   13db4:	9300      	str	r3, [sp, #0]
   13db6:	2302      	movs	r3, #2
   13db8:	2100      	movs	r1, #0
   13dba:	4608      	mov	r0, r1
   13dbc:	f7f6 fcde 	bl	a77c <mp_arg_parse_all>
    mp_obj_t end = u.args[ARG_end].u_obj;
   13dc0:	ac04      	add	r4, sp, #16
   13dc2:	f854 8d04 	ldr.w	r8, [r4, #-4]!
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
   13dc6:	4639      	mov	r1, r7
   13dc8:	9802      	ldr	r0, [sp, #8]
   13dca:	f7fc fa5b 	bl	10284 <mp_obj_str_get_data>
   13dce:	4607      	mov	r7, r0
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);
   13dd0:	4621      	mov	r1, r4
   13dd2:	4640      	mov	r0, r8
   13dd4:	f7fc fa56 	bl	10284 <mp_obj_str_get_data>
   13dd8:	4680      	mov	r8, r0
    for (size_t i = 0; i < n_args; i++) {
   13dda:	2400      	movs	r4, #0
   13ddc:	e006      	b.n	13dec <mp_builtin_print+0x48>
        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);
   13dde:	2200      	movs	r2, #0
   13de0:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   13de4:	480f      	ldr	r0, [pc, #60]	; (13e24 <mp_builtin_print+0x80>)
   13de6:	f7f6 feeb 	bl	abc0 <mp_obj_print_helper>
    for (size_t i = 0; i < n_args; i++) {
   13dea:	3401      	adds	r4, #1
   13dec:	42ac      	cmp	r4, r5
   13dee:	d20a      	bcs.n	13e06 <mp_builtin_print+0x62>
        if (i > 0) {
   13df0:	2c00      	cmp	r4, #0
   13df2:	d0f4      	beq.n	13dde <mp_builtin_print+0x3a>
            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);
   13df4:	2300      	movs	r3, #0
   13df6:	9301      	str	r3, [sp, #4]
   13df8:	9300      	str	r3, [sp, #0]
   13dfa:	9a02      	ldr	r2, [sp, #8]
   13dfc:	4639      	mov	r1, r7
   13dfe:	4809      	ldr	r0, [pc, #36]	; (13e24 <mp_builtin_print+0x80>)
   13e00:	f7ed fdac 	bl	195c <mp_print_strn>
   13e04:	e7eb      	b.n	13dde <mp_builtin_print+0x3a>
    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);
   13e06:	2300      	movs	r3, #0
   13e08:	9301      	str	r3, [sp, #4]
   13e0a:	9300      	str	r3, [sp, #0]
   13e0c:	9a03      	ldr	r2, [sp, #12]
   13e0e:	4641      	mov	r1, r8
   13e10:	4804      	ldr	r0, [pc, #16]	; (13e24 <mp_builtin_print+0x80>)
   13e12:	f7ed fda3 	bl	195c <mp_print_strn>
}
   13e16:	4804      	ldr	r0, [pc, #16]	; (13e28 <mp_builtin_print+0x84>)
   13e18:	b004      	add	sp, #16
   13e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e1e:	bf00      	nop
   13e20:	00029204 	.word	0x00029204
   13e24:	00023684 	.word	0x00023684
   13e28:	00027b40 	.word	0x00027b40

00013e2c <mp_builtin___repl_print__>:
    if (o != mp_const_none) {
   13e2c:	4b08      	ldr	r3, [pc, #32]	; (13e50 <mp_builtin___repl_print__+0x24>)
   13e2e:	4298      	cmp	r0, r3
   13e30:	d00c      	beq.n	13e4c <mp_builtin___repl_print__+0x20>
STATIC mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
   13e32:	b510      	push	{r4, lr}
   13e34:	4601      	mov	r1, r0
        mp_obj_print_helper(MP_PYTHON_PRINTER, o, PRINT_REPR);
   13e36:	4c07      	ldr	r4, [pc, #28]	; (13e54 <mp_builtin___repl_print__+0x28>)
   13e38:	2201      	movs	r2, #1
   13e3a:	4620      	mov	r0, r4
   13e3c:	f7f6 fec0 	bl	abc0 <mp_obj_print_helper>
        mp_print_str(MP_PYTHON_PRINTER, "\n");
   13e40:	4905      	ldr	r1, [pc, #20]	; (13e58 <mp_builtin___repl_print__+0x2c>)
   13e42:	4620      	mov	r0, r4
   13e44:	f7ed fd7b 	bl	193e <mp_print_str>
}
   13e48:	4801      	ldr	r0, [pc, #4]	; (13e50 <mp_builtin___repl_print__+0x24>)
   13e4a:	bd10      	pop	{r4, pc}
   13e4c:	4800      	ldr	r0, [pc, #0]	; (13e50 <mp_builtin___repl_print__+0x24>)
   13e4e:	4770      	bx	lr
   13e50:	00027b40 	.word	0x00027b40
   13e54:	00023684 	.word	0x00023684
   13e58:	0002aa44 	.word	0x0002aa44

00013e5c <mp_builtin_repr>:
STATIC mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
   13e5c:	b510      	push	{r4, lr}
   13e5e:	b086      	sub	sp, #24
   13e60:	4604      	mov	r4, r0
    vstr_init_print(&vstr, 16, &print);
   13e62:	466a      	mov	r2, sp
   13e64:	2110      	movs	r1, #16
   13e66:	a802      	add	r0, sp, #8
   13e68:	f7ed fcc8 	bl	17fc <vstr_init_print>
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
   13e6c:	2201      	movs	r2, #1
   13e6e:	4621      	mov	r1, r4
   13e70:	4668      	mov	r0, sp
   13e72:	f7f6 fea5 	bl	abc0 <mp_obj_print_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   13e76:	a902      	add	r1, sp, #8
   13e78:	4802      	ldr	r0, [pc, #8]	; (13e84 <mp_builtin_repr+0x28>)
   13e7a:	f7fb fd63 	bl	f944 <mp_obj_new_str_from_vstr>
}
   13e7e:	b006      	add	sp, #24
   13e80:	bd10      	pop	{r4, pc}
   13e82:	bf00      	nop
   13e84:	00028104 	.word	0x00028104

00013e88 <mp_builtin_round>:
STATIC mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
   13e88:	b538      	push	{r3, r4, r5, lr}
   13e8a:	ed2d 8b02 	vpush	{d8}
   13e8e:	4605      	mov	r5, r0
    mp_obj_t o_in = args[0];
   13e90:	6808      	ldr	r0, [r1, #0]
    if (MP_OBJ_IS_INT(o_in)) {
   13e92:	f010 0f01 	tst.w	r0, #1
   13e96:	d122      	bne.n	13ede <mp_builtin_round+0x56>
   13e98:	f010 0f03 	tst.w	r0, #3
   13e9c:	d103      	bne.n	13ea6 <mp_builtin_round+0x1e>
   13e9e:	6804      	ldr	r4, [r0, #0]
   13ea0:	4a13      	ldr	r2, [pc, #76]	; (13ef0 <mp_builtin_round+0x68>)
   13ea2:	4294      	cmp	r4, r2
   13ea4:	d01b      	beq.n	13ede <mp_builtin_round+0x56>
   13ea6:	460c      	mov	r4, r1
    mp_float_t val = mp_obj_get_float(o_in);
   13ea8:	f7f7 f838 	bl	af1c <mp_obj_get_float>
   13eac:	eeb0 8a40 	vmov.f32	s16, s0
    if (n_args > 1) {
   13eb0:	2d01      	cmp	r5, #1
   13eb2:	d917      	bls.n	13ee4 <mp_builtin_round+0x5c>
        mp_int_t num_dig = mp_obj_get_int(args[1]);
   13eb4:	6860      	ldr	r0, [r4, #4]
   13eb6:	f7f6 ff89 	bl	adcc <mp_obj_get_int>
        mp_float_t mult = MICROPY_FLOAT_C_FUN(pow)(10, num_dig);
   13eba:	ee07 0a90 	vmov	s15, r0
   13ebe:	eef8 0ae7 	vcvt.f32.s32	s1, s15
   13ec2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   13ec6:	f00a fd05 	bl	1e8d4 <powf>
   13eca:	eef0 8a40 	vmov.f32	s17, s0
        mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val * mult) / mult;
   13ece:	ee28 0a00 	vmul.f32	s0, s16, s0
   13ed2:	f00c fae7 	bl	204a4 <nearbyintf>
        return mp_obj_new_float(rounded);
   13ed6:	ee80 0a28 	vdiv.f32	s0, s0, s17
   13eda:	f7f8 ff8f 	bl	cdfc <mp_obj_new_float>
}
   13ede:	ecbd 8b02 	vpop	{d8}
   13ee2:	bd38      	pop	{r3, r4, r5, pc}
    mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val);
   13ee4:	f00c fade 	bl	204a4 <nearbyintf>
    return mp_obj_new_int_from_float(rounded);
   13ee8:	f7f9 fd6a 	bl	d9c0 <mp_obj_new_int_from_float>
   13eec:	e7f7      	b.n	13ede <mp_builtin_round+0x56>
   13eee:	bf00      	nop
   13ef0:	00027498 	.word	0x00027498

00013ef4 <mp_builtin_sorted>:
STATIC mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   13ef4:	b530      	push	{r4, r5, lr}
   13ef6:	b083      	sub	sp, #12
    if (n_args > 1) {
   13ef8:	2801      	cmp	r0, #1
   13efa:	d810      	bhi.n	13f1e <mp_builtin_sorted+0x2a>
   13efc:	4614      	mov	r4, r2
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
   13efe:	4809      	ldr	r0, [pc, #36]	; (13f24 <mp_builtin_sorted+0x30>)
   13f00:	68c5      	ldr	r5, [r0, #12]
   13f02:	460b      	mov	r3, r1
   13f04:	2200      	movs	r2, #0
   13f06:	2101      	movs	r1, #1
   13f08:	47a8      	blx	r5
   13f0a:	a902      	add	r1, sp, #8
   13f0c:	f841 0d04 	str.w	r0, [r1, #-4]!
    mp_obj_list_sort(1, &self, kwargs);
   13f10:	4622      	mov	r2, r4
   13f12:	2001      	movs	r0, #1
   13f14:	f7fa fb80 	bl	e618 <mp_obj_list_sort>
}
   13f18:	9801      	ldr	r0, [sp, #4]
   13f1a:	b003      	add	sp, #12
   13f1c:	bd30      	pop	{r4, r5, pc}
        mp_raise_TypeError("must use keyword argument for key function");
   13f1e:	4802      	ldr	r0, [pc, #8]	; (13f28 <mp_builtin_sorted+0x34>)
   13f20:	f7f6 fbc2 	bl	a6a8 <mp_raise_TypeError>
   13f24:	00027890 	.word	0x00027890
   13f28:	0002939c 	.word	0x0002939c

00013f2c <mp_builtin_hasattr>:
STATIC mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
   13f2c:	b510      	push	{r4, lr}
   13f2e:	b082      	sub	sp, #8
   13f30:	4604      	mov	r4, r0
    qstr attr = mp_obj_str_get_qstr(attr_in);
   13f32:	4608      	mov	r0, r1
   13f34:	f7fc f974 	bl	10220 <mp_obj_str_get_qstr>
    mp_load_method_protected(object_in, attr, dest, false);
   13f38:	2300      	movs	r3, #0
   13f3a:	466a      	mov	r2, sp
   13f3c:	4601      	mov	r1, r0
   13f3e:	4620      	mov	r0, r4
   13f40:	f7f5 fca0 	bl	9884 <mp_load_method_protected>
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   13f44:	9b00      	ldr	r3, [sp, #0]
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   13f46:	b113      	cbz	r3, 13f4e <mp_builtin_hasattr+0x22>
   13f48:	4802      	ldr	r0, [pc, #8]	; (13f54 <mp_builtin_hasattr+0x28>)
}
   13f4a:	b002      	add	sp, #8
   13f4c:	bd10      	pop	{r4, pc}
   13f4e:	4802      	ldr	r0, [pc, #8]	; (13f58 <mp_builtin_hasattr+0x2c>)
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   13f50:	e7fb      	b.n	13f4a <mp_builtin_hasattr+0x1e>
   13f52:	bf00      	nop
   13f54:	00025f4c 	.word	0x00025f4c
   13f58:	00025f44 	.word	0x00025f44

00013f5c <mp_builtin_getattr>:
STATIC mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
   13f5c:	b530      	push	{r4, r5, lr}
   13f5e:	b083      	sub	sp, #12
    if (n_args > 2) {
   13f60:	2802      	cmp	r0, #2
   13f62:	d912      	bls.n	13f8a <mp_builtin_getattr+0x2e>
        defval = args[2];
   13f64:	688c      	ldr	r4, [r1, #8]
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   13f66:	680d      	ldr	r5, [r1, #0]
   13f68:	6848      	ldr	r0, [r1, #4]
   13f6a:	f7fc f959 	bl	10220 <mp_obj_str_get_qstr>
   13f6e:	4601      	mov	r1, r0
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   13f70:	b16c      	cbz	r4, 13f8e <mp_builtin_getattr+0x32>
   13f72:	4b09      	ldr	r3, [pc, #36]	; (13f98 <mp_builtin_getattr+0x3c>)
   13f74:	466a      	mov	r2, sp
   13f76:	4628      	mov	r0, r5
   13f78:	4798      	blx	r3
    if (dest[0] == MP_OBJ_NULL) {
   13f7a:	9800      	ldr	r0, [sp, #0]
   13f7c:	b148      	cbz	r0, 13f92 <mp_builtin_getattr+0x36>
    } else if (dest[1] == MP_OBJ_NULL) {
   13f7e:	9901      	ldr	r1, [sp, #4]
   13f80:	b109      	cbz	r1, 13f86 <mp_builtin_getattr+0x2a>
        return mp_obj_new_bound_meth(dest[0], dest[1]);
   13f82:	f7f7 fd77 	bl	ba74 <mp_obj_new_bound_meth>
}
   13f86:	b003      	add	sp, #12
   13f88:	bd30      	pop	{r4, r5, pc}
    mp_obj_t defval = MP_OBJ_NULL;
   13f8a:	2400      	movs	r4, #0
   13f8c:	e7eb      	b.n	13f66 <mp_builtin_getattr+0xa>
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   13f8e:	4b03      	ldr	r3, [pc, #12]	; (13f9c <mp_builtin_getattr+0x40>)
   13f90:	e7f0      	b.n	13f74 <mp_builtin_getattr+0x18>
        return defval;
   13f92:	4620      	mov	r0, r4
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   13f94:	e7f7      	b.n	13f86 <mp_builtin_getattr+0x2a>
   13f96:	bf00      	nop
   13f98:	00009789 	.word	0x00009789
   13f9c:	0000980d 	.word	0x0000980d

00013fa0 <mp_builtin_setattr>:
STATIC mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
   13fa0:	b538      	push	{r3, r4, r5, lr}
   13fa2:	4604      	mov	r4, r0
   13fa4:	4615      	mov	r5, r2
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
   13fa6:	4608      	mov	r0, r1
   13fa8:	f7fc f93a 	bl	10220 <mp_obj_str_get_qstr>
   13fac:	462a      	mov	r2, r5
   13fae:	4601      	mov	r1, r0
   13fb0:	4620      	mov	r0, r4
   13fb2:	f7f5 fc89 	bl	98c8 <mp_store_attr>
}
   13fb6:	4801      	ldr	r0, [pc, #4]	; (13fbc <mp_builtin_setattr+0x1c>)
   13fb8:	bd38      	pop	{r3, r4, r5, pc}
   13fba:	bf00      	nop
   13fbc:	00027b40 	.word	0x00027b40

00013fc0 <fabs_funcf>:
}
MATH_FUN_2(copysign, copysign_func)
// fabs(x)
STATIC mp_float_t MICROPY_FLOAT_C_FUN(fabs_func)(mp_float_t x) {
    return MICROPY_FLOAT_C_FUN(fabs)(x);
}
   13fc0:	eeb0 0ac0 	vabs.f32	s0, s0
   13fc4:	4770      	bx	lr
	...

00013fc8 <mp_math_isnan>:
// isfinite(x)
MATH_FUN_1_TO_BOOL(isfinite, isfinite)
// isinf(x)
MATH_FUN_1_TO_BOOL(isinf, isinf)
// isnan(x)
MATH_FUN_1_TO_BOOL(isnan, isnan)
   13fc8:	b508      	push	{r3, lr}
   13fca:	f7f6 ffa7 	bl	af1c <mp_obj_get_float>
   13fce:	eeb4 0a40 	vcmp.f32	s0, s0
   13fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13fd6:	d601      	bvs.n	13fdc <mp_math_isnan+0x14>
   13fd8:	4801      	ldr	r0, [pc, #4]	; (13fe0 <mp_math_isnan+0x18>)
   13fda:	bd08      	pop	{r3, pc}
   13fdc:	4801      	ldr	r0, [pc, #4]	; (13fe4 <mp_math_isnan+0x1c>)
   13fde:	e7fc      	b.n	13fda <mp_math_isnan+0x12>
   13fe0:	00025f44 	.word	0x00025f44
   13fe4:	00025f4c 	.word	0x00025f4c

00013fe8 <mp_math_isfinite>:
MATH_FUN_1_TO_BOOL(isfinite, isfinite)
   13fe8:	b508      	push	{r3, lr}
   13fea:	f7f6 ff97 	bl	af1c <mp_obj_get_float>
   13fee:	eeb0 0ac0 	vabs.f32	s0, s0
   13ff2:	eddf 7a05 	vldr	s15, [pc, #20]	; 14008 <mp_math_isfinite+0x20>
   13ff6:	eeb4 0a67 	vcmp.f32	s0, s15
   13ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ffe:	d901      	bls.n	14004 <mp_math_isfinite+0x1c>
   14000:	4802      	ldr	r0, [pc, #8]	; (1400c <mp_math_isfinite+0x24>)
   14002:	bd08      	pop	{r3, pc}
   14004:	4802      	ldr	r0, [pc, #8]	; (14010 <mp_math_isfinite+0x28>)
   14006:	e7fc      	b.n	14002 <mp_math_isfinite+0x1a>
   14008:	7f7fffff 	.word	0x7f7fffff
   1400c:	00025f44 	.word	0x00025f44
   14010:	00025f4c 	.word	0x00025f4c

00014014 <mp_math_isinf>:
MATH_FUN_1_TO_BOOL(isinf, isinf)
   14014:	b508      	push	{r3, lr}
   14016:	f7f6 ff81 	bl	af1c <mp_obj_get_float>
   1401a:	eeb0 0ac0 	vabs.f32	s0, s0
   1401e:	eddf 7a05 	vldr	s15, [pc, #20]	; 14034 <mp_math_isinf+0x20>
   14022:	eeb4 0a67 	vcmp.f32	s0, s15
   14026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1402a:	dd01      	ble.n	14030 <mp_math_isinf+0x1c>
   1402c:	4802      	ldr	r0, [pc, #8]	; (14038 <mp_math_isinf+0x24>)
   1402e:	bd08      	pop	{r3, pc}
   14030:	4802      	ldr	r0, [pc, #8]	; (1403c <mp_math_isinf+0x28>)
   14032:	e7fc      	b.n	1402e <mp_math_isinf+0x1a>
   14034:	7f7fffff 	.word	0x7f7fffff
   14038:	00025f4c 	.word	0x00025f4c
   1403c:	00025f44 	.word	0x00025f44

00014040 <mp_math_degrees>:
    return mp_obj_new_float(mp_obj_get_float(x_obj) * (MP_PI / MICROPY_FLOAT_CONST(180.0)));
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(mp_math_radians_obj, mp_math_radians);

// degrees(x)
STATIC mp_obj_t mp_math_degrees(mp_obj_t x_obj) {
   14040:	b508      	push	{r3, lr}
    return mp_obj_new_float(mp_obj_get_float(x_obj) * (MICROPY_FLOAT_CONST(180.0) / MP_PI));
   14042:	f7f6 ff6b 	bl	af1c <mp_obj_get_float>
   14046:	eddf 7a03 	vldr	s15, [pc, #12]	; 14054 <mp_math_degrees+0x14>
   1404a:	ee20 0a27 	vmul.f32	s0, s0, s15
   1404e:	f7f8 fed5 	bl	cdfc <mp_obj_new_float>
}
   14052:	bd08      	pop	{r3, pc}
   14054:	42652ee0 	.word	0x42652ee0

00014058 <mp_math_radians>:
STATIC mp_obj_t mp_math_radians(mp_obj_t x_obj) {
   14058:	b508      	push	{r3, lr}
    return mp_obj_new_float(mp_obj_get_float(x_obj) * (MP_PI / MICROPY_FLOAT_CONST(180.0)));
   1405a:	f7f6 ff5f 	bl	af1c <mp_obj_get_float>
   1405e:	eddf 7a03 	vldr	s15, [pc, #12]	; 1406c <mp_math_radians+0x14>
   14062:	ee20 0a27 	vmul.f32	s0, s0, s15
   14066:	f7f8 fec9 	bl	cdfc <mp_obj_new_float>
}
   1406a:	bd08      	pop	{r3, pc}
   1406c:	3c8efa35 	.word	0x3c8efa35

00014070 <mp_math_trunc>:
MATH_FUN_1_TO_INT(trunc, trunc)
   14070:	b508      	push	{r3, lr}
   14072:	f7f6 ff53 	bl	af1c <mp_obj_get_float>
   14076:	f00b fa07 	bl	1f488 <truncf>
   1407a:	f7f9 fca1 	bl	d9c0 <mp_obj_new_int_from_float>
   1407e:	bd08      	pop	{r3, pc}

00014080 <mp_math_modf>:
STATIC mp_obj_t mp_math_modf(mp_obj_t x_obj) {
   14080:	b510      	push	{r4, lr}
   14082:	b084      	sub	sp, #16
    mp_float_t int_part = 0.0;
   14084:	ac04      	add	r4, sp, #16
   14086:	2300      	movs	r3, #0
   14088:	f844 3d04 	str.w	r3, [r4, #-4]!
    mp_float_t fractional_part = MICROPY_FLOAT_C_FUN(modf)(mp_obj_get_float(x_obj), &int_part);
   1408c:	f7f6 ff46 	bl	af1c <mp_obj_get_float>
   14090:	4620      	mov	r0, r4
   14092:	f00c faaf 	bl	205f4 <modff>
    tuple[0] = mp_obj_new_float(fractional_part);
   14096:	f7f8 feb1 	bl	cdfc <mp_obj_new_float>
   1409a:	9001      	str	r0, [sp, #4]
    tuple[1] = mp_obj_new_float(int_part);
   1409c:	ed9d 0a03 	vldr	s0, [sp, #12]
   140a0:	f7f8 feac 	bl	cdfc <mp_obj_new_float>
   140a4:	9002      	str	r0, [sp, #8]
    return mp_obj_new_tuple(2, tuple);
   140a6:	a901      	add	r1, sp, #4
   140a8:	2002      	movs	r0, #2
   140aa:	f7fd fbcb 	bl	11844 <mp_obj_new_tuple>
}
   140ae:	b004      	add	sp, #16
   140b0:	bd10      	pop	{r4, pc}

000140b2 <mp_math_ldexp>:
MATH_FUN_2_FLT_INT(ldexp, ldexp)
   140b2:	b510      	push	{r4, lr}
   140b4:	ed2d 8b02 	vpush	{d8}
   140b8:	460c      	mov	r4, r1
   140ba:	f7f6 ff2f 	bl	af1c <mp_obj_get_float>
   140be:	eeb0 8a40 	vmov.f32	s16, s0
   140c2:	4620      	mov	r0, r4
   140c4:	f7f6 fe82 	bl	adcc <mp_obj_get_int>
   140c8:	eeb0 0a48 	vmov.f32	s0, s16
   140cc:	f00c fa7a 	bl	205c4 <ldexpf>
   140d0:	f7f8 fe94 	bl	cdfc <mp_obj_new_float>
   140d4:	ecbd 8b02 	vpop	{d8}
   140d8:	bd10      	pop	{r4, pc}

000140da <mp_math_frexp>:
STATIC mp_obj_t mp_math_frexp(mp_obj_t x_obj) {
   140da:	b510      	push	{r4, lr}
   140dc:	b084      	sub	sp, #16
    int int_exponent = 0;
   140de:	ac04      	add	r4, sp, #16
   140e0:	2300      	movs	r3, #0
   140e2:	f844 3d04 	str.w	r3, [r4, #-4]!
    mp_float_t significand = MICROPY_FLOAT_C_FUN(frexp)(mp_obj_get_float(x_obj), &int_exponent);
   140e6:	f7f6 ff19 	bl	af1c <mp_obj_get_float>
   140ea:	4620      	mov	r0, r4
   140ec:	f00c fa40 	bl	20570 <frexpf>
    tuple[0] = mp_obj_new_float(significand);
   140f0:	f7f8 fe84 	bl	cdfc <mp_obj_new_float>
   140f4:	9001      	str	r0, [sp, #4]
    tuple[1] = mp_obj_new_int(int_exponent);
   140f6:	9803      	ldr	r0, [sp, #12]
   140f8:	f7f9 ff1f 	bl	df3a <mp_obj_new_int>
   140fc:	9002      	str	r0, [sp, #8]
    return mp_obj_new_tuple(2, tuple);
   140fe:	a901      	add	r1, sp, #4
   14100:	2002      	movs	r0, #2
   14102:	f7fd fb9f 	bl	11844 <mp_obj_new_tuple>
}
   14106:	b004      	add	sp, #16
   14108:	bd10      	pop	{r4, pc}
	...

0001410c <math_error>:
STATIC NORETURN void math_error(void) {
   1410c:	b508      	push	{r3, lr}
    mp_raise_ValueError("math domain error");
   1410e:	4801      	ldr	r0, [pc, #4]	; (14114 <math_error+0x8>)
   14110:	f7f6 f8ca 	bl	a2a8 <mp_raise_ValueError>
   14114:	000296d0 	.word	0x000296d0

00014118 <math_generic_2>:
STATIC mp_obj_t math_generic_2(mp_obj_t x_obj, mp_obj_t y_obj, mp_float_t (*f)(mp_float_t, mp_float_t)) {
   14118:	b538      	push	{r3, r4, r5, lr}
   1411a:	ed2d 8b02 	vpush	{d8}
   1411e:	460d      	mov	r5, r1
   14120:	4614      	mov	r4, r2
    mp_float_t x = mp_obj_get_float(x_obj);
   14122:	f7f6 fefb 	bl	af1c <mp_obj_get_float>
   14126:	eeb0 8a40 	vmov.f32	s16, s0
    mp_float_t y = mp_obj_get_float(y_obj);
   1412a:	4628      	mov	r0, r5
   1412c:	f7f6 fef6 	bl	af1c <mp_obj_get_float>
   14130:	eef0 8a40 	vmov.f32	s17, s0
    mp_float_t ans = f(x, y);
   14134:	eef0 0a40 	vmov.f32	s1, s0
   14138:	eeb0 0a48 	vmov.f32	s0, s16
   1413c:	47a0      	blx	r4
    if ((isnan(ans) && !isnan(x) && !isnan(y)) || (isinf(ans) && !isinf(x))) {
   1413e:	eeb4 0a40 	vcmp.f32	s0, s0
   14142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14146:	d614      	bvs.n	14172 <math_generic_2+0x5a>
   14148:	eef0 7ac0 	vabs.f32	s15, s0
   1414c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 1418c <math_generic_2+0x74>
   14150:	eef4 7a47 	vcmp.f32	s15, s14
   14154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14158:	dd06      	ble.n	14168 <math_generic_2+0x50>
   1415a:	eeb0 8ac8 	vabs.f32	s16, s16
   1415e:	eeb4 8a47 	vcmp.f32	s16, s14
   14162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14166:	dd0e      	ble.n	14186 <math_generic_2+0x6e>
    return mp_obj_new_float(ans);
   14168:	f7f8 fe48 	bl	cdfc <mp_obj_new_float>
}
   1416c:	ecbd 8b02 	vpop	{d8}
   14170:	bd38      	pop	{r3, r4, r5, pc}
    if ((isnan(ans) && !isnan(x) && !isnan(y)) || (isinf(ans) && !isinf(x))) {
   14172:	eeb4 8a48 	vcmp.f32	s16, s16
   14176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1417a:	d6e5      	bvs.n	14148 <math_generic_2+0x30>
   1417c:	eef4 8a68 	vcmp.f32	s17, s17
   14180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14184:	d6e0      	bvs.n	14148 <math_generic_2+0x30>
        math_error();
   14186:	f7ff ffc1 	bl	1410c <math_error>
   1418a:	bf00      	nop
   1418c:	7f7fffff 	.word	0x7f7fffff

00014190 <mp_math_fmod>:
MATH_FUN_2(fmod, fmod)
   14190:	b508      	push	{r3, lr}
   14192:	4a02      	ldr	r2, [pc, #8]	; (1419c <mp_math_fmod+0xc>)
   14194:	f7ff ffc0 	bl	14118 <math_generic_2>
   14198:	bd08      	pop	{r3, pc}
   1419a:	bf00      	nop
   1419c:	0001fbd1 	.word	0x0001fbd1

000141a0 <mp_math_copysign>:
MATH_FUN_2(copysign, copysign_func)
   141a0:	b508      	push	{r3, lr}
   141a2:	4a02      	ldr	r2, [pc, #8]	; (141ac <mp_math_copysign+0xc>)
   141a4:	f7ff ffb8 	bl	14118 <math_generic_2>
   141a8:	bd08      	pop	{r3, pc}
   141aa:	bf00      	nop
   141ac:	000142c9 	.word	0x000142c9

000141b0 <mp_math_atan2>:
MATH_FUN_2(atan2, atan2)
   141b0:	b508      	push	{r3, lr}
   141b2:	4a02      	ldr	r2, [pc, #8]	; (141bc <mp_math_atan2+0xc>)
   141b4:	f7ff ffb0 	bl	14118 <math_generic_2>
   141b8:	bd08      	pop	{r3, pc}
   141ba:	bf00      	nop
   141bc:	0001f6d9 	.word	0x0001f6d9

000141c0 <mp_math_pow>:
MATH_FUN_2(pow, pow)
   141c0:	b508      	push	{r3, lr}
   141c2:	4a02      	ldr	r2, [pc, #8]	; (141cc <mp_math_pow+0xc>)
   141c4:	f7ff ffa8 	bl	14118 <math_generic_2>
   141c8:	bd08      	pop	{r3, pc}
   141ca:	bf00      	nop
   141cc:	0001e8d5 	.word	0x0001e8d5

000141d0 <math_generic_1>:
STATIC mp_obj_t math_generic_1(mp_obj_t x_obj, mp_float_t (*f)(mp_float_t)) {
   141d0:	b510      	push	{r4, lr}
   141d2:	ed2d 8b02 	vpush	{d8}
   141d6:	460c      	mov	r4, r1
    mp_float_t x = mp_obj_get_float(x_obj);
   141d8:	f7f6 fea0 	bl	af1c <mp_obj_get_float>
   141dc:	eeb0 8a40 	vmov.f32	s16, s0
    mp_float_t ans = f(x);
   141e0:	47a0      	blx	r4
    if ((isnan(ans) && !isnan(x)) || (isinf(ans) && !isinf(x))) {
   141e2:	eeb4 0a40 	vcmp.f32	s0, s0
   141e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   141ea:	d614      	bvs.n	14216 <math_generic_1+0x46>
   141ec:	eef0 7ac0 	vabs.f32	s15, s0
   141f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 14224 <math_generic_1+0x54>
   141f4:	eef4 7a47 	vcmp.f32	s15, s14
   141f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   141fc:	dd06      	ble.n	1420c <math_generic_1+0x3c>
   141fe:	eeb0 8ac8 	vabs.f32	s16, s16
   14202:	eeb4 8a47 	vcmp.f32	s16, s14
   14206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1420a:	dd09      	ble.n	14220 <math_generic_1+0x50>
    return mp_obj_new_float(ans);
   1420c:	f7f8 fdf6 	bl	cdfc <mp_obj_new_float>
}
   14210:	ecbd 8b02 	vpop	{d8}
   14214:	bd10      	pop	{r4, pc}
    if ((isnan(ans) && !isnan(x)) || (isinf(ans) && !isinf(x))) {
   14216:	eeb4 8a48 	vcmp.f32	s16, s16
   1421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1421e:	d6e5      	bvs.n	141ec <math_generic_1+0x1c>
        math_error();
   14220:	f7ff ff74 	bl	1410c <math_error>
   14224:	7f7fffff 	.word	0x7f7fffff

00014228 <mp_math_fabs>:
MATH_FUN_1(fabs, fabs_func)
   14228:	b508      	push	{r3, lr}
   1422a:	4902      	ldr	r1, [pc, #8]	; (14234 <mp_math_fabs+0xc>)
   1422c:	f7ff ffd0 	bl	141d0 <math_generic_1>
   14230:	bd08      	pop	{r3, pc}
   14232:	bf00      	nop
   14234:	00013fc1 	.word	0x00013fc1

00014238 <mp_math_atan>:
MATH_FUN_1(atan, atan)
   14238:	b508      	push	{r3, lr}
   1423a:	4902      	ldr	r1, [pc, #8]	; (14244 <mp_math_atan+0xc>)
   1423c:	f7ff ffc8 	bl	141d0 <math_generic_1>
   14240:	bd08      	pop	{r3, pc}
   14242:	bf00      	nop
   14244:	0001f829 	.word	0x0001f829

00014248 <mp_math_asin>:
MATH_FUN_1(asin, asin)
   14248:	b508      	push	{r3, lr}
   1424a:	4902      	ldr	r1, [pc, #8]	; (14254 <mp_math_asin+0xc>)
   1424c:	f7ff ffc0 	bl	141d0 <math_generic_1>
   14250:	bd08      	pop	{r3, pc}
   14252:	bf00      	nop
   14254:	0001f511 	.word	0x0001f511

00014258 <mp_math_acos>:
MATH_FUN_1(acos, acos)
   14258:	b508      	push	{r3, lr}
   1425a:	4902      	ldr	r1, [pc, #8]	; (14264 <mp_math_acos+0xc>)
   1425c:	f7ff ffb8 	bl	141d0 <math_generic_1>
   14260:	bd08      	pop	{r3, pc}
   14262:	bf00      	nop
   14264:	0001f5cd 	.word	0x0001f5cd

00014268 <mp_math_tan>:
MATH_FUN_1(tan, tan)
   14268:	b508      	push	{r3, lr}
   1426a:	4902      	ldr	r1, [pc, #8]	; (14274 <mp_math_tan+0xc>)
   1426c:	f7ff ffb0 	bl	141d0 <math_generic_1>
   14270:	bd08      	pop	{r3, pc}
   14272:	bf00      	nop
   14274:	000206c9 	.word	0x000206c9

00014278 <mp_math_sin>:
MATH_FUN_1(sin, sin)
   14278:	b508      	push	{r3, lr}
   1427a:	4902      	ldr	r1, [pc, #8]	; (14284 <mp_math_sin+0xc>)
   1427c:	f7ff ffa8 	bl	141d0 <math_generic_1>
   14280:	bd08      	pop	{r3, pc}
   14282:	bf00      	nop
   14284:	00020645 	.word	0x00020645

00014288 <mp_math_cos>:
MATH_FUN_1(cos, cos)
   14288:	b508      	push	{r3, lr}
   1428a:	4902      	ldr	r1, [pc, #8]	; (14294 <mp_math_cos+0xc>)
   1428c:	f7ff ffa0 	bl	141d0 <math_generic_1>
   14290:	bd08      	pop	{r3, pc}
   14292:	bf00      	nop
   14294:	000204f1 	.word	0x000204f1

00014298 <mp_math_exp>:
MATH_FUN_1(exp, exp)
   14298:	b508      	push	{r3, lr}
   1429a:	4902      	ldr	r1, [pc, #8]	; (142a4 <mp_math_exp+0xc>)
   1429c:	f7ff ff98 	bl	141d0 <math_generic_1>
   142a0:	bd08      	pop	{r3, pc}
   142a2:	bf00      	nop
   142a4:	0001ee3d 	.word	0x0001ee3d

000142a8 <mp_math_sqrt>:
MATH_FUN_1(sqrt, sqrt)
   142a8:	b508      	push	{r3, lr}
   142aa:	4902      	ldr	r1, [pc, #8]	; (142b4 <mp_math_sqrt+0xc>)
   142ac:	f7ff ff90 	bl	141d0 <math_generic_1>
   142b0:	bd08      	pop	{r3, pc}
   142b2:	bf00      	nop
   142b4:	0001f4cd 	.word	0x0001f4cd

000142b8 <mp_math_floor>:
MATH_FUN_1_TO_INT(floor, floor) //TODO: delegate to x.__floor__() if x is not a float
   142b8:	b508      	push	{r3, lr}
   142ba:	f7f6 fe2f 	bl	af1c <mp_obj_get_float>
   142be:	f00b f8ab 	bl	1f418 <floorf>
   142c2:	f7f9 fb7d 	bl	d9c0 <mp_obj_new_int_from_float>
   142c6:	bd08      	pop	{r3, pc}

000142c8 <copysign_funcf>:
    return MICROPY_FLOAT_C_FUN(copysign)(x, y);
   142c8:	eeb0 0ac0 	vabs.f32	s0, s0
   142cc:	ee10 3a90 	vmov	r3, s1
   142d0:	2b00      	cmp	r3, #0
   142d2:	da01      	bge.n	142d8 <copysign_funcf+0x10>
   142d4:	eeb1 0a40 	vneg.f32	s0, s0
}
   142d8:	4770      	bx	lr

000142da <mp_math_ceil>:
MATH_FUN_1_TO_INT(ceil, ceil)
   142da:	b508      	push	{r3, lr}
   142dc:	f7f6 fe1e 	bl	af1c <mp_obj_get_float>
   142e0:	f00b f862 	bl	1f3a8 <ceilf>
   142e4:	f7f9 fb6c 	bl	d9c0 <mp_obj_new_int_from_float>
   142e8:	bd08      	pop	{r3, pc}
	...

000142ec <mp_math_log>:
STATIC mp_obj_t mp_math_log(size_t n_args, const mp_obj_t *args) {
   142ec:	b538      	push	{r3, r4, r5, lr}
   142ee:	ed2d 8b02 	vpush	{d8}
   142f2:	4605      	mov	r5, r0
   142f4:	460c      	mov	r4, r1
    mp_float_t x = mp_obj_get_float(args[0]);
   142f6:	6808      	ldr	r0, [r1, #0]
   142f8:	f7f6 fe10 	bl	af1c <mp_obj_get_float>
    if (x <= (mp_float_t)0.0) {
   142fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   14300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14304:	d91d      	bls.n	14342 <mp_math_log+0x56>
    mp_float_t l = MICROPY_FLOAT_C_FUN(log)(x);
   14306:	f00a ff49 	bl	1f19c <logf>
   1430a:	eeb0 8a40 	vmov.f32	s16, s0
    if (n_args == 1) {
   1430e:	2d01      	cmp	r5, #1
   14310:	d019      	beq.n	14346 <mp_math_log+0x5a>
        mp_float_t base = mp_obj_get_float(args[1]);
   14312:	6860      	ldr	r0, [r4, #4]
   14314:	f7f6 fe02 	bl	af1c <mp_obj_get_float>
        if (base <= (mp_float_t)0.0) {
   14318:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   1431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14320:	d914      	bls.n	1434c <mp_math_log+0x60>
        } else if (base == (mp_float_t)1.0) {
   14322:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   14326:	eeb4 0a67 	vcmp.f32	s0, s15
   1432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1432e:	d00f      	beq.n	14350 <mp_math_log+0x64>
        return mp_obj_new_float(l / MICROPY_FLOAT_C_FUN(log)(base));
   14330:	f00a ff34 	bl	1f19c <logf>
   14334:	ee88 0a00 	vdiv.f32	s0, s16, s0
   14338:	f7f8 fd60 	bl	cdfc <mp_obj_new_float>
}
   1433c:	ecbd 8b02 	vpop	{d8}
   14340:	bd38      	pop	{r3, r4, r5, pc}
        math_error();
   14342:	f7ff fee3 	bl	1410c <math_error>
        return mp_obj_new_float(l);
   14346:	f7f8 fd59 	bl	cdfc <mp_obj_new_float>
   1434a:	e7f7      	b.n	1433c <mp_math_log+0x50>
            math_error();
   1434c:	f7ff fede 	bl	1410c <math_error>
            mp_raise_msg(&mp_type_ZeroDivisionError, "division by zero");
   14350:	4901      	ldr	r1, [pc, #4]	; (14358 <mp_math_log+0x6c>)
   14352:	4802      	ldr	r0, [pc, #8]	; (1435c <mp_math_log+0x70>)
   14354:	f7f5 ff88 	bl	a268 <mp_raise_msg>
   14358:	000260a4 	.word	0x000260a4
   1435c:	00026cfc 	.word	0x00026cfc

00014360 <mp_cmath_sin>:
    return mp_obj_new_complex(MICROPY_FLOAT_C_FUN(cos)(real) * MICROPY_FLOAT_C_FUN(cosh)(imag), -MICROPY_FLOAT_C_FUN(sin)(real) * MICROPY_FLOAT_C_FUN(sinh)(imag));
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(mp_cmath_cos_obj, mp_cmath_cos);

// sin(z): return the sine of z
STATIC mp_obj_t mp_cmath_sin(mp_obj_t z_obj) {
   14360:	b500      	push	{lr}
   14362:	ed2d 8b04 	vpush	{d8-d9}
   14366:	b083      	sub	sp, #12
    mp_float_t real, imag;
    mp_obj_get_complex(z_obj, &real, &imag);
   14368:	466a      	mov	r2, sp
   1436a:	a901      	add	r1, sp, #4
   1436c:	f7f6 fdf0 	bl	af50 <mp_obj_get_complex>
    return mp_obj_new_complex(MICROPY_FLOAT_C_FUN(sin)(real) * MICROPY_FLOAT_C_FUN(cosh)(imag), MICROPY_FLOAT_C_FUN(cos)(real) * MICROPY_FLOAT_C_FUN(sinh)(imag));
   14370:	ed9d 0a01 	vldr	s0, [sp, #4]
   14374:	f00c f966 	bl	20644 <sinf>
   14378:	eef0 8a40 	vmov.f32	s17, s0
   1437c:	ed9d 0a00 	vldr	s0, [sp]
   14380:	f00a ff8e 	bl	1f2a0 <coshf>
   14384:	eeb0 8a40 	vmov.f32	s16, s0
   14388:	ed9d 0a01 	vldr	s0, [sp, #4]
   1438c:	f00c f8b0 	bl	204f0 <cosf>
   14390:	eeb0 9a40 	vmov.f32	s18, s0
   14394:	ed9d 0a00 	vldr	s0, [sp]
   14398:	f00a ffc6 	bl	1f328 <sinhf>
   1439c:	ee69 0a00 	vmul.f32	s1, s18, s0
   143a0:	ee28 0a88 	vmul.f32	s0, s17, s16
   143a4:	f7f7 fc4c 	bl	bc40 <mp_obj_new_complex>
}
   143a8:	b003      	add	sp, #12
   143aa:	ecbd 8b04 	vpop	{d8-d9}
   143ae:	f85d fb04 	ldr.w	pc, [sp], #4

000143b2 <mp_cmath_cos>:
STATIC mp_obj_t mp_cmath_cos(mp_obj_t z_obj) {
   143b2:	b500      	push	{lr}
   143b4:	ed2d 8b04 	vpush	{d8-d9}
   143b8:	b083      	sub	sp, #12
    mp_obj_get_complex(z_obj, &real, &imag);
   143ba:	466a      	mov	r2, sp
   143bc:	a901      	add	r1, sp, #4
   143be:	f7f6 fdc7 	bl	af50 <mp_obj_get_complex>
    return mp_obj_new_complex(MICROPY_FLOAT_C_FUN(cos)(real) * MICROPY_FLOAT_C_FUN(cosh)(imag), -MICROPY_FLOAT_C_FUN(sin)(real) * MICROPY_FLOAT_C_FUN(sinh)(imag));
   143c2:	ed9d 0a01 	vldr	s0, [sp, #4]
   143c6:	f00c f893 	bl	204f0 <cosf>
   143ca:	eef0 8a40 	vmov.f32	s17, s0
   143ce:	ed9d 0a00 	vldr	s0, [sp]
   143d2:	f00a ff65 	bl	1f2a0 <coshf>
   143d6:	eeb0 8a40 	vmov.f32	s16, s0
   143da:	ed9d 0a01 	vldr	s0, [sp, #4]
   143de:	f00c f931 	bl	20644 <sinf>
   143e2:	eeb1 9a40 	vneg.f32	s18, s0
   143e6:	ed9d 0a00 	vldr	s0, [sp]
   143ea:	f00a ff9d 	bl	1f328 <sinhf>
   143ee:	ee69 0a00 	vmul.f32	s1, s18, s0
   143f2:	ee28 0a88 	vmul.f32	s0, s17, s16
   143f6:	f7f7 fc23 	bl	bc40 <mp_obj_new_complex>
}
   143fa:	b003      	add	sp, #12
   143fc:	ecbd 8b04 	vpop	{d8-d9}
   14400:	f85d fb04 	ldr.w	pc, [sp], #4

00014404 <mp_cmath_sqrt>:
STATIC mp_obj_t mp_cmath_sqrt(mp_obj_t z_obj) {
   14404:	b500      	push	{lr}
   14406:	ed2d 8b04 	vpush	{d8-d9}
   1440a:	b083      	sub	sp, #12
    mp_obj_get_complex(z_obj, &real, &imag);
   1440c:	466a      	mov	r2, sp
   1440e:	a901      	add	r1, sp, #4
   14410:	f7f6 fd9e 	bl	af50 <mp_obj_get_complex>
    mp_float_t sqrt_abs = MICROPY_FLOAT_C_FUN(pow)(real*real + imag*imag, 0.25);
   14414:	ed9d 0a01 	vldr	s0, [sp, #4]
   14418:	ee20 0a00 	vmul.f32	s0, s0, s0
   1441c:	eddd 7a00 	vldr	s15, [sp]
   14420:	ee67 7aa7 	vmul.f32	s15, s15, s15
   14424:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
   14428:	ee30 0a27 	vadd.f32	s0, s0, s15
   1442c:	f00a fa52 	bl	1e8d4 <powf>
   14430:	eef0 8a40 	vmov.f32	s17, s0
    mp_float_t theta = 0.5 * MICROPY_FLOAT_C_FUN(atan2)(imag, real);
   14434:	eddd 0a01 	vldr	s1, [sp, #4]
   14438:	ed9d 0a00 	vldr	s0, [sp]
   1443c:	f00b f94c 	bl	1f6d8 <atan2f>
   14440:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
   14444:	ee20 8a08 	vmul.f32	s16, s0, s16
    return mp_obj_new_complex(sqrt_abs * MICROPY_FLOAT_C_FUN(cos)(theta), sqrt_abs * MICROPY_FLOAT_C_FUN(sin)(theta));
   14448:	eeb0 0a48 	vmov.f32	s0, s16
   1444c:	f00c f850 	bl	204f0 <cosf>
   14450:	eeb0 9a40 	vmov.f32	s18, s0
   14454:	eeb0 0a48 	vmov.f32	s0, s16
   14458:	f00c f8f4 	bl	20644 <sinf>
   1445c:	ee60 0a28 	vmul.f32	s1, s0, s17
   14460:	ee29 0a28 	vmul.f32	s0, s18, s17
   14464:	f7f7 fbec 	bl	bc40 <mp_obj_new_complex>
}
   14468:	b003      	add	sp, #12
   1446a:	ecbd 8b04 	vpop	{d8-d9}
   1446e:	f85d fb04 	ldr.w	pc, [sp], #4

00014472 <mp_cmath_log>:
STATIC mp_obj_t mp_cmath_log(mp_obj_t z_obj) {
   14472:	b500      	push	{lr}
   14474:	ed2d 8b02 	vpush	{d8}
   14478:	b083      	sub	sp, #12
    mp_obj_get_complex(z_obj, &real, &imag);
   1447a:	466a      	mov	r2, sp
   1447c:	a901      	add	r1, sp, #4
   1447e:	f7f6 fd67 	bl	af50 <mp_obj_get_complex>
    return mp_obj_new_complex(0.5 * MICROPY_FLOAT_C_FUN(log)(real*real + imag*imag), MICROPY_FLOAT_C_FUN(atan2)(imag, real));
   14482:	ed9d 0a01 	vldr	s0, [sp, #4]
   14486:	ee20 0a00 	vmul.f32	s0, s0, s0
   1448a:	eddd 7a00 	vldr	s15, [sp]
   1448e:	ee67 7aa7 	vmul.f32	s15, s15, s15
   14492:	ee30 0a27 	vadd.f32	s0, s0, s15
   14496:	f00a fe81 	bl	1f19c <logf>
   1449a:	eeb0 8a40 	vmov.f32	s16, s0
   1449e:	eddd 0a01 	vldr	s1, [sp, #4]
   144a2:	ed9d 0a00 	vldr	s0, [sp]
   144a6:	f00b f917 	bl	1f6d8 <atan2f>
   144aa:	eef0 0a40 	vmov.f32	s1, s0
   144ae:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
   144b2:	ee28 0a00 	vmul.f32	s0, s16, s0
   144b6:	f7f7 fbc3 	bl	bc40 <mp_obj_new_complex>
}
   144ba:	b003      	add	sp, #12
   144bc:	ecbd 8b02 	vpop	{d8}
   144c0:	f85d fb04 	ldr.w	pc, [sp], #4

000144c4 <mp_cmath_exp>:
STATIC mp_obj_t mp_cmath_exp(mp_obj_t z_obj) {
   144c4:	b500      	push	{lr}
   144c6:	ed2d 8b04 	vpush	{d8-d9}
   144ca:	b083      	sub	sp, #12
    mp_obj_get_complex(z_obj, &real, &imag);
   144cc:	466a      	mov	r2, sp
   144ce:	a901      	add	r1, sp, #4
   144d0:	f7f6 fd3e 	bl	af50 <mp_obj_get_complex>
    mp_float_t exp_real = MICROPY_FLOAT_C_FUN(exp)(real);
   144d4:	ed9d 0a01 	vldr	s0, [sp, #4]
   144d8:	f00a fcb0 	bl	1ee3c <expf>
   144dc:	eeb0 8a40 	vmov.f32	s16, s0
    return mp_obj_new_complex(exp_real * MICROPY_FLOAT_C_FUN(cos)(imag), exp_real * MICROPY_FLOAT_C_FUN(sin)(imag));
   144e0:	eddd 8a00 	vldr	s17, [sp]
   144e4:	eeb0 0a68 	vmov.f32	s0, s17
   144e8:	f00c f802 	bl	204f0 <cosf>
   144ec:	eeb0 9a40 	vmov.f32	s18, s0
   144f0:	eeb0 0a68 	vmov.f32	s0, s17
   144f4:	f00c f8a6 	bl	20644 <sinf>
   144f8:	ee60 0a08 	vmul.f32	s1, s0, s16
   144fc:	ee29 0a08 	vmul.f32	s0, s18, s16
   14500:	f7f7 fb9e 	bl	bc40 <mp_obj_new_complex>
}
   14504:	b003      	add	sp, #12
   14506:	ecbd 8b04 	vpop	{d8-d9}
   1450a:	f85d fb04 	ldr.w	pc, [sp], #4

0001450e <mp_cmath_rect>:
STATIC mp_obj_t mp_cmath_rect(mp_obj_t r_obj, mp_obj_t phi_obj) {
   1450e:	b510      	push	{r4, lr}
   14510:	ed2d 8b04 	vpush	{d8-d9}
   14514:	460c      	mov	r4, r1
    mp_float_t r = mp_obj_get_float(r_obj);
   14516:	f7f6 fd01 	bl	af1c <mp_obj_get_float>
   1451a:	eeb0 8a40 	vmov.f32	s16, s0
    mp_float_t phi = mp_obj_get_float(phi_obj);
   1451e:	4620      	mov	r0, r4
   14520:	f7f6 fcfc 	bl	af1c <mp_obj_get_float>
   14524:	eeb0 9a40 	vmov.f32	s18, s0
    return mp_obj_new_complex(r * MICROPY_FLOAT_C_FUN(cos)(phi), r * MICROPY_FLOAT_C_FUN(sin)(phi));
   14528:	f00b ffe2 	bl	204f0 <cosf>
   1452c:	eef0 8a40 	vmov.f32	s17, s0
   14530:	eeb0 0a49 	vmov.f32	s0, s18
   14534:	f00c f886 	bl	20644 <sinf>
   14538:	ee60 0a08 	vmul.f32	s1, s0, s16
   1453c:	ee28 0a88 	vmul.f32	s0, s17, s16
   14540:	f7f7 fb7e 	bl	bc40 <mp_obj_new_complex>
}
   14544:	ecbd 8b04 	vpop	{d8-d9}
   14548:	bd10      	pop	{r4, pc}

0001454a <mp_cmath_phase>:
STATIC mp_obj_t mp_cmath_phase(mp_obj_t z_obj) {
   1454a:	b500      	push	{lr}
   1454c:	b083      	sub	sp, #12
    mp_obj_get_complex(z_obj, &real, &imag);
   1454e:	466a      	mov	r2, sp
   14550:	a901      	add	r1, sp, #4
   14552:	f7f6 fcfd 	bl	af50 <mp_obj_get_complex>
    return mp_obj_new_float(MICROPY_FLOAT_C_FUN(atan2)(imag, real));
   14556:	eddd 0a01 	vldr	s1, [sp, #4]
   1455a:	ed9d 0a00 	vldr	s0, [sp]
   1455e:	f00b f8bb 	bl	1f6d8 <atan2f>
   14562:	f7f8 fc4b 	bl	cdfc <mp_obj_new_float>
}
   14566:	b003      	add	sp, #12
   14568:	f85d fb04 	ldr.w	pc, [sp], #4

0001456c <mp_cmath_polar>:
STATIC mp_obj_t mp_cmath_polar(mp_obj_t z_obj) {
   1456c:	b500      	push	{lr}
   1456e:	b085      	sub	sp, #20
    mp_obj_get_complex(z_obj, &real, &imag);
   14570:	aa02      	add	r2, sp, #8
   14572:	a903      	add	r1, sp, #12
   14574:	f7f6 fcec 	bl	af50 <mp_obj_get_complex>
        mp_obj_new_float(MICROPY_FLOAT_C_FUN(sqrt)(real*real + imag*imag)),
   14578:	ed9d 0a03 	vldr	s0, [sp, #12]
   1457c:	ee20 0a00 	vmul.f32	s0, s0, s0
   14580:	eddd 7a02 	vldr	s15, [sp, #8]
   14584:	ee67 7aa7 	vmul.f32	s15, s15, s15
   14588:	ee30 0a27 	vadd.f32	s0, s0, s15
   1458c:	f00a ff9e 	bl	1f4cc <sqrtf>
   14590:	f7f8 fc34 	bl	cdfc <mp_obj_new_float>
    mp_obj_t tuple[2] = {
   14594:	9000      	str	r0, [sp, #0]
        mp_obj_new_float(MICROPY_FLOAT_C_FUN(atan2)(imag, real)),
   14596:	eddd 0a03 	vldr	s1, [sp, #12]
   1459a:	ed9d 0a02 	vldr	s0, [sp, #8]
   1459e:	f00b f89b 	bl	1f6d8 <atan2f>
   145a2:	f7f8 fc2b 	bl	cdfc <mp_obj_new_float>
    mp_obj_t tuple[2] = {
   145a6:	9001      	str	r0, [sp, #4]
    return mp_obj_new_tuple(2, tuple);
   145a8:	4669      	mov	r1, sp
   145aa:	2002      	movs	r0, #2
   145ac:	f7fd f94a 	bl	11844 <mp_obj_new_tuple>
}
   145b0:	b005      	add	sp, #20
   145b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000145b8 <mp_micropython_opt_level>:

// Various builtins specific to MicroPython runtime,
// living in micropython module

#if MICROPY_ENABLE_COMPILER
STATIC mp_obj_t mp_micropython_opt_level(size_t n_args, const mp_obj_t *args) {
   145b8:	b508      	push	{r3, lr}
    if (n_args == 0) {
   145ba:	b930      	cbnz	r0, 145ca <mp_micropython_opt_level+0x12>
        return MP_OBJ_NEW_SMALL_INT(MP_STATE_VM(mp_optimise_value));
   145bc:	4b07      	ldr	r3, [pc, #28]	; (145dc <mp_micropython_opt_level+0x24>)
   145be:	f8d3 023c 	ldr.w	r0, [r3, #572]	; 0x23c
   145c2:	0040      	lsls	r0, r0, #1
   145c4:	f040 0001 	orr.w	r0, r0, #1
    } else {
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
        return mp_const_none;
    }
}
   145c8:	bd08      	pop	{r3, pc}
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
   145ca:	6808      	ldr	r0, [r1, #0]
   145cc:	f7f6 fbfe 	bl	adcc <mp_obj_get_int>
   145d0:	4b02      	ldr	r3, [pc, #8]	; (145dc <mp_micropython_opt_level+0x24>)
   145d2:	f8c3 023c 	str.w	r0, [r3, #572]	; 0x23c
        return mp_const_none;
   145d6:	4802      	ldr	r0, [pc, #8]	; (145e0 <mp_micropython_opt_level+0x28>)
   145d8:	e7f6      	b.n	145c8 <mp_micropython_opt_level+0x10>
   145da:	bf00      	nop
   145dc:	200008a0 	.word	0x200008a0
   145e0:	00027b40 	.word	0x00027b40

000145e4 <mp_micropython_kbd_intr>:
#if MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF && (MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE == 0)
STATIC MP_DEFINE_CONST_FUN_OBJ_1(mp_alloc_emergency_exception_buf_obj, mp_alloc_emergency_exception_buf);
#endif

#if MICROPY_KBD_EXCEPTION
STATIC mp_obj_t mp_micropython_kbd_intr(mp_obj_t int_chr_in) {
   145e4:	b508      	push	{r3, lr}
    mp_hal_set_interrupt_char(mp_obj_get_int(int_chr_in));
   145e6:	f7f6 fbf1 	bl	adcc <mp_obj_get_int>
   145ea:	f007 fd0d 	bl	1c008 <mp_hal_set_interrupt_char>
    return mp_const_none;
}
   145ee:	4801      	ldr	r0, [pc, #4]	; (145f4 <mp_micropython_kbd_intr+0x10>)
   145f0:	bd08      	pop	{r3, pc}
   145f2:	bf00      	nop
   145f4:	00027b40 	.word	0x00027b40

000145f8 <mp_micropython_heap_unlock>:
STATIC mp_obj_t mp_micropython_heap_unlock(void) {
   145f8:	b508      	push	{r3, lr}
    gc_unlock();
   145fa:	f7ec fa6b 	bl	ad4 <gc_unlock>
}
   145fe:	4801      	ldr	r0, [pc, #4]	; (14604 <mp_micropython_heap_unlock+0xc>)
   14600:	bd08      	pop	{r3, pc}
   14602:	bf00      	nop
   14604:	00027b40 	.word	0x00027b40

00014608 <mp_micropython_heap_lock>:
STATIC mp_obj_t mp_micropython_heap_lock(void) {
   14608:	b508      	push	{r3, lr}
    gc_lock();
   1460a:	f7ec fa59 	bl	ac0 <gc_lock>
}
   1460e:	4801      	ldr	r0, [pc, #4]	; (14614 <mp_micropython_heap_lock+0xc>)
   14610:	bd08      	pop	{r3, pc}
   14612:	bf00      	nop
   14614:	00027b40 	.word	0x00027b40

00014618 <get_fmt_type>:
        "in this place of a structure is a pointer to zero-terminated
        character data".
 */

STATIC char get_fmt_type(const char **fmt) {
    char t = **fmt;
   14618:	6803      	ldr	r3, [r0, #0]
   1461a:	781a      	ldrb	r2, [r3, #0]
    switch (t) {
   1461c:	f1a2 0121 	sub.w	r1, r2, #33	; 0x21
   14620:	291f      	cmp	r1, #31
   14622:	d816      	bhi.n	14652 <get_fmt_type+0x3a>
   14624:	e8df f001 	tbb	[pc, r1]
   14628:	15151510 	.word	0x15151510
   1462c:	15151515 	.word	0x15151515
   14630:	15151515 	.word	0x15151515
   14634:	15151515 	.word	0x15151515
   14638:	15151515 	.word	0x15151515
   1463c:	15151515 	.word	0x15151515
   14640:	11151515 	.word	0x11151515
   14644:	11151111 	.word	0x11151111
        case '!':
            t = '>';
   14648:	223e      	movs	r2, #62	; 0x3e
            break;
        default:
            return '@';
    }
    // Skip type char
    (*fmt)++;
   1464a:	3301      	adds	r3, #1
   1464c:	6003      	str	r3, [r0, #0]
    return t;
}
   1464e:	4610      	mov	r0, r2
   14650:	4770      	bx	lr
            return '@';
   14652:	2240      	movs	r2, #64	; 0x40
   14654:	e7fb      	b.n	1464e <get_fmt_type+0x36>

00014656 <get_fmt_num>:

STATIC mp_uint_t get_fmt_num(const char **p) {
   14656:	b570      	push	{r4, r5, r6, lr}
   14658:	4606      	mov	r6, r0
    const char *num = *p;
   1465a:	6804      	ldr	r4, [r0, #0]
    uint len = 1;
   1465c:	2501      	movs	r5, #1
    while (unichar_isdigit(*++num)) {
   1465e:	e000      	b.n	14662 <get_fmt_num+0xc>
        len++;
   14660:	3501      	adds	r5, #1
    while (unichar_isdigit(*++num)) {
   14662:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   14666:	f7ed fd2f 	bl	20c8 <unichar_isdigit>
   1466a:	2800      	cmp	r0, #0
   1466c:	d1f8      	bne.n	14660 <get_fmt_num+0xa>
    }
    mp_uint_t val = (mp_uint_t)MP_OBJ_SMALL_INT_VALUE(mp_parse_num_integer(*p, len, 10, NULL));
   1466e:	2300      	movs	r3, #0
   14670:	220a      	movs	r2, #10
   14672:	4629      	mov	r1, r5
   14674:	6830      	ldr	r0, [r6, #0]
   14676:	f7f4 fc7b 	bl	8f70 <mp_parse_num_integer>
    *p = num;
   1467a:	6034      	str	r4, [r6, #0]
    return val;
}
   1467c:	1040      	asrs	r0, r0, #1
   1467e:	bd70      	pop	{r4, r5, r6, pc}

00014680 <calc_size_items>:

STATIC size_t calc_size_items(const char *fmt, size_t *total_sz) {
   14680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14684:	b084      	sub	sp, #16
   14686:	ab04      	add	r3, sp, #16
   14688:	f843 0d0c 	str.w	r0, [r3, #-12]!
   1468c:	460f      	mov	r7, r1
    char fmt_type = get_fmt_type(&fmt);
   1468e:	4618      	mov	r0, r3
   14690:	f7ff ffc2 	bl	14618 <get_fmt_type>
   14694:	4680      	mov	r8, r0
    size_t total_cnt = 0;
    size_t size;
    for (size = 0; *fmt; fmt++) {
   14696:	2400      	movs	r4, #0
    size_t total_cnt = 0;
   14698:	4625      	mov	r5, r4
    for (size = 0; *fmt; fmt++) {
   1469a:	e017      	b.n	146cc <calc_size_items+0x4c>
        mp_uint_t cnt = 1;
        if (unichar_isdigit(*fmt)) {
            cnt = get_fmt_num(&fmt);
   1469c:	a801      	add	r0, sp, #4
   1469e:	f7ff ffda 	bl	14656 <get_fmt_num>
   146a2:	4606      	mov	r6, r0
   146a4:	e01a      	b.n	146dc <calc_size_items+0x5c>

        if (*fmt == 's') {
            total_cnt += 1;
            size += cnt;
        } else {
            total_cnt += cnt;
   146a6:	4435      	add	r5, r6
            mp_uint_t align;
            size_t sz = mp_binary_get_size(fmt_type, *fmt, &align);
   146a8:	aa03      	add	r2, sp, #12
   146aa:	4640      	mov	r0, r8
   146ac:	f7fe fc8e 	bl	12fcc <mp_binary_get_size>
            while (cnt--) {
   146b0:	e006      	b.n	146c0 <calc_size_items+0x40>
                // Apply alignment
                size = (size + align - 1) & ~(align - 1);
   146b2:	9b03      	ldr	r3, [sp, #12]
   146b4:	441c      	add	r4, r3
   146b6:	3c01      	subs	r4, #1
   146b8:	425b      	negs	r3, r3
   146ba:	401c      	ands	r4, r3
                size += sz;
   146bc:	4404      	add	r4, r0
            while (cnt--) {
   146be:	4616      	mov	r6, r2
   146c0:	1e72      	subs	r2, r6, #1
   146c2:	2e00      	cmp	r6, #0
   146c4:	d1f5      	bne.n	146b2 <calc_size_items+0x32>
    for (size = 0; *fmt; fmt++) {
   146c6:	9b01      	ldr	r3, [sp, #4]
   146c8:	3301      	adds	r3, #1
   146ca:	9301      	str	r3, [sp, #4]
   146cc:	9b01      	ldr	r3, [sp, #4]
   146ce:	7818      	ldrb	r0, [r3, #0]
   146d0:	b158      	cbz	r0, 146ea <calc_size_items+0x6a>
        if (unichar_isdigit(*fmt)) {
   146d2:	f7ed fcf9 	bl	20c8 <unichar_isdigit>
   146d6:	2800      	cmp	r0, #0
   146d8:	d1e0      	bne.n	1469c <calc_size_items+0x1c>
        mp_uint_t cnt = 1;
   146da:	2601      	movs	r6, #1
        if (*fmt == 's') {
   146dc:	9b01      	ldr	r3, [sp, #4]
   146de:	7819      	ldrb	r1, [r3, #0]
   146e0:	2973      	cmp	r1, #115	; 0x73
   146e2:	d1e0      	bne.n	146a6 <calc_size_items+0x26>
            total_cnt += 1;
   146e4:	3501      	adds	r5, #1
            size += cnt;
   146e6:	4434      	add	r4, r6
   146e8:	e7ed      	b.n	146c6 <calc_size_items+0x46>
            }
        }
    }
    *total_sz = size;
   146ea:	603c      	str	r4, [r7, #0]
    return total_cnt;
}
   146ec:	4628      	mov	r0, r5
   146ee:	b004      	add	sp, #16
   146f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000146f4 <struct_calcsize>:

STATIC mp_obj_t struct_calcsize(mp_obj_t fmt_in) {
   146f4:	b500      	push	{lr}
   146f6:	b083      	sub	sp, #12
    const char *fmt = mp_obj_str_get_str(fmt_in);
   146f8:	f7fb fda8 	bl	1024c <mp_obj_str_get_str>
    size_t size;
    calc_size_items(fmt, &size);
   146fc:	a901      	add	r1, sp, #4
   146fe:	f7ff ffbf 	bl	14680 <calc_size_items>
    return MP_OBJ_NEW_SMALL_INT(size);
   14702:	9801      	ldr	r0, [sp, #4]
   14704:	0040      	lsls	r0, r0, #1
}
   14706:	f040 0001 	orr.w	r0, r0, #1
   1470a:	b003      	add	sp, #12
   1470c:	f85d fb04 	ldr.w	pc, [sp], #4

00014710 <struct_unpack_from>:
MP_DEFINE_CONST_FUN_OBJ_1(struct_calcsize_obj, struct_calcsize);

STATIC mp_obj_t struct_unpack_from(size_t n_args, const mp_obj_t *args) {
   14710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14714:	b087      	sub	sp, #28
   14716:	4606      	mov	r6, r0
   14718:	460c      	mov	r4, r1
    // unpack requires that the buffer be exactly the right size.
    // unpack_from requires that the buffer be "big enough".
    // Since we implement unpack and unpack_from using the same function
    // we relax the "exact" requirement, and only implement "big enough".
    const char *fmt = mp_obj_str_get_str(args[0]);
   1471a:	6808      	ldr	r0, [r1, #0]
   1471c:	f7fb fd96 	bl	1024c <mp_obj_str_get_str>
   14720:	9005      	str	r0, [sp, #20]
    size_t total_sz;
    size_t num_items = calc_size_items(fmt, &total_sz);
   14722:	a904      	add	r1, sp, #16
   14724:	f7ff ffac 	bl	14680 <calc_size_items>
   14728:	4681      	mov	r9, r0
    char fmt_type = get_fmt_type(&fmt);
   1472a:	a805      	add	r0, sp, #20
   1472c:	f7ff ff74 	bl	14618 <get_fmt_type>
   14730:	4680      	mov	r8, r0
    mp_obj_tuple_t *res = MP_OBJ_TO_PTR(mp_obj_new_tuple(num_items, NULL));
   14732:	2100      	movs	r1, #0
   14734:	4648      	mov	r0, r9
   14736:	f7fd f885 	bl	11844 <mp_obj_new_tuple>
   1473a:	4607      	mov	r7, r0
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   1473c:	2201      	movs	r2, #1
   1473e:	a901      	add	r1, sp, #4
   14740:	6860      	ldr	r0, [r4, #4]
   14742:	f7f6 fdb5 	bl	b2b0 <mp_get_buffer_raise>
    byte *p = bufinfo.buf;
   14746:	9b01      	ldr	r3, [sp, #4]
   14748:	9300      	str	r3, [sp, #0]
    byte *end_p = &p[bufinfo.len];
   1474a:	9d02      	ldr	r5, [sp, #8]
   1474c:	441d      	add	r5, r3
    mp_int_t offset = 0;

    if (n_args > 2) {
   1474e:	2e02      	cmp	r6, #2
   14750:	d806      	bhi.n	14760 <struct_unpack_from+0x50>
        }
        p += offset;
    }

    // Check that the input buffer is big enough to unpack all the values
    if (p + total_sz > end_p) {
   14752:	9b00      	ldr	r3, [sp, #0]
   14754:	9a04      	ldr	r2, [sp, #16]
   14756:	4413      	add	r3, r2
   14758:	42ab      	cmp	r3, r5
   1475a:	d810      	bhi.n	1477e <struct_unpack_from+0x6e>
        mp_raise_ValueError("buffer too small");
    }

    for (size_t i = 0; i < num_items;) {
   1475c:	2500      	movs	r5, #0
   1475e:	e027      	b.n	147b0 <struct_unpack_from+0xa0>
        offset = mp_obj_get_int(args[2]);
   14760:	68a0      	ldr	r0, [r4, #8]
   14762:	f7f6 fb33 	bl	adcc <mp_obj_get_int>
        if (offset < 0) {
   14766:	2800      	cmp	r0, #0
   14768:	db03      	blt.n	14772 <struct_unpack_from+0x62>
        p += offset;
   1476a:	9b00      	ldr	r3, [sp, #0]
   1476c:	4403      	add	r3, r0
   1476e:	9300      	str	r3, [sp, #0]
   14770:	e7ef      	b.n	14752 <struct_unpack_from+0x42>
            offset = bufinfo.len + offset;
   14772:	9b02      	ldr	r3, [sp, #8]
            if (offset < 0) {
   14774:	18c0      	adds	r0, r0, r3
   14776:	d5f8      	bpl.n	1476a <struct_unpack_from+0x5a>
                mp_raise_ValueError("buffer too small");
   14778:	481c      	ldr	r0, [pc, #112]	; (147ec <struct_unpack_from+0xdc>)
   1477a:	f7f5 fd95 	bl	a2a8 <mp_raise_ValueError>
        mp_raise_ValueError("buffer too small");
   1477e:	481b      	ldr	r0, [pc, #108]	; (147ec <struct_unpack_from+0xdc>)
   14780:	f7f5 fd92 	bl	a2a8 <mp_raise_ValueError>
        mp_uint_t cnt = 1;
        if (unichar_isdigit(*fmt)) {
            cnt = get_fmt_num(&fmt);
   14784:	a805      	add	r0, sp, #20
   14786:	f7ff ff66 	bl	14656 <get_fmt_num>
   1478a:	4604      	mov	r4, r0
   1478c:	e019      	b.n	147c2 <struct_unpack_from+0xb2>
            item = mp_obj_new_bytes(p, cnt);
            p += cnt;
            res->items[i++] = item;
        } else {
            while (cnt--) {
                item = mp_binary_get_val(fmt_type, *fmt, &p);
   1478e:	466a      	mov	r2, sp
   14790:	9b05      	ldr	r3, [sp, #20]
   14792:	7819      	ldrb	r1, [r3, #0]
   14794:	4640      	mov	r0, r8
   14796:	f7fe fda6 	bl	132e6 <mp_binary_get_val>
                res->items[i++] = item;
   1479a:	1cab      	adds	r3, r5, #2
   1479c:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
            while (cnt--) {
   147a0:	4634      	mov	r4, r6
                res->items[i++] = item;
   147a2:	3501      	adds	r5, #1
            while (cnt--) {
   147a4:	1e66      	subs	r6, r4, #1
   147a6:	2c00      	cmp	r4, #0
   147a8:	d1f1      	bne.n	1478e <struct_unpack_from+0x7e>
            }
        }
        fmt++;
   147aa:	9b05      	ldr	r3, [sp, #20]
   147ac:	3301      	adds	r3, #1
   147ae:	9305      	str	r3, [sp, #20]
    for (size_t i = 0; i < num_items;) {
   147b0:	454d      	cmp	r5, r9
   147b2:	d216      	bcs.n	147e2 <struct_unpack_from+0xd2>
        if (unichar_isdigit(*fmt)) {
   147b4:	9b05      	ldr	r3, [sp, #20]
   147b6:	7818      	ldrb	r0, [r3, #0]
   147b8:	f7ed fc86 	bl	20c8 <unichar_isdigit>
   147bc:	2800      	cmp	r0, #0
   147be:	d1e1      	bne.n	14784 <struct_unpack_from+0x74>
        mp_uint_t cnt = 1;
   147c0:	2401      	movs	r4, #1
        if (*fmt == 's') {
   147c2:	9b05      	ldr	r3, [sp, #20]
   147c4:	781b      	ldrb	r3, [r3, #0]
   147c6:	2b73      	cmp	r3, #115	; 0x73
   147c8:	d1ec      	bne.n	147a4 <struct_unpack_from+0x94>
            item = mp_obj_new_bytes(p, cnt);
   147ca:	4621      	mov	r1, r4
   147cc:	9800      	ldr	r0, [sp, #0]
   147ce:	f7fb fb45 	bl	fe5c <mp_obj_new_bytes>
            p += cnt;
   147d2:	9b00      	ldr	r3, [sp, #0]
   147d4:	441c      	add	r4, r3
   147d6:	9400      	str	r4, [sp, #0]
            res->items[i++] = item;
   147d8:	1cab      	adds	r3, r5, #2
   147da:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
   147de:	3501      	adds	r5, #1
   147e0:	e7e3      	b.n	147aa <struct_unpack_from+0x9a>
    }
    return MP_OBJ_FROM_PTR(res);
}
   147e2:	4638      	mov	r0, r7
   147e4:	b007      	add	sp, #28
   147e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   147ea:	bf00      	nop
   147ec:	00029a2c 	.word	0x00029a2c

000147f0 <struct_pack_into_internal>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(struct_unpack_from_obj, 2, 3, struct_unpack_from);

// This function assumes there is enough room in p to store all the values
STATIC void struct_pack_into_internal(mp_obj_t fmt_in, byte *p, size_t n_args, const mp_obj_t *args) {
   147f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   147f4:	b086      	sub	sp, #24
   147f6:	9101      	str	r1, [sp, #4]
   147f8:	4690      	mov	r8, r2
   147fa:	4699      	mov	r9, r3
    const char *fmt = mp_obj_str_get_str(fmt_in);
   147fc:	f7fb fd26 	bl	1024c <mp_obj_str_get_str>
   14800:	ab06      	add	r3, sp, #24
   14802:	f843 0d04 	str.w	r0, [r3, #-4]!
    char fmt_type = get_fmt_type(&fmt);
   14806:	4618      	mov	r0, r3
   14808:	f7ff ff06 	bl	14618 <get_fmt_type>
   1480c:	4682      	mov	sl, r0

    size_t i;
    for (i = 0; i < n_args;) {
   1480e:	2400      	movs	r4, #0
   14810:	e016      	b.n	14840 <struct_pack_into_internal+0x50>
        if (*fmt == '\0') {
            // more arguments given than used by format string; CPython raises struct.error here
            break;
        }
        if (unichar_isdigit(*fmt)) {
            cnt = get_fmt_num(&fmt);
   14812:	a805      	add	r0, sp, #20
   14814:	f7ff ff1f 	bl	14656 <get_fmt_num>
   14818:	4605      	mov	r5, r0
   1481a:	e01b      	b.n	14854 <struct_pack_into_internal+0x64>
            mp_get_buffer_raise(args[i++], &bufinfo, MP_BUFFER_READ);
            mp_uint_t to_copy = cnt;
            if (bufinfo.len < to_copy) {
                to_copy = bufinfo.len;
            }
            memcpy(p, bufinfo.buf, to_copy);
   1481c:	4622      	mov	r2, r4
   1481e:	9902      	ldr	r1, [sp, #8]
   14820:	9801      	ldr	r0, [sp, #4]
   14822:	f006 ffe7 	bl	1b7f4 <memcpy>
            memset(p + to_copy, 0, cnt - to_copy);
   14826:	1b2a      	subs	r2, r5, r4
   14828:	2100      	movs	r1, #0
   1482a:	9801      	ldr	r0, [sp, #4]
   1482c:	4420      	add	r0, r4
   1482e:	f007 f825 	bl	1b87c <memset>
            p += cnt;
   14832:	9b01      	ldr	r3, [sp, #4]
   14834:	441d      	add	r5, r3
   14836:	9501      	str	r5, [sp, #4]
            mp_get_buffer_raise(args[i++], &bufinfo, MP_BUFFER_READ);
   14838:	4634      	mov	r4, r6
            // If we run out of args then we just finish; CPython would raise struct.error
            while (cnt-- && i < n_args) {
                mp_binary_set_val(fmt_type, *fmt, args[i++], &p);
            }
        }
        fmt++;
   1483a:	9b05      	ldr	r3, [sp, #20]
   1483c:	3301      	adds	r3, #1
   1483e:	9305      	str	r3, [sp, #20]
    for (i = 0; i < n_args;) {
   14840:	4544      	cmp	r4, r8
   14842:	d228      	bcs.n	14896 <struct_pack_into_internal+0xa6>
        if (*fmt == '\0') {
   14844:	9b05      	ldr	r3, [sp, #20]
   14846:	7818      	ldrb	r0, [r3, #0]
   14848:	b328      	cbz	r0, 14896 <struct_pack_into_internal+0xa6>
        if (unichar_isdigit(*fmt)) {
   1484a:	f7ed fc3d 	bl	20c8 <unichar_isdigit>
   1484e:	2800      	cmp	r0, #0
   14850:	d1df      	bne.n	14812 <struct_pack_into_internal+0x22>
        mp_uint_t cnt = 1;
   14852:	2501      	movs	r5, #1
        if (*fmt == 's') {
   14854:	9b05      	ldr	r3, [sp, #20]
   14856:	781b      	ldrb	r3, [r3, #0]
   14858:	2b73      	cmp	r3, #115	; 0x73
   1485a:	d116      	bne.n	1488a <struct_pack_into_internal+0x9a>
            mp_get_buffer_raise(args[i++], &bufinfo, MP_BUFFER_READ);
   1485c:	1c66      	adds	r6, r4, #1
   1485e:	2201      	movs	r2, #1
   14860:	a902      	add	r1, sp, #8
   14862:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   14866:	f7f6 fd23 	bl	b2b0 <mp_get_buffer_raise>
            if (bufinfo.len < to_copy) {
   1486a:	9c03      	ldr	r4, [sp, #12]
   1486c:	42ac      	cmp	r4, r5
   1486e:	d3d5      	bcc.n	1481c <struct_pack_into_internal+0x2c>
            mp_uint_t to_copy = cnt;
   14870:	462c      	mov	r4, r5
   14872:	e7d3      	b.n	1481c <struct_pack_into_internal+0x2c>
                mp_binary_set_val(fmt_type, *fmt, args[i++], &p);
   14874:	1c67      	adds	r7, r4, #1
   14876:	ab01      	add	r3, sp, #4
   14878:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   1487c:	9905      	ldr	r1, [sp, #20]
   1487e:	7809      	ldrb	r1, [r1, #0]
   14880:	4650      	mov	r0, sl
   14882:	f7fe fda1 	bl	133c8 <mp_binary_set_val>
            while (cnt-- && i < n_args) {
   14886:	4635      	mov	r5, r6
                mp_binary_set_val(fmt_type, *fmt, args[i++], &p);
   14888:	463c      	mov	r4, r7
            while (cnt-- && i < n_args) {
   1488a:	1e6e      	subs	r6, r5, #1
   1488c:	2d00      	cmp	r5, #0
   1488e:	d0d4      	beq.n	1483a <struct_pack_into_internal+0x4a>
   14890:	4544      	cmp	r4, r8
   14892:	d3ef      	bcc.n	14874 <struct_pack_into_internal+0x84>
   14894:	e7d1      	b.n	1483a <struct_pack_into_internal+0x4a>
    }
}
   14896:	b006      	add	sp, #24
   14898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001489c <struct_pack>:

STATIC mp_obj_t struct_pack(size_t n_args, const mp_obj_t *args) {
   1489c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148a0:	b084      	sub	sp, #16
   148a2:	4680      	mov	r8, r0
   148a4:	460d      	mov	r5, r1
    // TODO: "The arguments must match the values required by the format exactly."
    mp_int_t size = MP_OBJ_SMALL_INT_VALUE(struct_calcsize(args[0]));
   148a6:	460c      	mov	r4, r1
   148a8:	f854 0b04 	ldr.w	r0, [r4], #4
   148ac:	f7ff ff22 	bl	146f4 <struct_calcsize>
   148b0:	1047      	asrs	r7, r0, #1
    vstr_t vstr;
    vstr_init_len(&vstr, size);
   148b2:	4639      	mov	r1, r7
   148b4:	4668      	mov	r0, sp
   148b6:	f7ec ff90 	bl	17da <vstr_init_len>
    byte *p = (byte*)vstr.buf;
   148ba:	9e02      	ldr	r6, [sp, #8]
    memset(p, 0, size);
   148bc:	463a      	mov	r2, r7
   148be:	2100      	movs	r1, #0
   148c0:	4630      	mov	r0, r6
   148c2:	f006 ffdb 	bl	1b87c <memset>
    struct_pack_into_internal(args[0], p, n_args - 1, &args[1]);
   148c6:	4623      	mov	r3, r4
   148c8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   148cc:	4631      	mov	r1, r6
   148ce:	6828      	ldr	r0, [r5, #0]
   148d0:	f7ff ff8e 	bl	147f0 <struct_pack_into_internal>
    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   148d4:	4669      	mov	r1, sp
   148d6:	4803      	ldr	r0, [pc, #12]	; (148e4 <struct_pack+0x48>)
   148d8:	f7fb f834 	bl	f944 <mp_obj_new_str_from_vstr>
}
   148dc:	b004      	add	sp, #16
   148de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148e2:	bf00      	nop
   148e4:	000280c8 	.word	0x000280c8

000148e8 <struct_pack_into>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(struct_pack_obj, 1, MP_OBJ_FUN_ARGS_MAX, struct_pack);

STATIC mp_obj_t struct_pack_into(size_t n_args, const mp_obj_t *args) {
   148e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   148ea:	b085      	sub	sp, #20
   148ec:	4607      	mov	r7, r0
   148ee:	460c      	mov	r4, r1
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_WRITE);
   148f0:	2202      	movs	r2, #2
   148f2:	a901      	add	r1, sp, #4
   148f4:	6860      	ldr	r0, [r4, #4]
   148f6:	f7f6 fcdb 	bl	b2b0 <mp_get_buffer_raise>
    mp_int_t offset = mp_obj_get_int(args[2]);
   148fa:	68a0      	ldr	r0, [r4, #8]
   148fc:	f7f6 fa66 	bl	adcc <mp_obj_get_int>
    if (offset < 0) {
   14900:	2800      	cmp	r0, #0
   14902:	da02      	bge.n	1490a <struct_pack_into+0x22>
        // negative offsets are relative to the end of the buffer
        offset = (mp_int_t)bufinfo.len + offset;
   14904:	9b02      	ldr	r3, [sp, #8]
        if (offset < 0) {
   14906:	18c0      	adds	r0, r0, r3
   14908:	d414      	bmi.n	14934 <struct_pack_into+0x4c>
            mp_raise_ValueError("buffer too small");
        }
    }
    byte *p = (byte *)bufinfo.buf;
   1490a:	9d01      	ldr	r5, [sp, #4]
    byte *end_p = &p[bufinfo.len];
   1490c:	9e02      	ldr	r6, [sp, #8]
   1490e:	442e      	add	r6, r5
    p += offset;
   14910:	4405      	add	r5, r0

    // Check that the output buffer is big enough to hold all the values
    mp_int_t sz = MP_OBJ_SMALL_INT_VALUE(struct_calcsize(args[0]));
   14912:	6820      	ldr	r0, [r4, #0]
   14914:	f7ff feee 	bl	146f4 <struct_calcsize>
    if (p + sz > end_p) {
   14918:	eb05 0060 	add.w	r0, r5, r0, asr #1
   1491c:	42b0      	cmp	r0, r6
   1491e:	d80c      	bhi.n	1493a <struct_pack_into+0x52>
        mp_raise_ValueError("buffer too small");
    }

    struct_pack_into_internal(args[0], p, n_args - 3, &args[3]);
   14920:	f104 030c 	add.w	r3, r4, #12
   14924:	1efa      	subs	r2, r7, #3
   14926:	4629      	mov	r1, r5
   14928:	6820      	ldr	r0, [r4, #0]
   1492a:	f7ff ff61 	bl	147f0 <struct_pack_into_internal>
    return mp_const_none;
}
   1492e:	4804      	ldr	r0, [pc, #16]	; (14940 <struct_pack_into+0x58>)
   14930:	b005      	add	sp, #20
   14932:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mp_raise_ValueError("buffer too small");
   14934:	4803      	ldr	r0, [pc, #12]	; (14944 <struct_pack_into+0x5c>)
   14936:	f7f5 fcb7 	bl	a2a8 <mp_raise_ValueError>
        mp_raise_ValueError("buffer too small");
   1493a:	4802      	ldr	r0, [pc, #8]	; (14944 <struct_pack_into+0x5c>)
   1493c:	f7f5 fcb4 	bl	a2a8 <mp_raise_ValueError>
   14940:	00027b40 	.word	0x00027b40
   14944:	00029a2c 	.word	0x00029a2c

00014948 <mp_sys_exit>:
// platform - the platform that MicroPython is running on
STATIC const MP_DEFINE_STR_OBJ(platform_obj, MICROPY_PY_SYS_PLATFORM);
#endif

// exit([retval]): raise SystemExit, with optional argument given to the exception
STATIC mp_obj_t mp_sys_exit(size_t n_args, const mp_obj_t *args) {
   14948:	b508      	push	{r3, lr}
    mp_obj_t exc;
    if (n_args == 0) {
   1494a:	b920      	cbnz	r0, 14956 <mp_sys_exit+0xe>
        exc = mp_obj_new_exception(&mp_type_SystemExit);
   1494c:	4804      	ldr	r0, [pc, #16]	; (14960 <mp_sys_exit+0x18>)
   1494e:	f7f8 f8ab 	bl	caa8 <mp_obj_new_exception>
    } else {
        exc = mp_obj_new_exception_arg1(&mp_type_SystemExit, args[0]);
    }
    nlr_raise(exc);
   14952:	f7eb ff95 	bl	880 <nlr_jump>
        exc = mp_obj_new_exception_arg1(&mp_type_SystemExit, args[0]);
   14956:	6809      	ldr	r1, [r1, #0]
   14958:	4801      	ldr	r0, [pc, #4]	; (14960 <mp_sys_exit+0x18>)
   1495a:	f7f8 f8ab 	bl	cab4 <mp_obj_new_exception_arg1>
   1495e:	e7f8      	b.n	14952 <mp_sys_exit+0xa>
   14960:	00026c48 	.word	0x00026c48

00014964 <mp_sys_print_exception>:
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_sys_exit_obj, 0, 1, mp_sys_exit);

STATIC mp_obj_t mp_sys_print_exception(size_t n_args, const mp_obj_t *args) {
   14964:	b508      	push	{r3, lr}

    mp_print_t print = {stream_obj, mp_stream_write_adaptor};
    mp_obj_print_exception(&print, args[0]);
    #else
    (void)n_args;
    mp_obj_print_exception(&mp_plat_print, args[0]);
   14966:	6809      	ldr	r1, [r1, #0]
   14968:	4802      	ldr	r0, [pc, #8]	; (14974 <mp_sys_print_exception+0x10>)
   1496a:	f7f6 f951 	bl	ac10 <mp_obj_print_exception>
    #endif

    return mp_const_none;
}
   1496e:	4802      	ldr	r0, [pc, #8]	; (14978 <mp_sys_print_exception+0x14>)
   14970:	bd08      	pop	{r3, pc}
   14972:	bf00      	nop
   14974:	00023684 	.word	0x00023684
   14978:	00027b40 	.word	0x00027b40

0001497c <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in fastn[0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   1497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   14980:	6803      	ldr	r3, [r0, #0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   14982:	b093      	sub	sp, #76	; 0x4c
   14984:	4606      	mov	r6, r0
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   14986:	6898      	ldr	r0, [r3, #8]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   14988:	9101      	str	r1, [sp, #4]
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   1498a:	f000 ffff 	bl	1598c <mp_decode_uint_value>
        fastn = &code_state->state[n_state - 1];
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
    }

    // variables that are visible to the exception handler (declared volatile)
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   1498e:	68f3      	ldr	r3, [r6, #12]
   14990:	f003 0201 	and.w	r2, r3, #1
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   14994:	f023 0303 	bic.w	r3, r3, #3
        fastn = &code_state->state[n_state - 1];
   14998:	f100 0a04 	add.w	sl, r0, #4
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   1499c:	f106 0714 	add.w	r7, r6, #20
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   149a0:	f88d 200f 	strb.w	r2, [sp, #15]
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   149a4:	9304      	str	r3, [sp, #16]
        fastn = &code_state->state[n_state - 1];
   149a6:	1e43      	subs	r3, r0, #1
   149a8:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   149ac:	eb07 0780 	add.w	r7, r7, r0, lsl #2
        fastn = &code_state->state[n_state - 1];
   149b0:	9300      	str	r3, [sp, #0]

    // outer exception handling loop
    for (;;) {
        nlr_buf_t nlr;
outer_dispatch_loop:
        if (nlr_push(&nlr) == 0) {
   149b2:	a806      	add	r0, sp, #24
   149b4:	f7eb ff52 	bl	85c <nlr_push>
   149b8:	2800      	cmp	r0, #0
   149ba:	d155      	bne.n	14a68 <mp_execute_bytecode+0xec>
            // If we have exception to inject, now that we finish setting up
            // execution context, raise it. This works as if RAISE_VARARGS
            // bytecode was executed.
            // Injecting exc into yield from generator is a special case,
            // handled by MP_BC_YIELD_FROM itself
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   149bc:	9b01      	ldr	r3, [sp, #4]
            mp_obj_t *sp = code_state->sp;
   149be:	e9d6 4501 	ldrd	r4, r5, [r6, #4]
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   149c2:	2b00      	cmp	r3, #0
   149c4:	f000 80a2 	beq.w	14b0c <mp_execute_bytecode+0x190>
   149c8:	7823      	ldrb	r3, [r4, #0]
   149ca:	2b5e      	cmp	r3, #94	; 0x5e
   149cc:	f000 809e 	beq.w	14b0c <mp_execute_bytecode+0x190>
                mp_obj_t exc = inject_exc;
   149d0:	9b01      	ldr	r3, [sp, #4]
                inject_exc = MP_OBJ_NULL;
   149d2:	9001      	str	r0, [sp, #4]
                exc = mp_make_raise_obj(exc);
   149d4:	4618      	mov	r0, r3
   149d6:	f7f5 faa7 	bl	9f28 <mp_make_raise_obj>
   149da:	4681      	mov	r9, r0
                RAISE(exc);
   149dc:	f7eb ff36 	bl	84c <nlr_pop>
   149e0:	f8cd 901c 	str.w	r9, [sp, #28]
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   149e4:	f8d9 0000 	ldr.w	r0, [r9]
   149e8:	49b1      	ldr	r1, [pc, #708]	; (14cb0 <mp_execute_bytecode+0x334>)
   149ea:	f7fd fe8d 	bl	12708 <mp_obj_is_subclass_fast>
   149ee:	2800      	cmp	r0, #0
   149f0:	d043      	beq.n	14a7a <mp_execute_bytecode+0xfe>
                if (code_state->ip) {
   149f2:	6873      	ldr	r3, [r6, #4]
   149f4:	2b00      	cmp	r3, #0
   149f6:	d040      	beq.n	14a7a <mp_execute_bytecode+0xfe>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   149f8:	781a      	ldrb	r2, [r3, #0]
   149fa:	2a43      	cmp	r2, #67	; 0x43
   149fc:	f000 80b5 	beq.w	14b6a <mp_execute_bytecode+0x1ee>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
                        code_state->ip = ip + ulab; // jump to after for-block
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
                        goto outer_dispatch_loop; // continue with dispatch loop
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   14a00:	2a5e      	cmp	r2, #94	; 0x5e
   14a02:	9807      	ldr	r0, [sp, #28]
   14a04:	f000 86ae 	beq.w	15764 <mp_execute_bytecode+0xde8>
unwind_loop:
#endif
            // set file and line number that the exception occurred at
            // TODO: don't set traceback for exceptions re-raised by END_FINALLY.
            // But consider how to handle nested exceptions.
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   14a08:	4baa      	ldr	r3, [pc, #680]	; (14cb4 <mp_execute_bytecode+0x338>)
   14a0a:	4298      	cmp	r0, r3
   14a0c:	d139      	bne.n	14a82 <mp_execute_bytecode+0x106>
                    }
                }
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
            }

            while (currently_in_except_block) {
   14a0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14a12:	b183      	cbz	r3, 14a36 <mp_execute_bytecode+0xba>
                // nested exception

                assert(exc_sp >= exc_stack);
   14a14:	9b04      	ldr	r3, [sp, #16]
   14a16:	42bb      	cmp	r3, r7
   14a18:	f0c0 8729 	bcc.w	1586e <mp_execute_bytecode+0xef2>

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   14a1c:	9b04      	ldr	r3, [sp, #16]
   14a1e:	685b      	ldr	r3, [r3, #4]
   14a20:	f003 0301 	and.w	r3, r3, #1
   14a24:	f88d 300f 	strb.w	r3, [sp, #15]
   14a28:	9b04      	ldr	r3, [sp, #16]
   14a2a:	3b0c      	subs	r3, #12
   14a2c:	9304      	str	r3, [sp, #16]
            while (currently_in_except_block) {
   14a2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14a32:	2b00      	cmp	r3, #0
   14a34:	d1ee      	bne.n	14a14 <mp_execute_bytecode+0x98>
            }

            if (exc_sp >= exc_stack) {
   14a36:	9b04      	ldr	r3, [sp, #16]
   14a38:	9a07      	ldr	r2, [sp, #28]
   14a3a:	42bb      	cmp	r3, r7
   14a3c:	f0c0 86fe 	bcc.w	1583c <mp_execute_bytecode+0xec0>
                // set flag to indicate that we are now handling an exception
                currently_in_except_block = 1;
   14a40:	2301      	movs	r3, #1
   14a42:	f88d 300f 	strb.w	r3, [sp, #15]

                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   14a46:	9804      	ldr	r0, [sp, #16]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   14a48:	9b04      	ldr	r3, [sp, #16]
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   14a4a:	9904      	ldr	r1, [sp, #16]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   14a4c:	685b      	ldr	r3, [r3, #4]
                code_state->ip = exc_sp->handler;
   14a4e:	6800      	ldr	r0, [r0, #0]
   14a50:	6070      	str	r0, [r6, #4]
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   14a52:	f023 0303 	bic.w	r3, r3, #3
                exc_sp->prev_exc = nlr.ret_val;
   14a56:	608a      	str	r2, [r1, #8]
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   14a58:	f843 2f04 	str.w	r2, [r3, #4]!
        if (nlr_push(&nlr) == 0) {
   14a5c:	a806      	add	r0, sp, #24
                code_state->sp = sp;
   14a5e:	60b3      	str	r3, [r6, #8]
        if (nlr_push(&nlr) == 0) {
   14a60:	f7eb fefc 	bl	85c <nlr_push>
   14a64:	2800      	cmp	r0, #0
   14a66:	d0a9      	beq.n	149bc <mp_execute_bytecode+0x40>
   14a68:	f8dd 901c 	ldr.w	r9, [sp, #28]
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   14a6c:	4990      	ldr	r1, [pc, #576]	; (14cb0 <mp_execute_bytecode+0x334>)
   14a6e:	f8d9 0000 	ldr.w	r0, [r9]
   14a72:	f7fd fe49 	bl	12708 <mp_obj_is_subclass_fast>
   14a76:	2800      	cmp	r0, #0
   14a78:	d1bb      	bne.n	149f2 <mp_execute_bytecode+0x76>
   14a7a:	9807      	ldr	r0, [sp, #28]
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   14a7c:	4b8d      	ldr	r3, [pc, #564]	; (14cb4 <mp_execute_bytecode+0x338>)
   14a7e:	4298      	cmp	r0, r3
   14a80:	d0c5      	beq.n	14a0e <mp_execute_bytecode+0x92>
                const byte *ip = code_state->fun_bc->bytecode;
   14a82:	6833      	ldr	r3, [r6, #0]
                ip = mp_decode_uint_skip(ip); // skip n_state
   14a84:	6898      	ldr	r0, [r3, #8]
   14a86:	f000 ff8c 	bl	159a2 <mp_decode_uint_skip>
                ip = mp_decode_uint_skip(ip); // skip n_exc_stack
   14a8a:	f000 ff8a 	bl	159a2 <mp_decode_uint_skip>
                size_t bc = code_state->ip - ip;
   14a8e:	6871      	ldr	r1, [r6, #4]
                ip++; // skip n_def_pos_args
   14a90:	1d05      	adds	r5, r0, #4
                size_t code_info_size = mp_decode_uint_value(ip);
   14a92:	4628      	mov	r0, r5
                size_t bc = code_state->ip - ip;
   14a94:	1b4c      	subs	r4, r1, r5
                size_t code_info_size = mp_decode_uint_value(ip);
   14a96:	f000 ff79 	bl	1598c <mp_decode_uint_value>
   14a9a:	4683      	mov	fp, r0
                ip = mp_decode_uint_skip(ip); // skip code_info_size
   14a9c:	4628      	mov	r0, r5
   14a9e:	f000 ff80 	bl	159a2 <mp_decode_uint_skip>
   14aa2:	4605      	mov	r5, r0
                qstr block_name = mp_decode_uint_value(ip);
   14aa4:	f000 ff72 	bl	1598c <mp_decode_uint_value>
   14aa8:	4681      	mov	r9, r0
                ip = mp_decode_uint_skip(ip);
   14aaa:	4628      	mov	r0, r5
   14aac:	f000 ff79 	bl	159a2 <mp_decode_uint_skip>
   14ab0:	4605      	mov	r5, r0
                qstr source_file = mp_decode_uint_value(ip);
   14ab2:	f000 ff6b 	bl	1598c <mp_decode_uint_value>
   14ab6:	4680      	mov	r8, r0
                ip = mp_decode_uint_skip(ip);
   14ab8:	4628      	mov	r0, r5
   14aba:	f000 ff72 	bl	159a2 <mp_decode_uint_skip>
                bc -= code_info_size;
   14abe:	eba4 010b 	sub.w	r1, r4, fp
                while ((c = *ip)) {
   14ac2:	7804      	ldrb	r4, [r0, #0]
                size_t source_line = 1;
   14ac4:	2201      	movs	r2, #1
                while ((c = *ip)) {
   14ac6:	b964      	cbnz	r4, 14ae2 <mp_execute_bytecode+0x166>
   14ac8:	e01a      	b.n	14b00 <mp_execute_bytecode+0x184>
                        b = c & 0x1f;
   14aca:	f004 051f 	and.w	r5, r4, #31
                    if (bc >= b) {
   14ace:	42a9      	cmp	r1, r5
                        ip += 1;
   14ad0:	f100 0001 	add.w	r0, r0, #1
                        l = c >> 5;
   14ad4:	ea4f 1354 	mov.w	r3, r4, lsr #5
                    if (bc >= b) {
   14ad8:	d312      	bcc.n	14b00 <mp_execute_bytecode+0x184>
                while ((c = *ip)) {
   14ada:	7804      	ldrb	r4, [r0, #0]
                        bc -= b;
   14adc:	1b49      	subs	r1, r1, r5
                        source_line += l;
   14ade:	441a      	add	r2, r3
                while ((c = *ip)) {
   14ae0:	b174      	cbz	r4, 14b00 <mp_execute_bytecode+0x184>
                    if ((c & 0x80) == 0) {
   14ae2:	0623      	lsls	r3, r4, #24
   14ae4:	d5f1      	bpl.n	14aca <mp_execute_bytecode+0x14e>
                        l = ((c << 4) & 0x700) | ip[1];
   14ae6:	f890 c001 	ldrb.w	ip, [r0, #1]
   14aea:	0123      	lsls	r3, r4, #4
                        b = c & 0xf;
   14aec:	f004 050f 	and.w	r5, r4, #15
                        l = ((c << 4) & 0x700) | ip[1];
   14af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
                    if (bc >= b) {
   14af4:	42a9      	cmp	r1, r5
                        l = ((c << 4) & 0x700) | ip[1];
   14af6:	ea43 030c 	orr.w	r3, r3, ip
                        ip += 2;
   14afa:	f100 0002 	add.w	r0, r0, #2
                    if (bc >= b) {
   14afe:	d2ec      	bcs.n	14ada <mp_execute_bytecode+0x15e>
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   14b00:	464b      	mov	r3, r9
   14b02:	4641      	mov	r1, r8
   14b04:	9807      	ldr	r0, [sp, #28]
   14b06:	f7f8 f8a3 	bl	cc50 <mp_obj_exception_add_traceback>
   14b0a:	e780      	b.n	14a0e <mp_execute_bytecode+0x92>
   14b0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 14cc0 <mp_execute_bytecode+0x344>
                    DISPATCH();
   14b10:	6074      	str	r4, [r6, #4]
   14b12:	7823      	ldrb	r3, [r4, #0]
   14b14:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14b18:	f043 0301 	orr.w	r3, r3, #1
   14b1c:	3401      	adds	r4, #1
   14b1e:	4718      	bx	r3
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   14b20:	9904      	ldr	r1, [sp, #16]
   14b22:	7860      	ldrb	r0, [r4, #1]
   14b24:	4623      	mov	r3, r4
   14b26:	310c      	adds	r1, #12
   14b28:	f813 2b02 	ldrb.w	r2, [r3], #2
   14b2c:	9104      	str	r1, [sp, #16]
   14b2e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   14b32:	9804      	ldr	r0, [sp, #16]
   14b34:	6871      	ldr	r1, [r6, #4]
   14b36:	441a      	add	r2, r3
   14b38:	6002      	str	r2, [r0, #0]
   14b3a:	7809      	ldrb	r1, [r1, #0]
   14b3c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14b40:	9804      	ldr	r0, [sp, #16]
   14b42:	2940      	cmp	r1, #64	; 0x40
   14b44:	bf14      	ite	ne
   14b46:	2100      	movne	r1, #0
   14b48:	2102      	moveq	r1, #2
   14b4a:	430a      	orrs	r2, r1
   14b4c:	432a      	orrs	r2, r5
   14b4e:	9904      	ldr	r1, [sp, #16]
   14b50:	6042      	str	r2, [r0, #4]
   14b52:	2200      	movs	r2, #0
   14b54:	608a      	str	r2, [r1, #8]
                    DISPATCH();
   14b56:	6073      	str	r3, [r6, #4]
   14b58:	781b      	ldrb	r3, [r3, #0]
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   14b5a:	f88d 200f 	strb.w	r2, [sp, #15]
                    DISPATCH();
   14b5e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14b62:	f043 0301 	orr.w	r3, r3, #1
   14b66:	3403      	adds	r4, #3
   14b68:	4718      	bx	r3
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   14b6a:	f8b3 1001 	ldrh.w	r1, [r3, #1]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   14b6e:	68b2      	ldr	r2, [r6, #8]
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   14b70:	3303      	adds	r3, #3
                        code_state->ip = ip + ulab; // jump to after for-block
   14b72:	440b      	add	r3, r1
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   14b74:	3a10      	subs	r2, #16
   14b76:	e9c6 3201 	strd	r3, r2, [r6, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   14b7a:	e71a      	b.n	149b2 <mp_execute_bytecode+0x36>
                        PUSH(ret_value);
   14b7c:	9b05      	ldr	r3, [sp, #20]
   14b7e:	602b      	str	r3, [r5, #0]
                        ip--;
   14b80:	3c01      	subs	r4, #1
                    nlr_pop();
   14b82:	f7eb fe63 	bl	84c <nlr_pop>
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   14b86:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14b8a:	9b04      	ldr	r3, [sp, #16]
                    code_state->ip = ip;
   14b8c:	6074      	str	r4, [r6, #4]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   14b8e:	4313      	orrs	r3, r2
   14b90:	e9c6 5302 	strd	r5, r3, [r6, #8]
                    return MP_VM_RETURN_YIELD;
   14b94:	2001      	movs	r0, #1
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   14b96:	b013      	add	sp, #76	; 0x4c
   14b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    mp_uint_t unum = *ip;
   14b9c:	7823      	ldrb	r3, [r4, #0]
                    if (unum == 2) {
   14b9e:	2b02      	cmp	r3, #2
   14ba0:	d012      	beq.n	14bc8 <mp_execute_bytecode+0x24c>
                    if (unum == 0) {
   14ba2:	b993      	cbnz	r3, 14bca <mp_execute_bytecode+0x24e>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   14ba4:	9b04      	ldr	r3, [sp, #16]
   14ba6:	429f      	cmp	r7, r3
   14ba8:	d804      	bhi.n	14bb4 <mp_execute_bytecode+0x238>
                            if (e->prev_exc != NULL) {
   14baa:	6898      	ldr	r0, [r3, #8]
   14bac:	b970      	cbnz	r0, 14bcc <mp_execute_bytecode+0x250>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   14bae:	3b0c      	subs	r3, #12
   14bb0:	429f      	cmp	r7, r3
   14bb2:	d9fa      	bls.n	14baa <mp_execute_bytecode+0x22e>
                            obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, "no active exception to reraise");
   14bb4:	4940      	ldr	r1, [pc, #256]	; (14cb8 <mp_execute_bytecode+0x33c>)
   14bb6:	4841      	ldr	r0, [pc, #260]	; (14cbc <mp_execute_bytecode+0x340>)
   14bb8:	f7f7 fff8 	bl	cbac <mp_obj_new_exception_msg>
   14bbc:	4681      	mov	r9, r0
                            RAISE(obj);
   14bbe:	f7eb fe45 	bl	84c <nlr_pop>
   14bc2:	f8cd 901c 	str.w	r9, [sp, #28]
   14bc6:	e70d      	b.n	149e4 <mp_execute_bytecode+0x68>
                        sp--;
   14bc8:	3d04      	subs	r5, #4
                        obj = TOP();
   14bca:	6828      	ldr	r0, [r5, #0]
                    obj = mp_make_raise_obj(obj);
   14bcc:	f7f5 f9ac 	bl	9f28 <mp_make_raise_obj>
   14bd0:	4681      	mov	r9, r0
                    RAISE(obj);
   14bd2:	f7eb fe3b 	bl	84c <nlr_pop>
   14bd6:	f8cd 901c 	str.w	r9, [sp, #28]
   14bda:	e703      	b.n	149e4 <mp_execute_bytecode+0x68>
                    if (currently_in_except_block) {
   14bdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14be0:	2b00      	cmp	r3, #0
   14be2:	f040 85cf 	bne.w	15784 <mp_execute_bytecode+0xe08>
                    while (exc_sp >= exc_stack) {
   14be6:	9b04      	ldr	r3, [sp, #16]
   14be8:	42bb      	cmp	r3, r7
   14bea:	d207      	bcs.n	14bfc <mp_execute_bytecode+0x280>
   14bec:	f000 bdf3 	b.w	157d6 <mp_execute_bytecode+0xe5a>
                        exc_sp--;
   14bf0:	3b0c      	subs	r3, #12
   14bf2:	9304      	str	r3, [sp, #16]
                    while (exc_sp >= exc_stack) {
   14bf4:	9b04      	ldr	r3, [sp, #16]
   14bf6:	42bb      	cmp	r3, r7
   14bf8:	f0c0 85ed 	bcc.w	157d6 <mp_execute_bytecode+0xe5a>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   14bfc:	9b04      	ldr	r3, [sp, #16]
   14bfe:	685b      	ldr	r3, [r3, #4]
   14c00:	f013 0f02 	tst.w	r3, #2
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   14c04:	9b04      	ldr	r3, [sp, #16]
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   14c06:	d0f3      	beq.n	14bf0 <mp_execute_bytecode+0x274>
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   14c08:	685b      	ldr	r3, [r3, #4]
                            ip = exc_sp->handler;
   14c0a:	9904      	ldr	r1, [sp, #16]
                            exc_sp--;
   14c0c:	9a04      	ldr	r2, [sp, #16]
                            finally_sp[1] = sp[0];
   14c0e:	6828      	ldr	r0, [r5, #0]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   14c10:	f023 0503 	bic.w	r5, r3, #3
                            exc_sp--;
   14c14:	f1a2 030c 	sub.w	r3, r2, #12
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   14c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                            finally_sp[1] = sp[0];
   14c1c:	6068      	str	r0, [r5, #4]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   14c1e:	60aa      	str	r2, [r5, #8]
                            ip = exc_sp->handler;
   14c20:	680c      	ldr	r4, [r1, #0]
                            exc_sp--;
   14c22:	9304      	str	r3, [sp, #16]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   14c24:	3508      	adds	r5, #8
                            goto dispatch_loop;
   14c26:	e773      	b.n	14b10 <mp_execute_bytecode+0x194>
                    DECODE_UINT;
   14c28:	2100      	movs	r1, #0
   14c2a:	e000      	b.n	14c2e <mp_execute_bytecode+0x2b2>
   14c2c:	464c      	mov	r4, r9
   14c2e:	46a1      	mov	r9, r4
   14c30:	f819 3b01 	ldrb.w	r3, [r9], #1
   14c34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   14c38:	0618      	lsls	r0, r3, #24
   14c3a:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   14c3e:	d4f5      	bmi.n	14c2c <mp_execute_bytecode+0x2b0>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   14c40:	09cb      	lsrs	r3, r1, #7
   14c42:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   14c46:	fa53 f381 	uxtab	r3, r3, r1
   14c4a:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   14c4e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14c52:	3d0c      	subs	r5, #12
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   14c54:	462a      	mov	r2, r5
   14c56:	2001      	movs	r0, #1
   14c58:	f7f5 f860 	bl	9d1c <mp_call_method_n_kw_var>
   14c5c:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   14c5e:	f8c6 9004 	str.w	r9, [r6, #4]
   14c62:	f899 3000 	ldrb.w	r3, [r9]
   14c66:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14c6a:	f043 0301 	orr.w	r3, r3, #1
   14c6e:	3402      	adds	r4, #2
   14c70:	4718      	bx	r3
                    DECODE_UINT;
   14c72:	2100      	movs	r1, #0
   14c74:	e000      	b.n	14c78 <mp_execute_bytecode+0x2fc>
   14c76:	464c      	mov	r4, r9
   14c78:	46a1      	mov	r9, r4
   14c7a:	f819 3b01 	ldrb.w	r3, [r9], #1
   14c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   14c82:	061b      	lsls	r3, r3, #24
   14c84:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   14c88:	d4f5      	bmi.n	14c76 <mp_execute_bytecode+0x2fa>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   14c8a:	b2c8      	uxtb	r0, r1
   14c8c:	09cb      	lsrs	r3, r1, #7
   14c8e:	1c42      	adds	r2, r0, #1
   14c90:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   14c94:	4413      	add	r3, r2
   14c96:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   14c9a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   14c9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   14ca2:	462a      	mov	r2, r5
   14ca4:	f7f4 fd21 	bl	96ea <mp_call_method_n_kw>
   14ca8:	e7d8      	b.n	14c5c <mp_execute_bytecode+0x2e0>
                    DECODE_UINT;
   14caa:	2100      	movs	r1, #0
   14cac:	e00b      	b.n	14cc6 <mp_execute_bytecode+0x34a>
   14cae:	bf00      	nop
   14cb0:	00026bd0 	.word	0x00026bd0
   14cb4:	000266d0 	.word	0x000266d0
   14cb8:	0002a024 	.word	0x0002a024
   14cbc:	00026b94 	.word	0x00026b94
   14cc0:	00029b3c 	.word	0x00029b3c
   14cc4:	464c      	mov	r4, r9
   14cc6:	46a1      	mov	r9, r4
   14cc8:	f819 3b01 	ldrb.w	r3, [r9], #1
   14ccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   14cd0:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   14cd4:	061a      	lsls	r2, r3, #24
   14cd6:	d4f5      	bmi.n	14cc4 <mp_execute_bytecode+0x348>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   14cd8:	09cb      	lsrs	r3, r1, #7
   14cda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   14cde:	fa53 f381 	uxtab	r3, r3, r1
   14ce2:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   14ce6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14cea:	3d08      	subs	r5, #8
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   14cec:	462a      	mov	r2, r5
   14cee:	2000      	movs	r0, #0
   14cf0:	e7b2      	b.n	14c58 <mp_execute_bytecode+0x2dc>
                    DECODE_UINT;
   14cf2:	2200      	movs	r2, #0
   14cf4:	e000      	b.n	14cf8 <mp_execute_bytecode+0x37c>
   14cf6:	464c      	mov	r4, r9
   14cf8:	46a1      	mov	r9, r4
   14cfa:	f819 3b01 	ldrb.w	r3, [r9], #1
   14cfe:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   14d02:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   14d06:	0619      	lsls	r1, r3, #24
   14d08:	d4f5      	bmi.n	14cf6 <mp_execute_bytecode+0x37a>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   14d0a:	09d3      	lsrs	r3, r2, #7
   14d0c:	b2d1      	uxtb	r1, r2
   14d0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   14d12:	440b      	add	r3, r1
   14d14:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   14d18:	f3c2 2207 	ubfx	r2, r2, #8, #8
   14d1c:	1d2b      	adds	r3, r5, #4
   14d1e:	6828      	ldr	r0, [r5, #0]
   14d20:	f7f4 fcb0 	bl	9684 <mp_call_function_n_kw>
   14d24:	e79a      	b.n	14c5c <mp_execute_bytecode+0x2e0>
                    DECODE_PTR;
   14d26:	3403      	adds	r4, #3
   14d28:	f024 0403 	bic.w	r4, r4, #3
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   14d2c:	46a1      	mov	r9, r4
                    size_t n_closed_over = *ip++;
   14d2e:	7921      	ldrb	r1, [r4, #4]
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   14d30:	f859 0b05 	ldr.w	r0, [r9], #5
                    sp -= 2 + n_closed_over - 1;
   14d34:	43cb      	mvns	r3, r1
   14d36:	eb05 0583 	add.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   14d3a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   14d3e:	462a      	mov	r2, r5
   14d40:	f7f4 fb3a 	bl	93b8 <mp_make_closure_from_raw_code>
   14d44:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   14d46:	f8c6 9004 	str.w	r9, [r6, #4]
   14d4a:	7963      	ldrb	r3, [r4, #5]
   14d4c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14d50:	f043 0301 	orr.w	r3, r3, #1
   14d54:	3406      	adds	r4, #6
   14d56:	4718      	bx	r3
                    DECODE_PTR;
   14d58:	3403      	adds	r4, #3
   14d5a:	f024 0403 	bic.w	r4, r4, #3
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   14d5e:	46a1      	mov	r9, r4
                    size_t n_closed_over = *ip++;
   14d60:	7921      	ldrb	r1, [r4, #4]
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   14d62:	f859 0b05 	ldr.w	r0, [r9], #5
                    sp -= n_closed_over - 1;
   14d66:	ebc1 7381 	rsb	r3, r1, r1, lsl #30
   14d6a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14d6e:	3504      	adds	r5, #4
   14d70:	e7e5      	b.n	14d3e <mp_execute_bytecode+0x3c2>
                    DECODE_PTR;
   14d72:	3403      	adds	r4, #3
   14d74:	f024 0403 	bic.w	r4, r4, #3
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   14d78:	46a1      	mov	r9, r4
   14d7a:	e955 1201 	ldrd	r1, r2, [r5, #-4]
   14d7e:	f859 0b04 	ldr.w	r0, [r9], #4
   14d82:	f7f4 fac9 	bl	9318 <mp_make_function_from_raw_code>
   14d86:	f845 0c04 	str.w	r0, [r5, #-4]
                    DISPATCH();
   14d8a:	f8c6 9004 	str.w	r9, [r6, #4]
   14d8e:	7923      	ldrb	r3, [r4, #4]
   14d90:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14d94:	f043 0301 	orr.w	r3, r3, #1
                    mp_obj_t def_dict = POP();
   14d98:	3d04      	subs	r5, #4
                    DISPATCH();
   14d9a:	3405      	adds	r4, #5
   14d9c:	4718      	bx	r3
                    DECODE_PTR;
   14d9e:	3403      	adds	r4, #3
   14da0:	f024 0403 	bic.w	r4, r4, #3
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   14da4:	46a1      	mov	r9, r4
   14da6:	2200      	movs	r2, #0
   14da8:	f859 0b04 	ldr.w	r0, [r9], #4
   14dac:	4611      	mov	r1, r2
   14dae:	f7f4 fab3 	bl	9318 <mp_make_function_from_raw_code>
   14db2:	f845 0f04 	str.w	r0, [r5, #4]!
                    DISPATCH();
   14db6:	f8c6 9004 	str.w	r9, [r6, #4]
   14dba:	7923      	ldrb	r3, [r4, #4]
   14dbc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14dc0:	f043 0301 	orr.w	r3, r3, #1
   14dc4:	3405      	adds	r4, #5
   14dc6:	4718      	bx	r3
                    DECODE_UINT;
   14dc8:	f04f 0b00 	mov.w	fp, #0
   14dcc:	e000      	b.n	14dd0 <mp_execute_bytecode+0x454>
   14dce:	464c      	mov	r4, r9
   14dd0:	46a1      	mov	r9, r4
   14dd2:	f819 3b01 	ldrb.w	r3, [r9], #1
   14dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   14dda:	0618      	lsls	r0, r3, #24
   14ddc:	eb02 1bcb 	add.w	fp, r2, fp, lsl #7
   14de0:	d4f5      	bmi.n	14dce <mp_execute_bytecode+0x452>
                    mp_unpack_ex(sp[0], unum, sp);
   14de2:	462a      	mov	r2, r5
   14de4:	4659      	mov	r1, fp
   14de6:	6828      	ldr	r0, [r5, #0]
   14de8:	f7f5 f808 	bl	9dfc <mp_unpack_ex>
                    DISPATCH();
   14dec:	f8c6 9004 	str.w	r9, [r6, #4]
   14df0:	f899 3000 	ldrb.w	r3, [r9]
   14df4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   14df8:	f3cb 2207 	ubfx	r2, fp, #8, #8
   14dfc:	fa52 fb8b 	uxtab	fp, r2, fp
   14e00:	f043 0301 	orr.w	r3, r3, #1
                    DISPATCH();
   14e04:	3402      	adds	r4, #2
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   14e06:	eb05 058b 	add.w	r5, r5, fp, lsl #2
   14e0a:	4718      	bx	r3
                    DECODE_UINT;
   14e0c:	f04f 0b00 	mov.w	fp, #0
   14e10:	e000      	b.n	14e14 <mp_execute_bytecode+0x498>
   14e12:	464c      	mov	r4, r9
   14e14:	46a1      	mov	r9, r4
   14e16:	f819 3b01 	ldrb.w	r3, [r9], #1
   14e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   14e1e:	061b      	lsls	r3, r3, #24
   14e20:	eb02 1bcb 	add.w	fp, r2, fp, lsl #7
   14e24:	d4f5      	bmi.n	14e12 <mp_execute_bytecode+0x496>
                    mp_unpack_sequence(sp[0], unum, sp);
   14e26:	462a      	mov	r2, r5
   14e28:	4659      	mov	r1, fp
   14e2a:	6828      	ldr	r0, [r5, #0]
   14e2c:	f7f4 ff88 	bl	9d40 <mp_unpack_sequence>
                    DISPATCH();
   14e30:	f8c6 9004 	str.w	r9, [r6, #4]
   14e34:	f899 3000 	ldrb.w	r3, [r9]
   14e38:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
                    sp += unum - 1;
   14e3c:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   14e40:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   14e44:	f043 0301 	orr.w	r3, r3, #1
                    DISPATCH();
   14e48:	3402      	adds	r4, #2
                    sp += unum - 1;
   14e4a:	eb05 058b 	add.w	r5, r5, fp, lsl #2
   14e4e:	4718      	bx	r3
                    DECODE_UINT;
   14e50:	2200      	movs	r2, #0
   14e52:	e000      	b.n	14e56 <mp_execute_bytecode+0x4da>
   14e54:	464c      	mov	r4, r9
   14e56:	46a1      	mov	r9, r4
   14e58:	f819 3b01 	ldrb.w	r3, [r9], #1
   14e5c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   14e60:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   14e64:	0619      	lsls	r1, r3, #24
   14e66:	d4f5      	bmi.n	14e54 <mp_execute_bytecode+0x4d8>
                    mp_obj_t obj = sp[-(unum >> 2)];
   14e68:	0893      	lsrs	r3, r2, #2
   14e6a:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
                    if ((unum & 3) == 0) {
   14e6e:	0792      	lsls	r2, r2, #30
   14e70:	f1a5 0b04 	sub.w	fp, r5, #4
                    mp_obj_t obj = sp[-(unum >> 2)];
   14e74:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   14e78:	6829      	ldr	r1, [r5, #0]
                    if ((unum & 3) == 0) {
   14e7a:	f040 847c 	bne.w	15776 <mp_execute_bytecode+0xdfa>
                        mp_obj_list_append(obj, sp[0]);
   14e7e:	f7f9 fabf 	bl	e400 <mp_obj_list_append>
   14e82:	465d      	mov	r5, fp
   14e84:	e01d      	b.n	14ec2 <mp_execute_bytecode+0x546>
                    sp -= 2;
   14e86:	3d08      	subs	r5, #8
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   14e88:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
   14e8c:	6828      	ldr	r0, [r5, #0]
   14e8e:	f7f7 fcbb 	bl	c808 <mp_obj_dict_store>
                    DISPATCH();
   14e92:	6074      	str	r4, [r6, #4]
   14e94:	7823      	ldrb	r3, [r4, #0]
   14e96:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14e9a:	f043 0301 	orr.w	r3, r3, #1
   14e9e:	3401      	adds	r4, #1
   14ea0:	4718      	bx	r3
                    DECODE_UINT;
   14ea2:	2000      	movs	r0, #0
   14ea4:	e000      	b.n	14ea8 <mp_execute_bytecode+0x52c>
   14ea6:	464c      	mov	r4, r9
   14ea8:	46a1      	mov	r9, r4
   14eaa:	f819 3b01 	ldrb.w	r3, [r9], #1
   14eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   14eb2:	061b      	lsls	r3, r3, #24
   14eb4:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   14eb8:	d4f5      	bmi.n	14ea6 <mp_execute_bytecode+0x52a>
                    PUSH(mp_obj_new_dict(unum));
   14eba:	f7f7 fc0f 	bl	c6dc <mp_obj_new_dict>
                    PUSH(obj);
   14ebe:	f845 0f04 	str.w	r0, [r5, #4]!
                    DISPATCH();
   14ec2:	f8c6 9004 	str.w	r9, [r6, #4]
   14ec6:	f899 3000 	ldrb.w	r3, [r9]
   14eca:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14ece:	f043 0301 	orr.w	r3, r3, #1
   14ed2:	3402      	adds	r4, #2
   14ed4:	4718      	bx	r3
                    DECODE_UINT;
   14ed6:	2000      	movs	r0, #0
   14ed8:	e000      	b.n	14edc <mp_execute_bytecode+0x560>
   14eda:	464c      	mov	r4, r9
   14edc:	46a1      	mov	r9, r4
   14ede:	f819 3b01 	ldrb.w	r3, [r9], #1
   14ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   14ee6:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   14eea:	061a      	lsls	r2, r3, #24
   14eec:	d4f5      	bmi.n	14eda <mp_execute_bytecode+0x55e>
                    sp -= unum - 1;
   14eee:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   14ef2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14ef6:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_list(unum, sp));
   14ef8:	4629      	mov	r1, r5
   14efa:	f7f9 fdbd 	bl	ea78 <mp_obj_new_list>
   14efe:	e6ad      	b.n	14c5c <mp_execute_bytecode+0x2e0>
                    DECODE_UINT;
   14f00:	2000      	movs	r0, #0
   14f02:	e000      	b.n	14f06 <mp_execute_bytecode+0x58a>
   14f04:	464c      	mov	r4, r9
   14f06:	46a1      	mov	r9, r4
   14f08:	f819 3b01 	ldrb.w	r3, [r9], #1
   14f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   14f10:	0619      	lsls	r1, r3, #24
   14f12:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   14f16:	d4f5      	bmi.n	14f04 <mp_execute_bytecode+0x588>
                    sp -= unum - 1;
   14f18:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   14f1c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14f20:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   14f22:	4629      	mov	r1, r5
   14f24:	f7fc fc8e 	bl	11844 <mp_obj_new_tuple>
   14f28:	e698      	b.n	14c5c <mp_execute_bytecode+0x2e0>
                    assert(exc_sp >= exc_stack);
   14f2a:	9b04      	ldr	r3, [sp, #16]
   14f2c:	42bb      	cmp	r3, r7
   14f2e:	f0c0 84d8 	bcc.w	158e2 <mp_execute_bytecode+0xf66>
                    assert(currently_in_except_block);
   14f32:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14f36:	2b00      	cmp	r3, #0
   14f38:	f000 84b7 	beq.w	158aa <mp_execute_bytecode+0xf2e>
                    POP_EXC_BLOCK();
   14f3c:	9b04      	ldr	r3, [sp, #16]
   14f3e:	685b      	ldr	r3, [r3, #4]
                    DISPATCH();
   14f40:	6074      	str	r4, [r6, #4]
                    POP_EXC_BLOCK();
   14f42:	f003 0301 	and.w	r3, r3, #1
   14f46:	f88d 300f 	strb.w	r3, [sp, #15]
   14f4a:	9b04      	ldr	r3, [sp, #16]
                    DISPATCH();
   14f4c:	7822      	ldrb	r2, [r4, #0]
                    POP_EXC_BLOCK();
   14f4e:	3b0c      	subs	r3, #12
   14f50:	9304      	str	r3, [sp, #16]
                    DISPATCH();
   14f52:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   14f56:	f043 0301 	orr.w	r3, r3, #1
   14f5a:	3401      	adds	r4, #1
   14f5c:	4718      	bx	r3
                    assert(exc_sp >= exc_stack);
   14f5e:	9b04      	ldr	r3, [sp, #16]
   14f60:	42bb      	cmp	r3, r7
   14f62:	d2eb      	bcs.n	14f3c <mp_execute_bytecode+0x5c0>
   14f64:	4bc1      	ldr	r3, [pc, #772]	; (1526c <mp_execute_bytecode+0x8f0>)
   14f66:	4ac2      	ldr	r2, [pc, #776]	; (15270 <mp_execute_bytecode+0x8f4>)
   14f68:	48c2      	ldr	r0, [pc, #776]	; (15274 <mp_execute_bytecode+0x8f8>)
   14f6a:	f240 21ff 	movw	r1, #767	; 0x2ff
   14f6e:	f003 faf5 	bl	1855c <__assert_func>
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   14f72:	f894 9000 	ldrb.w	r9, [r4]
   14f76:	f894 b001 	ldrb.w	fp, [r4, #1]
                    code_state->sp = sp;
   14f7a:	60b5      	str	r5, [r6, #8]
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   14f7c:	f855 3c0c 	ldr.w	r3, [r5, #-12]
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   14f80:	3402      	adds	r4, #2
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   14f82:	f1a5 000c 	sub.w	r0, r5, #12
   14f86:	2b00      	cmp	r3, #0
   14f88:	f000 843b 	beq.w	15802 <mp_execute_bytecode+0xe86>
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   14f8c:	f7f4 fd08 	bl	99a0 <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   14f90:	2804      	cmp	r0, #4
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   14f92:	bf06      	itte	eq
   14f94:	ea49 290b 	orreq.w	r9, r9, fp, lsl #8
                        ip += ulab; // jump to after for-block
   14f98:	444c      	addeq	r4, r9
                        PUSH(value); // push the next iteration value
   14f9a:	f845 0f04 	strne.w	r0, [r5, #4]!
                    DISPATCH();
   14f9e:	6074      	str	r4, [r6, #4]
   14fa0:	7823      	ldrb	r3, [r4, #0]
   14fa2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14fa6:	f043 0301 	orr.w	r3, r3, #1
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   14faa:	bf08      	it	eq
   14fac:	3d10      	subeq	r5, #16
                    DISPATCH();
   14fae:	3401      	adds	r4, #1
   14fb0:	4718      	bx	r3
                    mp_obj_t obj = TOP();
   14fb2:	6828      	ldr	r0, [r5, #0]
                    obj = mp_getiter(obj, iter_buf);
   14fb4:	4629      	mov	r1, r5
   14fb6:	f7f4 fcab 	bl	9910 <mp_getiter>
                    mp_obj_iter_buf_t *iter_buf = (mp_obj_iter_buf_t*)sp;
   14fba:	46a9      	mov	r9, r5
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   14fbc:	4581      	cmp	r9, r0
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   14fbe:	f105 050c 	add.w	r5, r5, #12
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   14fc2:	f43f af66 	beq.w	14e92 <mp_execute_bytecode+0x516>
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   14fc6:	2300      	movs	r3, #0
   14fc8:	e945 3003 	strd	r3, r0, [r5, #-12]
   14fcc:	e761      	b.n	14e92 <mp_execute_bytecode+0x516>
                    SET_TOP(mp_getiter(TOP(), NULL));
   14fce:	2100      	movs	r1, #0
   14fd0:	6828      	ldr	r0, [r5, #0]
   14fd2:	f7f4 fc9d 	bl	9910 <mp_getiter>
                    SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   14fd6:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   14fd8:	6074      	str	r4, [r6, #4]
   14fda:	7823      	ldrb	r3, [r4, #0]
   14fdc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14fe0:	f043 0301 	orr.w	r3, r3, #1
   14fe4:	3401      	adds	r4, #1
   14fe6:	4718      	bx	r3
                    if (TOP() == mp_const_none) {
   14fe8:	6828      	ldr	r0, [r5, #0]
   14fea:	4ba3      	ldr	r3, [pc, #652]	; (15278 <mp_execute_bytecode+0x8fc>)
   14fec:	4298      	cmp	r0, r3
   14fee:	f040 842c 	bne.w	1584a <mp_execute_bytecode+0xece>
                    DISPATCH();
   14ff2:	4623      	mov	r3, r4
                    DISPATCH();
   14ff4:	6074      	str	r4, [r6, #4]
   14ff6:	781b      	ldrb	r3, [r3, #0]
   14ff8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   14ffc:	f043 0301 	orr.w	r3, r3, #1
                    mp_obj_t rhs = POP();
   15000:	3d04      	subs	r5, #4
                    DISPATCH();
   15002:	3401      	adds	r4, #1
   15004:	4718      	bx	r3
                    DECODE_SLABEL;
   15006:	7862      	ldrb	r2, [r4, #1]
   15008:	7823      	ldrb	r3, [r4, #0]
   1500a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1500e:	4423      	add	r3, r4
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   15010:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   15014:	3b7e      	subs	r3, #126	; 0x7e
   15016:	606b      	str	r3, [r5, #4]
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   15018:	78a3      	ldrb	r3, [r4, #2]
   1501a:	60ab      	str	r3, [r5, #8]
   1501c:	3508      	adds	r5, #8
                    while ((unum & 0x7f) > 0) {
   1501e:	0658      	lsls	r0, r3, #25
   15020:	f000 83ea 	beq.w	157f8 <mp_execute_bytecode+0xe7c>
                        assert(exc_sp >= exc_stack);
   15024:	9a04      	ldr	r2, [sp, #16]
   15026:	4297      	cmp	r7, r2
                        unum -= 1;
   15028:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   1502c:	d913      	bls.n	15056 <mp_execute_bytecode+0x6da>
   1502e:	f000 bc5f 	b.w	158f0 <mp_execute_bytecode+0xf74>
                        POP_EXC_BLOCK();
   15032:	9a04      	ldr	r2, [sp, #16]
   15034:	6852      	ldr	r2, [r2, #4]
   15036:	f002 0201 	and.w	r2, r2, #1
   1503a:	f88d 200f 	strb.w	r2, [sp, #15]
   1503e:	9a04      	ldr	r2, [sp, #16]
   15040:	3a0c      	subs	r2, #12
   15042:	9204      	str	r2, [sp, #16]
                    while ((unum & 0x7f) > 0) {
   15044:	065a      	lsls	r2, r3, #25
   15046:	f000 83d7 	beq.w	157f8 <mp_execute_bytecode+0xe7c>
                        assert(exc_sp >= exc_stack);
   1504a:	9a04      	ldr	r2, [sp, #16]
   1504c:	42ba      	cmp	r2, r7
                        unum -= 1;
   1504e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   15052:	f0c0 844d 	bcc.w	158f0 <mp_execute_bytecode+0xf74>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   15056:	9a04      	ldr	r2, [sp, #16]
   15058:	6852      	ldr	r2, [r2, #4]
   1505a:	0791      	lsls	r1, r2, #30
   1505c:	d5e9      	bpl.n	15032 <mp_execute_bytecode+0x6b6>
                            ip = exc_sp->handler; // get exception handler byte code address
   1505e:	9904      	ldr	r1, [sp, #16]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   15060:	005a      	lsls	r2, r3, #1
                            exc_sp--; // pop exception handler
   15062:	9b04      	ldr	r3, [sp, #16]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   15064:	f042 0201 	orr.w	r2, r2, #1
   15068:	602a      	str	r2, [r5, #0]
                            exc_sp--; // pop exception handler
   1506a:	3b0c      	subs	r3, #12
                            ip = exc_sp->handler; // get exception handler byte code address
   1506c:	680c      	ldr	r4, [r1, #0]
                            exc_sp--; // pop exception handler
   1506e:	9304      	str	r3, [sp, #16]
                            goto dispatch_loop; // run the exception handler
   15070:	e54e      	b.n	14b10 <mp_execute_bytecode+0x194>
                    if (TOP() == mp_const_none) {
   15072:	f8d5 b000 	ldr.w	fp, [r5]
   15076:	4b80      	ldr	r3, [pc, #512]	; (15278 <mp_execute_bytecode+0x8fc>)
   15078:	459b      	cmp	fp, r3
   1507a:	f000 83d3 	beq.w	15824 <mp_execute_bytecode+0xea8>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1507e:	f01b 0901 	ands.w	r9, fp, #1
   15082:	f040 8395 	bne.w	157b0 <mp_execute_bytecode+0xe34>
                        assert(mp_obj_is_exception_instance(TOP()));
   15086:	4658      	mov	r0, fp
   15088:	f7f7 fdac 	bl	cbe4 <mp_obj_is_exception_instance>
   1508c:	2800      	cmp	r0, #0
   1508e:	f000 841a 	beq.w	158c6 <mp_execute_bytecode+0xf4a>
                        sp[1] = sp[0];
   15092:	6828      	ldr	r0, [r5, #0]
   15094:	6068      	str	r0, [r5, #4]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   15096:	f7f5 fd71 	bl	ab7c <mp_obj_get_type>
                        sp[2] = mp_const_none;
   1509a:	4b77      	ldr	r3, [pc, #476]	; (15278 <mp_execute_bytecode+0x8fc>)
   1509c:	60ab      	str	r3, [r5, #8]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   1509e:	6028      	str	r0, [r5, #0]
                        sp -= 2;
   150a0:	3d08      	subs	r5, #8
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   150a2:	4649      	mov	r1, r9
   150a4:	462a      	mov	r2, r5
   150a6:	2003      	movs	r0, #3
   150a8:	f7f4 fb1f 	bl	96ea <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   150ac:	f7f6 f866 	bl	b17c <mp_obj_is_true>
   150b0:	2800      	cmp	r0, #0
   150b2:	f000 83b3 	beq.w	1581c <mp_execute_bytecode+0xea0>
                            assert(exc_sp >= exc_stack);
   150b6:	9b04      	ldr	r3, [sp, #16]
                            SET_TOP(mp_const_none);
   150b8:	4a6f      	ldr	r2, [pc, #444]	; (15278 <mp_execute_bytecode+0x8fc>)
   150ba:	602a      	str	r2, [r5, #0]
                            assert(exc_sp >= exc_stack);
   150bc:	42bb      	cmp	r3, r7
   150be:	f0c0 83fb 	bcc.w	158b8 <mp_execute_bytecode+0xf3c>
                            POP_EXC_BLOCK();
   150c2:	9b04      	ldr	r3, [sp, #16]
   150c4:	685b      	ldr	r3, [r3, #4]
   150c6:	f003 0301 	and.w	r3, r3, #1
   150ca:	f88d 300f 	strb.w	r3, [sp, #15]
   150ce:	9b04      	ldr	r3, [sp, #16]
   150d0:	3b0c      	subs	r3, #12
   150d2:	9304      	str	r3, [sp, #16]
   150d4:	e6dd      	b.n	14e92 <mp_execute_bytecode+0x516>
                    mp_obj_t obj = TOP();
   150d6:	f8d5 b000 	ldr.w	fp, [r5]
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   150da:	f105 0908 	add.w	r9, r5, #8
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   150de:	462a      	mov	r2, r5
   150e0:	4658      	mov	r0, fp
   150e2:	210c      	movs	r1, #12
   150e4:	f7f4 fb92 	bl	980c <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   150e8:	4658      	mov	r0, fp
   150ea:	464a      	mov	r2, r9
   150ec:	210a      	movs	r1, #10
   150ee:	f7f4 fb8d 	bl	980c <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   150f2:	2100      	movs	r1, #0
   150f4:	464a      	mov	r2, r9
   150f6:	4608      	mov	r0, r1
   150f8:	f7f4 faf7 	bl	96ea <mp_call_method_n_kw>
                    PUSH_EXC_BLOCK(1);
   150fc:	9a04      	ldr	r2, [sp, #16]
   150fe:	f894 c001 	ldrb.w	ip, [r4, #1]
   15102:	4623      	mov	r3, r4
   15104:	320c      	adds	r2, #12
   15106:	f813 1b02 	ldrb.w	r1, [r3], #2
   1510a:	9204      	str	r2, [sp, #16]
   1510c:	f8dd b010 	ldr.w	fp, [sp, #16]
   15110:	f89d 200f 	ldrb.w	r2, [sp, #15]
   15114:	f8dd e010 	ldr.w	lr, [sp, #16]
   15118:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
                    sp += 1;
   1511c:	3504      	adds	r5, #4
                    PUSH_EXC_BLOCK(1);
   1511e:	4419      	add	r1, r3
   15120:	f8dd c010 	ldr.w	ip, [sp, #16]
   15124:	f8cb 1000 	str.w	r1, [fp]
   15128:	f042 0202 	orr.w	r2, r2, #2
   1512c:	432a      	orrs	r2, r5
   1512e:	2100      	movs	r1, #0
   15130:	f8ce 2004 	str.w	r2, [lr, #4]
   15134:	f8cc 1008 	str.w	r1, [ip, #8]
                    PUSH(ret);
   15138:	6068      	str	r0, [r5, #4]
                    DISPATCH();
   1513a:	6073      	str	r3, [r6, #4]
   1513c:	781b      	ldrb	r3, [r3, #0]
                    PUSH_EXC_BLOCK(1);
   1513e:	f88d 100f 	strb.w	r1, [sp, #15]
                    DISPATCH();
   15142:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   15146:	f043 0301 	orr.w	r3, r3, #1
                    PUSH(ret);
   1514a:	464d      	mov	r5, r9
                    DISPATCH();
   1514c:	3403      	adds	r4, #3
   1514e:	4718      	bx	r3
                    if (mp_obj_is_true(TOP())) {
   15150:	6828      	ldr	r0, [r5, #0]
                    DECODE_SLABEL;
   15152:	f894 9000 	ldrb.w	r9, [r4]
   15156:	f894 b001 	ldrb.w	fp, [r4, #1]
   1515a:	3402      	adds	r4, #2
                    if (mp_obj_is_true(TOP())) {
   1515c:	f7f6 f80e 	bl	b17c <mp_obj_is_true>
   15160:	b9e0      	cbnz	r0, 1519c <mp_execute_bytecode+0x820>
                    DECODE_SLABEL;
   15162:	ea49 230b 	orr.w	r3, r9, fp, lsl #8
   15166:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
                        ip += slab;
   1516a:	441c      	add	r4, r3
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   1516c:	4b43      	ldr	r3, [pc, #268]	; (1527c <mp_execute_bytecode+0x900>)
   1516e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   15170:	2a00      	cmp	r2, #0
   15172:	f43f accd 	beq.w	14b10 <mp_execute_bytecode+0x194>
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   15176:	2200      	movs	r2, #0
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   15178:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   1517c:	645a      	str	r2, [r3, #68]	; 0x44
                    RAISE(obj);
   1517e:	f7eb fb65 	bl	84c <nlr_pop>
   15182:	f8cd 901c 	str.w	r9, [sp, #28]
   15186:	e42d      	b.n	149e4 <mp_execute_bytecode+0x68>
                    if (mp_obj_is_true(TOP())) {
   15188:	6828      	ldr	r0, [r5, #0]
                    DECODE_SLABEL;
   1518a:	f894 9000 	ldrb.w	r9, [r4]
   1518e:	f894 b001 	ldrb.w	fp, [r4, #1]
   15192:	3402      	adds	r4, #2
                    if (mp_obj_is_true(TOP())) {
   15194:	f7f5 fff2 	bl	b17c <mp_obj_is_true>
   15198:	2800      	cmp	r0, #0
   1519a:	d1e2      	bne.n	15162 <mp_execute_bytecode+0x7e6>
                        sp--;
   1519c:	3d04      	subs	r5, #4
   1519e:	e7e5      	b.n	1516c <mp_execute_bytecode+0x7f0>
                    if (!mp_obj_is_true(POP())) {
   151a0:	6828      	ldr	r0, [r5, #0]
                    DECODE_SLABEL;
   151a2:	f894 9000 	ldrb.w	r9, [r4]
   151a6:	f894 b001 	ldrb.w	fp, [r4, #1]
                    if (!mp_obj_is_true(POP())) {
   151aa:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   151ac:	3402      	adds	r4, #2
                    if (!mp_obj_is_true(POP())) {
   151ae:	f7f5 ffe5 	bl	b17c <mp_obj_is_true>
   151b2:	2800      	cmp	r0, #0
   151b4:	d1da      	bne.n	1516c <mp_execute_bytecode+0x7f0>
   151b6:	e7d4      	b.n	15162 <mp_execute_bytecode+0x7e6>
                    if (mp_obj_is_true(POP())) {
   151b8:	6828      	ldr	r0, [r5, #0]
                    DECODE_SLABEL;
   151ba:	f894 9000 	ldrb.w	r9, [r4]
   151be:	f894 b001 	ldrb.w	fp, [r4, #1]
                    if (mp_obj_is_true(POP())) {
   151c2:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   151c4:	3402      	adds	r4, #2
                    if (mp_obj_is_true(POP())) {
   151c6:	f7f5 ffd9 	bl	b17c <mp_obj_is_true>
   151ca:	2800      	cmp	r0, #0
   151cc:	d0ce      	beq.n	1516c <mp_execute_bytecode+0x7f0>
   151ce:	e7c8      	b.n	15162 <mp_execute_bytecode+0x7e6>
                    DECODE_SLABEL;
   151d0:	4622      	mov	r2, r4
   151d2:	7861      	ldrb	r1, [r4, #1]
   151d4:	f812 3b02 	ldrb.w	r3, [r2], #2
   151d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   151dc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
                    ip += slab;
   151e0:	18d4      	adds	r4, r2, r3
                    DISPATCH_WITH_PEND_EXC_CHECK();
   151e2:	e7c3      	b.n	1516c <mp_execute_bytecode+0x7f0>
                    sp[0] = sp[-1];
   151e4:	f1a5 0108 	sub.w	r1, r5, #8
   151e8:	c90e      	ldmia	r1, {r1, r2, r3}
   151ea:	e945 1201 	strd	r1, r2, [r5, #-4]
                    sp[-2] = top;
   151ee:	f845 3c08 	str.w	r3, [r5, #-8]
                    DISPATCH();
   151f2:	6074      	str	r4, [r6, #4]
   151f4:	7823      	ldrb	r3, [r4, #0]
   151f6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   151fa:	f043 0301 	orr.w	r3, r3, #1
   151fe:	3401      	adds	r4, #1
   15200:	4718      	bx	r3
                    sp[0] = sp[-1];
   15202:	e955 3201 	ldrd	r3, r2, [r5, #-4]
   15206:	602b      	str	r3, [r5, #0]
                    sp[-1] = top;
   15208:	f845 2c04 	str.w	r2, [r5, #-4]
                    DISPATCH();
   1520c:	6074      	str	r4, [r6, #4]
   1520e:	7823      	ldrb	r3, [r4, #0]
   15210:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   15214:	f043 0301 	orr.w	r3, r3, #1
   15218:	3401      	adds	r4, #1
   1521a:	4718      	bx	r3
   1521c:	e6e9      	b.n	14ff2 <mp_execute_bytecode+0x676>
                    sp[0] = sp[-2];
   1521e:	f855 3b08 	ldr.w	r3, [r5], #8
   15222:	602b      	str	r3, [r5, #0]
                    sp[-1] = sp[-3];
   15224:	f855 3c0c 	ldr.w	r3, [r5, #-12]
   15228:	f845 3c04 	str.w	r3, [r5, #-4]
   1522c:	e631      	b.n	14e92 <mp_execute_bytecode+0x516>
                    mp_obj_t top = TOP();
   1522e:	682b      	ldr	r3, [r5, #0]
                    PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   15230:	f845 3f04 	str.w	r3, [r5, #4]!
   15234:	e62d      	b.n	14e92 <mp_execute_bytecode+0x516>
                    DECODE_QSTR;
   15236:	2000      	movs	r0, #0
   15238:	e000      	b.n	1523c <mp_execute_bytecode+0x8c0>
   1523a:	464c      	mov	r4, r9
   1523c:	46a1      	mov	r9, r4
   1523e:	f819 3b01 	ldrb.w	r3, [r9], #1
   15242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   15246:	061b      	lsls	r3, r3, #24
   15248:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1524c:	d4f5      	bmi.n	1523a <mp_execute_bytecode+0x8be>
                    mp_delete_global(qst);
   1524e:	f7f4 f96d 	bl	952c <mp_delete_global>
                    DISPATCH();
   15252:	f8c6 9004 	str.w	r9, [r6, #4]
   15256:	f899 3000 	ldrb.w	r3, [r9]
   1525a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   1525e:	f043 0301 	orr.w	r3, r3, #1
   15262:	3402      	adds	r4, #2
   15264:	4718      	bx	r3
                    DECODE_QSTR;
   15266:	2000      	movs	r0, #0
   15268:	e00b      	b.n	15282 <mp_execute_bytecode+0x906>
   1526a:	bf00      	nop
   1526c:	00029f9c 	.word	0x00029f9c
   15270:	00029b28 	.word	0x00029b28
   15274:	00029f8c 	.word	0x00029f8c
   15278:	00027b40 	.word	0x00027b40
   1527c:	200008a0 	.word	0x200008a0
   15280:	464c      	mov	r4, r9
   15282:	46a1      	mov	r9, r4
   15284:	f819 3b01 	ldrb.w	r3, [r9], #1
   15288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1528c:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   15290:	061a      	lsls	r2, r3, #24
   15292:	d4f5      	bmi.n	15280 <mp_execute_bytecode+0x904>
                    mp_delete_name(qst);
   15294:	f7f4 f932 	bl	94fc <mp_delete_name>
                    DISPATCH();
   15298:	f8c6 9004 	str.w	r9, [r6, #4]
   1529c:	f899 3000 	ldrb.w	r3, [r9]
   152a0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   152a4:	f043 0301 	orr.w	r3, r3, #1
   152a8:	3402      	adds	r4, #2
   152aa:	4718      	bx	r3
                    DECODE_UINT;
   152ac:	2200      	movs	r2, #0
   152ae:	e000      	b.n	152b2 <mp_execute_bytecode+0x936>
   152b0:	464c      	mov	r4, r9
   152b2:	46a1      	mov	r9, r4
   152b4:	f819 3b01 	ldrb.w	r3, [r9], #1
   152b8:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   152bc:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   152c0:	0619      	lsls	r1, r3, #24
   152c2:	d4f5      	bmi.n	152b0 <mp_execute_bytecode+0x934>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   152c4:	ebc2 7b82 	rsb	fp, r2, r2, lsl #30
   152c8:	f85a 002b 	ldr.w	r0, [sl, fp, lsl #2]
   152cc:	f7f6 fbe0 	bl	ba90 <mp_obj_cell_get>
   152d0:	2800      	cmp	r0, #0
   152d2:	f000 82c1 	beq.w	15858 <mp_execute_bytecode+0xedc>
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   152d6:	f85a 002b 	ldr.w	r0, [sl, fp, lsl #2]
   152da:	2100      	movs	r1, #0
   152dc:	f7f6 fbda 	bl	ba94 <mp_obj_cell_set>
                    DISPATCH();
   152e0:	f8c6 9004 	str.w	r9, [r6, #4]
   152e4:	f899 3000 	ldrb.w	r3, [r9]
   152e8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   152ec:	f043 0301 	orr.w	r3, r3, #1
   152f0:	3402      	adds	r4, #2
   152f2:	4718      	bx	r3
                    DECODE_UINT;
   152f4:	2100      	movs	r1, #0
   152f6:	e000      	b.n	152fa <mp_execute_bytecode+0x97e>
   152f8:	461c      	mov	r4, r3
   152fa:	4623      	mov	r3, r4
   152fc:	f813 2b01 	ldrb.w	r2, [r3], #1
   15300:	f002 007f 	and.w	r0, r2, #127	; 0x7f
   15304:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
   15308:	0610      	lsls	r0, r2, #24
   1530a:	d4f5      	bmi.n	152f8 <mp_execute_bytecode+0x97c>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   1530c:	ebc1 7181 	rsb	r1, r1, r1, lsl #30
   15310:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
   15314:	2a00      	cmp	r2, #0
   15316:	f000 829f 	beq.w	15858 <mp_execute_bytecode+0xedc>
                    fastn[-unum] = MP_OBJ_NULL;
   1531a:	2200      	movs	r2, #0
   1531c:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
                    DISPATCH();
   15320:	6073      	str	r3, [r6, #4]
   15322:	781b      	ldrb	r3, [r3, #0]
   15324:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   15328:	f043 0301 	orr.w	r3, r3, #1
   1532c:	3402      	adds	r4, #2
   1532e:	4718      	bx	r3
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   15330:	f855 2c08 	ldr.w	r2, [r5, #-8]
   15334:	e955 0101 	ldrd	r0, r1, [r5, #-4]
   15338:	f7f5 ff6e 	bl	b218 <mp_obj_subscr>
                    DISPATCH();
   1533c:	6074      	str	r4, [r6, #4]
   1533e:	7823      	ldrb	r3, [r4, #0]
   15340:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   15344:	f043 0301 	orr.w	r3, r3, #1
                    sp -= 3;
   15348:	3d0c      	subs	r5, #12
                    DISPATCH();
   1534a:	3401      	adds	r4, #1
   1534c:	4718      	bx	r3
                    DECODE_QSTR;
   1534e:	2100      	movs	r1, #0
   15350:	e000      	b.n	15354 <mp_execute_bytecode+0x9d8>
   15352:	464c      	mov	r4, r9
   15354:	46a1      	mov	r9, r4
   15356:	f819 3b01 	ldrb.w	r3, [r9], #1
   1535a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1535e:	061b      	lsls	r3, r3, #24
   15360:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   15364:	d4f5      	bmi.n	15352 <mp_execute_bytecode+0x9d6>
                    mp_store_attr(sp[0], qst, sp[-1]);
   15366:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1536a:	f855 0908 	ldr.w	r0, [r5], #-8
   1536e:	f7f4 faab 	bl	98c8 <mp_store_attr>
                    DISPATCH();
   15372:	f8c6 9004 	str.w	r9, [r6, #4]
   15376:	f899 3000 	ldrb.w	r3, [r9]
   1537a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   1537e:	f043 0301 	orr.w	r3, r3, #1
   15382:	3402      	adds	r4, #2
   15384:	4718      	bx	r3
                    DECODE_QSTR;
   15386:	2000      	movs	r0, #0
   15388:	e000      	b.n	1538c <mp_execute_bytecode+0xa10>
   1538a:	464c      	mov	r4, r9
   1538c:	46a1      	mov	r9, r4
   1538e:	f819 3b01 	ldrb.w	r3, [r9], #1
   15392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   15396:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1539a:	061a      	lsls	r2, r3, #24
   1539c:	d4f5      	bmi.n	1538a <mp_execute_bytecode+0xa0e>
                    mp_store_global(qst, POP());
   1539e:	6829      	ldr	r1, [r5, #0]
   153a0:	f7f4 f8b8 	bl	9514 <mp_store_global>
                    DISPATCH();
   153a4:	f8c6 9004 	str.w	r9, [r6, #4]
   153a8:	f899 3000 	ldrb.w	r3, [r9]
   153ac:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   153b0:	f043 0301 	orr.w	r3, r3, #1
   153b4:	3402      	adds	r4, #2
                    mp_store_name(qst, POP());
   153b6:	3d04      	subs	r5, #4
   153b8:	4718      	bx	r3
                    DECODE_QSTR;
   153ba:	2000      	movs	r0, #0
   153bc:	e000      	b.n	153c0 <mp_execute_bytecode+0xa44>
   153be:	464c      	mov	r4, r9
   153c0:	46a1      	mov	r9, r4
   153c2:	f819 3b01 	ldrb.w	r3, [r9], #1
   153c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   153ca:	0619      	lsls	r1, r3, #24
   153cc:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   153d0:	d4f5      	bmi.n	153be <mp_execute_bytecode+0xa42>
                    mp_store_name(qst, POP());
   153d2:	6829      	ldr	r1, [r5, #0]
   153d4:	f7f4 f886 	bl	94e4 <mp_store_name>
   153d8:	e7e4      	b.n	153a4 <mp_execute_bytecode+0xa28>
                    DECODE_UINT;
   153da:	2200      	movs	r2, #0
   153dc:	e000      	b.n	153e0 <mp_execute_bytecode+0xa64>
   153de:	464c      	mov	r4, r9
   153e0:	46a1      	mov	r9, r4
   153e2:	f819 3b01 	ldrb.w	r3, [r9], #1
   153e6:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   153ea:	0618      	lsls	r0, r3, #24
   153ec:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   153f0:	d4f5      	bmi.n	153de <mp_execute_bytecode+0xa62>
                    mp_obj_cell_set(fastn[-unum], POP());
   153f2:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   153f6:	6829      	ldr	r1, [r5, #0]
   153f8:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   153fc:	f7f6 fb4a 	bl	ba94 <mp_obj_cell_set>
   15400:	e7d0      	b.n	153a4 <mp_execute_bytecode+0xa28>
                    DECODE_UINT;
   15402:	2100      	movs	r1, #0
   15404:	e000      	b.n	15408 <mp_execute_bytecode+0xa8c>
   15406:	461c      	mov	r4, r3
   15408:	4623      	mov	r3, r4
   1540a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1540e:	f002 007f 	and.w	r0, r2, #127	; 0x7f
   15412:	0612      	lsls	r2, r2, #24
   15414:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
   15418:	d4f5      	bmi.n	15406 <mp_execute_bytecode+0xa8a>
                    fastn[-unum] = POP();
   1541a:	ebc1 7181 	rsb	r1, r1, r1, lsl #30
   1541e:	682a      	ldr	r2, [r5, #0]
   15420:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
                    DISPATCH();
   15424:	6073      	str	r3, [r6, #4]
   15426:	781b      	ldrb	r3, [r3, #0]
   15428:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   1542c:	f043 0301 	orr.w	r3, r3, #1
   15430:	3402      	adds	r4, #2
                    fastn[-unum] = POP();
   15432:	3d04      	subs	r5, #4
   15434:	4718      	bx	r3
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   15436:	2208      	movs	r2, #8
   15438:	e955 0101 	ldrd	r0, r1, [r5, #-4]
                    mp_obj_t index = POP();
   1543c:	46a9      	mov	r9, r5
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   1543e:	f7f5 feeb 	bl	b218 <mp_obj_subscr>
                    DISPATCH();
   15442:	4623      	mov	r3, r4
                    SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   15444:	f849 0c04 	str.w	r0, [r9, #-4]
   15448:	e5d4      	b.n	14ff4 <mp_execute_bytecode+0x678>
                    PUSH(mp_load_build_class());
   1544a:	f7f4 f847 	bl	94dc <mp_load_build_class>
   1544e:	f845 0f04 	str.w	r0, [r5, #4]!
   15452:	e51e      	b.n	14e92 <mp_execute_bytecode+0x516>
                    DECODE_QSTR;
   15454:	2000      	movs	r0, #0
   15456:	e000      	b.n	1545a <mp_execute_bytecode+0xade>
   15458:	464c      	mov	r4, r9
   1545a:	46a1      	mov	r9, r4
   1545c:	f819 3b01 	ldrb.w	r3, [r9], #1
   15460:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   15464:	0619      	lsls	r1, r3, #24
   15466:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1546a:	d4f5      	bmi.n	15458 <mp_execute_bytecode+0xadc>
                    sp -= 1;
   1546c:	3d04      	subs	r5, #4
                    mp_load_super_method(qst, sp - 1);
   1546e:	1f29      	subs	r1, r5, #4
   15470:	f7fd f938 	bl	126e4 <mp_load_super_method>
                    DISPATCH();
   15474:	f8c6 9004 	str.w	r9, [r6, #4]
   15478:	f899 3000 	ldrb.w	r3, [r9]
   1547c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   15480:	f043 0301 	orr.w	r3, r3, #1
   15484:	3402      	adds	r4, #2
   15486:	4718      	bx	r3
                    DECODE_QSTR;
   15488:	2100      	movs	r1, #0
   1548a:	e000      	b.n	1548e <mp_execute_bytecode+0xb12>
   1548c:	464c      	mov	r4, r9
   1548e:	46a1      	mov	r9, r4
   15490:	f819 3b01 	ldrb.w	r3, [r9], #1
   15494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   15498:	0618      	lsls	r0, r3, #24
   1549a:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1549e:	d4f5      	bmi.n	1548c <mp_execute_bytecode+0xb10>
                    mp_load_method(*sp, qst, sp);
   154a0:	462a      	mov	r2, r5
   154a2:	6828      	ldr	r0, [r5, #0]
   154a4:	f7f4 f9b2 	bl	980c <mp_load_method>
                    DISPATCH();
   154a8:	f8c6 9004 	str.w	r9, [r6, #4]
   154ac:	f899 3000 	ldrb.w	r3, [r9]
   154b0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   154b4:	f043 0301 	orr.w	r3, r3, #1
   154b8:	3402      	adds	r4, #2
                    sp += 1;
   154ba:	3504      	adds	r5, #4
   154bc:	4718      	bx	r3
                    DECODE_QSTR;
   154be:	2100      	movs	r1, #0
   154c0:	e000      	b.n	154c4 <mp_execute_bytecode+0xb48>
   154c2:	464c      	mov	r4, r9
   154c4:	46a1      	mov	r9, r4
   154c6:	f819 3b01 	ldrb.w	r3, [r9], #1
   154ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   154ce:	061b      	lsls	r3, r3, #24
   154d0:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   154d4:	d4f5      	bmi.n	154c2 <mp_execute_bytecode+0xb46>
                    SET_TOP(mp_load_attr(TOP(), qst));
   154d6:	6828      	ldr	r0, [r5, #0]
   154d8:	f7f4 f9c4 	bl	9864 <mp_load_attr>
   154dc:	f7ff bbbe 	b.w	14c5c <mp_execute_bytecode+0x2e0>
                    DECODE_QSTR;
   154e0:	2000      	movs	r0, #0
   154e2:	e000      	b.n	154e6 <mp_execute_bytecode+0xb6a>
   154e4:	464c      	mov	r4, r9
   154e6:	46a1      	mov	r9, r4
   154e8:	f819 3b01 	ldrb.w	r3, [r9], #1
   154ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   154f0:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   154f4:	061a      	lsls	r2, r3, #24
   154f6:	d4f5      	bmi.n	154e4 <mp_execute_bytecode+0xb68>
                    PUSH(mp_load_global(qst));
   154f8:	f7f3 ffb0 	bl	945c <mp_load_global>
   154fc:	e4df      	b.n	14ebe <mp_execute_bytecode+0x542>
                    DECODE_QSTR;
   154fe:	2000      	movs	r0, #0
   15500:	e000      	b.n	15504 <mp_execute_bytecode+0xb88>
   15502:	464c      	mov	r4, r9
   15504:	46a1      	mov	r9, r4
   15506:	f819 3b01 	ldrb.w	r3, [r9], #1
   1550a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1550e:	0619      	lsls	r1, r3, #24
   15510:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   15514:	d4f5      	bmi.n	15502 <mp_execute_bytecode+0xb86>
                    PUSH(mp_load_name(qst));
   15516:	f7f3 ffc9 	bl	94ac <mp_load_name>
   1551a:	e4d0      	b.n	14ebe <mp_execute_bytecode+0x542>
                    DECODE_UINT;
   1551c:	2200      	movs	r2, #0
   1551e:	f814 3b01 	ldrb.w	r3, [r4], #1
   15522:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   15526:	0618      	lsls	r0, r3, #24
   15528:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1552c:	d4f7      	bmi.n	1551e <mp_execute_bytecode+0xba2>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   1552e:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   15532:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   15536:	f7f6 faab 	bl	ba90 <mp_obj_cell_get>
                    DECODE_UINT;
   1553a:	4623      	mov	r3, r4
                    if (obj_shared == MP_OBJ_NULL) {
   1553c:	2800      	cmp	r0, #0
   1553e:	f000 818b 	beq.w	15858 <mp_execute_bytecode+0xedc>
                    PUSH(obj_shared);
   15542:	f845 0f04 	str.w	r0, [r5, #4]!
                    DISPATCH();
   15546:	6074      	str	r4, [r6, #4]
   15548:	781b      	ldrb	r3, [r3, #0]
   1554a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   1554e:	f043 0301 	orr.w	r3, r3, #1
   15552:	3401      	adds	r4, #1
   15554:	4718      	bx	r3
                    DECODE_UINT;
   15556:	2200      	movs	r2, #0
   15558:	f814 3b01 	ldrb.w	r3, [r4], #1
   1555c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   15560:	061b      	lsls	r3, r3, #24
   15562:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   15566:	d4f7      	bmi.n	15558 <mp_execute_bytecode+0xbdc>
                    obj_shared = fastn[-unum];
   15568:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
                    DECODE_UINT;
   1556c:	4623      	mov	r3, r4
                    obj_shared = fastn[-unum];
   1556e:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   15572:	e7e3      	b.n	1553c <mp_execute_bytecode+0xbc0>
                    PUSH(MP_OBJ_NULL);
   15574:	2300      	movs	r3, #0
   15576:	e65b      	b.n	15230 <mp_execute_bytecode+0x8b4>
                    DECODE_OBJ;
   15578:	1ce3      	adds	r3, r4, #3
   1557a:	f023 0303 	bic.w	r3, r3, #3
   1557e:	461a      	mov	r2, r3
                    DISPATCH();
   15580:	1d5c      	adds	r4, r3, #5
                    DECODE_OBJ;
   15582:	f852 1b04 	ldr.w	r1, [r2], #4
                    PUSH(obj);
   15586:	f845 1f04 	str.w	r1, [r5, #4]!
                    DISPATCH();
   1558a:	6072      	str	r2, [r6, #4]
   1558c:	791b      	ldrb	r3, [r3, #4]
   1558e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   15592:	f043 0301 	orr.w	r3, r3, #1
   15596:	4718      	bx	r3
                    DECODE_QSTR;
   15598:	2100      	movs	r1, #0
   1559a:	e000      	b.n	1559e <mp_execute_bytecode+0xc22>
   1559c:	461c      	mov	r4, r3
   1559e:	4623      	mov	r3, r4
   155a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   155a4:	f002 007f 	and.w	r0, r2, #127	; 0x7f
   155a8:	0612      	lsls	r2, r2, #24
   155aa:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
   155ae:	d4f5      	bmi.n	1559c <mp_execute_bytecode+0xc20>
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   155b0:	008a      	lsls	r2, r1, #2
   155b2:	f042 0202 	orr.w	r2, r2, #2
   155b6:	f845 2f04 	str.w	r2, [r5, #4]!
                    DISPATCH();
   155ba:	6073      	str	r3, [r6, #4]
   155bc:	781b      	ldrb	r3, [r3, #0]
   155be:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   155c2:	f043 0301 	orr.w	r3, r3, #1
   155c6:	3402      	adds	r4, #2
   155c8:	4718      	bx	r3
                    if ((ip[0] & 0x40) != 0) {
   155ca:	7822      	ldrb	r2, [r4, #0]
   155cc:	f342 1280 	sbfx	r2, r2, #6, #1
   155d0:	e000      	b.n	155d4 <mp_execute_bytecode+0xc58>
                    } while ((*ip++ & 0x80) != 0);
   155d2:	461c      	mov	r4, r3
                        num = (num << 7) | (*ip & 0x7f);
   155d4:	4623      	mov	r3, r4
   155d6:	f813 1b01 	ldrb.w	r1, [r3], #1
   155da:	f001 007f 	and.w	r0, r1, #127	; 0x7f
                    } while ((*ip++ & 0x80) != 0);
   155de:	0609      	lsls	r1, r1, #24
                        num = (num << 7) | (*ip & 0x7f);
   155e0:	ea40 12c2 	orr.w	r2, r0, r2, lsl #7
                    } while ((*ip++ & 0x80) != 0);
   155e4:	d4f5      	bmi.n	155d2 <mp_execute_bytecode+0xc56>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   155e6:	0052      	lsls	r2, r2, #1
   155e8:	f042 0201 	orr.w	r2, r2, #1
   155ec:	f845 2f04 	str.w	r2, [r5, #4]!
                    DISPATCH();
   155f0:	6073      	str	r3, [r6, #4]
   155f2:	7863      	ldrb	r3, [r4, #1]
   155f4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   155f8:	f043 0301 	orr.w	r3, r3, #1
   155fc:	3402      	adds	r4, #2
   155fe:	4718      	bx	r3
                    PUSH(mp_const_true);
   15600:	4bc2      	ldr	r3, [pc, #776]	; (1590c <mp_execute_bytecode+0xf90>)
   15602:	e615      	b.n	15230 <mp_execute_bytecode+0x8b4>
                    PUSH(mp_const_none);
   15604:	4bc2      	ldr	r3, [pc, #776]	; (15910 <mp_execute_bytecode+0xf94>)
   15606:	e613      	b.n	15230 <mp_execute_bytecode+0x8b4>
                    PUSH(mp_const_false);
   15608:	4bc2      	ldr	r3, [pc, #776]	; (15914 <mp_execute_bytecode+0xf98>)
   1560a:	f845 3f04 	str.w	r3, [r5, #4]!
   1560e:	f7ff ba7f 	b.w	14b10 <mp_execute_bytecode+0x194>
                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, "byte code not implemented");
   15612:	49c1      	ldr	r1, [pc, #772]	; (15918 <mp_execute_bytecode+0xf9c>)
   15614:	48c1      	ldr	r0, [pc, #772]	; (1591c <mp_execute_bytecode+0xfa0>)
   15616:	f7f7 fac9 	bl	cbac <mp_obj_new_exception_msg>
   1561a:	4604      	mov	r4, r0
                    nlr_pop();
   1561c:	f7eb f916 	bl	84c <nlr_pop>
                    fastn[0] = obj;
   15620:	9b00      	ldr	r3, [sp, #0]
   15622:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    return MP_VM_RETURN_EXCEPTION;
   15626:	2002      	movs	r0, #2
                    fastn[0] = obj;
   15628:	6174      	str	r4, [r6, #20]
}
   1562a:	b013      	add	sp, #76	; 0x4c
   1562c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   15630:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   15634:	3029      	adds	r0, #41	; 0x29
   15636:	e955 1201 	ldrd	r1, r2, [r5, #-4]
   1563a:	b2c0      	uxtb	r0, r0
                    mp_obj_t rhs = POP();
   1563c:	46a9      	mov	r9, r5
                    SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1563e:	f7f4 fe3b 	bl	a2b8 <mp_binary_op>
   15642:	e6fe      	b.n	15442 <mp_execute_bytecode+0xac6>
                    SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   15644:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   15648:	6829      	ldr	r1, [r5, #0]
   1564a:	3030      	adds	r0, #48	; 0x30
   1564c:	b2c0      	uxtb	r0, r0
   1564e:	f7f3 ff79 	bl	9544 <mp_unary_op>
   15652:	e4c0      	b.n	14fd6 <mp_execute_bytecode+0x65a>
                    fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   15654:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   15658:	682a      	ldr	r2, [r5, #0]
   1565a:	f1c3 03c0 	rsb	r3, r3, #192	; 0xc0
   1565e:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
   15662:	e4c6      	b.n	14ff2 <mp_execute_bytecode+0x676>
                    obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   15664:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   15668:	f1c2 02b0 	rsb	r2, r2, #176	; 0xb0
                    goto load_check;
   1566c:	4623      	mov	r3, r4
                    obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1566e:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
                    goto load_check;
   15672:	e763      	b.n	1553c <mp_execute_bytecode+0xbc0>
                    PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   15674:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   15678:	3b80      	subs	r3, #128	; 0x80
   1567a:	005b      	lsls	r3, r3, #1
   1567c:	f043 0301 	orr.w	r3, r3, #1
   15680:	e5d6      	b.n	15230 <mp_execute_bytecode+0x8b4>
                    mp_import_all(POP());
   15682:	6828      	ldr	r0, [r5, #0]
   15684:	3d04      	subs	r5, #4
   15686:	f7f4 fd93 	bl	a1b0 <mp_import_all>
   1568a:	e402      	b.n	14e92 <mp_execute_bytecode+0x516>
                    DECODE_QSTR;
   1568c:	2100      	movs	r1, #0
   1568e:	e000      	b.n	15692 <mp_execute_bytecode+0xd16>
   15690:	464c      	mov	r4, r9
   15692:	46a1      	mov	r9, r4
   15694:	f819 3b01 	ldrb.w	r3, [r9], #1
   15698:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1569c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   156a0:	061a      	lsls	r2, r3, #24
   156a2:	d4f5      	bmi.n	15690 <mp_execute_bytecode+0xd14>
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   156a4:	6828      	ldr	r0, [r5, #0]
   156a6:	f7f4 fd15 	bl	a0d4 <mp_import_from>
   156aa:	e408      	b.n	14ebe <mp_execute_bytecode+0x542>
                    DECODE_QSTR;
   156ac:	2000      	movs	r0, #0
   156ae:	e000      	b.n	156b2 <mp_execute_bytecode+0xd36>
   156b0:	464c      	mov	r4, r9
   156b2:	46a1      	mov	r9, r4
   156b4:	f819 3b01 	ldrb.w	r3, [r9], #1
   156b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   156bc:	0619      	lsls	r1, r3, #24
   156be:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   156c2:	d4f5      	bmi.n	156b0 <mp_execute_bytecode+0xd34>
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   156c4:	e955 2101 	ldrd	r2, r1, [r5, #-4]
   156c8:	f7f4 fcf0 	bl	a0ac <mp_import_name>
   156cc:	f845 0c04 	str.w	r0, [r5, #-4]
                    DISPATCH();
   156d0:	f8c6 9004 	str.w	r9, [r6, #4]
   156d4:	f899 3000 	ldrb.w	r3, [r9]
   156d8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   156dc:	f043 0301 	orr.w	r3, r3, #1
   156e0:	3402      	adds	r4, #2
                    mp_obj_t obj = POP();
   156e2:	3d04      	subs	r5, #4
   156e4:	4718      	bx	r3
                    if (inject_exc != MP_OBJ_NULL) {
   156e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
                    mp_obj_t send_value = POP();
   156ea:	6829      	ldr	r1, [r5, #0]
   156ec:	f1a5 0b04 	sub.w	fp, r5, #4
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   156f0:	f8c6 b008 	str.w	fp, [r6, #8]
                    if (inject_exc != MP_OBJ_NULL) {
   156f4:	f1b9 0f00 	cmp.w	r9, #0
   156f8:	f000 8087 	beq.w	1580a <mp_execute_bytecode+0xe8e>
                        t_exc = inject_exc;
   156fc:	f8dd 9004 	ldr.w	r9, [sp, #4]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   15700:	f855 0c04 	ldr.w	r0, [r5, #-4]
                        inject_exc = MP_OBJ_NULL;
   15704:	f04f 0c00 	mov.w	ip, #0
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   15708:	464a      	mov	r2, r9
   1570a:	4661      	mov	r1, ip
   1570c:	ab05      	add	r3, sp, #20
                        inject_exc = MP_OBJ_NULL;
   1570e:	f8cd c004 	str.w	ip, [sp, #4]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   15712:	f7f4 fc25 	bl	9f60 <mp_resume>
                    if (ret_kind == MP_VM_RETURN_YIELD) {
   15716:	2801      	cmp	r0, #1
   15718:	f43f aa30 	beq.w	14b7c <mp_execute_bytecode+0x200>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   1571c:	2800      	cmp	r0, #0
   1571e:	d03c      	beq.n	1579a <mp_execute_bytecode+0xe1e>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   15720:	2802      	cmp	r0, #2
   15722:	f040 80d7 	bne.w	158d4 <mp_execute_bytecode+0xf58>
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   15726:	497e      	ldr	r1, [pc, #504]	; (15920 <mp_execute_bytecode+0xfa4>)
   15728:	9805      	ldr	r0, [sp, #20]
   1572a:	f7f7 fa61 	bl	cbf0 <mp_obj_exception_match>
   1572e:	2800      	cmp	r0, #0
   15730:	f000 80a4 	beq.w	1587c <mp_execute_bytecode+0xf00>
                            PUSH(mp_obj_exception_get_value(ret_value));
   15734:	9805      	ldr	r0, [sp, #20]
   15736:	f7f7 f96f 	bl	ca18 <mp_obj_exception_get_value>
   1573a:	f845 0c04 	str.w	r0, [r5, #-4]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1573e:	f1b9 0f00 	cmp.w	r9, #0
   15742:	d006      	beq.n	15752 <mp_execute_bytecode+0xdd6>
   15744:	4977      	ldr	r1, [pc, #476]	; (15924 <mp_execute_bytecode+0xfa8>)
   15746:	4648      	mov	r0, r9
   15748:	f7f7 fa52 	bl	cbf0 <mp_obj_exception_match>
   1574c:	2800      	cmp	r0, #0
   1574e:	f47f ad16 	bne.w	1517e <mp_execute_bytecode+0x802>
                            DISPATCH();
   15752:	6074      	str	r4, [r6, #4]
   15754:	7823      	ldrb	r3, [r4, #0]
   15756:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   1575a:	f043 0301 	orr.w	r3, r3, #1
                            PUSH(mp_obj_exception_get_value(ret_value));
   1575e:	465d      	mov	r5, fp
                            DISPATCH();
   15760:	3401      	adds	r4, #1
   15762:	4718      	bx	r3
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   15764:	68b4      	ldr	r4, [r6, #8]
   15766:	f7f7 f957 	bl	ca18 <mp_obj_exception_get_value>
   1576a:	6020      	str	r0, [r4, #0]
                        code_state->ip++; // yield from is over, move to next instruction
   1576c:	6873      	ldr	r3, [r6, #4]
   1576e:	3301      	adds	r3, #1
   15770:	6073      	str	r3, [r6, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   15772:	f7ff b91e 	b.w	149b2 <mp_execute_bytecode+0x36>
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   15776:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1577a:	f7f7 f845 	bl	c808 <mp_obj_dict_store>
                        sp -= 2;
   1577e:	3d08      	subs	r5, #8
   15780:	f7ff bb9f 	b.w	14ec2 <mp_execute_bytecode+0x546>
                        POP_EXC_BLOCK();
   15784:	9b04      	ldr	r3, [sp, #16]
   15786:	685b      	ldr	r3, [r3, #4]
   15788:	f003 0301 	and.w	r3, r3, #1
   1578c:	f88d 300f 	strb.w	r3, [sp, #15]
   15790:	9b04      	ldr	r3, [sp, #16]
   15792:	3b0c      	subs	r3, #12
   15794:	9304      	str	r3, [sp, #16]
   15796:	f7ff ba26 	b.w	14be6 <mp_execute_bytecode+0x26a>
                        if (ret_value == MP_OBJ_STOP_ITERATION) {
   1579a:	9b05      	ldr	r3, [sp, #20]
                            PUSH(mp_const_none);
   1579c:	4a5c      	ldr	r2, [pc, #368]	; (15910 <mp_execute_bytecode+0xf94>)
   1579e:	2b04      	cmp	r3, #4
   157a0:	bf08      	it	eq
   157a2:	4613      	moveq	r3, r2
   157a4:	f845 3c04 	str.w	r3, [r5, #-4]
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   157a8:	f1b9 0f00 	cmp.w	r9, #0
   157ac:	d1ca      	bne.n	15744 <mp_execute_bytecode+0xdc8>
   157ae:	e7d0      	b.n	15752 <mp_execute_bytecode+0xdd6>
                        sp[0] = mp_const_none;
   157b0:	4b57      	ldr	r3, [pc, #348]	; (15910 <mp_execute_bytecode+0xf94>)
                        mp_obj_t data = sp[-1];
   157b2:	f855 9c04 	ldr.w	r9, [r5, #-4]
                        sp[-1] = mp_const_none;
   157b6:	f845 3c04 	str.w	r3, [r5, #-4]
                        sp[1] = mp_const_none;
   157ba:	e9c5 3300 	strd	r3, r3, [r5]
                        mp_call_method_n_kw(3, 0, sp - 3);
   157be:	f1a5 020c 	sub.w	r2, r5, #12
   157c2:	2100      	movs	r1, #0
   157c4:	2003      	movs	r0, #3
   157c6:	f7f3 ff90 	bl	96ea <mp_call_method_n_kw>
                        sp[-3] = data;
   157ca:	f845 9c0c 	str.w	r9, [r5, #-12]
                        sp[-2] = cause;
   157ce:	f845 bd08 	str.w	fp, [r5, #-8]!
   157d2:	f7ff bb5e 	b.w	14e92 <mp_execute_bytecode+0x516>
                    nlr_pop();
   157d6:	f7eb f839 	bl	84c <nlr_pop>
                    assert(exc_sp == exc_stack - 1);
   157da:	9b04      	ldr	r3, [sp, #16]
                    code_state->sp = sp;
   157dc:	60b5      	str	r5, [r6, #8]
                    assert(exc_sp == exc_stack - 1);
   157de:	3f0c      	subs	r7, #12
   157e0:	42bb      	cmp	r3, r7
                    return MP_VM_RETURN_NORMAL;
   157e2:	bf08      	it	eq
   157e4:	2000      	moveq	r0, #0
                    assert(exc_sp == exc_stack - 1);
   157e6:	f43f a9d6 	beq.w	14b96 <mp_execute_bytecode+0x21a>
   157ea:	4b4f      	ldr	r3, [pc, #316]	; (15928 <mp_execute_bytecode+0xfac>)
   157ec:	4a4f      	ldr	r2, [pc, #316]	; (1592c <mp_execute_bytecode+0xfb0>)
   157ee:	4850      	ldr	r0, [pc, #320]	; (15930 <mp_execute_bytecode+0xfb4>)
   157f0:	f240 414e 	movw	r1, #1102	; 0x44e
   157f4:	f002 feb2 	bl	1855c <__assert_func>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   157f8:	f855 4c04 	ldr.w	r4, [r5, #-4]
                    if (unum != 0) {
   157fc:	b963      	cbnz	r3, 15818 <mp_execute_bytecode+0xe9c>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   157fe:	3d08      	subs	r5, #8
   15800:	e4b4      	b.n	1516c <mp_execute_bytecode+0x7f0>
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   15802:	f855 0c08 	ldr.w	r0, [r5, #-8]
   15806:	f7ff bbc1 	b.w	14f8c <mp_execute_bytecode+0x610>
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1580a:	ab05      	add	r3, sp, #20
   1580c:	464a      	mov	r2, r9
   1580e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   15812:	f7f4 fba5 	bl	9f60 <mp_resume>
   15816:	e77e      	b.n	15716 <mp_execute_bytecode+0xd9a>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   15818:	3d18      	subs	r5, #24
   1581a:	e4a7      	b.n	1516c <mp_execute_bytecode+0x7f0>
                            sp[0] = sp[3];
   1581c:	68eb      	ldr	r3, [r5, #12]
   1581e:	602b      	str	r3, [r5, #0]
   15820:	f7ff bb37 	b.w	14e92 <mp_execute_bytecode+0x516>
                        sp[2] = mp_const_none;
   15824:	e9c5 3301 	strd	r3, r3, [r5, #4]
                        sp -= 2;
   15828:	3d08      	subs	r5, #8
                        mp_call_method_n_kw(3, 0, sp);
   1582a:	462a      	mov	r2, r5
   1582c:	2100      	movs	r1, #0
   1582e:	2003      	movs	r0, #3
   15830:	f7f3 ff5b 	bl	96ea <mp_call_method_n_kw>
                        SET_TOP(mp_const_none);
   15834:	4b36      	ldr	r3, [pc, #216]	; (15910 <mp_execute_bytecode+0xf94>)
   15836:	602b      	str	r3, [r5, #0]
   15838:	f7ff bb2b 	b.w	14e92 <mp_execute_bytecode+0x516>
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
   1583c:	9b00      	ldr	r3, [sp, #0]
   1583e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                return MP_VM_RETURN_EXCEPTION;
   15842:	2002      	movs	r0, #2
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
   15844:	6172      	str	r2, [r6, #20]
                return MP_VM_RETURN_EXCEPTION;
   15846:	f7ff b9a6 	b.w	14b96 <mp_execute_bytecode+0x21a>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1584a:	07c4      	lsls	r4, r0, #31
   1584c:	d521      	bpl.n	15892 <mp_execute_bytecode+0xf16>
                        if (cause < 0) {
   1584e:	1043      	asrs	r3, r0, #1
   15850:	d41c      	bmi.n	1588c <mp_execute_bytecode+0xf10>
                            PUSH((mp_obj_t)cause);
   15852:	602b      	str	r3, [r5, #0]
                            goto unwind_jump;
   15854:	f7ff bbe3 	b.w	1501e <mp_execute_bytecode+0x6a2>
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, "local variable referenced before assignment");
   15858:	4936      	ldr	r1, [pc, #216]	; (15934 <mp_execute_bytecode+0xfb8>)
   1585a:	4837      	ldr	r0, [pc, #220]	; (15938 <mp_execute_bytecode+0xfbc>)
   1585c:	f7f7 f9a6 	bl	cbac <mp_obj_new_exception_msg>
   15860:	4681      	mov	r9, r0
                            RAISE(obj);
   15862:	f7ea fff3 	bl	84c <nlr_pop>
   15866:	f8cd 901c 	str.w	r9, [sp, #28]
   1586a:	f7ff b8bb 	b.w	149e4 <mp_execute_bytecode+0x68>
                assert(exc_sp >= exc_stack);
   1586e:	4b33      	ldr	r3, [pc, #204]	; (1593c <mp_execute_bytecode+0xfc0>)
   15870:	4a2e      	ldr	r2, [pc, #184]	; (1592c <mp_execute_bytecode+0xfb0>)
   15872:	482f      	ldr	r0, [pc, #188]	; (15930 <mp_execute_bytecode+0xfb4>)
   15874:	f240 5199 	movw	r1, #1433	; 0x599
   15878:	f002 fe70 	bl	1855c <__assert_func>
                            RAISE(ret_value);
   1587c:	f7ea ffe6 	bl	84c <nlr_pop>
   15880:	f8dd 9014 	ldr.w	r9, [sp, #20]
   15884:	f8cd 901c 	str.w	r9, [sp, #28]
   15888:	f7ff b8ac 	b.w	149e4 <mp_execute_bytecode+0x68>
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   1588c:	3d04      	subs	r5, #4
   1588e:	f7ff b9aa 	b.w	14be6 <mp_execute_bytecode+0x26a>
                        assert(mp_obj_is_exception_instance(TOP()));
   15892:	f7f7 f9a7 	bl	cbe4 <mp_obj_is_exception_instance>
   15896:	2800      	cmp	r0, #0
   15898:	d031      	beq.n	158fe <mp_execute_bytecode+0xf82>
                        RAISE(TOP());
   1589a:	f7ea ffd7 	bl	84c <nlr_pop>
   1589e:	f8d5 9000 	ldr.w	r9, [r5]
   158a2:	f8cd 901c 	str.w	r9, [sp, #28]
   158a6:	f7ff b89d 	b.w	149e4 <mp_execute_bytecode+0x68>
                    assert(currently_in_except_block);
   158aa:	4b25      	ldr	r3, [pc, #148]	; (15940 <mp_execute_bytecode+0xfc4>)
   158ac:	4a1f      	ldr	r2, [pc, #124]	; (1592c <mp_execute_bytecode+0xfb0>)
   158ae:	4820      	ldr	r0, [pc, #128]	; (15930 <mp_execute_bytecode+0xfb4>)
   158b0:	f240 3106 	movw	r1, #774	; 0x306
   158b4:	f002 fe52 	bl	1855c <__assert_func>
                            assert(exc_sp >= exc_stack);
   158b8:	4b20      	ldr	r3, [pc, #128]	; (1593c <mp_execute_bytecode+0xfc0>)
   158ba:	4a1c      	ldr	r2, [pc, #112]	; (1592c <mp_execute_bytecode+0xfb0>)
   158bc:	481c      	ldr	r0, [pc, #112]	; (15930 <mp_execute_bytecode+0xfb4>)
   158be:	f44f 711f 	mov.w	r1, #636	; 0x27c
   158c2:	f002 fe4b 	bl	1855c <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   158c6:	4b1f      	ldr	r3, [pc, #124]	; (15944 <mp_execute_bytecode+0xfc8>)
   158c8:	4a18      	ldr	r2, [pc, #96]	; (1592c <mp_execute_bytecode+0xfb0>)
   158ca:	4819      	ldr	r0, [pc, #100]	; (15930 <mp_execute_bytecode+0xfb4>)
   158cc:	f240 216e 	movw	r1, #622	; 0x26e
   158d0:	f002 fe44 	bl	1855c <__assert_func>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   158d4:	4b1c      	ldr	r3, [pc, #112]	; (15948 <mp_execute_bytecode+0xfcc>)
   158d6:	4a15      	ldr	r2, [pc, #84]	; (1592c <mp_execute_bytecode+0xfb0>)
   158d8:	4815      	ldr	r0, [pc, #84]	; (15930 <mp_execute_bytecode+0xfb4>)
   158da:	f240 41ae 	movw	r1, #1198	; 0x4ae
   158de:	f002 fe3d 	bl	1855c <__assert_func>
                    assert(exc_sp >= exc_stack);
   158e2:	4b16      	ldr	r3, [pc, #88]	; (1593c <mp_execute_bytecode+0xfc0>)
   158e4:	4a11      	ldr	r2, [pc, #68]	; (1592c <mp_execute_bytecode+0xfb0>)
   158e6:	4812      	ldr	r0, [pc, #72]	; (15930 <mp_execute_bytecode+0xfb4>)
   158e8:	f240 3105 	movw	r1, #773	; 0x305
   158ec:	f002 fe36 	bl	1855c <__assert_func>
                        assert(exc_sp >= exc_stack);
   158f0:	4b12      	ldr	r3, [pc, #72]	; (1593c <mp_execute_bytecode+0xfc0>)
   158f2:	4a0e      	ldr	r2, [pc, #56]	; (1592c <mp_execute_bytecode+0xfb0>)
   158f4:	480e      	ldr	r0, [pc, #56]	; (15930 <mp_execute_bytecode+0xfb4>)
   158f6:	f44f 7124 	mov.w	r1, #656	; 0x290
   158fa:	f002 fe2f 	bl	1855c <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   158fe:	4b11      	ldr	r3, [pc, #68]	; (15944 <mp_execute_bytecode+0xfc8>)
   15900:	4a0a      	ldr	r2, [pc, #40]	; (1592c <mp_execute_bytecode+0xfb0>)
   15902:	480b      	ldr	r0, [pc, #44]	; (15930 <mp_execute_bytecode+0xfb4>)
   15904:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   15908:	f002 fe28 	bl	1855c <__assert_func>
   1590c:	00025f4c 	.word	0x00025f4c
   15910:	00027b40 	.word	0x00027b40
   15914:	00025f44 	.word	0x00025f44
   15918:	0002a008 	.word	0x0002a008
   1591c:	00026ae0 	.word	0x00026ae0
   15920:	00026bd0 	.word	0x00026bd0
   15924:	000268c4 	.word	0x000268c4
   15928:	00029fcc 	.word	0x00029fcc
   1592c:	00029b28 	.word	0x00029b28
   15930:	00029f8c 	.word	0x00029f8c
   15934:	00029f3c 	.word	0x00029f3c
   15938:	00026aa4 	.word	0x00026aa4
   1593c:	00029f9c 	.word	0x00029f9c
   15940:	00029fb0 	.word	0x00029fb0
   15944:	00029f68 	.word	0x00029f68
   15948:	00029fe4 	.word	0x00029fe4

0001594c <fun_pos_args_mismatch>:
    while ((*ptr++) & 0x80) {
    }
    return ptr;
}

STATIC NORETURN void fun_pos_args_mismatch(mp_obj_fun_bc_t *f, size_t expected, size_t given) {
   1594c:	b508      	push	{r3, lr}
    (void)expected;
    (void)given;
    mp_arg_error_terse_mismatch();
#elif MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_NORMAL
    (void)f;
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1594e:	4613      	mov	r3, r2
   15950:	460a      	mov	r2, r1
   15952:	4903      	ldr	r1, [pc, #12]	; (15960 <fun_pos_args_mismatch+0x14>)
   15954:	4803      	ldr	r0, [pc, #12]	; (15964 <fun_pos_args_mismatch+0x18>)
   15956:	f7f7 f8b9 	bl	cacc <mp_obj_new_exception_msg_varg>
   1595a:	f7ea ff91 	bl	880 <nlr_jump>
   1595e:	bf00      	nop
   15960:	0002591c 	.word	0x0002591c
   15964:	00026c84 	.word	0x00026c84

00015968 <mp_decode_uint>:
mp_uint_t mp_decode_uint(const byte **ptr) {
   15968:	b410      	push	{r4}
    const byte *p = *ptr;
   1596a:	6803      	ldr	r3, [r0, #0]
    mp_uint_t unum = 0;
   1596c:	2100      	movs	r1, #0
        val = *p++;
   1596e:	1c5c      	adds	r4, r3, #1
   15970:	781a      	ldrb	r2, [r3, #0]
        unum = (unum << 7) | (val & 0x7f);
   15972:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   15976:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
        val = *p++;
   1597a:	4623      	mov	r3, r4
    } while ((val & 0x80) != 0);
   1597c:	f012 0f80 	tst.w	r2, #128	; 0x80
   15980:	d1f5      	bne.n	1596e <mp_decode_uint+0x6>
    *ptr = p;
   15982:	6004      	str	r4, [r0, #0]
}
   15984:	4608      	mov	r0, r1
   15986:	f85d 4b04 	ldr.w	r4, [sp], #4
   1598a:	4770      	bx	lr

0001598c <mp_decode_uint_value>:
mp_uint_t mp_decode_uint_value(const byte *ptr) {
   1598c:	b500      	push	{lr}
   1598e:	b083      	sub	sp, #12
   15990:	ab02      	add	r3, sp, #8
   15992:	f843 0d04 	str.w	r0, [r3, #-4]!
    return mp_decode_uint(&ptr);
   15996:	4618      	mov	r0, r3
   15998:	f7ff ffe6 	bl	15968 <mp_decode_uint>
}
   1599c:	b003      	add	sp, #12
   1599e:	f85d fb04 	ldr.w	pc, [sp], #4

000159a2 <mp_decode_uint_skip>:
const byte *mp_decode_uint_skip(const byte *ptr) {
   159a2:	4603      	mov	r3, r0
    while ((*ptr++) & 0x80) {
   159a4:	1c58      	adds	r0, r3, #1
   159a6:	f993 2000 	ldrsb.w	r2, [r3]
   159aa:	4603      	mov	r3, r0
   159ac:	2a00      	cmp	r2, #0
   159ae:	dbf9      	blt.n	159a4 <mp_decode_uint_skip+0x2>
}
   159b0:	4770      	bx	lr
	...

000159b4 <mp_setup_code_state>:
// On entry code_state should be allocated somewhere (stack/heap) and
// contain the following valid entries:
//    - code_state->fun_bc should contain a pointer to the function object
//    - code_state->ip should contain the offset in bytes from the pointer
//      code_state->fun_bc->bytecode to the entry n_state (0 for bytecode, non-zero for native)
void mp_setup_code_state(mp_code_state_t *code_state, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   159b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159b8:	b089      	sub	sp, #36	; 0x24
   159ba:	4606      	mov	r6, r0
   159bc:	4689      	mov	r9, r1
   159be:	9206      	str	r2, [sp, #24]
   159c0:	469a      	mov	sl, r3
    // This function is pretty complicated.  It's main aim is to be efficient in speed and RAM
    // usage for the common case of positional only args.

    // get the function object that we want to set up (could be bytecode or native code)
    mp_obj_fun_bc_t *self = code_state->fun_bc;
   159c2:	6803      	ldr	r3, [r0, #0]
   159c4:	9303      	str	r3, [sp, #12]

    // ip comes in as an offset into bytecode, so turn it into a true pointer
    code_state->ip = self->bytecode + (size_t)code_state->ip;
   159c6:	689b      	ldr	r3, [r3, #8]
   159c8:	6842      	ldr	r2, [r0, #4]
   159ca:	4413      	add	r3, r2
   159cc:	f840 3f04 	str.w	r3, [r0, #4]!
    #if MICROPY_STACKLESS
    code_state->prev = NULL;
    #endif

    // get params
    size_t n_state = mp_decode_uint(&code_state->ip);
   159d0:	f7ff ffca 	bl	15968 <mp_decode_uint>
   159d4:	4607      	mov	r7, r0
    code_state->ip = mp_decode_uint_skip(code_state->ip); // skip n_exc_stack
   159d6:	6870      	ldr	r0, [r6, #4]
   159d8:	f7ff ffe3 	bl	159a2 <mp_decode_uint_skip>
    size_t scope_flags = *code_state->ip++;
   159dc:	1c41      	adds	r1, r0, #1
   159de:	6071      	str	r1, [r6, #4]
   159e0:	7803      	ldrb	r3, [r0, #0]
   159e2:	9305      	str	r3, [sp, #20]
    size_t n_pos_args = *code_state->ip++;
   159e4:	1c82      	adds	r2, r0, #2
   159e6:	6072      	str	r2, [r6, #4]
   159e8:	7845      	ldrb	r5, [r0, #1]
    size_t n_kwonly_args = *code_state->ip++;
   159ea:	1cc3      	adds	r3, r0, #3
   159ec:	6073      	str	r3, [r6, #4]
   159ee:	7884      	ldrb	r4, [r0, #2]
    size_t n_def_pos_args = *code_state->ip++;
   159f0:	1d03      	adds	r3, r0, #4
   159f2:	6073      	str	r3, [r6, #4]
   159f4:	78c2      	ldrb	r2, [r0, #3]
   159f6:	9204      	str	r2, [sp, #16]

    code_state->sp = &code_state->state[0] - 1;
   159f8:	f106 0310 	add.w	r3, r6, #16
   159fc:	60b3      	str	r3, [r6, #8]
    code_state->exc_sp = (mp_exc_stack_t*)(code_state->state + n_state) - 1;
   159fe:	f106 0014 	add.w	r0, r6, #20
   15a02:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
   15a06:	3b03      	subs	r3, #3
   15a08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   15a0c:	60f3      	str	r3, [r6, #12]

    // zero out the local stack to begin with
    memset(code_state->state, 0, n_state * sizeof(*code_state->state));
   15a0e:	00ba      	lsls	r2, r7, #2
   15a10:	2100      	movs	r1, #0
   15a12:	f005 ff33 	bl	1b87c <memset>

    const mp_obj_t *kwargs = args + n_args;
   15a16:	eb0a 0889 	add.w	r8, sl, r9, lsl #2

    // var_pos_kw_args points to the stack where the var-args tuple, and var-kw dict, should go (if they are needed)
    mp_obj_t *var_pos_kw_args = &code_state->state[n_state - 1 - n_pos_args - n_kwonly_args];
   15a1a:	eba7 0b05 	sub.w	fp, r7, r5
   15a1e:	ebab 0304 	sub.w	r3, fp, r4
   15a22:	1e5a      	subs	r2, r3, #1
   15a24:	9201      	str	r2, [sp, #4]
   15a26:	3303      	adds	r3, #3
   15a28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15a2c:	1d1a      	adds	r2, r3, #4
   15a2e:	9207      	str	r2, [sp, #28]

    // check positional arguments

    if (n_args > n_pos_args) {
   15a30:	454d      	cmp	r5, r9
   15a32:	d223      	bcs.n	15a7c <mp_setup_code_state+0xc8>
        // given more than enough arguments
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) == 0) {
   15a34:	9b05      	ldr	r3, [sp, #20]
   15a36:	f013 0f01 	tst.w	r3, #1
   15a3a:	d01a      	beq.n	15a72 <mp_setup_code_state+0xbe>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
        }
        // put extra arguments in varargs tuple
        *var_pos_kw_args-- = mp_obj_new_tuple(n_args - n_pos_args, args + n_pos_args);
   15a3c:	9b07      	ldr	r3, [sp, #28]
   15a3e:	3b04      	subs	r3, #4
   15a40:	9307      	str	r3, [sp, #28]
   15a42:	eb0a 0185 	add.w	r1, sl, r5, lsl #2
   15a46:	eba9 0005 	sub.w	r0, r9, r5
   15a4a:	f7fb fefb 	bl	11844 <mp_obj_new_tuple>
   15a4e:	9b01      	ldr	r3, [sp, #4]
   15a50:	3304      	adds	r3, #4
   15a52:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15a56:	6058      	str	r0, [r3, #4]
        n_args = n_pos_args;
   15a58:	46a9      	mov	r9, r5
            }
        }
    }

    // copy positional args into state
    for (size_t i = 0; i < n_args; i++) {
   15a5a:	2100      	movs	r1, #0
   15a5c:	4589      	cmp	r9, r1
   15a5e:	d93d      	bls.n	15adc <mp_setup_code_state+0x128>
        code_state->state[n_state - 1 - i] = args[i];
   15a60:	1a7b      	subs	r3, r7, r1
   15a62:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
   15a66:	3303      	adds	r3, #3
   15a68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15a6c:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   15a6e:	3101      	adds	r1, #1
   15a70:	e7f4      	b.n	15a5c <mp_setup_code_state+0xa8>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
   15a72:	464a      	mov	r2, r9
   15a74:	4629      	mov	r1, r5
   15a76:	9803      	ldr	r0, [sp, #12]
   15a78:	f7ff ff68 	bl	1594c <fun_pos_args_mismatch>
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) != 0) {
   15a7c:	9b05      	ldr	r3, [sp, #20]
   15a7e:	f013 0f01 	tst.w	r3, #1
   15a82:	d008      	beq.n	15a96 <mp_setup_code_state+0xe2>
            *var_pos_kw_args-- = mp_const_empty_tuple;
   15a84:	9b07      	ldr	r3, [sp, #28]
   15a86:	3b04      	subs	r3, #4
   15a88:	9307      	str	r3, [sp, #28]
   15a8a:	9b01      	ldr	r3, [sp, #4]
   15a8c:	3304      	adds	r3, #4
   15a8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15a92:	4a80      	ldr	r2, [pc, #512]	; (15c94 <mp_setup_code_state+0x2e0>)
   15a94:	605a      	str	r2, [r3, #4]
        if (n_kw == 0 && (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) == 0) {
   15a96:	9b06      	ldr	r3, [sp, #24]
   15a98:	2b00      	cmp	r3, #0
   15a9a:	d1de      	bne.n	15a5a <mp_setup_code_state+0xa6>
   15a9c:	9b05      	ldr	r3, [sp, #20]
   15a9e:	f013 0f08 	tst.w	r3, #8
   15aa2:	d1da      	bne.n	15a5a <mp_setup_code_state+0xa6>
            if (n_args >= (size_t)(n_pos_args - n_def_pos_args)) {
   15aa4:	9b04      	ldr	r3, [sp, #16]
   15aa6:	1ae9      	subs	r1, r5, r3
   15aa8:	4549      	cmp	r1, r9
   15aaa:	d813      	bhi.n	15ad4 <mp_setup_code_state+0x120>
                for (size_t i = n_args; i < n_pos_args; i++) {
   15aac:	4649      	mov	r1, r9
   15aae:	9803      	ldr	r0, [sp, #12]
   15ab0:	f8dd c010 	ldr.w	ip, [sp, #16]
   15ab4:	e00b      	b.n	15ace <mp_setup_code_state+0x11a>
                    code_state->state[n_state - 1 - i] = self->extra_args[i - (n_pos_args - n_def_pos_args)];
   15ab6:	ebac 0205 	sub.w	r2, ip, r5
   15aba:	440a      	add	r2, r1
   15abc:	1a7b      	subs	r3, r7, r1
   15abe:	3204      	adds	r2, #4
   15ac0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   15ac4:	3303      	adds	r3, #3
   15ac6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15aca:	605a      	str	r2, [r3, #4]
                for (size_t i = n_args; i < n_pos_args; i++) {
   15acc:	3101      	adds	r1, #1
   15ace:	42a9      	cmp	r1, r5
   15ad0:	d3f1      	bcc.n	15ab6 <mp_setup_code_state+0x102>
   15ad2:	e7c2      	b.n	15a5a <mp_setup_code_state+0xa6>
                fun_pos_args_mismatch(self, n_pos_args - n_def_pos_args, n_args);
   15ad4:	464a      	mov	r2, r9
   15ad6:	9803      	ldr	r0, [sp, #12]
   15ad8:	f7ff ff38 	bl	1594c <fun_pos_args_mismatch>
    }

    // check keyword arguments

    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   15adc:	9b06      	ldr	r3, [sp, #24]
   15ade:	b923      	cbnz	r3, 15aea <mp_setup_code_state+0x136>
   15ae0:	9b05      	ldr	r3, [sp, #20]
   15ae2:	f013 0f08 	tst.w	r3, #8
   15ae6:	f000 80b5 	beq.w	15c54 <mp_setup_code_state+0x2a0>
        DEBUG_printf("Initial args: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        mp_obj_t dict = MP_OBJ_NULL;
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   15aea:	9b05      	ldr	r3, [sp, #20]
   15aec:	f013 0302 	ands.w	r3, r3, #2
   15af0:	9302      	str	r3, [sp, #8]
   15af2:	d10b      	bne.n	15b0c <mp_setup_code_state+0x158>
        mp_obj_t dict = MP_OBJ_NULL;
   15af4:	2300      	movs	r3, #0
   15af6:	9301      	str	r3, [sp, #4]
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
            *var_pos_kw_args = dict;
        }

        // get pointer to arg_names array
        const mp_obj_t *arg_names = (const mp_obj_t*)self->const_table;
   15af8:	9b03      	ldr	r3, [sp, #12]
   15afa:	f8d3 900c 	ldr.w	r9, [r3, #12]

        for (size_t i = 0; i < n_kw; i++) {
   15afe:	f04f 0a00 	mov.w	sl, #0
   15b02:	f8cd b01c 	str.w	fp, [sp, #28]
   15b06:	f8dd b018 	ldr.w	fp, [sp, #24]
   15b0a:	e025      	b.n	15b58 <mp_setup_code_state+0x1a4>
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
   15b0c:	9806      	ldr	r0, [sp, #24]
   15b0e:	f7f6 fde5 	bl	c6dc <mp_obj_new_dict>
   15b12:	9001      	str	r0, [sp, #4]
            *var_pos_kw_args = dict;
   15b14:	9a07      	ldr	r2, [sp, #28]
   15b16:	6010      	str	r0, [r2, #0]
   15b18:	e7ee      	b.n	15af8 <mp_setup_code_state+0x144>
            // the keys in kwargs are expected to be qstr objects
            mp_obj_t wanted_arg_name = kwargs[2 * i];
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
                if (wanted_arg_name == arg_names[j]) {
                    if (code_state->state[n_state - 1 - j] != MP_OBJ_NULL) {
   15b1a:	1afb      	subs	r3, r7, r3
   15b1c:	1e58      	subs	r0, r3, #1
   15b1e:	3303      	adds	r3, #3
   15b20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15b24:	685b      	ldr	r3, [r3, #4]
   15b26:	b933      	cbnz	r3, 15b36 <mp_setup_code_state+0x182>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                            "function got multiple values for argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                    }
                    code_state->state[n_state - 1 - j] = kwargs[2 * i + 1];
   15b28:	4442      	add	r2, r8
   15b2a:	6852      	ldr	r2, [r2, #4]
   15b2c:	1d03      	adds	r3, r0, #4
   15b2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15b32:	605a      	str	r2, [r3, #4]
                    goto continue2;
   15b34:	e00e      	b.n	15b54 <mp_setup_code_state+0x1a0>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   15b36:	088a      	lsrs	r2, r1, #2
   15b38:	4957      	ldr	r1, [pc, #348]	; (15c98 <mp_setup_code_state+0x2e4>)
   15b3a:	4858      	ldr	r0, [pc, #352]	; (15c9c <mp_setup_code_state+0x2e8>)
   15b3c:	f7f6 ffc6 	bl	cacc <mp_obj_new_exception_msg_varg>
   15b40:	f7ea fe9e 	bl	880 <nlr_jump>
                }
            }
            // Didn't find name match with positional args
            if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) == 0) {
   15b44:	9b02      	ldr	r3, [sp, #8]
   15b46:	b1bb      	cbz	r3, 15b78 <mp_setup_code_state+0x1c4>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                        "unexpected keyword argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                }
            }
            mp_obj_dict_store(dict, kwargs[2 * i], kwargs[2 * i + 1]);
   15b48:	3204      	adds	r2, #4
   15b4a:	f858 2002 	ldr.w	r2, [r8, r2]
   15b4e:	9801      	ldr	r0, [sp, #4]
   15b50:	f7f6 fe5a 	bl	c808 <mp_obj_dict_store>
        for (size_t i = 0; i < n_kw; i++) {
   15b54:	f10a 0a01 	add.w	sl, sl, #1
   15b58:	45da      	cmp	sl, fp
   15b5a:	d214      	bcs.n	15b86 <mp_setup_code_state+0x1d2>
            mp_obj_t wanted_arg_name = kwargs[2 * i];
   15b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
   15b60:	f858 103a 	ldr.w	r1, [r8, sl, lsl #3]
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   15b64:	2300      	movs	r3, #0
   15b66:	1928      	adds	r0, r5, r4
   15b68:	4298      	cmp	r0, r3
   15b6a:	d9eb      	bls.n	15b44 <mp_setup_code_state+0x190>
                if (wanted_arg_name == arg_names[j]) {
   15b6c:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
   15b70:	4288      	cmp	r0, r1
   15b72:	d0d2      	beq.n	15b1a <mp_setup_code_state+0x166>
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   15b74:	3301      	adds	r3, #1
   15b76:	e7f6      	b.n	15b66 <mp_setup_code_state+0x1b2>
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   15b78:	088a      	lsrs	r2, r1, #2
   15b7a:	4949      	ldr	r1, [pc, #292]	; (15ca0 <mp_setup_code_state+0x2ec>)
   15b7c:	4847      	ldr	r0, [pc, #284]	; (15c9c <mp_setup_code_state+0x2e8>)
   15b7e:	f7f6 ffa5 	bl	cacc <mp_obj_new_exception_msg_varg>
   15b82:	f7ea fe7d 	bl	880 <nlr_jump>
   15b86:	f8dd b01c 	ldr.w	fp, [sp, #28]

        DEBUG_printf("Args with kws flattened: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // fill in defaults for positional args
        mp_obj_t *d = &code_state->state[n_state - n_pos_args];
   15b8a:	f10b 0204 	add.w	r2, fp, #4
   15b8e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   15b92:	3204      	adds	r2, #4
        mp_obj_t *s = &self->extra_args[n_def_pos_args - 1];
   15b94:	9904      	ldr	r1, [sp, #16]
   15b96:	1ccb      	adds	r3, r1, #3
   15b98:	9803      	ldr	r0, [sp, #12]
   15b9a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   15b9e:	e002      	b.n	15ba6 <mp_setup_code_state+0x1f2>
   15ba0:	3901      	subs	r1, #1
   15ba2:	3204      	adds	r2, #4
   15ba4:	3b04      	subs	r3, #4
   15ba6:	b129      	cbz	r1, 15bb4 <mp_setup_code_state+0x200>
            if (*d == MP_OBJ_NULL) {
   15ba8:	6810      	ldr	r0, [r2, #0]
   15baa:	2800      	cmp	r0, #0
   15bac:	d1f8      	bne.n	15ba0 <mp_setup_code_state+0x1ec>
                *d = *s;
   15bae:	6818      	ldr	r0, [r3, #0]
   15bb0:	6010      	str	r0, [r2, #0]
   15bb2:	e7f5      	b.n	15ba0 <mp_setup_code_state+0x1ec>
   15bb4:	4688      	mov	r8, r1
   15bb6:	e003      	b.n	15bc0 <mp_setup_code_state+0x20c>
        DEBUG_printf("Args after filling default positional: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // Check that all mandatory positional args are specified
        while (d < &code_state->state[n_state]) {
            if (*d++ == MP_OBJ_NULL) {
   15bb8:	1d11      	adds	r1, r2, #4
   15bba:	6812      	ldr	r2, [r2, #0]
   15bbc:	b14a      	cbz	r2, 15bd2 <mp_setup_code_state+0x21e>
   15bbe:	460a      	mov	r2, r1
        while (d < &code_state->state[n_state]) {
   15bc0:	1d3b      	adds	r3, r7, #4
   15bc2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15bc6:	3304      	adds	r3, #4
   15bc8:	4293      	cmp	r3, r2
   15bca:	d8f5      	bhi.n	15bb8 <mp_setup_code_state+0x204>
   15bcc:	9701      	str	r7, [sp, #4]
   15bce:	9f05      	ldr	r7, [sp, #20]
   15bd0:	e013      	b.n	15bfa <mp_setup_code_state+0x246>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   15bd2:	1a5b      	subs	r3, r3, r1
   15bd4:	109a      	asrs	r2, r3, #2
   15bd6:	4933      	ldr	r1, [pc, #204]	; (15ca4 <mp_setup_code_state+0x2f0>)
   15bd8:	4830      	ldr	r0, [pc, #192]	; (15c9c <mp_setup_code_state+0x2e8>)
   15bda:	f7f6 ff77 	bl	cacc <mp_obj_new_exception_msg_varg>
   15bde:	f7ea fe4f 	bl	880 <nlr_jump>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
                }
                if (elem != NULL) {
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   15be2:	4445      	add	r5, r8
   15be4:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   15be8:	0892      	lsrs	r2, r2, #2
   15bea:	492f      	ldr	r1, [pc, #188]	; (15ca8 <mp_setup_code_state+0x2f4>)
   15bec:	482b      	ldr	r0, [pc, #172]	; (15c9c <mp_setup_code_state+0x2e8>)
   15bee:	f7f6 ff6d 	bl	cacc <mp_obj_new_exception_msg_varg>
   15bf2:	f7ea fe45 	bl	880 <nlr_jump>
        for (size_t i = 0; i < n_kwonly_args; i++) {
   15bf6:	f108 0801 	add.w	r8, r8, #1
   15bfa:	45a0      	cmp	r8, r4
   15bfc:	d223      	bcs.n	15c46 <mp_setup_code_state+0x292>
            if (code_state->state[n_state - 1 - n_pos_args - i] == MP_OBJ_NULL) {
   15bfe:	ebab 0308 	sub.w	r3, fp, r8
   15c02:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   15c06:	3303      	adds	r3, #3
   15c08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15c0c:	685b      	ldr	r3, [r3, #4]
   15c0e:	2b00      	cmp	r3, #0
   15c10:	d1f1      	bne.n	15bf6 <mp_setup_code_state+0x242>
                if ((scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   15c12:	f017 0f08 	tst.w	r7, #8
   15c16:	d0e4      	beq.n	15be2 <mp_setup_code_state+0x22e>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
   15c18:	9b04      	ldr	r3, [sp, #16]
   15c1a:	3304      	adds	r3, #4
   15c1c:	9a03      	ldr	r2, [sp, #12]
   15c1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   15c22:	eb08 0305 	add.w	r3, r8, r5
   15c26:	2200      	movs	r2, #0
   15c28:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
   15c2c:	3004      	adds	r0, #4
   15c2e:	f7f4 fe83 	bl	a938 <mp_map_lookup>
                if (elem != NULL) {
   15c32:	2800      	cmp	r0, #0
   15c34:	d0d5      	beq.n	15be2 <mp_setup_code_state+0x22e>
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
   15c36:	6843      	ldr	r3, [r0, #4]
   15c38:	f10a 0a04 	add.w	sl, sl, #4
   15c3c:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
   15c40:	f8ca 3004 	str.w	r3, [sl, #4]
   15c44:	e7d7      	b.n	15bf6 <mp_setup_code_state+0x242>
   15c46:	9f01      	ldr	r7, [sp, #4]
            *var_pos_kw_args = mp_obj_new_dict(0);
        }
    }

    // get the ip and skip argument names
    const byte *ip = code_state->ip;
   15c48:	6874      	ldr	r4, [r6, #4]

    // jump over code info (source file and line-number mapping)
    ip += mp_decode_uint_value(ip);
   15c4a:	4620      	mov	r0, r4
   15c4c:	f7ff fe9e 	bl	1598c <mp_decode_uint_value>
   15c50:	4420      	add	r0, r4

    // bytecode prelude: initialise closed over variables
    size_t local_num;
    while ((local_num = *ip++) != 255) {
   15c52:	e016      	b.n	15c82 <mp_setup_code_state+0x2ce>
        if (n_kwonly_args != 0) {
   15c54:	b94c      	cbnz	r4, 15c6a <mp_setup_code_state+0x2b6>
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   15c56:	9b05      	ldr	r3, [sp, #20]
   15c58:	f013 0f02 	tst.w	r3, #2
   15c5c:	d0f4      	beq.n	15c48 <mp_setup_code_state+0x294>
            *var_pos_kw_args = mp_obj_new_dict(0);
   15c5e:	2000      	movs	r0, #0
   15c60:	f7f6 fd3c 	bl	c6dc <mp_obj_new_dict>
   15c64:	9b07      	ldr	r3, [sp, #28]
   15c66:	6018      	str	r0, [r3, #0]
   15c68:	e7ee      	b.n	15c48 <mp_setup_code_state+0x294>
            mp_raise_TypeError("function missing keyword-only argument");
   15c6a:	4810      	ldr	r0, [pc, #64]	; (15cac <mp_setup_code_state+0x2f8>)
   15c6c:	f7f4 fd1c 	bl	a6a8 <mp_raise_TypeError>
        code_state->state[n_state - 1 - local_num] =
            mp_obj_new_cell(code_state->state[n_state - 1 - local_num]);
   15c70:	1afc      	subs	r4, r7, r3
   15c72:	3403      	adds	r4, #3
   15c74:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   15c78:	6860      	ldr	r0, [r4, #4]
   15c7a:	f7f5 ff0d 	bl	ba98 <mp_obj_new_cell>
        code_state->state[n_state - 1 - local_num] =
   15c7e:	6060      	str	r0, [r4, #4]
    while ((local_num = *ip++) != 255) {
   15c80:	4628      	mov	r0, r5
   15c82:	1c45      	adds	r5, r0, #1
   15c84:	7803      	ldrb	r3, [r0, #0]
   15c86:	2bff      	cmp	r3, #255	; 0xff
   15c88:	d1f2      	bne.n	15c70 <mp_setup_code_state+0x2bc>
    }

    // now that we skipped over the prelude, set the ip for the VM
    code_state->ip = ip;
   15c8a:	6075      	str	r5, [r6, #4]

    DEBUG_printf("Calling: n_pos_args=%d, n_kwonly_args=%d\n", n_pos_args, n_kwonly_args);
    dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
    dump_args(code_state->state, n_state);
}
   15c8c:	b009      	add	sp, #36	; 0x24
   15c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c92:	bf00      	nop
   15c94:	00028810 	.word	0x00028810
   15c98:	00027bc0 	.word	0x00027bc0
   15c9c:	00026c84 	.word	0x00026c84
   15ca0:	00027b9c 	.word	0x00027b9c
   15ca4:	0002a044 	.word	0x0002a044
   15ca8:	0002a078 	.word	0x0002a078
   15cac:	0002a0a8 	.word	0x0002a0a8

00015cb0 <str_startswith_word>:
#include "py/builtin.h"
#include "py/repl.h"

#if MICROPY_HELPER_REPL

STATIC bool str_startswith_word(const char *str, const char *head) {
   15cb0:	b510      	push	{r4, lr}
    size_t i;
    for (i = 0; str[i] && head[i]; i++) {
   15cb2:	2300      	movs	r3, #0
   15cb4:	5cc2      	ldrb	r2, [r0, r3]
   15cb6:	b12a      	cbz	r2, 15cc4 <str_startswith_word+0x14>
   15cb8:	5ccc      	ldrb	r4, [r1, r3]
   15cba:	b11c      	cbz	r4, 15cc4 <str_startswith_word+0x14>
        if (str[i] != head[i]) {
   15cbc:	42a2      	cmp	r2, r4
   15cbe:	d110      	bne.n	15ce2 <str_startswith_word+0x32>
    for (i = 0; str[i] && head[i]; i++) {
   15cc0:	3301      	adds	r3, #1
   15cc2:	e7f7      	b.n	15cb4 <str_startswith_word+0x4>
            return false;
        }
    }
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   15cc4:	5ccb      	ldrb	r3, [r1, r3]
   15cc6:	b943      	cbnz	r3, 15cda <str_startswith_word+0x2a>
   15cc8:	b90a      	cbnz	r2, 15cce <str_startswith_word+0x1e>
   15cca:	2001      	movs	r0, #1
   15ccc:	e006      	b.n	15cdc <str_startswith_word+0x2c>
   15cce:	4610      	mov	r0, r2
   15cd0:	f7ec fa1a 	bl	2108 <unichar_isident>
   15cd4:	b118      	cbz	r0, 15cde <str_startswith_word+0x2e>
   15cd6:	2000      	movs	r0, #0
   15cd8:	e000      	b.n	15cdc <str_startswith_word+0x2c>
   15cda:	2000      	movs	r0, #0
}
   15cdc:	bd10      	pop	{r4, pc}
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   15cde:	2001      	movs	r0, #1
   15ce0:	e7fc      	b.n	15cdc <str_startswith_word+0x2c>
            return false;
   15ce2:	2000      	movs	r0, #0
   15ce4:	e7fa      	b.n	15cdc <str_startswith_word+0x2c>
	...

00015ce8 <mp_repl_continue_with_input>:

bool mp_repl_continue_with_input(const char *input) {
   15ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // check for blank input
    if (input[0] == '\0') {
   15cea:	7803      	ldrb	r3, [r0, #0]
   15cec:	2b00      	cmp	r3, #0
   15cee:	f000 80a8 	beq.w	15e42 <mp_repl_continue_with_input+0x15a>
   15cf2:	4604      	mov	r4, r0
        || str_startswith_word(input, "while")
        || str_startswith_word(input, "for")
        || str_startswith_word(input, "try")
        || str_startswith_word(input, "with")
        || str_startswith_word(input, "def")
        || str_startswith_word(input, "class")
   15cf4:	2b40      	cmp	r3, #64	; 0x40
   15cf6:	d105      	bne.n	15d04 <mp_repl_continue_with_input+0x1c>
   15cf8:	2001      	movs	r0, #1
    #define Q_3_SINGLE (3)
    #define Q_3_DOUBLE (4)
    int n_paren = 0;
    int n_brack = 0;
    int n_brace = 0;
    int in_quote = Q_NONE;
   15cfa:	2200      	movs	r2, #0
    int n_brace = 0;
   15cfc:	4617      	mov	r7, r2
    int n_brack = 0;
   15cfe:	4616      	mov	r6, r2
    int n_paren = 0;
   15d00:	4615      	mov	r5, r2
    const char *i;
    for (i = input; *i; i++) {
   15d02:	e039      	b.n	15d78 <mp_repl_continue_with_input+0x90>
        || str_startswith_word(input, "if")
   15d04:	4954      	ldr	r1, [pc, #336]	; (15e58 <mp_repl_continue_with_input+0x170>)
   15d06:	f7ff ffd3 	bl	15cb0 <str_startswith_word>
   15d0a:	b108      	cbz	r0, 15d10 <mp_repl_continue_with_input+0x28>
        || str_startswith_word(input, "class")
   15d0c:	2001      	movs	r0, #1
   15d0e:	e7f4      	b.n	15cfa <mp_repl_continue_with_input+0x12>
        || str_startswith_word(input, "while")
   15d10:	4952      	ldr	r1, [pc, #328]	; (15e5c <mp_repl_continue_with_input+0x174>)
   15d12:	4620      	mov	r0, r4
   15d14:	f7ff ffcc 	bl	15cb0 <str_startswith_word>
   15d18:	b108      	cbz	r0, 15d1e <mp_repl_continue_with_input+0x36>
        || str_startswith_word(input, "class")
   15d1a:	2001      	movs	r0, #1
   15d1c:	e7ed      	b.n	15cfa <mp_repl_continue_with_input+0x12>
        || str_startswith_word(input, "for")
   15d1e:	4950      	ldr	r1, [pc, #320]	; (15e60 <mp_repl_continue_with_input+0x178>)
   15d20:	4620      	mov	r0, r4
   15d22:	f7ff ffc5 	bl	15cb0 <str_startswith_word>
   15d26:	b108      	cbz	r0, 15d2c <mp_repl_continue_with_input+0x44>
        || str_startswith_word(input, "class")
   15d28:	2001      	movs	r0, #1
   15d2a:	e7e6      	b.n	15cfa <mp_repl_continue_with_input+0x12>
        || str_startswith_word(input, "try")
   15d2c:	494d      	ldr	r1, [pc, #308]	; (15e64 <mp_repl_continue_with_input+0x17c>)
   15d2e:	4620      	mov	r0, r4
   15d30:	f7ff ffbe 	bl	15cb0 <str_startswith_word>
   15d34:	b108      	cbz	r0, 15d3a <mp_repl_continue_with_input+0x52>
        || str_startswith_word(input, "class")
   15d36:	2001      	movs	r0, #1
   15d38:	e7df      	b.n	15cfa <mp_repl_continue_with_input+0x12>
        || str_startswith_word(input, "with")
   15d3a:	494b      	ldr	r1, [pc, #300]	; (15e68 <mp_repl_continue_with_input+0x180>)
   15d3c:	4620      	mov	r0, r4
   15d3e:	f7ff ffb7 	bl	15cb0 <str_startswith_word>
   15d42:	b108      	cbz	r0, 15d48 <mp_repl_continue_with_input+0x60>
        || str_startswith_word(input, "class")
   15d44:	2001      	movs	r0, #1
   15d46:	e7d8      	b.n	15cfa <mp_repl_continue_with_input+0x12>
        || str_startswith_word(input, "def")
   15d48:	4948      	ldr	r1, [pc, #288]	; (15e6c <mp_repl_continue_with_input+0x184>)
   15d4a:	4620      	mov	r0, r4
   15d4c:	f7ff ffb0 	bl	15cb0 <str_startswith_word>
   15d50:	b108      	cbz	r0, 15d56 <mp_repl_continue_with_input+0x6e>
        || str_startswith_word(input, "class")
   15d52:	2001      	movs	r0, #1
   15d54:	e7d1      	b.n	15cfa <mp_repl_continue_with_input+0x12>
   15d56:	4946      	ldr	r1, [pc, #280]	; (15e70 <mp_repl_continue_with_input+0x188>)
   15d58:	4620      	mov	r0, r4
   15d5a:	f7ff ffa9 	bl	15cb0 <str_startswith_word>
   15d5e:	2800      	cmp	r0, #0
   15d60:	d0cb      	beq.n	15cfa <mp_repl_continue_with_input+0x12>
   15d62:	2001      	movs	r0, #1
   15d64:	e7c9      	b.n	15cfa <mp_repl_continue_with_input+0x12>
        if (*i == '\'') {
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   15d66:	b10a      	cbz	r2, 15d6c <mp_repl_continue_with_input+0x84>
   15d68:	2a03      	cmp	r2, #3
   15d6a:	d102      	bne.n	15d72 <mp_repl_continue_with_input+0x8a>
   15d6c:	7863      	ldrb	r3, [r4, #1]
   15d6e:	2b27      	cmp	r3, #39	; 0x27
   15d70:	d018      	beq.n	15da4 <mp_repl_continue_with_input+0xbc>
                i += 2;
                in_quote = Q_3_SINGLE - in_quote;
            } else if (in_quote == Q_NONE || in_quote == Q_1_SINGLE) {
   15d72:	2a01      	cmp	r2, #1
   15d74:	d91d      	bls.n	15db2 <mp_repl_continue_with_input+0xca>
    for (i = input; *i; i++) {
   15d76:	3401      	adds	r4, #1
   15d78:	7823      	ldrb	r3, [r4, #0]
   15d7a:	2b00      	cmp	r3, #0
   15d7c:	d048      	beq.n	15e10 <mp_repl_continue_with_input+0x128>
        if (*i == '\'') {
   15d7e:	2b27      	cmp	r3, #39	; 0x27
   15d80:	d0f1      	beq.n	15d66 <mp_repl_continue_with_input+0x7e>
                in_quote = Q_1_SINGLE - in_quote;
            }
        } else if (*i == '"') {
   15d82:	2b22      	cmp	r3, #34	; 0x22
   15d84:	d018      	beq.n	15db8 <mp_repl_continue_with_input+0xd0>
                i += 2;
                in_quote = Q_3_DOUBLE - in_quote;
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
                in_quote = Q_1_DOUBLE - in_quote;
            }
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   15d86:	2b5c      	cmp	r3, #92	; 0x5c
   15d88:	d029      	beq.n	15dde <mp_repl_continue_with_input+0xf6>
            if (in_quote != Q_NONE) {
                i++;
            }
        } else if (in_quote == Q_NONE) {
   15d8a:	2a00      	cmp	r2, #0
   15d8c:	d1f3      	bne.n	15d76 <mp_repl_continue_with_input+0x8e>
            switch (*i) {
   15d8e:	2b5b      	cmp	r3, #91	; 0x5b
   15d90:	d038      	beq.n	15e04 <mp_repl_continue_with_input+0x11c>
   15d92:	d92f      	bls.n	15df4 <mp_repl_continue_with_input+0x10c>
   15d94:	2b7b      	cmp	r3, #123	; 0x7b
   15d96:	d037      	beq.n	15e08 <mp_repl_continue_with_input+0x120>
   15d98:	2b7d      	cmp	r3, #125	; 0x7d
   15d9a:	d037      	beq.n	15e0c <mp_repl_continue_with_input+0x124>
   15d9c:	2b5d      	cmp	r3, #93	; 0x5d
   15d9e:	d1ea      	bne.n	15d76 <mp_repl_continue_with_input+0x8e>
                case '(': n_paren += 1; break;
                case ')': n_paren -= 1; break;
                case '[': n_brack += 1; break;
                case ']': n_brack -= 1; break;
   15da0:	3e01      	subs	r6, #1
   15da2:	e7e8      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   15da4:	78a3      	ldrb	r3, [r4, #2]
   15da6:	2b27      	cmp	r3, #39	; 0x27
   15da8:	d1e3      	bne.n	15d72 <mp_repl_continue_with_input+0x8a>
                i += 2;
   15daa:	3402      	adds	r4, #2
                in_quote = Q_3_SINGLE - in_quote;
   15dac:	f1c2 0203 	rsb	r2, r2, #3
   15db0:	e7e1      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
                in_quote = Q_1_SINGLE - in_quote;
   15db2:	f1c2 0201 	rsb	r2, r2, #1
   15db6:	e7de      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   15db8:	b10a      	cbz	r2, 15dbe <mp_repl_continue_with_input+0xd6>
   15dba:	2a04      	cmp	r2, #4
   15dbc:	d102      	bne.n	15dc4 <mp_repl_continue_with_input+0xdc>
   15dbe:	7863      	ldrb	r3, [r4, #1]
   15dc0:	2b22      	cmp	r3, #34	; 0x22
   15dc2:	d005      	beq.n	15dd0 <mp_repl_continue_with_input+0xe8>
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
   15dc4:	b10a      	cbz	r2, 15dca <mp_repl_continue_with_input+0xe2>
   15dc6:	2a02      	cmp	r2, #2
   15dc8:	d1d5      	bne.n	15d76 <mp_repl_continue_with_input+0x8e>
                in_quote = Q_1_DOUBLE - in_quote;
   15dca:	f1c2 0202 	rsb	r2, r2, #2
   15dce:	e7d2      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   15dd0:	78a3      	ldrb	r3, [r4, #2]
   15dd2:	2b22      	cmp	r3, #34	; 0x22
   15dd4:	d1f6      	bne.n	15dc4 <mp_repl_continue_with_input+0xdc>
                i += 2;
   15dd6:	3402      	adds	r4, #2
                in_quote = Q_3_DOUBLE - in_quote;
   15dd8:	f1c2 0204 	rsb	r2, r2, #4
   15ddc:	e7cb      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   15dde:	7861      	ldrb	r1, [r4, #1]
   15de0:	2927      	cmp	r1, #39	; 0x27
   15de2:	d003      	beq.n	15dec <mp_repl_continue_with_input+0x104>
   15de4:	2922      	cmp	r1, #34	; 0x22
   15de6:	d001      	beq.n	15dec <mp_repl_continue_with_input+0x104>
   15de8:	295c      	cmp	r1, #92	; 0x5c
   15dea:	d1ce      	bne.n	15d8a <mp_repl_continue_with_input+0xa2>
            if (in_quote != Q_NONE) {
   15dec:	2a00      	cmp	r2, #0
   15dee:	d0c2      	beq.n	15d76 <mp_repl_continue_with_input+0x8e>
                i++;
   15df0:	3401      	adds	r4, #1
   15df2:	e7c0      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
            switch (*i) {
   15df4:	2b28      	cmp	r3, #40	; 0x28
   15df6:	d003      	beq.n	15e00 <mp_repl_continue_with_input+0x118>
   15df8:	2b29      	cmp	r3, #41	; 0x29
   15dfa:	d1bc      	bne.n	15d76 <mp_repl_continue_with_input+0x8e>
                case ')': n_paren -= 1; break;
   15dfc:	3d01      	subs	r5, #1
   15dfe:	e7ba      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
                case '(': n_paren += 1; break;
   15e00:	3501      	adds	r5, #1
   15e02:	e7b8      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
                case '[': n_brack += 1; break;
   15e04:	3601      	adds	r6, #1
   15e06:	e7b6      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
                case '{': n_brace += 1; break;
   15e08:	3701      	adds	r7, #1
   15e0a:	e7b4      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
                case '}': n_brace -= 1; break;
   15e0c:	3f01      	subs	r7, #1
   15e0e:	e7b2      	b.n	15d76 <mp_repl_continue_with_input+0x8e>
            }
        }
    }

    // continue if unmatched brackets or quotes
    if (n_paren > 0 || n_brack > 0 || n_brace > 0 || in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   15e10:	2d00      	cmp	r5, #0
   15e12:	dd01      	ble.n	15e18 <mp_repl_continue_with_input+0x130>
        return true;
   15e14:	2001      	movs	r0, #1
   15e16:	e015      	b.n	15e44 <mp_repl_continue_with_input+0x15c>
    if (n_paren > 0 || n_brack > 0 || n_brace > 0 || in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   15e18:	2e00      	cmp	r6, #0
   15e1a:	dd01      	ble.n	15e20 <mp_repl_continue_with_input+0x138>
        return true;
   15e1c:	2001      	movs	r0, #1
   15e1e:	e011      	b.n	15e44 <mp_repl_continue_with_input+0x15c>
    if (n_paren > 0 || n_brack > 0 || n_brace > 0 || in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   15e20:	2f00      	cmp	r7, #0
   15e22:	dd01      	ble.n	15e28 <mp_repl_continue_with_input+0x140>
        return true;
   15e24:	2001      	movs	r0, #1
   15e26:	e00d      	b.n	15e44 <mp_repl_continue_with_input+0x15c>
    if (n_paren > 0 || n_brack > 0 || n_brace > 0 || in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   15e28:	2a03      	cmp	r2, #3
   15e2a:	d00c      	beq.n	15e46 <mp_repl_continue_with_input+0x15e>
   15e2c:	2a04      	cmp	r2, #4
   15e2e:	d00c      	beq.n	15e4a <mp_repl_continue_with_input+0x162>
    }

    // continue if last character was backslash (for line continuation)
    if (i[-1] == '\\') {
   15e30:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   15e34:	2b5c      	cmp	r3, #92	; 0x5c
   15e36:	d00a      	beq.n	15e4e <mp_repl_continue_with_input+0x166>
        return true;
    }

    // continue if compound keyword and last line was not empty
    if (starts_with_compound_keyword && i[-1] != '\n') {
   15e38:	b158      	cbz	r0, 15e52 <mp_repl_continue_with_input+0x16a>
   15e3a:	2b0a      	cmp	r3, #10
   15e3c:	d102      	bne.n	15e44 <mp_repl_continue_with_input+0x15c>
        return true;
    }

    // otherwise, don't continue
    return false;
   15e3e:	2000      	movs	r0, #0
   15e40:	e000      	b.n	15e44 <mp_repl_continue_with_input+0x15c>
        return false;
   15e42:	2000      	movs	r0, #0
}
   15e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
   15e46:	2001      	movs	r0, #1
   15e48:	e7fc      	b.n	15e44 <mp_repl_continue_with_input+0x15c>
   15e4a:	2001      	movs	r0, #1
   15e4c:	e7fa      	b.n	15e44 <mp_repl_continue_with_input+0x15c>
        return true;
   15e4e:	2001      	movs	r0, #1
   15e50:	e7f8      	b.n	15e44 <mp_repl_continue_with_input+0x15c>
    return false;
   15e52:	2000      	movs	r0, #0
   15e54:	e7f6      	b.n	15e44 <mp_repl_continue_with_input+0x15c>
   15e56:	bf00      	nop
   15e58:	0002396c 	.word	0x0002396c
   15e5c:	00023998 	.word	0x00023998
   15e60:	00023960 	.word	0x00023960
   15e64:	00023994 	.word	0x00023994
   15e68:	000233d8 	.word	0x000233d8
   15e6c:	00023938 	.word	0x00023938
   15e70:	00023924 	.word	0x00023924

00015e74 <mp_repl_autocomplete>:

size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   15e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e78:	b08b      	sub	sp, #44	; 0x2c
   15e7a:	4607      	mov	r7, r0
   15e7c:	9201      	str	r2, [sp, #4]
   15e7e:	9302      	str	r3, [sp, #8]
    // scan backwards to find start of "a.b.c" chain
    const char *org_str = str;
    const char *top = str + len;
   15e80:	eb00 0a01 	add.w	sl, r0, r1
    for (const char *s = top; --s >= str;) {
   15e84:	4654      	mov	r4, sl
   15e86:	e000      	b.n	15e8a <mp_repl_autocomplete+0x16>
size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   15e88:	462c      	mov	r4, r5
    for (const char *s = top; --s >= str;) {
   15e8a:	1e65      	subs	r5, r4, #1
   15e8c:	42af      	cmp	r7, r5
   15e8e:	d810      	bhi.n	15eb2 <mp_repl_autocomplete+0x3e>
        if (!(unichar_isalpha(*s) || unichar_isdigit(*s) || *s == '_' || *s == '.')) {
   15e90:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   15e94:	f7ec f908 	bl	20a8 <unichar_isalpha>
   15e98:	2800      	cmp	r0, #0
   15e9a:	d1f5      	bne.n	15e88 <mp_repl_autocomplete+0x14>
   15e9c:	7828      	ldrb	r0, [r5, #0]
   15e9e:	f7ec f913 	bl	20c8 <unichar_isdigit>
   15ea2:	2800      	cmp	r0, #0
   15ea4:	d1f0      	bne.n	15e88 <mp_repl_autocomplete+0x14>
   15ea6:	782b      	ldrb	r3, [r5, #0]
   15ea8:	2b5f      	cmp	r3, #95	; 0x5f
   15eaa:	d0ed      	beq.n	15e88 <mp_repl_autocomplete+0x14>
   15eac:	2b2e      	cmp	r3, #46	; 0x2e
   15eae:	d0eb      	beq.n	15e88 <mp_repl_autocomplete+0x14>
   15eb0:	e000      	b.n	15eb4 <mp_repl_autocomplete+0x40>
   15eb2:	463c      	mov	r4, r7
            str = s;
            break;
        }
    }

    size_t nqstr = QSTR_TOTAL();
   15eb4:	4b74      	ldr	r3, [pc, #464]	; (16088 <mp_repl_autocomplete+0x214>)
   15eb6:	691b      	ldr	r3, [r3, #16]
   15eb8:	685a      	ldr	r2, [r3, #4]
   15eba:	68db      	ldr	r3, [r3, #12]
   15ebc:	eb02 0903 	add.w	r9, r2, r3

    // begin search in outer global dict which is accessed from __main__
    mp_obj_t obj = MP_OBJ_FROM_PTR(&mp_module___main__);
   15ec0:	4d72      	ldr	r5, [pc, #456]	; (1608c <mp_repl_autocomplete+0x218>)
   15ec2:	4620      	mov	r0, r4
   15ec4:	e01c      	b.n	15f00 <mp_repl_autocomplete+0x8c>

    for (;;) {
        // get next word in string to complete
        const char *s_start = str;
        while (str < top && *str != '.') {
            ++str;
   15ec6:	f108 0801 	add.w	r8, r8, #1
        while (str < top && *str != '.') {
   15eca:	45d0      	cmp	r8, sl
   15ecc:	d203      	bcs.n	15ed6 <mp_repl_autocomplete+0x62>
   15ece:	f898 3000 	ldrb.w	r3, [r8]
   15ed2:	2b2e      	cmp	r3, #46	; 0x2e
   15ed4:	d1f7      	bne.n	15ec6 <mp_repl_autocomplete+0x52>
        }
        size_t s_len = str - s_start;
   15ed6:	eba8 0100 	sub.w	r1, r8, r0

        if (str < top) {
   15eda:	45d0      	cmp	r8, sl
   15edc:	d24c      	bcs.n	15f78 <mp_repl_autocomplete+0x104>
            // a complete word, lookup in current object
            qstr q = qstr_find_strn(s_start, s_len);
   15ede:	f7eb fb0d 	bl	14fc <qstr_find_strn>
            if (q == MP_QSTR_NULL) {
   15ee2:	4601      	mov	r1, r0
   15ee4:	2800      	cmp	r0, #0
   15ee6:	f000 80c7 	beq.w	16078 <mp_repl_autocomplete+0x204>
                // lookup will fail
                return 0;
            }
            mp_load_method_protected(obj, q, dest, true);
   15eea:	2301      	movs	r3, #1
   15eec:	aa08      	add	r2, sp, #32
   15eee:	4628      	mov	r0, r5
   15ef0:	f7f3 fcc8 	bl	9884 <mp_load_method_protected>
            obj = dest[0]; // attribute, method, or MP_OBJ_NULL if nothing found
   15ef4:	9d08      	ldr	r5, [sp, #32]

            if (obj == MP_OBJ_NULL) {
   15ef6:	2d00      	cmp	r5, #0
   15ef8:	f000 80c2 	beq.w	16080 <mp_repl_autocomplete+0x20c>
                // lookup failed
                return 0;
            }

            // skip '.' to move to next word
            ++str;
   15efc:	f108 0001 	add.w	r0, r8, #1
        while (str < top && *str != '.') {
   15f00:	4680      	mov	r8, r0
   15f02:	e7e2      	b.n	15eca <mp_repl_autocomplete+0x56>
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
                    mp_load_method_protected(obj, q, dest, true);
                    if (dest[0] != MP_OBJ_NULL) {
                        if (match_str == NULL) {
                            match_str = d_str;
                            match_len = d_len;
   15f04:	f8dd a01c 	ldr.w	sl, [sp, #28]
                            match_str = d_str;
   15f08:	9703      	str	r7, [sp, #12]
                                    match_len = j;
                                    break;
                                }
                            }
                        }
                        if (q_first == 0) {
   15f0a:	f1bb 0f00 	cmp.w	fp, #0
   15f0e:	d02f      	beq.n	15f70 <mp_repl_autocomplete+0xfc>
                            q_first = q;
                        }
                        q_last = q;
   15f10:	f8cd 8010 	str.w	r8, [sp, #16]
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   15f14:	f108 0801 	add.w	r8, r8, #1
   15f18:	45c8      	cmp	r8, r9
   15f1a:	d238      	bcs.n	15f8e <mp_repl_autocomplete+0x11a>
                const char *d_str = (const char*)qstr_data(q, &d_len);
   15f1c:	a907      	add	r1, sp, #28
   15f1e:	4640      	mov	r0, r8
   15f20:	f7eb fbbc 	bl	169c <qstr_data>
   15f24:	4607      	mov	r7, r0
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   15f26:	9b07      	ldr	r3, [sp, #28]
   15f28:	42b3      	cmp	r3, r6
   15f2a:	d3f3      	bcc.n	15f14 <mp_repl_autocomplete+0xa0>
   15f2c:	4632      	mov	r2, r6
   15f2e:	4601      	mov	r1, r0
   15f30:	4620      	mov	r0, r4
   15f32:	f005 fd19 	bl	1b968 <strncmp>
   15f36:	2800      	cmp	r0, #0
   15f38:	d1ec      	bne.n	15f14 <mp_repl_autocomplete+0xa0>
                    mp_load_method_protected(obj, q, dest, true);
   15f3a:	2301      	movs	r3, #1
   15f3c:	aa08      	add	r2, sp, #32
   15f3e:	4641      	mov	r1, r8
   15f40:	4628      	mov	r0, r5
   15f42:	f7f3 fc9f 	bl	9884 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   15f46:	9b08      	ldr	r3, [sp, #32]
   15f48:	2b00      	cmp	r3, #0
   15f4a:	d0e3      	beq.n	15f14 <mp_repl_autocomplete+0xa0>
                        if (match_str == NULL) {
   15f4c:	9b03      	ldr	r3, [sp, #12]
   15f4e:	2b00      	cmp	r3, #0
   15f50:	d0d8      	beq.n	15f04 <mp_repl_autocomplete+0x90>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   15f52:	4633      	mov	r3, r6
   15f54:	9803      	ldr	r0, [sp, #12]
   15f56:	459a      	cmp	sl, r3
   15f58:	d3d7      	bcc.n	15f0a <mp_repl_autocomplete+0x96>
   15f5a:	9a07      	ldr	r2, [sp, #28]
   15f5c:	429a      	cmp	r2, r3
   15f5e:	d3d4      	bcc.n	15f0a <mp_repl_autocomplete+0x96>
                                if (match_str[j] != d_str[j]) {
   15f60:	5cc1      	ldrb	r1, [r0, r3]
   15f62:	5cfa      	ldrb	r2, [r7, r3]
   15f64:	4291      	cmp	r1, r2
   15f66:	d101      	bne.n	15f6c <mp_repl_autocomplete+0xf8>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   15f68:	3301      	adds	r3, #1
   15f6a:	e7f4      	b.n	15f56 <mp_repl_autocomplete+0xe2>
                                    match_len = j;
   15f6c:	469a      	mov	sl, r3
   15f6e:	e7cc      	b.n	15f0a <mp_repl_autocomplete+0x96>
                        q_last = q;
   15f70:	f8cd 8010 	str.w	r8, [sp, #16]
                            q_first = q;
   15f74:	46c3      	mov	fp, r8
   15f76:	e7cd      	b.n	15f14 <mp_repl_autocomplete+0xa0>
   15f78:	4604      	mov	r4, r0
   15f7a:	460e      	mov	r6, r1
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   15f7c:	f04f 0802 	mov.w	r8, #2
            qstr q_first = 0, q_last = 0;
   15f80:	2300      	movs	r3, #0
   15f82:	9304      	str	r3, [sp, #16]
   15f84:	469b      	mov	fp, r3
            size_t match_len = 0;
   15f86:	469a      	mov	sl, r3
            const char *match_str = NULL;
   15f88:	9303      	str	r3, [sp, #12]
   15f8a:	9705      	str	r7, [sp, #20]
   15f8c:	e7c4      	b.n	15f18 <mp_repl_autocomplete+0xa4>
   15f8e:	9f05      	ldr	r7, [sp, #20]
                    }
                }
            }

            // nothing found
            if (q_first == 0) {
   15f90:	f1bb 0f00 	cmp.w	fp, #0
   15f94:	d111      	bne.n	15fba <mp_repl_autocomplete+0x146>
                // If there're no better alternatives, and if it's first word
                // in the line, try to complete "import".
                if (s_start == org_str) {
   15f96:	42bc      	cmp	r4, r7
   15f98:	d001      	beq.n	15f9e <mp_repl_autocomplete+0x12a>
                        *compl_str = import_str + s_len;
                        return sizeof(import_str) - 1 - s_len;
                    }
                }

                return 0;
   15f9a:	2000      	movs	r0, #0
   15f9c:	e06d      	b.n	1607a <mp_repl_autocomplete+0x206>
                    if (memcmp(s_start, import_str, s_len) == 0) {
   15f9e:	4632      	mov	r2, r6
   15fa0:	493b      	ldr	r1, [pc, #236]	; (16090 <mp_repl_autocomplete+0x21c>)
   15fa2:	4620      	mov	r0, r4
   15fa4:	f005 fc9c 	bl	1b8e0 <memcmp>
   15fa8:	2800      	cmp	r0, #0
   15faa:	d16b      	bne.n	16084 <mp_repl_autocomplete+0x210>
                        *compl_str = import_str + s_len;
   15fac:	4b38      	ldr	r3, [pc, #224]	; (16090 <mp_repl_autocomplete+0x21c>)
   15fae:	4433      	add	r3, r6
   15fb0:	9a02      	ldr	r2, [sp, #8]
   15fb2:	6013      	str	r3, [r2, #0]
                        return sizeof(import_str) - 1 - s_len;
   15fb4:	f1c6 0007 	rsb	r0, r6, #7
   15fb8:	e05f      	b.n	1607a <mp_repl_autocomplete+0x206>
            }

            // 1 match found, or multiple matches with a common prefix
            if (q_first == q_last || match_len > s_len) {
   15fba:	9b04      	ldr	r3, [sp, #16]
   15fbc:	459b      	cmp	fp, r3
   15fbe:	d001      	beq.n	15fc4 <mp_repl_autocomplete+0x150>
   15fc0:	45b2      	cmp	sl, r6
   15fc2:	d94d      	bls.n	16060 <mp_repl_autocomplete+0x1ec>
                *compl_str = match_str + s_len;
   15fc4:	9b03      	ldr	r3, [sp, #12]
   15fc6:	4433      	add	r3, r6
   15fc8:	9a02      	ldr	r2, [sp, #8]
   15fca:	6013      	str	r3, [r2, #0]
                return match_len - s_len;
   15fcc:	ebaa 0006 	sub.w	r0, sl, r6
   15fd0:	e053      	b.n	1607a <mp_repl_autocomplete+0x206>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
                    mp_load_method_protected(obj, q, dest, true);
                    if (dest[0] != MP_OBJ_NULL) {
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   15fd2:	330f      	adds	r3, #15
   15fd4:	e030      	b.n	16038 <mp_repl_autocomplete+0x1c4>
                        if (gap < 2) {
                            gap += WORD_SLOT_LEN;
   15fd6:	3710      	adds	r7, #16
   15fd8:	e034      	b.n	16044 <mp_repl_autocomplete+0x1d0>
                        }
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
                            // TODO optimise printing of gap?
                            for (int j = 0; j < gap; ++j) {
                                mp_print_str(print, " ");
   15fda:	492e      	ldr	r1, [pc, #184]	; (16094 <mp_repl_autocomplete+0x220>)
   15fdc:	9801      	ldr	r0, [sp, #4]
   15fde:	f7eb fcae 	bl	193e <mp_print_str>
                            for (int j = 0; j < gap; ++j) {
   15fe2:	f10a 0a01 	add.w	sl, sl, #1
   15fe6:	4557      	cmp	r7, sl
   15fe8:	dcf7      	bgt.n	15fda <mp_repl_autocomplete+0x166>
                            }
                            mp_print_str(print, d_str);
   15fea:	9902      	ldr	r1, [sp, #8]
   15fec:	9801      	ldr	r0, [sp, #4]
   15fee:	f7eb fca6 	bl	193e <mp_print_str>
                            line_len += gap + d_len;
   15ff2:	9b07      	ldr	r3, [sp, #28]
   15ff4:	441f      	add	r7, r3
   15ff6:	44b8      	add	r8, r7
            for (qstr q = q_first; q <= q_last; ++q) {
   15ff8:	f10b 0b01 	add.w	fp, fp, #1
   15ffc:	45d9      	cmp	r9, fp
   15ffe:	d334      	bcc.n	1606a <mp_repl_autocomplete+0x1f6>
                const char *d_str = (const char*)qstr_data(q, &d_len);
   16000:	a907      	add	r1, sp, #28
   16002:	4658      	mov	r0, fp
   16004:	f7eb fb4a 	bl	169c <qstr_data>
   16008:	9002      	str	r0, [sp, #8]
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1600a:	9b07      	ldr	r3, [sp, #28]
   1600c:	42b3      	cmp	r3, r6
   1600e:	d3f3      	bcc.n	15ff8 <mp_repl_autocomplete+0x184>
   16010:	4632      	mov	r2, r6
   16012:	4601      	mov	r1, r0
   16014:	4620      	mov	r0, r4
   16016:	f005 fca7 	bl	1b968 <strncmp>
   1601a:	4682      	mov	sl, r0
   1601c:	2800      	cmp	r0, #0
   1601e:	d1eb      	bne.n	15ff8 <mp_repl_autocomplete+0x184>
                    mp_load_method_protected(obj, q, dest, true);
   16020:	2301      	movs	r3, #1
   16022:	aa08      	add	r2, sp, #32
   16024:	4659      	mov	r1, fp
   16026:	4628      	mov	r0, r5
   16028:	f7f3 fc2c 	bl	9884 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1602c:	9b08      	ldr	r3, [sp, #32]
   1602e:	2b00      	cmp	r3, #0
   16030:	d0e2      	beq.n	15ff8 <mp_repl_autocomplete+0x184>
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   16032:	f118 030f 	adds.w	r3, r8, #15
   16036:	d4cc      	bmi.n	15fd2 <mp_repl_autocomplete+0x15e>
   16038:	f023 030f 	bic.w	r3, r3, #15
   1603c:	eba3 0708 	sub.w	r7, r3, r8
                        if (gap < 2) {
   16040:	2f01      	cmp	r7, #1
   16042:	ddc8      	ble.n	15fd6 <mp_repl_autocomplete+0x162>
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
   16044:	eb08 0307 	add.w	r3, r8, r7
   16048:	9a07      	ldr	r2, [sp, #28]
   1604a:	4413      	add	r3, r2
   1604c:	2b40      	cmp	r3, #64	; 0x40
   1604e:	d9ca      	bls.n	15fe6 <mp_repl_autocomplete+0x172>
                        } else {
                            mp_printf(print, "\n%s", d_str);
   16050:	9a02      	ldr	r2, [sp, #8]
   16052:	4911      	ldr	r1, [pc, #68]	; (16098 <mp_repl_autocomplete+0x224>)
   16054:	9801      	ldr	r0, [sp, #4]
   16056:	f7ec f809 	bl	206c <mp_printf>
                            line_len = d_len;
   1605a:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1605e:	e7cb      	b.n	15ff8 <mp_repl_autocomplete+0x184>
            int line_len = MAX_LINE_LEN; // force a newline for first word
   16060:	f04f 0840 	mov.w	r8, #64	; 0x40
   16064:	f8dd 9010 	ldr.w	r9, [sp, #16]
   16068:	e7c8      	b.n	15ffc <mp_repl_autocomplete+0x188>
                        }
                    }
                }
            }
            mp_print_str(print, "\n");
   1606a:	490c      	ldr	r1, [pc, #48]	; (1609c <mp_repl_autocomplete+0x228>)
   1606c:	9801      	ldr	r0, [sp, #4]
   1606e:	f7eb fc66 	bl	193e <mp_print_str>

            return (size_t)(-1); // indicate many matches
   16072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16076:	e000      	b.n	1607a <mp_repl_autocomplete+0x206>
                return 0;
   16078:	2000      	movs	r0, #0
        }
    }
}
   1607a:	b00b      	add	sp, #44	; 0x2c
   1607c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return 0;
   16080:	2000      	movs	r0, #0
   16082:	e7fa      	b.n	1607a <mp_repl_autocomplete+0x206>
                return 0;
   16084:	2000      	movs	r0, #0
   16086:	e7f8      	b.n	1607a <mp_repl_autocomplete+0x206>
   16088:	200008a0 	.word	0x200008a0
   1608c:	000257e0 	.word	0x000257e0
   16090:	0002a0d0 	.word	0x0002a0d0
   16094:	0002a0d8 	.word	0x0002a0d8
   16098:	0002a0dc 	.word	0x0002a0dc
   1609c:	0002aa44 	.word	0x0002aa44

000160a0 <mp_small_int_mul_overflow>:

#include "py/smallint.h"

bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y) {
    // Check for multiply overflow; see CERT INT32-C
    if (x > 0) { // x is positive
   160a0:	2800      	cmp	r0, #0
   160a2:	dd11      	ble.n	160c8 <mp_small_int_mul_overflow+0x28>
        if (y > 0) { // x and y are positive
   160a4:	2900      	cmp	r1, #0
   160a6:	dd07      	ble.n	160b8 <mp_small_int_mul_overflow+0x18>
            if (x > (MP_SMALL_INT_MAX / y)) {
   160a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   160ac:	fb93 f1f1 	sdiv	r1, r3, r1
   160b0:	4281      	cmp	r1, r0
   160b2:	db1c      	blt.n	160ee <mp_small_int_mul_overflow+0x4e>
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
                return true;
            }
        } // End if x and y are nonpositive
    } // End if x is nonpositive
    return false;
   160b4:	2000      	movs	r0, #0
   160b6:	4770      	bx	lr
            if (y < (MP_SMALL_INT_MIN / x)) {
   160b8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   160bc:	fb93 f0f0 	sdiv	r0, r3, r0
   160c0:	4288      	cmp	r0, r1
   160c2:	dc16      	bgt.n	160f2 <mp_small_int_mul_overflow+0x52>
    return false;
   160c4:	2000      	movs	r0, #0
   160c6:	4770      	bx	lr
        if (y > 0) { // x is nonpositive, y is positive
   160c8:	2900      	cmp	r1, #0
   160ca:	dd07      	ble.n	160dc <mp_small_int_mul_overflow+0x3c>
            if (x < (MP_SMALL_INT_MIN / y)) {
   160cc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   160d0:	fb93 f1f1 	sdiv	r1, r3, r1
   160d4:	4281      	cmp	r1, r0
   160d6:	dc0e      	bgt.n	160f6 <mp_small_int_mul_overflow+0x56>
    return false;
   160d8:	2000      	movs	r0, #0
   160da:	4770      	bx	lr
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
   160dc:	b168      	cbz	r0, 160fa <mp_small_int_mul_overflow+0x5a>
   160de:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   160e2:	fb93 f0f0 	sdiv	r0, r3, r0
   160e6:	4288      	cmp	r0, r1
   160e8:	dc09      	bgt.n	160fe <mp_small_int_mul_overflow+0x5e>
    return false;
   160ea:	2000      	movs	r0, #0
   160ec:	4770      	bx	lr
                return true;
   160ee:	2001      	movs	r0, #1
   160f0:	4770      	bx	lr
                return true;
   160f2:	2001      	movs	r0, #1
   160f4:	4770      	bx	lr
                return true;
   160f6:	2001      	movs	r0, #1
   160f8:	4770      	bx	lr
    return false;
   160fa:	2000      	movs	r0, #0
   160fc:	4770      	bx	lr
                return true;
   160fe:	2001      	movs	r0, #1
}
   16100:	4770      	bx	lr

00016102 <mp_small_int_modulo>:

mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor) {
    // Python specs require that mod has same sign as second operand
    dividend %= divisor;
   16102:	fb90 f3f1 	sdiv	r3, r0, r1
   16106:	fb01 0013 	mls	r0, r1, r3, r0
    if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
   1610a:	2800      	cmp	r0, #0
   1610c:	db04      	blt.n	16118 <mp_small_int_modulo+0x16>
   1610e:	2800      	cmp	r0, #0
   16110:	dd05      	ble.n	1611e <mp_small_int_modulo+0x1c>
   16112:	2900      	cmp	r1, #0
   16114:	da03      	bge.n	1611e <mp_small_int_modulo+0x1c>
   16116:	e001      	b.n	1611c <mp_small_int_modulo+0x1a>
   16118:	2900      	cmp	r1, #0
   1611a:	ddf8      	ble.n	1610e <mp_small_int_modulo+0xc>
        dividend += divisor;
   1611c:	4408      	add	r0, r1
    }
    return dividend;
}
   1611e:	4770      	bx	lr

00016120 <mp_small_int_floor_divide>:

mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom) {
    if (num >= 0) {
   16120:	2800      	cmp	r0, #0
   16122:	db07      	blt.n	16134 <mp_small_int_floor_divide+0x14>
        if (denom < 0) {
   16124:	2900      	cmp	r1, #0
   16126:	db02      	blt.n	1612e <mp_small_int_floor_divide+0xe>
        if (denom >= 0) {
            num += -denom + 1;
        }
    }
    return num / denom;
}
   16128:	fb90 f0f1 	sdiv	r0, r0, r1
   1612c:	4770      	bx	lr
            num += -denom - 1;
   1612e:	43cb      	mvns	r3, r1
   16130:	4418      	add	r0, r3
   16132:	e7f9      	b.n	16128 <mp_small_int_floor_divide+0x8>
        if (denom >= 0) {
   16134:	2900      	cmp	r1, #0
   16136:	dbf7      	blt.n	16128 <mp_small_int_floor_divide+0x8>
            num += -denom + 1;
   16138:	f1c1 0301 	rsb	r3, r1, #1
   1613c:	4418      	add	r0, r3
   1613e:	e7f3      	b.n	16128 <mp_small_int_floor_divide+0x8>

00016140 <uctypes_struct_addressof>:
}

/// \function addressof()
/// Return address of object's data (applies to object providing buffer
/// interface).
STATIC mp_obj_t uctypes_struct_addressof(mp_obj_t buf) {
   16140:	b500      	push	{lr}
   16142:	b085      	sub	sp, #20
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(buf, &bufinfo, MP_BUFFER_READ);
   16144:	2201      	movs	r2, #1
   16146:	a901      	add	r1, sp, #4
   16148:	f7f5 f8b2 	bl	b2b0 <mp_get_buffer_raise>
    return mp_obj_new_int((mp_int_t)(uintptr_t)bufinfo.buf);
   1614c:	9801      	ldr	r0, [sp, #4]
   1614e:	f7f7 fef4 	bl	df3a <mp_obj_new_int>
}
   16152:	b005      	add	sp, #20
   16154:	f85d fb04 	ldr.w	pc, [sp], #4

00016158 <uctypes_struct_bytearray_at>:

/// \function bytearray_at()
/// Capture memory at given address of given size as bytearray. Memory is
/// captured by reference (and thus memory pointed by bytearray may change
/// or become invalid at later time). Use bytes_at() to capture by value.
STATIC mp_obj_t uctypes_struct_bytearray_at(mp_obj_t ptr, mp_obj_t size) {
   16158:	b538      	push	{r3, r4, r5, lr}
   1615a:	4605      	mov	r5, r0
    return mp_obj_new_bytearray_by_ref(mp_obj_int_get_truncated(size), (void*)(uintptr_t)mp_obj_int_get_truncated(ptr));
   1615c:	4608      	mov	r0, r1
   1615e:	f7f7 ff2e 	bl	dfbe <mp_obj_int_get_truncated>
   16162:	4604      	mov	r4, r0
   16164:	4628      	mov	r0, r5
   16166:	f7f7 ff2a 	bl	dfbe <mp_obj_int_get_truncated>
   1616a:	4601      	mov	r1, r0
   1616c:	4620      	mov	r0, r4
   1616e:	f7f5 fb99 	bl	b8a4 <mp_obj_new_bytearray_by_ref>
}
   16172:	bd38      	pop	{r3, r4, r5, pc}

00016174 <uctypes_struct_bytes_at>:

/// \function bytes_at()
/// Capture memory at given address of given size as bytes. Memory is
/// captured by value, i.e. copied. Use bytearray_at() to capture by reference
/// ("zero copy").
STATIC mp_obj_t uctypes_struct_bytes_at(mp_obj_t ptr, mp_obj_t size) {
   16174:	b538      	push	{r3, r4, r5, lr}
   16176:	460d      	mov	r5, r1
    return mp_obj_new_bytes((void*)(uintptr_t)mp_obj_int_get_truncated(ptr), mp_obj_int_get_truncated(size));
   16178:	f7f7 ff21 	bl	dfbe <mp_obj_int_get_truncated>
   1617c:	4604      	mov	r4, r0
   1617e:	4628      	mov	r0, r5
   16180:	f7f7 ff1d 	bl	dfbe <mp_obj_int_get_truncated>
   16184:	4601      	mov	r1, r0
   16186:	4620      	mov	r0, r4
   16188:	f7f9 fe68 	bl	fe5c <mp_obj_new_bytes>
}
   1618c:	bd38      	pop	{r3, r4, r5, pc}
	...

00016190 <syntax_error>:
STATIC NORETURN void syntax_error(void) {
   16190:	b508      	push	{r3, lr}
    mp_raise_TypeError("syntax error in uctypes descriptor");
   16192:	4801      	ldr	r0, [pc, #4]	; (16198 <syntax_error+0x8>)
   16194:	f7f4 fa88 	bl	a6a8 <mp_raise_TypeError>
   16198:	0002a270 	.word	0x0002a270

0001619c <uctypes_struct_agg_size>:
STATIC mp_uint_t uctypes_struct_agg_size(mp_obj_tuple_t *t, int layout_type, mp_uint_t *max_field_size) {
   1619c:	b538      	push	{r3, r4, r5, lr}
    mp_int_t offset_ = MP_OBJ_SMALL_INT_VALUE(t->items[0]);
   1619e:	6883      	ldr	r3, [r0, #8]
    switch (agg_type) {
   161a0:	0f9b      	lsrs	r3, r3, #30
   161a2:	2b01      	cmp	r3, #1
   161a4:	d014      	beq.n	161d0 <uctypes_struct_agg_size+0x34>
   161a6:	b17b      	cbz	r3, 161c8 <uctypes_struct_agg_size+0x2c>
   161a8:	2b02      	cmp	r3, #2
   161aa:	d11d      	bne.n	161e8 <uctypes_struct_agg_size+0x4c>
            mp_int_t arr_sz = MP_OBJ_SMALL_INT_VALUE(t->items[1]);
   161ac:	68c3      	ldr	r3, [r0, #12]
            arr_sz &= VALUE_MASK(VAL_TYPE_BITS);
   161ae:	f3c3 045a 	ubfx	r4, r3, #1, #27
            if (t->len == 2) {
   161b2:	6845      	ldr	r5, [r0, #4]
   161b4:	2d02      	cmp	r5, #2
   161b6:	d111      	bne.n	161dc <uctypes_struct_agg_size+0x40>
                item_s = GET_SCALAR_SIZE(val_type);
   161b8:	0f5b      	lsrs	r3, r3, #29
   161ba:	2001      	movs	r0, #1
   161bc:	4098      	lsls	r0, r3
                if (item_s > *max_field_size) {
   161be:	6813      	ldr	r3, [r2, #0]
   161c0:	4283      	cmp	r3, r0
   161c2:	d20e      	bcs.n	161e2 <uctypes_struct_agg_size+0x46>
                    *max_field_size = item_s;
   161c4:	6010      	str	r0, [r2, #0]
   161c6:	e00c      	b.n	161e2 <uctypes_struct_agg_size+0x46>
            return uctypes_struct_size(t->items[1], layout_type, max_field_size);
   161c8:	68c0      	ldr	r0, [r0, #12]
   161ca:	f000 f81b 	bl	16204 <uctypes_struct_size>
}
   161ce:	bd38      	pop	{r3, r4, r5, pc}
            if (sizeof(void*) > *max_field_size) {
   161d0:	6813      	ldr	r3, [r2, #0]
   161d2:	2b03      	cmp	r3, #3
   161d4:	d80e      	bhi.n	161f4 <uctypes_struct_agg_size+0x58>
                *max_field_size = sizeof(void*);
   161d6:	2004      	movs	r0, #4
   161d8:	6010      	str	r0, [r2, #0]
   161da:	e7f8      	b.n	161ce <uctypes_struct_agg_size+0x32>
                item_s = uctypes_struct_size(t->items[2], layout_type, max_field_size);
   161dc:	6900      	ldr	r0, [r0, #16]
   161de:	f000 f811 	bl	16204 <uctypes_struct_size>
            return item_s * arr_sz;
   161e2:	fb00 f004 	mul.w	r0, r0, r4
   161e6:	e7f2      	b.n	161ce <uctypes_struct_agg_size+0x32>
            assert(0);
   161e8:	4b03      	ldr	r3, [pc, #12]	; (161f8 <uctypes_struct_agg_size+0x5c>)
   161ea:	4a04      	ldr	r2, [pc, #16]	; (161fc <uctypes_struct_agg_size+0x60>)
   161ec:	21ca      	movs	r1, #202	; 0xca
   161ee:	4804      	ldr	r0, [pc, #16]	; (16200 <uctypes_struct_agg_size+0x64>)
   161f0:	f002 f9b4 	bl	1855c <__assert_func>
            return sizeof(void*);
   161f4:	2004      	movs	r0, #4
   161f6:	e7ea      	b.n	161ce <uctypes_struct_agg_size+0x32>
   161f8:	000252b4 	.word	0x000252b4
   161fc:	0002a0e0 	.word	0x0002a0e0
   16200:	0002a2bc 	.word	0x0002a2bc

00016204 <uctypes_struct_size>:
STATIC mp_uint_t uctypes_struct_size(mp_obj_t desc_in, int layout_type, mp_uint_t *max_field_size) {
   16204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16208:	4605      	mov	r5, r0
   1620a:	4689      	mov	r9, r1
   1620c:	4617      	mov	r7, r2
    if (!MP_OBJ_IS_TYPE(desc_in, &mp_type_dict)) {
   1620e:	f010 0603 	ands.w	r6, r0, #3
   16212:	d103      	bne.n	1621c <uctypes_struct_size+0x18>
   16214:	6802      	ldr	r2, [r0, #0]
   16216:	4b3a      	ldr	r3, [pc, #232]	; (16300 <uctypes_struct_size+0xfc>)
   16218:	429a      	cmp	r2, r3
   1621a:	d05f      	beq.n	162dc <uctypes_struct_size+0xd8>
        if (MP_OBJ_IS_TYPE(desc_in, &mp_type_tuple)) {
   1621c:	b91e      	cbnz	r6, 16226 <uctypes_struct_size+0x22>
   1621e:	682a      	ldr	r2, [r5, #0]
   16220:	4b38      	ldr	r3, [pc, #224]	; (16304 <uctypes_struct_size+0x100>)
   16222:	429a      	cmp	r2, r3
   16224:	d005      	beq.n	16232 <uctypes_struct_size+0x2e>
        } else if (MP_OBJ_IS_SMALL_INT(desc_in)) {
   16226:	f015 0f01 	tst.w	r5, #1
   1622a:	d009      	beq.n	16240 <uctypes_struct_size+0x3c>
            mp_raise_TypeError("Cannot unambiguously get sizeof scalar");
   1622c:	4836      	ldr	r0, [pc, #216]	; (16308 <uctypes_struct_size+0x104>)
   1622e:	f7f4 fa3b 	bl	a6a8 <mp_raise_TypeError>
            return uctypes_struct_agg_size((mp_obj_tuple_t*)MP_OBJ_TO_PTR(desc_in), layout_type, max_field_size);
   16232:	463a      	mov	r2, r7
   16234:	4649      	mov	r1, r9
   16236:	4628      	mov	r0, r5
   16238:	f7ff ffb0 	bl	1619c <uctypes_struct_agg_size>
   1623c:	4680      	mov	r8, r0
   1623e:	e053      	b.n	162e8 <uctypes_struct_size+0xe4>
        syntax_error();
   16240:	f7ff ffa6 	bl	16190 <syntax_error>
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   16244:	4633      	mov	r3, r6
   16246:	e014      	b.n	16272 <uctypes_struct_size+0x6e>
   16248:	4633      	mov	r3, r6
   1624a:	e012      	b.n	16272 <uctypes_struct_size+0x6e>
        return 4;
   1624c:	2204      	movs	r2, #4
   1624e:	e029      	b.n	162a4 <uctypes_struct_size+0xa0>
                if (offset + s > total_size) {
   16250:	4413      	add	r3, r2
   16252:	4543      	cmp	r3, r8
   16254:	d840      	bhi.n	162d8 <uctypes_struct_size+0xd4>
    for (mp_uint_t i = 0; i < d->map.alloc; i++) {
   16256:	3401      	adds	r4, #1
   16258:	68ab      	ldr	r3, [r5, #8]
   1625a:	42a3      	cmp	r3, r4
   1625c:	d941      	bls.n	162e2 <uctypes_struct_size+0xde>
   1625e:	68eb      	ldr	r3, [r5, #12]
   16260:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   16264:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
   16268:	2b00      	cmp	r3, #0
   1626a:	d0ed      	beq.n	16248 <uctypes_struct_size+0x44>
   1626c:	2b08      	cmp	r3, #8
   1626e:	d0e9      	beq.n	16244 <uctypes_struct_size+0x40>
   16270:	2301      	movs	r3, #1
        if (MP_MAP_SLOT_IS_FILLED(&d->map, i)) {
   16272:	f013 0f01 	tst.w	r3, #1
   16276:	d0ee      	beq.n	16256 <uctypes_struct_size+0x52>
            mp_obj_t v = d->map.table[i].value;
   16278:	6850      	ldr	r0, [r2, #4]
            if (MP_OBJ_IS_SMALL_INT(v)) {
   1627a:	f010 0f01 	tst.w	r0, #1
   1627e:	d016      	beq.n	162ae <uctypes_struct_size+0xaa>
                mp_uint_t offset = MP_OBJ_SMALL_INT_VALUE(v);
   16280:	1040      	asrs	r0, r0, #1
                mp_uint_t val_type = GET_TYPE(offset, VAL_TYPE_BITS);
   16282:	f3c0 62c3 	ubfx	r2, r0, #27, #4
                offset &= VALUE_MASK(VAL_TYPE_BITS);
   16286:	f020 4378 	bic.w	r3, r0, #4160749568	; 0xf8000000
                if (val_type >= BFUINT8 && val_type <= BFINT32) {
   1628a:	f1a2 0108 	sub.w	r1, r2, #8
   1628e:	2905      	cmp	r1, #5
   16290:	d801      	bhi.n	16296 <uctypes_struct_size+0x92>
                    offset &= (1 << OFFSET_BITS) - 1;
   16292:	f3c0 0310 	ubfx	r3, r0, #0, #17
    if (val_type == FLOAT32) {
   16296:	2a0e      	cmp	r2, #14
   16298:	d0d8      	beq.n	1624c <uctypes_struct_size+0x48>
        return GET_SCALAR_SIZE(val_type & 7);
   1629a:	f3c2 0241 	ubfx	r2, r2, #1, #2
   1629e:	2101      	movs	r1, #1
   162a0:	fa01 f202 	lsl.w	r2, r1, r2
                if (s > *max_field_size) {
   162a4:	6839      	ldr	r1, [r7, #0]
   162a6:	4291      	cmp	r1, r2
   162a8:	d2d2      	bcs.n	16250 <uctypes_struct_size+0x4c>
                    *max_field_size = s;
   162aa:	603a      	str	r2, [r7, #0]
   162ac:	e7d0      	b.n	16250 <uctypes_struct_size+0x4c>
                if (!MP_OBJ_IS_TYPE(v, &mp_type_tuple)) {
   162ae:	f010 0f03 	tst.w	r0, #3
   162b2:	d10f      	bne.n	162d4 <uctypes_struct_size+0xd0>
   162b4:	6802      	ldr	r2, [r0, #0]
   162b6:	4b13      	ldr	r3, [pc, #76]	; (16304 <uctypes_struct_size+0x100>)
   162b8:	429a      	cmp	r2, r3
   162ba:	d10b      	bne.n	162d4 <uctypes_struct_size+0xd0>
                mp_int_t offset = MP_OBJ_SMALL_INT_VALUE(t->items[0]);
   162bc:	6883      	ldr	r3, [r0, #8]
                offset &= VALUE_MASK(AGG_TYPE_BITS);
   162be:	f3c3 0a5c 	ubfx	sl, r3, #1, #29
                mp_uint_t s = uctypes_struct_agg_size(t, layout_type, max_field_size);
   162c2:	463a      	mov	r2, r7
   162c4:	4649      	mov	r1, r9
   162c6:	f7ff ff69 	bl	1619c <uctypes_struct_agg_size>
                if (offset + s > total_size) {
   162ca:	4450      	add	r0, sl
   162cc:	4540      	cmp	r0, r8
   162ce:	d9c2      	bls.n	16256 <uctypes_struct_size+0x52>
                    total_size = offset + s;
   162d0:	4680      	mov	r8, r0
   162d2:	e7c0      	b.n	16256 <uctypes_struct_size+0x52>
                    syntax_error();
   162d4:	f7ff ff5c 	bl	16190 <syntax_error>
                    total_size = offset + s;
   162d8:	4698      	mov	r8, r3
   162da:	e7bc      	b.n	16256 <uctypes_struct_size+0x52>
    for (mp_uint_t i = 0; i < d->map.alloc; i++) {
   162dc:	2400      	movs	r4, #0
    mp_uint_t total_size = 0;
   162de:	46a0      	mov	r8, r4
   162e0:	e7ba      	b.n	16258 <uctypes_struct_size+0x54>
    if (layout_type == LAYOUT_NATIVE) {
   162e2:	f1b9 0f02 	cmp.w	r9, #2
   162e6:	d002      	beq.n	162ee <uctypes_struct_size+0xea>
}
   162e8:	4640      	mov	r0, r8
   162ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        total_size = (total_size + *max_field_size - 1) & ~(*max_field_size - 1);
   162ee:	683b      	ldr	r3, [r7, #0]
   162f0:	4498      	add	r8, r3
   162f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   162f6:	425b      	negs	r3, r3
   162f8:	ea08 0803 	and.w	r8, r8, r3
   162fc:	e7f4      	b.n	162e8 <uctypes_struct_size+0xe4>
   162fe:	bf00      	nop
   16300:	000265d0 	.word	0x000265d0
   16304:	00028844 	.word	0x00028844
   16308:	0002a340 	.word	0x0002a340

0001630c <uctypes_struct_sizeof>:
STATIC mp_obj_t uctypes_struct_sizeof(mp_obj_t obj_in) {
   1630c:	b500      	push	{lr}
   1630e:	b083      	sub	sp, #12
    mp_uint_t max_field_size = 0;
   16310:	2300      	movs	r3, #0
   16312:	9301      	str	r3, [sp, #4]
    if (MP_OBJ_IS_TYPE(obj_in, &mp_type_bytearray)) {
   16314:	f010 0303 	ands.w	r3, r0, #3
   16318:	d103      	bne.n	16322 <uctypes_struct_sizeof+0x16>
   1631a:	6801      	ldr	r1, [r0, #0]
   1631c:	4a0c      	ldr	r2, [pc, #48]	; (16350 <uctypes_struct_sizeof+0x44>)
   1631e:	4291      	cmp	r1, r2
   16320:	d006      	beq.n	16330 <uctypes_struct_sizeof+0x24>
    if (MP_OBJ_IS_TYPE(obj_in, &uctypes_struct_type)) {
   16322:	b95b      	cbnz	r3, 1633c <uctypes_struct_sizeof+0x30>
   16324:	6802      	ldr	r2, [r0, #0]
   16326:	4b0b      	ldr	r3, [pc, #44]	; (16354 <uctypes_struct_sizeof+0x48>)
   16328:	429a      	cmp	r2, r3
   1632a:	d004      	beq.n	16336 <uctypes_struct_sizeof+0x2a>
    int layout_type = LAYOUT_NATIVE;
   1632c:	2102      	movs	r1, #2
   1632e:	e006      	b.n	1633e <uctypes_struct_sizeof+0x32>
        return mp_obj_len(obj_in);
   16330:	f7f4 ff5e 	bl	b1f0 <mp_obj_len>
   16334:	e009      	b.n	1634a <uctypes_struct_sizeof+0x3e>
        layout_type = obj->flags;
   16336:	68c1      	ldr	r1, [r0, #12]
        obj_in = obj->desc;
   16338:	6840      	ldr	r0, [r0, #4]
   1633a:	e000      	b.n	1633e <uctypes_struct_sizeof+0x32>
    int layout_type = LAYOUT_NATIVE;
   1633c:	2102      	movs	r1, #2
    mp_uint_t size = uctypes_struct_size(obj_in, layout_type, &max_field_size);
   1633e:	aa01      	add	r2, sp, #4
   16340:	f7ff ff60 	bl	16204 <uctypes_struct_size>
    return MP_OBJ_NEW_SMALL_INT(size);
   16344:	0040      	lsls	r0, r0, #1
   16346:	f040 0001 	orr.w	r0, r0, #1
}
   1634a:	b003      	add	sp, #12
   1634c:	f85d fb04 	ldr.w	pc, [sp], #4
   16350:	00025ec4 	.word	0x00025ec4
   16354:	0002a3a4 	.word	0x0002a3a4

00016358 <uctypes_get_buffer>:
STATIC mp_int_t uctypes_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   16358:	b570      	push	{r4, r5, r6, lr}
   1635a:	b082      	sub	sp, #8
   1635c:	4605      	mov	r5, r0
   1635e:	460c      	mov	r4, r1
    mp_uint_t max_field_size = 0;
   16360:	2600      	movs	r6, #0
   16362:	aa02      	add	r2, sp, #8
   16364:	f842 6d04 	str.w	r6, [r2, #-4]!
    mp_uint_t size = uctypes_struct_size(self->desc, self->flags, &max_field_size);
   16368:	68c1      	ldr	r1, [r0, #12]
   1636a:	6840      	ldr	r0, [r0, #4]
   1636c:	f7ff ff4a 	bl	16204 <uctypes_struct_size>
    bufinfo->buf = self->addr;
   16370:	68ab      	ldr	r3, [r5, #8]
   16372:	6023      	str	r3, [r4, #0]
    bufinfo->len = size;
   16374:	6060      	str	r0, [r4, #4]
    bufinfo->typecode = BYTEARRAY_TYPECODE;
   16376:	2301      	movs	r3, #1
   16378:	60a3      	str	r3, [r4, #8]
}
   1637a:	4630      	mov	r0, r6
   1637c:	b002      	add	sp, #8
   1637e:	bd70      	pop	{r4, r5, r6, pc}

00016380 <set_aligned>:
STATIC void set_aligned(uint val_type, void *p, mp_int_t index, mp_obj_t val) {
   16380:	b5f0      	push	{r4, r5, r6, r7, lr}
   16382:	b083      	sub	sp, #12
   16384:	4604      	mov	r4, r0
   16386:	460d      	mov	r5, r1
   16388:	4617      	mov	r7, r2
   1638a:	461e      	mov	r6, r3
    if (val_type == FLOAT32 || val_type == FLOAT64) {
   1638c:	f1a0 030e 	sub.w	r3, r0, #14
   16390:	2b01      	cmp	r3, #1
   16392:	d90a      	bls.n	163aa <set_aligned+0x2a>
    mp_int_t v = mp_obj_get_int_truncated(val);
   16394:	4630      	mov	r0, r6
   16396:	f7f4 fd47 	bl	ae28 <mp_obj_get_int_truncated>
    switch (val_type) {
   1639a:	2c07      	cmp	r4, #7
   1639c:	d833      	bhi.n	16406 <set_aligned+0x86>
   1639e:	e8df f004 	tbb	[pc, r4]
   163a2:	1a18      	.short	0x1a18
   163a4:	25221f1c 	.word	0x25221f1c
   163a8:	2828      	.short	0x2828
        mp_float_t v = mp_obj_get_float(val);
   163aa:	4630      	mov	r0, r6
   163ac:	f7f4 fdb6 	bl	af1c <mp_obj_get_float>
        if (val_type == FLOAT32) {
   163b0:	2c0e      	cmp	r4, #14
   163b2:	d009      	beq.n	163c8 <set_aligned+0x48>
            ((double*)p)[index] = v;
   163b4:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
   163b8:	ee10 0a10 	vmov	r0, s0
   163bc:	f7ea f996 	bl	6ec <__aeabi_f2d>
   163c0:	e9c5 0100 	strd	r0, r1, [r5]
}
   163c4:	b003      	add	sp, #12
   163c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ((float*)p)[index] = v;
   163c8:	eb05 0587 	add.w	r5, r5, r7, lsl #2
   163cc:	ed85 0a00 	vstr	s0, [r5]
   163d0:	e7f8      	b.n	163c4 <set_aligned+0x44>
            ((uint8_t*)p)[index] = (uint8_t)v; return;
   163d2:	55e8      	strb	r0, [r5, r7]
   163d4:	e7f6      	b.n	163c4 <set_aligned+0x44>
            ((int8_t*)p)[index] = (int8_t)v; return;
   163d6:	55e8      	strb	r0, [r5, r7]
   163d8:	e7f4      	b.n	163c4 <set_aligned+0x44>
            ((uint16_t*)p)[index] = (uint16_t)v; return;
   163da:	f825 0017 	strh.w	r0, [r5, r7, lsl #1]
   163de:	e7f1      	b.n	163c4 <set_aligned+0x44>
            ((int16_t*)p)[index] = (int16_t)v; return;
   163e0:	f825 0017 	strh.w	r0, [r5, r7, lsl #1]
   163e4:	e7ee      	b.n	163c4 <set_aligned+0x44>
            ((uint32_t*)p)[index] = (uint32_t)v; return;
   163e6:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
   163ea:	e7eb      	b.n	163c4 <set_aligned+0x44>
            ((int32_t*)p)[index] = (int32_t)v; return;
   163ec:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
   163f0:	e7e8      	b.n	163c4 <set_aligned+0x44>
   163f2:	ab02      	add	r3, sp, #8
   163f4:	f843 5d04 	str.w	r5, [r3, #-4]!
    mp_binary_set_val(struct_type, type2char[val_type], val, &p);
   163f8:	4632      	mov	r2, r6
   163fa:	4906      	ldr	r1, [pc, #24]	; (16414 <set_aligned+0x94>)
   163fc:	5d09      	ldrb	r1, [r1, r4]
   163fe:	203c      	movs	r0, #60	; 0x3c
   16400:	f7fc ffe2 	bl	133c8 <mp_binary_set_val>
   16404:	e7de      	b.n	163c4 <set_aligned+0x44>
            assert(0);
   16406:	4b04      	ldr	r3, [pc, #16]	; (16418 <set_aligned+0x98>)
   16408:	4a04      	ldr	r2, [pc, #16]	; (1641c <set_aligned+0x9c>)
   1640a:	f44f 71c1 	mov.w	r1, #386	; 0x182
   1640e:	4804      	ldr	r0, [pc, #16]	; (16420 <set_aligned+0xa0>)
   16410:	f002 f8a4 	bl	1855c <__assert_func>
   16414:	0002a2a4 	.word	0x0002a2a4
   16418:	000252b4 	.word	0x000252b4
   1641c:	0002a12c 	.word	0x0002a12c
   16420:	0002a2bc 	.word	0x0002a2bc

00016424 <get_aligned>:
STATIC mp_obj_t get_aligned(uint val_type, void *p, mp_int_t index) {
   16424:	b508      	push	{r3, lr}
    switch (val_type) {
   16426:	280f      	cmp	r0, #15
   16428:	d849      	bhi.n	164be <get_aligned+0x9a>
   1642a:	e8df f000 	tbb	[pc, r0]
   1642e:	0d08      	.short	0x0d08
   16430:	231e1812 	.word	0x231e1812
   16434:	48482f28 	.word	0x48482f28
   16438:	48484848 	.word	0x48484848
   1643c:	3d36      	.short	0x3d36
            return MP_OBJ_NEW_SMALL_INT(((uint8_t*)p)[index]);
   1643e:	5c88      	ldrb	r0, [r1, r2]
   16440:	0040      	lsls	r0, r0, #1
   16442:	f040 0001 	orr.w	r0, r0, #1
}
   16446:	bd08      	pop	{r3, pc}
            return MP_OBJ_NEW_SMALL_INT(((int8_t*)p)[index]);
   16448:	5688      	ldrsb	r0, [r1, r2]
   1644a:	0040      	lsls	r0, r0, #1
   1644c:	f040 0001 	orr.w	r0, r0, #1
   16450:	e7f9      	b.n	16446 <get_aligned+0x22>
            return MP_OBJ_NEW_SMALL_INT(((uint16_t*)p)[index]);
   16452:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
   16456:	0040      	lsls	r0, r0, #1
   16458:	f040 0001 	orr.w	r0, r0, #1
   1645c:	e7f3      	b.n	16446 <get_aligned+0x22>
            return MP_OBJ_NEW_SMALL_INT(((int16_t*)p)[index]);
   1645e:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
   16462:	0040      	lsls	r0, r0, #1
   16464:	f040 0001 	orr.w	r0, r0, #1
   16468:	e7ed      	b.n	16446 <get_aligned+0x22>
            return mp_obj_new_int_from_uint(((uint32_t*)p)[index]);
   1646a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   1646e:	f7f7 fd81 	bl	df74 <mp_obj_new_int_from_uint>
   16472:	e7e8      	b.n	16446 <get_aligned+0x22>
            return mp_obj_new_int(((int32_t*)p)[index]);
   16474:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   16478:	f7f7 fd5f 	bl	df3a <mp_obj_new_int>
   1647c:	e7e3      	b.n	16446 <get_aligned+0x22>
            return mp_obj_new_int_from_ull(((uint64_t*)p)[index]);
   1647e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   16482:	e9d1 0100 	ldrd	r0, r1, [r1]
   16486:	f7f7 fd64 	bl	df52 <mp_obj_new_int_from_ull>
   1648a:	e7dc      	b.n	16446 <get_aligned+0x22>
            return mp_obj_new_int_from_ll(((int64_t*)p)[index]);
   1648c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   16490:	e9d1 0100 	ldrd	r0, r1, [r1]
   16494:	f7f7 fd40 	bl	df18 <mp_obj_new_int_from_ll>
   16498:	e7d5      	b.n	16446 <get_aligned+0x22>
            return mp_obj_new_float(((float*)p)[index]);
   1649a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1649e:	ed91 0a00 	vldr	s0, [r1]
   164a2:	f7f6 fcab 	bl	cdfc <mp_obj_new_float>
   164a6:	e7ce      	b.n	16446 <get_aligned+0x22>
            return mp_obj_new_float(((double*)p)[index]);
   164a8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   164ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   164b0:	f7ea f974 	bl	79c <__aeabi_d2f>
   164b4:	ee00 0a10 	vmov	s0, r0
   164b8:	f7f6 fca0 	bl	cdfc <mp_obj_new_float>
   164bc:	e7c3      	b.n	16446 <get_aligned+0x22>
            assert(0);
   164be:	4b03      	ldr	r3, [pc, #12]	; (164cc <get_aligned+0xa8>)
   164c0:	4a03      	ldr	r2, [pc, #12]	; (164d0 <get_aligned+0xac>)
   164c2:	f240 1159 	movw	r1, #345	; 0x159
   164c6:	4803      	ldr	r0, [pc, #12]	; (164d4 <get_aligned+0xb0>)
   164c8:	f002 f848 	bl	1855c <__assert_func>
   164cc:	000252b4 	.word	0x000252b4
   164d0:	0002a120 	.word	0x0002a120
   164d4:	0002a2bc 	.word	0x0002a2bc

000164d8 <uctypes_struct_subscr>:
    if (value == MP_OBJ_NULL) {
   164d8:	2a00      	cmp	r2, #0
   164da:	f000 809e 	beq.w	1661a <uctypes_struct_subscr+0x142>
STATIC mp_obj_t uctypes_struct_subscr(mp_obj_t self_in, mp_obj_t index_in, mp_obj_t value) {
   164de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164e2:	b082      	sub	sp, #8
   164e4:	4615      	mov	r5, r2
   164e6:	4606      	mov	r6, r0
        if (!MP_OBJ_IS_TYPE(self->desc, &mp_type_tuple)) {
   164e8:	6847      	ldr	r7, [r0, #4]
   164ea:	f017 0f03 	tst.w	r7, #3
   164ee:	d119      	bne.n	16524 <uctypes_struct_subscr+0x4c>
   164f0:	683a      	ldr	r2, [r7, #0]
   164f2:	4b4c      	ldr	r3, [pc, #304]	; (16624 <uctypes_struct_subscr+0x14c>)
   164f4:	429a      	cmp	r2, r3
   164f6:	d115      	bne.n	16524 <uctypes_struct_subscr+0x4c>
        mp_int_t offset = MP_OBJ_SMALL_INT_VALUE(t->items[0]);
   164f8:	68bb      	ldr	r3, [r7, #8]
   164fa:	0f9b      	lsrs	r3, r3, #30
        mp_int_t index = MP_OBJ_SMALL_INT_VALUE(index_in);
   164fc:	104c      	asrs	r4, r1, #1
        if (agg_type == ARRAY) {
   164fe:	2b02      	cmp	r3, #2
   16500:	d013      	beq.n	1652a <uctypes_struct_subscr+0x52>
        } else if (agg_type == PTR) {
   16502:	2b01      	cmp	r3, #1
   16504:	f040 8082 	bne.w	1660c <uctypes_struct_subscr+0x134>
            byte *p = *(void**)self->addr;
   16508:	6883      	ldr	r3, [r0, #8]
   1650a:	681d      	ldr	r5, [r3, #0]
            if (MP_OBJ_IS_SMALL_INT(t->items[1])) {
   1650c:	68f8      	ldr	r0, [r7, #12]
   1650e:	f010 0f01 	tst.w	r0, #1
   16512:	d066      	beq.n	165e2 <uctypes_struct_subscr+0x10a>
                return get_aligned(val_type, p, index);
   16514:	4622      	mov	r2, r4
   16516:	4629      	mov	r1, r5
   16518:	0f00      	lsrs	r0, r0, #28
   1651a:	f7ff ff83 	bl	16424 <get_aligned>
}
   1651e:	b002      	add	sp, #8
   16520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mp_raise_TypeError("struct: cannot index");
   16524:	4840      	ldr	r0, [pc, #256]	; (16628 <uctypes_struct_subscr+0x150>)
   16526:	f7f4 f8bf 	bl	a6a8 <mp_raise_TypeError>
            mp_int_t arr_sz = MP_OBJ_SMALL_INT_VALUE(t->items[1]);
   1652a:	68fb      	ldr	r3, [r7, #12]
   1652c:	ea4f 7c13 	mov.w	ip, r3, lsr #28
            arr_sz &= VALUE_MASK(VAL_TYPE_BITS);
   16530:	f3c3 025a 	ubfx	r2, r3, #1, #27
            if (index >= arr_sz) {
   16534:	4294      	cmp	r4, r2
   16536:	da1b      	bge.n	16570 <uctypes_struct_subscr+0x98>
            if (t->len == 2) {
   16538:	687a      	ldr	r2, [r7, #4]
   1653a:	2a02      	cmp	r2, #2
   1653c:	d01e      	beq.n	1657c <uctypes_struct_subscr+0xa4>
            } else if (value == MP_OBJ_SENTINEL) {
   1653e:	2d08      	cmp	r5, #8
   16540:	d16d      	bne.n	1661e <uctypes_struct_subscr+0x146>
                mp_uint_t dummy = 0;
   16542:	aa02      	add	r2, sp, #8
   16544:	2300      	movs	r3, #0
   16546:	f842 3d04 	str.w	r3, [r2, #-4]!
                mp_uint_t size = uctypes_struct_size(t->items[2], self->flags, &dummy);
   1654a:	68c1      	ldr	r1, [r0, #12]
   1654c:	6938      	ldr	r0, [r7, #16]
   1654e:	f7ff fe59 	bl	16204 <uctypes_struct_size>
   16552:	4605      	mov	r5, r0
                mp_obj_uctypes_struct_t *o = m_new_obj(mp_obj_uctypes_struct_t);
   16554:	2010      	movs	r0, #16
   16556:	f7ea f9b1 	bl	8bc <m_malloc>
                o->base.type = &uctypes_struct_type;
   1655a:	4b34      	ldr	r3, [pc, #208]	; (1662c <uctypes_struct_subscr+0x154>)
   1655c:	6003      	str	r3, [r0, #0]
                o->desc = t->items[2];
   1655e:	693b      	ldr	r3, [r7, #16]
   16560:	6043      	str	r3, [r0, #4]
                o->addr = self->addr + size * index;
   16562:	68b3      	ldr	r3, [r6, #8]
   16564:	fb05 3404 	mla	r4, r5, r4, r3
   16568:	6084      	str	r4, [r0, #8]
                o->flags = self->flags;
   1656a:	68f3      	ldr	r3, [r6, #12]
   1656c:	60c3      	str	r3, [r0, #12]
   1656e:	e7d6      	b.n	1651e <uctypes_struct_subscr+0x46>
                nlr_raise(mp_obj_new_exception_msg(&mp_type_IndexError, "struct: index out of range"));
   16570:	492f      	ldr	r1, [pc, #188]	; (16630 <uctypes_struct_subscr+0x158>)
   16572:	4830      	ldr	r0, [pc, #192]	; (16634 <uctypes_struct_subscr+0x15c>)
   16574:	f7f6 fb1a 	bl	cbac <mp_obj_new_exception_msg>
   16578:	f7ea f982 	bl	880 <nlr_jump>
                if (self->flags == LAYOUT_NATIVE) {
   1657c:	68c2      	ldr	r2, [r0, #12]
   1657e:	2a02      	cmp	r2, #2
   16580:	d011      	beq.n	165a6 <uctypes_struct_subscr+0xce>
                    byte *p = self->addr + GET_SCALAR_SIZE(val_type) * index;
   16582:	6881      	ldr	r1, [r0, #8]
   16584:	0f5b      	lsrs	r3, r3, #29
   16586:	409c      	lsls	r4, r3
   16588:	440c      	add	r4, r1
                    if (value == MP_OBJ_SENTINEL) {
   1658a:	2d08      	cmp	r5, #8
   1658c:	d01b      	beq.n	165c6 <uctypes_struct_subscr+0xee>
   1658e:	9401      	str	r4, [sp, #4]
    char struct_type = big_endian ? '>' : '<';
   16590:	bb2a      	cbnz	r2, 165de <uctypes_struct_subscr+0x106>
   16592:	203c      	movs	r0, #60	; 0x3c
    mp_binary_set_val(struct_type, type2char[val_type], val, &p);
   16594:	ab01      	add	r3, sp, #4
   16596:	462a      	mov	r2, r5
   16598:	4927      	ldr	r1, [pc, #156]	; (16638 <uctypes_struct_subscr+0x160>)
   1659a:	f811 100c 	ldrb.w	r1, [r1, ip]
   1659e:	f7fc ff13 	bl	133c8 <mp_binary_set_val>
                        return value; // just !MP_OBJ_NULL
   165a2:	4628      	mov	r0, r5
   165a4:	e7bb      	b.n	1651e <uctypes_struct_subscr+0x46>
                    if (value == MP_OBJ_SENTINEL) {
   165a6:	2d08      	cmp	r5, #8
   165a8:	d007      	beq.n	165ba <uctypes_struct_subscr+0xe2>
                        set_aligned(val_type, self->addr, index, value);
   165aa:	462b      	mov	r3, r5
   165ac:	4622      	mov	r2, r4
   165ae:	6881      	ldr	r1, [r0, #8]
   165b0:	4660      	mov	r0, ip
   165b2:	f7ff fee5 	bl	16380 <set_aligned>
                        return value; // just !MP_OBJ_NULL
   165b6:	4628      	mov	r0, r5
   165b8:	e7b1      	b.n	1651e <uctypes_struct_subscr+0x46>
                        return get_aligned(val_type, self->addr, index);
   165ba:	4622      	mov	r2, r4
   165bc:	6881      	ldr	r1, [r0, #8]
   165be:	4660      	mov	r0, ip
   165c0:	f7ff ff30 	bl	16424 <get_aligned>
   165c4:	e7ab      	b.n	1651e <uctypes_struct_subscr+0x46>
   165c6:	9400      	str	r4, [sp, #0]
    char struct_type = big_endian ? '>' : '<';
   165c8:	b93a      	cbnz	r2, 165da <uctypes_struct_subscr+0x102>
   165ca:	203c      	movs	r0, #60	; 0x3c
    return mp_binary_get_val(struct_type, type2char[val_type], &p);
   165cc:	466a      	mov	r2, sp
   165ce:	4b1b      	ldr	r3, [pc, #108]	; (1663c <uctypes_struct_subscr+0x164>)
   165d0:	f813 100c 	ldrb.w	r1, [r3, ip]
   165d4:	f7fc fe87 	bl	132e6 <mp_binary_get_val>
                        return get_unaligned(val_type, p, self->flags);
   165d8:	e7a1      	b.n	1651e <uctypes_struct_subscr+0x46>
    char struct_type = big_endian ? '>' : '<';
   165da:	203e      	movs	r0, #62	; 0x3e
   165dc:	e7f6      	b.n	165cc <uctypes_struct_subscr+0xf4>
    char struct_type = big_endian ? '>' : '<';
   165de:	203e      	movs	r0, #62	; 0x3e
   165e0:	e7d8      	b.n	16594 <uctypes_struct_subscr+0xbc>
                mp_uint_t dummy = 0;
   165e2:	aa02      	add	r2, sp, #8
   165e4:	2300      	movs	r3, #0
   165e6:	f842 3d04 	str.w	r3, [r2, #-4]!
                mp_uint_t size = uctypes_struct_size(t->items[1], self->flags, &dummy);
   165ea:	68f1      	ldr	r1, [r6, #12]
   165ec:	f7ff fe0a 	bl	16204 <uctypes_struct_size>
   165f0:	4680      	mov	r8, r0
                mp_obj_uctypes_struct_t *o = m_new_obj(mp_obj_uctypes_struct_t);
   165f2:	2010      	movs	r0, #16
   165f4:	f7ea f962 	bl	8bc <m_malloc>
                o->base.type = &uctypes_struct_type;
   165f8:	4b0c      	ldr	r3, [pc, #48]	; (1662c <uctypes_struct_subscr+0x154>)
   165fa:	6003      	str	r3, [r0, #0]
                o->desc = t->items[1];
   165fc:	68fb      	ldr	r3, [r7, #12]
   165fe:	6043      	str	r3, [r0, #4]
                o->addr = p + size * index;
   16600:	fb08 5404 	mla	r4, r8, r4, r5
   16604:	6084      	str	r4, [r0, #8]
                o->flags = self->flags;
   16606:	68f3      	ldr	r3, [r6, #12]
   16608:	60c3      	str	r3, [r0, #12]
   1660a:	e788      	b.n	1651e <uctypes_struct_subscr+0x46>
        assert(0);
   1660c:	4b0c      	ldr	r3, [pc, #48]	; (16640 <uctypes_struct_subscr+0x168>)
   1660e:	4a0d      	ldr	r2, [pc, #52]	; (16644 <uctypes_struct_subscr+0x16c>)
   16610:	f240 2151 	movw	r1, #593	; 0x251
   16614:	480c      	ldr	r0, [pc, #48]	; (16648 <uctypes_struct_subscr+0x170>)
   16616:	f001 ffa1 	bl	1855c <__assert_func>
        return MP_OBJ_NULL; // op not supported
   1661a:	2000      	movs	r0, #0
}
   1661c:	4770      	bx	lr
                return MP_OBJ_NULL; // op not supported
   1661e:	2000      	movs	r0, #0
   16620:	e77d      	b.n	1651e <uctypes_struct_subscr+0x46>
   16622:	bf00      	nop
   16624:	00028844 	.word	0x00028844
   16628:	0002a370 	.word	0x0002a370
   1662c:	0002a3a4 	.word	0x0002a3a4
   16630:	0002a388 	.word	0x0002a388
   16634:	00026978 	.word	0x00026978
   16638:	0002a2a4 	.word	0x0002a2a4
   1663c:	0002a294 	.word	0x0002a294
   16640:	000252b4 	.word	0x000252b4
   16644:	0002a150 	.word	0x0002a150
   16648:	0002a2bc 	.word	0x0002a2bc

0001664c <uctypes_struct_attr_op>:
STATIC mp_obj_t uctypes_struct_attr_op(mp_obj_t self_in, qstr attr, mp_obj_t set_val) {
   1664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16650:	b083      	sub	sp, #12
   16652:	4606      	mov	r6, r0
    if (!MP_OBJ_IS_TYPE(self->desc, &mp_type_dict)) {
   16654:	6840      	ldr	r0, [r0, #4]
   16656:	f010 0f03 	tst.w	r0, #3
   1665a:	d15a      	bne.n	16712 <uctypes_struct_attr_op+0xc6>
   1665c:	4614      	mov	r4, r2
   1665e:	6802      	ldr	r2, [r0, #0]
   16660:	4b8e      	ldr	r3, [pc, #568]	; (1689c <uctypes_struct_attr_op+0x250>)
   16662:	429a      	cmp	r2, r3
   16664:	d155      	bne.n	16712 <uctypes_struct_attr_op+0xc6>
    mp_obj_t deref = mp_obj_dict_get(self->desc, MP_OBJ_NEW_QSTR(attr));
   16666:	0089      	lsls	r1, r1, #2
   16668:	f041 0102 	orr.w	r1, r1, #2
   1666c:	f7f6 f81a 	bl	c6a4 <mp_obj_dict_get>
   16670:	4605      	mov	r5, r0
    if (MP_OBJ_IS_SMALL_INT(deref)) {
   16672:	f010 0f01 	tst.w	r0, #1
   16676:	f000 80cf 	beq.w	16818 <uctypes_struct_attr_op+0x1cc>
        mp_int_t offset = MP_OBJ_SMALL_INT_VALUE(deref);
   1667a:	1043      	asrs	r3, r0, #1
   1667c:	0f07      	lsrs	r7, r0, #28
        offset &= VALUE_MASK(VAL_TYPE_BITS);
   1667e:	f023 4178 	bic.w	r1, r3, #4160749568	; 0xf8000000
        if (val_type <= INT64 || val_type == FLOAT32 || val_type == FLOAT64) {
   16682:	2f07      	cmp	r7, #7
   16684:	d948      	bls.n	16718 <uctypes_struct_attr_op+0xcc>
   16686:	2f0e      	cmp	r7, #14
   16688:	d046      	beq.n	16718 <uctypes_struct_attr_op+0xcc>
   1668a:	2f0f      	cmp	r7, #15
   1668c:	d044      	beq.n	16718 <uctypes_struct_attr_op+0xcc>
        } else if (val_type >= BFUINT8 && val_type <= BFINT32) {
   1668e:	f1a7 0208 	sub.w	r2, r7, #8
   16692:	2a05      	cmp	r2, #5
   16694:	f200 80b9 	bhi.w	1680a <uctypes_struct_attr_op+0x1be>
            uint bit_offset = (offset >> 17) & 31;
   16698:	f3c1 4944 	ubfx	r9, r1, #17, #5
            uint bit_len = (offset >> 22) & 31;
   1669c:	ea4f 5a91 	mov.w	sl, r1, lsr #22
            offset &= (1 << 17) - 1;
   166a0:	f3c3 0810 	ubfx	r8, r3, #0, #17
            if (self->flags == LAYOUT_NATIVE) {
   166a4:	68f2      	ldr	r2, [r6, #12]
   166a6:	2a02      	cmp	r2, #2
   166a8:	d067      	beq.n	1677a <uctypes_struct_attr_op+0x12e>
                val = mp_binary_get_int(GET_SCALAR_SIZE(val_type & 7), val_type & 1, self->flags, self->addr + offset);
   166aa:	f3c0 7041 	ubfx	r0, r0, #29, #2
   166ae:	f007 0101 	and.w	r1, r7, #1
   166b2:	68b3      	ldr	r3, [r6, #8]
   166b4:	4443      	add	r3, r8
   166b6:	3200      	adds	r2, #0
   166b8:	bf18      	it	ne
   166ba:	2201      	movne	r2, #1
   166bc:	f04f 0c01 	mov.w	ip, #1
   166c0:	fa0c f000 	lsl.w	r0, ip, r0
   166c4:	f7fc fddb 	bl	1327e <mp_binary_get_int>
   166c8:	4683      	mov	fp, r0
            if (set_val == MP_OBJ_NULL) {
   166ca:	2c00      	cmp	r4, #0
   166cc:	d06d      	beq.n	167aa <uctypes_struct_attr_op+0x15e>
                mp_uint_t set_val_int = (mp_uint_t)mp_obj_get_int(set_val);
   166ce:	4620      	mov	r0, r4
   166d0:	f7f4 fb7c 	bl	adcc <mp_obj_get_int>
                mp_uint_t mask = (1 << bit_len) - 1;
   166d4:	2101      	movs	r1, #1
   166d6:	fa01 f10a 	lsl.w	r1, r1, sl
   166da:	3901      	subs	r1, #1
                set_val_int &= mask;
   166dc:	ea00 0301 	and.w	r3, r0, r1
                set_val_int <<= bit_offset;
   166e0:	fa03 f309 	lsl.w	r3, r3, r9
                mask <<= bit_offset;
   166e4:	fa01 f909 	lsl.w	r9, r1, r9
                val = (val & ~mask) | set_val_int;
   166e8:	ea2b 0909 	bic.w	r9, fp, r9
   166ec:	ea49 0303 	orr.w	r3, r9, r3
                if (self->flags == LAYOUT_NATIVE) {
   166f0:	68f1      	ldr	r1, [r6, #12]
   166f2:	2902      	cmp	r1, #2
   166f4:	d06e      	beq.n	167d4 <uctypes_struct_attr_op+0x188>
                    mp_binary_set_int(GET_SCALAR_SIZE(val_type & 7), self->flags == LAYOUT_BIG_ENDIAN,
   166f6:	f3c5 7541 	ubfx	r5, r5, #29, #2
                        self->addr + offset, val);
   166fa:	68b2      	ldr	r2, [r6, #8]
                    mp_binary_set_int(GET_SCALAR_SIZE(val_type & 7), self->flags == LAYOUT_BIG_ENDIAN,
   166fc:	4442      	add	r2, r8
   166fe:	2901      	cmp	r1, #1
   16700:	bf14      	ite	ne
   16702:	2100      	movne	r1, #0
   16704:	2101      	moveq	r1, #1
   16706:	2001      	movs	r0, #1
   16708:	40a8      	lsls	r0, r5
   1670a:	f7fc fe44 	bl	13396 <mp_binary_set_int>
                return set_val; // just !MP_OBJ_NULL
   1670e:	4620      	mov	r0, r4
   16710:	e0b4      	b.n	1687c <uctypes_struct_attr_op+0x230>
            mp_raise_TypeError("struct: no fields");
   16712:	4863      	ldr	r0, [pc, #396]	; (168a0 <uctypes_struct_attr_op+0x254>)
   16714:	f7f3 ffc8 	bl	a6a8 <mp_raise_TypeError>
            if (self->flags == LAYOUT_NATIVE) {
   16718:	68f3      	ldr	r3, [r6, #12]
   1671a:	2b02      	cmp	r3, #2
   1671c:	d00d      	beq.n	1673a <uctypes_struct_attr_op+0xee>
                if (set_val == MP_OBJ_NULL) {
   1671e:	b1ec      	cbz	r4, 1675c <uctypes_struct_attr_op+0x110>
                    set_unaligned(val_type, self->addr + offset, self->flags, set_val);
   16720:	68b2      	ldr	r2, [r6, #8]
   16722:	4411      	add	r1, r2
   16724:	9101      	str	r1, [sp, #4]
    char struct_type = big_endian ? '>' : '<';
   16726:	bb33      	cbnz	r3, 16776 <uctypes_struct_attr_op+0x12a>
   16728:	203c      	movs	r0, #60	; 0x3c
    mp_binary_set_val(struct_type, type2char[val_type], val, &p);
   1672a:	ab01      	add	r3, sp, #4
   1672c:	4622      	mov	r2, r4
   1672e:	495d      	ldr	r1, [pc, #372]	; (168a4 <uctypes_struct_attr_op+0x258>)
   16730:	5dc9      	ldrb	r1, [r1, r7]
   16732:	f7fc fe49 	bl	133c8 <mp_binary_set_val>
                    return set_val; // just !MP_OBJ_NULL
   16736:	4620      	mov	r0, r4
   16738:	e0a0      	b.n	1687c <uctypes_struct_attr_op+0x230>
                if (set_val == MP_OBJ_NULL) {
   1673a:	b144      	cbz	r4, 1674e <uctypes_struct_attr_op+0x102>
                    set_aligned(val_type, self->addr + offset, 0, set_val);
   1673c:	68b0      	ldr	r0, [r6, #8]
   1673e:	4623      	mov	r3, r4
   16740:	2200      	movs	r2, #0
   16742:	4401      	add	r1, r0
   16744:	4638      	mov	r0, r7
   16746:	f7ff fe1b 	bl	16380 <set_aligned>
                    return set_val; // just !MP_OBJ_NULL
   1674a:	4620      	mov	r0, r4
   1674c:	e096      	b.n	1687c <uctypes_struct_attr_op+0x230>
                    return get_aligned(val_type, self->addr + offset, 0);
   1674e:	68b3      	ldr	r3, [r6, #8]
   16750:	2200      	movs	r2, #0
   16752:	4419      	add	r1, r3
   16754:	4638      	mov	r0, r7
   16756:	f7ff fe65 	bl	16424 <get_aligned>
   1675a:	e08f      	b.n	1687c <uctypes_struct_attr_op+0x230>
                    return get_unaligned(val_type, self->addr + offset, self->flags);
   1675c:	68b2      	ldr	r2, [r6, #8]
   1675e:	4411      	add	r1, r2
   16760:	9100      	str	r1, [sp, #0]
    char struct_type = big_endian ? '>' : '<';
   16762:	b933      	cbnz	r3, 16772 <uctypes_struct_attr_op+0x126>
   16764:	203c      	movs	r0, #60	; 0x3c
    return mp_binary_get_val(struct_type, type2char[val_type], &p);
   16766:	466a      	mov	r2, sp
   16768:	4b4f      	ldr	r3, [pc, #316]	; (168a8 <uctypes_struct_attr_op+0x25c>)
   1676a:	5dd9      	ldrb	r1, [r3, r7]
   1676c:	f7fc fdbb 	bl	132e6 <mp_binary_get_val>
                    return get_unaligned(val_type, self->addr + offset, self->flags);
   16770:	e084      	b.n	1687c <uctypes_struct_attr_op+0x230>
    char struct_type = big_endian ? '>' : '<';
   16772:	203e      	movs	r0, #62	; 0x3e
   16774:	e7f7      	b.n	16766 <uctypes_struct_attr_op+0x11a>
    char struct_type = big_endian ? '>' : '<';
   16776:	203e      	movs	r0, #62	; 0x3e
   16778:	e7d7      	b.n	1672a <uctypes_struct_attr_op+0xde>
                val = get_aligned_basic(val_type & 6, self->addr + offset);
   1677a:	f007 0306 	and.w	r3, r7, #6
   1677e:	68b2      	ldr	r2, [r6, #8]
    switch (val_type) {
   16780:	2b02      	cmp	r3, #2
   16782:	d005      	beq.n	16790 <uctypes_struct_attr_op+0x144>
   16784:	2b04      	cmp	r3, #4
   16786:	d006      	beq.n	16796 <uctypes_struct_attr_op+0x14a>
   16788:	b943      	cbnz	r3, 1679c <uctypes_struct_attr_op+0x150>
            return *(uint8_t*)p;
   1678a:	f812 b008 	ldrb.w	fp, [r2, r8]
   1678e:	e79c      	b.n	166ca <uctypes_struct_attr_op+0x7e>
            return *(uint16_t*)p;
   16790:	f832 b008 	ldrh.w	fp, [r2, r8]
   16794:	e799      	b.n	166ca <uctypes_struct_attr_op+0x7e>
            return *(uint32_t*)p;
   16796:	f852 b008 	ldr.w	fp, [r2, r8]
   1679a:	e796      	b.n	166ca <uctypes_struct_attr_op+0x7e>
    assert(0);
   1679c:	4b43      	ldr	r3, [pc, #268]	; (168ac <uctypes_struct_attr_op+0x260>)
   1679e:	4a44      	ldr	r2, [pc, #272]	; (168b0 <uctypes_struct_attr_op+0x264>)
   167a0:	f44f 7198 	mov.w	r1, #304	; 0x130
   167a4:	4843      	ldr	r0, [pc, #268]	; (168b4 <uctypes_struct_attr_op+0x268>)
   167a6:	f001 fed9 	bl	1855c <__assert_func>
                val >>= bit_offset;
   167aa:	fa2b f909 	lsr.w	r9, fp, r9
                val &= (1 << bit_len) - 1;
   167ae:	2001      	movs	r0, #1
   167b0:	fa00 f00a 	lsl.w	r0, r0, sl
   167b4:	3801      	subs	r0, #1
   167b6:	ea00 0009 	and.w	r0, r0, r9
                assert((val_type & 1) == 0);
   167ba:	f017 0f01 	tst.w	r7, #1
   167be:	d102      	bne.n	167c6 <uctypes_struct_attr_op+0x17a>
                return mp_obj_new_int(val);
   167c0:	f7f7 fbbb 	bl	df3a <mp_obj_new_int>
   167c4:	e05a      	b.n	1687c <uctypes_struct_attr_op+0x230>
                assert((val_type & 1) == 0);
   167c6:	4b3c      	ldr	r3, [pc, #240]	; (168b8 <uctypes_struct_attr_op+0x26c>)
   167c8:	4a3c      	ldr	r2, [pc, #240]	; (168bc <uctypes_struct_attr_op+0x270>)
   167ca:	f44f 71da 	mov.w	r1, #436	; 0x1b4
   167ce:	4839      	ldr	r0, [pc, #228]	; (168b4 <uctypes_struct_attr_op+0x268>)
   167d0:	f001 fec4 	bl	1855c <__assert_func>
                    set_aligned_basic(val_type & 6, self->addr + offset, val);
   167d4:	f007 0706 	and.w	r7, r7, #6
   167d8:	68b2      	ldr	r2, [r6, #8]
    switch (val_type) {
   167da:	2f02      	cmp	r7, #2
   167dc:	d006      	beq.n	167ec <uctypes_struct_attr_op+0x1a0>
   167de:	2f04      	cmp	r7, #4
   167e0:	d008      	beq.n	167f4 <uctypes_struct_attr_op+0x1a8>
   167e2:	b95f      	cbnz	r7, 167fc <uctypes_struct_attr_op+0x1b0>
            *(uint8_t*)p = (uint8_t)v; return;
   167e4:	f802 3008 	strb.w	r3, [r2, r8]
                return set_val; // just !MP_OBJ_NULL
   167e8:	4620      	mov	r0, r4
   167ea:	e047      	b.n	1687c <uctypes_struct_attr_op+0x230>
            *(uint16_t*)p = (uint16_t)v; return;
   167ec:	f822 3008 	strh.w	r3, [r2, r8]
                return set_val; // just !MP_OBJ_NULL
   167f0:	4620      	mov	r0, r4
   167f2:	e043      	b.n	1687c <uctypes_struct_attr_op+0x230>
            *(uint32_t*)p = (uint32_t)v; return;
   167f4:	f842 3008 	str.w	r3, [r2, r8]
                return set_val; // just !MP_OBJ_NULL
   167f8:	4620      	mov	r0, r4
   167fa:	e03f      	b.n	1687c <uctypes_struct_attr_op+0x230>
    assert(0);
   167fc:	4b2b      	ldr	r3, [pc, #172]	; (168ac <uctypes_struct_attr_op+0x260>)
   167fe:	4a30      	ldr	r2, [pc, #192]	; (168c0 <uctypes_struct_attr_op+0x274>)
   16800:	f240 113d 	movw	r1, #317	; 0x13d
   16804:	482b      	ldr	r0, [pc, #172]	; (168b4 <uctypes_struct_attr_op+0x268>)
   16806:	f001 fea9 	bl	1855c <__assert_func>
        assert(0);
   1680a:	4b28      	ldr	r3, [pc, #160]	; (168ac <uctypes_struct_attr_op+0x260>)
   1680c:	4a2b      	ldr	r2, [pc, #172]	; (168bc <uctypes_struct_attr_op+0x270>)
   1680e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   16812:	4828      	ldr	r0, [pc, #160]	; (168b4 <uctypes_struct_attr_op+0x268>)
   16814:	f001 fea2 	bl	1855c <__assert_func>
    if (!MP_OBJ_IS_TYPE(deref, &mp_type_tuple)) {
   16818:	f010 0f03 	tst.w	r0, #3
   1681c:	d10f      	bne.n	1683e <uctypes_struct_attr_op+0x1f2>
   1681e:	6802      	ldr	r2, [r0, #0]
   16820:	4b28      	ldr	r3, [pc, #160]	; (168c4 <uctypes_struct_attr_op+0x278>)
   16822:	429a      	cmp	r2, r3
   16824:	d10b      	bne.n	1683e <uctypes_struct_attr_op+0x1f2>
    if (set_val != MP_OBJ_NULL) {
   16826:	b964      	cbnz	r4, 16842 <uctypes_struct_attr_op+0x1f6>
    mp_int_t offset = MP_OBJ_SMALL_INT_VALUE(sub->items[0]);
   16828:	6883      	ldr	r3, [r0, #8]
    offset &= VALUE_MASK(AGG_TYPE_BITS);
   1682a:	f3c3 045c 	ubfx	r4, r3, #1, #29
    switch (agg_type) {
   1682e:	0f9b      	lsrs	r3, r3, #30
   16830:	2b01      	cmp	r3, #1
   16832:	d018      	beq.n	16866 <uctypes_struct_attr_op+0x21a>
   16834:	b13b      	cbz	r3, 16846 <uctypes_struct_attr_op+0x1fa>
   16836:	2b02      	cmp	r3, #2
   16838:	d012      	beq.n	16860 <uctypes_struct_attr_op+0x214>
    return MP_OBJ_NULL;
   1683a:	2000      	movs	r0, #0
   1683c:	e01e      	b.n	1687c <uctypes_struct_attr_op+0x230>
        syntax_error();
   1683e:	f7ff fca7 	bl	16190 <syntax_error>
        syntax_error();
   16842:	f7ff fca5 	bl	16190 <syntax_error>
            mp_obj_uctypes_struct_t *o = m_new_obj(mp_obj_uctypes_struct_t);
   16846:	2010      	movs	r0, #16
   16848:	f7ea f838 	bl	8bc <m_malloc>
            o->base.type = &uctypes_struct_type;
   1684c:	4b1e      	ldr	r3, [pc, #120]	; (168c8 <uctypes_struct_attr_op+0x27c>)
   1684e:	6003      	str	r3, [r0, #0]
            o->desc = sub->items[1];
   16850:	68eb      	ldr	r3, [r5, #12]
   16852:	6043      	str	r3, [r0, #4]
            o->addr = self->addr + offset;
   16854:	68b3      	ldr	r3, [r6, #8]
   16856:	4423      	add	r3, r4
   16858:	6083      	str	r3, [r0, #8]
            o->flags = self->flags;
   1685a:	68f3      	ldr	r3, [r6, #12]
   1685c:	60c3      	str	r3, [r0, #12]
            return MP_OBJ_FROM_PTR(o);
   1685e:	e00d      	b.n	1687c <uctypes_struct_attr_op+0x230>
            if (IS_SCALAR_ARRAY(sub) && IS_SCALAR_ARRAY_OF_BYTES(sub)) {
   16860:	6843      	ldr	r3, [r0, #4]
   16862:	2b02      	cmp	r3, #2
   16864:	d00d      	beq.n	16882 <uctypes_struct_attr_op+0x236>
            mp_obj_uctypes_struct_t *o = m_new_obj(mp_obj_uctypes_struct_t);
   16866:	2010      	movs	r0, #16
   16868:	f7ea f828 	bl	8bc <m_malloc>
            o->base.type = &uctypes_struct_type;
   1686c:	4b16      	ldr	r3, [pc, #88]	; (168c8 <uctypes_struct_attr_op+0x27c>)
   1686e:	6003      	str	r3, [r0, #0]
            o->desc = MP_OBJ_FROM_PTR(sub);
   16870:	6045      	str	r5, [r0, #4]
            o->addr = self->addr + offset;
   16872:	68b3      	ldr	r3, [r6, #8]
   16874:	4423      	add	r3, r4
   16876:	6083      	str	r3, [r0, #8]
            o->flags = self->flags;
   16878:	68f3      	ldr	r3, [r6, #12]
   1687a:	60c3      	str	r3, [r0, #12]
}
   1687c:	b003      	add	sp, #12
   1687e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (IS_SCALAR_ARRAY(sub) && IS_SCALAR_ARRAY_OF_BYTES(sub)) {
   16882:	68c3      	ldr	r3, [r0, #12]
   16884:	0f1b      	lsrs	r3, r3, #28
   16886:	d1ee      	bne.n	16866 <uctypes_struct_attr_op+0x21a>
                return mp_obj_new_bytearray_by_ref(uctypes_struct_agg_size(sub, self->flags, &dummy), self->addr + offset);
   16888:	aa01      	add	r2, sp, #4
   1688a:	68f1      	ldr	r1, [r6, #12]
   1688c:	f7ff fc86 	bl	1619c <uctypes_struct_agg_size>
   16890:	68b1      	ldr	r1, [r6, #8]
   16892:	4421      	add	r1, r4
   16894:	f7f5 f806 	bl	b8a4 <mp_obj_new_bytearray_by_ref>
   16898:	e7f0      	b.n	1687c <uctypes_struct_attr_op+0x230>
   1689a:	bf00      	nop
   1689c:	000265d0 	.word	0x000265d0
   168a0:	0002a2d8 	.word	0x0002a2d8
   168a4:	0002a2a4 	.word	0x0002a2a4
   168a8:	0002a294 	.word	0x0002a294
   168ac:	000252b4 	.word	0x000252b4
   168b0:	0002a0f8 	.word	0x0002a0f8
   168b4:	0002a2bc 	.word	0x0002a2bc
   168b8:	0002a2ec 	.word	0x0002a2ec
   168bc:	0002a138 	.word	0x0002a138
   168c0:	0002a10c 	.word	0x0002a10c
   168c4:	00028844 	.word	0x00028844
   168c8:	0002a3a4 	.word	0x0002a3a4

000168cc <uctypes_struct_attr>:
STATIC void uctypes_struct_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   168cc:	b510      	push	{r4, lr}
   168ce:	4614      	mov	r4, r2
    if (dest[0] == MP_OBJ_NULL) {
   168d0:	6813      	ldr	r3, [r2, #0]
   168d2:	b133      	cbz	r3, 168e2 <uctypes_struct_attr+0x16>
        if (uctypes_struct_attr_op(self_in, attr, dest[1]) != MP_OBJ_NULL) {
   168d4:	6852      	ldr	r2, [r2, #4]
   168d6:	f7ff feb9 	bl	1664c <uctypes_struct_attr_op>
   168da:	b108      	cbz	r0, 168e0 <uctypes_struct_attr+0x14>
            dest[0] = MP_OBJ_NULL; // indicate success
   168dc:	2300      	movs	r3, #0
   168de:	6023      	str	r3, [r4, #0]
}
   168e0:	bd10      	pop	{r4, pc}
        mp_obj_t val = uctypes_struct_attr_op(self_in, attr, MP_OBJ_NULL);
   168e2:	2200      	movs	r2, #0
   168e4:	f7ff feb2 	bl	1664c <uctypes_struct_attr_op>
        dest[0] = val;
   168e8:	6020      	str	r0, [r4, #0]
   168ea:	e7f9      	b.n	168e0 <uctypes_struct_attr+0x14>

000168ec <uctypes_struct_make_new>:
STATIC mp_obj_t uctypes_struct_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   168ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   168ee:	b083      	sub	sp, #12
   168f0:	4607      	mov	r7, r0
   168f2:	460e      	mov	r6, r1
   168f4:	4611      	mov	r1, r2
   168f6:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 2, 3, false);
   168f8:	2300      	movs	r3, #0
   168fa:	9300      	str	r3, [sp, #0]
   168fc:	2303      	movs	r3, #3
   168fe:	2202      	movs	r2, #2
   16900:	4630      	mov	r0, r6
   16902:	f7f3 ff09 	bl	a718 <mp_arg_check_num>
    mp_obj_uctypes_struct_t *o = m_new_obj(mp_obj_uctypes_struct_t);
   16906:	2010      	movs	r0, #16
   16908:	f7e9 ffd8 	bl	8bc <m_malloc>
   1690c:	4604      	mov	r4, r0
    o->base.type = type;
   1690e:	6007      	str	r7, [r0, #0]
    o->addr = (void*)(uintptr_t)mp_obj_int_get_truncated(args[0]);
   16910:	6828      	ldr	r0, [r5, #0]
   16912:	f7f7 fb54 	bl	dfbe <mp_obj_int_get_truncated>
   16916:	60a0      	str	r0, [r4, #8]
    o->desc = args[1];
   16918:	686b      	ldr	r3, [r5, #4]
   1691a:	6063      	str	r3, [r4, #4]
    o->flags = LAYOUT_NATIVE;
   1691c:	2302      	movs	r3, #2
   1691e:	60e3      	str	r3, [r4, #12]
    if (n_args == 3) {
   16920:	2e03      	cmp	r6, #3
   16922:	d002      	beq.n	1692a <uctypes_struct_make_new+0x3e>
}
   16924:	4620      	mov	r0, r4
   16926:	b003      	add	sp, #12
   16928:	bdf0      	pop	{r4, r5, r6, r7, pc}
        o->flags = mp_obj_get_int(args[2]);
   1692a:	68a8      	ldr	r0, [r5, #8]
   1692c:	f7f4 fa4e 	bl	adcc <mp_obj_get_int>
   16930:	60e0      	str	r0, [r4, #12]
    return MP_OBJ_FROM_PTR(o);
   16932:	e7f7      	b.n	16924 <uctypes_struct_make_new+0x38>

00016934 <uctypes_struct_print>:
STATIC void uctypes_struct_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16934:	b538      	push	{r3, r4, r5, lr}
    if (MP_OBJ_IS_TYPE(self->desc, &mp_type_dict)) {
   16936:	684b      	ldr	r3, [r1, #4]
   16938:	f013 0203 	ands.w	r2, r3, #3
   1693c:	d103      	bne.n	16946 <uctypes_struct_print+0x12>
   1693e:	681d      	ldr	r5, [r3, #0]
   16940:	4c0e      	ldr	r4, [pc, #56]	; (1697c <uctypes_struct_print+0x48>)
   16942:	42a5      	cmp	r5, r4
   16944:	d010      	beq.n	16968 <uctypes_struct_print+0x34>
    } else if (MP_OBJ_IS_TYPE(self->desc, &mp_type_tuple)) {
   16946:	b98a      	cbnz	r2, 1696c <uctypes_struct_print+0x38>
   16948:	681c      	ldr	r4, [r3, #0]
   1694a:	4a0d      	ldr	r2, [pc, #52]	; (16980 <uctypes_struct_print+0x4c>)
   1694c:	4294      	cmp	r4, r2
   1694e:	d001      	beq.n	16954 <uctypes_struct_print+0x20>
        typen = "ERROR";
   16950:	4a0c      	ldr	r2, [pc, #48]	; (16984 <uctypes_struct_print+0x50>)
   16952:	e00c      	b.n	1696e <uctypes_struct_print+0x3a>
        mp_int_t offset = MP_OBJ_SMALL_INT_VALUE(t->items[0]);
   16954:	689b      	ldr	r3, [r3, #8]
        switch (agg_type) {
   16956:	0f9b      	lsrs	r3, r3, #30
   16958:	2b01      	cmp	r3, #1
   1695a:	d00d      	beq.n	16978 <uctypes_struct_print+0x44>
   1695c:	2b02      	cmp	r3, #2
   1695e:	d001      	beq.n	16964 <uctypes_struct_print+0x30>
    const char *typen = "unk";
   16960:	4a09      	ldr	r2, [pc, #36]	; (16988 <uctypes_struct_print+0x54>)
   16962:	e004      	b.n	1696e <uctypes_struct_print+0x3a>
            case ARRAY: typen = "ARRAY"; break;
   16964:	4a09      	ldr	r2, [pc, #36]	; (1698c <uctypes_struct_print+0x58>)
   16966:	e002      	b.n	1696e <uctypes_struct_print+0x3a>
        typen = "STRUCT";
   16968:	4a09      	ldr	r2, [pc, #36]	; (16990 <uctypes_struct_print+0x5c>)
   1696a:	e000      	b.n	1696e <uctypes_struct_print+0x3a>
        typen = "ERROR";
   1696c:	4a05      	ldr	r2, [pc, #20]	; (16984 <uctypes_struct_print+0x50>)
    mp_printf(print, "<struct %s %p>", typen, self->addr);
   1696e:	688b      	ldr	r3, [r1, #8]
   16970:	4908      	ldr	r1, [pc, #32]	; (16994 <uctypes_struct_print+0x60>)
   16972:	f7eb fb7b 	bl	206c <mp_printf>
}
   16976:	bd38      	pop	{r3, r4, r5, pc}
            case PTR: typen = "PTR"; break;
   16978:	4a07      	ldr	r2, [pc, #28]	; (16998 <uctypes_struct_print+0x64>)
   1697a:	e7f8      	b.n	1696e <uctypes_struct_print+0x3a>
   1697c:	000265d0 	.word	0x000265d0
   16980:	00028844 	.word	0x00028844
   16984:	0002a31c 	.word	0x0002a31c
   16988:	0002a324 	.word	0x0002a324
   1698c:	0002a328 	.word	0x0002a328
   16990:	0002a310 	.word	0x0002a310
   16994:	0002a330 	.word	0x0002a330
   16998:	0002a318 	.word	0x0002a318

0001699c <get_heap>:

#if MICROPY_PY_UHEAPQ

// the algorithm here is modelled on CPython's heapq.py

STATIC mp_obj_list_t *get_heap(mp_obj_t heap_in) {
   1699c:	b508      	push	{r3, lr}
    if (!MP_OBJ_IS_TYPE(heap_in, &mp_type_list)) {
   1699e:	f010 0f03 	tst.w	r0, #3
   169a2:	d104      	bne.n	169ae <get_heap+0x12>
   169a4:	6802      	ldr	r2, [r0, #0]
   169a6:	4b03      	ldr	r3, [pc, #12]	; (169b4 <get_heap+0x18>)
   169a8:	429a      	cmp	r2, r3
   169aa:	d100      	bne.n	169ae <get_heap+0x12>
        mp_raise_TypeError("heap must be a list");
    }
    return MP_OBJ_TO_PTR(heap_in);
}
   169ac:	bd08      	pop	{r3, pc}
        mp_raise_TypeError("heap must be a list");
   169ae:	4802      	ldr	r0, [pc, #8]	; (169b8 <get_heap+0x1c>)
   169b0:	f7f3 fe7a 	bl	a6a8 <mp_raise_TypeError>
   169b4:	00027890 	.word	0x00027890
   169b8:	0002a3e0 	.word	0x0002a3e0

000169bc <heap_siftdown>:

STATIC void heap_siftdown(mp_obj_list_t *heap, mp_uint_t start_pos, mp_uint_t pos) {
   169bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   169c0:	4607      	mov	r7, r0
   169c2:	4689      	mov	r9, r1
   169c4:	4615      	mov	r5, r2
    mp_obj_t item = heap->items[pos];
   169c6:	68c3      	ldr	r3, [r0, #12]
   169c8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    while (pos > start_pos) {
   169cc:	454d      	cmp	r5, r9
   169ce:	d911      	bls.n	169f4 <heap_siftdown+0x38>
        mp_uint_t parent_pos = (pos - 1) >> 1;
   169d0:	1e6c      	subs	r4, r5, #1
   169d2:	0864      	lsrs	r4, r4, #1
        mp_obj_t parent = heap->items[parent_pos];
   169d4:	68fb      	ldr	r3, [r7, #12]
   169d6:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
        if (mp_binary_op(MP_BINARY_OP_LESS, item, parent) == mp_const_true) {
   169da:	4632      	mov	r2, r6
   169dc:	4641      	mov	r1, r8
   169de:	2000      	movs	r0, #0
   169e0:	f7f3 fc6a 	bl	a2b8 <mp_binary_op>
   169e4:	4b06      	ldr	r3, [pc, #24]	; (16a00 <heap_siftdown+0x44>)
   169e6:	4283      	cmp	r3, r0
   169e8:	d104      	bne.n	169f4 <heap_siftdown+0x38>
            heap->items[pos] = parent;
   169ea:	68fb      	ldr	r3, [r7, #12]
   169ec:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
            pos = parent_pos;
   169f0:	4625      	mov	r5, r4
   169f2:	e7eb      	b.n	169cc <heap_siftdown+0x10>
        } else {
            break;
        }
    }
    heap->items[pos] = item;
   169f4:	68fb      	ldr	r3, [r7, #12]
   169f6:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
}
   169fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   169fe:	bf00      	nop
   16a00:	00025f4c 	.word	0x00025f4c

00016a04 <heap_siftup>:

STATIC void heap_siftup(mp_obj_list_t *heap, mp_uint_t pos) {
   16a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a08:	4680      	mov	r8, r0
   16a0a:	4689      	mov	r9, r1
    mp_uint_t start_pos = pos;
    mp_uint_t end_pos = heap->len;
   16a0c:	6887      	ldr	r7, [r0, #8]
    mp_obj_t item = heap->items[pos];
   16a0e:	68c3      	ldr	r3, [r0, #12]
   16a10:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
    for (mp_uint_t child_pos = 2 * pos + 1; child_pos < end_pos; child_pos = 2 * pos + 1) {
   16a14:	004c      	lsls	r4, r1, #1
   16a16:	3401      	adds	r4, #1
   16a18:	460d      	mov	r5, r1
   16a1a:	e008      	b.n	16a2e <heap_siftup+0x2a>
        // choose right child if it's <= left child
        if (child_pos + 1 < end_pos && mp_binary_op(MP_BINARY_OP_LESS, heap->items[child_pos], heap->items[child_pos + 1]) == mp_const_false) {
            child_pos += 1;
        }
        // bubble up the smaller child
        heap->items[pos] = heap->items[child_pos];
   16a1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   16a20:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   16a24:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    for (mp_uint_t child_pos = 2 * pos + 1; child_pos < end_pos; child_pos = 2 * pos + 1) {
   16a28:	0063      	lsls	r3, r4, #1
        pos = child_pos;
   16a2a:	4625      	mov	r5, r4
    for (mp_uint_t child_pos = 2 * pos + 1; child_pos < end_pos; child_pos = 2 * pos + 1) {
   16a2c:	1c5c      	adds	r4, r3, #1
   16a2e:	42bc      	cmp	r4, r7
   16a30:	d210      	bcs.n	16a54 <heap_siftup+0x50>
        if (child_pos + 1 < end_pos && mp_binary_op(MP_BINARY_OP_LESS, heap->items[child_pos], heap->items[child_pos + 1]) == mp_const_false) {
   16a32:	1c66      	adds	r6, r4, #1
   16a34:	42be      	cmp	r6, r7
   16a36:	d2f1      	bcs.n	16a1c <heap_siftup+0x18>
   16a38:	f8d8 300c 	ldr.w	r3, [r8, #12]
   16a3c:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
   16a40:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   16a44:	2000      	movs	r0, #0
   16a46:	f7f3 fc37 	bl	a2b8 <mp_binary_op>
   16a4a:	4b08      	ldr	r3, [pc, #32]	; (16a6c <heap_siftup+0x68>)
   16a4c:	4283      	cmp	r3, r0
   16a4e:	d1e5      	bne.n	16a1c <heap_siftup+0x18>
            child_pos += 1;
   16a50:	4634      	mov	r4, r6
   16a52:	e7e3      	b.n	16a1c <heap_siftup+0x18>
    }
    heap->items[pos] = item;
   16a54:	f8d8 300c 	ldr.w	r3, [r8, #12]
   16a58:	f843 a025 	str.w	sl, [r3, r5, lsl #2]
    heap_siftdown(heap, start_pos, pos);
   16a5c:	462a      	mov	r2, r5
   16a5e:	4649      	mov	r1, r9
   16a60:	4640      	mov	r0, r8
   16a62:	f7ff ffab 	bl	169bc <heap_siftdown>
}
   16a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16a6a:	bf00      	nop
   16a6c:	00025f44 	.word	0x00025f44

00016a70 <mod_uheapq_heapify>:
    }
    return item;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(mod_uheapq_heappop_obj, mod_uheapq_heappop);

STATIC mp_obj_t mod_uheapq_heapify(mp_obj_t heap_in) {
   16a70:	b538      	push	{r3, r4, r5, lr}
    mp_obj_list_t *heap = get_heap(heap_in);
   16a72:	f7ff ff93 	bl	1699c <get_heap>
   16a76:	4605      	mov	r5, r0
    for (mp_uint_t i = heap->len / 2; i > 0;) {
   16a78:	6884      	ldr	r4, [r0, #8]
   16a7a:	0864      	lsrs	r4, r4, #1
   16a7c:	e004      	b.n	16a88 <mod_uheapq_heapify+0x18>
        heap_siftup(heap, --i);
   16a7e:	3c01      	subs	r4, #1
   16a80:	4621      	mov	r1, r4
   16a82:	4628      	mov	r0, r5
   16a84:	f7ff ffbe 	bl	16a04 <heap_siftup>
    for (mp_uint_t i = heap->len / 2; i > 0;) {
   16a88:	2c00      	cmp	r4, #0
   16a8a:	d1f8      	bne.n	16a7e <mod_uheapq_heapify+0xe>
    }
    return mp_const_none;
}
   16a8c:	4800      	ldr	r0, [pc, #0]	; (16a90 <mod_uheapq_heapify+0x20>)
   16a8e:	bd38      	pop	{r3, r4, r5, pc}
   16a90:	00027b40 	.word	0x00027b40

00016a94 <mod_uheapq_heappop>:
STATIC mp_obj_t mod_uheapq_heappop(mp_obj_t heap_in) {
   16a94:	b510      	push	{r4, lr}
    mp_obj_list_t *heap = get_heap(heap_in);
   16a96:	f7ff ff81 	bl	1699c <get_heap>
    if (heap->len == 0) {
   16a9a:	6883      	ldr	r3, [r0, #8]
   16a9c:	b17b      	cbz	r3, 16abe <mod_uheapq_heappop+0x2a>
    mp_obj_t item = heap->items[0];
   16a9e:	68c2      	ldr	r2, [r0, #12]
   16aa0:	6814      	ldr	r4, [r2, #0]
    heap->len -= 1;
   16aa2:	3b01      	subs	r3, #1
   16aa4:	6083      	str	r3, [r0, #8]
    heap->items[0] = heap->items[heap->len];
   16aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16aaa:	6013      	str	r3, [r2, #0]
    heap->items[heap->len] = MP_OBJ_NULL; // so we don't retain a pointer
   16aac:	68c3      	ldr	r3, [r0, #12]
   16aae:	6882      	ldr	r2, [r0, #8]
   16ab0:	2100      	movs	r1, #0
   16ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (heap->len) {
   16ab6:	6883      	ldr	r3, [r0, #8]
   16ab8:	b93b      	cbnz	r3, 16aca <mod_uheapq_heappop+0x36>
}
   16aba:	4620      	mov	r0, r4
   16abc:	bd10      	pop	{r4, pc}
        nlr_raise(mp_obj_new_exception_msg(&mp_type_IndexError, "empty heap"));
   16abe:	4904      	ldr	r1, [pc, #16]	; (16ad0 <mod_uheapq_heappop+0x3c>)
   16ac0:	4804      	ldr	r0, [pc, #16]	; (16ad4 <mod_uheapq_heappop+0x40>)
   16ac2:	f7f6 f873 	bl	cbac <mp_obj_new_exception_msg>
   16ac6:	f7e9 fedb 	bl	880 <nlr_jump>
        heap_siftup(heap, 0);
   16aca:	f7ff ff9b 	bl	16a04 <heap_siftup>
    return item;
   16ace:	e7f4      	b.n	16aba <mod_uheapq_heappop+0x26>
   16ad0:	0002a3fc 	.word	0x0002a3fc
   16ad4:	00026978 	.word	0x00026978

00016ad8 <mod_uheapq_heappush>:
STATIC mp_obj_t mod_uheapq_heappush(mp_obj_t heap_in, mp_obj_t item) {
   16ad8:	b570      	push	{r4, r5, r6, lr}
   16ada:	4605      	mov	r5, r0
   16adc:	460e      	mov	r6, r1
    mp_obj_list_t *heap = get_heap(heap_in);
   16ade:	f7ff ff5d 	bl	1699c <get_heap>
   16ae2:	4604      	mov	r4, r0
    mp_obj_list_append(heap_in, item);
   16ae4:	4631      	mov	r1, r6
   16ae6:	4628      	mov	r0, r5
   16ae8:	f7f7 fc8a 	bl	e400 <mp_obj_list_append>
    heap_siftdown(heap, 0, heap->len - 1);
   16aec:	68a2      	ldr	r2, [r4, #8]
   16aee:	3a01      	subs	r2, #1
   16af0:	2100      	movs	r1, #0
   16af2:	4620      	mov	r0, r4
   16af4:	f7ff ff62 	bl	169bc <heap_siftdown>
}
   16af8:	4800      	ldr	r0, [pc, #0]	; (16afc <mod_uheapq_heappush+0x24>)
   16afa:	bd70      	pop	{r4, r5, r6, pc}
   16afc:	00027b40 	.word	0x00027b40

00016b00 <sha256_transform>:
	0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

/*********************** FUNCTION DEFINITIONS ***********************/
static void sha256_transform(CRYAL_SHA256_CTX *ctx, const BYTE data[])
{
   16b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b04:	b0c9      	sub	sp, #292	; 0x124
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
   16b06:	2500      	movs	r5, #0
   16b08:	462c      	mov	r4, r5
   16b0a:	e00f      	b.n	16b2c <sha256_transform+0x2c>
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
   16b0c:	5d4e      	ldrb	r6, [r1, r5]
   16b0e:	194a      	adds	r2, r1, r5
   16b10:	7853      	ldrb	r3, [r2, #1]
   16b12:	041b      	lsls	r3, r3, #16
   16b14:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   16b18:	7896      	ldrb	r6, [r2, #2]
   16b1a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
   16b1e:	78d2      	ldrb	r2, [r2, #3]
   16b20:	4313      	orrs	r3, r2
   16b22:	aa08      	add	r2, sp, #32
   16b24:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (i = 0, j = 0; i < 16; ++i, j += 4)
   16b28:	3401      	adds	r4, #1
   16b2a:	3504      	adds	r5, #4
   16b2c:	2c0f      	cmp	r4, #15
   16b2e:	d9ed      	bls.n	16b0c <sha256_transform+0xc>
   16b30:	e022      	b.n	16b78 <sha256_transform+0x78>
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];
   16b32:	1ea3      	subs	r3, r4, #2
   16b34:	aa08      	add	r2, sp, #32
   16b36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   16b3a:	ea4f 43f2 	mov.w	r3, r2, ror #19
   16b3e:	ea83 4372 	eor.w	r3, r3, r2, ror #17
   16b42:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
   16b46:	1fe2      	subs	r2, r4, #7
   16b48:	a908      	add	r1, sp, #32
   16b4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   16b4e:	4413      	add	r3, r2
   16b50:	f1a4 020f 	sub.w	r2, r4, #15
   16b54:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   16b58:	ea4f 42b1 	mov.w	r2, r1, ror #18
   16b5c:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
   16b60:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
   16b64:	4413      	add	r3, r2
   16b66:	f1a4 0210 	sub.w	r2, r4, #16
   16b6a:	a908      	add	r1, sp, #32
   16b6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   16b70:	4413      	add	r3, r2
   16b72:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
	for ( ; i < 64; ++i)
   16b76:	3401      	adds	r4, #1
   16b78:	2c3f      	cmp	r4, #63	; 0x3f
   16b7a:	d9da      	bls.n	16b32 <sha256_transform+0x32>

	a = ctx->state[0];
   16b7c:	f8d0 b050 	ldr.w	fp, [r0, #80]	; 0x50
	b = ctx->state[1];
   16b80:	6d43      	ldr	r3, [r0, #84]	; 0x54
   16b82:	9301      	str	r3, [sp, #4]
	c = ctx->state[2];
   16b84:	6d82      	ldr	r2, [r0, #88]	; 0x58
   16b86:	9202      	str	r2, [sp, #8]
	d = ctx->state[3];
   16b88:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   16b8a:	9103      	str	r1, [sp, #12]
	e = ctx->state[4];
   16b8c:	6e05      	ldr	r5, [r0, #96]	; 0x60
   16b8e:	9504      	str	r5, [sp, #16]
	f = ctx->state[5];
   16b90:	6e46      	ldr	r6, [r0, #100]	; 0x64
   16b92:	9605      	str	r6, [sp, #20]
	g = ctx->state[6];
   16b94:	6e87      	ldr	r7, [r0, #104]	; 0x68
   16b96:	9706      	str	r7, [sp, #24]
	h = ctx->state[7];
   16b98:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   16b9a:	9407      	str	r4, [sp, #28]
	g = ctx->state[6];
   16b9c:	46b8      	mov	r8, r7
	f = ctx->state[5];
   16b9e:	46b1      	mov	r9, r6
	d = ctx->state[3];
   16ba0:	468a      	mov	sl, r1
	c = ctx->state[2];
   16ba2:	4694      	mov	ip, r2
	b = ctx->state[1];
   16ba4:	469e      	mov	lr, r3
	a = ctx->state[0];
   16ba6:	465e      	mov	r6, fp

	for (i = 0; i < 64; ++i) {
   16ba8:	2700      	movs	r7, #0
   16baa:	e02b      	b.n	16c04 <sha256_transform+0x104>
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
   16bac:	ea4f 23f5 	mov.w	r3, r5, ror #11
   16bb0:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
   16bb4:	ea83 6375 	eor.w	r3, r3, r5, ror #25
   16bb8:	4423      	add	r3, r4
   16bba:	ea05 0209 	and.w	r2, r5, r9
   16bbe:	ea28 0105 	bic.w	r1, r8, r5
   16bc2:	404a      	eors	r2, r1
   16bc4:	4413      	add	r3, r2
   16bc6:	4a1d      	ldr	r2, [pc, #116]	; (16c3c <sha256_transform+0x13c>)
   16bc8:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
   16bcc:	4413      	add	r3, r2
   16bce:	aa08      	add	r2, sp, #32
   16bd0:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
   16bd4:	4413      	add	r3, r2
		t2 = EP0(a) + MAJ(a,b,c);
   16bd6:	ea4f 3276 	mov.w	r2, r6, ror #13
   16bda:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
   16bde:	ea82 52b6 	eor.w	r2, r2, r6, ror #22
   16be2:	ea8e 010c 	eor.w	r1, lr, ip
   16be6:	4031      	ands	r1, r6
   16be8:	ea0e 040c 	and.w	r4, lr, ip
   16bec:	4061      	eors	r1, r4
   16bee:	440a      	add	r2, r1
	for (i = 0; i < 64; ++i) {
   16bf0:	3701      	adds	r7, #1
		h = g;
   16bf2:	4644      	mov	r4, r8
		g = f;
   16bf4:	46c8      	mov	r8, r9
		f = e;
   16bf6:	46a9      	mov	r9, r5
		e = d + t1;
   16bf8:	eb0a 0503 	add.w	r5, sl, r3
		d = c;
   16bfc:	46e2      	mov	sl, ip
		c = b;
   16bfe:	46f4      	mov	ip, lr
		b = a;
   16c00:	46b6      	mov	lr, r6
		a = t1 + t2;
   16c02:	189e      	adds	r6, r3, r2
	for (i = 0; i < 64; ++i) {
   16c04:	2f3f      	cmp	r7, #63	; 0x3f
   16c06:	d9d1      	bls.n	16bac <sha256_transform+0xac>
	}

	ctx->state[0] += a;
   16c08:	445e      	add	r6, fp
   16c0a:	6506      	str	r6, [r0, #80]	; 0x50
	ctx->state[1] += b;
   16c0c:	9b01      	ldr	r3, [sp, #4]
   16c0e:	4473      	add	r3, lr
   16c10:	6543      	str	r3, [r0, #84]	; 0x54
	ctx->state[2] += c;
   16c12:	9b02      	ldr	r3, [sp, #8]
   16c14:	4463      	add	r3, ip
   16c16:	6583      	str	r3, [r0, #88]	; 0x58
	ctx->state[3] += d;
   16c18:	9b03      	ldr	r3, [sp, #12]
   16c1a:	4453      	add	r3, sl
   16c1c:	65c3      	str	r3, [r0, #92]	; 0x5c
	ctx->state[4] += e;
   16c1e:	9b04      	ldr	r3, [sp, #16]
   16c20:	441d      	add	r5, r3
   16c22:	6605      	str	r5, [r0, #96]	; 0x60
	ctx->state[5] += f;
   16c24:	9b05      	ldr	r3, [sp, #20]
   16c26:	444b      	add	r3, r9
   16c28:	6643      	str	r3, [r0, #100]	; 0x64
	ctx->state[6] += g;
   16c2a:	9b06      	ldr	r3, [sp, #24]
   16c2c:	4443      	add	r3, r8
   16c2e:	6683      	str	r3, [r0, #104]	; 0x68
	ctx->state[7] += h;
   16c30:	9b07      	ldr	r3, [sp, #28]
   16c32:	441c      	add	r4, r3
   16c34:	66c4      	str	r4, [r0, #108]	; 0x6c
}
   16c36:	b049      	add	sp, #292	; 0x124
   16c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c3c:	0002a480 	.word	0x0002a480

00016c40 <sha256_init>:

void sha256_init(CRYAL_SHA256_CTX *ctx)
{
	ctx->datalen = 0;
   16c40:	2300      	movs	r3, #0
   16c42:	6403      	str	r3, [r0, #64]	; 0x40
	ctx->bitlen = 0;
   16c44:	2200      	movs	r2, #0
   16c46:	2300      	movs	r3, #0
   16c48:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
	ctx->state[0] = 0x6a09e667;
   16c4c:	4b0a      	ldr	r3, [pc, #40]	; (16c78 <sha256_init+0x38>)
   16c4e:	6503      	str	r3, [r0, #80]	; 0x50
	ctx->state[1] = 0xbb67ae85;
   16c50:	4b0a      	ldr	r3, [pc, #40]	; (16c7c <sha256_init+0x3c>)
   16c52:	6543      	str	r3, [r0, #84]	; 0x54
	ctx->state[2] = 0x3c6ef372;
   16c54:	4b0a      	ldr	r3, [pc, #40]	; (16c80 <sha256_init+0x40>)
   16c56:	6583      	str	r3, [r0, #88]	; 0x58
	ctx->state[3] = 0xa54ff53a;
   16c58:	4b0a      	ldr	r3, [pc, #40]	; (16c84 <sha256_init+0x44>)
   16c5a:	65c3      	str	r3, [r0, #92]	; 0x5c
	ctx->state[4] = 0x510e527f;
   16c5c:	4b0a      	ldr	r3, [pc, #40]	; (16c88 <sha256_init+0x48>)
   16c5e:	6603      	str	r3, [r0, #96]	; 0x60
	ctx->state[5] = 0x9b05688c;
   16c60:	4b0a      	ldr	r3, [pc, #40]	; (16c8c <sha256_init+0x4c>)
   16c62:	6643      	str	r3, [r0, #100]	; 0x64
	ctx->state[6] = 0x1f83d9ab;
   16c64:	4b0a      	ldr	r3, [pc, #40]	; (16c90 <sha256_init+0x50>)
   16c66:	6683      	str	r3, [r0, #104]	; 0x68
	ctx->state[7] = 0x5be0cd19;
   16c68:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   16c6c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   16c70:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   16c74:	66c3      	str	r3, [r0, #108]	; 0x6c
}
   16c76:	4770      	bx	lr
   16c78:	6a09e667 	.word	0x6a09e667
   16c7c:	bb67ae85 	.word	0xbb67ae85
   16c80:	3c6ef372 	.word	0x3c6ef372
   16c84:	a54ff53a 	.word	0xa54ff53a
   16c88:	510e527f 	.word	0x510e527f
   16c8c:	9b05688c 	.word	0x9b05688c
   16c90:	1f83d9ab 	.word	0x1f83d9ab

00016c94 <sha256_update>:

void sha256_update(CRYAL_SHA256_CTX *ctx, const BYTE data[], size_t len)
{
   16c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c96:	4605      	mov	r5, r0
   16c98:	460f      	mov	r7, r1
   16c9a:	4616      	mov	r6, r2
	WORD i;

	for (i = 0; i < len; ++i) {
   16c9c:	2400      	movs	r4, #0
   16c9e:	e000      	b.n	16ca2 <sha256_update+0xe>
   16ca0:	3401      	adds	r4, #1
   16ca2:	42b4      	cmp	r4, r6
   16ca4:	d215      	bcs.n	16cd2 <sha256_update+0x3e>
		ctx->data[ctx->datalen] = data[i];
   16ca6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   16ca8:	5d3a      	ldrb	r2, [r7, r4]
   16caa:	54ea      	strb	r2, [r5, r3]
		ctx->datalen++;
   16cac:	3301      	adds	r3, #1
   16cae:	642b      	str	r3, [r5, #64]	; 0x40
		if (ctx->datalen == 64) {
   16cb0:	2b40      	cmp	r3, #64	; 0x40
   16cb2:	d1f5      	bne.n	16ca0 <sha256_update+0xc>
			sha256_transform(ctx, ctx->data);
   16cb4:	4629      	mov	r1, r5
   16cb6:	4628      	mov	r0, r5
   16cb8:	f7ff ff22 	bl	16b00 <sha256_transform>
			ctx->bitlen += 512;
   16cbc:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	; 0x48
   16cc0:	f512 7000 	adds.w	r0, r2, #512	; 0x200
   16cc4:	f143 0100 	adc.w	r1, r3, #0
   16cc8:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
			ctx->datalen = 0;
   16ccc:	2300      	movs	r3, #0
   16cce:	642b      	str	r3, [r5, #64]	; 0x40
   16cd0:	e7e6      	b.n	16ca0 <sha256_update+0xc>
		}
	}
}
   16cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016cd4 <hash_update>:
}
#endif

#endif

STATIC mp_obj_t hash_update(mp_obj_t self_in, mp_obj_t arg) {
   16cd4:	b510      	push	{r4, lr}
   16cd6:	b084      	sub	sp, #16
   16cd8:	4604      	mov	r4, r0
   16cda:	4608      	mov	r0, r1
    mp_obj_hash_t *self = MP_OBJ_TO_PTR(self_in);
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(arg, &bufinfo, MP_BUFFER_READ);
   16cdc:	2201      	movs	r2, #1
   16cde:	a901      	add	r1, sp, #4
   16ce0:	f7f4 fae6 	bl	b2b0 <mp_get_buffer_raise>
    sha256_update((CRYAL_SHA256_CTX*)self->state, bufinfo.buf, bufinfo.len);
   16ce4:	9a02      	ldr	r2, [sp, #8]
   16ce6:	9901      	ldr	r1, [sp, #4]
   16ce8:	1d20      	adds	r0, r4, #4
   16cea:	f7ff ffd3 	bl	16c94 <sha256_update>
    return mp_const_none;
}
   16cee:	4801      	ldr	r0, [pc, #4]	; (16cf4 <hash_update+0x20>)
   16cf0:	b004      	add	sp, #16
   16cf2:	bd10      	pop	{r4, pc}
   16cf4:	00027b40 	.word	0x00027b40

00016cf8 <hash_make_new>:
STATIC mp_obj_t hash_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cfa:	b083      	sub	sp, #12
   16cfc:	4606      	mov	r6, r0
   16cfe:	460d      	mov	r5, r1
   16d00:	4611      	mov	r1, r2
   16d02:	461f      	mov	r7, r3
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   16d04:	2200      	movs	r2, #0
   16d06:	9200      	str	r2, [sp, #0]
   16d08:	2301      	movs	r3, #1
   16d0a:	4628      	mov	r0, r5
   16d0c:	f7f3 fd04 	bl	a718 <mp_arg_check_num>
    mp_obj_hash_t *o = m_new_obj_var(mp_obj_hash_t, char, sizeof(CRYAL_SHA256_CTX));
   16d10:	2074      	movs	r0, #116	; 0x74
   16d12:	f7e9 fdd3 	bl	8bc <m_malloc>
   16d16:	4604      	mov	r4, r0
    o->base.type = type;
   16d18:	f840 6b04 	str.w	r6, [r0], #4
    sha256_init((CRYAL_SHA256_CTX*)o->state);
   16d1c:	f7ff ff90 	bl	16c40 <sha256_init>
    if (n_args == 1) {
   16d20:	2d01      	cmp	r5, #1
   16d22:	d002      	beq.n	16d2a <hash_make_new+0x32>
}
   16d24:	4620      	mov	r0, r4
   16d26:	b003      	add	sp, #12
   16d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hash_update(MP_OBJ_FROM_PTR(o), args[0]);
   16d2a:	6839      	ldr	r1, [r7, #0]
   16d2c:	4620      	mov	r0, r4
   16d2e:	f7ff ffd1 	bl	16cd4 <hash_update>
    return MP_OBJ_FROM_PTR(o);
   16d32:	e7f7      	b.n	16d24 <hash_make_new+0x2c>

00016d34 <sha256_final>:

void sha256_final(CRYAL_SHA256_CTX *ctx, BYTE hash[])
{
   16d34:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   16d38:	4604      	mov	r4, r0
   16d3a:	460d      	mov	r5, r1
	WORD i;

	i = ctx->datalen;
   16d3c:	6c02      	ldr	r2, [r0, #64]	; 0x40

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
   16d3e:	2a37      	cmp	r2, #55	; 0x37
   16d40:	d834      	bhi.n	16dac <sha256_final+0x78>
		ctx->data[i++] = 0x80;
   16d42:	1c53      	adds	r3, r2, #1
   16d44:	2180      	movs	r1, #128	; 0x80
   16d46:	5481      	strb	r1, [r0, r2]
		while (i < 56)
   16d48:	e002      	b.n	16d50 <sha256_final+0x1c>
			ctx->data[i++] = 0x00;
   16d4a:	2200      	movs	r2, #0
   16d4c:	54e2      	strb	r2, [r4, r3]
   16d4e:	3301      	adds	r3, #1
		while (i < 56)
   16d50:	2b37      	cmp	r3, #55	; 0x37
   16d52:	d9fa      	bls.n	16d4a <sha256_final+0x16>
		sha256_transform(ctx, ctx->data);
		memset(ctx->data, 0, 56);
	}

	// Append to the padding the total message's length in bits and transform.
	ctx->bitlen += ctx->datalen * 8;
   16d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16d56:	00d9      	lsls	r1, r3, #3
   16d58:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   16d5c:	eb12 0b01 	adds.w	fp, r2, r1
   16d60:	f143 0c00 	adc.w	ip, r3, #0
   16d64:	e9c4 bc12 	strd	fp, ip, [r4, #72]	; 0x48
	ctx->data[63] = ctx->bitlen;
   16d68:	f884 b03f 	strb.w	fp, [r4, #63]	; 0x3f
	ctx->data[62] = ctx->bitlen >> 8;
   16d6c:	ea4f 211b 	mov.w	r1, fp, lsr #8
   16d70:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
	ctx->data[61] = ctx->bitlen >> 16;
   16d74:	ea4f 411b 	mov.w	r1, fp, lsr #16
   16d78:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
	ctx->data[60] = ctx->bitlen >> 24;
   16d7c:	ea4f 621b 	mov.w	r2, fp, lsr #24
   16d80:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	ctx->data[59] = ctx->bitlen >> 32;
   16d84:	f884 c03b 	strb.w	ip, [r4, #59]	; 0x3b
	ctx->data[58] = ctx->bitlen >> 40;
   16d88:	ea4f 221c 	mov.w	r2, ip, lsr #8
   16d8c:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
	ctx->data[57] = ctx->bitlen >> 48;
   16d90:	ea4f 421c 	mov.w	r2, ip, lsr #16
   16d94:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
	ctx->data[56] = ctx->bitlen >> 56;
   16d98:	ea4f 631c 	mov.w	r3, ip, lsr #24
   16d9c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	sha256_transform(ctx, ctx->data);
   16da0:	4621      	mov	r1, r4
   16da2:	4620      	mov	r0, r4
   16da4:	f7ff feac 	bl	16b00 <sha256_transform>

	// Since this implementation uses little endian byte ordering and SHA uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
   16da8:	2300      	movs	r3, #0
   16daa:	e03d      	b.n	16e28 <sha256_final+0xf4>
		ctx->data[i++] = 0x80;
   16dac:	1c53      	adds	r3, r2, #1
   16dae:	2180      	movs	r1, #128	; 0x80
   16db0:	5481      	strb	r1, [r0, r2]
		while (i < 64)
   16db2:	e002      	b.n	16dba <sha256_final+0x86>
			ctx->data[i++] = 0x00;
   16db4:	2200      	movs	r2, #0
   16db6:	54e2      	strb	r2, [r4, r3]
   16db8:	3301      	adds	r3, #1
		while (i < 64)
   16dba:	2b3f      	cmp	r3, #63	; 0x3f
   16dbc:	d9fa      	bls.n	16db4 <sha256_final+0x80>
		sha256_transform(ctx, ctx->data);
   16dbe:	4621      	mov	r1, r4
   16dc0:	4620      	mov	r0, r4
   16dc2:	f7ff fe9d 	bl	16b00 <sha256_transform>
		memset(ctx->data, 0, 56);
   16dc6:	2238      	movs	r2, #56	; 0x38
   16dc8:	2100      	movs	r1, #0
   16dca:	4620      	mov	r0, r4
   16dcc:	f004 fd56 	bl	1b87c <memset>
   16dd0:	e7c0      	b.n	16d54 <sha256_final+0x20>
		hash[i]      = (ctx->state[0] >> (24 - i * 8)) & 0x000000ff;
   16dd2:	6d21      	ldr	r1, [r4, #80]	; 0x50
   16dd4:	ebc3 7043 	rsb	r0, r3, r3, lsl #29
   16dd8:	00c2      	lsls	r2, r0, #3
   16dda:	3218      	adds	r2, #24
   16ddc:	40d1      	lsrs	r1, r2
   16dde:	54e9      	strb	r1, [r5, r3]
		hash[i + 4]  = (ctx->state[1] >> (24 - i * 8)) & 0x000000ff;
   16de0:	6d61      	ldr	r1, [r4, #84]	; 0x54
   16de2:	40d1      	lsrs	r1, r2
   16de4:	1d18      	adds	r0, r3, #4
   16de6:	5429      	strb	r1, [r5, r0]
		hash[i + 8]  = (ctx->state[2] >> (24 - i * 8)) & 0x000000ff;
   16de8:	6da1      	ldr	r1, [r4, #88]	; 0x58
   16dea:	40d1      	lsrs	r1, r2
   16dec:	f103 0008 	add.w	r0, r3, #8
   16df0:	5429      	strb	r1, [r5, r0]
		hash[i + 12] = (ctx->state[3] >> (24 - i * 8)) & 0x000000ff;
   16df2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   16df4:	40d1      	lsrs	r1, r2
   16df6:	f103 000c 	add.w	r0, r3, #12
   16dfa:	5429      	strb	r1, [r5, r0]
		hash[i + 16] = (ctx->state[4] >> (24 - i * 8)) & 0x000000ff;
   16dfc:	6e21      	ldr	r1, [r4, #96]	; 0x60
   16dfe:	40d1      	lsrs	r1, r2
   16e00:	f103 0010 	add.w	r0, r3, #16
   16e04:	5429      	strb	r1, [r5, r0]
		hash[i + 20] = (ctx->state[5] >> (24 - i * 8)) & 0x000000ff;
   16e06:	6e61      	ldr	r1, [r4, #100]	; 0x64
   16e08:	40d1      	lsrs	r1, r2
   16e0a:	f103 0014 	add.w	r0, r3, #20
   16e0e:	5429      	strb	r1, [r5, r0]
		hash[i + 24] = (ctx->state[6] >> (24 - i * 8)) & 0x000000ff;
   16e10:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   16e12:	40d1      	lsrs	r1, r2
   16e14:	f103 0018 	add.w	r0, r3, #24
   16e18:	5429      	strb	r1, [r5, r0]
		hash[i + 28] = (ctx->state[7] >> (24 - i * 8)) & 0x000000ff;
   16e1a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   16e1c:	fa21 f202 	lsr.w	r2, r1, r2
   16e20:	f103 011c 	add.w	r1, r3, #28
   16e24:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < 4; ++i) {
   16e26:	3301      	adds	r3, #1
   16e28:	2b03      	cmp	r3, #3
   16e2a:	d9d2      	bls.n	16dd2 <sha256_final+0x9e>
	}
}
   16e2c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00016e30 <hash_digest>:
#endif

MP_DEFINE_CONST_FUN_OBJ_2(sha1_update_obj, sha1_update);
#endif

STATIC mp_obj_t hash_digest(mp_obj_t self_in) {
   16e30:	b510      	push	{r4, lr}
   16e32:	b084      	sub	sp, #16
   16e34:	4604      	mov	r4, r0
    mp_obj_hash_t *self = MP_OBJ_TO_PTR(self_in);
    vstr_t vstr;
    vstr_init_len(&vstr, SHA256_BLOCK_SIZE);
   16e36:	2120      	movs	r1, #32
   16e38:	4668      	mov	r0, sp
   16e3a:	f7ea fcce 	bl	17da <vstr_init_len>
    sha256_final((CRYAL_SHA256_CTX*)self->state, (byte*)vstr.buf);
   16e3e:	9902      	ldr	r1, [sp, #8]
   16e40:	1d20      	adds	r0, r4, #4
   16e42:	f7ff ff77 	bl	16d34 <sha256_final>
    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   16e46:	4669      	mov	r1, sp
   16e48:	4802      	ldr	r0, [pc, #8]	; (16e54 <hash_digest+0x24>)
   16e4a:	f7f8 fd7b 	bl	f944 <mp_obj_new_str_from_vstr>
}
   16e4e:	b004      	add	sp, #16
   16e50:	bd10      	pop	{r4, pc}
   16e52:	bf00      	nop
   16e54:	000280c8 	.word	0x000280c8

00016e58 <mod_binascii_sextet>:

// If ch is a character in the base64 alphabet, and is not a pad character, then
// the corresponding integer between 0 and 63, inclusively, is returned.
// Otherwise, -1 is returned.
static int mod_binascii_sextet(byte ch) {
    if (ch >= 'A' && ch <= 'Z') {
   16e58:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   16e5c:	b2db      	uxtb	r3, r3
   16e5e:	2b19      	cmp	r3, #25
   16e60:	d90f      	bls.n	16e82 <mod_binascii_sextet+0x2a>
        return ch - 'A';
    } else if (ch >= 'a' && ch <= 'z') {
   16e62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   16e66:	b2db      	uxtb	r3, r3
   16e68:	2b19      	cmp	r3, #25
   16e6a:	d90c      	bls.n	16e86 <mod_binascii_sextet+0x2e>
        return ch - 'a' + 26;
    } else if (ch >= '0' && ch <= '9') {
   16e6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   16e70:	b2db      	uxtb	r3, r3
   16e72:	2b09      	cmp	r3, #9
   16e74:	d909      	bls.n	16e8a <mod_binascii_sextet+0x32>
        return ch - '0' + 52;
    } else if (ch == '+') {
   16e76:	282b      	cmp	r0, #43	; 0x2b
   16e78:	d009      	beq.n	16e8e <mod_binascii_sextet+0x36>
        return 62;
    } else if (ch == '/') {
   16e7a:	282f      	cmp	r0, #47	; 0x2f
   16e7c:	d109      	bne.n	16e92 <mod_binascii_sextet+0x3a>
        return 63;
   16e7e:	203f      	movs	r0, #63	; 0x3f
   16e80:	4770      	bx	lr
        return ch - 'A';
   16e82:	3841      	subs	r0, #65	; 0x41
   16e84:	4770      	bx	lr
        return ch - 'a' + 26;
   16e86:	3847      	subs	r0, #71	; 0x47
   16e88:	4770      	bx	lr
        return ch - '0' + 52;
   16e8a:	3004      	adds	r0, #4
   16e8c:	4770      	bx	lr
        return 62;
   16e8e:	203e      	movs	r0, #62	; 0x3e
   16e90:	4770      	bx	lr
    } else {
        return -1;
   16e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   16e96:	4770      	bx	lr

00016e98 <mod_binascii_hexlify>:
mp_obj_t mod_binascii_hexlify(size_t n_args, const mp_obj_t *args) {
   16e98:	b570      	push	{r4, r5, r6, lr}
   16e9a:	b088      	sub	sp, #32
   16e9c:	4606      	mov	r6, r0
   16e9e:	460c      	mov	r4, r1
    mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   16ea0:	2201      	movs	r2, #1
   16ea2:	a905      	add	r1, sp, #20
   16ea4:	6820      	ldr	r0, [r4, #0]
   16ea6:	f7f4 fa03 	bl	b2b0 <mp_get_buffer_raise>
    if (bufinfo.len == 0) {
   16eaa:	9906      	ldr	r1, [sp, #24]
   16eac:	2900      	cmp	r1, #0
   16eae:	d037      	beq.n	16f20 <mod_binascii_hexlify+0x88>
    size_t out_len = bufinfo.len * 2;
   16eb0:	004d      	lsls	r5, r1, #1
    if (n_args > 1) {
   16eb2:	2e01      	cmp	r6, #1
   16eb4:	d808      	bhi.n	16ec8 <mod_binascii_hexlify+0x30>
    const char *sep = NULL;
   16eb6:	2400      	movs	r4, #0
    vstr_init_len(&vstr, out_len);
   16eb8:	4629      	mov	r1, r5
   16eba:	a801      	add	r0, sp, #4
   16ebc:	f7ea fc8d 	bl	17da <vstr_init_len>
    byte *in = bufinfo.buf, *out = (byte*)vstr.buf;
   16ec0:	9905      	ldr	r1, [sp, #20]
   16ec2:	9a03      	ldr	r2, [sp, #12]
    for (mp_uint_t i = bufinfo.len; i--;) {
   16ec4:	9b06      	ldr	r3, [sp, #24]
   16ec6:	e010      	b.n	16eea <mod_binascii_hexlify+0x52>
        out_len += bufinfo.len - 1;
   16ec8:	440d      	add	r5, r1
   16eca:	3d01      	subs	r5, #1
        sep = mp_obj_str_get_str(args[1]);
   16ecc:	6860      	ldr	r0, [r4, #4]
   16ece:	f7f9 f9bd 	bl	1024c <mp_obj_str_get_str>
   16ed2:	4604      	mov	r4, r0
   16ed4:	e7f0      	b.n	16eb8 <mod_binascii_hexlify+0x20>
        *out++ = d + '0';
   16ed6:	1c91      	adds	r1, r2, #2
   16ed8:	3330      	adds	r3, #48	; 0x30
   16eda:	7053      	strb	r3, [r2, #1]
        if (sep != NULL && i != 0) {
   16edc:	b1b4      	cbz	r4, 16f0c <mod_binascii_hexlify+0x74>
   16ede:	b1b8      	cbz	r0, 16f10 <mod_binascii_hexlify+0x78>
            *out++ = *sep;
   16ee0:	7823      	ldrb	r3, [r4, #0]
   16ee2:	7093      	strb	r3, [r2, #2]
   16ee4:	3203      	adds	r2, #3
        *out++ = d + '0';
   16ee6:	4603      	mov	r3, r0
   16ee8:	4629      	mov	r1, r5
    for (mp_uint_t i = bufinfo.len; i--;) {
   16eea:	1e58      	subs	r0, r3, #1
   16eec:	b193      	cbz	r3, 16f14 <mod_binascii_hexlify+0x7c>
        byte d = (*in >> 4);
   16eee:	780b      	ldrb	r3, [r1, #0]
   16ef0:	091b      	lsrs	r3, r3, #4
        if (d > 9) {
   16ef2:	2b09      	cmp	r3, #9
   16ef4:	d900      	bls.n	16ef8 <mod_binascii_hexlify+0x60>
            d += 'a' - '9' - 1;
   16ef6:	3327      	adds	r3, #39	; 0x27
        *out++ = d + '0';
   16ef8:	3330      	adds	r3, #48	; 0x30
   16efa:	7013      	strb	r3, [r2, #0]
        d = (*in++ & 0xf);
   16efc:	1c4d      	adds	r5, r1, #1
   16efe:	780b      	ldrb	r3, [r1, #0]
   16f00:	f003 030f 	and.w	r3, r3, #15
        if (d > 9) {
   16f04:	2b09      	cmp	r3, #9
   16f06:	d9e6      	bls.n	16ed6 <mod_binascii_hexlify+0x3e>
            d += 'a' - '9' - 1;
   16f08:	3327      	adds	r3, #39	; 0x27
   16f0a:	e7e4      	b.n	16ed6 <mod_binascii_hexlify+0x3e>
        *out++ = d + '0';
   16f0c:	460a      	mov	r2, r1
   16f0e:	e7ea      	b.n	16ee6 <mod_binascii_hexlify+0x4e>
   16f10:	460a      	mov	r2, r1
   16f12:	e7e8      	b.n	16ee6 <mod_binascii_hexlify+0x4e>
    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   16f14:	a901      	add	r1, sp, #4
   16f16:	4803      	ldr	r0, [pc, #12]	; (16f24 <mod_binascii_hexlify+0x8c>)
   16f18:	f7f8 fd14 	bl	f944 <mp_obj_new_str_from_vstr>
}
   16f1c:	b008      	add	sp, #32
   16f1e:	bd70      	pop	{r4, r5, r6, pc}
        return mp_const_empty_bytes;
   16f20:	4801      	ldr	r0, [pc, #4]	; (16f28 <mod_binascii_hexlify+0x90>)
   16f22:	e7fb      	b.n	16f1c <mod_binascii_hexlify+0x84>
   16f24:	000280c8 	.word	0x000280c8
   16f28:	00027dd4 	.word	0x00027dd4

00016f2c <mod_binascii_b2a_base64>:

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
}
MP_DEFINE_CONST_FUN_OBJ_1(mod_binascii_a2b_base64_obj, mod_binascii_a2b_base64);

mp_obj_t mod_binascii_b2a_base64(mp_obj_t data) {
   16f2c:	b510      	push	{r4, lr}
   16f2e:	b088      	sub	sp, #32
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(data, &bufinfo, MP_BUFFER_READ);
   16f30:	2201      	movs	r2, #1
   16f32:	a905      	add	r1, sp, #20
   16f34:	f7f4 f9bc 	bl	b2b0 <mp_get_buffer_raise>

    vstr_t vstr;
    vstr_init_len(&vstr, ((bufinfo.len != 0) ? (((bufinfo.len - 1) / 3) + 1) * 4 : 0) + 1);
   16f38:	9906      	ldr	r1, [sp, #24]
   16f3a:	b171      	cbz	r1, 16f5a <mod_binascii_b2a_base64+0x2e>
   16f3c:	3901      	subs	r1, #1
   16f3e:	4b3b      	ldr	r3, [pc, #236]	; (1702c <mod_binascii_b2a_base64+0x100>)
   16f40:	fba3 3101 	umull	r3, r1, r3, r1
   16f44:	0849      	lsrs	r1, r1, #1
   16f46:	3101      	adds	r1, #1
   16f48:	0089      	lsls	r1, r1, #2
   16f4a:	3101      	adds	r1, #1
   16f4c:	a801      	add	r0, sp, #4
   16f4e:	f7ea fc44 	bl	17da <vstr_init_len>

    // First pass, we convert input buffer to numeric base 64 values
    byte *in = bufinfo.buf, *out = (byte*)vstr.buf;
   16f52:	9b05      	ldr	r3, [sp, #20]
   16f54:	9903      	ldr	r1, [sp, #12]
    mp_uint_t i;
    for (i = bufinfo.len; i >= 3; i -= 3) {
   16f56:	9806      	ldr	r0, [sp, #24]
   16f58:	e01b      	b.n	16f92 <mod_binascii_b2a_base64+0x66>
    vstr_init_len(&vstr, ((bufinfo.len != 0) ? (((bufinfo.len - 1) / 3) + 1) * 4 : 0) + 1);
   16f5a:	2101      	movs	r1, #1
   16f5c:	e7f6      	b.n	16f4c <mod_binascii_b2a_base64+0x20>
        *out++ = (in[0] & 0xFC) >> 2;
   16f5e:	781a      	ldrb	r2, [r3, #0]
   16f60:	0892      	lsrs	r2, r2, #2
   16f62:	700a      	strb	r2, [r1, #0]
        *out++ = (in[0] & 0x03) << 4 | (in[1] & 0xF0) >> 4;
   16f64:	781a      	ldrb	r2, [r3, #0]
   16f66:	0112      	lsls	r2, r2, #4
   16f68:	f002 0230 	and.w	r2, r2, #48	; 0x30
   16f6c:	785c      	ldrb	r4, [r3, #1]
   16f6e:	ea42 1214 	orr.w	r2, r2, r4, lsr #4
   16f72:	704a      	strb	r2, [r1, #1]
        *out++ = (in[1] & 0x0F) << 2 | (in[2] & 0xC0) >> 6;
   16f74:	785a      	ldrb	r2, [r3, #1]
   16f76:	0092      	lsls	r2, r2, #2
   16f78:	f002 023c 	and.w	r2, r2, #60	; 0x3c
   16f7c:	789c      	ldrb	r4, [r3, #2]
   16f7e:	ea42 1294 	orr.w	r2, r2, r4, lsr #6
   16f82:	708a      	strb	r2, [r1, #2]
        *out++ = in[2] & 0x3F;
   16f84:	789a      	ldrb	r2, [r3, #2]
   16f86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   16f8a:	70ca      	strb	r2, [r1, #3]
        in += 3;
   16f8c:	3303      	adds	r3, #3
    for (i = bufinfo.len; i >= 3; i -= 3) {
   16f8e:	3803      	subs	r0, #3
        *out++ = in[2] & 0x3F;
   16f90:	3104      	adds	r1, #4
    for (i = bufinfo.len; i >= 3; i -= 3) {
   16f92:	2802      	cmp	r0, #2
   16f94:	d8e3      	bhi.n	16f5e <mod_binascii_b2a_base64+0x32>
    }
    if (i != 0) {
   16f96:	b170      	cbz	r0, 16fb6 <mod_binascii_b2a_base64+0x8a>
        *out++ = (in[0] & 0xFC) >> 2;
   16f98:	781a      	ldrb	r2, [r3, #0]
   16f9a:	0892      	lsrs	r2, r2, #2
   16f9c:	700a      	strb	r2, [r1, #0]
        if (i == 2) {
   16f9e:	2802      	cmp	r0, #2
   16fa0:	d00d      	beq.n	16fbe <mod_binascii_b2a_base64+0x92>
            *out++ = (in[0] & 0x03) << 4 | (in[1] & 0xF0) >> 4;
            *out++ = (in[1] & 0x0F) << 2;
        }
        else {
            *out++ = (in[0] & 0x03) << 4;
   16fa2:	781b      	ldrb	r3, [r3, #0]
   16fa4:	011b      	lsls	r3, r3, #4
   16fa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
   16faa:	704b      	strb	r3, [r1, #1]
            *out++ = 64;
   16fac:	1cca      	adds	r2, r1, #3
   16fae:	2340      	movs	r3, #64	; 0x40
   16fb0:	708b      	strb	r3, [r1, #2]
        }
        *out = 64;
   16fb2:	2340      	movs	r3, #64	; 0x40
   16fb4:	7013      	strb	r3, [r2, #0]
    }

    // Second pass, we convert number base 64 values to actual base64 ascii encoding
    out = (byte*)vstr.buf;
   16fb6:	9a03      	ldr	r2, [sp, #12]
    for (mp_uint_t j = vstr.len - 1; j--;) {
   16fb8:	9b02      	ldr	r3, [sp, #8]
   16fba:	3b01      	subs	r3, #1
   16fbc:	e014      	b.n	16fe8 <mod_binascii_b2a_base64+0xbc>
            *out++ = (in[0] & 0x03) << 4 | (in[1] & 0xF0) >> 4;
   16fbe:	781a      	ldrb	r2, [r3, #0]
   16fc0:	0112      	lsls	r2, r2, #4
   16fc2:	f002 0230 	and.w	r2, r2, #48	; 0x30
   16fc6:	7858      	ldrb	r0, [r3, #1]
   16fc8:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
   16fcc:	704a      	strb	r2, [r1, #1]
            *out++ = (in[1] & 0x0F) << 2;
   16fce:	785b      	ldrb	r3, [r3, #1]
   16fd0:	1cca      	adds	r2, r1, #3
   16fd2:	009b      	lsls	r3, r3, #2
   16fd4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   16fd8:	708b      	strb	r3, [r1, #2]
   16fda:	e7ea      	b.n	16fb2 <mod_binascii_b2a_base64+0x86>
        if (*out < 26) {
            *out += 'A';
        } else if (*out < 52) {
   16fdc:	2b33      	cmp	r3, #51	; 0x33
   16fde:	d80b      	bhi.n	16ff8 <mod_binascii_b2a_base64+0xcc>
            *out += 'a' - 26;
   16fe0:	3347      	adds	r3, #71	; 0x47
   16fe2:	7013      	strb	r3, [r2, #0]
        } else if (*out == 63) {
            *out = '/';
        } else {
            *out = '=';
        }
        out++;
   16fe4:	3201      	adds	r2, #1
    for (mp_uint_t j = vstr.len - 1; j--;) {
   16fe6:	460b      	mov	r3, r1
   16fe8:	1e59      	subs	r1, r3, #1
   16fea:	b1bb      	cbz	r3, 1701c <mod_binascii_b2a_base64+0xf0>
        if (*out < 26) {
   16fec:	7813      	ldrb	r3, [r2, #0]
   16fee:	2b19      	cmp	r3, #25
   16ff0:	d8f4      	bhi.n	16fdc <mod_binascii_b2a_base64+0xb0>
            *out += 'A';
   16ff2:	3341      	adds	r3, #65	; 0x41
   16ff4:	7013      	strb	r3, [r2, #0]
   16ff6:	e7f5      	b.n	16fe4 <mod_binascii_b2a_base64+0xb8>
        } else if (*out < 62) {
   16ff8:	2b3d      	cmp	r3, #61	; 0x3d
   16ffa:	d802      	bhi.n	17002 <mod_binascii_b2a_base64+0xd6>
            *out += '0' - 52;
   16ffc:	3b04      	subs	r3, #4
   16ffe:	7013      	strb	r3, [r2, #0]
   17000:	e7f0      	b.n	16fe4 <mod_binascii_b2a_base64+0xb8>
        } else if (*out == 62) {
   17002:	2b3e      	cmp	r3, #62	; 0x3e
   17004:	d004      	beq.n	17010 <mod_binascii_b2a_base64+0xe4>
        } else if (*out == 63) {
   17006:	2b3f      	cmp	r3, #63	; 0x3f
   17008:	d005      	beq.n	17016 <mod_binascii_b2a_base64+0xea>
            *out = '=';
   1700a:	233d      	movs	r3, #61	; 0x3d
   1700c:	7013      	strb	r3, [r2, #0]
   1700e:	e7e9      	b.n	16fe4 <mod_binascii_b2a_base64+0xb8>
            *out ='+';
   17010:	232b      	movs	r3, #43	; 0x2b
   17012:	7013      	strb	r3, [r2, #0]
   17014:	e7e6      	b.n	16fe4 <mod_binascii_b2a_base64+0xb8>
            *out = '/';
   17016:	232f      	movs	r3, #47	; 0x2f
   17018:	7013      	strb	r3, [r2, #0]
   1701a:	e7e3      	b.n	16fe4 <mod_binascii_b2a_base64+0xb8>
    }
    *out = '\n';
   1701c:	230a      	movs	r3, #10
   1701e:	7013      	strb	r3, [r2, #0]
    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   17020:	a901      	add	r1, sp, #4
   17022:	4803      	ldr	r0, [pc, #12]	; (17030 <mod_binascii_b2a_base64+0x104>)
   17024:	f7f8 fc8e 	bl	f944 <mp_obj_new_str_from_vstr>
}
   17028:	b008      	add	sp, #32
   1702a:	bd10      	pop	{r4, pc}
   1702c:	aaaaaaab 	.word	0xaaaaaaab
   17030:	000280c8 	.word	0x000280c8

00017034 <mod_binascii_unhexlify>:
mp_obj_t mod_binascii_unhexlify(mp_obj_t data) {
   17034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17038:	b088      	sub	sp, #32
    mp_get_buffer_raise(data, &bufinfo, MP_BUFFER_READ);
   1703a:	2201      	movs	r2, #1
   1703c:	a905      	add	r1, sp, #20
   1703e:	f7f4 f937 	bl	b2b0 <mp_get_buffer_raise>
    if ((bufinfo.len & 1) != 0) {
   17042:	9906      	ldr	r1, [sp, #24]
   17044:	f011 0f01 	tst.w	r1, #1
   17048:	d108      	bne.n	1705c <mod_binascii_unhexlify+0x28>
    vstr_init_len(&vstr, bufinfo.len / 2);
   1704a:	0849      	lsrs	r1, r1, #1
   1704c:	a801      	add	r0, sp, #4
   1704e:	f7ea fbc4 	bl	17da <vstr_init_len>
    byte *in = bufinfo.buf, *out = (byte*)vstr.buf;
   17052:	9a05      	ldr	r2, [sp, #20]
   17054:	9f03      	ldr	r7, [sp, #12]
    for (mp_uint_t i = bufinfo.len; i--;) {
   17056:	9b06      	ldr	r3, [sp, #24]
    byte hex_byte = 0;
   17058:	2400      	movs	r4, #0
    for (mp_uint_t i = bufinfo.len; i--;) {
   1705a:	e009      	b.n	17070 <mod_binascii_unhexlify+0x3c>
        mp_raise_ValueError("odd-length string");
   1705c:	4813      	ldr	r0, [pc, #76]	; (170ac <mod_binascii_unhexlify+0x78>)
   1705e:	f7f3 f923 	bl	a2a8 <mp_raise_ValueError>
            mp_raise_ValueError("non-hex digit found");
   17062:	4813      	ldr	r0, [pc, #76]	; (170b0 <mod_binascii_unhexlify+0x7c>)
   17064:	f7f3 f920 	bl	a2a8 <mp_raise_ValueError>
            hex_byte <<= 4;
   17068:	0124      	lsls	r4, r4, #4
   1706a:	b2e4      	uxtb	r4, r4
            hex_byte = 0;
   1706c:	462b      	mov	r3, r5
   1706e:	4632      	mov	r2, r6
    for (mp_uint_t i = bufinfo.len; i--;) {
   17070:	1e5d      	subs	r5, r3, #1
   17072:	b19b      	cbz	r3, 1709c <mod_binascii_unhexlify+0x68>
        byte hex_ch = *in++;
   17074:	1c56      	adds	r6, r2, #1
   17076:	f892 8000 	ldrb.w	r8, [r2]
        if (unichar_isxdigit(hex_ch)) {
   1707a:	4640      	mov	r0, r8
   1707c:	f7eb f834 	bl	20e8 <unichar_isxdigit>
   17080:	2800      	cmp	r0, #0
   17082:	d0ee      	beq.n	17062 <mod_binascii_unhexlify+0x2e>
            hex_byte += unichar_xdigit_value(hex_ch);
   17084:	4640      	mov	r0, r8
   17086:	f7eb f887 	bl	2198 <unichar_xdigit_value>
   1708a:	4404      	add	r4, r0
   1708c:	b2e4      	uxtb	r4, r4
        if (i & 1) {
   1708e:	f015 0f01 	tst.w	r5, #1
   17092:	d1e9      	bne.n	17068 <mod_binascii_unhexlify+0x34>
            *out++ = hex_byte;
   17094:	703c      	strb	r4, [r7, #0]
   17096:	3701      	adds	r7, #1
            hex_byte = 0;
   17098:	2400      	movs	r4, #0
   1709a:	e7e7      	b.n	1706c <mod_binascii_unhexlify+0x38>
    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   1709c:	a901      	add	r1, sp, #4
   1709e:	4805      	ldr	r0, [pc, #20]	; (170b4 <mod_binascii_unhexlify+0x80>)
   170a0:	f7f8 fc50 	bl	f944 <mp_obj_new_str_from_vstr>
}
   170a4:	b008      	add	sp, #32
   170a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170aa:	bf00      	nop
   170ac:	0002a614 	.word	0x0002a614
   170b0:	0002a628 	.word	0x0002a628
   170b4:	000280c8 	.word	0x000280c8

000170b8 <mod_binascii_a2b_base64>:
mp_obj_t mod_binascii_a2b_base64(mp_obj_t data) {
   170b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   170bc:	b089      	sub	sp, #36	; 0x24
    mp_get_buffer_raise(data, &bufinfo, MP_BUFFER_READ);
   170be:	2201      	movs	r2, #1
   170c0:	a905      	add	r1, sp, #20
   170c2:	f7f4 f8f5 	bl	b2b0 <mp_get_buffer_raise>
    byte *in = bufinfo.buf;
   170c6:	f8dd 8014 	ldr.w	r8, [sp, #20]
    vstr_init(&vstr, (bufinfo.len / 4) * 3 + 1); // Potentially over-allocate
   170ca:	9906      	ldr	r1, [sp, #24]
   170cc:	0889      	lsrs	r1, r1, #2
   170ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   170d2:	3101      	adds	r1, #1
   170d4:	a801      	add	r0, sp, #4
   170d6:	f7ea fb70 	bl	17ba <vstr_init>
    byte *out = (byte *)vstr.buf;
   170da:	f8dd 900c 	ldr.w	r9, [sp, #12]
    for (size_t i = 0; i < bufinfo.len; i++) {
   170de:	2400      	movs	r4, #0
    bool hadpad = false; // Had a pad character since last valid character
   170e0:	4627      	mov	r7, r4
    int nbits = 0; // Number of meaningful bits in shift
   170e2:	4625      	mov	r5, r4
    uint shift = 0;
   170e4:	4626      	mov	r6, r4
    for (size_t i = 0; i < bufinfo.len; i++) {
   170e6:	e00b      	b.n	17100 <mod_binascii_a2b_base64+0x48>
            if ((nbits == 2) || ((nbits == 4) && hadpad)) {
   170e8:	2d02      	cmp	r5, #2
   170ea:	d024      	beq.n	17136 <mod_binascii_a2b_base64+0x7e>
   170ec:	2d04      	cmp	r5, #4
   170ee:	d001      	beq.n	170f4 <mod_binascii_a2b_base64+0x3c>
            hadpad = true;
   170f0:	2701      	movs	r7, #1
   170f2:	e00c      	b.n	1710e <mod_binascii_a2b_base64+0x56>
            if ((nbits == 2) || ((nbits == 4) && hadpad)) {
   170f4:	bb47      	cbnz	r7, 17148 <mod_binascii_a2b_base64+0x90>
            hadpad = true;
   170f6:	2701      	movs	r7, #1
   170f8:	e009      	b.n	1710e <mod_binascii_a2b_base64+0x56>
        nbits += 6;
   170fa:	461d      	mov	r5, r3
        hadpad = false;
   170fc:	2700      	movs	r7, #0
    for (size_t i = 0; i < bufinfo.len; i++) {
   170fe:	3401      	adds	r4, #1
   17100:	9b06      	ldr	r3, [sp, #24]
   17102:	42a3      	cmp	r3, r4
   17104:	d918      	bls.n	17138 <mod_binascii_a2b_base64+0x80>
        if (in[i] == '=') {
   17106:	f818 0004 	ldrb.w	r0, [r8, r4]
   1710a:	283d      	cmp	r0, #61	; 0x3d
   1710c:	d0ec      	beq.n	170e8 <mod_binascii_a2b_base64+0x30>
        int sextet = mod_binascii_sextet(in[i]);
   1710e:	f7ff fea3 	bl	16e58 <mod_binascii_sextet>
        if (sextet == -1) {
   17112:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17116:	d0f2      	beq.n	170fe <mod_binascii_a2b_base64+0x46>
        shift = (shift << 6) | sextet;
   17118:	ea40 1686 	orr.w	r6, r0, r6, lsl #6
        nbits += 6;
   1711c:	1dab      	adds	r3, r5, #6
        if (nbits >= 8) {
   1711e:	2b07      	cmp	r3, #7
   17120:	ddeb      	ble.n	170fa <mod_binascii_a2b_base64+0x42>
            nbits -= 8;
   17122:	3d02      	subs	r5, #2
            out[vstr.len++] = (shift >> nbits) & 0xFF;
   17124:	fa26 f205 	lsr.w	r2, r6, r5
   17128:	9b02      	ldr	r3, [sp, #8]
   1712a:	1c59      	adds	r1, r3, #1
   1712c:	9102      	str	r1, [sp, #8]
   1712e:	f809 2003 	strb.w	r2, [r9, r3]
        hadpad = false;
   17132:	2700      	movs	r7, #0
   17134:	e7e3      	b.n	170fe <mod_binascii_a2b_base64+0x46>
                nbits = 0;
   17136:	2500      	movs	r5, #0
    if (nbits) {
   17138:	b945      	cbnz	r5, 1714c <mod_binascii_a2b_base64+0x94>
    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   1713a:	a901      	add	r1, sp, #4
   1713c:	4805      	ldr	r0, [pc, #20]	; (17154 <mod_binascii_a2b_base64+0x9c>)
   1713e:	f7f8 fc01 	bl	f944 <mp_obj_new_str_from_vstr>
}
   17142:	b009      	add	sp, #36	; 0x24
   17144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                nbits = 0;
   17148:	2500      	movs	r5, #0
   1714a:	e7f5      	b.n	17138 <mod_binascii_a2b_base64+0x80>
        mp_raise_ValueError("incorrect padding");
   1714c:	4802      	ldr	r0, [pc, #8]	; (17158 <mod_binascii_a2b_base64+0xa0>)
   1714e:	f7f3 f8ab 	bl	a2a8 <mp_raise_ValueError>
   17152:	bf00      	nop
   17154:	000280c8 	.word	0x000280c8
   17158:	0002a5e4 	.word	0x0002a5e4

0001715c <mp_vfs_proxy_call>:
            (const byte*)p_out, strlen(p_out));
    }
    return vfs;
}

STATIC mp_obj_t mp_vfs_proxy_call(mp_vfs_mount_t *vfs, qstr meth_name, size_t n_args, const mp_obj_t *args) {
   1715c:	b530      	push	{r4, r5, lr}
   1715e:	b085      	sub	sp, #20
    assert(n_args <= PROXY_MAX_ARGS);
   17160:	2a02      	cmp	r2, #2
   17162:	d815      	bhi.n	17190 <mp_vfs_proxy_call+0x34>
   17164:	4614      	mov	r4, r2
   17166:	461d      	mov	r5, r3
    if (vfs == MP_VFS_NONE) {
   17168:	2801      	cmp	r0, #1
   1716a:	d017      	beq.n	1719c <mp_vfs_proxy_call+0x40>
        // mount point not found
        mp_raise_OSError(MP_ENODEV);
    }
    if (vfs == MP_VFS_ROOT) {
   1716c:	b1c8      	cbz	r0, 171a2 <mp_vfs_proxy_call+0x46>
        // can't do operation on root dir
        mp_raise_OSError(MP_EPERM);
    }
    mp_obj_t meth[2 + PROXY_MAX_ARGS];
    mp_load_method(vfs->obj, meth_name, meth);
   1716e:	466a      	mov	r2, sp
   17170:	6880      	ldr	r0, [r0, #8]
   17172:	f7f2 fb4b 	bl	980c <mp_load_method>
    if (args != NULL) {
   17176:	b125      	cbz	r5, 17182 <mp_vfs_proxy_call+0x26>
        memcpy(meth + 2, args, n_args * sizeof(*args));
   17178:	00a2      	lsls	r2, r4, #2
   1717a:	4629      	mov	r1, r5
   1717c:	a802      	add	r0, sp, #8
   1717e:	f004 fb39 	bl	1b7f4 <memcpy>
    }
    return mp_call_method_n_kw(n_args, 0, meth);
   17182:	466a      	mov	r2, sp
   17184:	2100      	movs	r1, #0
   17186:	4620      	mov	r0, r4
   17188:	f7f2 faaf 	bl	96ea <mp_call_method_n_kw>
}
   1718c:	b005      	add	sp, #20
   1718e:	bd30      	pop	{r4, r5, pc}
    assert(n_args <= PROXY_MAX_ARGS);
   17190:	4b05      	ldr	r3, [pc, #20]	; (171a8 <mp_vfs_proxy_call+0x4c>)
   17192:	4a06      	ldr	r2, [pc, #24]	; (171ac <mp_vfs_proxy_call+0x50>)
   17194:	2168      	movs	r1, #104	; 0x68
   17196:	4806      	ldr	r0, [pc, #24]	; (171b0 <mp_vfs_proxy_call+0x54>)
   17198:	f001 f9e0 	bl	1855c <__assert_func>
        mp_raise_OSError(MP_ENODEV);
   1719c:	2013      	movs	r0, #19
   1719e:	f7f3 fa8b 	bl	a6b8 <mp_raise_OSError>
        mp_raise_OSError(MP_EPERM);
   171a2:	2001      	movs	r0, #1
   171a4:	f7f3 fa88 	bl	a6b8 <mp_raise_OSError>
   171a8:	0002a714 	.word	0x0002a714
   171ac:	0002a684 	.word	0x0002a684
   171b0:	0002a730 	.word	0x0002a730

000171b4 <mp_vfs_umount>:

    return mp_const_none;
}
MP_DEFINE_CONST_FUN_OBJ_KW(mp_vfs_mount_obj, 2, mp_vfs_mount);

mp_obj_t mp_vfs_umount(mp_obj_t mnt_in) {
   171b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   171b6:	b083      	sub	sp, #12
   171b8:	4607      	mov	r7, r0
    { return ((((mp_int_t)(o)) & 3) == 2); }
   171ba:	f000 0303 	and.w	r3, r0, #3
    // remove vfs from the mount table
    mp_vfs_mount_t *vfs = NULL;
    size_t mnt_len;
    const char *mnt_str = NULL;
    if (MP_OBJ_IS_STR(mnt_in)) {
   171be:	2b02      	cmp	r3, #2
   171c0:	d006      	beq.n	171d0 <mp_vfs_umount+0x1c>
   171c2:	b95b      	cbnz	r3, 171dc <mp_vfs_umount+0x28>
   171c4:	6802      	ldr	r2, [r0, #0]
   171c6:	4b1c      	ldr	r3, [pc, #112]	; (17238 <mp_vfs_umount+0x84>)
   171c8:	429a      	cmp	r2, r3
   171ca:	d001      	beq.n	171d0 <mp_vfs_umount+0x1c>
    const char *mnt_str = NULL;
   171cc:	2600      	movs	r6, #0
   171ce:	e006      	b.n	171de <mp_vfs_umount+0x2a>
        mnt_str = mp_obj_str_get_data(mnt_in, &mnt_len);
   171d0:	a901      	add	r1, sp, #4
   171d2:	4638      	mov	r0, r7
   171d4:	f7f9 f856 	bl	10284 <mp_obj_str_get_data>
   171d8:	4606      	mov	r6, r0
   171da:	e000      	b.n	171de <mp_vfs_umount+0x2a>
    const char *mnt_str = NULL;
   171dc:	2600      	movs	r6, #0
    }
    for (mp_vfs_mount_t **vfsp = &MP_STATE_VM(vfs_mount_table); *vfsp != NULL; vfsp = &(*vfsp)->next) {
   171de:	4d17      	ldr	r5, [pc, #92]	; (1723c <mp_vfs_umount+0x88>)
   171e0:	e004      	b.n	171ec <mp_vfs_umount+0x38>
        if ((mnt_str != NULL && !memcmp(mnt_str, (*vfsp)->str, mnt_len + 1)) || (*vfsp)->obj == mnt_in) {
   171e2:	68a3      	ldr	r3, [r4, #8]
   171e4:	42bb      	cmp	r3, r7
   171e6:	d00d      	beq.n	17204 <mp_vfs_umount+0x50>
    for (mp_vfs_mount_t **vfsp = &MP_STATE_VM(vfs_mount_table); *vfsp != NULL; vfsp = &(*vfsp)->next) {
   171e8:	f104 050c 	add.w	r5, r4, #12
   171ec:	682c      	ldr	r4, [r5, #0]
   171ee:	b15c      	cbz	r4, 17208 <mp_vfs_umount+0x54>
        if ((mnt_str != NULL && !memcmp(mnt_str, (*vfsp)->str, mnt_len + 1)) || (*vfsp)->obj == mnt_in) {
   171f0:	2e00      	cmp	r6, #0
   171f2:	d0f6      	beq.n	171e2 <mp_vfs_umount+0x2e>
   171f4:	9a01      	ldr	r2, [sp, #4]
   171f6:	3201      	adds	r2, #1
   171f8:	6821      	ldr	r1, [r4, #0]
   171fa:	4630      	mov	r0, r6
   171fc:	f004 fb70 	bl	1b8e0 <memcmp>
   17200:	2800      	cmp	r0, #0
   17202:	d1ee      	bne.n	171e2 <mp_vfs_umount+0x2e>
            vfs = *vfsp;
            *vfsp = (*vfsp)->next;
   17204:	68e3      	ldr	r3, [r4, #12]
   17206:	602b      	str	r3, [r5, #0]
            break;
        }
    }

    if (vfs == NULL) {
   17208:	b174      	cbz	r4, 17228 <mp_vfs_umount+0x74>
        mp_raise_OSError(MP_EINVAL);
    }

    // if we unmounted the current device then set current to root
    if (MP_STATE_VM(vfs_cur) == vfs) {
   1720a:	4b0d      	ldr	r3, [pc, #52]	; (17240 <mp_vfs_umount+0x8c>)
   1720c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
   17210:	42a3      	cmp	r3, r4
   17212:	d00c      	beq.n	1722e <mp_vfs_umount+0x7a>
        MP_STATE_VM(vfs_cur) = MP_VFS_ROOT;
    }

    // call the underlying object to do any unmounting operation
    mp_vfs_proxy_call(vfs, MP_QSTR_umount, 0, NULL);
   17214:	2300      	movs	r3, #0
   17216:	461a      	mov	r2, r3
   17218:	f240 2169 	movw	r1, #617	; 0x269
   1721c:	4620      	mov	r0, r4
   1721e:	f7ff ff9d 	bl	1715c <mp_vfs_proxy_call>

    return mp_const_none;
}
   17222:	4808      	ldr	r0, [pc, #32]	; (17244 <mp_vfs_umount+0x90>)
   17224:	b003      	add	sp, #12
   17226:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mp_raise_OSError(MP_EINVAL);
   17228:	2016      	movs	r0, #22
   1722a:	f7f3 fa45 	bl	a6b8 <mp_raise_OSError>
        MP_STATE_VM(vfs_cur) = MP_VFS_ROOT;
   1722e:	4b04      	ldr	r3, [pc, #16]	; (17240 <mp_vfs_umount+0x8c>)
   17230:	2200      	movs	r2, #0
   17232:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
   17236:	e7ed      	b.n	17214 <mp_vfs_umount+0x60>
   17238:	00028104 	.word	0x00028104
   1723c:	20000acc 	.word	0x20000acc
   17240:	200008a0 	.word	0x200008a0
   17244:	00027b40 	.word	0x00027b40

00017248 <mp_vfs_getcwd>:
    return mp_const_none;
}
MP_DEFINE_CONST_FUN_OBJ_1(mp_vfs_chdir_obj, mp_vfs_chdir);

mp_obj_t mp_vfs_getcwd(void) {
    if (MP_STATE_VM(vfs_cur) == MP_VFS_ROOT) {
   17248:	4b1b      	ldr	r3, [pc, #108]	; (172b8 <mp_vfs_getcwd+0x70>)
   1724a:	f8d3 0228 	ldr.w	r0, [r3, #552]	; 0x228
   1724e:	b388      	cbz	r0, 172b4 <mp_vfs_getcwd+0x6c>
mp_obj_t mp_vfs_getcwd(void) {
   17250:	b570      	push	{r4, r5, r6, lr}
   17252:	b084      	sub	sp, #16
        return MP_OBJ_NEW_QSTR(MP_QSTR__slash_);
    }
    mp_obj_t cwd_o = mp_vfs_proxy_call(MP_STATE_VM(vfs_cur), MP_QSTR_getcwd, 0, NULL);
   17254:	2300      	movs	r3, #0
   17256:	461a      	mov	r2, r3
   17258:	f240 11ab 	movw	r1, #427	; 0x1ab
   1725c:	f7ff ff7e 	bl	1715c <mp_vfs_proxy_call>
    if (MP_STATE_VM(vfs_cur)->len == 1) {
   17260:	4b15      	ldr	r3, [pc, #84]	; (172b8 <mp_vfs_getcwd+0x70>)
   17262:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
   17266:	685b      	ldr	r3, [r3, #4]
   17268:	2b01      	cmp	r3, #1
   1726a:	d021      	beq.n	172b0 <mp_vfs_getcwd+0x68>
        // don't prepend "/" for vfs mounted at root
        return cwd_o;
    }
    const char *cwd = mp_obj_str_get_str(cwd_o);
   1726c:	f7f8 ffee 	bl	1024c <mp_obj_str_get_str>
   17270:	4605      	mov	r5, r0
    vstr_t vstr;
    vstr_init(&vstr, MP_STATE_VM(vfs_cur)->len + strlen(cwd) + 1);
   17272:	4e11      	ldr	r6, [pc, #68]	; (172b8 <mp_vfs_getcwd+0x70>)
   17274:	f8d6 3228 	ldr.w	r3, [r6, #552]	; 0x228
   17278:	685c      	ldr	r4, [r3, #4]
   1727a:	f004 fb53 	bl	1b924 <strlen>
   1727e:	1821      	adds	r1, r4, r0
   17280:	3101      	adds	r1, #1
   17282:	4668      	mov	r0, sp
   17284:	f7ea fa99 	bl	17ba <vstr_init>
    vstr_add_strn(&vstr, MP_STATE_VM(vfs_cur)->str, MP_STATE_VM(vfs_cur)->len);
   17288:	f8d6 3228 	ldr.w	r3, [r6, #552]	; 0x228
   1728c:	685a      	ldr	r2, [r3, #4]
   1728e:	6819      	ldr	r1, [r3, #0]
   17290:	4668      	mov	r0, sp
   17292:	f7ea fa65 	bl	1760 <vstr_add_strn>
    if (!(cwd[0] == '/' && cwd[1] == 0)) {
   17296:	782b      	ldrb	r3, [r5, #0]
   17298:	2b2f      	cmp	r3, #47	; 0x2f
   1729a:	d101      	bne.n	172a0 <mp_vfs_getcwd+0x58>
   1729c:	786b      	ldrb	r3, [r5, #1]
   1729e:	b11b      	cbz	r3, 172a8 <mp_vfs_getcwd+0x60>
        vstr_add_str(&vstr, cwd);
   172a0:	4629      	mov	r1, r5
   172a2:	4668      	mov	r0, sp
   172a4:	f7ea fb0d 	bl	18c2 <vstr_add_str>
    }
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   172a8:	4669      	mov	r1, sp
   172aa:	4804      	ldr	r0, [pc, #16]	; (172bc <mp_vfs_getcwd+0x74>)
   172ac:	f7f8 fb4a 	bl	f944 <mp_obj_new_str_from_vstr>
}
   172b0:	b004      	add	sp, #16
   172b2:	bd70      	pop	{r4, r5, r6, pc}
        return MP_OBJ_NEW_QSTR(MP_QSTR__slash_);
   172b4:	20a6      	movs	r0, #166	; 0xa6
}
   172b6:	4770      	bx	lr
   172b8:	200008a0 	.word	0x200008a0
   172bc:	00028104 	.word	0x00028104

000172c0 <mp_vfs_ilistdir_it_iternext>:
    } cur;
    bool is_str;
    bool is_iter;
} mp_vfs_ilistdir_it_t;

STATIC mp_obj_t mp_vfs_ilistdir_it_iternext(mp_obj_t self_in) {
   172c0:	b570      	push	{r4, r5, r6, lr}
   172c2:	b082      	sub	sp, #8
   172c4:	4604      	mov	r4, r0
    mp_vfs_ilistdir_it_t *self = MP_OBJ_TO_PTR(self_in);
    if (self->is_iter) {
   172c6:	7b43      	ldrb	r3, [r0, #13]
   172c8:	b9f3      	cbnz	r3, 17308 <mp_vfs_ilistdir_it_iternext+0x48>
        // continue delegating to root dir
        return mp_iternext(self->cur.iter);
    } else if (self->cur.vfs == NULL) {
   172ca:	6885      	ldr	r5, [r0, #8]
   172cc:	2d00      	cmp	r5, #0
   172ce:	d032      	beq.n	17336 <mp_vfs_ilistdir_it_iternext+0x76>
        // finished iterating mount points and no root dir is mounted
        return MP_OBJ_STOP_ITERATION;
    } else {
        // continue iterating mount points
        mp_vfs_mount_t *vfs = self->cur.vfs;
        self->cur.vfs = vfs->next;
   172d0:	68eb      	ldr	r3, [r5, #12]
   172d2:	6083      	str	r3, [r0, #8]
        if (vfs->len == 1) {
   172d4:	686b      	ldr	r3, [r5, #4]
   172d6:	2b01      	cmp	r3, #1
   172d8:	d01b      	beq.n	17312 <mp_vfs_ilistdir_it_iternext+0x52>
            self->is_iter = true;
            self->cur.iter = mp_vfs_proxy_call(vfs, MP_QSTR_ilistdir, 1, &root);
            return mp_iternext(self->cur.iter);
        } else {
            // a mounted directory
            mp_obj_tuple_t *t = MP_OBJ_TO_PTR(mp_obj_new_tuple(3, NULL));
   172da:	2100      	movs	r1, #0
   172dc:	2003      	movs	r0, #3
   172de:	f7fa fab1 	bl	11844 <mp_obj_new_tuple>
   172e2:	4606      	mov	r6, r0
            t->items[0] = mp_obj_new_str_of_type(
                self->is_str ? &mp_type_str : &mp_type_bytes,
   172e4:	7b23      	ldrb	r3, [r4, #12]
            t->items[0] = mp_obj_new_str_of_type(
   172e6:	b323      	cbz	r3, 17332 <mp_vfs_ilistdir_it_iternext+0x72>
   172e8:	4814      	ldr	r0, [pc, #80]	; (1733c <mp_vfs_ilistdir_it_iternext+0x7c>)
                (const byte*)vfs->str + 1, vfs->len - 1);
   172ea:	6829      	ldr	r1, [r5, #0]
   172ec:	686a      	ldr	r2, [r5, #4]
            t->items[0] = mp_obj_new_str_of_type(
   172ee:	3a01      	subs	r2, #1
   172f0:	3101      	adds	r1, #1
   172f2:	f7f8 fe51 	bl	ff98 <mp_obj_new_str_of_type>
   172f6:	60b0      	str	r0, [r6, #8]
            t->items[1] = MP_OBJ_NEW_SMALL_INT(MP_S_IFDIR);
   172f8:	f248 0301 	movw	r3, #32769	; 0x8001
   172fc:	60f3      	str	r3, [r6, #12]
            t->items[2] = MP_OBJ_NEW_SMALL_INT(0); // no inode number
   172fe:	2301      	movs	r3, #1
   17300:	6133      	str	r3, [r6, #16]
            return MP_OBJ_FROM_PTR(t);
        }
    }
}
   17302:	4630      	mov	r0, r6
   17304:	b002      	add	sp, #8
   17306:	bd70      	pop	{r4, r5, r6, pc}
        return mp_iternext(self->cur.iter);
   17308:	6880      	ldr	r0, [r0, #8]
   1730a:	f7f2 fb6f 	bl	99ec <mp_iternext>
   1730e:	4606      	mov	r6, r0
   17310:	e7f7      	b.n	17302 <mp_vfs_ilistdir_it_iternext+0x42>
            mp_obj_t root = MP_OBJ_NEW_QSTR(MP_QSTR__slash_);
   17312:	ab02      	add	r3, sp, #8
   17314:	22a6      	movs	r2, #166	; 0xa6
   17316:	f843 2d04 	str.w	r2, [r3, #-4]!
            self->is_iter = true;
   1731a:	2201      	movs	r2, #1
   1731c:	7342      	strb	r2, [r0, #13]
            self->cur.iter = mp_vfs_proxy_call(vfs, MP_QSTR_ilistdir, 1, &root);
   1731e:	f240 11bb 	movw	r1, #443	; 0x1bb
   17322:	4628      	mov	r0, r5
   17324:	f7ff ff1a 	bl	1715c <mp_vfs_proxy_call>
   17328:	60a0      	str	r0, [r4, #8]
            return mp_iternext(self->cur.iter);
   1732a:	f7f2 fb5f 	bl	99ec <mp_iternext>
   1732e:	4606      	mov	r6, r0
   17330:	e7e7      	b.n	17302 <mp_vfs_ilistdir_it_iternext+0x42>
            t->items[0] = mp_obj_new_str_of_type(
   17332:	4803      	ldr	r0, [pc, #12]	; (17340 <mp_vfs_ilistdir_it_iternext+0x80>)
   17334:	e7d9      	b.n	172ea <mp_vfs_ilistdir_it_iternext+0x2a>
        return MP_OBJ_STOP_ITERATION;
   17336:	2604      	movs	r6, #4
   17338:	e7e3      	b.n	17302 <mp_vfs_ilistdir_it_iternext+0x42>
   1733a:	bf00      	nop
   1733c:	00028104 	.word	0x00028104
   17340:	000280c8 	.word	0x000280c8

00017344 <mp_vfs_lookup_path>:
mp_vfs_mount_t *mp_vfs_lookup_path(const char *path, const char **path_out) {
   17344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17348:	4606      	mov	r6, r0
   1734a:	460f      	mov	r7, r1
    if (*path == '/' || MP_STATE_VM(vfs_cur) == MP_VFS_ROOT) {
   1734c:	7803      	ldrb	r3, [r0, #0]
   1734e:	2b2f      	cmp	r3, #47	; 0x2f
   17350:	d00a      	beq.n	17368 <mp_vfs_lookup_path+0x24>
   17352:	4a1e      	ldr	r2, [pc, #120]	; (173cc <mp_vfs_lookup_path+0x88>)
   17354:	f8d2 2228 	ldr.w	r2, [r2, #552]	; 0x228
   17358:	b132      	cbz	r2, 17368 <mp_vfs_lookup_path+0x24>
    *path_out = path;
   1735a:	603e      	str	r6, [r7, #0]
    return MP_STATE_VM(vfs_cur);
   1735c:	4b1b      	ldr	r3, [pc, #108]	; (173cc <mp_vfs_lookup_path+0x88>)
   1735e:	f8d3 5228 	ldr.w	r5, [r3, #552]	; 0x228
}
   17362:	4628      	mov	r0, r5
   17364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (*path == '/') {
   17368:	2b2f      	cmp	r3, #47	; 0x2f
   1736a:	d007      	beq.n	1737c <mp_vfs_lookup_path+0x38>
        bool is_abs = 0;
   1736c:	f04f 0800 	mov.w	r8, #0
        if (*path == '\0') {
   17370:	7833      	ldrb	r3, [r6, #0]
   17372:	b343      	cbz	r3, 173c6 <mp_vfs_lookup_path+0x82>
        for (mp_vfs_mount_t *vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   17374:	4b15      	ldr	r3, [pc, #84]	; (173cc <mp_vfs_lookup_path+0x88>)
   17376:	f8d3 522c 	ldr.w	r5, [r3, #556]	; 0x22c
   1737a:	e00a      	b.n	17392 <mp_vfs_lookup_path+0x4e>
            ++path;
   1737c:	3601      	adds	r6, #1
            is_abs = 1;
   1737e:	f04f 0801 	mov.w	r8, #1
   17382:	e7f5      	b.n	17370 <mp_vfs_lookup_path+0x2c>
                *path_out = path - is_abs;
   17384:	eba6 0608 	sub.w	r6, r6, r8
   17388:	603e      	str	r6, [r7, #0]
                return vfs;
   1738a:	e7ea      	b.n	17362 <mp_vfs_lookup_path+0x1e>
                    *path_out = path + len;
   1738c:	603a      	str	r2, [r7, #0]
                    return vfs;
   1738e:	e7e8      	b.n	17362 <mp_vfs_lookup_path+0x1e>
        for (mp_vfs_mount_t *vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   17390:	68ed      	ldr	r5, [r5, #12]
   17392:	b19d      	cbz	r5, 173bc <mp_vfs_lookup_path+0x78>
            size_t len = vfs->len - 1;
   17394:	686a      	ldr	r2, [r5, #4]
            if (len == 0) {
   17396:	1e54      	subs	r4, r2, #1
   17398:	d0f4      	beq.n	17384 <mp_vfs_lookup_path+0x40>
            if (strncmp(path, vfs->str + 1, len) == 0) {
   1739a:	6829      	ldr	r1, [r5, #0]
   1739c:	4622      	mov	r2, r4
   1739e:	3101      	adds	r1, #1
   173a0:	4630      	mov	r0, r6
   173a2:	f004 fae1 	bl	1b968 <strncmp>
   173a6:	2800      	cmp	r0, #0
   173a8:	d1f2      	bne.n	17390 <mp_vfs_lookup_path+0x4c>
                if (path[len] == '/') {
   173aa:	1932      	adds	r2, r6, r4
   173ac:	5d33      	ldrb	r3, [r6, r4]
   173ae:	2b2f      	cmp	r3, #47	; 0x2f
   173b0:	d0ec      	beq.n	1738c <mp_vfs_lookup_path+0x48>
                } else if (path[len] == '\0') {
   173b2:	2b00      	cmp	r3, #0
   173b4:	d1ec      	bne.n	17390 <mp_vfs_lookup_path+0x4c>
                    *path_out = "/";
   173b6:	4b06      	ldr	r3, [pc, #24]	; (173d0 <mp_vfs_lookup_path+0x8c>)
   173b8:	603b      	str	r3, [r7, #0]
                    return vfs;
   173ba:	e7d2      	b.n	17362 <mp_vfs_lookup_path+0x1e>
        if (is_abs) {
   173bc:	f1b8 0f00 	cmp.w	r8, #0
   173c0:	d0cb      	beq.n	1735a <mp_vfs_lookup_path+0x16>
            return MP_VFS_NONE;
   173c2:	2501      	movs	r5, #1
   173c4:	e7cd      	b.n	17362 <mp_vfs_lookup_path+0x1e>
            return MP_VFS_ROOT;
   173c6:	2500      	movs	r5, #0
   173c8:	e7cb      	b.n	17362 <mp_vfs_lookup_path+0x1e>
   173ca:	bf00      	nop
   173cc:	200008a0 	.word	0x200008a0
   173d0:	0002a6f0 	.word	0x0002a6f0

000173d4 <mp_vfs_mount>:
mp_obj_t mp_vfs_mount(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   173d4:	b570      	push	{r4, r5, r6, lr}
   173d6:	b08a      	sub	sp, #40	; 0x28
   173d8:	460d      	mov	r5, r1
    mp_arg_parse_all(n_args - 2, pos_args + 2, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   173da:	ab08      	add	r3, sp, #32
   173dc:	9301      	str	r3, [sp, #4]
   173de:	4b27      	ldr	r3, [pc, #156]	; (1747c <mp_vfs_mount+0xa8>)
   173e0:	9300      	str	r3, [sp, #0]
   173e2:	2302      	movs	r3, #2
   173e4:	3108      	adds	r1, #8
   173e6:	3802      	subs	r0, #2
   173e8:	f7f3 f9c8 	bl	a77c <mp_arg_parse_all>
    const char *mnt_str = mp_obj_str_get_data(pos_args[1], &mnt_len);
   173ec:	a907      	add	r1, sp, #28
   173ee:	6868      	ldr	r0, [r5, #4]
   173f0:	f7f8 ff48 	bl	10284 <mp_obj_str_get_data>
   173f4:	4606      	mov	r6, r0
    mp_obj_t vfs_obj = pos_args[0];
   173f6:	6828      	ldr	r0, [r5, #0]
   173f8:	9006      	str	r0, [sp, #24]
    mp_load_method_maybe(vfs_obj, MP_QSTR_mount, dest);
   173fa:	aa04      	add	r2, sp, #16
   173fc:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   17400:	f7f2 f9c2 	bl	9788 <mp_load_method_maybe>
    if (dest[0] == MP_OBJ_NULL) {
   17404:	9b04      	ldr	r3, [sp, #16]
   17406:	b933      	cbnz	r3, 17416 <mp_vfs_mount+0x42>
        vfs_obj = mp_fat_vfs_type.make_new(&mp_fat_vfs_type, 1, 0, &vfs_obj);
   17408:	481d      	ldr	r0, [pc, #116]	; (17480 <mp_vfs_mount+0xac>)
   1740a:	68c4      	ldr	r4, [r0, #12]
   1740c:	ab06      	add	r3, sp, #24
   1740e:	2200      	movs	r2, #0
   17410:	2101      	movs	r1, #1
   17412:	47a0      	blx	r4
   17414:	9006      	str	r0, [sp, #24]
    mp_vfs_mount_t *vfs = m_new_obj(mp_vfs_mount_t);
   17416:	2010      	movs	r0, #16
   17418:	f7e9 fa50 	bl	8bc <m_malloc>
   1741c:	4604      	mov	r4, r0
    vfs->str = mnt_str;
   1741e:	6006      	str	r6, [r0, #0]
    vfs->len = mnt_len;
   17420:	9b07      	ldr	r3, [sp, #28]
   17422:	6043      	str	r3, [r0, #4]
    vfs->obj = vfs_obj;
   17424:	9b06      	ldr	r3, [sp, #24]
   17426:	6083      	str	r3, [r0, #8]
    vfs->next = NULL;
   17428:	2300      	movs	r3, #0
   1742a:	60c3      	str	r3, [r0, #12]
    mp_vfs_proxy_call(vfs, MP_QSTR_mount, 2, (mp_obj_t*)&args);
   1742c:	ab08      	add	r3, sp, #32
   1742e:	2202      	movs	r2, #2
   17430:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   17434:	f7ff fe92 	bl	1715c <mp_vfs_proxy_call>
    mp_vfs_mount_t *existing_mount = mp_vfs_lookup_path(mp_obj_str_get_str(pos_args[1]), &path_out);
   17438:	6868      	ldr	r0, [r5, #4]
   1743a:	f7f8 ff07 	bl	1024c <mp_obj_str_get_str>
   1743e:	a903      	add	r1, sp, #12
   17440:	f7ff ff80 	bl	17344 <mp_vfs_lookup_path>
    if (existing_mount != MP_VFS_NONE && existing_mount != MP_VFS_ROOT) {
   17444:	2801      	cmp	r0, #1
   17446:	d90f      	bls.n	17468 <mp_vfs_mount+0x94>
        if (vfs->len != 1 && existing_mount->len == 1) {
   17448:	6863      	ldr	r3, [r4, #4]
   1744a:	2b01      	cmp	r3, #1
   1744c:	d004      	beq.n	17458 <mp_vfs_mount+0x84>
   1744e:	6843      	ldr	r3, [r0, #4]
   17450:	2b01      	cmp	r3, #1
   17452:	d101      	bne.n	17458 <mp_vfs_mount+0x84>
   17454:	4a0b      	ldr	r2, [pc, #44]	; (17484 <mp_vfs_mount+0xb0>)
   17456:	e008      	b.n	1746a <mp_vfs_mount+0x96>
            mp_raise_OSError(MP_EPERM);
   17458:	2001      	movs	r0, #1
   1745a:	f7f3 f92d 	bl	a6b8 <mp_raise_OSError>
            vfs->next = *vfsp;
   1745e:	60e3      	str	r3, [r4, #12]
    *vfsp = vfs;
   17460:	6014      	str	r4, [r2, #0]
}
   17462:	4809      	ldr	r0, [pc, #36]	; (17488 <mp_vfs_mount+0xb4>)
   17464:	b00a      	add	sp, #40	; 0x28
   17466:	bd70      	pop	{r4, r5, r6, pc}
   17468:	4a06      	ldr	r2, [pc, #24]	; (17484 <mp_vfs_mount+0xb0>)
    while (*vfsp != NULL) {
   1746a:	6813      	ldr	r3, [r2, #0]
   1746c:	2b00      	cmp	r3, #0
   1746e:	d0f7      	beq.n	17460 <mp_vfs_mount+0x8c>
        if ((*vfsp)->len == 1) {
   17470:	6859      	ldr	r1, [r3, #4]
   17472:	2901      	cmp	r1, #1
   17474:	d0f3      	beq.n	1745e <mp_vfs_mount+0x8a>
        vfsp = &(*vfsp)->next;
   17476:	f103 020c 	add.w	r2, r3, #12
   1747a:	e7f6      	b.n	1746a <mp_vfs_mount+0x96>
   1747c:	0002a698 	.word	0x0002a698
   17480:	0002a888 	.word	0x0002a888
   17484:	20000acc 	.word	0x20000acc
   17488:	00027b40 	.word	0x00027b40

0001748c <lookup_path>:
STATIC mp_vfs_mount_t *lookup_path(mp_obj_t path_in, mp_obj_t *path_out) {
   1748c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1748e:	b083      	sub	sp, #12
   17490:	4606      	mov	r6, r0
   17492:	460d      	mov	r5, r1
    const char *path = mp_obj_str_get_str(path_in);
   17494:	f7f8 feda 	bl	1024c <mp_obj_str_get_str>
    mp_vfs_mount_t *vfs = mp_vfs_lookup_path(path, &p_out);
   17498:	a901      	add	r1, sp, #4
   1749a:	f7ff ff53 	bl	17344 <mp_vfs_lookup_path>
   1749e:	4604      	mov	r4, r0
    if (vfs != MP_VFS_NONE && vfs != MP_VFS_ROOT) {
   174a0:	2801      	cmp	r0, #1
   174a2:	d802      	bhi.n	174aa <lookup_path+0x1e>
}
   174a4:	4620      	mov	r0, r4
   174a6:	b003      	add	sp, #12
   174a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *path_out = mp_obj_new_str_of_type(mp_obj_get_type(path_in),
   174aa:	4630      	mov	r0, r6
   174ac:	f7f3 fb66 	bl	ab7c <mp_obj_get_type>
   174b0:	4607      	mov	r7, r0
   174b2:	9e01      	ldr	r6, [sp, #4]
   174b4:	4630      	mov	r0, r6
   174b6:	f004 fa35 	bl	1b924 <strlen>
   174ba:	4602      	mov	r2, r0
   174bc:	4631      	mov	r1, r6
   174be:	4638      	mov	r0, r7
   174c0:	f7f8 fd6a 	bl	ff98 <mp_obj_new_str_of_type>
   174c4:	6028      	str	r0, [r5, #0]
    return vfs;
   174c6:	e7ed      	b.n	174a4 <lookup_path+0x18>

000174c8 <mp_vfs_open>:
mp_obj_t mp_vfs_open(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   174c8:	b510      	push	{r4, lr}
   174ca:	b086      	sub	sp, #24
    mp_arg_parse_all(n_args, pos_args, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   174cc:	ac02      	add	r4, sp, #8
   174ce:	9401      	str	r4, [sp, #4]
   174d0:	4b08      	ldr	r3, [pc, #32]	; (174f4 <mp_vfs_open+0x2c>)
   174d2:	9300      	str	r3, [sp, #0]
   174d4:	2304      	movs	r3, #4
   174d6:	f7f3 f951 	bl	a77c <mp_arg_parse_all>
    mp_vfs_mount_t *vfs = lookup_path((mp_obj_t)args[ARG_file].u_rom_obj, &args[ARG_file].u_obj);
   174da:	4621      	mov	r1, r4
   174dc:	9802      	ldr	r0, [sp, #8]
   174de:	f7ff ffd5 	bl	1748c <lookup_path>
    return mp_vfs_proxy_call(vfs, MP_QSTR_open, 2, (mp_obj_t*)&args);
   174e2:	4623      	mov	r3, r4
   174e4:	2202      	movs	r2, #2
   174e6:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
   174ea:	f7ff fe37 	bl	1715c <mp_vfs_proxy_call>
}
   174ee:	b006      	add	sp, #24
   174f0:	bd10      	pop	{r4, pc}
   174f2:	bf00      	nop
   174f4:	0002a6a8 	.word	0x0002a6a8

000174f8 <mp_vfs_chdir>:
mp_obj_t mp_vfs_chdir(mp_obj_t path_in) {
   174f8:	b500      	push	{lr}
   174fa:	b083      	sub	sp, #12
    mp_vfs_mount_t *vfs = lookup_path(path_in, &path_out);
   174fc:	a901      	add	r1, sp, #4
   174fe:	f7ff ffc5 	bl	1748c <lookup_path>
    MP_STATE_VM(vfs_cur) = vfs;
   17502:	4b10      	ldr	r3, [pc, #64]	; (17544 <mp_vfs_chdir+0x4c>)
   17504:	f8c3 0228 	str.w	r0, [r3, #552]	; 0x228
    if (vfs == MP_VFS_ROOT) {
   17508:	b148      	cbz	r0, 1751e <mp_vfs_chdir+0x26>
        mp_vfs_proxy_call(vfs, MP_QSTR_chdir, 1, &path_out);
   1750a:	ab01      	add	r3, sp, #4
   1750c:	2201      	movs	r2, #1
   1750e:	f44f 71ba 	mov.w	r1, #372	; 0x174
   17512:	f7ff fe23 	bl	1715c <mp_vfs_proxy_call>
}
   17516:	480c      	ldr	r0, [pc, #48]	; (17548 <mp_vfs_chdir+0x50>)
   17518:	b003      	add	sp, #12
   1751a:	f85d fb04 	ldr.w	pc, [sp], #4
        for (vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   1751e:	f8d3 022c 	ldr.w	r0, [r3, #556]	; 0x22c
   17522:	2800      	cmp	r0, #0
   17524:	d0f7      	beq.n	17516 <mp_vfs_chdir+0x1e>
            if (vfs->len == 1) {
   17526:	6843      	ldr	r3, [r0, #4]
   17528:	2b01      	cmp	r3, #1
   1752a:	d001      	beq.n	17530 <mp_vfs_chdir+0x38>
        for (vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   1752c:	68c0      	ldr	r0, [r0, #12]
   1752e:	e7f8      	b.n	17522 <mp_vfs_chdir+0x2a>
                mp_obj_t root = MP_OBJ_NEW_QSTR(MP_QSTR__slash_);
   17530:	ab02      	add	r3, sp, #8
   17532:	22a6      	movs	r2, #166	; 0xa6
   17534:	f843 2d08 	str.w	r2, [r3, #-8]!
                mp_vfs_proxy_call(vfs, MP_QSTR_chdir, 1, &root);
   17538:	2201      	movs	r2, #1
   1753a:	f44f 71ba 	mov.w	r1, #372	; 0x174
   1753e:	f7ff fe0d 	bl	1715c <mp_vfs_proxy_call>
   17542:	e7e8      	b.n	17516 <mp_vfs_chdir+0x1e>
   17544:	200008a0 	.word	0x200008a0
   17548:	00027b40 	.word	0x00027b40

0001754c <mp_vfs_ilistdir>:

mp_obj_t mp_vfs_ilistdir(size_t n_args, const mp_obj_t *args) {
   1754c:	b530      	push	{r4, r5, lr}
   1754e:	b083      	sub	sp, #12
    mp_obj_t path_in;
    if (n_args == 1) {
   17550:	2801      	cmp	r0, #1
   17552:	d00f      	beq.n	17574 <mp_vfs_ilistdir+0x28>
        path_in = args[0];
    } else {
        path_in = MP_OBJ_NEW_QSTR(MP_QSTR_);
   17554:	2506      	movs	r5, #6
    }

    mp_obj_t path_out;
    mp_vfs_mount_t *vfs = lookup_path(path_in, &path_out);
   17556:	a901      	add	r1, sp, #4
   17558:	4628      	mov	r0, r5
   1755a:	f7ff ff97 	bl	1748c <lookup_path>

    if (vfs == MP_VFS_ROOT) {
   1755e:	b158      	cbz	r0, 17578 <mp_vfs_ilistdir+0x2c>
        iter->is_str = mp_obj_get_type(path_in) == &mp_type_str;
        iter->is_iter = false;
        return MP_OBJ_FROM_PTR(iter);
    }

    return mp_vfs_proxy_call(vfs, MP_QSTR_ilistdir, 1, &path_out);
   17560:	ab01      	add	r3, sp, #4
   17562:	2201      	movs	r2, #1
   17564:	f240 11bb 	movw	r1, #443	; 0x1bb
   17568:	f7ff fdf8 	bl	1715c <mp_vfs_proxy_call>
   1756c:	4604      	mov	r4, r0
}
   1756e:	4620      	mov	r0, r4
   17570:	b003      	add	sp, #12
   17572:	bd30      	pop	{r4, r5, pc}
        path_in = args[0];
   17574:	680d      	ldr	r5, [r1, #0]
   17576:	e7ee      	b.n	17556 <mp_vfs_ilistdir+0xa>
        mp_vfs_ilistdir_it_t *iter = m_new_obj(mp_vfs_ilistdir_it_t);
   17578:	2010      	movs	r0, #16
   1757a:	f7e9 f99f 	bl	8bc <m_malloc>
   1757e:	4604      	mov	r4, r0
        iter->base.type = &mp_type_polymorph_iter;
   17580:	4b09      	ldr	r3, [pc, #36]	; (175a8 <mp_vfs_ilistdir+0x5c>)
   17582:	6003      	str	r3, [r0, #0]
        iter->iternext = mp_vfs_ilistdir_it_iternext;
   17584:	4b09      	ldr	r3, [pc, #36]	; (175ac <mp_vfs_ilistdir+0x60>)
   17586:	6043      	str	r3, [r0, #4]
        iter->cur.vfs = MP_STATE_VM(vfs_mount_table);
   17588:	4b09      	ldr	r3, [pc, #36]	; (175b0 <mp_vfs_ilistdir+0x64>)
   1758a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
   1758e:	6083      	str	r3, [r0, #8]
        iter->is_str = mp_obj_get_type(path_in) == &mp_type_str;
   17590:	4628      	mov	r0, r5
   17592:	f7f3 faf3 	bl	ab7c <mp_obj_get_type>
   17596:	4b07      	ldr	r3, [pc, #28]	; (175b4 <mp_vfs_ilistdir+0x68>)
   17598:	4283      	cmp	r3, r0
   1759a:	bf14      	ite	ne
   1759c:	2000      	movne	r0, #0
   1759e:	2001      	moveq	r0, #1
   175a0:	7320      	strb	r0, [r4, #12]
        iter->is_iter = false;
   175a2:	2300      	movs	r3, #0
   175a4:	7363      	strb	r3, [r4, #13]
        return MP_OBJ_FROM_PTR(iter);
   175a6:	e7e2      	b.n	1756e <mp_vfs_ilistdir+0x22>
   175a8:	00027b04 	.word	0x00027b04
   175ac:	000172c1 	.word	0x000172c1
   175b0:	200008a0 	.word	0x200008a0
   175b4:	00028104 	.word	0x00028104

000175b8 <mp_vfs_listdir>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_vfs_ilistdir_obj, 0, 1, mp_vfs_ilistdir);

mp_obj_t mp_vfs_listdir(size_t n_args, const mp_obj_t *args) {
   175b8:	b538      	push	{r3, r4, r5, lr}
    mp_obj_t iter = mp_vfs_ilistdir(n_args, args);
   175ba:	f7ff ffc7 	bl	1754c <mp_vfs_ilistdir>
   175be:	4605      	mov	r5, r0
    mp_obj_t dir_list = mp_obj_new_list(0, NULL);
   175c0:	2100      	movs	r1, #0
   175c2:	4608      	mov	r0, r1
   175c4:	f7f7 fa58 	bl	ea78 <mp_obj_new_list>
   175c8:	4604      	mov	r4, r0
    mp_obj_t next;
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   175ca:	e007      	b.n	175dc <mp_vfs_listdir+0x24>
        mp_obj_list_append(dir_list, mp_obj_subscr(next, MP_OBJ_NEW_SMALL_INT(0), MP_OBJ_SENTINEL));
   175cc:	2208      	movs	r2, #8
   175ce:	2101      	movs	r1, #1
   175d0:	f7f3 fe22 	bl	b218 <mp_obj_subscr>
   175d4:	4601      	mov	r1, r0
   175d6:	4620      	mov	r0, r4
   175d8:	f7f6 ff12 	bl	e400 <mp_obj_list_append>
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   175dc:	4628      	mov	r0, r5
   175de:	f7f2 fa05 	bl	99ec <mp_iternext>
   175e2:	2804      	cmp	r0, #4
   175e4:	d1f2      	bne.n	175cc <mp_vfs_listdir+0x14>
    }
    return dir_list;
}
   175e6:	4620      	mov	r0, r4
   175e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000175ec <mp_vfs_mkdir>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_vfs_listdir_obj, 0, 1, mp_vfs_listdir);

mp_obj_t mp_vfs_mkdir(mp_obj_t path_in) {
   175ec:	b510      	push	{r4, lr}
   175ee:	b082      	sub	sp, #8
    mp_obj_t path_out;
    mp_vfs_mount_t *vfs = lookup_path(path_in, &path_out);
   175f0:	a901      	add	r1, sp, #4
   175f2:	f7ff ff4b 	bl	1748c <lookup_path>
    if (vfs == MP_VFS_ROOT || (vfs != MP_VFS_NONE && !strcmp(mp_obj_str_get_str(path_out), "/"))) {
   175f6:	b190      	cbz	r0, 1761e <mp_vfs_mkdir+0x32>
   175f8:	4604      	mov	r4, r0
   175fa:	2801      	cmp	r0, #1
   175fc:	d006      	beq.n	1760c <mp_vfs_mkdir+0x20>
   175fe:	9801      	ldr	r0, [sp, #4]
   17600:	f7f8 fe24 	bl	1024c <mp_obj_str_get_str>
   17604:	4907      	ldr	r1, [pc, #28]	; (17624 <mp_vfs_mkdir+0x38>)
   17606:	f004 f997 	bl	1b938 <strcmp>
   1760a:	b140      	cbz	r0, 1761e <mp_vfs_mkdir+0x32>
        mp_raise_OSError(MP_EEXIST);
    }
    return mp_vfs_proxy_call(vfs, MP_QSTR_mkdir, 1, &path_out);
   1760c:	ab01      	add	r3, sp, #4
   1760e:	2201      	movs	r2, #1
   17610:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   17614:	4620      	mov	r0, r4
   17616:	f7ff fda1 	bl	1715c <mp_vfs_proxy_call>
}
   1761a:	b002      	add	sp, #8
   1761c:	bd10      	pop	{r4, pc}
        mp_raise_OSError(MP_EEXIST);
   1761e:	2011      	movs	r0, #17
   17620:	f7f3 f84a 	bl	a6b8 <mp_raise_OSError>
   17624:	0002a6f0 	.word	0x0002a6f0

00017628 <mp_vfs_remove>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_vfs_mkdir_obj, mp_vfs_mkdir);

mp_obj_t mp_vfs_remove(mp_obj_t path_in) {
   17628:	b500      	push	{lr}
   1762a:	b083      	sub	sp, #12
    mp_obj_t path_out;
    mp_vfs_mount_t *vfs = lookup_path(path_in, &path_out);
   1762c:	a901      	add	r1, sp, #4
   1762e:	f7ff ff2d 	bl	1748c <lookup_path>
    return mp_vfs_proxy_call(vfs, MP_QSTR_remove, 1, &path_out);
   17632:	ab01      	add	r3, sp, #4
   17634:	2201      	movs	r2, #1
   17636:	f240 2121 	movw	r1, #545	; 0x221
   1763a:	f7ff fd8f 	bl	1715c <mp_vfs_proxy_call>
}
   1763e:	b003      	add	sp, #12
   17640:	f85d fb04 	ldr.w	pc, [sp], #4

00017644 <mp_vfs_rename>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_vfs_remove_obj, mp_vfs_remove);

mp_obj_t mp_vfs_rename(mp_obj_t old_path_in, mp_obj_t new_path_in) {
   17644:	b530      	push	{r4, r5, lr}
   17646:	b083      	sub	sp, #12
   17648:	460d      	mov	r5, r1
    mp_obj_t args[2];
    mp_vfs_mount_t *old_vfs = lookup_path(old_path_in, &args[0]);
   1764a:	4669      	mov	r1, sp
   1764c:	f7ff ff1e 	bl	1748c <lookup_path>
   17650:	4604      	mov	r4, r0
    mp_vfs_mount_t *new_vfs = lookup_path(new_path_in, &args[1]);
   17652:	a901      	add	r1, sp, #4
   17654:	4628      	mov	r0, r5
   17656:	f7ff ff19 	bl	1748c <lookup_path>
    if (old_vfs != new_vfs) {
   1765a:	4284      	cmp	r4, r0
   1765c:	d108      	bne.n	17670 <mp_vfs_rename+0x2c>
        // can't rename across filesystems
        mp_raise_OSError(MP_EPERM);
    }
    return mp_vfs_proxy_call(old_vfs, MP_QSTR_rename, 2, args);
   1765e:	466b      	mov	r3, sp
   17660:	2202      	movs	r2, #2
   17662:	f240 2122 	movw	r1, #546	; 0x222
   17666:	4620      	mov	r0, r4
   17668:	f7ff fd78 	bl	1715c <mp_vfs_proxy_call>
}
   1766c:	b003      	add	sp, #12
   1766e:	bd30      	pop	{r4, r5, pc}
        mp_raise_OSError(MP_EPERM);
   17670:	2001      	movs	r0, #1
   17672:	f7f3 f821 	bl	a6b8 <mp_raise_OSError>

00017676 <mp_vfs_rmdir>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_vfs_rename_obj, mp_vfs_rename);

mp_obj_t mp_vfs_rmdir(mp_obj_t path_in) {
   17676:	b500      	push	{lr}
   17678:	b083      	sub	sp, #12
    mp_obj_t path_out;
    mp_vfs_mount_t *vfs = lookup_path(path_in, &path_out);
   1767a:	a901      	add	r1, sp, #4
   1767c:	f7ff ff06 	bl	1748c <lookup_path>
    return mp_vfs_proxy_call(vfs, MP_QSTR_rmdir, 1, &path_out);
   17680:	ab01      	add	r3, sp, #4
   17682:	2201      	movs	r2, #1
   17684:	f44f 710b 	mov.w	r1, #556	; 0x22c
   17688:	f7ff fd68 	bl	1715c <mp_vfs_proxy_call>
}
   1768c:	b003      	add	sp, #12
   1768e:	f85d fb04 	ldr.w	pc, [sp], #4

00017692 <mp_vfs_stat>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_vfs_rmdir_obj, mp_vfs_rmdir);

mp_obj_t mp_vfs_stat(mp_obj_t path_in) {
   17692:	b510      	push	{r4, lr}
   17694:	b082      	sub	sp, #8
    mp_obj_t path_out;
    mp_vfs_mount_t *vfs = lookup_path(path_in, &path_out);
   17696:	a901      	add	r1, sp, #4
   17698:	f7ff fef8 	bl	1748c <lookup_path>
    if (vfs == MP_VFS_ROOT) {
   1769c:	b138      	cbz	r0, 176ae <mp_vfs_stat+0x1c>
        for (int i = 1; i <= 9; ++i) {
            t->items[i] = MP_OBJ_NEW_SMALL_INT(0); // dev, nlink, uid, gid, size, atime, mtime, ctime
        }
        return MP_OBJ_FROM_PTR(t);
    }
    return mp_vfs_proxy_call(vfs, MP_QSTR_stat, 1, &path_out);
   1769e:	ab01      	add	r3, sp, #4
   176a0:	2201      	movs	r2, #1
   176a2:	f240 2145 	movw	r1, #581	; 0x245
   176a6:	f7ff fd59 	bl	1715c <mp_vfs_proxy_call>
}
   176aa:	b002      	add	sp, #8
   176ac:	bd10      	pop	{r4, pc}
        mp_obj_tuple_t *t = MP_OBJ_TO_PTR(mp_obj_new_tuple(10, NULL));
   176ae:	2100      	movs	r1, #0
   176b0:	200a      	movs	r0, #10
   176b2:	f7fa f8c7 	bl	11844 <mp_obj_new_tuple>
        t->items[0] = MP_OBJ_NEW_SMALL_INT(MP_S_IFDIR); // st_mode
   176b6:	f248 0301 	movw	r3, #32769	; 0x8001
   176ba:	6083      	str	r3, [r0, #8]
        for (int i = 1; i <= 9; ++i) {
   176bc:	2301      	movs	r3, #1
   176be:	e004      	b.n	176ca <mp_vfs_stat+0x38>
            t->items[i] = MP_OBJ_NEW_SMALL_INT(0); // dev, nlink, uid, gid, size, atime, mtime, ctime
   176c0:	1c9a      	adds	r2, r3, #2
   176c2:	2101      	movs	r1, #1
   176c4:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        for (int i = 1; i <= 9; ++i) {
   176c8:	440b      	add	r3, r1
   176ca:	2b09      	cmp	r3, #9
   176cc:	ddf8      	ble.n	176c0 <mp_vfs_stat+0x2e>
   176ce:	e7ec      	b.n	176aa <mp_vfs_stat+0x18>

000176d0 <mp_vfs_statvfs>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_vfs_stat_obj, mp_vfs_stat);

mp_obj_t mp_vfs_statvfs(mp_obj_t path_in) {
   176d0:	b510      	push	{r4, lr}
   176d2:	b082      	sub	sp, #8
    mp_obj_t path_out;
    mp_vfs_mount_t *vfs = lookup_path(path_in, &path_out);
   176d4:	a901      	add	r1, sp, #4
   176d6:	f7ff fed9 	bl	1748c <lookup_path>
    if (vfs == MP_VFS_ROOT) {
   176da:	4604      	mov	r4, r0
   176dc:	b140      	cbz	r0, 176f0 <mp_vfs_statvfs+0x20>
        }

        // VFS mounted at root so delegate the call to it
        path_out = MP_OBJ_NEW_QSTR(MP_QSTR__slash_);
    }
    return mp_vfs_proxy_call(vfs, MP_QSTR_statvfs, 1, &path_out);
   176de:	ab01      	add	r3, sp, #4
   176e0:	2201      	movs	r2, #1
   176e2:	f240 2147 	movw	r1, #583	; 0x247
   176e6:	4620      	mov	r0, r4
   176e8:	f7ff fd38 	bl	1715c <mp_vfs_proxy_call>
}
   176ec:	b002      	add	sp, #8
   176ee:	bd10      	pop	{r4, pc}
        for (vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   176f0:	4b0e      	ldr	r3, [pc, #56]	; (1772c <mp_vfs_statvfs+0x5c>)
   176f2:	f8d3 422c 	ldr.w	r4, [r3, #556]	; 0x22c
   176f6:	b124      	cbz	r4, 17702 <mp_vfs_statvfs+0x32>
            if (vfs->len == 1) {
   176f8:	6863      	ldr	r3, [r4, #4]
   176fa:	2b01      	cmp	r3, #1
   176fc:	d001      	beq.n	17702 <mp_vfs_statvfs+0x32>
        for (vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   176fe:	68e4      	ldr	r4, [r4, #12]
   17700:	e7f9      	b.n	176f6 <mp_vfs_statvfs+0x26>
        if (vfs == NULL) {
   17702:	b114      	cbz	r4, 1770a <mp_vfs_statvfs+0x3a>
        path_out = MP_OBJ_NEW_QSTR(MP_QSTR__slash_);
   17704:	23a6      	movs	r3, #166	; 0xa6
   17706:	9301      	str	r3, [sp, #4]
   17708:	e7e9      	b.n	176de <mp_vfs_statvfs+0xe>
            mp_obj_tuple_t *t = MP_OBJ_TO_PTR(mp_obj_new_tuple(10, NULL));
   1770a:	2100      	movs	r1, #0
   1770c:	200a      	movs	r0, #10
   1770e:	f7fa f899 	bl	11844 <mp_obj_new_tuple>
            for (int i = 0; i <= 8; ++i) {
   17712:	2300      	movs	r3, #0
   17714:	e004      	b.n	17720 <mp_vfs_statvfs+0x50>
                t->items[i] = MP_OBJ_NEW_SMALL_INT(0);
   17716:	1c9a      	adds	r2, r3, #2
   17718:	2101      	movs	r1, #1
   1771a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
            for (int i = 0; i <= 8; ++i) {
   1771e:	440b      	add	r3, r1
   17720:	2b08      	cmp	r3, #8
   17722:	ddf8      	ble.n	17716 <mp_vfs_statvfs+0x46>
            t->items[9] = MP_OBJ_NEW_SMALL_INT(MICROPY_ALLOC_PATH_MAX);
   17724:	f240 2301 	movw	r3, #513	; 0x201
   17728:	62c3      	str	r3, [r0, #44]	; 0x2c
            return MP_OBJ_FROM_PTR(t);
   1772a:	e7df      	b.n	176ec <mp_vfs_statvfs+0x1c>
   1772c:	200008a0 	.word	0x200008a0

00017730 <mp_vfs_import_stat>:
mp_import_stat_t mp_vfs_import_stat(const char *path) {
   17730:	b530      	push	{r4, r5, lr}
   17732:	b091      	sub	sp, #68	; 0x44
    mp_vfs_mount_t *vfs = mp_vfs_lookup_path(path, &path_out);
   17734:	a90f      	add	r1, sp, #60	; 0x3c
   17736:	f7ff fe05 	bl	17344 <mp_vfs_lookup_path>
    if (vfs == MP_VFS_NONE || vfs == MP_VFS_ROOT) {
   1773a:	2801      	cmp	r0, #1
   1773c:	d802      	bhi.n	17744 <mp_vfs_import_stat+0x14>
        return MP_IMPORT_STAT_NO_EXIST;
   1773e:	2000      	movs	r0, #0
}
   17740:	b011      	add	sp, #68	; 0x44
   17742:	bd30      	pop	{r4, r5, pc}
   17744:	4604      	mov	r4, r0
    if (mp_obj_get_type(vfs->obj) == &mp_fat_vfs_type) {
   17746:	6880      	ldr	r0, [r0, #8]
   17748:	f7f3 fa18 	bl	ab7c <mp_obj_get_type>
   1774c:	4b18      	ldr	r3, [pc, #96]	; (177b0 <mp_vfs_import_stat+0x80>)
   1774e:	4283      	cmp	r3, r0
   17750:	d00e      	beq.n	17770 <mp_vfs_import_stat+0x40>
    mp_obj_t path_o = mp_obj_new_str(path_out, strlen(path_out));
   17752:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   17754:	4628      	mov	r0, r5
   17756:	f004 f8e5 	bl	1b924 <strlen>
   1775a:	4601      	mov	r1, r0
   1775c:	4628      	mov	r0, r5
   1775e:	f7f8 fb05 	bl	fd6c <mp_obj_new_str>
   17762:	900e      	str	r0, [sp, #56]	; 0x38
    if (nlr_push(&nlr) == 0) {
   17764:	a802      	add	r0, sp, #8
   17766:	f7e9 f879 	bl	85c <nlr_push>
   1776a:	b130      	cbz	r0, 1777a <mp_vfs_import_stat+0x4a>
        return MP_IMPORT_STAT_NO_EXIST;
   1776c:	2000      	movs	r0, #0
   1776e:	e7e7      	b.n	17740 <mp_vfs_import_stat+0x10>
        return fat_vfs_import_stat(MP_OBJ_TO_PTR(vfs->obj), path_out);
   17770:	990f      	ldr	r1, [sp, #60]	; 0x3c
   17772:	68a0      	ldr	r0, [r4, #8]
   17774:	f000 fae6 	bl	17d44 <fat_vfs_import_stat>
   17778:	e7e2      	b.n	17740 <mp_vfs_import_stat+0x10>
        stat = mp_vfs_proxy_call(vfs, MP_QSTR_stat, 1, &path_o);
   1777a:	ab0e      	add	r3, sp, #56	; 0x38
   1777c:	2201      	movs	r2, #1
   1777e:	f240 2145 	movw	r1, #581	; 0x245
   17782:	4620      	mov	r0, r4
   17784:	f7ff fcea 	bl	1715c <mp_vfs_proxy_call>
   17788:	4604      	mov	r4, r0
        nlr_pop();
   1778a:	f7e9 f85f 	bl	84c <nlr_pop>
    mp_obj_get_array_fixed_n(stat, 10, &items);
   1778e:	aa01      	add	r2, sp, #4
   17790:	210a      	movs	r1, #10
   17792:	4620      	mov	r0, r4
   17794:	f7f3 fc5c 	bl	b050 <mp_obj_get_array_fixed_n>
    mp_int_t st_mode = mp_obj_get_int(items[0]);
   17798:	9b01      	ldr	r3, [sp, #4]
   1779a:	6818      	ldr	r0, [r3, #0]
   1779c:	f7f3 fb16 	bl	adcc <mp_obj_get_int>
    if (st_mode & MP_S_IFDIR) {
   177a0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   177a4:	d001      	beq.n	177aa <mp_vfs_import_stat+0x7a>
        return MP_IMPORT_STAT_DIR;
   177a6:	2001      	movs	r0, #1
   177a8:	e7ca      	b.n	17740 <mp_vfs_import_stat+0x10>
        return MP_IMPORT_STAT_FILE;
   177aa:	2002      	movs	r0, #2
   177ac:	e7c8      	b.n	17740 <mp_vfs_import_stat+0x10>
   177ae:	bf00      	nop
   177b0:	0002a888 	.word	0x0002a888

000177b4 <mp_reader_vfs_readbyte>:
    uint16_t len;
    uint16_t pos;
    byte buf[24];
} mp_reader_vfs_t;

STATIC mp_uint_t mp_reader_vfs_readbyte(void *data) {
   177b4:	b510      	push	{r4, lr}
   177b6:	b084      	sub	sp, #16
   177b8:	4604      	mov	r4, r0
    mp_reader_vfs_t *reader = (mp_reader_vfs_t*)data;
    if (reader->pos >= reader->len) {
   177ba:	88c2      	ldrh	r2, [r0, #6]
   177bc:	8883      	ldrh	r3, [r0, #4]
   177be:	429a      	cmp	r2, r3
   177c0:	d310      	bcc.n	177e4 <mp_reader_vfs_readbyte+0x30>
        if (reader->len < sizeof(reader->buf)) {
   177c2:	2b17      	cmp	r3, #23
   177c4:	d918      	bls.n	177f8 <mp_reader_vfs_readbyte+0x44>
            return MP_READER_EOF;
        } else {
            int errcode;
            reader->len = mp_stream_rw(reader->file, reader->buf, sizeof(reader->buf),
   177c6:	2301      	movs	r3, #1
   177c8:	9300      	str	r3, [sp, #0]
   177ca:	ab03      	add	r3, sp, #12
   177cc:	2218      	movs	r2, #24
   177ce:	f100 0108 	add.w	r1, r0, #8
   177d2:	6800      	ldr	r0, [r0, #0]
   177d4:	f7fb f9a5 	bl	12b22 <mp_stream_rw>
   177d8:	b280      	uxth	r0, r0
   177da:	80a0      	strh	r0, [r4, #4]
                &errcode, MP_STREAM_RW_READ | MP_STREAM_RW_ONCE);
            if (errcode != 0) {
   177dc:	9b03      	ldr	r3, [sp, #12]
   177de:	b943      	cbnz	r3, 177f2 <mp_reader_vfs_readbyte+0x3e>
                // TODO handle errors properly
                return MP_READER_EOF;
            }
            if (reader->len == 0) {
   177e0:	b138      	cbz	r0, 177f2 <mp_reader_vfs_readbyte+0x3e>
                return MP_READER_EOF;
            }
            reader->pos = 0;
   177e2:	80e3      	strh	r3, [r4, #6]
        }
    }
    return reader->buf[reader->pos++];
   177e4:	88e3      	ldrh	r3, [r4, #6]
   177e6:	1c5a      	adds	r2, r3, #1
   177e8:	80e2      	strh	r2, [r4, #6]
   177ea:	441c      	add	r4, r3
   177ec:	7a20      	ldrb	r0, [r4, #8]
}
   177ee:	b004      	add	sp, #16
   177f0:	bd10      	pop	{r4, pc}
                return MP_READER_EOF;
   177f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177f6:	e7fa      	b.n	177ee <mp_reader_vfs_readbyte+0x3a>
            return MP_READER_EOF;
   177f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177fc:	e7f7      	b.n	177ee <mp_reader_vfs_readbyte+0x3a>

000177fe <mp_reader_vfs_close>:

STATIC void mp_reader_vfs_close(void *data) {
   177fe:	b510      	push	{r4, lr}
   17800:	4604      	mov	r4, r0
    mp_reader_vfs_t *reader = (mp_reader_vfs_t*)data;
    mp_stream_close(reader->file);
   17802:	6800      	ldr	r0, [r0, #0]
   17804:	f7fb fb16 	bl	12e34 <mp_stream_close>
    m_del_obj(mp_reader_vfs_t, reader);
   17808:	4620      	mov	r0, r4
   1780a:	f7e9 f880 	bl	90e <m_free>
}
   1780e:	bd10      	pop	{r4, pc}

00017810 <mp_reader_new_file>:

void mp_reader_new_file(mp_reader_t *reader, const char *filename) {
   17810:	b570      	push	{r4, r5, r6, lr}
   17812:	b084      	sub	sp, #16
   17814:	4605      	mov	r5, r0
   17816:	460e      	mov	r6, r1
    mp_reader_vfs_t *rf = m_new_obj(mp_reader_vfs_t);
   17818:	2020      	movs	r0, #32
   1781a:	f7e9 f84f 	bl	8bc <m_malloc>
   1781e:	4604      	mov	r4, r0
    mp_obj_t arg = mp_obj_new_str(filename, strlen(filename));
   17820:	4630      	mov	r0, r6
   17822:	f004 f87f 	bl	1b924 <strlen>
   17826:	4601      	mov	r1, r0
   17828:	4630      	mov	r0, r6
   1782a:	f7f8 fa9f 	bl	fd6c <mp_obj_new_str>
   1782e:	a904      	add	r1, sp, #16
   17830:	f841 0d04 	str.w	r0, [r1, #-4]!
    rf->file = mp_vfs_open(1, &arg, (mp_map_t*)&mp_const_empty_map);
   17834:	4a0d      	ldr	r2, [pc, #52]	; (1786c <mp_reader_new_file+0x5c>)
   17836:	2001      	movs	r0, #1
   17838:	f7ff fe46 	bl	174c8 <mp_vfs_open>
   1783c:	4621      	mov	r1, r4
   1783e:	f841 0b08 	str.w	r0, [r1], #8
    int errcode;
    rf->len = mp_stream_rw(rf->file, rf->buf, sizeof(rf->buf), &errcode, MP_STREAM_RW_READ | MP_STREAM_RW_ONCE);
   17842:	2301      	movs	r3, #1
   17844:	9300      	str	r3, [sp, #0]
   17846:	ab02      	add	r3, sp, #8
   17848:	2218      	movs	r2, #24
   1784a:	f7fb f96a 	bl	12b22 <mp_stream_rw>
   1784e:	80a0      	strh	r0, [r4, #4]
    if (errcode != 0) {
   17850:	9802      	ldr	r0, [sp, #8]
   17852:	b940      	cbnz	r0, 17866 <mp_reader_new_file+0x56>
        mp_raise_OSError(errcode);
    }
    rf->pos = 0;
   17854:	2300      	movs	r3, #0
   17856:	80e3      	strh	r3, [r4, #6]
    reader->data = rf;
   17858:	602c      	str	r4, [r5, #0]
    reader->readbyte = mp_reader_vfs_readbyte;
   1785a:	4b05      	ldr	r3, [pc, #20]	; (17870 <mp_reader_new_file+0x60>)
   1785c:	606b      	str	r3, [r5, #4]
    reader->close = mp_reader_vfs_close;
   1785e:	4b05      	ldr	r3, [pc, #20]	; (17874 <mp_reader_new_file+0x64>)
   17860:	60ab      	str	r3, [r5, #8]
}
   17862:	b004      	add	sp, #16
   17864:	bd70      	pop	{r4, r5, r6, pc}
        mp_raise_OSError(errcode);
   17866:	f7f2 ff27 	bl	a6b8 <mp_raise_OSError>
   1786a:	bf00      	nop
   1786c:	00025ab4 	.word	0x00025ab4
   17870:	000177b5 	.word	0x000177b5
   17874:	000177ff 	.word	0x000177ff

00017878 <vfs_fat_umount>:

STATIC mp_obj_t vfs_fat_umount(mp_obj_t self_in) {
    (void)self_in;
    // keep the FAT filesystem mounted internally so the VFS methods can still be used
    return mp_const_none;
}
   17878:	4800      	ldr	r0, [pc, #0]	; (1787c <vfs_fat_umount+0x4>)
   1787a:	4770      	bx	lr
   1787c:	00027b40 	.word	0x00027b40

00017880 <vfs_fat_mount>:
STATIC mp_obj_t vfs_fat_mount(mp_obj_t self_in, mp_obj_t readonly, mp_obj_t mkfs) {
   17880:	b530      	push	{r4, r5, lr}
   17882:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
   17886:	4604      	mov	r4, r0
   17888:	4615      	mov	r5, r2
    if (mp_obj_is_true(readonly)) {
   1788a:	4608      	mov	r0, r1
   1788c:	f7f3 fc76 	bl	b17c <mp_obj_is_true>
   17890:	b108      	cbz	r0, 17896 <vfs_fat_mount+0x16>
        self->writeblocks[0] = MP_OBJ_NULL;
   17892:	2300      	movs	r3, #0
   17894:	61a3      	str	r3, [r4, #24]
    FRESULT res = (self->flags & FSUSER_NO_FILESYSTEM) ? FR_NO_FILESYSTEM : FR_OK;
   17896:	88a3      	ldrh	r3, [r4, #4]
   17898:	f013 0f08 	tst.w	r3, #8
   1789c:	d109      	bne.n	178b2 <vfs_fat_mount+0x32>
   1789e:	2000      	movs	r0, #0
    if (res != FR_OK) {
   178a0:	b9c0      	cbnz	r0, 178d4 <vfs_fat_mount+0x54>
    self->flags &= ~FSUSER_NO_FILESYSTEM;
   178a2:	88a3      	ldrh	r3, [r4, #4]
   178a4:	f023 0308 	bic.w	r3, r3, #8
   178a8:	80a3      	strh	r3, [r4, #4]
}
   178aa:	480c      	ldr	r0, [pc, #48]	; (178dc <vfs_fat_mount+0x5c>)
   178ac:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
   178b0:	bd30      	pop	{r4, r5, pc}
    if (res == FR_NO_FILESYSTEM && mp_obj_is_true(mkfs)) {
   178b2:	4628      	mov	r0, r5
   178b4:	f7f3 fc62 	bl	b17c <mp_obj_is_true>
   178b8:	b908      	cbnz	r0, 178be <vfs_fat_mount+0x3e>
    FRESULT res = (self->flags & FSUSER_NO_FILESYSTEM) ? FR_NO_FILESYSTEM : FR_OK;
   178ba:	200d      	movs	r0, #13
   178bc:	e7f0      	b.n	178a0 <vfs_fat_mount+0x20>
        res = f_mkfs(&self->fatfs, FM_FAT | FM_SFD, 0, working_buf, sizeof(working_buf));
   178be:	f44f 7300 	mov.w	r3, #512	; 0x200
   178c2:	9300      	str	r3, [sp, #0]
   178c4:	ab02      	add	r3, sp, #8
   178c6:	2200      	movs	r2, #0
   178c8:	2109      	movs	r1, #9
   178ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   178ce:	f006 fc57 	bl	1e180 <f_mkfs>
   178d2:	e7e5      	b.n	178a0 <vfs_fat_mount+0x20>
        mp_raise_OSError(fresult_to_errno_table[res]);
   178d4:	4b02      	ldr	r3, [pc, #8]	; (178e0 <vfs_fat_mount+0x60>)
   178d6:	5c18      	ldrb	r0, [r3, r0]
   178d8:	f7f2 feee 	bl	a6b8 <mp_raise_OSError>
   178dc:	00027b40 	.word	0x00027b40
   178e0:	0002a968 	.word	0x0002a968

000178e4 <fat_vfs_statvfs>:
STATIC mp_obj_t fat_vfs_statvfs(mp_obj_t vfs_in, mp_obj_t path_in) {
   178e4:	b510      	push	{r4, lr}
   178e6:	b082      	sub	sp, #8
   178e8:	4604      	mov	r4, r0
    FRESULT res = f_getfree(fatfs, &nclst);
   178ea:	a901      	add	r1, sp, #4
   178ec:	3038      	adds	r0, #56	; 0x38
   178ee:	f006 fa4a 	bl	1dd86 <f_getfree>
    if (FR_OK != res) {
   178f2:	bb00      	cbnz	r0, 17936 <fat_vfs_statvfs+0x52>
    mp_obj_tuple_t *t = MP_OBJ_TO_PTR(mp_obj_new_tuple(10, NULL));
   178f4:	2100      	movs	r1, #0
   178f6:	200a      	movs	r0, #10
   178f8:	f7f9 ffa4 	bl	11844 <mp_obj_new_tuple>
    t->items[0] = MP_OBJ_NEW_SMALL_INT(fatfs->csize * SECSIZE(fatfs)); // f_bsize
   178fc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
   17900:	0292      	lsls	r2, r2, #10
   17902:	f042 0201 	orr.w	r2, r2, #1
   17906:	6082      	str	r2, [r0, #8]
    t->items[1] = t->items[0]; // f_frsize
   17908:	60c2      	str	r2, [r0, #12]
    t->items[2] = MP_OBJ_NEW_SMALL_INT((fatfs->n_fatent - 2)); // f_blocks
   1790a:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1790c:	3a02      	subs	r2, #2
   1790e:	0052      	lsls	r2, r2, #1
   17910:	f042 0201 	orr.w	r2, r2, #1
   17914:	6102      	str	r2, [r0, #16]
    t->items[3] = MP_OBJ_NEW_SMALL_INT(nclst); // f_bfree
   17916:	9a01      	ldr	r2, [sp, #4]
   17918:	0052      	lsls	r2, r2, #1
   1791a:	f042 0201 	orr.w	r2, r2, #1
   1791e:	6142      	str	r2, [r0, #20]
    t->items[4] = t->items[3]; // f_bavail
   17920:	6182      	str	r2, [r0, #24]
    t->items[5] = MP_OBJ_NEW_SMALL_INT(0); // f_files
   17922:	2201      	movs	r2, #1
   17924:	61c2      	str	r2, [r0, #28]
    t->items[6] = MP_OBJ_NEW_SMALL_INT(0); // f_ffree
   17926:	6202      	str	r2, [r0, #32]
    t->items[7] = MP_OBJ_NEW_SMALL_INT(0); // f_favail
   17928:	6242      	str	r2, [r0, #36]	; 0x24
    t->items[8] = MP_OBJ_NEW_SMALL_INT(0); // f_flags
   1792a:	6282      	str	r2, [r0, #40]	; 0x28
    t->items[9] = MP_OBJ_NEW_SMALL_INT(_MAX_LFN); // f_namemax
   1792c:	f240 12ff 	movw	r2, #511	; 0x1ff
   17930:	62c2      	str	r2, [r0, #44]	; 0x2c
}
   17932:	b002      	add	sp, #8
   17934:	bd10      	pop	{r4, pc}
        mp_raise_OSError(fresult_to_errno_table[res]);
   17936:	4a02      	ldr	r2, [pc, #8]	; (17940 <fat_vfs_statvfs+0x5c>)
   17938:	5c10      	ldrb	r0, [r2, r0]
   1793a:	f7f2 febd 	bl	a6b8 <mp_raise_OSError>
   1793e:	bf00      	nop
   17940:	0002a968 	.word	0x0002a968

00017944 <fat_vfs_stat>:
STATIC mp_obj_t fat_vfs_stat(mp_obj_t vfs_in, mp_obj_t path_in) {
   17944:	b570      	push	{r4, r5, r6, lr}
   17946:	b0c8      	sub	sp, #288	; 0x120
   17948:	4604      	mov	r4, r0
    const char *path = mp_obj_str_get_str(path_in);
   1794a:	4608      	mov	r0, r1
   1794c:	f7f8 fc7e 	bl	1024c <mp_obj_str_get_str>
    if (path[0] == 0 || (path[0] == '/' && path[1] == 0)) {
   17950:	7803      	ldrb	r3, [r0, #0]
   17952:	b123      	cbz	r3, 1795e <fat_vfs_stat+0x1a>
   17954:	2b2f      	cmp	r3, #47	; 0x2f
   17956:	d146      	bne.n	179e6 <fat_vfs_stat+0xa2>
   17958:	7843      	ldrb	r3, [r0, #1]
   1795a:	2b00      	cmp	r3, #0
   1795c:	d143      	bne.n	179e6 <fat_vfs_stat+0xa2>
        fno.fsize = 0;
   1795e:	2300      	movs	r3, #0
   17960:	9302      	str	r3, [sp, #8]
        fno.fdate = 0x2821; // Jan 1, 2000
   17962:	f642 0221 	movw	r2, #10273	; 0x2821
   17966:	f8ad 200c 	strh.w	r2, [sp, #12]
        fno.ftime = 0;
   1796a:	f8ad 300e 	strh.w	r3, [sp, #14]
        fno.fattrib = AM_DIR;
   1796e:	2310      	movs	r3, #16
   17970:	f88d 3010 	strb.w	r3, [sp, #16]
    mp_obj_tuple_t *t = MP_OBJ_TO_PTR(mp_obj_new_tuple(10, NULL));
   17974:	2100      	movs	r1, #0
   17976:	200a      	movs	r0, #10
   17978:	f7f9 ff64 	bl	11844 <mp_obj_new_tuple>
   1797c:	4604      	mov	r4, r0
    if (fno.fattrib & AM_DIR) {
   1797e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   17982:	f013 0f10 	tst.w	r3, #16
   17986:	d13a      	bne.n	179fe <fat_vfs_stat+0xba>
        mode |= MP_S_IFREG;
   17988:	f44f 4600 	mov.w	r6, #32768	; 0x8000
        1980 + ((fno.fdate >> 9) & 0x7f),
   1798c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   17990:	0a48      	lsrs	r0, r1, #9
        (fno.ftime >> 11) & 0x1f,
   17992:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        2 * (fno.ftime & 0x1f)
   17996:	f003 021f 	and.w	r2, r3, #31
   1799a:	0052      	lsls	r2, r2, #1
    mp_int_t seconds = timeutils_seconds_since_2000(
   1799c:	9201      	str	r2, [sp, #4]
   1799e:	f3c3 1245 	ubfx	r2, r3, #5, #6
   179a2:	9200      	str	r2, [sp, #0]
   179a4:	0adb      	lsrs	r3, r3, #11
   179a6:	f001 021f 	and.w	r2, r1, #31
   179aa:	f3c1 1143 	ubfx	r1, r1, #5, #4
   179ae:	f200 70bc 	addw	r0, r0, #1980	; 0x7bc
   179b2:	f004 faf7 	bl	1bfa4 <timeutils_seconds_since_2000>
   179b6:	4605      	mov	r5, r0
    t->items[0] = MP_OBJ_NEW_SMALL_INT(mode); // st_mode
   179b8:	0076      	lsls	r6, r6, #1
   179ba:	f046 0601 	orr.w	r6, r6, #1
   179be:	60a6      	str	r6, [r4, #8]
    t->items[1] = MP_OBJ_NEW_SMALL_INT(0); // st_ino
   179c0:	2301      	movs	r3, #1
   179c2:	60e3      	str	r3, [r4, #12]
    t->items[2] = MP_OBJ_NEW_SMALL_INT(0); // st_dev
   179c4:	6123      	str	r3, [r4, #16]
    t->items[3] = MP_OBJ_NEW_SMALL_INT(0); // st_nlink
   179c6:	6163      	str	r3, [r4, #20]
    t->items[4] = MP_OBJ_NEW_SMALL_INT(0); // st_uid
   179c8:	61a3      	str	r3, [r4, #24]
    t->items[5] = MP_OBJ_NEW_SMALL_INT(0); // st_gid
   179ca:	61e3      	str	r3, [r4, #28]
    t->items[6] = mp_obj_new_int_from_uint(fno.fsize); // st_size
   179cc:	9802      	ldr	r0, [sp, #8]
   179ce:	f7f6 fad1 	bl	df74 <mp_obj_new_int_from_uint>
   179d2:	6220      	str	r0, [r4, #32]
    t->items[7] = MP_OBJ_NEW_SMALL_INT(seconds); // st_atime
   179d4:	0068      	lsls	r0, r5, #1
   179d6:	f040 0001 	orr.w	r0, r0, #1
   179da:	6260      	str	r0, [r4, #36]	; 0x24
    t->items[8] = MP_OBJ_NEW_SMALL_INT(seconds); // st_mtime
   179dc:	62a0      	str	r0, [r4, #40]	; 0x28
    t->items[9] = MP_OBJ_NEW_SMALL_INT(seconds); // st_ctime
   179de:	62e0      	str	r0, [r4, #44]	; 0x2c
}
   179e0:	4620      	mov	r0, r4
   179e2:	b048      	add	sp, #288	; 0x120
   179e4:	bd70      	pop	{r4, r5, r6, pc}
        FRESULT res = f_stat(&self->fatfs, path, &fno);
   179e6:	aa02      	add	r2, sp, #8
   179e8:	4601      	mov	r1, r0
   179ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
   179ee:	f006 f9ab 	bl	1dd48 <f_stat>
        if (res != FR_OK) {
   179f2:	2800      	cmp	r0, #0
   179f4:	d0be      	beq.n	17974 <fat_vfs_stat+0x30>
            mp_raise_OSError(fresult_to_errno_table[res]);
   179f6:	4a03      	ldr	r2, [pc, #12]	; (17a04 <fat_vfs_stat+0xc0>)
   179f8:	5c10      	ldrb	r0, [r2, r0]
   179fa:	f7f2 fe5d 	bl	a6b8 <mp_raise_OSError>
        mode |= MP_S_IFDIR;
   179fe:	f44f 4680 	mov.w	r6, #16384	; 0x4000
   17a02:	e7c3      	b.n	1798c <fat_vfs_stat+0x48>
   17a04:	0002a968 	.word	0x0002a968

00017a08 <fat_vfs_remove_internal>:
STATIC mp_obj_t fat_vfs_remove_internal(mp_obj_t vfs_in, mp_obj_t path_in, mp_int_t attr) {
   17a08:	b570      	push	{r4, r5, r6, lr}
   17a0a:	b0c6      	sub	sp, #280	; 0x118
   17a0c:	4604      	mov	r4, r0
   17a0e:	4616      	mov	r6, r2
    const char *path = mp_obj_str_get_str(path_in);
   17a10:	4608      	mov	r0, r1
   17a12:	f7f8 fc1b 	bl	1024c <mp_obj_str_get_str>
   17a16:	4605      	mov	r5, r0
    FRESULT res = f_stat(&self->fatfs, path, &fno);
   17a18:	3438      	adds	r4, #56	; 0x38
   17a1a:	466a      	mov	r2, sp
   17a1c:	4601      	mov	r1, r0
   17a1e:	4620      	mov	r0, r4
   17a20:	f006 f992 	bl	1dd48 <f_stat>
    if (res != FR_OK) {
   17a24:	b968      	cbnz	r0, 17a42 <fat_vfs_remove_internal+0x3a>
    if ((fno.fattrib & AM_DIR) == attr) {
   17a26:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17a2a:	f003 0310 	and.w	r3, r3, #16
   17a2e:	42b3      	cmp	r3, r6
   17a30:	d10f      	bne.n	17a52 <fat_vfs_remove_internal+0x4a>
        res = f_unlink(&self->fatfs, path);
   17a32:	4629      	mov	r1, r5
   17a34:	4620      	mov	r0, r4
   17a36:	f006 fa09 	bl	1de4c <f_unlink>
        if (res != FR_OK) {
   17a3a:	b930      	cbnz	r0, 17a4a <fat_vfs_remove_internal+0x42>
}
   17a3c:	4808      	ldr	r0, [pc, #32]	; (17a60 <fat_vfs_remove_internal+0x58>)
   17a3e:	b046      	add	sp, #280	; 0x118
   17a40:	bd70      	pop	{r4, r5, r6, pc}
        mp_raise_OSError(fresult_to_errno_table[res]);
   17a42:	4a08      	ldr	r2, [pc, #32]	; (17a64 <fat_vfs_remove_internal+0x5c>)
   17a44:	5c10      	ldrb	r0, [r2, r0]
   17a46:	f7f2 fe37 	bl	a6b8 <mp_raise_OSError>
            mp_raise_OSError(fresult_to_errno_table[res]);
   17a4a:	4a06      	ldr	r2, [pc, #24]	; (17a64 <fat_vfs_remove_internal+0x5c>)
   17a4c:	5c10      	ldrb	r0, [r2, r0]
   17a4e:	f7f2 fe33 	bl	a6b8 <mp_raise_OSError>
        mp_raise_OSError(attr ? MP_ENOTDIR : MP_EISDIR);
   17a52:	b116      	cbz	r6, 17a5a <fat_vfs_remove_internal+0x52>
   17a54:	2014      	movs	r0, #20
   17a56:	f7f2 fe2f 	bl	a6b8 <mp_raise_OSError>
   17a5a:	2015      	movs	r0, #21
   17a5c:	e7fb      	b.n	17a56 <fat_vfs_remove_internal+0x4e>
   17a5e:	bf00      	nop
   17a60:	00027b40 	.word	0x00027b40
   17a64:	0002a968 	.word	0x0002a968

00017a68 <fat_vfs_rename>:
STATIC mp_obj_t fat_vfs_rename(mp_obj_t vfs_in, mp_obj_t path_in, mp_obj_t path_out) {
   17a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a6c:	4607      	mov	r7, r0
   17a6e:	4690      	mov	r8, r2
    const char *old_path = mp_obj_str_get_str(path_in);
   17a70:	4608      	mov	r0, r1
   17a72:	f7f8 fbeb 	bl	1024c <mp_obj_str_get_str>
   17a76:	4605      	mov	r5, r0
    const char *new_path = mp_obj_str_get_str(path_out);
   17a78:	4640      	mov	r0, r8
   17a7a:	f7f8 fbe7 	bl	1024c <mp_obj_str_get_str>
   17a7e:	4606      	mov	r6, r0
    FRESULT res = f_rename(&self->fatfs, old_path, new_path);
   17a80:	f107 0438 	add.w	r4, r7, #56	; 0x38
   17a84:	4602      	mov	r2, r0
   17a86:	4629      	mov	r1, r5
   17a88:	4620      	mov	r0, r4
   17a8a:	f006 fae9 	bl	1e060 <f_rename>
    if (res == FR_EXIST) {
   17a8e:	2808      	cmp	r0, #8
   17a90:	d003      	beq.n	17a9a <fat_vfs_rename+0x32>
    if (res == FR_OK) {
   17a92:	b968      	cbnz	r0, 17ab0 <fat_vfs_rename+0x48>
}
   17a94:	4808      	ldr	r0, [pc, #32]	; (17ab8 <fat_vfs_rename+0x50>)
   17a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        fat_vfs_remove_internal(vfs_in, path_out, 0); // 0 == file attribute
   17a9a:	2200      	movs	r2, #0
   17a9c:	4641      	mov	r1, r8
   17a9e:	4638      	mov	r0, r7
   17aa0:	f7ff ffb2 	bl	17a08 <fat_vfs_remove_internal>
        res = f_rename(&self->fatfs, old_path, new_path);
   17aa4:	4632      	mov	r2, r6
   17aa6:	4629      	mov	r1, r5
   17aa8:	4620      	mov	r0, r4
   17aaa:	f006 fad9 	bl	1e060 <f_rename>
   17aae:	e7f0      	b.n	17a92 <fat_vfs_rename+0x2a>
        mp_raise_OSError(fresult_to_errno_table[res]);
   17ab0:	4b02      	ldr	r3, [pc, #8]	; (17abc <fat_vfs_rename+0x54>)
   17ab2:	5c18      	ldrb	r0, [r3, r0]
   17ab4:	f7f2 fe00 	bl	a6b8 <mp_raise_OSError>
   17ab8:	00027b40 	.word	0x00027b40
   17abc:	0002a968 	.word	0x0002a968

00017ac0 <fat_vfs_remove>:
STATIC mp_obj_t fat_vfs_remove(mp_obj_t vfs_in, mp_obj_t path_in) {
   17ac0:	b508      	push	{r3, lr}
    return fat_vfs_remove_internal(vfs_in, path_in, 0); // 0 == file attribute
   17ac2:	2200      	movs	r2, #0
   17ac4:	f7ff ffa0 	bl	17a08 <fat_vfs_remove_internal>
}
   17ac8:	bd08      	pop	{r3, pc}

00017aca <fat_vfs_rmdir>:
STATIC mp_obj_t fat_vfs_rmdir(mp_obj_t vfs_in, mp_obj_t path_in) {
   17aca:	b508      	push	{r3, lr}
    return fat_vfs_remove_internal(vfs_in, path_in, AM_DIR);
   17acc:	2210      	movs	r2, #16
   17ace:	f7ff ff9b 	bl	17a08 <fat_vfs_remove_internal>
}
   17ad2:	bd08      	pop	{r3, pc}

00017ad4 <fat_vfs_getcwd>:
STATIC mp_obj_t fat_vfs_getcwd(mp_obj_t vfs_in) {
   17ad4:	b500      	push	{lr}
   17ad6:	b0c3      	sub	sp, #268	; 0x10c
    FRESULT res = f_getcwd(&self->fatfs, buf, sizeof(buf));
   17ad8:	f240 1201 	movw	r2, #257	; 0x101
   17adc:	a901      	add	r1, sp, #4
   17ade:	3038      	adds	r0, #56	; 0x38
   17ae0:	f005 ffd6 	bl	1da90 <f_getcwd>
    if (res != FR_OK) {
   17ae4:	b948      	cbnz	r0, 17afa <fat_vfs_getcwd+0x26>
    return mp_obj_new_str(buf, strlen(buf));
   17ae6:	a801      	add	r0, sp, #4
   17ae8:	f003 ff1c 	bl	1b924 <strlen>
   17aec:	4601      	mov	r1, r0
   17aee:	a801      	add	r0, sp, #4
   17af0:	f7f8 f93c 	bl	fd6c <mp_obj_new_str>
}
   17af4:	b043      	add	sp, #268	; 0x10c
   17af6:	f85d fb04 	ldr.w	pc, [sp], #4
        mp_raise_OSError(fresult_to_errno_table[res]);
   17afa:	4a02      	ldr	r2, [pc, #8]	; (17b04 <fat_vfs_getcwd+0x30>)
   17afc:	5c10      	ldrb	r0, [r2, r0]
   17afe:	f7f2 fddb 	bl	a6b8 <mp_raise_OSError>
   17b02:	bf00      	nop
   17b04:	0002a968 	.word	0x0002a968

00017b08 <fat_vfs_chdir>:
STATIC mp_obj_t fat_vfs_chdir(mp_obj_t vfs_in, mp_obj_t path_in) {
   17b08:	b510      	push	{r4, lr}
   17b0a:	4604      	mov	r4, r0
    path = mp_obj_str_get_str(path_in);
   17b0c:	4608      	mov	r0, r1
   17b0e:	f7f8 fb9d 	bl	1024c <mp_obj_str_get_str>
    FRESULT res = f_chdir(&self->fatfs, path);
   17b12:	4601      	mov	r1, r0
   17b14:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17b18:	f005 ff90 	bl	1da3c <f_chdir>
    if (res != FR_OK) {
   17b1c:	b908      	cbnz	r0, 17b22 <fat_vfs_chdir+0x1a>
}
   17b1e:	4803      	ldr	r0, [pc, #12]	; (17b2c <fat_vfs_chdir+0x24>)
   17b20:	bd10      	pop	{r4, pc}
        mp_raise_OSError(fresult_to_errno_table[res]);
   17b22:	4a03      	ldr	r2, [pc, #12]	; (17b30 <fat_vfs_chdir+0x28>)
   17b24:	5c10      	ldrb	r0, [r2, r0]
   17b26:	f7f2 fdc7 	bl	a6b8 <mp_raise_OSError>
   17b2a:	bf00      	nop
   17b2c:	00027b40 	.word	0x00027b40
   17b30:	0002a968 	.word	0x0002a968

00017b34 <fat_vfs_mkdir>:
STATIC mp_obj_t fat_vfs_mkdir(mp_obj_t vfs_in, mp_obj_t path_o) {
   17b34:	b510      	push	{r4, lr}
   17b36:	4604      	mov	r4, r0
    const char *path = mp_obj_str_get_str(path_o);
   17b38:	4608      	mov	r0, r1
   17b3a:	f7f8 fb87 	bl	1024c <mp_obj_str_get_str>
    FRESULT res = f_mkdir(&self->fatfs, path);
   17b3e:	4601      	mov	r1, r0
   17b40:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17b44:	f006 f9d4 	bl	1def0 <f_mkdir>
    if (res == FR_OK) {
   17b48:	b908      	cbnz	r0, 17b4e <fat_vfs_mkdir+0x1a>
}
   17b4a:	4803      	ldr	r0, [pc, #12]	; (17b58 <fat_vfs_mkdir+0x24>)
   17b4c:	bd10      	pop	{r4, pc}
        mp_raise_OSError(fresult_to_errno_table[res]);
   17b4e:	4a03      	ldr	r2, [pc, #12]	; (17b5c <fat_vfs_mkdir+0x28>)
   17b50:	5c10      	ldrb	r0, [r2, r0]
   17b52:	f7f2 fdb1 	bl	a6b8 <mp_raise_OSError>
   17b56:	bf00      	nop
   17b58:	00027b40 	.word	0x00027b40
   17b5c:	0002a968 	.word	0x0002a968

00017b60 <fat_vfs_ilistdir_func>:
STATIC mp_obj_t fat_vfs_ilistdir_func(size_t n_args, const mp_obj_t *args) {
   17b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mp_obj_fat_vfs_t *self = MP_OBJ_TO_PTR(args[0]);
   17b62:	680d      	ldr	r5, [r1, #0]
    if (n_args == 2) {
   17b64:	2802      	cmp	r0, #2
   17b66:	d014      	beq.n	17b92 <fat_vfs_ilistdir_func+0x32>
        path = "";
   17b68:	4e13      	ldr	r6, [pc, #76]	; (17bb8 <fat_vfs_ilistdir_func+0x58>)
    bool is_str_type = true;
   17b6a:	2701      	movs	r7, #1
    mp_vfs_fat_ilistdir_it_t *iter = m_new_obj(mp_vfs_fat_ilistdir_it_t);
   17b6c:	203c      	movs	r0, #60	; 0x3c
   17b6e:	f7e8 fea5 	bl	8bc <m_malloc>
   17b72:	4604      	mov	r4, r0
    iter->base.type = &mp_type_polymorph_iter;
   17b74:	4b11      	ldr	r3, [pc, #68]	; (17bbc <fat_vfs_ilistdir_func+0x5c>)
   17b76:	6003      	str	r3, [r0, #0]
    iter->iternext = mp_vfs_fat_ilistdir_it_iternext;
   17b78:	4b11      	ldr	r3, [pc, #68]	; (17bc0 <fat_vfs_ilistdir_func+0x60>)
   17b7a:	6043      	str	r3, [r0, #4]
    iter->is_str = is_str_type;
   17b7c:	7207      	strb	r7, [r0, #8]
    FRESULT res = f_opendir(&self->fatfs, &iter->dir, path);
   17b7e:	4632      	mov	r2, r6
   17b80:	f100 010c 	add.w	r1, r0, #12
   17b84:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17b88:	f006 f887 	bl	1dc9a <f_opendir>
    if (res != FR_OK) {
   17b8c:	b980      	cbnz	r0, 17bb0 <fat_vfs_ilistdir_func+0x50>
}
   17b8e:	4620      	mov	r0, r4
   17b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17b92:	460c      	mov	r4, r1
        if (mp_obj_get_type(args[1]) == &mp_type_bytes) {
   17b94:	6848      	ldr	r0, [r1, #4]
   17b96:	f7f2 fff1 	bl	ab7c <mp_obj_get_type>
   17b9a:	4b0a      	ldr	r3, [pc, #40]	; (17bc4 <fat_vfs_ilistdir_func+0x64>)
   17b9c:	4283      	cmp	r3, r0
   17b9e:	d005      	beq.n	17bac <fat_vfs_ilistdir_func+0x4c>
    bool is_str_type = true;
   17ba0:	2701      	movs	r7, #1
        path = mp_obj_str_get_str(args[1]);
   17ba2:	6860      	ldr	r0, [r4, #4]
   17ba4:	f7f8 fb52 	bl	1024c <mp_obj_str_get_str>
   17ba8:	4606      	mov	r6, r0
   17baa:	e7df      	b.n	17b6c <fat_vfs_ilistdir_func+0xc>
            is_str_type = false;
   17bac:	2700      	movs	r7, #0
   17bae:	e7f8      	b.n	17ba2 <fat_vfs_ilistdir_func+0x42>
        mp_raise_OSError(fresult_to_errno_table[res]);
   17bb0:	4a05      	ldr	r2, [pc, #20]	; (17bc8 <fat_vfs_ilistdir_func+0x68>)
   17bb2:	5c10      	ldrb	r0, [r2, r0]
   17bb4:	f7f2 fd80 	bl	a6b8 <mp_raise_OSError>
   17bb8:	0002bd00 	.word	0x0002bd00
   17bbc:	00027b04 	.word	0x00027b04
   17bc0:	00017bcd 	.word	0x00017bcd
   17bc4:	000280c8 	.word	0x000280c8
   17bc8:	0002a968 	.word	0x0002a968

00017bcc <mp_vfs_fat_ilistdir_it_iternext>:
STATIC mp_obj_t mp_vfs_fat_ilistdir_it_iternext(mp_obj_t self_in) {
   17bcc:	b530      	push	{r4, r5, lr}
   17bce:	b0c7      	sub	sp, #284	; 0x11c
   17bd0:	4605      	mov	r5, r0
        FRESULT res = f_readdir(&self->dir, &fno);
   17bd2:	f100 040c 	add.w	r4, r0, #12
   17bd6:	4669      	mov	r1, sp
   17bd8:	4620      	mov	r0, r4
   17bda:	f006 f896 	bl	1dd0a <f_readdir>
        if (res != FR_OK || fn[0] == 0) {
   17bde:	b910      	cbnz	r0, 17be6 <mp_vfs_fat_ilistdir_it_iternext+0x1a>
   17be0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   17be4:	b933      	cbnz	r3, 17bf4 <mp_vfs_fat_ilistdir_it_iternext+0x28>
    f_closedir(&self->dir);
   17be6:	4620      	mov	r0, r4
   17be8:	f006 f886 	bl	1dcf8 <f_closedir>
    return MP_OBJ_STOP_ITERATION;
   17bec:	2404      	movs	r4, #4
}
   17bee:	4620      	mov	r0, r4
   17bf0:	b047      	add	sp, #284	; 0x11c
   17bf2:	bd30      	pop	{r4, r5, pc}
        mp_obj_tuple_t *t = MP_OBJ_TO_PTR(mp_obj_new_tuple(4, NULL));
   17bf4:	2100      	movs	r1, #0
   17bf6:	2004      	movs	r0, #4
   17bf8:	f7f9 fe24 	bl	11844 <mp_obj_new_tuple>
   17bfc:	4604      	mov	r4, r0
        if (self->is_str) {
   17bfe:	7a2b      	ldrb	r3, [r5, #8]
   17c00:	b1c3      	cbz	r3, 17c34 <mp_vfs_fat_ilistdir_it_iternext+0x68>
            t->items[0] = mp_obj_new_str(fn, strlen(fn));
   17c02:	f10d 0016 	add.w	r0, sp, #22
   17c06:	f003 fe8d 	bl	1b924 <strlen>
   17c0a:	4601      	mov	r1, r0
   17c0c:	f10d 0016 	add.w	r0, sp, #22
   17c10:	f7f8 f8ac 	bl	fd6c <mp_obj_new_str>
   17c14:	60a0      	str	r0, [r4, #8]
        if (fno.fattrib & AM_DIR) {
   17c16:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17c1a:	f013 0f10 	tst.w	r3, #16
   17c1e:	d014      	beq.n	17c4a <mp_vfs_fat_ilistdir_it_iternext+0x7e>
            t->items[1] = MP_OBJ_NEW_SMALL_INT(MP_S_IFDIR);
   17c20:	f248 0301 	movw	r3, #32769	; 0x8001
   17c24:	60e3      	str	r3, [r4, #12]
        t->items[2] = MP_OBJ_NEW_SMALL_INT(0); // no inode number
   17c26:	2301      	movs	r3, #1
   17c28:	6123      	str	r3, [r4, #16]
        t->items[3] = mp_obj_new_int_from_uint(fno.fsize);
   17c2a:	9800      	ldr	r0, [sp, #0]
   17c2c:	f7f6 f9a2 	bl	df74 <mp_obj_new_int_from_uint>
   17c30:	6160      	str	r0, [r4, #20]
   17c32:	e7dc      	b.n	17bee <mp_vfs_fat_ilistdir_it_iternext+0x22>
            t->items[0] = mp_obj_new_bytes((const byte*)fn, strlen(fn));
   17c34:	f10d 0016 	add.w	r0, sp, #22
   17c38:	f003 fe74 	bl	1b924 <strlen>
   17c3c:	4601      	mov	r1, r0
   17c3e:	f10d 0016 	add.w	r0, sp, #22
   17c42:	f7f8 f90b 	bl	fe5c <mp_obj_new_bytes>
   17c46:	60a0      	str	r0, [r4, #8]
   17c48:	e7e5      	b.n	17c16 <mp_vfs_fat_ilistdir_it_iternext+0x4a>
            t->items[1] = MP_OBJ_NEW_SMALL_INT(MP_S_IFREG);
   17c4a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   17c4e:	60e3      	str	r3, [r4, #12]
   17c50:	e7e9      	b.n	17c26 <mp_vfs_fat_ilistdir_it_iternext+0x5a>
	...

00017c54 <fat_vfs_make_new>:
STATIC mp_obj_t fat_vfs_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17c54:	b570      	push	{r4, r5, r6, lr}
   17c56:	b082      	sub	sp, #8
   17c58:	4606      	mov	r6, r0
   17c5a:	4608      	mov	r0, r1
   17c5c:	4611      	mov	r1, r2
   17c5e:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   17c60:	2300      	movs	r3, #0
   17c62:	9300      	str	r3, [sp, #0]
   17c64:	2301      	movs	r3, #1
   17c66:	461a      	mov	r2, r3
   17c68:	f7f2 fd56 	bl	a718 <mp_arg_check_num>
    fs_user_mount_t *vfs = m_new_obj(fs_user_mount_t);
   17c6c:	f44f 701d 	mov.w	r0, #628	; 0x274
   17c70:	f7e8 fe24 	bl	8bc <m_malloc>
   17c74:	4604      	mov	r4, r0
    vfs->base.type = type;
   17c76:	6006      	str	r6, [r0, #0]
    vfs->flags = FSUSER_FREE_OBJ;
   17c78:	2302      	movs	r3, #2
   17c7a:	8083      	strh	r3, [r0, #4]
    vfs->fatfs.drv = vfs;
   17c7c:	6380      	str	r0, [r0, #56]	; 0x38
    mp_load_method(args[0], MP_QSTR_readblocks, vfs->readblocks);
   17c7e:	f100 0208 	add.w	r2, r0, #8
   17c82:	f44f 7106 	mov.w	r1, #536	; 0x218
   17c86:	6828      	ldr	r0, [r5, #0]
   17c88:	f7f1 fdc0 	bl	980c <mp_load_method>
    mp_load_method_maybe(args[0], MP_QSTR_writeblocks, vfs->writeblocks);
   17c8c:	f104 0218 	add.w	r2, r4, #24
   17c90:	f240 217d 	movw	r1, #637	; 0x27d
   17c94:	6828      	ldr	r0, [r5, #0]
   17c96:	f7f1 fd77 	bl	9788 <mp_load_method_maybe>
    mp_load_method_maybe(args[0], MP_QSTR_ioctl, vfs->u.ioctl);
   17c9a:	f104 0228 	add.w	r2, r4, #40	; 0x28
   17c9e:	f240 11c3 	movw	r1, #451	; 0x1c3
   17ca2:	6828      	ldr	r0, [r5, #0]
   17ca4:	f7f1 fd70 	bl	9788 <mp_load_method_maybe>
    if (vfs->u.ioctl[0] != MP_OBJ_NULL) {
   17ca8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17caa:	b16b      	cbz	r3, 17cc8 <fat_vfs_make_new+0x74>
        vfs->flags |= FSUSER_HAVE_IOCTL;
   17cac:	88a3      	ldrh	r3, [r4, #4]
   17cae:	f043 0304 	orr.w	r3, r3, #4
   17cb2:	80a3      	strh	r3, [r4, #4]
    FRESULT res = f_mount(&vfs->fatfs);
   17cb4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17cb8:	f005 fc5a 	bl	1d570 <f_mount>
    if (res == FR_NO_FILESYSTEM) {
   17cbc:	280d      	cmp	r0, #13
   17cbe:	d012      	beq.n	17ce6 <fat_vfs_make_new+0x92>
    } else if (res != FR_OK) {
   17cc0:	b9b0      	cbnz	r0, 17cf0 <fat_vfs_make_new+0x9c>
}
   17cc2:	4620      	mov	r0, r4
   17cc4:	b002      	add	sp, #8
   17cc6:	bd70      	pop	{r4, r5, r6, pc}
        mp_load_method_maybe(args[0], MP_QSTR_sync, vfs->u.old.sync);
   17cc8:	f104 0228 	add.w	r2, r4, #40	; 0x28
   17ccc:	f44f 7114 	mov.w	r1, #592	; 0x250
   17cd0:	6828      	ldr	r0, [r5, #0]
   17cd2:	f7f1 fd59 	bl	9788 <mp_load_method_maybe>
        mp_load_method(args[0], MP_QSTR_count, vfs->u.old.count);
   17cd6:	f104 0230 	add.w	r2, r4, #48	; 0x30
   17cda:	f44f 71c0 	mov.w	r1, #384	; 0x180
   17cde:	6828      	ldr	r0, [r5, #0]
   17ce0:	f7f1 fd94 	bl	980c <mp_load_method>
   17ce4:	e7e6      	b.n	17cb4 <fat_vfs_make_new+0x60>
        vfs->flags |= FSUSER_NO_FILESYSTEM;
   17ce6:	88a3      	ldrh	r3, [r4, #4]
   17ce8:	f043 0308 	orr.w	r3, r3, #8
   17cec:	80a3      	strh	r3, [r4, #4]
   17cee:	e7e8      	b.n	17cc2 <fat_vfs_make_new+0x6e>
        mp_raise_OSError(fresult_to_errno_table[res]);
   17cf0:	4b01      	ldr	r3, [pc, #4]	; (17cf8 <fat_vfs_make_new+0xa4>)
   17cf2:	5c18      	ldrb	r0, [r3, r0]
   17cf4:	f7f2 fce0 	bl	a6b8 <mp_raise_OSError>
   17cf8:	0002a968 	.word	0x0002a968

00017cfc <fat_vfs_mkfs>:
STATIC mp_obj_t fat_vfs_mkfs(mp_obj_t bdev_in) {
   17cfc:	b500      	push	{lr}
   17cfe:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   17d02:	9003      	str	r0, [sp, #12]
    fs_user_mount_t *vfs = MP_OBJ_TO_PTR(fat_vfs_make_new(&mp_fat_vfs_type, 1, 0, &bdev_in));
   17d04:	ab03      	add	r3, sp, #12
   17d06:	2200      	movs	r2, #0
   17d08:	2101      	movs	r1, #1
   17d0a:	480b      	ldr	r0, [pc, #44]	; (17d38 <fat_vfs_mkfs+0x3c>)
   17d0c:	f7ff ffa2 	bl	17c54 <fat_vfs_make_new>
    FRESULT res = f_mkfs(&vfs->fatfs, FM_FAT | FM_SFD, 0, working_buf, sizeof(working_buf));
   17d10:	f44f 7300 	mov.w	r3, #512	; 0x200
   17d14:	9300      	str	r3, [sp, #0]
   17d16:	ab04      	add	r3, sp, #16
   17d18:	2200      	movs	r2, #0
   17d1a:	2109      	movs	r1, #9
   17d1c:	3038      	adds	r0, #56	; 0x38
   17d1e:	f006 fa2f 	bl	1e180 <f_mkfs>
    if (res != FR_OK) {
   17d22:	b920      	cbnz	r0, 17d2e <fat_vfs_mkfs+0x32>
}
   17d24:	4805      	ldr	r0, [pc, #20]	; (17d3c <fat_vfs_mkfs+0x40>)
   17d26:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   17d2a:	f85d fb04 	ldr.w	pc, [sp], #4
        mp_raise_OSError(fresult_to_errno_table[res]);
   17d2e:	4a04      	ldr	r2, [pc, #16]	; (17d40 <fat_vfs_mkfs+0x44>)
   17d30:	5c10      	ldrb	r0, [r2, r0]
   17d32:	f7f2 fcc1 	bl	a6b8 <mp_raise_OSError>
   17d36:	bf00      	nop
   17d38:	0002a888 	.word	0x0002a888
   17d3c:	00027b40 	.word	0x00027b40
   17d40:	0002a968 	.word	0x0002a968

00017d44 <fat_vfs_import_stat>:
mp_import_stat_t fat_vfs_import_stat(fs_user_mount_t *vfs, const char *path) {
   17d44:	b500      	push	{lr}
   17d46:	b0c7      	sub	sp, #284	; 0x11c
    assert(vfs != NULL);
   17d48:	b158      	cbz	r0, 17d62 <fat_vfs_import_stat+0x1e>
    FRESULT res = f_stat(&vfs->fatfs, path, &fno);
   17d4a:	466a      	mov	r2, sp
   17d4c:	3038      	adds	r0, #56	; 0x38
   17d4e:	f005 fffb 	bl	1dd48 <f_stat>
    if (res == FR_OK) {
   17d52:	b960      	cbnz	r0, 17d6e <fat_vfs_import_stat+0x2a>
        if ((fno.fattrib & AM_DIR) != 0) {
   17d54:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17d58:	f013 0f10 	tst.w	r3, #16
   17d5c:	d00b      	beq.n	17d76 <fat_vfs_import_stat+0x32>
            return MP_IMPORT_STAT_DIR;
   17d5e:	2001      	movs	r0, #1
   17d60:	e006      	b.n	17d70 <fat_vfs_import_stat+0x2c>
    assert(vfs != NULL);
   17d62:	4b06      	ldr	r3, [pc, #24]	; (17d7c <fat_vfs_import_stat+0x38>)
   17d64:	4a06      	ldr	r2, [pc, #24]	; (17d80 <fat_vfs_import_stat+0x3c>)
   17d66:	2134      	movs	r1, #52	; 0x34
   17d68:	4806      	ldr	r0, [pc, #24]	; (17d84 <fat_vfs_import_stat+0x40>)
   17d6a:	f000 fbf7 	bl	1855c <__assert_func>
    return MP_IMPORT_STAT_NO_EXIST;
   17d6e:	2000      	movs	r0, #0
}
   17d70:	b047      	add	sp, #284	; 0x11c
   17d72:	f85d fb04 	ldr.w	pc, [sp], #4
            return MP_IMPORT_STAT_FILE;
   17d76:	2002      	movs	r0, #2
   17d78:	e7fa      	b.n	17d70 <fat_vfs_import_stat+0x2c>
   17d7a:	bf00      	nop
   17d7c:	0002a7a4 	.word	0x0002a7a4
   17d80:	0002a774 	.word	0x0002a774
   17d84:	0002a7b0 	.word	0x0002a7b0

00017d88 <disk_get_device>:
#endif

typedef void *bdev_t;
STATIC fs_user_mount_t *disk_get_device(void *bdev) {
    return (fs_user_mount_t*)bdev;
}
   17d88:	4770      	bx	lr

00017d8a <disk_status>:

STATIC
DSTATUS disk_status (
    bdev_t pdrv      /* Physical drive nmuber (0..) */
)
{
   17d8a:	b508      	push	{r3, lr}
    fs_user_mount_t *vfs = disk_get_device(pdrv);
   17d8c:	f7ff fffc 	bl	17d88 <disk_get_device>
    if (vfs == NULL) {
   17d90:	b128      	cbz	r0, 17d9e <disk_status+0x14>
        return STA_NOINIT;
    }

    if (vfs->writeblocks[0] == MP_OBJ_NULL) {
   17d92:	6983      	ldr	r3, [r0, #24]
   17d94:	b10b      	cbz	r3, 17d9a <disk_status+0x10>
        return STA_PROTECT;
    } else {
        return 0;
   17d96:	2000      	movs	r0, #0
    }
}
   17d98:	bd08      	pop	{r3, pc}
        return STA_PROTECT;
   17d9a:	2004      	movs	r0, #4
   17d9c:	e7fc      	b.n	17d98 <disk_status+0xe>
        return STA_NOINIT;
   17d9e:	2001      	movs	r0, #1
   17da0:	e7fa      	b.n	17d98 <disk_status+0xe>
	...

00017da4 <disk_initialize>:
{
   17da4:	b510      	push	{r4, lr}
    fs_user_mount_t *vfs = disk_get_device(pdrv);
   17da6:	f7ff ffef 	bl	17d88 <disk_get_device>
    if (vfs == NULL) {
   17daa:	b1d8      	cbz	r0, 17de4 <disk_initialize+0x40>
   17dac:	4604      	mov	r4, r0
    if (vfs->flags & FSUSER_HAVE_IOCTL) {
   17dae:	8883      	ldrh	r3, [r0, #4]
   17db0:	f013 0f04 	tst.w	r3, #4
   17db4:	d103      	bne.n	17dbe <disk_initialize+0x1a>
    if (vfs->writeblocks[0] == MP_OBJ_NULL) {
   17db6:	69a3      	ldr	r3, [r4, #24]
   17db8:	b193      	cbz	r3, 17de0 <disk_initialize+0x3c>
        return 0;
   17dba:	2000      	movs	r0, #0
}
   17dbc:	bd10      	pop	{r4, pc}
        vfs->u.ioctl[2] = MP_OBJ_NEW_SMALL_INT(BP_IOCTL_INIT);
   17dbe:	2303      	movs	r3, #3
   17dc0:	6303      	str	r3, [r0, #48]	; 0x30
        vfs->u.ioctl[3] = MP_OBJ_NEW_SMALL_INT(0); // unused
   17dc2:	2301      	movs	r3, #1
   17dc4:	6343      	str	r3, [r0, #52]	; 0x34
        mp_obj_t ret = mp_call_method_n_kw(2, 0, vfs->u.ioctl);
   17dc6:	f100 0228 	add.w	r2, r0, #40	; 0x28
   17dca:	2100      	movs	r1, #0
   17dcc:	2002      	movs	r0, #2
   17dce:	f7f1 fc8c 	bl	96ea <mp_call_method_n_kw>
        if (ret != mp_const_none && MP_OBJ_SMALL_INT_VALUE(ret) != 0) {
   17dd2:	4b05      	ldr	r3, [pc, #20]	; (17de8 <disk_initialize+0x44>)
   17dd4:	4298      	cmp	r0, r3
   17dd6:	d0ee      	beq.n	17db6 <disk_initialize+0x12>
   17dd8:	0843      	lsrs	r3, r0, #1
   17dda:	d0ec      	beq.n	17db6 <disk_initialize+0x12>
            return STA_NOINIT;
   17ddc:	2001      	movs	r0, #1
   17dde:	e7ed      	b.n	17dbc <disk_initialize+0x18>
        return STA_PROTECT;
   17de0:	2004      	movs	r0, #4
   17de2:	e7eb      	b.n	17dbc <disk_initialize+0x18>
        return STA_NOINIT;
   17de4:	2001      	movs	r0, #1
   17de6:	e7e9      	b.n	17dbc <disk_initialize+0x18>
   17de8:	00027b40 	.word	0x00027b40

00017dec <disk_read>:
    bdev_t pdrv,      /* Physical drive nmuber (0..) */
    BYTE *buff,        /* Data buffer to store read data */
    DWORD sector,    /* Sector address (LBA) */
    UINT count        /* Number of sectors to read (1..128) */
)
{
   17dec:	b570      	push	{r4, r5, r6, lr}
   17dee:	b084      	sub	sp, #16
   17df0:	460e      	mov	r6, r1
   17df2:	4614      	mov	r4, r2
   17df4:	461d      	mov	r5, r3
    fs_user_mount_t *vfs = disk_get_device(pdrv);
   17df6:	f7ff ffc7 	bl	17d88 <disk_get_device>
    if (vfs == NULL) {
   17dfa:	b330      	cbz	r0, 17e4a <disk_read+0x5e>
   17dfc:	4602      	mov	r2, r0
        return RES_PARERR;
    }

    if (vfs->flags & FSUSER_NATIVE) {
   17dfe:	8883      	ldrh	r3, [r0, #4]
   17e00:	f013 0f01 	tst.w	r3, #1
   17e04:	d008      	beq.n	17e18 <disk_read+0x2c>
        mp_uint_t (*f)(uint8_t*, uint32_t, uint32_t) = (void*)(uintptr_t)vfs->readblocks[2];
   17e06:	6903      	ldr	r3, [r0, #16]
        if (f(buff, sector, count) != 0) {
   17e08:	462a      	mov	r2, r5
   17e0a:	4621      	mov	r1, r4
   17e0c:	4630      	mov	r0, r6
   17e0e:	4798      	blx	r3
   17e10:	b1e8      	cbz	r0, 17e4e <disk_read+0x62>
            return RES_ERROR;
   17e12:	2001      	movs	r0, #1
        mp_call_method_n_kw(2, 0, vfs->readblocks);
        // TODO handle error return
    }

    return RES_OK;
}
   17e14:	b004      	add	sp, #16
   17e16:	bd70      	pop	{r4, r5, r6, pc}
        mp_obj_array_t ar = {{&mp_type_bytearray}, BYTEARRAY_TYPECODE, 0, count * SECSIZE(&vfs->fatfs), buff};
   17e18:	4b0e      	ldr	r3, [pc, #56]	; (17e54 <disk_read+0x68>)
   17e1a:	9300      	str	r3, [sp, #0]
   17e1c:	2301      	movs	r3, #1
   17e1e:	f88d 3004 	strb.w	r3, [sp, #4]
   17e22:	9b01      	ldr	r3, [sp, #4]
   17e24:	f36f 231f 	bfc	r3, #8, #24
   17e28:	9301      	str	r3, [sp, #4]
   17e2a:	026d      	lsls	r5, r5, #9
   17e2c:	9502      	str	r5, [sp, #8]
   17e2e:	9603      	str	r6, [sp, #12]
        vfs->readblocks[2] = MP_OBJ_NEW_SMALL_INT(sector);
   17e30:	0064      	lsls	r4, r4, #1
   17e32:	f044 0401 	orr.w	r4, r4, #1
   17e36:	6104      	str	r4, [r0, #16]
        vfs->readblocks[3] = MP_OBJ_FROM_PTR(&ar);
   17e38:	f8c0 d014 	str.w	sp, [r0, #20]
        mp_call_method_n_kw(2, 0, vfs->readblocks);
   17e3c:	3208      	adds	r2, #8
   17e3e:	2100      	movs	r1, #0
   17e40:	2002      	movs	r0, #2
   17e42:	f7f1 fc52 	bl	96ea <mp_call_method_n_kw>
    return RES_OK;
   17e46:	2000      	movs	r0, #0
   17e48:	e7e4      	b.n	17e14 <disk_read+0x28>
        return RES_PARERR;
   17e4a:	2004      	movs	r0, #4
   17e4c:	e7e2      	b.n	17e14 <disk_read+0x28>
    return RES_OK;
   17e4e:	2000      	movs	r0, #0
   17e50:	e7e0      	b.n	17e14 <disk_read+0x28>
   17e52:	bf00      	nop
   17e54:	00025ec4 	.word	0x00025ec4

00017e58 <disk_write>:
    bdev_t pdrv,          /* Physical drive nmuber (0..) */
    const BYTE *buff,    /* Data to be written */
    DWORD sector,        /* Sector address (LBA) */
    UINT count            /* Number of sectors to write (1..128) */
)
{
   17e58:	b570      	push	{r4, r5, r6, lr}
   17e5a:	b084      	sub	sp, #16
   17e5c:	460e      	mov	r6, r1
   17e5e:	4614      	mov	r4, r2
   17e60:	461d      	mov	r5, r3
    fs_user_mount_t *vfs = disk_get_device(pdrv);
   17e62:	f7ff ff91 	bl	17d88 <disk_get_device>
    if (vfs == NULL) {
   17e66:	b340      	cbz	r0, 17eba <disk_write+0x62>
   17e68:	4602      	mov	r2, r0
        return RES_PARERR;
    }

    if (vfs->writeblocks[0] == MP_OBJ_NULL) {
   17e6a:	6983      	ldr	r3, [r0, #24]
   17e6c:	b33b      	cbz	r3, 17ebe <disk_write+0x66>
        // read-only block device
        return RES_WRPRT;
    }

    if (vfs->flags & FSUSER_NATIVE) {
   17e6e:	8883      	ldrh	r3, [r0, #4]
   17e70:	f013 0f01 	tst.w	r3, #1
   17e74:	d008      	beq.n	17e88 <disk_write+0x30>
        mp_uint_t (*f)(const uint8_t*, uint32_t, uint32_t) = (void*)(uintptr_t)vfs->writeblocks[2];
   17e76:	6a03      	ldr	r3, [r0, #32]
        if (f(buff, sector, count) != 0) {
   17e78:	462a      	mov	r2, r5
   17e7a:	4621      	mov	r1, r4
   17e7c:	4630      	mov	r0, r6
   17e7e:	4798      	blx	r3
   17e80:	b1f8      	cbz	r0, 17ec2 <disk_write+0x6a>
            return RES_ERROR;
   17e82:	2001      	movs	r0, #1
        mp_call_method_n_kw(2, 0, vfs->writeblocks);
        // TODO handle error return
    }

    return RES_OK;
}
   17e84:	b004      	add	sp, #16
   17e86:	bd70      	pop	{r4, r5, r6, pc}
        mp_obj_array_t ar = {{&mp_type_bytearray}, BYTEARRAY_TYPECODE, 0, count * SECSIZE(&vfs->fatfs), (void*)buff};
   17e88:	4b0f      	ldr	r3, [pc, #60]	; (17ec8 <disk_write+0x70>)
   17e8a:	9300      	str	r3, [sp, #0]
   17e8c:	2301      	movs	r3, #1
   17e8e:	f88d 3004 	strb.w	r3, [sp, #4]
   17e92:	9b01      	ldr	r3, [sp, #4]
   17e94:	f36f 231f 	bfc	r3, #8, #24
   17e98:	9301      	str	r3, [sp, #4]
   17e9a:	026d      	lsls	r5, r5, #9
   17e9c:	9502      	str	r5, [sp, #8]
   17e9e:	9603      	str	r6, [sp, #12]
        vfs->writeblocks[2] = MP_OBJ_NEW_SMALL_INT(sector);
   17ea0:	0064      	lsls	r4, r4, #1
   17ea2:	f044 0401 	orr.w	r4, r4, #1
   17ea6:	6204      	str	r4, [r0, #32]
        vfs->writeblocks[3] = MP_OBJ_FROM_PTR(&ar);
   17ea8:	f8c0 d024 	str.w	sp, [r0, #36]	; 0x24
        mp_call_method_n_kw(2, 0, vfs->writeblocks);
   17eac:	3218      	adds	r2, #24
   17eae:	2100      	movs	r1, #0
   17eb0:	2002      	movs	r0, #2
   17eb2:	f7f1 fc1a 	bl	96ea <mp_call_method_n_kw>
    return RES_OK;
   17eb6:	2000      	movs	r0, #0
   17eb8:	e7e4      	b.n	17e84 <disk_write+0x2c>
        return RES_PARERR;
   17eba:	2004      	movs	r0, #4
   17ebc:	e7e2      	b.n	17e84 <disk_write+0x2c>
        return RES_WRPRT;
   17ebe:	2002      	movs	r0, #2
   17ec0:	e7e0      	b.n	17e84 <disk_write+0x2c>
    return RES_OK;
   17ec2:	2000      	movs	r0, #0
   17ec4:	e7de      	b.n	17e84 <disk_write+0x2c>
   17ec6:	bf00      	nop
   17ec8:	00025ec4 	.word	0x00025ec4

00017ecc <disk_ioctl>:
DRESULT disk_ioctl (
    bdev_t pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,        /* Control code */
    void *buff        /* Buffer to send/receive control data */
)
{
   17ecc:	b570      	push	{r4, r5, r6, lr}
   17ece:	4606      	mov	r6, r0
   17ed0:	460c      	mov	r4, r1
   17ed2:	4615      	mov	r5, r2
    fs_user_mount_t *vfs = disk_get_device(pdrv);
   17ed4:	f7ff ff58 	bl	17d88 <disk_get_device>
    if (vfs == NULL) {
   17ed8:	2800      	cmp	r0, #0
   17eda:	d07b      	beq.n	17fd4 <disk_ioctl+0x108>
   17edc:	4602      	mov	r2, r0
        return RES_PARERR;
    }

    if (vfs->flags & FSUSER_HAVE_IOCTL) {
   17ede:	8883      	ldrh	r3, [r0, #4]
   17ee0:	f013 0f04 	tst.w	r3, #4
   17ee4:	d046      	beq.n	17f74 <disk_ioctl+0xa8>
        // new protocol with ioctl
        switch (cmd) {
   17ee6:	2c06      	cmp	r4, #6
   17ee8:	d876      	bhi.n	17fd8 <disk_ioctl+0x10c>
   17eea:	e8df f004 	tbb	[pc, r4]
   17eee:	0f04      	.short	0x0f04
   17ef0:	3775331d 	.word	0x3775331d
   17ef4:	3d          	.byte	0x3d
   17ef5:	00          	.byte	0x00
            case CTRL_SYNC:
                vfs->u.ioctl[2] = MP_OBJ_NEW_SMALL_INT(BP_IOCTL_SYNC);
   17ef6:	2307      	movs	r3, #7
   17ef8:	6303      	str	r3, [r0, #48]	; 0x30
                vfs->u.ioctl[3] = MP_OBJ_NEW_SMALL_INT(0); // unused
   17efa:	2301      	movs	r3, #1
   17efc:	6343      	str	r3, [r0, #52]	; 0x34
                mp_call_method_n_kw(2, 0, vfs->u.ioctl);
   17efe:	3228      	adds	r2, #40	; 0x28
   17f00:	2100      	movs	r1, #0
   17f02:	2002      	movs	r0, #2
   17f04:	f7f1 fbf1 	bl	96ea <mp_call_method_n_kw>
                return RES_OK;
   17f08:	2000      	movs	r0, #0
   17f0a:	e064      	b.n	17fd6 <disk_ioctl+0x10a>

            case GET_SECTOR_COUNT: {
                vfs->u.ioctl[2] = MP_OBJ_NEW_SMALL_INT(BP_IOCTL_SEC_COUNT);
   17f0c:	2309      	movs	r3, #9
   17f0e:	6303      	str	r3, [r0, #48]	; 0x30
                vfs->u.ioctl[3] = MP_OBJ_NEW_SMALL_INT(0); // unused
   17f10:	2301      	movs	r3, #1
   17f12:	6343      	str	r3, [r0, #52]	; 0x34
                mp_obj_t ret = mp_call_method_n_kw(2, 0, vfs->u.ioctl);
   17f14:	3228      	adds	r2, #40	; 0x28
   17f16:	2100      	movs	r1, #0
   17f18:	2002      	movs	r0, #2
   17f1a:	f7f1 fbe6 	bl	96ea <mp_call_method_n_kw>
                *((DWORD*)buff) = mp_obj_get_int(ret);
   17f1e:	f7f2 ff55 	bl	adcc <mp_obj_get_int>
   17f22:	6028      	str	r0, [r5, #0]
                return RES_OK;
   17f24:	2000      	movs	r0, #0
   17f26:	e056      	b.n	17fd6 <disk_ioctl+0x10a>
            }

            case GET_SECTOR_SIZE: {
                vfs->u.ioctl[2] = MP_OBJ_NEW_SMALL_INT(BP_IOCTL_SEC_SIZE);
   17f28:	230b      	movs	r3, #11
   17f2a:	6303      	str	r3, [r0, #48]	; 0x30
                vfs->u.ioctl[3] = MP_OBJ_NEW_SMALL_INT(0); // unused
   17f2c:	2301      	movs	r3, #1
   17f2e:	6343      	str	r3, [r0, #52]	; 0x34
                mp_obj_t ret = mp_call_method_n_kw(2, 0, vfs->u.ioctl);
   17f30:	3228      	adds	r2, #40	; 0x28
   17f32:	2100      	movs	r1, #0
   17f34:	2002      	movs	r0, #2
   17f36:	f7f1 fbd8 	bl	96ea <mp_call_method_n_kw>
                if (ret == mp_const_none) {
   17f3a:	4b2a      	ldr	r3, [pc, #168]	; (17fe4 <disk_ioctl+0x118>)
   17f3c:	4298      	cmp	r0, r3
   17f3e:	d004      	beq.n	17f4a <disk_ioctl+0x7e>
                    // Default sector size
                    *((WORD*)buff) = 512;
                } else {
                    *((WORD*)buff) = mp_obj_get_int(ret);
   17f40:	f7f2 ff44 	bl	adcc <mp_obj_get_int>
   17f44:	8028      	strh	r0, [r5, #0]
                }
                #if _MAX_SS != _MIN_SS
                // need to store ssize because we use it in disk_read/disk_write
                vfs->fatfs.ssize = *((WORD*)buff);
                #endif
                return RES_OK;
   17f46:	2000      	movs	r0, #0
   17f48:	e045      	b.n	17fd6 <disk_ioctl+0x10a>
                    *((WORD*)buff) = 512;
   17f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
   17f4e:	802b      	strh	r3, [r5, #0]
                return RES_OK;
   17f50:	2000      	movs	r0, #0
   17f52:	e040      	b.n	17fd6 <disk_ioctl+0x10a>
            }

            case GET_BLOCK_SIZE:
                *((DWORD*)buff) = 1; // erase block size in units of sector size
   17f54:	2301      	movs	r3, #1
   17f56:	602b      	str	r3, [r5, #0]
                return RES_OK;
   17f58:	2000      	movs	r0, #0
   17f5a:	e03c      	b.n	17fd6 <disk_ioctl+0x10a>

            case IOCTL_INIT:
                *((DSTATUS*)buff) = disk_initialize(pdrv);
   17f5c:	4630      	mov	r0, r6
   17f5e:	f7ff ff21 	bl	17da4 <disk_initialize>
   17f62:	7028      	strb	r0, [r5, #0]
                return RES_OK;
   17f64:	2000      	movs	r0, #0
   17f66:	e036      	b.n	17fd6 <disk_ioctl+0x10a>

            case IOCTL_STATUS:
                *((DSTATUS*)buff) = disk_status(pdrv);
   17f68:	4630      	mov	r0, r6
   17f6a:	f7ff ff0e 	bl	17d8a <disk_status>
   17f6e:	7028      	strb	r0, [r5, #0]
                return RES_OK;
   17f70:	2000      	movs	r0, #0
   17f72:	e030      	b.n	17fd6 <disk_ioctl+0x10a>
            default:
                return RES_PARERR;
        }
    } else {
        // old protocol with sync and count
        switch (cmd) {
   17f74:	2c06      	cmp	r4, #6
   17f76:	d831      	bhi.n	17fdc <disk_ioctl+0x110>
   17f78:	e8df f004 	tbb	[pc, r4]
   17f7c:	1c170d04 	.word	0x1c170d04
   17f80:	2030      	.short	0x2030
   17f82:	26          	.byte	0x26
   17f83:	00          	.byte	0x00
            case CTRL_SYNC:
                if (vfs->u.old.sync[0] != MP_OBJ_NULL) {
   17f84:	6a83      	ldr	r3, [r0, #40]	; 0x28
   17f86:	b35b      	cbz	r3, 17fe0 <disk_ioctl+0x114>
                    mp_call_method_n_kw(0, 0, vfs->u.old.sync);
   17f88:	3228      	adds	r2, #40	; 0x28
   17f8a:	2100      	movs	r1, #0
   17f8c:	4608      	mov	r0, r1
   17f8e:	f7f1 fbac 	bl	96ea <mp_call_method_n_kw>
                }
                return RES_OK;
   17f92:	2000      	movs	r0, #0
   17f94:	e01f      	b.n	17fd6 <disk_ioctl+0x10a>

            case GET_SECTOR_COUNT: {
                mp_obj_t ret = mp_call_method_n_kw(0, 0, vfs->u.old.count);
   17f96:	3230      	adds	r2, #48	; 0x30
   17f98:	2100      	movs	r1, #0
   17f9a:	4608      	mov	r0, r1
   17f9c:	f7f1 fba5 	bl	96ea <mp_call_method_n_kw>
                *((DWORD*)buff) = mp_obj_get_int(ret);
   17fa0:	f7f2 ff14 	bl	adcc <mp_obj_get_int>
   17fa4:	6028      	str	r0, [r5, #0]
                return RES_OK;
   17fa6:	2000      	movs	r0, #0
   17fa8:	e015      	b.n	17fd6 <disk_ioctl+0x10a>
            }

            case GET_SECTOR_SIZE:
                *((WORD*)buff) = 512; // old protocol had fixed sector size
   17faa:	f44f 7300 	mov.w	r3, #512	; 0x200
   17fae:	802b      	strh	r3, [r5, #0]
                #if _MAX_SS != _MIN_SS
                // need to store ssize because we use it in disk_read/disk_write
                vfs->fatfs.ssize = 512;
                #endif
                return RES_OK;
   17fb0:	2000      	movs	r0, #0
   17fb2:	e010      	b.n	17fd6 <disk_ioctl+0x10a>

            case GET_BLOCK_SIZE:
                *((DWORD*)buff) = 1; // erase block size in units of sector size
   17fb4:	2301      	movs	r3, #1
   17fb6:	602b      	str	r3, [r5, #0]
                return RES_OK;
   17fb8:	2000      	movs	r0, #0
   17fba:	e00c      	b.n	17fd6 <disk_ioctl+0x10a>

            case IOCTL_INIT:
                *((DSTATUS*)buff) = disk_initialize(pdrv);
   17fbc:	4630      	mov	r0, r6
   17fbe:	f7ff fef1 	bl	17da4 <disk_initialize>
   17fc2:	7028      	strb	r0, [r5, #0]
                return RES_OK;
   17fc4:	2000      	movs	r0, #0
   17fc6:	e006      	b.n	17fd6 <disk_ioctl+0x10a>

            case IOCTL_STATUS:
                *((DSTATUS*)buff) = disk_status(pdrv);
   17fc8:	4630      	mov	r0, r6
   17fca:	f7ff fede 	bl	17d8a <disk_status>
   17fce:	7028      	strb	r0, [r5, #0]
                return RES_OK;
   17fd0:	2000      	movs	r0, #0
   17fd2:	e000      	b.n	17fd6 <disk_ioctl+0x10a>
        return RES_PARERR;
   17fd4:	2004      	movs	r0, #4

            default:
                return RES_PARERR;
        }
    }
}
   17fd6:	bd70      	pop	{r4, r5, r6, pc}
                return RES_PARERR;
   17fd8:	2004      	movs	r0, #4
   17fda:	e7fc      	b.n	17fd6 <disk_ioctl+0x10a>
                return RES_PARERR;
   17fdc:	2004      	movs	r0, #4
   17fde:	e7fa      	b.n	17fd6 <disk_ioctl+0x10a>
                return RES_OK;
   17fe0:	2000      	movs	r0, #0
   17fe2:	e7f8      	b.n	17fd6 <disk_ioctl+0x10a>
   17fe4:	00027b40 	.word	0x00027b40

00017fe8 <file_obj___exit__>:
    }
    return sz_out;
}


STATIC mp_obj_t file_obj___exit__(size_t n_args, const mp_obj_t *args) {
   17fe8:	b508      	push	{r3, lr}
    (void)n_args;
    return mp_stream_close(args[0]);
   17fea:	6808      	ldr	r0, [r1, #0]
   17fec:	f7fa ff22 	bl	12e34 <mp_stream_close>
}
   17ff0:	bd08      	pop	{r3, pc}
	...

00017ff4 <file_obj_ioctl>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(file_obj___exit___obj, 4, 4, file_obj___exit__);

STATIC mp_uint_t file_obj_ioctl(mp_obj_t o_in, mp_uint_t request, uintptr_t arg, int *errcode) {
   17ff4:	b570      	push	{r4, r5, r6, lr}
   17ff6:	4604      	mov	r4, r0
    pyb_file_obj_t *self = MP_OBJ_TO_PTR(o_in);

    if (request == MP_STREAM_SEEK) {
   17ff8:	2902      	cmp	r1, #2
   17ffa:	d00d      	beq.n	18018 <file_obj_ioctl+0x24>
   17ffc:	461e      	mov	r6, r3
        }

        s->offset = f_tell(&self->fp);
        return 0;

    } else if (request == MP_STREAM_FLUSH) {
   17ffe:	2901      	cmp	r1, #1
   18000:	d028      	beq.n	18054 <file_obj_ioctl+0x60>
            *errcode = fresult_to_errno_table[res];
            return MP_STREAM_ERROR;
        }
        return 0;

    } else if (request == MP_STREAM_CLOSE) {
   18002:	2904      	cmp	r1, #4
   18004:	d138      	bne.n	18078 <file_obj_ioctl+0x84>
        // if fs==NULL then the file is closed and in that case this method is a no-op
        if (self->fp.obj.fs != NULL) {
   18006:	6843      	ldr	r3, [r0, #4]
   18008:	2b00      	cmp	r3, #0
   1800a:	d03a      	beq.n	18082 <file_obj_ioctl+0x8e>
            FRESULT res = f_close(&self->fp);
   1800c:	3004      	adds	r0, #4
   1800e:	f005 fd08 	bl	1da22 <f_close>
            if (res != FR_OK) {
   18012:	bb58      	cbnz	r0, 1806c <file_obj_ioctl+0x78>
                *errcode = fresult_to_errno_table[res];
                return MP_STREAM_ERROR;
            }
        }
        return 0;
   18014:	2000      	movs	r0, #0
   18016:	e009      	b.n	1802c <file_obj_ioctl+0x38>
   18018:	4615      	mov	r5, r2
        switch (s->whence) {
   1801a:	6853      	ldr	r3, [r2, #4]
   1801c:	2b01      	cmp	r3, #1
   1801e:	d00b      	beq.n	18038 <file_obj_ioctl+0x44>
   18020:	2b02      	cmp	r3, #2
   18022:	d010      	beq.n	18046 <file_obj_ioctl+0x52>
   18024:	b11b      	cbz	r3, 1802e <file_obj_ioctl+0x3a>
        s->offset = f_tell(&self->fp);
   18026:	69a3      	ldr	r3, [r4, #24]
   18028:	602b      	str	r3, [r5, #0]
        return 0;
   1802a:	2000      	movs	r0, #0

    } else {
        *errcode = MP_EINVAL;
        return MP_STREAM_ERROR;
    }
}
   1802c:	bd70      	pop	{r4, r5, r6, pc}
                f_lseek(&self->fp, s->offset);
   1802e:	6811      	ldr	r1, [r2, #0]
   18030:	3004      	adds	r0, #4
   18032:	f005 fdb2 	bl	1db9a <f_lseek>
                break;
   18036:	e7f6      	b.n	18026 <file_obj_ioctl+0x32>
                f_lseek(&self->fp, f_tell(&self->fp) + s->offset);
   18038:	6981      	ldr	r1, [r0, #24]
   1803a:	6813      	ldr	r3, [r2, #0]
   1803c:	4419      	add	r1, r3
   1803e:	3004      	adds	r0, #4
   18040:	f005 fdab 	bl	1db9a <f_lseek>
                break;
   18044:	e7ef      	b.n	18026 <file_obj_ioctl+0x32>
                f_lseek(&self->fp, f_size(&self->fp) + s->offset);
   18046:	6901      	ldr	r1, [r0, #16]
   18048:	6813      	ldr	r3, [r2, #0]
   1804a:	4419      	add	r1, r3
   1804c:	3004      	adds	r0, #4
   1804e:	f005 fda4 	bl	1db9a <f_lseek>
                break;
   18052:	e7e8      	b.n	18026 <file_obj_ioctl+0x32>
        FRESULT res = f_sync(&self->fp);
   18054:	3004      	adds	r0, #4
   18056:	f005 fcad 	bl	1d9b4 <f_sync>
        if (res != FR_OK) {
   1805a:	b908      	cbnz	r0, 18060 <file_obj_ioctl+0x6c>
        return 0;
   1805c:	2000      	movs	r0, #0
   1805e:	e7e5      	b.n	1802c <file_obj_ioctl+0x38>
            *errcode = fresult_to_errno_table[res];
   18060:	4a09      	ldr	r2, [pc, #36]	; (18088 <file_obj_ioctl+0x94>)
   18062:	5c13      	ldrb	r3, [r2, r0]
   18064:	6033      	str	r3, [r6, #0]
            return MP_STREAM_ERROR;
   18066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1806a:	e7df      	b.n	1802c <file_obj_ioctl+0x38>
                *errcode = fresult_to_errno_table[res];
   1806c:	4a06      	ldr	r2, [pc, #24]	; (18088 <file_obj_ioctl+0x94>)
   1806e:	5c13      	ldrb	r3, [r2, r0]
   18070:	6033      	str	r3, [r6, #0]
                return MP_STREAM_ERROR;
   18072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18076:	e7d9      	b.n	1802c <file_obj_ioctl+0x38>
        *errcode = MP_EINVAL;
   18078:	2316      	movs	r3, #22
   1807a:	6033      	str	r3, [r6, #0]
        return MP_STREAM_ERROR;
   1807c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18080:	e7d4      	b.n	1802c <file_obj_ioctl+0x38>
        return 0;
   18082:	2000      	movs	r0, #0
   18084:	e7d2      	b.n	1802c <file_obj_ioctl+0x38>
   18086:	bf00      	nop
   18088:	0002a968 	.word	0x0002a968

0001808c <file_obj_write>:
STATIC mp_uint_t file_obj_write(mp_obj_t self_in, const void *buf, mp_uint_t size, int *errcode) {
   1808c:	b530      	push	{r4, r5, lr}
   1808e:	b083      	sub	sp, #12
   18090:	4614      	mov	r4, r2
   18092:	461d      	mov	r5, r3
    FRESULT res = f_write(&self->fp, buf, size, &sz_out);
   18094:	ab01      	add	r3, sp, #4
   18096:	3004      	adds	r0, #4
   18098:	f005 fbce 	bl	1d838 <f_write>
    if (res != FR_OK) {
   1809c:	b920      	cbnz	r0, 180a8 <file_obj_write+0x1c>
    if (sz_out != size) {
   1809e:	9801      	ldr	r0, [sp, #4]
   180a0:	42a0      	cmp	r0, r4
   180a2:	d107      	bne.n	180b4 <file_obj_write+0x28>
}
   180a4:	b003      	add	sp, #12
   180a6:	bd30      	pop	{r4, r5, pc}
        *errcode = fresult_to_errno_table[res];
   180a8:	4a05      	ldr	r2, [pc, #20]	; (180c0 <file_obj_write+0x34>)
   180aa:	5c13      	ldrb	r3, [r2, r0]
   180ac:	602b      	str	r3, [r5, #0]
        return MP_STREAM_ERROR;
   180ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180b2:	e7f7      	b.n	180a4 <file_obj_write+0x18>
        *errcode = MP_ENOSPC;
   180b4:	231c      	movs	r3, #28
   180b6:	602b      	str	r3, [r5, #0]
        return MP_STREAM_ERROR;
   180b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180bc:	e7f2      	b.n	180a4 <file_obj_write+0x18>
   180be:	bf00      	nop
   180c0:	0002a968 	.word	0x0002a968

000180c4 <file_obj_read>:
STATIC mp_uint_t file_obj_read(mp_obj_t self_in, void *buf, mp_uint_t size, int *errcode) {
   180c4:	b510      	push	{r4, lr}
   180c6:	b082      	sub	sp, #8
   180c8:	461c      	mov	r4, r3
    FRESULT res = f_read(&self->fp, buf, size, &sz_out);
   180ca:	ab01      	add	r3, sp, #4
   180cc:	3004      	adds	r0, #4
   180ce:	f005 fb23 	bl	1d718 <f_read>
    if (res != FR_OK) {
   180d2:	b910      	cbnz	r0, 180da <file_obj_read+0x16>
    return sz_out;
   180d4:	9801      	ldr	r0, [sp, #4]
}
   180d6:	b002      	add	sp, #8
   180d8:	bd10      	pop	{r4, pc}
        *errcode = fresult_to_errno_table[res];
   180da:	4a03      	ldr	r2, [pc, #12]	; (180e8 <file_obj_read+0x24>)
   180dc:	5c13      	ldrb	r3, [r2, r0]
   180de:	6023      	str	r3, [r4, #0]
        return MP_STREAM_ERROR;
   180e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180e4:	e7f7      	b.n	180d6 <file_obj_read+0x12>
   180e6:	bf00      	nop
   180e8:	0002a968 	.word	0x0002a968

000180ec <file_open>:
    { MP_QSTR_mode, MP_ARG_OBJ, {.u_obj = MP_OBJ_NEW_QSTR(MP_QSTR_r)} },
    { MP_QSTR_encoding, MP_ARG_OBJ | MP_ARG_KW_ONLY, {.u_rom_obj = MP_ROM_PTR(&mp_const_none_obj)} },
};
#define FILE_OPEN_NUM_ARGS MP_ARRAY_SIZE(file_open_args)

STATIC mp_obj_t file_open(fs_user_mount_t *vfs, const mp_obj_type_t *type, mp_arg_val_t *args) {
   180ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180f0:	4606      	mov	r6, r0
   180f2:	4688      	mov	r8, r1
   180f4:	4617      	mov	r7, r2
    int mode = 0;
    const char *mode_s = mp_obj_str_get_str(args[1].u_obj);
   180f6:	6850      	ldr	r0, [r2, #4]
   180f8:	f7f8 f8a8 	bl	1024c <mp_obj_str_get_str>
    int mode = 0;
   180fc:	2400      	movs	r4, #0
    // TODO make sure only one of r, w, x, a, and b, t are specified
    while (*mode_s) {
   180fe:	7803      	ldrb	r3, [r0, #0]
   18100:	b1fb      	cbz	r3, 18142 <file_open+0x56>
        switch (*mode_s++) {
   18102:	3001      	adds	r0, #1
   18104:	2b72      	cmp	r3, #114	; 0x72
   18106:	d010      	beq.n	1812a <file_open+0x3e>
   18108:	d908      	bls.n	1811c <file_open+0x30>
   1810a:	2b77      	cmp	r3, #119	; 0x77
   1810c:	d010      	beq.n	18130 <file_open+0x44>
   1810e:	2b78      	cmp	r3, #120	; 0x78
   18110:	d011      	beq.n	18136 <file_open+0x4a>
   18112:	2b74      	cmp	r3, #116	; 0x74
   18114:	d1f3      	bne.n	180fe <file_open+0x12>
            case 'b':
                type = &mp_type_fileio;
                break;
            #endif
            case 't':
                type = &mp_type_textio;
   18116:	f8df 8094 	ldr.w	r8, [pc, #148]	; 181ac <file_open+0xc0>
   1811a:	e7f0      	b.n	180fe <file_open+0x12>
        switch (*mode_s++) {
   1811c:	2b2b      	cmp	r3, #43	; 0x2b
   1811e:	d00d      	beq.n	1813c <file_open+0x50>
   18120:	2b61      	cmp	r3, #97	; 0x61
   18122:	d1ec      	bne.n	180fe <file_open+0x12>
                mode |= FA_WRITE | FA_OPEN_ALWAYS;
   18124:	f044 0412 	orr.w	r4, r4, #18
                break;
   18128:	e7e9      	b.n	180fe <file_open+0x12>
                mode |= FA_READ;
   1812a:	f044 0401 	orr.w	r4, r4, #1
                break;
   1812e:	e7e6      	b.n	180fe <file_open+0x12>
                mode |= FA_WRITE | FA_CREATE_ALWAYS;
   18130:	f044 040a 	orr.w	r4, r4, #10
                break;
   18134:	e7e3      	b.n	180fe <file_open+0x12>
                mode |= FA_WRITE | FA_CREATE_NEW;
   18136:	f044 0406 	orr.w	r4, r4, #6
                break;
   1813a:	e7e0      	b.n	180fe <file_open+0x12>
                mode |= FA_READ | FA_WRITE;
   1813c:	f044 0403 	orr.w	r4, r4, #3
                break;
   18140:	e7dd      	b.n	180fe <file_open+0x12>
                break;
        }
    }

    pyb_file_obj_t *o = m_new_obj_with_finaliser(pyb_file_obj_t);
   18142:	202c      	movs	r0, #44	; 0x2c
   18144:	f7e8 fbba 	bl	8bc <m_malloc>
   18148:	4605      	mov	r5, r0
    o->base.type = type;
   1814a:	f8c0 8000 	str.w	r8, [r0]

    const char *fname = mp_obj_str_get_str(args[0].u_obj);
   1814e:	6838      	ldr	r0, [r7, #0]
   18150:	f7f8 f87c 	bl	1024c <mp_obj_str_get_str>
    assert(vfs != NULL);
   18154:	b17e      	cbz	r6, 18176 <file_open+0x8a>
    FRESULT res = f_open(&vfs->fatfs, &o->fp, fname, mode);
   18156:	1d2f      	adds	r7, r5, #4
   18158:	b2e3      	uxtb	r3, r4
   1815a:	4602      	mov	r2, r0
   1815c:	4639      	mov	r1, r7
   1815e:	f106 0038 	add.w	r0, r6, #56	; 0x38
   18162:	f005 fa09 	bl	1d578 <f_open>
    if (res != FR_OK) {
   18166:	4606      	mov	r6, r0
   18168:	b958      	cbnz	r0, 18182 <file_open+0x96>
        m_del_obj(pyb_file_obj_t, o);
        mp_raise_OSError(fresult_to_errno_table[res]);
    }

    // for 'a' mode, we must begin at the end of the file
    if ((mode & FA_OPEN_ALWAYS) != 0) {
   1816a:	f014 0f10 	tst.w	r4, #16
   1816e:	d10f      	bne.n	18190 <file_open+0xa4>
        f_lseek(&o->fp, f_size(&o->fp));
    }

    return MP_OBJ_FROM_PTR(o);
}
   18170:	4628      	mov	r0, r5
   18172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(vfs != NULL);
   18176:	4b09      	ldr	r3, [pc, #36]	; (1819c <file_open+0xb0>)
   18178:	4a09      	ldr	r2, [pc, #36]	; (181a0 <file_open+0xb4>)
   1817a:	21cd      	movs	r1, #205	; 0xcd
   1817c:	4809      	ldr	r0, [pc, #36]	; (181a4 <file_open+0xb8>)
   1817e:	f000 f9ed 	bl	1855c <__assert_func>
        m_del_obj(pyb_file_obj_t, o);
   18182:	4628      	mov	r0, r5
   18184:	f7e8 fbc3 	bl	90e <m_free>
        mp_raise_OSError(fresult_to_errno_table[res]);
   18188:	4b07      	ldr	r3, [pc, #28]	; (181a8 <file_open+0xbc>)
   1818a:	5d98      	ldrb	r0, [r3, r6]
   1818c:	f7f2 fa94 	bl	a6b8 <mp_raise_OSError>
        f_lseek(&o->fp, f_size(&o->fp));
   18190:	6929      	ldr	r1, [r5, #16]
   18192:	4638      	mov	r0, r7
   18194:	f005 fd01 	bl	1db9a <f_lseek>
    return MP_OBJ_FROM_PTR(o);
   18198:	e7ea      	b.n	18170 <file_open+0x84>
   1819a:	bf00      	nop
   1819c:	0002a7a4 	.word	0x0002a7a4
   181a0:	0002a8cc 	.word	0x0002a8cc
   181a4:	0002a934 	.word	0x0002a934
   181a8:	0002a968 	.word	0x0002a968
   181ac:	0002a8e0 	.word	0x0002a8e0

000181b0 <file_obj_make_new>:

STATIC mp_obj_t file_obj_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   181b0:	b530      	push	{r4, r5, lr}
   181b2:	b087      	sub	sp, #28
   181b4:	4605      	mov	r5, r0
   181b6:	4608      	mov	r0, r1
   181b8:	4611      	mov	r1, r2
   181ba:	461a      	mov	r2, r3
    mp_arg_val_t arg_vals[FILE_OPEN_NUM_ARGS];
    mp_arg_parse_all_kw_array(n_args, n_kw, args, FILE_OPEN_NUM_ARGS, file_open_args, arg_vals);
   181bc:	ac03      	add	r4, sp, #12
   181be:	9401      	str	r4, [sp, #4]
   181c0:	4b05      	ldr	r3, [pc, #20]	; (181d8 <file_obj_make_new+0x28>)
   181c2:	9300      	str	r3, [sp, #0]
   181c4:	2303      	movs	r3, #3
   181c6:	f7f2 fb53 	bl	a870 <mp_arg_parse_all_kw_array>
    return file_open(NULL, type, arg_vals);
   181ca:	4622      	mov	r2, r4
   181cc:	4629      	mov	r1, r5
   181ce:	2000      	movs	r0, #0
   181d0:	f7ff ff8c 	bl	180ec <file_open>
}
   181d4:	b007      	add	sp, #28
   181d6:	bd30      	pop	{r4, r5, pc}
   181d8:	0002a950 	.word	0x0002a950

000181dc <fatfs_builtin_open_self>:
    .protocol = &textio_stream_p,
    .locals_dict = (mp_obj_dict_t*)&rawfile_locals_dict,
};

// Factory function for I/O stream classes
STATIC mp_obj_t fatfs_builtin_open_self(mp_obj_t self_in, mp_obj_t path, mp_obj_t mode) {
   181dc:	b500      	push	{lr}
   181de:	b085      	sub	sp, #20
    // TODO: analyze buffering args and instantiate appropriate type
    fs_user_mount_t *self = MP_OBJ_TO_PTR(self_in);
    mp_arg_val_t arg_vals[FILE_OPEN_NUM_ARGS];
    arg_vals[0].u_obj = path;
   181e0:	9101      	str	r1, [sp, #4]
    arg_vals[1].u_obj = mode;
   181e2:	9202      	str	r2, [sp, #8]
    arg_vals[2].u_obj = mp_const_none;
   181e4:	4b04      	ldr	r3, [pc, #16]	; (181f8 <fatfs_builtin_open_self+0x1c>)
   181e6:	9303      	str	r3, [sp, #12]
    return file_open(self, &mp_type_textio, arg_vals);
   181e8:	aa01      	add	r2, sp, #4
   181ea:	4904      	ldr	r1, [pc, #16]	; (181fc <fatfs_builtin_open_self+0x20>)
   181ec:	f7ff ff7e 	bl	180ec <file_open>
}
   181f0:	b005      	add	sp, #20
   181f2:	f85d fb04 	ldr.w	pc, [sp], #4
   181f6:	bf00      	nop
   181f8:	00027b40 	.word	0x00027b40
   181fc:	0002a8e0 	.word	0x0002a8e0

00018200 <file_obj_print>:
STATIC void file_obj_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   18200:	b538      	push	{r3, r4, r5, lr}
   18202:	4605      	mov	r5, r0
   18204:	460c      	mov	r4, r1
    mp_printf(print, "<io.%s %p>", mp_obj_get_type_str(self_in), MP_OBJ_TO_PTR(self_in));
   18206:	4608      	mov	r0, r1
   18208:	f7f2 fcd2 	bl	abb0 <mp_obj_get_type_str>
   1820c:	4623      	mov	r3, r4
   1820e:	4602      	mov	r2, r0
   18210:	4902      	ldr	r1, [pc, #8]	; (1821c <file_obj_print+0x1c>)
   18212:	4628      	mov	r0, r5
   18214:	f7e9 ff2a 	bl	206c <mp_printf>
}
   18218:	bd38      	pop	{r3, r4, r5, pc}
   1821a:	bf00      	nop
   1821c:	0002a928 	.word	0x0002a928

00018220 <mp_uos_dupterm>:
            mp_uos_deactivate(idx, "dupterm: Exception in write() method, deactivating: ", nlr.ret_val);
        }
    }
}

STATIC mp_obj_t mp_uos_dupterm(size_t n_args, const mp_obj_t *args) {
   18220:	b538      	push	{r3, r4, r5, lr}
   18222:	460d      	mov	r5, r1
    mp_int_t idx = 0;
    if (n_args == 2) {
   18224:	2802      	cmp	r0, #2
   18226:	d013      	beq.n	18250 <mp_uos_dupterm+0x30>
    mp_int_t idx = 0;
   18228:	2300      	movs	r3, #0

    if (idx < 0 || idx >= MICROPY_PY_OS_DUPTERM) {
        mp_raise_ValueError("invalid dupterm index");
    }

    mp_obj_t previous_obj = MP_STATE_VM(dupterm_objs[idx]);
   1822a:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1822e:	4915      	ldr	r1, [pc, #84]	; (18284 <mp_uos_dupterm+0x64>)
   18230:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if (previous_obj == MP_OBJ_NULL) {
   18234:	b1ac      	cbz	r4, 18262 <mp_uos_dupterm+0x42>
        previous_obj = mp_const_none;
    }
    if (args[0] == mp_const_none) {
   18236:	682a      	ldr	r2, [r5, #0]
   18238:	4913      	ldr	r1, [pc, #76]	; (18288 <mp_uos_dupterm+0x68>)
   1823a:	428a      	cmp	r2, r1
   1823c:	d013      	beq.n	18266 <mp_uos_dupterm+0x46>
        MP_STATE_VM(dupterm_objs[idx]) = MP_OBJ_NULL;
    } else {
        MP_STATE_VM(dupterm_objs[idx]) = args[0];
   1823e:	4911      	ldr	r1, [pc, #68]	; (18284 <mp_uos_dupterm+0x64>)
   18240:	3388      	adds	r3, #136	; 0x88
   18242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (MP_STATE_VM(dupterm_arr_obj) == MP_OBJ_NULL) {
   18246:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
   1824a:	b193      	cbz	r3, 18272 <mp_uos_dupterm+0x52>
            MP_STATE_VM(dupterm_arr_obj) = mp_obj_new_bytearray(1, "");
        }
    }

    return previous_obj;
}
   1824c:	4620      	mov	r0, r4
   1824e:	bd38      	pop	{r3, r4, r5, pc}
        idx = mp_obj_get_int(args[1]);
   18250:	6848      	ldr	r0, [r1, #4]
   18252:	f7f2 fdbb 	bl	adcc <mp_obj_get_int>
    if (idx < 0 || idx >= MICROPY_PY_OS_DUPTERM) {
   18256:	4603      	mov	r3, r0
   18258:	2800      	cmp	r0, #0
   1825a:	d0e6      	beq.n	1822a <mp_uos_dupterm+0xa>
        mp_raise_ValueError("invalid dupterm index");
   1825c:	480b      	ldr	r0, [pc, #44]	; (1828c <mp_uos_dupterm+0x6c>)
   1825e:	f7f2 f823 	bl	a2a8 <mp_raise_ValueError>
        previous_obj = mp_const_none;
   18262:	4c09      	ldr	r4, [pc, #36]	; (18288 <mp_uos_dupterm+0x68>)
   18264:	e7e7      	b.n	18236 <mp_uos_dupterm+0x16>
        MP_STATE_VM(dupterm_objs[idx]) = MP_OBJ_NULL;
   18266:	3388      	adds	r3, #136	; 0x88
   18268:	4a06      	ldr	r2, [pc, #24]	; (18284 <mp_uos_dupterm+0x64>)
   1826a:	2100      	movs	r1, #0
   1826c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   18270:	e7ec      	b.n	1824c <mp_uos_dupterm+0x2c>
            MP_STATE_VM(dupterm_arr_obj) = mp_obj_new_bytearray(1, "");
   18272:	4907      	ldr	r1, [pc, #28]	; (18290 <mp_uos_dupterm+0x70>)
   18274:	2001      	movs	r0, #1
   18276:	f7f3 fb05 	bl	b884 <mp_obj_new_bytearray>
   1827a:	4b02      	ldr	r3, [pc, #8]	; (18284 <mp_uos_dupterm+0x64>)
   1827c:	f8c3 0224 	str.w	r0, [r3, #548]	; 0x224
    return previous_obj;
   18280:	e7e4      	b.n	1824c <mp_uos_dupterm+0x2c>
   18282:	bf00      	nop
   18284:	200008a0 	.word	0x200008a0
   18288:	00027b40 	.word	0x00027b40
   1828c:	0002a9fc 	.word	0x0002a9fc
   18290:	0002bd00 	.word	0x0002bd00

00018294 <strn_print_strn>:
typedef struct _strn_print_env_t {
    char *cur;
    size_t remain;
} strn_print_env_t;

STATIC void strn_print_strn(void *data, const char *str, size_t len) {
   18294:	b538      	push	{r3, r4, r5, lr}
   18296:	4604      	mov	r4, r0
    strn_print_env_t *strn_print_env = data;
    if (len > strn_print_env->remain) {
   18298:	6845      	ldr	r5, [r0, #4]
   1829a:	4295      	cmp	r5, r2
   1829c:	d20a      	bcs.n	182b4 <strn_print_strn+0x20>
        len = strn_print_env->remain;
    }
    memcpy(strn_print_env->cur, str, len);
   1829e:	462a      	mov	r2, r5
   182a0:	6820      	ldr	r0, [r4, #0]
   182a2:	f003 faa7 	bl	1b7f4 <memcpy>
    strn_print_env->cur += len;
   182a6:	6823      	ldr	r3, [r4, #0]
   182a8:	442b      	add	r3, r5
   182aa:	6023      	str	r3, [r4, #0]
    strn_print_env->remain -= len;
   182ac:	6863      	ldr	r3, [r4, #4]
   182ae:	1b5d      	subs	r5, r3, r5
   182b0:	6065      	str	r5, [r4, #4]
}
   182b2:	bd38      	pop	{r3, r4, r5, pc}
    if (len > strn_print_env->remain) {
   182b4:	4615      	mov	r5, r2
   182b6:	e7f2      	b.n	1829e <strn_print_strn+0xa>

000182b8 <printf>:
int printf(const char *fmt, ...) {
   182b8:	b40f      	push	{r0, r1, r2, r3}
   182ba:	b500      	push	{lr}
   182bc:	b083      	sub	sp, #12
   182be:	aa04      	add	r2, sp, #16
   182c0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(ap, fmt);
   182c4:	9201      	str	r2, [sp, #4]
    int ret = mp_vprintf(&mp_plat_print, fmt, ap);
   182c6:	4804      	ldr	r0, [pc, #16]	; (182d8 <printf+0x20>)
   182c8:	f7e9 fd7e 	bl	1dc8 <mp_vprintf>
}
   182cc:	b003      	add	sp, #12
   182ce:	f85d eb04 	ldr.w	lr, [sp], #4
   182d2:	b004      	add	sp, #16
   182d4:	4770      	bx	lr
   182d6:	bf00      	nop
   182d8:	00023684 	.word	0x00023684

000182dc <putchar>:
int putchar(int c) {
   182dc:	b500      	push	{lr}
   182de:	b083      	sub	sp, #12
    char chr = c;
   182e0:	ab02      	add	r3, sp, #8
   182e2:	f803 0d01 	strb.w	r0, [r3, #-1]!
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   182e6:	2101      	movs	r1, #1
   182e8:	4618      	mov	r0, r3
   182ea:	f000 fbad 	bl	18a48 <mp_hal_stdout_tx_strn_cooked>
}
   182ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
   182f2:	b003      	add	sp, #12
   182f4:	f85d fb04 	ldr.w	pc, [sp], #4

000182f8 <puts>:
int puts(const char *s) {
   182f8:	b510      	push	{r4, lr}
   182fa:	b082      	sub	sp, #8
   182fc:	4604      	mov	r4, r0
    mp_hal_stdout_tx_strn_cooked(s, strlen(s));
   182fe:	f003 fb11 	bl	1b924 <strlen>
   18302:	4601      	mov	r1, r0
   18304:	4620      	mov	r0, r4
   18306:	f000 fb9f 	bl	18a48 <mp_hal_stdout_tx_strn_cooked>
    char chr = '\n';
   1830a:	a802      	add	r0, sp, #8
   1830c:	230a      	movs	r3, #10
   1830e:	f800 3d01 	strb.w	r3, [r0, #-1]!
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   18312:	2101      	movs	r1, #1
   18314:	f000 fb98 	bl	18a48 <mp_hal_stdout_tx_strn_cooked>
}
   18318:	2001      	movs	r0, #1
   1831a:	b002      	add	sp, #8
   1831c:	bd10      	pop	{r4, pc}
	...

00018320 <vsnprintf>:
// uClibc requires this alias to be defined, or there may be link errors
// when linkings against it statically.
int __GI_vsnprintf(char *str, size_t size, const char *fmt, va_list ap) __attribute__((weak, alias ("vsnprintf")));
#endif

int vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
   18320:	b510      	push	{r4, lr}
   18322:	b084      	sub	sp, #16
   18324:	460c      	mov	r4, r1
   18326:	4611      	mov	r1, r2
    strn_print_env_t strn_print_env = {str, size};
   18328:	9002      	str	r0, [sp, #8]
   1832a:	9403      	str	r4, [sp, #12]
    mp_print_t print = {&strn_print_env, strn_print_strn};
   1832c:	aa02      	add	r2, sp, #8
   1832e:	9200      	str	r2, [sp, #0]
   18330:	4a09      	ldr	r2, [pc, #36]	; (18358 <vsnprintf+0x38>)
   18332:	9201      	str	r2, [sp, #4]
    int len = mp_vprintf(&print, fmt, ap);
   18334:	461a      	mov	r2, r3
   18336:	4668      	mov	r0, sp
   18338:	f7e9 fd46 	bl	1dc8 <mp_vprintf>
    // add terminating null byte
    if (size > 0) {
   1833c:	b124      	cbz	r4, 18348 <vsnprintf+0x28>
        if (strn_print_env.remain == 0) {
   1833e:	9b03      	ldr	r3, [sp, #12]
   18340:	b123      	cbz	r3, 1834c <vsnprintf+0x2c>
            strn_print_env.cur[-1] = 0;
        } else {
            strn_print_env.cur[0] = 0;
   18342:	9b02      	ldr	r3, [sp, #8]
   18344:	2200      	movs	r2, #0
   18346:	701a      	strb	r2, [r3, #0]
        }
    }
    return len;
}
   18348:	b004      	add	sp, #16
   1834a:	bd10      	pop	{r4, pc}
            strn_print_env.cur[-1] = 0;
   1834c:	9b02      	ldr	r3, [sp, #8]
   1834e:	2200      	movs	r2, #0
   18350:	f803 2c01 	strb.w	r2, [r3, #-1]
   18354:	e7f8      	b.n	18348 <vsnprintf+0x28>
   18356:	bf00      	nop
   18358:	00018295 	.word	0x00018295

0001835c <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...) {
   1835c:	b40c      	push	{r2, r3}
   1835e:	b500      	push	{lr}
   18360:	b083      	sub	sp, #12
   18362:	ab04      	add	r3, sp, #16
   18364:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list ap;
    va_start(ap, fmt);
   18368:	9301      	str	r3, [sp, #4]
    int ret = vsnprintf(str, size, fmt, ap);
   1836a:	f7ff ffd9 	bl	18320 <vsnprintf>
    va_end(ap);
    return ret;
}
   1836e:	b003      	add	sp, #12
   18370:	f85d eb04 	ldr.w	lr, [sp], #4
   18374:	b002      	add	sp, #8
   18376:	4770      	bx	lr

00018378 <Default_Handler>:


/*----------------------------------------------------------------------------
  Default Handler for Exceptions / Interrupts
 *----------------------------------------------------------------------------*/
void Default_Handler(void) {
   18378:	e7fe      	b.n	18378 <Default_Handler>
	...

0001837c <Reset_Handler>:
void Reset_Handler(void) {
   1837c:	b508      	push	{r3, lr}
  pDest = &__data_start__;
   1837e:	4b0c      	ldr	r3, [pc, #48]	; (183b0 <Reset_Handler+0x34>)
  pSrc  = &__etext;
   18380:	4a0c      	ldr	r2, [pc, #48]	; (183b4 <Reset_Handler+0x38>)
  for ( ; pDest < &__data_end__ ; ) {
   18382:	e003      	b.n	1838c <Reset_Handler+0x10>
    *pDest++ = *pSrc++;
   18384:	6811      	ldr	r1, [r2, #0]
   18386:	6019      	str	r1, [r3, #0]
   18388:	3304      	adds	r3, #4
   1838a:	3204      	adds	r2, #4
  for ( ; pDest < &__data_end__ ; ) {
   1838c:	490a      	ldr	r1, [pc, #40]	; (183b8 <Reset_Handler+0x3c>)
   1838e:	428b      	cmp	r3, r1
   18390:	d3f8      	bcc.n	18384 <Reset_Handler+0x8>
  pDest = &__bss_start__;
   18392:	4b0a      	ldr	r3, [pc, #40]	; (183bc <Reset_Handler+0x40>)
   18394:	e002      	b.n	1839c <Reset_Handler+0x20>
    *pDest++ = 0UL;
   18396:	2200      	movs	r2, #0
   18398:	601a      	str	r2, [r3, #0]
   1839a:	3304      	adds	r3, #4
  for ( ; pDest < &__bss_end__ ; ) {
   1839c:	4a08      	ldr	r2, [pc, #32]	; (183c0 <Reset_Handler+0x44>)
   1839e:	4293      	cmp	r3, r2
   183a0:	d3f9      	bcc.n	18396 <Reset_Handler+0x1a>
  HWREG(0xE000ED88) = ((HWREG(0xE000ED88) & ~0x00F00000) | 0x00F00000);
   183a2:	4a08      	ldr	r2, [pc, #32]	; (183c4 <Reset_Handler+0x48>)
   183a4:	6813      	ldr	r3, [r2, #0]
   183a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   183aa:	6013      	str	r3, [r2, #0]
  _start();                                 /* Enter PreeMain (C library entry point) */
   183ac:	f000 fa44 	bl	18838 <_start>
   183b0:	20000000 	.word	0x20000000
   183b4:	00020e8c 	.word	0x00020e8c
   183b8:	20000004 	.word	0x20000004
   183bc:	2000066c 	.word	0x2000066c
   183c0:	20000eac 	.word	0x20000eac
   183c4:	e000ed88 	.word	0xe000ed88

000183c8 <init_flash_fs>:
        led_state(PYB_LED_GREEN, 0);
    }

    return true;
    #endif
}
   183c8:	2000      	movs	r0, #0
   183ca:	4770      	bx	lr

000183cc <pyb_main>:
STATIC mp_obj_t pyb_main(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   183cc:	b530      	push	{r4, r5, lr}
   183ce:	b085      	sub	sp, #20
    if (MP_OBJ_IS_STR(pos_args[0])) {
   183d0:	680c      	ldr	r4, [r1, #0]
   183d2:	f004 0303 	and.w	r3, r4, #3
   183d6:	2b02      	cmp	r3, #2
   183d8:	d004      	beq.n	183e4 <pyb_main+0x18>
   183da:	b993      	cbnz	r3, 18402 <pyb_main+0x36>
   183dc:	6825      	ldr	r5, [r4, #0]
   183de:	4b0a      	ldr	r3, [pc, #40]	; (18408 <pyb_main+0x3c>)
   183e0:	429d      	cmp	r5, r3
   183e2:	d10e      	bne.n	18402 <pyb_main+0x36>
        MP_STATE_PORT(pyb_config_main) = pos_args[0];
   183e4:	4d09      	ldr	r5, [pc, #36]	; (1840c <pyb_main+0x40>)
   183e6:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
        mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   183ea:	ab03      	add	r3, sp, #12
   183ec:	9301      	str	r3, [sp, #4]
   183ee:	4b08      	ldr	r3, [pc, #32]	; (18410 <pyb_main+0x44>)
   183f0:	9300      	str	r3, [sp, #0]
   183f2:	2301      	movs	r3, #1
   183f4:	3104      	adds	r1, #4
   183f6:	3801      	subs	r0, #1
   183f8:	f7f2 f9c0 	bl	a77c <mp_arg_parse_all>
        MP_STATE_VM(mp_optimise_value) = args[0].u_int;
   183fc:	9b03      	ldr	r3, [sp, #12]
   183fe:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
}
   18402:	4804      	ldr	r0, [pc, #16]	; (18414 <pyb_main+0x48>)
   18404:	b005      	add	sp, #20
   18406:	bd30      	pop	{r4, r5, pc}
   18408:	00028104 	.word	0x00028104
   1840c:	200008a0 	.word	0x200008a0
   18410:	0002aa58 	.word	0x0002aa58
   18414:	00027b40 	.word	0x00027b40

00018418 <init_sdcard_fs>:

#if MICROPY_HW_HAS_SDCARD
STATIC bool init_sdcard_fs(void) {
   18418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool first_part = true;
    for (int part_num = 1; part_num <= 4; ++part_num) {
   1841a:	2501      	movs	r5, #1
    bool first_part = true;
   1841c:	462f      	mov	r7, r5
    for (int part_num = 1; part_num <= 4; ++part_num) {
   1841e:	e006      	b.n	1842e <init_sdcard_fs+0x16>
        // try to mount the partition
        FRESULT res = f_mount(&vfs_fat->fatfs);

        if (res != FR_OK) {
            // couldn't mount
            m_del_obj(fs_user_mount_t, vfs_fat);
   18420:	4620      	mov	r0, r4
   18422:	f7e8 fa74 	bl	90e <m_free>
            m_del_obj(mp_vfs_mount_t, vfs);
   18426:	4630      	mov	r0, r6
   18428:	f7e8 fa71 	bl	90e <m_free>
    for (int part_num = 1; part_num <= 4; ++part_num) {
   1842c:	3501      	adds	r5, #1
   1842e:	2d04      	cmp	r5, #4
   18430:	dc36      	bgt.n	184a0 <init_sdcard_fs+0x88>
        fs_user_mount_t *vfs_fat = m_new_obj_maybe(fs_user_mount_t);
   18432:	f44f 701d 	mov.w	r0, #628	; 0x274
   18436:	f7e8 fa4f 	bl	8d8 <m_malloc_maybe>
   1843a:	4604      	mov	r4, r0
        mp_vfs_mount_t *vfs = m_new_obj_maybe(mp_vfs_mount_t);
   1843c:	2010      	movs	r0, #16
   1843e:	f7e8 fa4b 	bl	8d8 <m_malloc_maybe>
        if (vfs == NULL || vfs_fat == NULL) {
   18442:	4606      	mov	r6, r0
   18444:	b360      	cbz	r0, 184a0 <init_sdcard_fs+0x88>
   18446:	b35c      	cbz	r4, 184a0 <init_sdcard_fs+0x88>
        vfs_fat->flags = FSUSER_FREE_OBJ;
   18448:	2302      	movs	r3, #2
   1844a:	80a3      	strh	r3, [r4, #4]
        sdcard_init_vfs(vfs_fat, part_num);
   1844c:	4629      	mov	r1, r5
   1844e:	4620      	mov	r0, r4
   18450:	f003 f970 	bl	1b734 <sdcard_init_vfs>
        FRESULT res = f_mount(&vfs_fat->fatfs);
   18454:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18458:	f005 f88a 	bl	1d570 <f_mount>
        if (res != FR_OK) {
   1845c:	2800      	cmp	r0, #0
   1845e:	d1df      	bne.n	18420 <init_sdcard_fs+0x8>
        } else {
            // mounted via FatFs, now mount the SD partition in the VFS
            if (first_part) {
   18460:	b167      	cbz	r7, 1847c <init_sdcard_fs+0x64>
                // the first available partition is traditionally called "sd" for simplicity
                vfs->str = "/sd";
   18462:	4b13      	ldr	r3, [pc, #76]	; (184b0 <init_sdcard_fs+0x98>)
   18464:	6033      	str	r3, [r6, #0]
                vfs->len = 3;
   18466:	2303      	movs	r3, #3
   18468:	6073      	str	r3, [r6, #4]
                } else {
                    vfs->str = "/sd4";
                }
                vfs->len = 4;
            }
            vfs->obj = MP_OBJ_FROM_PTR(vfs_fat);
   1846a:	60b4      	str	r4, [r6, #8]
            vfs->next = NULL;
   1846c:	2300      	movs	r3, #0
   1846e:	60f3      	str	r3, [r6, #12]
            for (mp_vfs_mount_t **m = &MP_STATE_VM(vfs_mount_table);; m = &(*m)->next) {
   18470:	4a10      	ldr	r2, [pc, #64]	; (184b4 <init_sdcard_fs+0x9c>)
                if (*m == NULL) {
   18472:	6813      	ldr	r3, [r2, #0]
   18474:	b163      	cbz	r3, 18490 <init_sdcard_fs+0x78>
            for (mp_vfs_mount_t **m = &MP_STATE_VM(vfs_mount_table);; m = &(*m)->next) {
   18476:	f103 020c 	add.w	r2, r3, #12
                if (*m == NULL) {
   1847a:	e7fa      	b.n	18472 <init_sdcard_fs+0x5a>
                if (part_num == 2) {
   1847c:	2d02      	cmp	r5, #2
   1847e:	d004      	beq.n	1848a <init_sdcard_fs+0x72>
                    vfs->str = "/sd4";
   18480:	4b0d      	ldr	r3, [pc, #52]	; (184b8 <init_sdcard_fs+0xa0>)
   18482:	6033      	str	r3, [r6, #0]
                vfs->len = 4;
   18484:	2304      	movs	r3, #4
   18486:	6073      	str	r3, [r6, #4]
   18488:	e7ef      	b.n	1846a <init_sdcard_fs+0x52>
                    vfs->str = "/sd2";
   1848a:	4b0c      	ldr	r3, [pc, #48]	; (184bc <init_sdcard_fs+0xa4>)
   1848c:	6033      	str	r3, [r6, #0]
   1848e:	e7f9      	b.n	18484 <init_sdcard_fs+0x6c>
                    *m = vfs;
   18490:	6016      	str	r6, [r2, #0]
            #if MICROPY_HW_ENABLE_USB
            // only use SD card as current directory if that's what the USB medium is
            if (pyb_usb_storage_medium == PYB_USB_STORAGE_MEDIUM_SDCARD)
            #endif
            {
                if (first_part) {
   18492:	2f00      	cmp	r7, #0
   18494:	d0ca      	beq.n	1842c <init_sdcard_fs+0x14>
                    // use SD card as current directory
                    MP_STATE_PORT(vfs_cur) = vfs;
   18496:	4b0a      	ldr	r3, [pc, #40]	; (184c0 <init_sdcard_fs+0xa8>)
   18498:	f8c3 6228 	str.w	r6, [r3, #552]	; 0x228
                }
            }
            first_part = false;
   1849c:	2700      	movs	r7, #0
   1849e:	e7c5      	b.n	1842c <init_sdcard_fs+0x14>
        }
    }

    if (first_part) {
   184a0:	b90f      	cbnz	r7, 184a6 <init_sdcard_fs+0x8e>
        printf("PYB: can't mount SD card\n");
        return false;
    } else {
        return true;
   184a2:	2001      	movs	r0, #1
    }
}
   184a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        printf("PYB: can't mount SD card\n");
   184a6:	4807      	ldr	r0, [pc, #28]	; (184c4 <init_sdcard_fs+0xac>)
   184a8:	f7ff ff26 	bl	182f8 <puts>
        return false;
   184ac:	2000      	movs	r0, #0
   184ae:	e7f9      	b.n	184a4 <init_sdcard_fs+0x8c>
   184b0:	0002aa60 	.word	0x0002aa60
   184b4:	20000acc 	.word	0x20000acc
   184b8:	0002aa6c 	.word	0x0002aa6c
   184bc:	0002aa64 	.word	0x0002aa64
   184c0:	200008a0 	.word	0x200008a0
   184c4:	0002aa74 	.word	0x0002aa74

000184c8 <flash_error>:
void flash_error(int n) {
   184c8:	b538      	push	{r3, r4, r5, lr}
   184ca:	4605      	mov	r5, r0
    for (int i = 0; i < n; i++) {
   184cc:	2400      	movs	r4, #0
   184ce:	e006      	b.n	184de <flash_error+0x16>
        mp_hal_delay_ms(250);
   184d0:	20fa      	movs	r0, #250	; 0xfa
   184d2:	f001 fc91 	bl	19df8 <mp_hal_delay_ms>
        mp_hal_delay_ms(250);
   184d6:	20fa      	movs	r0, #250	; 0xfa
   184d8:	f001 fc8e 	bl	19df8 <mp_hal_delay_ms>
    for (int i = 0; i < n; i++) {
   184dc:	3401      	adds	r4, #1
   184de:	42ac      	cmp	r4, r5
   184e0:	dbf6      	blt.n	184d0 <flash_error+0x8>
}
   184e2:	bd38      	pop	{r3, r4, r5, pc}

000184e4 <__fatal_error>:
void NORETURN __fatal_error(const char *msg) {
   184e4:	b500      	push	{lr}
   184e6:	b083      	sub	sp, #12
   184e8:	4604      	mov	r4, r0
    for (volatile uint delay = 0; delay < 10000000; delay++) {
   184ea:	2300      	movs	r3, #0
   184ec:	9300      	str	r3, [sp, #0]
   184ee:	e002      	b.n	184f6 <__fatal_error+0x12>
   184f0:	9b00      	ldr	r3, [sp, #0]
   184f2:	3301      	adds	r3, #1
   184f4:	9300      	str	r3, [sp, #0]
   184f6:	9a00      	ldr	r2, [sp, #0]
   184f8:	4b0c      	ldr	r3, [pc, #48]	; (1852c <__fatal_error+0x48>)
   184fa:	429a      	cmp	r2, r3
   184fc:	d9f8      	bls.n	184f0 <__fatal_error+0xc>
    mp_hal_stdout_tx_strn("\nFATAL ERROR:\n", 14);
   184fe:	210e      	movs	r1, #14
   18500:	480b      	ldr	r0, [pc, #44]	; (18530 <__fatal_error+0x4c>)
   18502:	f000 f9b3 	bl	1886c <mp_hal_stdout_tx_strn>
    mp_hal_stdout_tx_strn(msg, strlen(msg));
   18506:	4620      	mov	r0, r4
   18508:	f003 fa0c 	bl	1b924 <strlen>
   1850c:	4601      	mov	r1, r0
   1850e:	4620      	mov	r0, r4
   18510:	f000 f9ac 	bl	1886c <mp_hal_stdout_tx_strn>
   18514:	e006      	b.n	18524 <__fatal_error+0x40>
        for (volatile uint delay = 0; delay < 10000000; delay++) {
   18516:	9b01      	ldr	r3, [sp, #4]
   18518:	3301      	adds	r3, #1
   1851a:	9301      	str	r3, [sp, #4]
   1851c:	9a01      	ldr	r2, [sp, #4]
   1851e:	4b03      	ldr	r3, [pc, #12]	; (1852c <__fatal_error+0x48>)
   18520:	429a      	cmp	r2, r3
   18522:	d9f8      	bls.n	18516 <__fatal_error+0x32>
   18524:	2300      	movs	r3, #0
   18526:	9301      	str	r3, [sp, #4]
   18528:	e7f8      	b.n	1851c <__fatal_error+0x38>
   1852a:	bf00      	nop
   1852c:	0098967f 	.word	0x0098967f
   18530:	0002aa48 	.word	0x0002aa48

00018534 <nlr_jump_fail>:
void nlr_jump_fail(void *val) {
   18534:	b508      	push	{r3, lr}
   18536:	4604      	mov	r4, r0
    printf("FATAL: uncaught exception %p\n", val);
   18538:	4601      	mov	r1, r0
   1853a:	4805      	ldr	r0, [pc, #20]	; (18550 <nlr_jump_fail+0x1c>)
   1853c:	f7ff febc 	bl	182b8 <printf>
    mp_obj_print_exception(&mp_plat_print, (mp_obj_t)val);
   18540:	4621      	mov	r1, r4
   18542:	4804      	ldr	r0, [pc, #16]	; (18554 <nlr_jump_fail+0x20>)
   18544:	f7f2 fb64 	bl	ac10 <mp_obj_print_exception>
    __fatal_error("");
   18548:	4803      	ldr	r0, [pc, #12]	; (18558 <nlr_jump_fail+0x24>)
   1854a:	f7ff ffcb 	bl	184e4 <__fatal_error>
   1854e:	bf00      	nop
   18550:	0002aa90 	.word	0x0002aa90
   18554:	00023684 	.word	0x00023684
   18558:	0002bd00 	.word	0x0002bd00

0001855c <__assert_func>:
void MP_WEAK __assert_func(const char *file, int line, const char *func, const char *expr) {
   1855c:	b508      	push	{r3, lr}
   1855e:	461c      	mov	r4, r3
    printf("Assertion '%s' failed, at file %s:%d\n", expr, file, line);
   18560:	460b      	mov	r3, r1
   18562:	4602      	mov	r2, r0
   18564:	4621      	mov	r1, r4
   18566:	4803      	ldr	r0, [pc, #12]	; (18574 <__assert_func+0x18>)
   18568:	f7ff fea6 	bl	182b8 <printf>
    __fatal_error("");
   1856c:	4802      	ldr	r0, [pc, #8]	; (18578 <__assert_func+0x1c>)
   1856e:	f7ff ffb9 	bl	184e4 <__fatal_error>
   18572:	bf00      	nop
   18574:	0002aa20 	.word	0x0002aa20
   18578:	0002bd00 	.word	0x0002bd00

0001857c <tm4c_main>:
#endif

int tm4c_main(int reset_mode) {
   1857c:	b570      	push	{r4, r5, r6, lr}
   1857e:	4604      	mov	r4, r0
    // pendsv_init();
    //TODO led_init();
    #if MICROPY_HW_HAS_SWITCH
    switch_init0();
    #endif
    machine_init();
   18580:	f000 fee4 	bl	1934c <machine_init>
    #if MICROPY_HW_ENABLE_RTC
    rtc_init_start(false);
    #endif
    spi_init0();
   18584:	f001 feba 	bl	1a2fc <spi_init0>
    // TODO 
//     #if MICROPY_HW_ENABLE_HW_I2C
//     i2c_init0();
//     #endif
    #if MICROPY_HW_HAS_SDCARD
    sdcard_init();
   18588:	f002 ff14 	bl	1b3b4 <sdcard_init>
   1858c:	e032      	b.n	185f4 <tm4c_main+0x78>
#if MICROPY_HW_HAS_SDCARD
    // if an SD card is present then mount it on /sd/
    if (sdcard_is_present()) {
        // if there is a file in the flash called "SKIPSD", then we don't mount the SD card
        if (!mounted_flash || f_stat(&fs_user_mount_flash.fatfs, "/SKIPSD", NULL) != FR_OK) {
            mounted_sdcard = init_sdcard_fs();
   1858e:	f7ff ff43 	bl	18418 <init_sdcard_fs>
//         pyb_usb_storage_medium = PYB_USB_STORAGE_MEDIUM_FLASH;
//     }
//     #endif

    // set sys.path based on mounted filesystems (/sd is first so it can override /flash)
    if (mounted_sdcard) {
   18592:	2800      	cmp	r0, #0
   18594:	d15f      	bne.n	18656 <tm4c_main+0xda>
        mp_obj_list_append(mp_sys_path, MP_OBJ_NEW_QSTR(MP_QSTR__slash_sd));
        mp_obj_list_append(mp_sys_path, MP_OBJ_NEW_QSTR(MP_QSTR__slash_sd_slash_lib));
    }
    if (mounted_flash) {
   18596:	2d00      	cmp	r5, #0
   18598:	d169      	bne.n	1866e <tm4c_main+0xf2>
        mp_obj_list_append(mp_sys_path, MP_OBJ_NEW_QSTR(MP_QSTR__slash_flash));
        mp_obj_list_append(mp_sys_path, MP_OBJ_NEW_QSTR(MP_QSTR__slash_flash_slash_lib));
    }

    // reset config variables; they should be set by boot.py
    MP_STATE_PORT(pyb_config_main) = MP_OBJ_NULL;
   1859a:	4b4e      	ldr	r3, [pc, #312]	; (186d4 <tm4c_main+0x158>)
   1859c:	2200      	movs	r2, #0
   1859e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    // run boot.py, if it exists
    // TODO perhaps have pyb.reboot([bootpy]) function to soft-reboot and execute custom boot.py
    if (reset_mode == 1 || reset_mode == 3) {
   185a2:	2c01      	cmp	r4, #1
   185a4:	d06d      	beq.n	18682 <tm4c_main+0x106>
   185a6:	2c03      	cmp	r4, #3
   185a8:	d06b      	beq.n	18682 <tm4c_main+0x106>
//     }
//     #endif
// // At this point everything is fully configured and initialised.

    // Run the main script from the current directory.
    if ((reset_mode == 1 || reset_mode == 3) && pyexec_mode_kind == PYEXEC_MODE_FRIENDLY_REPL) {
   185aa:	2c01      	cmp	r4, #1
   185ac:	d001      	beq.n	185b2 <tm4c_main+0x36>
   185ae:	2c03      	cmp	r4, #3
   185b0:	d17b      	bne.n	186aa <tm4c_main+0x12e>
   185b2:	4b49      	ldr	r3, [pc, #292]	; (186d8 <tm4c_main+0x15c>)
   185b4:	781b      	ldrb	r3, [r3, #0]
   185b6:	2b01      	cmp	r3, #1
   185b8:	d177      	bne.n	186aa <tm4c_main+0x12e>
        const char *main_py;
        if (MP_STATE_PORT(pyb_config_main) == MP_OBJ_NULL) {
   185ba:	4b46      	ldr	r3, [pc, #280]	; (186d4 <tm4c_main+0x158>)
   185bc:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   185c0:	2800      	cmp	r0, #0
   185c2:	d06f      	beq.n	186a4 <tm4c_main+0x128>
            main_py = "main.py";
        } else {
            main_py = mp_obj_str_get_str(MP_STATE_PORT(pyb_config_main));
   185c4:	f7f7 fe42 	bl	1024c <mp_obj_str_get_str>
   185c8:	4605      	mov	r5, r0
        }
        mp_import_stat_t stat = mp_import_stat(main_py);
   185ca:	4628      	mov	r0, r5
   185cc:	f7ff f8b0 	bl	17730 <mp_vfs_import_stat>
        if (stat == MP_IMPORT_STAT_FILE) {
   185d0:	2802      	cmp	r0, #2
   185d2:	d16a      	bne.n	186aa <tm4c_main+0x12e>
            int ret = pyexec_file(main_py);
   185d4:	4628      	mov	r0, r5
   185d6:	f003 feb3 	bl	1c340 <pyexec_file>
            if (ret & PYEXEC_FORCED_EXIT) {
   185da:	f410 7f80 	tst.w	r0, #256	; 0x100
   185de:	d063      	beq.n	186a8 <tm4c_main+0x12c>

soft_reset_exit:

    // soft reset

    printf("PYB: sync filesystems\n");
   185e0:	483e      	ldr	r0, [pc, #248]	; (186dc <tm4c_main+0x160>)
   185e2:	f7ff fe89 	bl	182f8 <puts>
    // storage_flush();

    printf("PYB: soft reboot\n");
   185e6:	483e      	ldr	r0, [pc, #248]	; (186e0 <tm4c_main+0x164>)
   185e8:	f7ff fe86 	bl	182f8 <puts>
    // TODO timer_deinit();
    uart_deinit();
   185ec:	f001 fb46 	bl	19c7c <uart_deinit>
#if MICROPY_HW_ENABLE_CAN
    can_deinit();
#endif
    machine_deinit();
   185f0:	f000 feda 	bl	193a8 <machine_deinit>
    mp_stack_ctrl_init();
   185f4:	f7f2 f882 	bl	a6fc <mp_stack_ctrl_init>
    mp_stack_set_top(&_estack);
   185f8:	483a      	ldr	r0, [pc, #232]	; (186e4 <tm4c_main+0x168>)
   185fa:	f7f2 f887 	bl	a70c <mp_stack_set_top>
    gc_init(&_heap_start, &_heap_end);
   185fe:	493a      	ldr	r1, [pc, #232]	; (186e8 <tm4c_main+0x16c>)
   18600:	483a      	ldr	r0, [pc, #232]	; (186ec <tm4c_main+0x170>)
   18602:	f7e8 fa33 	bl	a6c <gc_init>
    mp_init();
   18606:	f7f0 feef 	bl	93e8 <mp_init>
    mp_obj_list_init(mp_sys_path, 0);
   1860a:	4d39      	ldr	r5, [pc, #228]	; (186f0 <tm4c_main+0x174>)
   1860c:	2100      	movs	r1, #0
   1860e:	4628      	mov	r0, r5
   18610:	f7f6 f98e 	bl	e930 <mp_obj_list_init>
    mp_obj_list_append(mp_sys_path, MP_OBJ_NEW_QSTR(MP_QSTR_)); // current dir (or base dir of the script)
   18614:	2106      	movs	r1, #6
   18616:	4628      	mov	r0, r5
   18618:	f7f5 fef2 	bl	e400 <mp_obj_list_append>
    mp_obj_list_init(mp_sys_argv, 0);
   1861c:	2100      	movs	r1, #0
   1861e:	f105 0010 	add.w	r0, r5, #16
   18622:	f7f6 f985 	bl	e930 <mp_obj_list_init>
    readline_init0();
   18626:	f003 fa6b 	bl	1bb00 <readline_init0>
    pin_init0();
   1862a:	f000 fc45 	bl	18eb8 <pin_init0>
    uart_init0();
   1862e:	f001 fb17 	bl	19c60 <uart_init0>
    bool mounted_flash = init_flash_fs(reset_mode);
   18632:	4620      	mov	r0, r4
   18634:	f7ff fec8 	bl	183c8 <init_flash_fs>
   18638:	4605      	mov	r5, r0
    if (sdcard_is_present()) {
   1863a:	f002 febf 	bl	1b3bc <sdcard_is_present>
   1863e:	2800      	cmp	r0, #0
   18640:	d0a9      	beq.n	18596 <tm4c_main+0x1a>
        if (!mounted_flash || f_stat(&fs_user_mount_flash.fatfs, "/SKIPSD", NULL) != FR_OK) {
   18642:	2d00      	cmp	r5, #0
   18644:	d0a3      	beq.n	1858e <tm4c_main+0x12>
   18646:	2200      	movs	r2, #0
   18648:	492a      	ldr	r1, [pc, #168]	; (186f4 <tm4c_main+0x178>)
   1864a:	482b      	ldr	r0, [pc, #172]	; (186f8 <tm4c_main+0x17c>)
   1864c:	f005 fb7c 	bl	1dd48 <f_stat>
   18650:	2800      	cmp	r0, #0
   18652:	d0a0      	beq.n	18596 <tm4c_main+0x1a>
   18654:	e79b      	b.n	1858e <tm4c_main+0x12>
        mp_obj_list_append(mp_sys_path, MP_OBJ_NEW_QSTR(MP_QSTR__slash_sd));
   18656:	4e26      	ldr	r6, [pc, #152]	; (186f0 <tm4c_main+0x174>)
   18658:	f240 513a 	movw	r1, #1338	; 0x53a
   1865c:	4630      	mov	r0, r6
   1865e:	f7f5 fecf 	bl	e400 <mp_obj_list_append>
        mp_obj_list_append(mp_sys_path, MP_OBJ_NEW_QSTR(MP_QSTR__slash_sd_slash_lib));
   18662:	f240 513e 	movw	r1, #1342	; 0x53e
   18666:	4630      	mov	r0, r6
   18668:	f7f5 feca 	bl	e400 <mp_obj_list_append>
   1866c:	e793      	b.n	18596 <tm4c_main+0x1a>
        mp_obj_list_append(mp_sys_path, MP_OBJ_NEW_QSTR(MP_QSTR__slash_flash));
   1866e:	4d20      	ldr	r5, [pc, #128]	; (186f0 <tm4c_main+0x174>)
   18670:	21e6      	movs	r1, #230	; 0xe6
   18672:	4628      	mov	r0, r5
   18674:	f7f5 fec4 	bl	e400 <mp_obj_list_append>
        mp_obj_list_append(mp_sys_path, MP_OBJ_NEW_QSTR(MP_QSTR__slash_flash_slash_lib));
   18678:	21ea      	movs	r1, #234	; 0xea
   1867a:	4628      	mov	r0, r5
   1867c:	f7f5 fec0 	bl	e400 <mp_obj_list_append>
   18680:	e78b      	b.n	1859a <tm4c_main+0x1e>
        mp_import_stat_t stat = mp_import_stat(boot_py);
   18682:	481e      	ldr	r0, [pc, #120]	; (186fc <tm4c_main+0x180>)
   18684:	f7ff f854 	bl	17730 <mp_vfs_import_stat>
        if (stat == MP_IMPORT_STAT_FILE) {
   18688:	2802      	cmp	r0, #2
   1868a:	d18e      	bne.n	185aa <tm4c_main+0x2e>
            int ret = pyexec_file(boot_py);
   1868c:	481b      	ldr	r0, [pc, #108]	; (186fc <tm4c_main+0x180>)
   1868e:	f003 fe57 	bl	1c340 <pyexec_file>
            if (ret & PYEXEC_FORCED_EXIT) {
   18692:	f410 7f80 	tst.w	r0, #256	; 0x100
   18696:	d1a3      	bne.n	185e0 <tm4c_main+0x64>
            if (!ret) {
   18698:	2800      	cmp	r0, #0
   1869a:	d186      	bne.n	185aa <tm4c_main+0x2e>
                flash_error(4);
   1869c:	2004      	movs	r0, #4
   1869e:	f7ff ff13 	bl	184c8 <flash_error>
   186a2:	e782      	b.n	185aa <tm4c_main+0x2e>
            main_py = "main.py";
   186a4:	4d16      	ldr	r5, [pc, #88]	; (18700 <tm4c_main+0x184>)
   186a6:	e790      	b.n	185ca <tm4c_main+0x4e>
            if (!ret) {
   186a8:	b118      	cbz	r0, 186b2 <tm4c_main+0x136>
    pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   186aa:	4b0b      	ldr	r3, [pc, #44]	; (186d8 <tm4c_main+0x15c>)
   186ac:	2201      	movs	r2, #1
   186ae:	701a      	strb	r2, [r3, #0]
   186b0:	e006      	b.n	186c0 <tm4c_main+0x144>
                flash_error(3);
   186b2:	2003      	movs	r0, #3
   186b4:	f7ff ff08 	bl	184c8 <flash_error>
   186b8:	e7f7      	b.n	186aa <tm4c_main+0x12e>
            if (pyexec_friendly_repl() != 0) {
   186ba:	f003 fdaf 	bl	1c21c <pyexec_friendly_repl>
   186be:	b938      	cbnz	r0, 186d0 <tm4c_main+0x154>
        if (pyexec_mode_kind == PYEXEC_MODE_RAW_REPL) {
   186c0:	4b05      	ldr	r3, [pc, #20]	; (186d8 <tm4c_main+0x15c>)
   186c2:	781b      	ldrb	r3, [r3, #0]
   186c4:	2b00      	cmp	r3, #0
   186c6:	d1f8      	bne.n	186ba <tm4c_main+0x13e>
            if (pyexec_raw_repl() != 0) {
   186c8:	f003 fd5a 	bl	1c180 <pyexec_raw_repl>
   186cc:	2800      	cmp	r0, #0
   186ce:	d0f7      	beq.n	186c0 <tm4c_main+0x144>
    #if MICROPY_PY_THREAD
    pyb_thread_deinit();
    #endif

    goto soft_reset;
}
   186d0:	2000      	movs	r0, #0
   186d2:	bd70      	pop	{r4, r5, r6, pc}
   186d4:	200008a0 	.word	0x200008a0
   186d8:	20000001 	.word	0x20000001
   186dc:	0002aad4 	.word	0x0002aad4
   186e0:	0002aaec 	.word	0x0002aaec
   186e4:	20008000 	.word	0x20008000
   186e8:	20006eac 	.word	0x20006eac
   186ec:	20000eac 	.word	0x20000eac
   186f0:	200008f8 	.word	0x200008f8
   186f4:	0002aac4 	.word	0x0002aac4
   186f8:	20000c3c 	.word	0x20000c3c
   186fc:	0002aacc 	.word	0x0002aacc
   18700:	0002aabc 	.word	0x0002aabc

00018704 <tm4c123_init>:

#define UART0  ((periph_uart_t*) 0x4000C000)

//#define SYSCTL ((periph_sysctl_t*)  0x400FE000)

void tm4c123_init(void) {
   18704:	b510      	push	{r4, lr}
    // basic MCU config

    // // set system clock to 80MHz
    SYSCTL->RCC |= (uint32_t)0x00000800;   // set BYPASS bit
   18706:	4b46      	ldr	r3, [pc, #280]	; (18820 <tm4c123_init+0x11c>)
   18708:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1870a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1870e:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC2 |= (uint32_t)0xC0000800;  // set BYPASS2 bit, DIV400 and USERCC2
   18710:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18712:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
   18716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1871a:	671a      	str	r2, [r3, #112]	; 0x70
    SYSCTL->RCC &= (uint32_t)0xFFBFFFFF;   // clear USESYSDIV bit
   1871c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1871e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   18722:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC = (SYSCTL->RCC & (uint32_t)0xFFFFF83F) | (uint32_t)0x00000B70;    // XTAL to 16 MHz
   18724:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18726:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1872a:	f442 6237 	orr.w	r2, r2, #2928	; 0xb70
   1872e:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->MISC &= 0xFFFFFFBF;            // clear PLLLRIS bit
   18730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   18732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   18736:	659a      	str	r2, [r3, #88]	; 0x58
    SYSCTL->RCC2 &= (uint32_t)0xFFFFDFFF;  // clear PWRDN2 Bit to enable PLL
   18738:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1873a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1873e:	671a      	str	r2, [r3, #112]	; 0x70
    SYSCTL->RCC2 = (SYSCTL->RCC2 & (uint32_t)0xE03FFFFF) | (uint32_t)0x01000000;  // Set SYSDIV2 to 0x2 for 80MHz
   18740:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18742:	f022 52fe 	bic.w	r2, r2, #532676608	; 0x1fc00000
   18746:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   1874a:	671a      	str	r2, [r3, #112]	; 0x70
    SYSCTL->RCC |= (uint32_t)0x00400000;   // set USESYSDIV bit
   1874c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1874e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   18752:	661a      	str	r2, [r3, #96]	; 0x60
    while(!(SYSCTL->RIS & 0x00000040)){};  // wait for Pll to lock, PLLLRIS bit
   18754:	4b32      	ldr	r3, [pc, #200]	; (18820 <tm4c123_init+0x11c>)
   18756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   18758:	f013 0f40 	tst.w	r3, #64	; 0x40
   1875c:	d0fa      	beq.n	18754 <tm4c123_init+0x50>
    SYSCTL->RCC2 &= 0xFFFFF7FF;            // clear BYPASS2 bit, clears BYPASS as well
   1875e:	4b30      	ldr	r3, [pc, #192]	; (18820 <tm4c123_init+0x11c>)
   18760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   18766:	671a      	str	r2, [r3, #112]	; 0x70
    // write final configuration
    SYSCTL->RCC = (uint32_t)(0x07C00550);  // 0b0000 0 1111 1 0 0 000 000 0 0 0 10101 01 000 0
   18768:	4a2e      	ldr	r2, [pc, #184]	; (18824 <tm4c123_init+0x120>)
   1876a:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC2 = (uint32_t)(0xC1000000); // 0b 1100 0001 0000 0000 0000 0000 0000 0000
   1876c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
   18770:	671a      	str	r2, [r3, #112]	; 0x70

    //SystemInit();
    // enable high performance GPIO BUS Ctl
    SYSCTL->GPIOHBCTL = 0x0000003F;
   18772:	223f      	movs	r2, #63	; 0x3f
   18774:	66da      	str	r2, [r3, #108]	; 0x6c

    // enable GPIO Port F
        SYSCTL->RCGCGPIO |= 0x00000020;
   18776:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
   1877a:	f042 0220 	orr.w	r2, r2, #32
   1877e:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
    //*((volatile uint32_t*)0x400FE608) = 0x00000021;
    while( !(SYSCTL->PRGPIO & 0x00000020)){};
   18782:	4b27      	ldr	r3, [pc, #156]	; (18820 <tm4c123_init+0x11c>)
   18784:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   18788:	f013 0f20 	tst.w	r3, #32
   1878c:	d0f9      	beq.n	18782 <tm4c123_init+0x7e>
//    gpio_high(GPIOF, 3);
//    //*((volatile uint32_t*)0x4005D3FC) = 0x00000007;

    // enable UART0 at 9600 baud (TX=A1, RX=A0)
    // enable UART0
    SYSCTL->RCGCUART = 0x00000001;
   1878e:	4b24      	ldr	r3, [pc, #144]	; (18820 <tm4c123_init+0x11c>)
   18790:	2201      	movs	r2, #1
   18792:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    //*((volatile uint32_t*)0x400FE618) = 0x00000001;
    while(SYSCTL->PRUART != 0x00000001){};
   18796:	4b22      	ldr	r3, [pc, #136]	; (18820 <tm4c123_init+0x11c>)
   18798:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
   1879c:	2b01      	cmp	r3, #1
   1879e:	d1fa      	bne.n	18796 <tm4c123_init+0x92>
    //while( *((volatile uint32_t*)0x400FEA18) != 0x00000001){};

    // enable GPIO Port A
    SYSCTL->RCGCGPIO |= 0x00000001;
   187a0:	4a1f      	ldr	r2, [pc, #124]	; (18820 <tm4c123_init+0x11c>)
   187a2:	f8d2 3608 	ldr.w	r3, [r2, #1544]	; 0x608
   187a6:	f043 0301 	orr.w	r3, r3, #1
   187aa:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    while( !(SYSCTL->PRGPIO & 0x00000001)){};
   187ae:	4b1c      	ldr	r3, [pc, #112]	; (18820 <tm4c123_init+0x11c>)
   187b0:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   187b4:	f013 0f01 	tst.w	r3, #1
   187b8:	d0f9      	beq.n	187ae <tm4c123_init+0xaa>

//    // GPIOA already configured for UART0 after reset
//    gpio_init(GPIOA, 0, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);
//    gpio_init(GPIOA, 1, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);

    MAP_GPIOPinTypeUART(GPIO_PORTA_AHB_BASE, GPIO_PIN_0 | GPIO_PIN_1);
   187ba:	2103      	movs	r1, #3
   187bc:	481a      	ldr	r0, [pc, #104]	; (18828 <tm4c123_init+0x124>)
   187be:	f008 f8da 	bl	20976 <GPIOPinTypeUART>
    // UART0->CC = 0x00000000;   // use SysClock
    // UART0->CTL = 0x00000300; // disable cts & rts, RXE, TXE, no loopback, 16x oversampling, TXRIS on IFLS match, no smart card, no low power, no SIR, UART enabled
    // UART0->CTL |= 0x00000001;
    // to change settings in active mode: page 918 of reference

    UARTDisable(UART0_BASE);
   187c2:	4c1a      	ldr	r4, [pc, #104]	; (1882c <tm4c123_init+0x128>)
   187c4:	4620      	mov	r0, r4
   187c6:	f008 faff 	bl	20dc8 <UARTDisable>
    UARTClockSourceSet(UART0_BASE, UART_CLOCK_SYSTEM);
   187ca:	2100      	movs	r1, #0
   187cc:	4620      	mov	r0, r4
   187ce:	f008 fb4d 	bl	20e6c <UARTClockSourceSet>
    UARTFlowControlSet(UART0_BASE, UART_FLOWCONTROL_NONE);
   187d2:	2100      	movs	r1, #0
   187d4:	4620      	mov	r0, r4
   187d6:	f008 fb2f 	bl	20e38 <UARTFlowControlSet>
    UARTFIFOEnable(UART0_BASE);
   187da:	4620      	mov	r0, r4
   187dc:	f008 fb27 	bl	20e2e <UARTFIFOEnable>
    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200, UART_CONFIG_WLEN_8 | UART_CONFIG_PAR_NONE | UART_CONFIG_STOP_ONE);
   187e0:	f008 f9f4 	bl	20bcc <SysCtlClockGet>
   187e4:	2360      	movs	r3, #96	; 0x60
   187e6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   187ea:	4601      	mov	r1, r0
   187ec:	4620      	mov	r0, r4
   187ee:	f008 faf9 	bl	20de4 <UARTConfigSetExpClk>
    UARTEnable(UART0_BASE);
   187f2:	4620      	mov	r0, r4
   187f4:	f008 fadd 	bl	20db2 <UARTEnable>
    //Setup of Systick to 1ms
    //Already registered in int vector
//    SysTickIntDisable();
//    SysTickIntRegister(SysTick_Handler);

    ROM_FPUEnable();
   187f8:	4c0d      	ldr	r4, [pc, #52]	; (18830 <tm4c123_init+0x12c>)
   187fa:	6823      	ldr	r3, [r4, #0]
   187fc:	681b      	ldr	r3, [r3, #0]
   187fe:	4798      	blx	r3
    ROM_FPULazyStackingEnable();
   18800:	6823      	ldr	r3, [r4, #0]
   18802:	691b      	ldr	r3, [r3, #16]
   18804:	4798      	blx	r3
    
    SysTickIntEnable();
   18806:	f008 fa91 	bl	20d2c <SysTickIntEnable>
    SysTickPeriodSet(SysCtlClockGet()/SYS_TICK_DIVIDER);
   1880a:	f008 f9df 	bl	20bcc <SysCtlClockGet>
   1880e:	4b09      	ldr	r3, [pc, #36]	; (18834 <tm4c123_init+0x130>)
   18810:	fba3 3000 	umull	r3, r0, r3, r0
   18814:	0980      	lsrs	r0, r0, #6
   18816:	f008 fa91 	bl	20d3c <SysTickPeriodSet>
    SysTickEnable();
   1881a:	f008 fa7f 	bl	20d1c <SysTickEnable>
}
   1881e:	bd10      	pop	{r4, pc}
   18820:	400fe000 	.word	0x400fe000
   18824:	07c00550 	.word	0x07c00550
   18828:	40058000 	.word	0x40058000
   1882c:	4000c000 	.word	0x4000c000
   18830:	01000078 	.word	0x01000078
   18834:	10624dd3 	.word	0x10624dd3

00018838 <_start>:
void _start(void) {
   18838:	b508      	push	{r3, lr}
    *((volatile uint32_t*)0xe000ed14) |= 1 << 9;
   1883a:	4a05      	ldr	r2, [pc, #20]	; (18850 <_start+0x18>)
   1883c:	6813      	ldr	r3, [r2, #0]
   1883e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   18842:	6013      	str	r3, [r2, #0]
    tm4c123_init();
   18844:	f7ff ff5e 	bl	18704 <tm4c123_init>
    tm4c_main(1);
   18848:	2001      	movs	r0, #1
   1884a:	f7ff fe97 	bl	1857c <tm4c_main>
   1884e:	e7fe      	b.n	1884e <_start+0x16>
   18850:	e000ed14 	.word	0xe000ed14

00018854 <mp_hal_stdin_rx_chr>:
#if MICROPY_MIN_USE_STDOUT
    int r = read(0, &c, 1);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    // wait for RXFE to clear
    while (UART0->FR & (1 << 4)) {
   18854:	4b04      	ldr	r3, [pc, #16]	; (18868 <mp_hal_stdin_rx_chr+0x14>)
   18856:	699b      	ldr	r3, [r3, #24]
   18858:	f013 0f10 	tst.w	r3, #16
   1885c:	d1fa      	bne.n	18854 <mp_hal_stdin_rx_chr>
    }
    c = UART0->DR & 0xFF;
   1885e:	4b02      	ldr	r3, [pc, #8]	; (18868 <mp_hal_stdin_rx_chr+0x14>)
   18860:	6818      	ldr	r0, [r3, #0]
#endif
    return c;
}
   18862:	b2c0      	uxtb	r0, r0
   18864:	4770      	bx	lr
   18866:	bf00      	nop
   18868:	4000c000 	.word	0x4000c000

0001886c <mp_hal_stdout_tx_strn>:
void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {
#if MICROPY_MIN_USE_STDOUT
    int r = write(1, str, len);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    while (len--) {
   1886c:	e009      	b.n	18882 <mp_hal_stdout_tx_strn+0x16>
        // wait for TXFF to clear
        while (UART0->FR & (1 << 5)) {
   1886e:	4b07      	ldr	r3, [pc, #28]	; (1888c <mp_hal_stdout_tx_strn+0x20>)
   18870:	699b      	ldr	r3, [r3, #24]
   18872:	f013 0f20 	tst.w	r3, #32
   18876:	d1fa      	bne.n	1886e <mp_hal_stdout_tx_strn+0x2>
        }
        UART0->DR = *str++;
   18878:	7801      	ldrb	r1, [r0, #0]
   1887a:	4b04      	ldr	r3, [pc, #16]	; (1888c <mp_hal_stdout_tx_strn+0x20>)
   1887c:	6019      	str	r1, [r3, #0]
    while (len--) {
   1887e:	4611      	mov	r1, r2
        UART0->DR = *str++;
   18880:	3001      	adds	r0, #1
    while (len--) {
   18882:	1e4a      	subs	r2, r1, #1
   18884:	2900      	cmp	r1, #0
   18886:	d1f2      	bne.n	1886e <mp_hal_stdout_tx_strn+0x2>
    }
#endif
}
   18888:	4770      	bx	lr
   1888a:	bf00      	nop
   1888c:	4000c000 	.word	0x4000c000

00018890 <gc_collect>:
#include "systick.h"

mp_uint_t gc_helper_get_regs_and_sp(mp_uint_t *regs);


void gc_collect(void) {
   18890:	b500      	push	{lr}
   18892:	b08b      	sub	sp, #44	; 0x2c
    #if 0
    uint32_t start = mp_hal_ticks_us();
    #endif

    // start the GC
    gc_collect_start();
   18894:	f7e8 f932 	bl	afc <gc_collect_start>

    // get the registers and the sp
    mp_uint_t regs[10];
    mp_uint_t sp = gc_helper_get_regs_and_sp(regs);
   18898:	4668      	mov	r0, sp
   1889a:	f7e7 fd91 	bl	3c0 <gc_helper_get_regs_and_sp>

    // trace the stack, including the registers (since they live on the stack in this function)
    #if MICROPY_PY_THREAD
    gc_collect_root((void**)sp, ((uint32_t)MP_STATE_THREAD(&_estack) - sp) / sizeof(uint32_t));
    #else
    gc_collect_root((void**)sp, ((uint32_t)&_estack - sp) / sizeof(uint32_t));
   1889e:	4905      	ldr	r1, [pc, #20]	; (188b4 <gc_collect+0x24>)
   188a0:	1a09      	subs	r1, r1, r0
   188a2:	0889      	lsrs	r1, r1, #2
   188a4:	f7e8 f966 	bl	b74 <gc_collect_root>
    #if MICROPY_PY_THREAD
    mp_thread_gc_others();
    #endif

    // end the GC
    gc_collect_end();
   188a8:	f7e8 f998 	bl	bdc <gc_collect_end>
    printf("GC");
    printf(" " UINT_FMT " total\n", info.total);
    printf(" " UINT_FMT " : " UINT_FMT "\n", info.used, info.free);
    printf(" 1=" UINT_FMT " 2=" UINT_FMT " m=" UINT_FMT "\n", info.num_1block, info.num_2block, info.max_block);
    #endif
}
   188ac:	b00b      	add	sp, #44	; 0x2c
   188ae:	f85d fb04 	ldr.w	pc, [sp], #4
   188b2:	bf00      	nop
   188b4:	20008000 	.word	0x20008000

000188b8 <mp_hal_raise>:
//    [HAL_ERROR] = MP_EIO,
//    [HAL_BUSY] = MP_EBUSY,
//    [HAL_TIMEOUT] = MP_ETIMEDOUT,
//};

NORETURN void mp_hal_raise(int status) {
   188b8:	b508      	push	{r3, lr}
   mp_raise_OSError(status);
   188ba:	f7f1 fefd 	bl	a6b8 <mp_raise_OSError>

000188be <mp_hal_gpio_clock_enable>:
//
//mp_uint_t mp_hal_ticks_us(void) {
//    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000000);
//}

void mp_hal_gpio_clock_enable(const uint32_t periph) {
   188be:	b510      	push	{r4, lr}
   188c0:	4604      	mov	r4, r0
    if (MAP_SysCtlPeripheralReady(periph)) {
   188c2:	f008 f915 	bl	20af0 <SysCtlPeripheralReady>
   188c6:	b100      	cbz	r0, 188ca <mp_hal_gpio_clock_enable+0xc>
        //Already acive
        return;
    }
    MAP_SysCtlPeripheralEnable(periph);
    while(!MAP_SysCtlPeripheralReady(periph)){};
}
   188c8:	bd10      	pop	{r4, pc}
    MAP_SysCtlPeripheralEnable(periph);
   188ca:	4620      	mov	r0, r4
   188cc:	f008 f922 	bl	20b14 <SysCtlPeripheralEnable>
    while(!MAP_SysCtlPeripheralReady(periph)){};
   188d0:	4620      	mov	r0, r4
   188d2:	f008 f90d 	bl	20af0 <SysCtlPeripheralReady>
   188d6:	2800      	cmp	r0, #0
   188d8:	d0fa      	beq.n	188d0 <mp_hal_gpio_clock_enable+0x12>
   188da:	e7f5      	b.n	188c8 <mp_hal_gpio_clock_enable+0xa>

000188dc <mp_hal_unlock_special_pin>:

void mp_hal_unlock_special_pin(mp_hal_pin_obj_t pin) {
    pin->regs->LOCK = GPIO_LOCK_KEY;
   188dc:	6903      	ldr	r3, [r0, #16]
   188de:	4a05      	ldr	r2, [pc, #20]	; (188f4 <mp_hal_unlock_special_pin+0x18>)
   188e0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    pin->regs->CR |= pin->pin_mask;
   188e4:	6902      	ldr	r2, [r0, #16]
   188e6:	f8d2 3524 	ldr.w	r3, [r2, #1316]	; 0x524
   188ea:	6a41      	ldr	r1, [r0, #36]	; 0x24
   188ec:	430b      	orrs	r3, r1
   188ee:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   188f2:	4770      	bx	lr
   188f4:	4c4f434b 	.word	0x4c4f434b

000188f8 <mp_hal_pin_needs_unlocking>:

bool mp_hal_pin_needs_unlocking(mp_hal_pin_obj_t pin) { 
    return !(bool)(pin->regs->CR & pin->pin_mask);
   188f8:	6903      	ldr	r3, [r0, #16]
   188fa:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
   188fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   18900:	421a      	tst	r2, r3
}
   18902:	bf0c      	ite	eq
   18904:	2001      	moveq	r0, #1
   18906:	2000      	movne	r0, #0
   18908:	4770      	bx	lr
	...

0001890c <mp_hal_pin_config>:

bool mp_hal_pin_config(mp_hal_pin_obj_t pin_obj, uint32_t dir, uint32_t type, uint32_t drive) {
   1890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1890e:	4604      	mov	r4, r0
   18910:	460f      	mov	r7, r1
   18912:	4616      	mov	r6, r2
   18914:	461d      	mov	r5, r3
    mp_hal_gpio_clock_enable(pin_obj->periph);
   18916:	68c0      	ldr	r0, [r0, #12]
   18918:	f7ff ffd1 	bl	188be <mp_hal_gpio_clock_enable>

    if(mp_hal_pin_needs_unlocking(pin_obj)) {
   1891c:	4620      	mov	r0, r4
   1891e:	f7ff ffeb 	bl	188f8 <mp_hal_pin_needs_unlocking>
   18922:	b970      	cbnz	r0, 18942 <mp_hal_pin_config+0x36>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_RuntimeError, "Pin \"%s\" needs to be unlocked first", qstr_str(pin_obj->name)));
        return false;
    }

    MAP_GPIODirModeSet(pin_obj->gpio, pin_obj->pin_mask, dir);
   18924:	463a      	mov	r2, r7
   18926:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   1892a:	68a0      	ldr	r0, [r4, #8]
   1892c:	f007 fef4 	bl	20718 <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->gpio, pin_obj->pin_mask, drive, type);
   18930:	4633      	mov	r3, r6
   18932:	462a      	mov	r2, r5
   18934:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   18938:	68a0      	ldr	r0, [r4, #8]
   1893a:	f007 ff13 	bl	20764 <GPIOPadConfigSet>
    return true;
}
   1893e:	2001      	movs	r0, #1
   18940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_RuntimeError, "Pin \"%s\" needs to be unlocked first", qstr_str(pin_obj->name)));
   18942:	6860      	ldr	r0, [r4, #4]
   18944:	f7e8 fea5 	bl	1692 <qstr_str>
   18948:	4602      	mov	r2, r0
   1894a:	4903      	ldr	r1, [pc, #12]	; (18958 <mp_hal_pin_config+0x4c>)
   1894c:	4803      	ldr	r0, [pc, #12]	; (1895c <mp_hal_pin_config+0x50>)
   1894e:	f7f4 f8bd 	bl	cacc <mp_obj_new_exception_msg_varg>
   18952:	f7e7 ff95 	bl	880 <nlr_jump>
   18956:	bf00      	nop
   18958:	0002ab00 	.word	0x0002ab00
   1895c:	00026b94 	.word	0x00026b94

00018960 <mp_hal_pin_set_af>:

void mp_hal_pin_set_af(mp_hal_pin_obj_t pin_obj, uint8_t af_id) {
    if (af_id == 0xFF) return;
   18960:	29ff      	cmp	r1, #255	; 0xff
   18962:	d00d      	beq.n	18980 <mp_hal_pin_set_af+0x20>
void mp_hal_pin_set_af(mp_hal_pin_obj_t pin_obj, uint8_t af_id) {
   18964:	b538      	push	{r3, r4, r5, lr}
   18966:	460c      	mov	r4, r1
   18968:	4605      	mov	r5, r0
    mp_hal_gpio_clock_enable(pin_obj->periph);
   1896a:	68c0      	ldr	r0, [r0, #12]
   1896c:	f7ff ffa7 	bl	188be <mp_hal_gpio_clock_enable>
    GPIOPinConfigure(pin_find_af_by_index(pin_obj,af_id)->conf);
   18970:	4621      	mov	r1, r4
   18972:	4628      	mov	r0, r5
   18974:	f000 fbbd 	bl	190f2 <pin_find_af_by_index>
   18978:	68c0      	ldr	r0, [r0, #12]
   1897a:	f007 ffff 	bl	2097c <GPIOPinConfigure>
}
   1897e:	bd38      	pop	{r3, r4, r5, pc}
   18980:	4770      	bx	lr

00018982 <mp_hal_pin_config_alt>:

bool mp_hal_pin_config_alt(mp_hal_pin_obj_t pin, uint8_t fn, uint8_t unit) {
   18982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18984:	4606      	mov	r6, r0
   18986:	460c      	mov	r4, r1
    const pin_af_obj_t *af = pin_find_af(pin, fn, unit);
   18988:	f000 fb9e 	bl	190c8 <pin_find_af>
    // does af exist?
    if (af == NULL) {
   1898c:	2800      	cmp	r0, #0
   1898e:	d047      	beq.n	18a20 <mp_hal_pin_config_alt+0x9e>
   18990:	4607      	mov	r7, r0
    // default settings:
    uint32_t strength = GPIO_STRENGTH_2MA;
    uint32_t type = GPIO_PIN_TYPE_STD;
    uint32_t dir = GPIO_DIR_MODE_HW;
    
    switch(fn) {
   18992:	2c0c      	cmp	r4, #12
   18994:	d808      	bhi.n	189a8 <mp_hal_pin_config_alt+0x26>
   18996:	e8df f004 	tbb	[pc, r4]
   1899a:	072f      	.short	0x072f
   1899c:	07201607 	.word	0x07201607
   189a0:	07070707 	.word	0x07070707
   189a4:	241c      	.short	0x241c
   189a6:	0b          	.byte	0x0b
   189a7:	00          	.byte	0x00
    uint32_t dir = GPIO_DIR_MODE_HW;
   189a8:	2102      	movs	r1, #2
    uint32_t type = GPIO_PIN_TYPE_STD;
   189aa:	2208      	movs	r2, #8
    uint32_t strength = GPIO_STRENGTH_2MA;
   189ac:	2301      	movs	r3, #1
   189ae:	e026      	b.n	189fe <mp_hal_pin_config_alt+0x7c>
        case PIN_FN_ADC:
            type = GPIO_PIN_TYPE_ANALOG;
            dir = GPIO_DIR_MODE_IN;
            break;
        case PIN_FN_COMP:
            if(af->type != AF_COMP_OUT) { // AF COMP NEG/POS
   189b0:	6883      	ldr	r3, [r0, #8]
   189b2:	2b02      	cmp	r3, #2
   189b4:	d003      	beq.n	189be <mp_hal_pin_config_alt+0x3c>
                type = GPIO_PIN_TYPE_ANALOG;
                dir = GPIO_DIR_MODE_IN;
   189b6:	2100      	movs	r1, #0
                type = GPIO_PIN_TYPE_ANALOG;
   189b8:	460a      	mov	r2, r1
    uint32_t strength = GPIO_STRENGTH_2MA;
   189ba:	2301      	movs	r3, #1
   189bc:	e01f      	b.n	189fe <mp_hal_pin_config_alt+0x7c>
    uint32_t dir = GPIO_DIR_MODE_HW;
   189be:	2102      	movs	r1, #2
    uint32_t type = GPIO_PIN_TYPE_STD;
   189c0:	2208      	movs	r2, #8
    uint32_t strength = GPIO_STRENGTH_2MA;
   189c2:	2301      	movs	r3, #1
   189c4:	e01b      	b.n	189fe <mp_hal_pin_config_alt+0x7c>
            }
            break;
        case PIN_FN_I2C:
            if(af->type == AF_I2C_SDA) {
   189c6:	6883      	ldr	r3, [r0, #8]
   189c8:	b333      	cbz	r3, 18a18 <mp_hal_pin_config_alt+0x96>
    uint32_t dir = GPIO_DIR_MODE_HW;
   189ca:	2102      	movs	r1, #2
    uint32_t type = GPIO_PIN_TYPE_STD;
   189cc:	2208      	movs	r2, #8
    uint32_t strength = GPIO_STRENGTH_2MA;
   189ce:	2301      	movs	r3, #1
   189d0:	e015      	b.n	189fe <mp_hal_pin_config_alt+0x7c>
    uint32_t dir = GPIO_DIR_MODE_HW;
   189d2:	2102      	movs	r1, #2
    uint32_t type = GPIO_PIN_TYPE_STD;
   189d4:	2208      	movs	r2, #8
                type = GPIO_PIN_TYPE_OD;
            }
            break;
        case PIN_FN_CAN:
            strength = GPIO_STRENGTH_8MA;
   189d6:	2366      	movs	r3, #102	; 0x66
            break;
   189d8:	e011      	b.n	189fe <mp_hal_pin_config_alt+0x7c>
    uint32_t dir = GPIO_DIR_MODE_HW;
   189da:	2102      	movs	r1, #2
        case PIN_FN_QEI:
            type = GPIO_PIN_TYPE_STD_WPU;
   189dc:	220a      	movs	r2, #10
    uint32_t strength = GPIO_STRENGTH_2MA;
   189de:	2301      	movs	r3, #1
            break;
   189e0:	e00d      	b.n	189fe <mp_hal_pin_config_alt+0x7c>
        case PIN_FN_USB:
            if(!(af->type == AF_USB_EPEN || af->type == AF_USB_PFLT)) { 
   189e2:	6883      	ldr	r3, [r0, #8]
   189e4:	2b01      	cmp	r3, #1
   189e6:	d903      	bls.n	189f0 <mp_hal_pin_config_alt+0x6e>
                type = GPIO_PIN_TYPE_ANALOG;
                dir = GPIO_DIR_MODE_IN;
   189e8:	2100      	movs	r1, #0
                type = GPIO_PIN_TYPE_ANALOG;
   189ea:	460a      	mov	r2, r1
    uint32_t strength = GPIO_STRENGTH_2MA;
   189ec:	2301      	movs	r3, #1
   189ee:	e006      	b.n	189fe <mp_hal_pin_config_alt+0x7c>
    uint32_t dir = GPIO_DIR_MODE_HW;
   189f0:	2102      	movs	r1, #2
    uint32_t type = GPIO_PIN_TYPE_STD;
   189f2:	2208      	movs	r2, #8
    uint32_t strength = GPIO_STRENGTH_2MA;
   189f4:	2301      	movs	r3, #1
   189f6:	e002      	b.n	189fe <mp_hal_pin_config_alt+0x7c>
            dir = GPIO_DIR_MODE_IN;
   189f8:	2100      	movs	r1, #0
            type = GPIO_PIN_TYPE_ANALOG;
   189fa:	460a      	mov	r2, r1
    uint32_t strength = GPIO_STRENGTH_2MA;
   189fc:	2301      	movs	r3, #1
        case PIN_FN_WTIM:
        case PIN_FN_TR:
        default:
            break;
    }
    if(!mp_hal_pin_config(pin, dir, type, strength)) return false;
   189fe:	4630      	mov	r0, r6
   18a00:	f7ff ff84 	bl	1890c <mp_hal_pin_config>
   18a04:	4605      	mov	r5, r0
   18a06:	b160      	cbz	r0, 18a22 <mp_hal_pin_config_alt+0xa0>
    // ADC does not need this config.
    if(fn != PIN_FN_ADC) mp_hal_pin_set_af(pin, af->idx);
   18a08:	b15c      	cbz	r4, 18a22 <mp_hal_pin_config_alt+0xa0>
   18a0a:	f997 1004 	ldrsb.w	r1, [r7, #4]
   18a0e:	b2c9      	uxtb	r1, r1
   18a10:	4630      	mov	r0, r6
   18a12:	f7ff ffa5 	bl	18960 <mp_hal_pin_set_af>
   18a16:	e004      	b.n	18a22 <mp_hal_pin_config_alt+0xa0>
    uint32_t dir = GPIO_DIR_MODE_HW;
   18a18:	2102      	movs	r1, #2
                type = GPIO_PIN_TYPE_OD;
   18a1a:	2209      	movs	r2, #9
    uint32_t strength = GPIO_STRENGTH_2MA;
   18a1c:	2301      	movs	r3, #1
   18a1e:	e7ee      	b.n	189fe <mp_hal_pin_config_alt+0x7c>
        return false;
   18a20:	2500      	movs	r5, #0
    return true;
}   
   18a22:	4628      	mov	r0, r5
   18a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00018a28 <HAL_GetTick>:

uint32_t HAL_GetTick() {
    extern uint32_t uwTick;
    return uwTick;
}
   18a28:	4b01      	ldr	r3, [pc, #4]	; (18a30 <HAL_GetTick+0x8>)
   18a2a:	6818      	ldr	r0, [r3, #0]
   18a2c:	4770      	bx	lr
   18a2e:	bf00      	nop
   18a30:	20000ea0 	.word	0x20000ea0

00018a34 <mp_hal_stdout_tx_str>:
    //    }
       MICROPY_EVENT_POLL_HOOK
   }
}

void mp_hal_stdout_tx_str(const char *str) {
   18a34:	b510      	push	{r4, lr}
   18a36:	4604      	mov	r4, r0
   mp_hal_stdout_tx_strn(str, strlen(str));
   18a38:	f002 ff74 	bl	1b924 <strlen>
   18a3c:	4601      	mov	r1, r0
   18a3e:	4620      	mov	r0, r4
   18a40:	f7ff ff14 	bl	1886c <mp_hal_stdout_tx_strn>
}
   18a44:	bd10      	pop	{r4, pc}
	...

00018a48 <mp_hal_stdout_tx_strn_cooked>:
   #endif
   mp_uos_dupterm_tx_strn(str, len);
}

// Efficiently convert "\n" to "\r\n"
void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {
   18a48:	b538      	push	{r3, r4, r5, lr}
   18a4a:	4604      	mov	r4, r0
   const char *last = str;
   while (len--) {
   18a4c:	e008      	b.n	18a60 <mp_hal_stdout_tx_strn_cooked+0x18>
       if (*str == '\n') {
           if (str > last) {
   18a4e:	4284      	cmp	r4, r0
   18a50:	d80d      	bhi.n	18a6e <mp_hal_stdout_tx_strn_cooked+0x26>
               mp_hal_stdout_tx_strn(last, str - last);
           }
           mp_hal_stdout_tx_strn("\r\n", 2);
   18a52:	2102      	movs	r1, #2
   18a54:	480b      	ldr	r0, [pc, #44]	; (18a84 <mp_hal_stdout_tx_strn_cooked+0x3c>)
   18a56:	f7ff ff09 	bl	1886c <mp_hal_stdout_tx_strn>
           ++str;
   18a5a:	3401      	adds	r4, #1
           last = str;
   18a5c:	4620      	mov	r0, r4
   18a5e:	4629      	mov	r1, r5
   while (len--) {
   18a60:	1e4d      	subs	r5, r1, #1
   18a62:	b141      	cbz	r1, 18a76 <mp_hal_stdout_tx_strn_cooked+0x2e>
       if (*str == '\n') {
   18a64:	7823      	ldrb	r3, [r4, #0]
   18a66:	2b0a      	cmp	r3, #10
   18a68:	d0f1      	beq.n	18a4e <mp_hal_stdout_tx_strn_cooked+0x6>
       } else {
           ++str;
   18a6a:	3401      	adds	r4, #1
   18a6c:	e7f7      	b.n	18a5e <mp_hal_stdout_tx_strn_cooked+0x16>
               mp_hal_stdout_tx_strn(last, str - last);
   18a6e:	1a21      	subs	r1, r4, r0
   18a70:	f7ff fefc 	bl	1886c <mp_hal_stdout_tx_strn>
   18a74:	e7ed      	b.n	18a52 <mp_hal_stdout_tx_strn_cooked+0xa>
       }
   }
   if (str > last) {
   18a76:	4284      	cmp	r4, r0
   18a78:	d800      	bhi.n	18a7c <mp_hal_stdout_tx_strn_cooked+0x34>
       mp_hal_stdout_tx_strn(last, str - last);
   }
}
   18a7a:	bd38      	pop	{r3, r4, r5, pc}
       mp_hal_stdout_tx_strn(last, str - last);
   18a7c:	1a21      	subs	r1, r4, r0
   18a7e:	f7ff fef5 	bl	1886c <mp_hal_stdout_tx_strn>
}
   18a82:	e7fa      	b.n	18a7a <mp_hal_stdout_tx_strn_cooked+0x32>
   18a84:	0002bda0 	.word	0x0002bda0

00018a88 <pin_mapper>:
}

/// \classmethod mapper([fun])
/// Get or set the pin mapper function.
STATIC mp_obj_t pin_mapper(size_t n_args, const mp_obj_t *args) {
    if (n_args > 1) {
   18a88:	2801      	cmp	r0, #1
   18a8a:	d905      	bls.n	18a98 <pin_mapper+0x10>
        MP_STATE_PORT(pin_class_mapper) = args[1];
   18a8c:	684a      	ldr	r2, [r1, #4]
   18a8e:	4b04      	ldr	r3, [pc, #16]	; (18aa0 <pin_mapper+0x18>)
   18a90:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        return mp_const_none;
   18a94:	4803      	ldr	r0, [pc, #12]	; (18aa4 <pin_mapper+0x1c>)
   18a96:	4770      	bx	lr
    }
    return MP_STATE_PORT(pin_class_mapper);
   18a98:	4b01      	ldr	r3, [pc, #4]	; (18aa0 <pin_mapper+0x18>)
   18a9a:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
}
   18a9e:	4770      	bx	lr
   18aa0:	200008a0 	.word	0x200008a0
   18aa4:	00027b40 	.word	0x00027b40

00018aa8 <pin_map_dict>:
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_mapper_obj, MP_ROM_PTR(&pin_mapper_fun_obj));

/// \classmethod dict([dict])
/// Get or set the pin mapper dictionary.
STATIC mp_obj_t pin_map_dict(size_t n_args, const mp_obj_t *args) {
    if (n_args > 1) {
   18aa8:	2801      	cmp	r0, #1
   18aaa:	d905      	bls.n	18ab8 <pin_map_dict+0x10>
        MP_STATE_PORT(pin_class_map_dict) = args[1];
   18aac:	684a      	ldr	r2, [r1, #4]
   18aae:	4b04      	ldr	r3, [pc, #16]	; (18ac0 <pin_map_dict+0x18>)
   18ab0:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        return mp_const_none;
   18ab4:	4803      	ldr	r0, [pc, #12]	; (18ac4 <pin_map_dict+0x1c>)
   18ab6:	4770      	bx	lr
    }
    return MP_STATE_PORT(pin_class_map_dict);
   18ab8:	4b01      	ldr	r3, [pc, #4]	; (18ac0 <pin_map_dict+0x18>)
   18aba:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
}
   18abe:	4770      	bx	lr
   18ac0:	200008a0 	.word	0x200008a0
   18ac4:	00027b40 	.word	0x00027b40

00018ac8 <pin_irq>:
//            args[ARG_hard].u_bool, args[ARG_handler].u_obj);
//    }
//
//    // TODO should return an IRQ object
    return mp_const_none;
}
   18ac8:	4800      	ldr	r0, [pc, #0]	; (18acc <pin_irq+0x4>)
   18aca:	4770      	bx	lr
   18acc:	00027b40 	.word	0x00027b40

00018ad0 <pin_name>:

/// \method name()
/// Get the pin name.
STATIC mp_obj_t pin_name(mp_obj_t self_in) {
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
    return MP_OBJ_NEW_QSTR(self->name);
   18ad0:	6840      	ldr	r0, [r0, #4]
   18ad2:	0080      	lsls	r0, r0, #2
}
   18ad4:	f040 0002 	orr.w	r0, r0, #2
   18ad8:	4770      	bx	lr

00018ada <pin_port>:

/// \method port()
/// Get the pin port.
STATIC mp_obj_t pin_port(mp_obj_t self_in) {
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
    return MP_OBJ_NEW_SMALL_INT(self->gpio);
   18ada:	6880      	ldr	r0, [r0, #8]
   18adc:	0040      	lsls	r0, r0, #1
}
   18ade:	f040 0001 	orr.w	r0, r0, #1
   18ae2:	4770      	bx	lr

00018ae4 <pin_pin>:

/// \method pin()
/// Get the pin number.
STATIC mp_obj_t pin_pin(mp_obj_t self_in) {
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
    return MP_OBJ_NEW_SMALL_INT(self->pin_num);
   18ae4:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   18ae8:	0040      	lsls	r0, r0, #1
}
   18aea:	f040 0001 	orr.w	r0, r0, #1
   18aee:	4770      	bx	lr

00018af0 <pin_gpio>:

/// \method gpio()
/// Returns the base address of the GPIO block associated with this pin.
STATIC mp_obj_t pin_gpio(mp_obj_t self_in) {
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
    return MP_OBJ_NEW_SMALL_INT((intptr_t)self->gpio);
   18af0:	6880      	ldr	r0, [r0, #8]
   18af2:	0040      	lsls	r0, r0, #1
}
   18af4:	f040 0001 	orr.w	r0, r0, #1
   18af8:	4770      	bx	lr

00018afa <pin_af>:
/// \method af()
/// Returns the currently configured alternate-function of the pin. The
/// integer returned will match one of the allowed constants for the af
/// argument to the init function.
STATIC mp_obj_t pin_af(mp_obj_t self_in) {
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_af((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   18afa:	6903      	ldr	r3, [r0, #16]
   18afc:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
   18b00:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   18b04:	0080      	lsls	r0, r0, #2
   18b06:	fa23 f000 	lsr.w	r0, r3, r0
   18b0a:	0040      	lsls	r0, r0, #1
   18b0c:	f000 001e 	and.w	r0, r0, #30
}
   18b10:	f040 0001 	orr.w	r0, r0, #1
   18b14:	4770      	bx	lr
	...

00018b18 <pin_debug>:
STATIC mp_obj_t pin_debug(size_t n_args, const mp_obj_t *args) {
   18b18:	b508      	push	{r3, lr}
    if (n_args > 1) {
   18b1a:	2801      	cmp	r0, #1
   18b1c:	d804      	bhi.n	18b28 <pin_debug+0x10>
    return mp_obj_new_bool(pin_class_debug);
   18b1e:	4b07      	ldr	r3, [pc, #28]	; (18b3c <pin_debug+0x24>)
   18b20:	781b      	ldrb	r3, [r3, #0]
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   18b22:	b943      	cbnz	r3, 18b36 <pin_debug+0x1e>
   18b24:	4806      	ldr	r0, [pc, #24]	; (18b40 <pin_debug+0x28>)
   18b26:	e005      	b.n	18b34 <pin_debug+0x1c>
        pin_class_debug = mp_obj_is_true(args[1]);
   18b28:	6848      	ldr	r0, [r1, #4]
   18b2a:	f7f2 fb27 	bl	b17c <mp_obj_is_true>
   18b2e:	4b03      	ldr	r3, [pc, #12]	; (18b3c <pin_debug+0x24>)
   18b30:	7018      	strb	r0, [r3, #0]
        return mp_const_none;
   18b32:	4804      	ldr	r0, [pc, #16]	; (18b44 <pin_debug+0x2c>)
}
   18b34:	bd08      	pop	{r3, pc}
   18b36:	4804      	ldr	r0, [pc, #16]	; (18b48 <pin_debug+0x30>)
   18b38:	e7fc      	b.n	18b34 <pin_debug+0x1c>
   18b3a:	bf00      	nop
   18b3c:	2000066c 	.word	0x2000066c
   18b40:	00025f44 	.word	0x00025f44
   18b44:	00027b40 	.word	0x00027b40
   18b48:	00025f4c 	.word	0x00025f4c

00018b4c <pin_obj_init_helper>:
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *self, size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   18b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b4e:	b089      	sub	sp, #36	; 0x24
   18b50:	4605      	mov	r5, r0
   18b52:	4608      	mov	r0, r1
   18b54:	4611      	mov	r1, r2
   18b56:	461a      	mov	r2, r3
    mp_arg_parse_all(n_args, pos_args, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   18b58:	ab02      	add	r3, sp, #8
   18b5a:	9301      	str	r3, [sp, #4]
   18b5c:	4b39      	ldr	r3, [pc, #228]	; (18c44 <pin_obj_init_helper+0xf8>)
   18b5e:	9300      	str	r3, [sp, #0]
   18b60:	2306      	movs	r3, #6
   18b62:	f7f1 fe0b 	bl	a77c <mp_arg_parse_all>
    if (args[ARG_pull].u_obj != mp_const_none) {
   18b66:	9803      	ldr	r0, [sp, #12]
   18b68:	4b37      	ldr	r3, [pc, #220]	; (18c48 <pin_obj_init_helper+0xfc>)
   18b6a:	4298      	cmp	r0, r3
   18b6c:	d018      	beq.n	18ba0 <pin_obj_init_helper+0x54>
        pull = mp_obj_get_int(args[ARG_pull].u_obj);
   18b6e:	f7f2 f92d 	bl	adcc <mp_obj_get_int>
   18b72:	4607      	mov	r7, r0
    if (!IS_GPIO_TYPE(pull)) {
   18b74:	2808      	cmp	r0, #8
   18b76:	d014      	beq.n	18ba2 <pin_obj_init_helper+0x56>
   18b78:	280a      	cmp	r0, #10
   18b7a:	d012      	beq.n	18ba2 <pin_obj_init_helper+0x56>
   18b7c:	280c      	cmp	r0, #12
   18b7e:	d010      	beq.n	18ba2 <pin_obj_init_helper+0x56>
   18b80:	2809      	cmp	r0, #9
   18b82:	d00e      	beq.n	18ba2 <pin_obj_init_helper+0x56>
   18b84:	f5b0 7f84 	cmp.w	r0, #264	; 0x108
   18b88:	d00b      	beq.n	18ba2 <pin_obj_init_helper+0x56>
   18b8a:	f5b0 7f02 	cmp.w	r0, #520	; 0x208
   18b8e:	d008      	beq.n	18ba2 <pin_obj_init_helper+0x56>
   18b90:	b138      	cbz	r0, 18ba2 <pin_obj_init_helper+0x56>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin pull: %d", pull));
   18b92:	4602      	mov	r2, r0
   18b94:	492d      	ldr	r1, [pc, #180]	; (18c4c <pin_obj_init_helper+0x100>)
   18b96:	482e      	ldr	r0, [pc, #184]	; (18c50 <pin_obj_init_helper+0x104>)
   18b98:	f7f3 ff98 	bl	cacc <mp_obj_new_exception_msg_varg>
   18b9c:	f7e7 fe70 	bl	880 <nlr_jump>
    uint pull = GPIO_PIN_TYPE_STD;
   18ba0:	2708      	movs	r7, #8
    uint32_t mode = args[ARG_mode].u_int;
   18ba2:	9c02      	ldr	r4, [sp, #8]
    if(mode == GPIO_PIN_TYPE_OD) {
   18ba4:	2c09      	cmp	r4, #9
   18ba6:	d035      	beq.n	18c14 <pin_obj_init_helper+0xc8>
    } else if (!IS_GPIO_DIR(mode)) {
   18ba8:	2c02      	cmp	r4, #2
   18baa:	d82c      	bhi.n	18c06 <pin_obj_init_helper+0xba>
    if (args[ARG_drive].u_obj != MP_OBJ_NULL) {
   18bac:	9804      	ldr	r0, [sp, #16]
   18bae:	b3a0      	cbz	r0, 18c1a <pin_obj_init_helper+0xce>
        drive = mp_obj_get_int(args[2].u_obj);
   18bb0:	f7f2 f90c 	bl	adcc <mp_obj_get_int>
   18bb4:	4603      	mov	r3, r0
    if (!IS_GPIO_STRENGTH(drive)) {
   18bb6:	1e5a      	subs	r2, r3, #1
   18bb8:	2a01      	cmp	r2, #1
   18bba:	d901      	bls.n	18bc0 <pin_obj_init_helper+0x74>
   18bbc:	2b66      	cmp	r3, #102	; 0x66
   18bbe:	d12e      	bne.n	18c1e <pin_obj_init_helper+0xd2>
    mp_int_t af = args[ARG_alt].u_int;
   18bc0:	9e07      	ldr	r6, [sp, #28]
    if (af == -1) {
   18bc2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   18bc6:	d031      	beq.n	18c2c <pin_obj_init_helper+0xe0>
    if ((mode == GPIO_DIR_MODE_HW) && !IS_GPIO_AF(af)) {
   18bc8:	2c02      	cmp	r4, #2
   18bca:	d102      	bne.n	18bd2 <pin_obj_init_helper+0x86>
   18bcc:	1eb2      	subs	r2, r6, #2
   18bce:	2a0a      	cmp	r2, #10
   18bd0:	d82e      	bhi.n	18c30 <pin_obj_init_helper+0xe4>
    mp_hal_pin_config(self, mode, pull, drive);
   18bd2:	463a      	mov	r2, r7
   18bd4:	4621      	mov	r1, r4
   18bd6:	4628      	mov	r0, r5
   18bd8:	f7ff fe98 	bl	1890c <mp_hal_pin_config>
    mp_hal_pin_set_af(self, af);
   18bdc:	b2f1      	uxtb	r1, r6
   18bde:	4628      	mov	r0, r5
   18be0:	f7ff febe 	bl	18960 <mp_hal_pin_set_af>
    if (args[4].u_obj != MP_OBJ_NULL) {
   18be4:	9806      	ldr	r0, [sp, #24]
   18be6:	b158      	cbz	r0, 18c00 <pin_obj_init_helper+0xb4>
        mp_hal_pin_write(self, mp_obj_is_true(args[ARG_value].u_obj));
   18be8:	68ac      	ldr	r4, [r5, #8]
   18bea:	f895 6024 	ldrb.w	r6, [r5, #36]	; 0x24
   18bee:	f7f2 fac5 	bl	b17c <mp_obj_is_true>
   18bf2:	b320      	cbz	r0, 18c3e <pin_obj_init_helper+0xf2>
   18bf4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   18bf8:	4631      	mov	r1, r6
   18bfa:	4620      	mov	r0, r4
   18bfc:	f007 fea0 	bl	20940 <GPIOPinWrite>
}
   18c00:	4811      	ldr	r0, [pc, #68]	; (18c48 <pin_obj_init_helper+0xfc>)
   18c02:	b009      	add	sp, #36	; 0x24
   18c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin direction: %d", mode));
   18c06:	4622      	mov	r2, r4
   18c08:	4912      	ldr	r1, [pc, #72]	; (18c54 <pin_obj_init_helper+0x108>)
   18c0a:	4811      	ldr	r0, [pc, #68]	; (18c50 <pin_obj_init_helper+0x104>)
   18c0c:	f7f3 ff5e 	bl	cacc <mp_obj_new_exception_msg_varg>
   18c10:	f7e7 fe36 	bl	880 <nlr_jump>
        mode = GPIO_DIR_MODE_OUT;
   18c14:	2401      	movs	r4, #1
        pull = GPIO_PIN_TYPE_OD;
   18c16:	2709      	movs	r7, #9
   18c18:	e7c8      	b.n	18bac <pin_obj_init_helper+0x60>
    uint drive = GPIO_STRENGTH_2MA;
   18c1a:	2301      	movs	r3, #1
   18c1c:	e7cb      	b.n	18bb6 <pin_obj_init_helper+0x6a>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin drive: %d", drive));
   18c1e:	461a      	mov	r2, r3
   18c20:	490d      	ldr	r1, [pc, #52]	; (18c58 <pin_obj_init_helper+0x10c>)
   18c22:	480b      	ldr	r0, [pc, #44]	; (18c50 <pin_obj_init_helper+0x104>)
   18c24:	f7f3 ff52 	bl	cacc <mp_obj_new_exception_msg_varg>
   18c28:	f7e7 fe2a 	bl	880 <nlr_jump>
        af = args[ARG_af].u_int;
   18c2c:	9e05      	ldr	r6, [sp, #20]
   18c2e:	e7cb      	b.n	18bc8 <pin_obj_init_helper+0x7c>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin af: %d", af));
   18c30:	4632      	mov	r2, r6
   18c32:	490a      	ldr	r1, [pc, #40]	; (18c5c <pin_obj_init_helper+0x110>)
   18c34:	4806      	ldr	r0, [pc, #24]	; (18c50 <pin_obj_init_helper+0x104>)
   18c36:	f7f3 ff49 	bl	cacc <mp_obj_new_exception_msg_varg>
   18c3a:	f7e7 fe21 	bl	880 <nlr_jump>
        mp_hal_pin_write(self, mp_obj_is_true(args[ARG_value].u_obj));
   18c3e:	2200      	movs	r2, #0
   18c40:	e7da      	b.n	18bf8 <pin_obj_init_helper+0xac>
   18c42:	bf00      	nop
   18c44:	0002ab24 	.word	0x0002ab24
   18c48:	00027b40 	.word	0x00027b40
   18c4c:	0002adb4 	.word	0x0002adb4
   18c50:	00026cc0 	.word	0x00026cc0
   18c54:	0002adcc 	.word	0x0002adcc
   18c58:	0002ade8 	.word	0x0002ade8
   18c5c:	0002ae00 	.word	0x0002ae00

00018c60 <pin_obj_init>:
STATIC mp_obj_t pin_obj_init(size_t n_args, const mp_obj_t *args, mp_map_t *kw_args) {
   18c60:	b510      	push	{r4, lr}
   18c62:	460c      	mov	r4, r1
    return pin_obj_init_helper(MP_OBJ_TO_PTR(args[0]), n_args - 1, args + 1, kw_args);
   18c64:	4613      	mov	r3, r2
   18c66:	1d0a      	adds	r2, r1, #4
   18c68:	1e41      	subs	r1, r0, #1
   18c6a:	6820      	ldr	r0, [r4, #0]
   18c6c:	f7ff ff6e 	bl	18b4c <pin_obj_init_helper>
}
   18c70:	bd10      	pop	{r4, pc}
	...

00018c74 <pin_on>:
STATIC mp_obj_t pin_on(mp_obj_t self_in) {
   18c74:	b508      	push	{r3, lr}
    mp_hal_pin_high(self);
   18c76:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
   18c7a:	460a      	mov	r2, r1
   18c7c:	6880      	ldr	r0, [r0, #8]
   18c7e:	f007 fe5f 	bl	20940 <GPIOPinWrite>
}
   18c82:	4801      	ldr	r0, [pc, #4]	; (18c88 <pin_on+0x14>)
   18c84:	bd08      	pop	{r3, pc}
   18c86:	bf00      	nop
   18c88:	00027b40 	.word	0x00027b40

00018c8c <pin_off>:
STATIC mp_obj_t pin_off(mp_obj_t self_in) {
   18c8c:	b508      	push	{r3, lr}
    mp_hal_pin_low(self);
   18c8e:	2200      	movs	r2, #0
   18c90:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
   18c94:	6880      	ldr	r0, [r0, #8]
   18c96:	f007 fe53 	bl	20940 <GPIOPinWrite>
}
   18c9a:	4801      	ldr	r0, [pc, #4]	; (18ca0 <pin_off+0x14>)
   18c9c:	bd08      	pop	{r3, pc}
   18c9e:	bf00      	nop
   18ca0:	00027b40 	.word	0x00027b40

00018ca4 <pin_pull>:
STATIC mp_obj_t pin_pull(mp_obj_t self_in) {
   18ca4:	b500      	push	{lr}
   18ca6:	b083      	sub	sp, #12
    MAP_GPIOPadConfigGet(self->gpio, self->pin_mask, NULL, &type);
   18ca8:	ab01      	add	r3, sp, #4
   18caa:	2200      	movs	r2, #0
   18cac:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
   18cb0:	6880      	ldr	r0, [r0, #8]
   18cb2:	f007 fdda 	bl	2086a <GPIOPadConfigGet>
    return MP_OBJ_NEW_SMALL_INT(type);
   18cb6:	9801      	ldr	r0, [sp, #4]
   18cb8:	0040      	lsls	r0, r0, #1
}
   18cba:	f040 0001 	orr.w	r0, r0, #1
   18cbe:	b003      	add	sp, #12
   18cc0:	f85d fb04 	ldr.w	pc, [sp], #4

00018cc4 <pin_mode>:
STATIC mp_obj_t pin_mode(mp_obj_t self_in) {
   18cc4:	b508      	push	{r3, lr}
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_dir((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   18cc6:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
   18cca:	6880      	ldr	r0, [r0, #8]
   18ccc:	f007 fd37 	bl	2073e <GPIODirModeGet>
   18cd0:	0040      	lsls	r0, r0, #1
}
   18cd2:	f040 0001 	orr.w	r0, r0, #1
   18cd6:	bd08      	pop	{r3, pc}

00018cd8 <pin_af_list>:
STATIC mp_obj_t pin_af_list(mp_obj_t self_in) {
   18cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cda:	4606      	mov	r6, r0
    mp_obj_t result = mp_obj_new_list(0, NULL);
   18cdc:	2100      	movs	r1, #0
   18cde:	4608      	mov	r0, r1
   18ce0:	f7f5 feca 	bl	ea78 <mp_obj_new_list>
   18ce4:	4607      	mov	r7, r0
    const pin_af_obj_t *af = self->af_list;
   18ce6:	6975      	ldr	r5, [r6, #20]
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   18ce8:	2400      	movs	r4, #0
   18cea:	e005      	b.n	18cf8 <pin_af_list+0x20>
        mp_obj_list_append(result, MP_OBJ_FROM_PTR(af));
   18cec:	4629      	mov	r1, r5
   18cee:	4638      	mov	r0, r7
   18cf0:	f7f5 fb86 	bl	e400 <mp_obj_list_append>
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   18cf4:	3401      	adds	r4, #1
   18cf6:	3510      	adds	r5, #16
   18cf8:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
   18cfc:	42a3      	cmp	r3, r4
   18cfe:	d8f5      	bhi.n	18cec <pin_af_list+0x14>
}
   18d00:	4638      	mov	r0, r7
   18d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018d04 <pin_names>:
STATIC mp_obj_t pin_names(mp_obj_t self_in) {
   18d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d06:	4606      	mov	r6, r0
    mp_obj_t result = mp_obj_new_list(0, NULL);
   18d08:	2100      	movs	r1, #0
   18d0a:	4608      	mov	r0, r1
   18d0c:	f7f5 feb4 	bl	ea78 <mp_obj_new_list>
   18d10:	4607      	mov	r7, r0
    mp_obj_list_append(result, MP_OBJ_NEW_QSTR(self->name));
   18d12:	6871      	ldr	r1, [r6, #4]
   18d14:	0089      	lsls	r1, r1, #2
   18d16:	f041 0102 	orr.w	r1, r1, #2
   18d1a:	f7f5 fb71 	bl	e400 <mp_obj_list_append>
    mp_map_elem_t *elem = map->table;
   18d1e:	4b0b      	ldr	r3, [pc, #44]	; (18d4c <pin_names+0x48>)
   18d20:	68dd      	ldr	r5, [r3, #12]
    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   18d22:	2400      	movs	r4, #0
   18d24:	e001      	b.n	18d2a <pin_names+0x26>
   18d26:	3401      	adds	r4, #1
   18d28:	3508      	adds	r5, #8
   18d2a:	4b08      	ldr	r3, [pc, #32]	; (18d4c <pin_names+0x48>)
   18d2c:	685b      	ldr	r3, [r3, #4]
   18d2e:	f3c3 03dc 	ubfx	r3, r3, #3, #29
   18d32:	42a3      	cmp	r3, r4
   18d34:	d907      	bls.n	18d46 <pin_names+0x42>
        if (elem->value == self_in) {
   18d36:	686b      	ldr	r3, [r5, #4]
   18d38:	42b3      	cmp	r3, r6
   18d3a:	d1f4      	bne.n	18d26 <pin_names+0x22>
            mp_obj_list_append(result, elem->key);
   18d3c:	6829      	ldr	r1, [r5, #0]
   18d3e:	4638      	mov	r0, r7
   18d40:	f7f5 fb5e 	bl	e400 <mp_obj_list_append>
   18d44:	e7ef      	b.n	18d26 <pin_names+0x22>
}
   18d46:	4638      	mov	r0, r7
   18d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d4a:	bf00      	nop
   18d4c:	0002d9a4 	.word	0x0002d9a4

00018d50 <pin_call>:
STATIC mp_obj_t pin_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   18d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d52:	b083      	sub	sp, #12
   18d54:	4604      	mov	r4, r0
   18d56:	460d      	mov	r5, r1
   18d58:	4611      	mov	r1, r2
   18d5a:	461e      	mov	r6, r3
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   18d5c:	2200      	movs	r2, #0
   18d5e:	9200      	str	r2, [sp, #0]
   18d60:	2301      	movs	r3, #1
   18d62:	4628      	mov	r0, r5
   18d64:	f7f1 fcd8 	bl	a718 <mp_arg_check_num>
    if (n_args == 0) {
   18d68:	b17d      	cbz	r5, 18d8a <pin_call+0x3a>
        mp_hal_pin_write(self, mp_obj_is_true(args[0]));
   18d6a:	68a5      	ldr	r5, [r4, #8]
   18d6c:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
   18d70:	6830      	ldr	r0, [r6, #0]
   18d72:	f7f2 fa03 	bl	b17c <mp_obj_is_true>
   18d76:	b188      	cbz	r0, 18d9c <pin_call+0x4c>
   18d78:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   18d7c:	4639      	mov	r1, r7
   18d7e:	4628      	mov	r0, r5
   18d80:	f007 fdde 	bl	20940 <GPIOPinWrite>
        return mp_const_none;
   18d84:	4806      	ldr	r0, [pc, #24]	; (18da0 <pin_call+0x50>)
}
   18d86:	b003      	add	sp, #12
   18d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_read(self));
   18d8a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   18d8e:	68a0      	ldr	r0, [r4, #8]
   18d90:	f007 fdd3 	bl	2093a <GPIOPinRead>
   18d94:	0040      	lsls	r0, r0, #1
   18d96:	f040 0001 	orr.w	r0, r0, #1
   18d9a:	e7f4      	b.n	18d86 <pin_call+0x36>
        mp_hal_pin_write(self, mp_obj_is_true(args[0]));
   18d9c:	2200      	movs	r2, #0
   18d9e:	e7ed      	b.n	18d7c <pin_call+0x2c>
   18da0:	00027b40 	.word	0x00027b40

00018da4 <pin_value>:
STATIC mp_obj_t pin_value(size_t n_args, const mp_obj_t *args) {
   18da4:	b510      	push	{r4, lr}
   18da6:	460c      	mov	r4, r1
    return pin_call(args[0], n_args - 1, 0, args + 1);
   18da8:	1d0b      	adds	r3, r1, #4
   18daa:	2200      	movs	r2, #0
   18dac:	1e41      	subs	r1, r0, #1
   18dae:	6820      	ldr	r0, [r4, #0]
   18db0:	f7ff ffce 	bl	18d50 <pin_call>
}
   18db4:	bd10      	pop	{r4, pc}
	...

00018db8 <pin_print>:
STATIC void pin_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   18db8:	b570      	push	{r4, r5, r6, lr}
   18dba:	b082      	sub	sp, #8
   18dbc:	4606      	mov	r6, r0
   18dbe:	460c      	mov	r4, r1
    mp_printf(print, "Pin(Pin.cpu.%q, mode=Pin.", self->name);
   18dc0:	684a      	ldr	r2, [r1, #4]
   18dc2:	4937      	ldr	r1, [pc, #220]	; (18ea0 <pin_print+0xe8>)
   18dc4:	f7e9 f952 	bl	206c <mp_printf>
    uint32_t dir = MAP_GPIODirModeGet(self->gpio, self->pin_mask);
   18dc8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   18dcc:	68a0      	ldr	r0, [r4, #8]
   18dce:	f007 fcb6 	bl	2073e <GPIODirModeGet>
   18dd2:	4605      	mov	r5, r0
    MAP_GPIOPadConfigGet(self->gpio, self->pin_mask, &strength, &type);
   18dd4:	ab01      	add	r3, sp, #4
   18dd6:	466a      	mov	r2, sp
   18dd8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   18ddc:	68a0      	ldr	r0, [r4, #8]
   18dde:	f007 fd44 	bl	2086a <GPIOPadConfigGet>
    if (dir == GPIO_DIR_MODE_HW && type == GPIO_PIN_TYPE_ANALOG) {
   18de2:	2d02      	cmp	r5, #2
   18de4:	d007      	beq.n	18df6 <pin_print+0x3e>
        if (dir == GPIO_DIR_MODE_IN) {
   18de6:	b315      	cbz	r5, 18e2e <pin_print+0x76>
        } else if (dir == GPIO_DIR_MODE_OUT) {
   18de8:	2d01      	cmp	r5, #1
   18dea:	d00c      	beq.n	18e06 <pin_print+0x4e>
            if (dir == GPIO_DIR_MODE_HW) {
   18dec:	2d02      	cmp	r5, #2
   18dee:	d015      	beq.n	18e1c <pin_print+0x64>
        qstr mode_qst = MP_QSTR_NULL;
   18df0:	2000      	movs	r0, #0
            af = true;
   18df2:	2501      	movs	r5, #1
   18df4:	e01e      	b.n	18e34 <pin_print+0x7c>
    if (dir == GPIO_DIR_MODE_HW && type == GPIO_PIN_TYPE_ANALOG) {
   18df6:	9b01      	ldr	r3, [sp, #4]
   18df8:	2b00      	cmp	r3, #0
   18dfa:	d1f4      	bne.n	18de6 <pin_print+0x2e>
        mp_print_str(print, "ANALOG)");
   18dfc:	4929      	ldr	r1, [pc, #164]	; (18ea4 <pin_print+0xec>)
   18dfe:	4630      	mov	r0, r6
   18e00:	f7e8 fd9d 	bl	193e <mp_print_str>
   18e04:	e04a      	b.n	18e9c <pin_print+0xe4>
            if (type == GPIO_PIN_TYPE_OD){
   18e06:	9b01      	ldr	r3, [sp, #4]
   18e08:	2b09      	cmp	r3, #9
   18e0a:	d003      	beq.n	18e14 <pin_print+0x5c>
                mode_qst = MP_QSTR_OUT;
   18e0c:	f44f 7093 	mov.w	r0, #294	; 0x126
        bool af = false;
   18e10:	2500      	movs	r5, #0
   18e12:	e00f      	b.n	18e34 <pin_print+0x7c>
                mode_qst = MP_QSTR_OPEN_DRAIN;
   18e14:	f44f 7092 	mov.w	r0, #292	; 0x124
        bool af = false;
   18e18:	2500      	movs	r5, #0
   18e1a:	e00b      	b.n	18e34 <pin_print+0x7c>
                if (type == GPIO_PIN_TYPE_OD){
   18e1c:	9b01      	ldr	r3, [sp, #4]
   18e1e:	2b09      	cmp	r3, #9
   18e20:	d002      	beq.n	18e28 <pin_print+0x70>
                    mode_qst = MP_QSTR_ALT;
   18e22:	20e0      	movs	r0, #224	; 0xe0
            af = true;
   18e24:	2501      	movs	r5, #1
   18e26:	e005      	b.n	18e34 <pin_print+0x7c>
                   mode_qst = MP_QSTR_ALT_OPEN_DRAIN;
   18e28:	20e1      	movs	r0, #225	; 0xe1
            af = true;
   18e2a:	2501      	movs	r5, #1
   18e2c:	e002      	b.n	18e34 <pin_print+0x7c>
            mode_qst = MP_QSTR_IN;
   18e2e:	f240 1007 	movw	r0, #263	; 0x107
        bool af = false;
   18e32:	2500      	movs	r5, #0
        mp_print_str(print, qstr_str(mode_qst));
   18e34:	f7e8 fc2d 	bl	1692 <qstr_str>
   18e38:	4601      	mov	r1, r0
   18e3a:	4630      	mov	r0, r6
   18e3c:	f7e8 fd7f 	bl	193e <mp_print_str>
        if (type == GPIO_PIN_TYPE_STD_WPU) {
   18e40:	9b01      	ldr	r3, [sp, #4]
   18e42:	2b0a      	cmp	r3, #10
   18e44:	d01d      	beq.n	18e82 <pin_print+0xca>
        } else if (type == GPIO_PIN_TYPE_STD_WPD) {
   18e46:	2b0c      	cmp	r3, #12
   18e48:	d014      	beq.n	18e74 <pin_print+0xbc>
        if (af) {
   18e4a:	b31d      	cbz	r5, 18e94 <pin_print+0xdc>
            mp_uint_t af_idx = mp_hal_pin_get_af(self);
   18e4c:	6923      	ldr	r3, [r4, #16]
   18e4e:	f8d3 552c 	ldr.w	r5, [r3, #1324]	; 0x52c
   18e52:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   18e56:	009b      	lsls	r3, r3, #2
   18e58:	40dd      	lsrs	r5, r3
   18e5a:	f005 050f 	and.w	r5, r5, #15
            const pin_af_obj_t *af_obj = pin_find_af_by_index(self, af_idx);
   18e5e:	4629      	mov	r1, r5
   18e60:	4620      	mov	r0, r4
   18e62:	f000 f946 	bl	190f2 <pin_find_af_by_index>
            if (af_obj == NULL) {
   18e66:	b178      	cbz	r0, 18e88 <pin_print+0xd0>
                mp_printf(print, ", af=Pin.%q)", af_obj->name);
   18e68:	6802      	ldr	r2, [r0, #0]
   18e6a:	490f      	ldr	r1, [pc, #60]	; (18ea8 <pin_print+0xf0>)
   18e6c:	4630      	mov	r0, r6
   18e6e:	f7e9 f8fd 	bl	206c <mp_printf>
   18e72:	e013      	b.n	18e9c <pin_print+0xe4>
            pull_qst = MP_QSTR_PULL_DOWN;
   18e74:	f240 1229 	movw	r2, #297	; 0x129
            mp_printf(print, ", pull=Pin.%q", pull_qst);
   18e78:	490c      	ldr	r1, [pc, #48]	; (18eac <pin_print+0xf4>)
   18e7a:	4630      	mov	r0, r6
   18e7c:	f7e9 f8f6 	bl	206c <mp_printf>
   18e80:	e7e3      	b.n	18e4a <pin_print+0x92>
            pull_qst = MP_QSTR_PULL_UP;
   18e82:	f240 122b 	movw	r2, #299	; 0x12b
   18e86:	e7f7      	b.n	18e78 <pin_print+0xc0>
                mp_printf(print, ", af=%d)", af_idx);
   18e88:	462a      	mov	r2, r5
   18e8a:	4909      	ldr	r1, [pc, #36]	; (18eb0 <pin_print+0xf8>)
   18e8c:	4630      	mov	r0, r6
   18e8e:	f7e9 f8ed 	bl	206c <mp_printf>
   18e92:	e003      	b.n	18e9c <pin_print+0xe4>
            mp_print_str(print, ")");
   18e94:	4907      	ldr	r1, [pc, #28]	; (18eb4 <pin_print+0xfc>)
   18e96:	4630      	mov	r0, r6
   18e98:	f7e8 fd51 	bl	193e <mp_print_str>
}
   18e9c:	b002      	add	sp, #8
   18e9e:	bd70      	pop	{r4, r5, r6, pc}
   18ea0:	0002ae34 	.word	0x0002ae34
   18ea4:	0002ae50 	.word	0x0002ae50
   18ea8:	0002ae74 	.word	0x0002ae74
   18eac:	0002ae58 	.word	0x0002ae58
   18eb0:	0002ae68 	.word	0x0002ae68
   18eb4:	000272a0 	.word	0x000272a0

00018eb8 <pin_init0>:
    MP_STATE_PORT(pin_class_mapper) = mp_const_none;
   18eb8:	4b04      	ldr	r3, [pc, #16]	; (18ecc <pin_init0+0x14>)
   18eba:	4a05      	ldr	r2, [pc, #20]	; (18ed0 <pin_init0+0x18>)
   18ebc:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    MP_STATE_PORT(pin_class_map_dict) = mp_const_none;
   18ec0:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    pin_class_debug = false;
   18ec4:	4b03      	ldr	r3, [pc, #12]	; (18ed4 <pin_init0+0x1c>)
   18ec6:	2200      	movs	r2, #0
   18ec8:	701a      	strb	r2, [r3, #0]
}
   18eca:	4770      	bx	lr
   18ecc:	200008a0 	.word	0x200008a0
   18ed0:	00027b40 	.word	0x00027b40
   18ed4:	2000066c 	.word	0x2000066c

00018ed8 <pin_find>:
const pin_obj_t *pin_find(mp_obj_t user_obj) {
   18ed8:	b538      	push	{r3, r4, r5, lr}
   18eda:	4604      	mov	r4, r0
    if (MP_OBJ_IS_TYPE(user_obj, &pin_type)) {
   18edc:	f010 0f03 	tst.w	r0, #3
   18ee0:	d103      	bne.n	18eea <pin_find+0x12>
   18ee2:	6802      	ldr	r2, [r0, #0]
   18ee4:	4b45      	ldr	r3, [pc, #276]	; (18ffc <pin_find+0x124>)
   18ee6:	429a      	cmp	r2, r3
   18ee8:	d029      	beq.n	18f3e <pin_find+0x66>
    if (MP_STATE_PORT(pin_class_mapper) != mp_const_none) {
   18eea:	4b45      	ldr	r3, [pc, #276]	; (19000 <pin_find+0x128>)
   18eec:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
   18ef0:	4b44      	ldr	r3, [pc, #272]	; (19004 <pin_find+0x12c>)
   18ef2:	4298      	cmp	r0, r3
   18ef4:	d037      	beq.n	18f66 <pin_find+0x8e>
        mp_obj_t o = mp_call_function_1(MP_STATE_PORT(pin_class_mapper), user_obj);
   18ef6:	4621      	mov	r1, r4
   18ef8:	f7f0 fbeb 	bl	96d2 <mp_call_function_1>
   18efc:	4605      	mov	r5, r0
        if (o != mp_const_none) {
   18efe:	4b41      	ldr	r3, [pc, #260]	; (19004 <pin_find+0x12c>)
   18f00:	4298      	cmp	r0, r3
   18f02:	d030      	beq.n	18f66 <pin_find+0x8e>
            if (!MP_OBJ_IS_TYPE(o, &pin_type)) {
   18f04:	f010 0f03 	tst.w	r0, #3
   18f08:	d12a      	bne.n	18f60 <pin_find+0x88>
   18f0a:	6802      	ldr	r2, [r0, #0]
   18f0c:	4b3b      	ldr	r3, [pc, #236]	; (18ffc <pin_find+0x124>)
   18f0e:	429a      	cmp	r2, r3
   18f10:	d126      	bne.n	18f60 <pin_find+0x88>
            if (pin_class_debug) {
   18f12:	4b3d      	ldr	r3, [pc, #244]	; (19008 <pin_find+0x130>)
   18f14:	781b      	ldrb	r3, [r3, #0]
   18f16:	2b00      	cmp	r3, #0
   18f18:	d052      	beq.n	18fc0 <pin_find+0xe8>
                printf("Pin.mapper maps ");
   18f1a:	483c      	ldr	r0, [pc, #240]	; (1900c <pin_find+0x134>)
   18f1c:	f7ff f9cc 	bl	182b8 <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   18f20:	2101      	movs	r1, #1
   18f22:	4620      	mov	r0, r4
   18f24:	f7f1 fe6a 	bl	abfc <mp_obj_print>
                printf(" to ");
   18f28:	4839      	ldr	r0, [pc, #228]	; (19010 <pin_find+0x138>)
   18f2a:	f7ff f9c5 	bl	182b8 <printf>
                mp_obj_print(o, PRINT_STR);
   18f2e:	2100      	movs	r1, #0
   18f30:	4628      	mov	r0, r5
   18f32:	f7f1 fe63 	bl	abfc <mp_obj_print>
                printf("\n");
   18f36:	200a      	movs	r0, #10
   18f38:	f7ff f9d0 	bl	182dc <putchar>
   18f3c:	e040      	b.n	18fc0 <pin_find+0xe8>
        if (pin_class_debug) {
   18f3e:	4b32      	ldr	r3, [pc, #200]	; (19008 <pin_find+0x130>)
   18f40:	781b      	ldrb	r3, [r3, #0]
   18f42:	b90b      	cbnz	r3, 18f48 <pin_find+0x70>
        return pin_obj;
   18f44:	4605      	mov	r5, r0
   18f46:	e03b      	b.n	18fc0 <pin_find+0xe8>
            printf("Pin map passed pin ");
   18f48:	4832      	ldr	r0, [pc, #200]	; (19014 <pin_find+0x13c>)
   18f4a:	f7ff f9b5 	bl	182b8 <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   18f4e:	2100      	movs	r1, #0
   18f50:	4620      	mov	r0, r4
   18f52:	f7f1 fe53 	bl	abfc <mp_obj_print>
            printf("\n");
   18f56:	200a      	movs	r0, #10
   18f58:	f7ff f9c0 	bl	182dc <putchar>
        return pin_obj;
   18f5c:	4625      	mov	r5, r4
   18f5e:	e02f      	b.n	18fc0 <pin_find+0xe8>
                mp_raise_ValueError("Pin.mapper didn't return a Pin object");
   18f60:	482d      	ldr	r0, [pc, #180]	; (19018 <pin_find+0x140>)
   18f62:	f7f1 f9a1 	bl	a2a8 <mp_raise_ValueError>
    if (MP_STATE_PORT(pin_class_map_dict) != mp_const_none) {
   18f66:	4b26      	ldr	r3, [pc, #152]	; (19000 <pin_find+0x128>)
   18f68:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
   18f6c:	4b25      	ldr	r3, [pc, #148]	; (19004 <pin_find+0x12c>)
   18f6e:	4298      	cmp	r0, r3
   18f70:	d01d      	beq.n	18fae <pin_find+0xd6>
        mp_map_t *pin_map_map = mp_obj_dict_get_map(MP_STATE_PORT(pin_class_map_dict));
   18f72:	f7f3 fc9b 	bl	c8ac <mp_obj_dict_get_map>
        mp_map_elem_t *elem = mp_map_lookup(pin_map_map, user_obj, MP_MAP_LOOKUP);
   18f76:	2200      	movs	r2, #0
   18f78:	4621      	mov	r1, r4
   18f7a:	f7f1 fcdd 	bl	a938 <mp_map_lookup>
        if (elem != NULL && elem->value != MP_OBJ_NULL) {
   18f7e:	b1b0      	cbz	r0, 18fae <pin_find+0xd6>
   18f80:	6845      	ldr	r5, [r0, #4]
   18f82:	b1a5      	cbz	r5, 18fae <pin_find+0xd6>
            if (pin_class_debug) {
   18f84:	4b20      	ldr	r3, [pc, #128]	; (19008 <pin_find+0x130>)
   18f86:	781b      	ldrb	r3, [r3, #0]
   18f88:	b1d3      	cbz	r3, 18fc0 <pin_find+0xe8>
                printf("Pin.map_dict maps ");
   18f8a:	4824      	ldr	r0, [pc, #144]	; (1901c <pin_find+0x144>)
   18f8c:	f7ff f994 	bl	182b8 <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   18f90:	2101      	movs	r1, #1
   18f92:	4620      	mov	r0, r4
   18f94:	f7f1 fe32 	bl	abfc <mp_obj_print>
                printf(" to ");
   18f98:	481d      	ldr	r0, [pc, #116]	; (19010 <pin_find+0x138>)
   18f9a:	f7ff f98d 	bl	182b8 <printf>
                mp_obj_print(o, PRINT_STR);
   18f9e:	2100      	movs	r1, #0
   18fa0:	4628      	mov	r0, r5
   18fa2:	f7f1 fe2b 	bl	abfc <mp_obj_print>
                printf("\n");
   18fa6:	200a      	movs	r0, #10
   18fa8:	f7ff f998 	bl	182dc <putchar>
   18fac:	e008      	b.n	18fc0 <pin_find+0xe8>
    pin_obj = pin_find_named_pin(&pin_board_pins_locals_dict, user_obj);
   18fae:	4621      	mov	r1, r4
   18fb0:	481b      	ldr	r0, [pc, #108]	; (19020 <pin_find+0x148>)
   18fb2:	f000 f87f 	bl	190b4 <pin_find_named_pin>
    if (pin_obj) {
   18fb6:	4605      	mov	r5, r0
   18fb8:	b1b0      	cbz	r0, 18fe8 <pin_find+0x110>
        if (pin_class_debug) {
   18fba:	4b13      	ldr	r3, [pc, #76]	; (19008 <pin_find+0x130>)
   18fbc:	781b      	ldrb	r3, [r3, #0]
   18fbe:	b90b      	cbnz	r3, 18fc4 <pin_find+0xec>
}
   18fc0:	4628      	mov	r0, r5
   18fc2:	bd38      	pop	{r3, r4, r5, pc}
            printf("Pin.board maps ");
   18fc4:	4817      	ldr	r0, [pc, #92]	; (19024 <pin_find+0x14c>)
   18fc6:	f7ff f977 	bl	182b8 <printf>
            mp_obj_print(user_obj, PRINT_REPR);
   18fca:	2101      	movs	r1, #1
   18fcc:	4620      	mov	r0, r4
   18fce:	f7f1 fe15 	bl	abfc <mp_obj_print>
            printf(" to ");
   18fd2:	480f      	ldr	r0, [pc, #60]	; (19010 <pin_find+0x138>)
   18fd4:	f7ff f970 	bl	182b8 <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   18fd8:	2100      	movs	r1, #0
   18fda:	4628      	mov	r0, r5
   18fdc:	f7f1 fe0e 	bl	abfc <mp_obj_print>
            printf("\n");
   18fe0:	200a      	movs	r0, #10
   18fe2:	f7ff f97b 	bl	182dc <putchar>
   18fe6:	e7eb      	b.n	18fc0 <pin_find+0xe8>
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "Pin(%s) doesn't exist", mp_obj_str_get_str(user_obj)));
   18fe8:	4620      	mov	r0, r4
   18fea:	f7f7 f92f 	bl	1024c <mp_obj_str_get_str>
   18fee:	4602      	mov	r2, r0
   18ff0:	490d      	ldr	r1, [pc, #52]	; (19028 <pin_find+0x150>)
   18ff2:	480e      	ldr	r0, [pc, #56]	; (1902c <pin_find+0x154>)
   18ff4:	f7f3 fd6a 	bl	cacc <mp_obj_new_exception_msg_varg>
   18ff8:	f7e7 fc42 	bl	880 <nlr_jump>
   18ffc:	0002ae8c 	.word	0x0002ae8c
   19000:	200008a0 	.word	0x200008a0
   19004:	00027b40 	.word	0x00027b40
   19008:	2000066c 	.word	0x2000066c
   1900c:	0002abb4 	.word	0x0002abb4
   19010:	0002abc8 	.word	0x0002abc8
   19014:	0002ab78 	.word	0x0002ab78
   19018:	0002ab8c 	.word	0x0002ab8c
   1901c:	0002abd0 	.word	0x0002abd0
   19020:	0002d9a4 	.word	0x0002d9a4
   19024:	0002abe4 	.word	0x0002abe4
   19028:	0002abf4 	.word	0x0002abf4
   1902c:	00026cc0 	.word	0x00026cc0

00019030 <pin_make_new>:
mp_obj_t pin_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   19030:	b5f0      	push	{r4, r5, r6, r7, lr}
   19032:	b087      	sub	sp, #28
   19034:	460c      	mov	r4, r1
   19036:	4616      	mov	r6, r2
   19038:	461d      	mov	r5, r3
    mp_arg_check_num(n_args, n_kw, 1, MP_OBJ_FUN_ARGS_MAX, true);
   1903a:	2201      	movs	r2, #1
   1903c:	9200      	str	r2, [sp, #0]
   1903e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19042:	4631      	mov	r1, r6
   19044:	4620      	mov	r0, r4
   19046:	f7f1 fb67 	bl	a718 <mp_arg_check_num>
    const pin_obj_t *pin = pin_find(args[0]);
   1904a:	6828      	ldr	r0, [r5, #0]
   1904c:	f7ff ff44 	bl	18ed8 <pin_find>
   19050:	4607      	mov	r7, r0
    if (n_args > 1 || n_kw > 0) {
   19052:	2c01      	cmp	r4, #1
   19054:	d800      	bhi.n	19058 <pin_make_new+0x28>
   19056:	b15e      	cbz	r6, 19070 <pin_make_new+0x40>
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
   19058:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1905c:	4631      	mov	r1, r6
   1905e:	a803      	add	r0, sp, #12
   19060:	f7f1 fc47 	bl	a8f2 <mp_map_init_fixed_table>
        pin_obj_init_helper(pin, n_args - 1, args + 1, &kw_args);
   19064:	ab03      	add	r3, sp, #12
   19066:	1d2a      	adds	r2, r5, #4
   19068:	1e61      	subs	r1, r4, #1
   1906a:	4638      	mov	r0, r7
   1906c:	f7ff fd6e 	bl	18b4c <pin_obj_init_helper>
}
   19070:	4638      	mov	r0, r7
   19072:	b007      	add	sp, #28
   19074:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00019078 <pin_unlock>:

/// \classmethod unlock(str pin1, str pin2,..)
/// Sets the Commit Flag on the corresponding GPIO to enable
/// re-assingment of the supplied pin
STATIC mp_obj_t pin_unlock(size_t n_args, const mp_obj_t *args) {
    if (n_args > 1) {
   19078:	2801      	cmp	r0, #1
   1907a:	d90f      	bls.n	1909c <pin_unlock+0x24>
STATIC mp_obj_t pin_unlock(size_t n_args, const mp_obj_t *args) {
   1907c:	b570      	push	{r4, r5, r6, lr}
   1907e:	460e      	mov	r6, r1
   19080:	4605      	mov	r5, r0
        for (int i = 1 ; i < n_args ; i++) {
   19082:	2401      	movs	r4, #1
   19084:	e006      	b.n	19094 <pin_unlock+0x1c>
            const pin_obj_t *p = pin_find(args[i]);
   19086:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1908a:	f7ff ff25 	bl	18ed8 <pin_find>
            mp_hal_unlock_special_pin(p);
   1908e:	f7ff fc25 	bl	188dc <mp_hal_unlock_special_pin>
        for (int i = 1 ; i < n_args ; i++) {
   19092:	3401      	adds	r4, #1
   19094:	42ac      	cmp	r4, r5
   19096:	d3f6      	bcc.n	19086 <pin_unlock+0xe>
        }
    }
    return mp_const_none;
}
   19098:	4801      	ldr	r0, [pc, #4]	; (190a0 <pin_unlock+0x28>)
   1909a:	bd70      	pop	{r4, r5, r6, pc}
   1909c:	4800      	ldr	r0, [pc, #0]	; (190a0 <pin_unlock+0x28>)
   1909e:	4770      	bx	lr
   190a0:	00027b40 	.word	0x00027b40

000190a4 <pin_named_pins_obj_print>:
#include "py/mphal.h"
#include "pin.h"



STATIC void pin_named_pins_obj_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   190a4:	b508      	push	{r3, lr}
    pin_named_pins_obj_t *self = self_in;
    mp_printf(print, "<Pin.%q>", self->name);
   190a6:	684a      	ldr	r2, [r1, #4]
   190a8:	4901      	ldr	r1, [pc, #4]	; (190b0 <pin_named_pins_obj_print+0xc>)
   190aa:	f7e8 ffdf 	bl	206c <mp_printf>
}
   190ae:	bd08      	pop	{r3, pc}
   190b0:	0002af24 	.word	0x0002af24

000190b4 <pin_find_named_pin>:
    .name = MP_QSTR_board,
    .print = pin_named_pins_obj_print,
    .locals_dict = (mp_obj_t)&pin_board_pins_locals_dict,
};

const pin_obj_t *pin_find_named_pin(const mp_obj_dict_t *named_pins, mp_obj_t name) {
   190b4:	b508      	push	{r3, lr}
    const mp_map_t *named_map = &named_pins->map;
    mp_map_elem_t *named_elem = mp_map_lookup((mp_map_t*)named_map, name, MP_MAP_LOOKUP);
   190b6:	2200      	movs	r2, #0
   190b8:	3004      	adds	r0, #4
   190ba:	f7f1 fc3d 	bl	a938 <mp_map_lookup>
    if (named_elem != NULL && named_elem->value != MP_OBJ_NULL) {
   190be:	b108      	cbz	r0, 190c4 <pin_find_named_pin+0x10>
   190c0:	6840      	ldr	r0, [r0, #4]
        return MP_OBJ_TO_PTR(named_elem->value);
    }
    return NULL;
}
   190c2:	bd08      	pop	{r3, pc}
    return NULL;
   190c4:	2000      	movs	r0, #0
   190c6:	e7fc      	b.n	190c2 <pin_find_named_pin+0xe>

000190c8 <pin_find_af>:

const pin_af_obj_t *pin_find_af(const pin_obj_t *pin, uint8_t fn, uint8_t unit) {
   190c8:	b430      	push	{r4, r5}
    const pin_af_obj_t *af = pin->af_list;
   190ca:	6943      	ldr	r3, [r0, #20]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   190cc:	2400      	movs	r4, #0
   190ce:	e001      	b.n	190d4 <pin_find_af+0xc>
   190d0:	3401      	adds	r4, #1
   190d2:	3310      	adds	r3, #16
   190d4:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
   190d8:	42a5      	cmp	r5, r4
   190da:	d906      	bls.n	190ea <pin_find_af+0x22>
        if (af->fn == fn && af->unit == unit) {
   190dc:	795d      	ldrb	r5, [r3, #5]
   190de:	428d      	cmp	r5, r1
   190e0:	d1f6      	bne.n	190d0 <pin_find_af+0x8>
   190e2:	799d      	ldrb	r5, [r3, #6]
   190e4:	4295      	cmp	r5, r2
   190e6:	d1f3      	bne.n	190d0 <pin_find_af+0x8>
   190e8:	e000      	b.n	190ec <pin_find_af+0x24>
            return af;
        }
    }
    return NULL;
   190ea:	2300      	movs	r3, #0
}
   190ec:	4618      	mov	r0, r3
   190ee:	bc30      	pop	{r4, r5}
   190f0:	4770      	bx	lr

000190f2 <pin_find_af_by_index>:

const pin_af_obj_t *pin_find_af_by_index(const pin_obj_t *pin, mp_uint_t af_idx) {
   190f2:	b410      	push	{r4}
    const pin_af_obj_t *af = pin->af_list;
   190f4:	6943      	ldr	r3, [r0, #20]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   190f6:	2200      	movs	r2, #0
   190f8:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
   190fc:	4294      	cmp	r4, r2
   190fe:	d906      	bls.n	1910e <pin_find_af_by_index+0x1c>
        if (af->idx == af_idx) {
   19100:	f993 4004 	ldrsb.w	r4, [r3, #4]
   19104:	428c      	cmp	r4, r1
   19106:	d003      	beq.n	19110 <pin_find_af_by_index+0x1e>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   19108:	3201      	adds	r2, #1
   1910a:	3310      	adds	r3, #16
   1910c:	e7f4      	b.n	190f8 <pin_find_af_by_index+0x6>
            return af;
        }
    }
    return NULL;
   1910e:	2300      	movs	r3, #0
}
   19110:	4618      	mov	r0, r3
   19112:	f85d 4b04 	ldr.w	r4, [sp], #4
   19116:	4770      	bx	lr

00019118 <machine_bootloader>:
    nlr_raise(mp_obj_new_exception(&mp_type_SystemExit));
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_soft_reset_obj, machine_soft_reset);

// Activate the bootloader without BOOT* pins.
STATIC NORETURN mp_obj_t machine_bootloader(void) {
   19118:	e7fe      	b.n	19118 <machine_bootloader>
	...

0001911c <machine_reset_cause>:
    return mp_const_none;
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_deepsleep_obj, machine_deepsleep);

STATIC mp_obj_t machine_reset_cause(void) {
    return MP_OBJ_NEW_SMALL_INT(reset_cause);
   1911c:	4b02      	ldr	r3, [pc, #8]	; (19128 <machine_reset_cause+0xc>)
   1911e:	6818      	ldr	r0, [r3, #0]
   19120:	0040      	lsls	r0, r0, #1
}
   19122:	f040 0001 	orr.w	r0, r0, #1
   19126:	4770      	bx	lr
   19128:	20000670 	.word	0x20000670

0001912c <machine_info>:
STATIC mp_obj_t machine_info(size_t n_args, const mp_obj_t *args) {
   1912c:	b530      	push	{r4, r5, lr}
   1912e:	b08d      	sub	sp, #52	; 0x34
   19130:	4605      	mov	r5, r0
        uint32_t id = SYSCTL->DID0;
   19132:	4b41      	ldr	r3, [pc, #260]	; (19238 <machine_info+0x10c>)
   19134:	6819      	ldr	r1, [r3, #0]
        printf("ID: CLASS=%02x, v%02u.%02u", (uint8_t)((id >> 16) & 0xff), (uint8_t)((id >> 8) & 0xff), (uint8_t)(id & 0xff));
   19136:	b2cb      	uxtb	r3, r1
   19138:	f3c1 2207 	ubfx	r2, r1, #8, #8
   1913c:	f3c1 4107 	ubfx	r1, r1, #16, #8
   19140:	483e      	ldr	r0, [pc, #248]	; (1923c <machine_info+0x110>)
   19142:	f7ff f8b9 	bl	182b8 <printf>
        printf("%u Hz", (unsigned int)SysCtlClockGet());
   19146:	f007 fd41 	bl	20bcc <SysCtlClockGet>
   1914a:	4601      	mov	r1, r0
   1914c:	483c      	ldr	r0, [pc, #240]	; (19240 <machine_info+0x114>)
   1914e:	f7ff f8b3 	bl	182b8 <printf>
        printf("_etext=%p\n", &_etext);
   19152:	493c      	ldr	r1, [pc, #240]	; (19244 <machine_info+0x118>)
   19154:	483c      	ldr	r0, [pc, #240]	; (19248 <machine_info+0x11c>)
   19156:	f7ff f8af 	bl	182b8 <printf>
        printf("_sidata=%p\n", &_sidata);
   1915a:	493c      	ldr	r1, [pc, #240]	; (1924c <machine_info+0x120>)
   1915c:	483c      	ldr	r0, [pc, #240]	; (19250 <machine_info+0x124>)
   1915e:	f7ff f8ab 	bl	182b8 <printf>
        printf("_sdata=%p\n", &_sdata);
   19162:	493c      	ldr	r1, [pc, #240]	; (19254 <machine_info+0x128>)
   19164:	483c      	ldr	r0, [pc, #240]	; (19258 <machine_info+0x12c>)
   19166:	f7ff f8a7 	bl	182b8 <printf>
        printf("_edata=%p\n", &_edata);
   1916a:	493c      	ldr	r1, [pc, #240]	; (1925c <machine_info+0x130>)
   1916c:	483c      	ldr	r0, [pc, #240]	; (19260 <machine_info+0x134>)
   1916e:	f7ff f8a3 	bl	182b8 <printf>
        printf("_sbss=%p\n", &_sbss);
   19172:	493c      	ldr	r1, [pc, #240]	; (19264 <machine_info+0x138>)
   19174:	483c      	ldr	r0, [pc, #240]	; (19268 <machine_info+0x13c>)
   19176:	f7ff f89f 	bl	182b8 <printf>
        printf("_ebss=%p\n", &_ebss);
   1917a:	493c      	ldr	r1, [pc, #240]	; (1926c <machine_info+0x140>)
   1917c:	483c      	ldr	r0, [pc, #240]	; (19270 <machine_info+0x144>)
   1917e:	f7ff f89b 	bl	182b8 <printf>
        printf("_estack=%p\n", &_estack);
   19182:	493c      	ldr	r1, [pc, #240]	; (19274 <machine_info+0x148>)
   19184:	483c      	ldr	r0, [pc, #240]	; (19278 <machine_info+0x14c>)
   19186:	f7ff f897 	bl	182b8 <printf>
        printf("_ram_start=%p\n", &_ram_start);
   1918a:	493c      	ldr	r1, [pc, #240]	; (1927c <machine_info+0x150>)
   1918c:	483c      	ldr	r0, [pc, #240]	; (19280 <machine_info+0x154>)
   1918e:	f7ff f893 	bl	182b8 <printf>
        printf("_heap_start=%p\n", &_heap_start);
   19192:	493c      	ldr	r1, [pc, #240]	; (19284 <machine_info+0x158>)
   19194:	483c      	ldr	r0, [pc, #240]	; (19288 <machine_info+0x15c>)
   19196:	f7ff f88f 	bl	182b8 <printf>
        printf("_heap_end=%p\n", &_heap_end);
   1919a:	493c      	ldr	r1, [pc, #240]	; (1928c <machine_info+0x160>)
   1919c:	483c      	ldr	r0, [pc, #240]	; (19290 <machine_info+0x164>)
   1919e:	f7ff f88b 	bl	182b8 <printf>
        printf("_ram_end=%p\n", &_ram_end);
   191a2:	493c      	ldr	r1, [pc, #240]	; (19294 <machine_info+0x168>)
   191a4:	483c      	ldr	r0, [pc, #240]	; (19298 <machine_info+0x16c>)
   191a6:	f7ff f887 	bl	182b8 <printf>
        qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   191aa:	ab05      	add	r3, sp, #20
   191ac:	aa04      	add	r2, sp, #16
   191ae:	a903      	add	r1, sp, #12
   191b0:	a802      	add	r0, sp, #8
   191b2:	f7e8 fa7b 	bl	16ac <qstr_pool_info>
        printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  n_str_data_bytes=%u\n  n_total_bytes=%u\n", n_pool, n_qstr, n_str_data_bytes, n_total_bytes);
   191b6:	9b05      	ldr	r3, [sp, #20]
   191b8:	9300      	str	r3, [sp, #0]
   191ba:	9b04      	ldr	r3, [sp, #16]
   191bc:	9a03      	ldr	r2, [sp, #12]
   191be:	9902      	ldr	r1, [sp, #8]
   191c0:	4836      	ldr	r0, [pc, #216]	; (1929c <machine_info+0x170>)
   191c2:	f7ff f879 	bl	182b8 <printf>
        gc_info(&info);
   191c6:	a805      	add	r0, sp, #20
   191c8:	f7e7 fd78 	bl	cbc <gc_info>
        printf("GC:\n");
   191cc:	4834      	ldr	r0, [pc, #208]	; (192a0 <machine_info+0x174>)
   191ce:	f7ff f893 	bl	182f8 <puts>
        printf("  %u total\n", info.total);
   191d2:	9905      	ldr	r1, [sp, #20]
   191d4:	4833      	ldr	r0, [pc, #204]	; (192a4 <machine_info+0x178>)
   191d6:	f7ff f86f 	bl	182b8 <printf>
        printf("  %u : %u\n", info.used, info.free);
   191da:	9a07      	ldr	r2, [sp, #28]
   191dc:	9906      	ldr	r1, [sp, #24]
   191de:	4832      	ldr	r0, [pc, #200]	; (192a8 <machine_info+0x17c>)
   191e0:	f7ff f86a 	bl	182b8 <printf>
        printf("  1=%u 2=%u m=%u\n", info.num_1block, info.num_2block, info.max_block);
   191e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   191e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   191e8:	9909      	ldr	r1, [sp, #36]	; 0x24
   191ea:	4830      	ldr	r0, [pc, #192]	; (192ac <machine_info+0x180>)
   191ec:	f7ff f864 	bl	182b8 <printf>
        for (mp_vfs_mount_t *vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   191f0:	4b2f      	ldr	r3, [pc, #188]	; (192b0 <machine_info+0x184>)
   191f2:	f8d3 422c 	ldr.w	r4, [r3, #556]	; 0x22c
   191f6:	b1b4      	cbz	r4, 19226 <machine_info+0xfa>
            if (strncmp("/flash", vfs->str, vfs->len) == 0) {
   191f8:	6862      	ldr	r2, [r4, #4]
   191fa:	6821      	ldr	r1, [r4, #0]
   191fc:	482d      	ldr	r0, [pc, #180]	; (192b4 <machine_info+0x188>)
   191fe:	f002 fbb3 	bl	1b968 <strncmp>
   19202:	b108      	cbz	r0, 19208 <machine_info+0xdc>
        for (mp_vfs_mount_t *vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   19204:	68e4      	ldr	r4, [r4, #12]
   19206:	e7f6      	b.n	191f6 <machine_info+0xca>
                fs_user_mount_t *vfs_fat = MP_OBJ_TO_PTR(vfs->obj);
   19208:	68a4      	ldr	r4, [r4, #8]
                f_getfree(&vfs_fat->fatfs, &nclst);
   1920a:	a905      	add	r1, sp, #20
   1920c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19210:	f004 fdb9 	bl	1dd86 <f_getfree>
                printf("LFS free: %u bytes\n", (uint)(nclst * vfs_fat->fatfs.csize * 512));
   19214:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   19218:	9905      	ldr	r1, [sp, #20]
   1921a:	fb01 f103 	mul.w	r1, r1, r3
   1921e:	0249      	lsls	r1, r1, #9
   19220:	4825      	ldr	r0, [pc, #148]	; (192b8 <machine_info+0x18c>)
   19222:	f7ff f849 	bl	182b8 <printf>
    if (n_args == 1) {
   19226:	2d01      	cmp	r5, #1
   19228:	d002      	beq.n	19230 <machine_info+0x104>
}
   1922a:	4824      	ldr	r0, [pc, #144]	; (192bc <machine_info+0x190>)
   1922c:	b00d      	add	sp, #52	; 0x34
   1922e:	bd30      	pop	{r4, r5, pc}
        gc_dump_alloc_table();
   19230:	f7e8 f83a 	bl	12a8 <gc_dump_alloc_table>
   19234:	e7f9      	b.n	1922a <machine_info+0xfe>
   19236:	bf00      	nop
   19238:	400fe000 	.word	0x400fe000
   1923c:	0002af68 	.word	0x0002af68
   19240:	0002af84 	.word	0x0002af84
   19244:	00020e8c 	.word	0x00020e8c
   19248:	0002af8c 	.word	0x0002af8c
   1924c:	00020e8c 	.word	0x00020e8c
   19250:	0002af98 	.word	0x0002af98
   19254:	20000000 	.word	0x20000000
   19258:	0002afa4 	.word	0x0002afa4
   1925c:	20000004 	.word	0x20000004
   19260:	0002afb0 	.word	0x0002afb0
   19264:	2000066c 	.word	0x2000066c
   19268:	0002afbc 	.word	0x0002afbc
   1926c:	20000eac 	.word	0x20000eac
   19270:	0002afc8 	.word	0x0002afc8
   19274:	20008000 	.word	0x20008000
   19278:	0002afd4 	.word	0x0002afd4
   1927c:	20000000 	.word	0x20000000
   19280:	0002afe0 	.word	0x0002afe0
   19284:	20000eac 	.word	0x20000eac
   19288:	0002aff0 	.word	0x0002aff0
   1928c:	20006eac 	.word	0x20006eac
   19290:	0002b000 	.word	0x0002b000
   19294:	20008000 	.word	0x20008000
   19298:	0002b010 	.word	0x0002b010
   1929c:	0002b020 	.word	0x0002b020
   192a0:	0002b068 	.word	0x0002b068
   192a4:	0002b06c 	.word	0x0002b06c
   192a8:	0002b078 	.word	0x0002b078
   192ac:	0002b084 	.word	0x0002b084
   192b0:	200008a0 	.word	0x200008a0
   192b4:	0002b098 	.word	0x0002b098
   192b8:	0002b0a0 	.word	0x0002b0a0
   192bc:	00027b40 	.word	0x00027b40

000192c0 <machine_unique_id>:
STATIC mp_obj_t machine_unique_id(void) {
   192c0:	b508      	push	{r3, lr}
    byte *id = (byte*)(SYSCTL->DID1 + 2);
   192c2:	4b03      	ldr	r3, [pc, #12]	; (192d0 <machine_unique_id+0x10>)
   192c4:	6858      	ldr	r0, [r3, #4]
    return mp_obj_new_bytes(id, 12);
   192c6:	210c      	movs	r1, #12
   192c8:	3002      	adds	r0, #2
   192ca:	f7f6 fdc7 	bl	fe5c <mp_obj_new_bytes>
}
   192ce:	bd08      	pop	{r3, pc}
   192d0:	400fe000 	.word	0x400fe000

000192d4 <machine_reset>:
STATIC mp_obj_t machine_reset(void) {
   192d4:	b508      	push	{r3, lr}
    MAP_SysCtlReset();
   192d6:	f007 fc4d 	bl	20b74 <SysCtlReset>
}
   192da:	4801      	ldr	r0, [pc, #4]	; (192e0 <machine_reset+0xc>)
   192dc:	bd08      	pop	{r3, pc}
   192de:	bf00      	nop
   192e0:	00027b40 	.word	0x00027b40

000192e4 <machine_soft_reset>:
STATIC mp_obj_t machine_soft_reset(void) {
   192e4:	b508      	push	{r3, lr}
    pyexec_system_exit = PYEXEC_FORCED_EXIT;
   192e6:	4b04      	ldr	r3, [pc, #16]	; (192f8 <machine_soft_reset+0x14>)
   192e8:	f44f 7280 	mov.w	r2, #256	; 0x100
   192ec:	601a      	str	r2, [r3, #0]
    nlr_raise(mp_obj_new_exception(&mp_type_SystemExit));
   192ee:	4803      	ldr	r0, [pc, #12]	; (192fc <machine_soft_reset+0x18>)
   192f0:	f7f3 fbda 	bl	caa8 <mp_obj_new_exception>
   192f4:	f7e7 fac4 	bl	880 <nlr_jump>
   192f8:	20000698 	.word	0x20000698
   192fc:	00026c48 	.word	0x00026c48

00019300 <machine_freq>:
STATIC mp_obj_t machine_freq(size_t n_args, const mp_obj_t *args) {
   19300:	b500      	push	{lr}
   19302:	b083      	sub	sp, #12
    if (n_args == 0) {
   19304:	b960      	cbnz	r0, 19320 <machine_freq+0x20>
           mp_obj_new_int(MAP_SysCtlClockGet()),
   19306:	f007 fc61 	bl	20bcc <SysCtlClockGet>
   1930a:	f7f4 fe16 	bl	df3a <mp_obj_new_int>
        mp_obj_t tuple[] = {
   1930e:	a902      	add	r1, sp, #8
   19310:	f841 0d04 	str.w	r0, [r1, #-4]!
        return mp_obj_new_tuple(MP_ARRAY_SIZE(tuple), tuple);
   19314:	2001      	movs	r0, #1
   19316:	f7f8 fa95 	bl	11844 <mp_obj_new_tuple>
}
   1931a:	b003      	add	sp, #12
   1931c:	f85d fb04 	ldr.w	pc, [sp], #4
            mp_raise_ValueError("freq change not supported");
   19320:	4801      	ldr	r0, [pc, #4]	; (19328 <machine_freq+0x28>)
   19322:	f7f0 ffc1 	bl	a2a8 <mp_raise_ValueError>
   19326:	bf00      	nop
   19328:	0002af40 	.word	0x0002af40

0001932c <machine_sleep>:
STATIC mp_obj_t machine_sleep(void) {
   1932c:	b508      	push	{r3, lr}
    MAP_SysCtlSleep();
   1932e:	f007 fc29 	bl	20b84 <SysCtlSleep>
}
   19332:	4801      	ldr	r0, [pc, #4]	; (19338 <machine_sleep+0xc>)
   19334:	bd08      	pop	{r3, pc}
   19336:	bf00      	nop
   19338:	00027b40 	.word	0x00027b40

0001933c <machine_deepsleep>:
STATIC mp_obj_t machine_deepsleep(void) {
   1933c:	b508      	push	{r3, lr}
    MAP_SysCtlDeepSleep();
   1933e:	f007 fc23 	bl	20b88 <SysCtlDeepSleep>
}
   19342:	4801      	ldr	r0, [pc, #4]	; (19348 <machine_deepsleep+0xc>)
   19344:	bd08      	pop	{r3, pc}
   19346:	bf00      	nop
   19348:	00027b40 	.word	0x00027b40

0001934c <machine_init>:
void machine_init(void) {
   1934c:	b508      	push	{r3, lr}
    uint32_t state = MAP_SysCtlResetCauseGet();
   1934e:	f007 fc2b 	bl	20ba8 <SysCtlResetCauseGet>
    if ((state & SYSCTL_CAUSE_WDOG0) || (state & SYSCTL_CAUSE_WDOG1)) {
   19352:	f010 0f28 	tst.w	r0, #40	; 0x28
   19356:	d10f      	bne.n	19378 <machine_init+0x2c>
    } else if (state & SYSCTL_CAUSE_POR)  {
   19358:	f010 0f02 	tst.w	r0, #2
   1935c:	d112      	bne.n	19384 <machine_init+0x38>
    } else if (state & SYSCTL_CAUSE_BOR) {
   1935e:	f010 0f04 	tst.w	r0, #4
   19362:	d113      	bne.n	1938c <machine_init+0x40>
    } else if (state & SYSCTL_CAUSE_EXT) {
   19364:	f010 0f01 	tst.w	r0, #1
   19368:	d114      	bne.n	19394 <machine_init+0x48>
    } else if ((state & SYSCTL_CAUSE_HSRVREQ) || (state & SYSCTL_CAUSE_HIB)){
   1936a:	f410 5f82 	tst.w	r0, #4160	; 0x1040
   1936e:	d115      	bne.n	1939c <machine_init+0x50>
        reset_cause = PYB_RESET_SOFT;
   19370:	4b0c      	ldr	r3, [pc, #48]	; (193a4 <machine_init+0x58>)
   19372:	2200      	movs	r2, #0
   19374:	601a      	str	r2, [r3, #0]
   19376:	e002      	b.n	1937e <machine_init+0x32>
        reset_cause = PYB_RESET_WDT;
   19378:	4b0a      	ldr	r3, [pc, #40]	; (193a4 <machine_init+0x58>)
   1937a:	2203      	movs	r2, #3
   1937c:	601a      	str	r2, [r3, #0]
    MAP_SysCtlResetCauseClear(state);
   1937e:	f007 fc19 	bl	20bb4 <SysCtlResetCauseClear>
}
   19382:	bd08      	pop	{r3, pc}
        reset_cause = PYB_RESET_POWER_ON;
   19384:	4b07      	ldr	r3, [pc, #28]	; (193a4 <machine_init+0x58>)
   19386:	2201      	movs	r2, #1
   19388:	601a      	str	r2, [r3, #0]
   1938a:	e7f8      	b.n	1937e <machine_init+0x32>
        reset_cause = PYB_RESET_BROWNOUT;
   1938c:	4b05      	ldr	r3, [pc, #20]	; (193a4 <machine_init+0x58>)
   1938e:	2205      	movs	r2, #5
   19390:	601a      	str	r2, [r3, #0]
   19392:	e7f4      	b.n	1937e <machine_init+0x32>
        reset_cause = PYB_RESET_HARD;
   19394:	4b03      	ldr	r3, [pc, #12]	; (193a4 <machine_init+0x58>)
   19396:	2202      	movs	r2, #2
   19398:	601a      	str	r2, [r3, #0]
   1939a:	e7f0      	b.n	1937e <machine_init+0x32>
        reset_cause = PYB_RESET_OTHER;
   1939c:	4b01      	ldr	r3, [pc, #4]	; (193a4 <machine_init+0x58>)
   1939e:	2206      	movs	r2, #6
   193a0:	601a      	str	r2, [r3, #0]
   193a2:	e7ec      	b.n	1937e <machine_init+0x32>
   193a4:	20000670 	.word	0x20000670

000193a8 <machine_deinit>:
    reset_cause = PYB_RESET_SOFT;
   193a8:	4b01      	ldr	r3, [pc, #4]	; (193b0 <machine_deinit+0x8>)
   193aa:	2200      	movs	r2, #0
   193ac:	601a      	str	r2, [r3, #0]
}
   193ae:	4770      	bx	lr
   193b0:	20000670 	.word	0x20000670

000193b4 <pyb_elapsed_micros>:
///
/// Example:
///     start = pyb.micros()
///     while pyb.elapsed_micros(start) < 1000:
///         # Perform some operation
STATIC mp_obj_t pyb_elapsed_micros(mp_obj_t start) {
   193b4:	b510      	push	{r4, lr}
    uint32_t startMicros = mp_obj_get_int(start);
   193b6:	f7f1 fd09 	bl	adcc <mp_obj_get_int>
   193ba:	4604      	mov	r4, r0
    uint32_t currMicros = mp_hal_ticks_us();
   193bc:	f000 fd42 	bl	19e44 <mp_hal_ticks_us>
    return MP_OBJ_NEW_SMALL_INT((currMicros - startMicros) & 0x3fffffff);
   193c0:	1b00      	subs	r0, r0, r4
   193c2:	0040      	lsls	r0, r0, #1
   193c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   193c8:	f020 0001 	bic.w	r0, r0, #1
}
   193cc:	f040 0001 	orr.w	r0, r0, #1
   193d0:	bd10      	pop	{r4, pc}

000193d2 <pyb_elapsed_millis>:
STATIC mp_obj_t pyb_elapsed_millis(mp_obj_t start) {
   193d2:	b510      	push	{r4, lr}
    uint32_t startMillis = mp_obj_get_int(start);
   193d4:	f7f1 fcfa 	bl	adcc <mp_obj_get_int>
   193d8:	4604      	mov	r4, r0
    uint32_t currMillis = mp_hal_ticks_ms();
   193da:	f000 fd2d 	bl	19e38 <mp_hal_ticks_ms>
    return MP_OBJ_NEW_SMALL_INT((currMillis - startMillis) & 0x3fffffff);
   193de:	1b00      	subs	r0, r0, r4
   193e0:	0040      	lsls	r0, r0, #1
   193e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   193e6:	f020 0001 	bic.w	r0, r0, #1
}
   193ea:	f040 0001 	orr.w	r0, r0, #1
   193ee:	bd10      	pop	{r4, pc}

000193f0 <pyb_repl_uart>:
MP_DECLARE_CONST_FUN_OBJ_KW(pyb_main_obj); // defined in main.c

// Get or set the UART object that the REPL is repeated on.
// This is a legacy function, use of uos.dupterm is preferred.
STATIC mp_obj_t pyb_repl_uart(size_t n_args, const mp_obj_t *args) {
    if (n_args == 0) {
   193f0:	b920      	cbnz	r0, 193fc <pyb_repl_uart+0xc>
        if (MP_STATE_PORT(machine_stdio_uart) == NULL) {
   193f2:	4b16      	ldr	r3, [pc, #88]	; (1944c <pyb_repl_uart+0x5c>)
   193f4:	f8d3 01ec 	ldr.w	r0, [r3, #492]	; 0x1ec
   193f8:	b320      	cbz	r0, 19444 <pyb_repl_uart+0x54>
        } else {
            mp_raise_ValueError("need a UART object");
        }
        return mp_const_none;
    }
}
   193fa:	4770      	bx	lr
STATIC mp_obj_t pyb_repl_uart(size_t n_args, const mp_obj_t *args) {
   193fc:	b510      	push	{r4, lr}
   193fe:	460c      	mov	r4, r1
        if (args[0] == mp_const_none) {
   19400:	6808      	ldr	r0, [r1, #0]
   19402:	4b13      	ldr	r3, [pc, #76]	; (19450 <pyb_repl_uart+0x60>)
   19404:	4298      	cmp	r0, r3
   19406:	d00d      	beq.n	19424 <pyb_repl_uart+0x34>
        } else if (mp_obj_get_type(args[0]) == &machine_uart_type) {
   19408:	f7f1 fbb8 	bl	ab7c <mp_obj_get_type>
   1940c:	4b11      	ldr	r3, [pc, #68]	; (19454 <pyb_repl_uart+0x64>)
   1940e:	4283      	cmp	r3, r0
   19410:	d115      	bne.n	1943e <pyb_repl_uart+0x4e>
            MP_STATE_PORT(machine_stdio_uart) = args[0];
   19412:	6820      	ldr	r0, [r4, #0]
   19414:	4b0d      	ldr	r3, [pc, #52]	; (1944c <pyb_repl_uart+0x5c>)
   19416:	f8c3 01ec 	str.w	r0, [r3, #492]	; 0x1ec
            uart_attach_to_repl(MP_STATE_PORT(machine_stdio_uart), true);
   1941a:	2101      	movs	r1, #1
   1941c:	f000 fc42 	bl	19ca4 <uart_attach_to_repl>
        return mp_const_none;
   19420:	480b      	ldr	r0, [pc, #44]	; (19450 <pyb_repl_uart+0x60>)
}
   19422:	bd10      	pop	{r4, pc}
            if (MP_STATE_PORT(machine_stdio_uart) != NULL) {
   19424:	4b09      	ldr	r3, [pc, #36]	; (1944c <pyb_repl_uart+0x5c>)
   19426:	f8d3 01ec 	ldr.w	r0, [r3, #492]	; 0x1ec
   1942a:	b168      	cbz	r0, 19448 <pyb_repl_uart+0x58>
                uart_attach_to_repl(MP_STATE_PORT(machine_stdio_uart), false);
   1942c:	2100      	movs	r1, #0
   1942e:	f000 fc39 	bl	19ca4 <uart_attach_to_repl>
                MP_STATE_PORT(machine_stdio_uart) = NULL;
   19432:	4b06      	ldr	r3, [pc, #24]	; (1944c <pyb_repl_uart+0x5c>)
   19434:	2200      	movs	r2, #0
   19436:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
        return mp_const_none;
   1943a:	4805      	ldr	r0, [pc, #20]	; (19450 <pyb_repl_uart+0x60>)
   1943c:	e7f1      	b.n	19422 <pyb_repl_uart+0x32>
            mp_raise_ValueError("need a UART object");
   1943e:	4806      	ldr	r0, [pc, #24]	; (19458 <pyb_repl_uart+0x68>)
   19440:	f7f0 ff32 	bl	a2a8 <mp_raise_ValueError>
            return mp_const_none;
   19444:	4802      	ldr	r0, [pc, #8]	; (19450 <pyb_repl_uart+0x60>)
   19446:	4770      	bx	lr
        return mp_const_none;
   19448:	4801      	ldr	r0, [pc, #4]	; (19450 <pyb_repl_uart+0x60>)
   1944a:	e7ea      	b.n	19422 <pyb_repl_uart+0x32>
   1944c:	200008a0 	.word	0x200008a0
   19450:	00027b40 	.word	0x00027b40
   19454:	0002b494 	.word	0x0002b494
   19458:	0002b238 	.word	0x0002b238

0001945c <uart_exists>:
        }
    }
}

STATIC bool uart_exists(int uart_id) {
    if (uart_id > MP_ARRAY_SIZE(MP_STATE_PORT(machine_uart_obj_all))) {
   1945c:	2808      	cmp	r0, #8
   1945e:	d805      	bhi.n	1946c <uart_exists+0x10>
        // safeguard against machine_uart_obj_all array being configured too small
        return false;
    }
    switch (uart_id) {
   19460:	2807      	cmp	r0, #7
   19462:	d901      	bls.n	19468 <uart_exists+0xc>

        #if defined(MICROPY_HW_UART7_TX) && defined(MICROPY_HW_UART7_RX)
        case UART_7: return true;
        #endif

        default: return false;
   19464:	2000      	movs	r0, #0
    }
}
   19466:	4770      	bx	lr
        case UART_0: return true;
   19468:	2001      	movs	r0, #1
   1946a:	4770      	bx	lr
        return false;
   1946c:	2000      	movs	r0, #0
   1946e:	4770      	bx	lr

00019470 <machine_uart_startbreak>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(machine_uart_readchar_obj, machine_uart_readchar);

// start of the break condition
STATIC mp_obj_t machine_uart_startbreak(mp_obj_t self_in) {
    machine_uart_obj_t *self = self_in;
    self->regs->LCRH |= UART_LCRH_BRK;
   19470:	68c2      	ldr	r2, [r0, #12]
   19472:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   19474:	f043 0301 	orr.w	r3, r3, #1
   19478:	62d3      	str	r3, [r2, #44]	; 0x2c
    return mp_const_none;
}
   1947a:	4801      	ldr	r0, [pc, #4]	; (19480 <machine_uart_startbreak+0x10>)
   1947c:	4770      	bx	lr
   1947e:	bf00      	nop
   19480:	00027b40 	.word	0x00027b40

00019484 <machine_uart_stopbreak>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(machine_uart_startbreak_obj, machine_uart_startbreak);

// stop of the break condition, because a break generator is not available
STATIC mp_obj_t machine_uart_stopbreak(mp_obj_t self_in) {
    machine_uart_obj_t *self = self_in;
    self->regs->LCRH &= ~UART_LCRH_BRK;
   19484:	68c2      	ldr	r2, [r0, #12]
   19486:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   19488:	f023 0301 	bic.w	r3, r3, #1
   1948c:	62d3      	str	r3, [r2, #44]	; 0x2c
    return mp_const_none;
}
   1948e:	4801      	ldr	r0, [pc, #4]	; (19494 <machine_uart_stopbreak+0x10>)
   19490:	4770      	bx	lr
   19492:	bf00      	nop
   19494:	00027b40 	.word	0x00027b40

00019498 <machine_uart_deinit>:
STATIC mp_obj_t machine_uart_deinit(mp_obj_t self_in) {
   19498:	b510      	push	{r4, lr}
   1949a:	4604      	mov	r4, r0
    self->is_enabled = false;
   1949c:	7d43      	ldrb	r3, [r0, #21]
   1949e:	f36f 0300 	bfc	r3, #0, #1
   194a2:	7543      	strb	r3, [r0, #21]
    UARTIntUnregister(self->uart);
   194a4:	6840      	ldr	r0, [r0, #4]
   194a6:	f007 fccd 	bl	20e44 <UARTIntUnregister>
    MAP_UARTDisable(self->uart);
   194aa:	6860      	ldr	r0, [r4, #4]
   194ac:	f007 fc8c 	bl	20dc8 <UARTDisable>
    MAP_SysCtlIntDisable(self->irqn);
   194b0:	6920      	ldr	r0, [r4, #16]
   194b2:	f007 fb57 	bl	20b64 <SysCtlIntDisable>
    MAP_SysCtlPeripheralDisable(self->periph);
   194b6:	68a0      	ldr	r0, [r4, #8]
   194b8:	f007 fb3c 	bl	20b34 <SysCtlPeripheralDisable>
}
   194bc:	4800      	ldr	r0, [pc, #0]	; (194c0 <machine_uart_deinit+0x28>)
   194be:	bd10      	pop	{r4, pc}
   194c0:	00027b40 	.word	0x00027b40

000194c4 <uart_wait_flag_unset>:
STATIC bool uart_wait_flag_unset(machine_uart_obj_t *self, uint32_t flag, uint32_t timeout) {
   194c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194c6:	4606      	mov	r6, r0
   194c8:	460d      	mov	r5, r1
   194ca:	4614      	mov	r4, r2
    uint32_t start = mp_hal_ticks_ms();
   194cc:	f000 fcb4 	bl	19e38 <mp_hal_ticks_ms>
   194d0:	4607      	mov	r7, r0
        if (!(self->regs->FR & flag)) {
   194d2:	68f3      	ldr	r3, [r6, #12]
   194d4:	699b      	ldr	r3, [r3, #24]
   194d6:	422b      	tst	r3, r5
   194d8:	d009      	beq.n	194ee <uart_wait_flag_unset+0x2a>
        if (timeout == 0 || mp_hal_ticks_ms() - start >= timeout) {
   194da:	b154      	cbz	r4, 194f2 <uart_wait_flag_unset+0x2e>
   194dc:	f000 fcac 	bl	19e38 <mp_hal_ticks_ms>
   194e0:	1bc0      	subs	r0, r0, r7
   194e2:	42a0      	cmp	r0, r4
   194e4:	d207      	bcs.n	194f6 <uart_wait_flag_unset+0x32>
        MICROPY_EVENT_POLL_HOOK
   194e6:	f7f1 f8fb 	bl	a6e0 <mp_handle_pending>
   194ea:	bf30      	wfi
        if (!(self->regs->FR & flag)) {
   194ec:	e7f1      	b.n	194d2 <uart_wait_flag_unset+0xe>
            return true;
   194ee:	2001      	movs	r0, #1
}
   194f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false; // timeout
   194f2:	2000      	movs	r0, #0
   194f4:	e7fc      	b.n	194f0 <uart_wait_flag_unset+0x2c>
   194f6:	2000      	movs	r0, #0
   194f8:	e7fa      	b.n	194f0 <uart_wait_flag_unset+0x2c>

000194fa <uart_tx_data>:
STATIC size_t uart_tx_data(machine_uart_obj_t *self, const void *src_in, size_t num_chars, int *errcode) {
   194fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   194fe:	4699      	mov	r9, r3
    if (num_chars == 0) {
   19500:	4617      	mov	r7, r2
   19502:	b16a      	cbz	r2, 19520 <uart_tx_data+0x26>
   19504:	4606      	mov	r6, r0
   19506:	460d      	mov	r5, r1
    if (!(self->regs->FR & UART_FR_CTS) && (self->regs->CTL & UART_CTL_CTSEN)) {
   19508:	68c3      	ldr	r3, [r0, #12]
   1950a:	699a      	ldr	r2, [r3, #24]
   1950c:	f012 0f01 	tst.w	r2, #1
   19510:	d10d      	bne.n	1952e <uart_tx_data+0x34>
   19512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19514:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   19518:	d009      	beq.n	1952e <uart_tx_data+0x34>
        timeout = self->timeout;
   1951a:	f8b0 801a 	ldrh.w	r8, [r0, #26]
   1951e:	e00a      	b.n	19536 <uart_tx_data+0x3c>
        *errcode = 0;
   19520:	2300      	movs	r3, #0
   19522:	f8c9 3000 	str.w	r3, [r9]
        return 0;
   19526:	4614      	mov	r4, r2
}
   19528:	4620      	mov	r0, r4
   1952a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        timeout = 2 * self->timeout_char;
   1952e:	f8b6 801c 	ldrh.w	r8, [r6, #28]
   19532:	ea4f 0848 	mov.w	r8, r8, lsl #1
    size_t num_tx = 0;
   19536:	2400      	movs	r4, #0
    while (num_tx < num_chars) {
   19538:	42bc      	cmp	r4, r7
   1953a:	d20f      	bcs.n	1955c <uart_tx_data+0x62>
        if (!uart_wait_flag_unset(self, UART_FR_TXFF, timeout)) {
   1953c:	4642      	mov	r2, r8
   1953e:	2120      	movs	r1, #32
   19540:	4630      	mov	r0, r6
   19542:	f7ff ffbf 	bl	194c4 <uart_wait_flag_unset>
   19546:	b128      	cbz	r0, 19554 <uart_tx_data+0x5a>
            data = *src++;
   19548:	782a      	ldrb	r2, [r5, #0]
        self->regs->DR = 0xFF & data;
   1954a:	68f3      	ldr	r3, [r6, #12]
   1954c:	601a      	str	r2, [r3, #0]
        ++num_tx;
   1954e:	3401      	adds	r4, #1
            data = *src++;
   19550:	3501      	adds	r5, #1
   19552:	e7f1      	b.n	19538 <uart_tx_data+0x3e>
            *errcode = MP_ETIMEDOUT;
   19554:	2374      	movs	r3, #116	; 0x74
   19556:	f8c9 3000 	str.w	r3, [r9]
            return num_tx;
   1955a:	e7e5      	b.n	19528 <uart_tx_data+0x2e>
    if (!uart_wait_flag_unset(self, UART_FR_BUSY, timeout)) {
   1955c:	4642      	mov	r2, r8
   1955e:	2108      	movs	r1, #8
   19560:	4630      	mov	r0, r6
   19562:	f7ff ffaf 	bl	194c4 <uart_wait_flag_unset>
   19566:	b118      	cbz	r0, 19570 <uart_tx_data+0x76>
    *errcode = 0;
   19568:	2300      	movs	r3, #0
   1956a:	f8c9 3000 	str.w	r3, [r9]
    return num_tx;
   1956e:	e7db      	b.n	19528 <uart_tx_data+0x2e>
        *errcode = MP_ETIMEDOUT;
   19570:	2374      	movs	r3, #116	; 0x74
   19572:	f8c9 3000 	str.w	r3, [r9]
        return num_tx;
   19576:	e7d7      	b.n	19528 <uart_tx_data+0x2e>

00019578 <uart_rx_wait>:
STATIC bool uart_rx_wait(machine_uart_obj_t *self, uint32_t timeout) {
   19578:	b570      	push	{r4, r5, r6, lr}
   1957a:	4604      	mov	r4, r0
   1957c:	460e      	mov	r6, r1
    uint32_t start = mp_hal_ticks_ms();
   1957e:	f000 fc5b 	bl	19e38 <mp_hal_ticks_ms>
   19582:	4605      	mov	r5, r0
        if (self->read_buf_tail != self->read_buf_head || (!(self->regs->FR & UART_FR_RXFE))) {
   19584:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   19586:	8c23      	ldrh	r3, [r4, #32]
   19588:	b29b      	uxth	r3, r3
   1958a:	429a      	cmp	r2, r3
   1958c:	d10d      	bne.n	195aa <uart_rx_wait+0x32>
   1958e:	68e3      	ldr	r3, [r4, #12]
   19590:	699b      	ldr	r3, [r3, #24]
   19592:	f013 0f10 	tst.w	r3, #16
   19596:	d00a      	beq.n	195ae <uart_rx_wait+0x36>
        if (mp_hal_ticks_ms() - start >= timeout) {
   19598:	f000 fc4e 	bl	19e38 <mp_hal_ticks_ms>
   1959c:	1b40      	subs	r0, r0, r5
   1959e:	42b0      	cmp	r0, r6
   195a0:	d207      	bcs.n	195b2 <uart_rx_wait+0x3a>
        MICROPY_EVENT_POLL_HOOK
   195a2:	f7f1 f89d 	bl	a6e0 <mp_handle_pending>
   195a6:	bf30      	wfi
        if (self->read_buf_tail != self->read_buf_head || (!(self->regs->FR & UART_FR_RXFE))) {
   195a8:	e7ec      	b.n	19584 <uart_rx_wait+0xc>
            return true; // have at least 1 char ready for reading
   195aa:	2001      	movs	r0, #1
}
   195ac:	bd70      	pop	{r4, r5, r6, pc}
            return true; // have at least 1 char ready for reading
   195ae:	2001      	movs	r0, #1
   195b0:	e7fc      	b.n	195ac <uart_rx_wait+0x34>
            return false; // timeout
   195b2:	2000      	movs	r0, #0
   195b4:	e7fa      	b.n	195ac <uart_rx_wait+0x34>

000195b6 <uart_tx_wait>:
STATIC bool uart_tx_wait(machine_uart_obj_t *self, uint32_t timeout) {
   195b6:	b570      	push	{r4, r5, r6, lr}
   195b8:	4604      	mov	r4, r0
   195ba:	460e      	mov	r6, r1
    uint32_t start = mp_hal_ticks_ms();
   195bc:	f000 fc3c 	bl	19e38 <mp_hal_ticks_ms>
   195c0:	4605      	mov	r5, r0
        if (!(self->regs->FR & UART_FR_TXFF)) {
   195c2:	68e3      	ldr	r3, [r4, #12]
   195c4:	699b      	ldr	r3, [r3, #24]
   195c6:	f013 0f20 	tst.w	r3, #32
   195ca:	d008      	beq.n	195de <uart_tx_wait+0x28>
        if (mp_hal_ticks_ms() - start >= timeout) {
   195cc:	f000 fc34 	bl	19e38 <mp_hal_ticks_ms>
   195d0:	1b40      	subs	r0, r0, r5
   195d2:	42b0      	cmp	r0, r6
   195d4:	d205      	bcs.n	195e2 <uart_tx_wait+0x2c>
        MICROPY_EVENT_POLL_HOOK
   195d6:	f7f1 f883 	bl	a6e0 <mp_handle_pending>
   195da:	bf30      	wfi
        if (!(self->regs->FR & UART_FR_TXFF)) {
   195dc:	e7f1      	b.n	195c2 <uart_tx_wait+0xc>
            return true; // tx register is not full
   195de:	2001      	movs	r0, #1
}
   195e0:	bd70      	pop	{r4, r5, r6, pc}
            return false; // timeout
   195e2:	2000      	movs	r0, #0
   195e4:	e7fc      	b.n	195e0 <uart_tx_wait+0x2a>
	...

000195e8 <machine_uart_write>:
            return buf - orig_buf;
        }
    }
}

STATIC mp_uint_t machine_uart_write(mp_obj_t self_in, const void *buf_in, mp_uint_t size, int *errcode) {
   195e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    machine_uart_obj_t *self = self_in;
    const byte *buf = buf_in;

    // check that size is a multiple of character width
    if (size & LARGER_THAN_BYTE(self->char_width)) {
   195ea:	7dc4      	ldrb	r4, [r0, #23]
   195ec:	4d18      	ldr	r5, [pc, #96]	; (19650 <machine_uart_write+0x68>)
   195ee:	fba5 5404 	umull	r5, r4, r5, r4
   195f2:	ea12 0454 	ands.w	r4, r2, r4, lsr #1
   195f6:	d11e      	bne.n	19636 <machine_uart_write+0x4e>
   195f8:	461e      	mov	r6, r3
   195fa:	4615      	mov	r5, r2
   195fc:	460f      	mov	r7, r1
   195fe:	4604      	mov	r4, r0
        *errcode = MP_EIO;
        return MP_STREAM_ERROR;
    }

    // wait to be able to write the first character. EAGAIN causes write to return None
    if (!uart_tx_wait(self, self->timeout)) {
   19600:	8b41      	ldrh	r1, [r0, #26]
   19602:	f7ff ffd8 	bl	195b6 <uart_tx_wait>
   19606:	b1d8      	cbz	r0, 19640 <machine_uart_write+0x58>
        *errcode = MP_EAGAIN;
        return MP_STREAM_ERROR;
    }

    // write the data
    size_t num_tx = uart_tx_data(self, buf, size >> LARGER_THAN_BYTE(self->char_width), errcode);
   19608:	7de2      	ldrb	r2, [r4, #23]
   1960a:	4b11      	ldr	r3, [pc, #68]	; (19650 <machine_uart_write+0x68>)
   1960c:	fba3 3202 	umull	r3, r2, r3, r2
   19610:	0852      	lsrs	r2, r2, #1
   19612:	4633      	mov	r3, r6
   19614:	fa25 f202 	lsr.w	r2, r5, r2
   19618:	4639      	mov	r1, r7
   1961a:	4620      	mov	r0, r4
   1961c:	f7ff ff6d 	bl	194fa <uart_tx_data>

    if (*errcode == 0 || *errcode == MP_ETIMEDOUT) {
   19620:	6833      	ldr	r3, [r6, #0]
   19622:	b10b      	cbz	r3, 19628 <machine_uart_write+0x40>
   19624:	2b74      	cmp	r3, #116	; 0x74
   19626:	d110      	bne.n	1964a <machine_uart_write+0x62>
        // return number of bytes written, even if there was a timeout
        return num_tx << LARGER_THAN_BYTE(self->char_width);
   19628:	7de3      	ldrb	r3, [r4, #23]
   1962a:	4a09      	ldr	r2, [pc, #36]	; (19650 <machine_uart_write+0x68>)
   1962c:	fba2 2303 	umull	r2, r3, r2, r3
   19630:	085b      	lsrs	r3, r3, #1
   19632:	4098      	lsls	r0, r3
   19634:	e003      	b.n	1963e <machine_uart_write+0x56>
        *errcode = MP_EIO;
   19636:	2205      	movs	r2, #5
   19638:	601a      	str	r2, [r3, #0]
        return MP_STREAM_ERROR;
   1963a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    } else {
        return MP_STREAM_ERROR;
    }
}
   1963e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *errcode = MP_EAGAIN;
   19640:	230b      	movs	r3, #11
   19642:	6033      	str	r3, [r6, #0]
        return MP_STREAM_ERROR;
   19644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19648:	e7f9      	b.n	1963e <machine_uart_write+0x56>
        return MP_STREAM_ERROR;
   1964a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1964e:	e7f6      	b.n	1963e <machine_uart_write+0x56>
   19650:	38e38e39 	.word	0x38e38e39

00019654 <machine_uart_writechar>:
STATIC mp_obj_t machine_uart_writechar(mp_obj_t self_in, mp_obj_t char_in) {
   19654:	b510      	push	{r4, lr}
   19656:	b082      	sub	sp, #8
   19658:	4604      	mov	r4, r0
    uint16_t data = mp_obj_get_int(char_in);
   1965a:	4608      	mov	r0, r1
   1965c:	f7f1 fbb6 	bl	adcc <mp_obj_get_int>
   19660:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (uart_tx_wait(self, self->timeout)) {
   19664:	8b61      	ldrh	r1, [r4, #26]
   19666:	4620      	mov	r0, r4
   19668:	f7ff ffa5 	bl	195b6 <uart_tx_wait>
   1966c:	b930      	cbnz	r0, 1967c <machine_uart_writechar+0x28>
        errcode = MP_ETIMEDOUT;
   1966e:	2374      	movs	r3, #116	; 0x74
   19670:	9300      	str	r3, [sp, #0]
    if (errcode != 0) {
   19672:	9800      	ldr	r0, [sp, #0]
   19674:	b950      	cbnz	r0, 1968c <machine_uart_writechar+0x38>
}
   19676:	4806      	ldr	r0, [pc, #24]	; (19690 <machine_uart_writechar+0x3c>)
   19678:	b002      	add	sp, #8
   1967a:	bd10      	pop	{r4, pc}
        uart_tx_data(self, &data, 1, &errcode);
   1967c:	466b      	mov	r3, sp
   1967e:	2201      	movs	r2, #1
   19680:	f10d 0106 	add.w	r1, sp, #6
   19684:	4620      	mov	r0, r4
   19686:	f7ff ff38 	bl	194fa <uart_tx_data>
   1968a:	e7f2      	b.n	19672 <machine_uart_writechar+0x1e>
        mp_raise_OSError(errcode);
   1968c:	f7f1 f814 	bl	a6b8 <mp_raise_OSError>
   19690:	00027b40 	.word	0x00027b40

00019694 <uart_init2>:
STATIC bool uart_init2(machine_uart_obj_t *uart_obj) {
   19694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19698:	b085      	sub	sp, #20
    const pin_obj_t *pins[4] = {0};
   1969a:	2300      	movs	r3, #0
   1969c:	9302      	str	r3, [sp, #8]
   1969e:	9303      	str	r3, [sp, #12]
    switch (uart_obj->uart_id) {
   196a0:	f990 3014 	ldrsb.w	r3, [r0, #20]
   196a4:	2b07      	cmp	r3, #7
   196a6:	f200 8081 	bhi.w	197ac <uart_init2+0x118>
   196aa:	e8df f003 	tbb	[pc, r3]
   196ae:	7f04      	.short	0x7f04
   196b0:	32271c11 	.word	0x32271c11
   196b4:	483d      	.short	0x483d
            pins[0] = MICROPY_HW_UART0_TX;
   196b6:	4b3e      	ldr	r3, [pc, #248]	; (197b0 <uart_init2+0x11c>)
   196b8:	9300      	str	r3, [sp, #0]
            pins[1] = MICROPY_HW_UART0_RX;
   196ba:	4b3e      	ldr	r3, [pc, #248]	; (197b4 <uart_init2+0x120>)
   196bc:	9301      	str	r3, [sp, #4]
            uart_unit = 0;
   196be:	2600      	movs	r6, #0
            irqn = INT_UART0_TM4C123;
   196c0:	f04f 0915 	mov.w	r9, #21
            peripheral = SYSCTL_PERIPH_UART0;
   196c4:	4f3c      	ldr	r7, [pc, #240]	; (197b8 <uart_init2+0x124>)
            uart_base = UART0_BASE;
   196c6:	f8df 813c 	ldr.w	r8, [pc, #316]	; 19804 <uart_init2+0x170>
   196ca:	4604      	mov	r4, r0
    for (uint i = 0; i < 4; i++) {
   196cc:	2500      	movs	r5, #0
   196ce:	e042      	b.n	19756 <uart_init2+0xc2>
            pins[0] = MICROPY_HW_UART2_TX;
   196d0:	4b3a      	ldr	r3, [pc, #232]	; (197bc <uart_init2+0x128>)
   196d2:	9300      	str	r3, [sp, #0]
            pins[1] = MICROPY_HW_UART2_RX;
   196d4:	4b3a      	ldr	r3, [pc, #232]	; (197c0 <uart_init2+0x12c>)
   196d6:	9301      	str	r3, [sp, #4]
            uart_unit = 2;
   196d8:	2602      	movs	r6, #2
            irqn = INT_UART2_TM4C123;
   196da:	f04f 0931 	mov.w	r9, #49	; 0x31
            peripheral = SYSCTL_PERIPH_UART2;
   196de:	4f39      	ldr	r7, [pc, #228]	; (197c4 <uart_init2+0x130>)
            uart_base = UART2_BASE;
   196e0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 19808 <uart_init2+0x174>
            break;
   196e4:	e7f1      	b.n	196ca <uart_init2+0x36>
            pins[0] = MICROPY_HW_UART3_TX;
   196e6:	4b38      	ldr	r3, [pc, #224]	; (197c8 <uart_init2+0x134>)
   196e8:	9300      	str	r3, [sp, #0]
            pins[1] = MICROPY_HW_UART3_RX;
   196ea:	4b38      	ldr	r3, [pc, #224]	; (197cc <uart_init2+0x138>)
   196ec:	9301      	str	r3, [sp, #4]
            uart_unit = 3;
   196ee:	2603      	movs	r6, #3
            irqn = INT_UART3_TM4C123;
   196f0:	f04f 094b 	mov.w	r9, #75	; 0x4b
            peripheral = SYSCTL_PERIPH_UART3;
   196f4:	4f36      	ldr	r7, [pc, #216]	; (197d0 <uart_init2+0x13c>)
            uart_base = UART3_BASE;
   196f6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1980c <uart_init2+0x178>
            break;
   196fa:	e7e6      	b.n	196ca <uart_init2+0x36>
            pins[0] = MICROPY_HW_UART4_TX;
   196fc:	4b35      	ldr	r3, [pc, #212]	; (197d4 <uart_init2+0x140>)
   196fe:	9300      	str	r3, [sp, #0]
            pins[1] = MICROPY_HW_UART4_RX;
   19700:	4b35      	ldr	r3, [pc, #212]	; (197d8 <uart_init2+0x144>)
   19702:	9301      	str	r3, [sp, #4]
            uart_unit = 4;
   19704:	2604      	movs	r6, #4
            irqn = INT_UART4_TM4C123;
   19706:	f04f 094c 	mov.w	r9, #76	; 0x4c
            peripheral = SYSCTL_PERIPH_UART4;
   1970a:	4f34      	ldr	r7, [pc, #208]	; (197dc <uart_init2+0x148>)
            uart_base = UART4_BASE;
   1970c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 19810 <uart_init2+0x17c>
            break;
   19710:	e7db      	b.n	196ca <uart_init2+0x36>
            pins[0] = MICROPY_HW_UART5_TX;
   19712:	4b33      	ldr	r3, [pc, #204]	; (197e0 <uart_init2+0x14c>)
   19714:	9300      	str	r3, [sp, #0]
            pins[1] = MICROPY_HW_UART5_RX;
   19716:	4b33      	ldr	r3, [pc, #204]	; (197e4 <uart_init2+0x150>)
   19718:	9301      	str	r3, [sp, #4]
            uart_unit = 5;
   1971a:	2605      	movs	r6, #5
            irqn = INT_UART5_TM4C123;
   1971c:	f04f 094d 	mov.w	r9, #77	; 0x4d
            peripheral = SYSCTL_PERIPH_UART5;
   19720:	4f31      	ldr	r7, [pc, #196]	; (197e8 <uart_init2+0x154>)
            uart_base = UART5_BASE;
   19722:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 19814 <uart_init2+0x180>
            break;
   19726:	e7d0      	b.n	196ca <uart_init2+0x36>
            pins[0] = MICROPY_HW_UART6_TX;
   19728:	4b30      	ldr	r3, [pc, #192]	; (197ec <uart_init2+0x158>)
   1972a:	9300      	str	r3, [sp, #0]
            pins[1] = MICROPY_HW_UART6_RX;
   1972c:	4b30      	ldr	r3, [pc, #192]	; (197f0 <uart_init2+0x15c>)
   1972e:	9301      	str	r3, [sp, #4]
            uart_unit = 6;
   19730:	2606      	movs	r6, #6
            irqn = INT_UART6_TM4C123;
   19732:	f04f 094e 	mov.w	r9, #78	; 0x4e
            peripheral = SYSCTL_PERIPH_UART6;
   19736:	4f2f      	ldr	r7, [pc, #188]	; (197f4 <uart_init2+0x160>)
            uart_base = UART6_BASE;
   19738:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 19818 <uart_init2+0x184>
            break;
   1973c:	e7c5      	b.n	196ca <uart_init2+0x36>
            pins[0] = MICROPY_HW_UART7_TX;
   1973e:	4b2e      	ldr	r3, [pc, #184]	; (197f8 <uart_init2+0x164>)
   19740:	9300      	str	r3, [sp, #0]
            pins[1] = MICROPY_HW_UART7_RX;
   19742:	4b2e      	ldr	r3, [pc, #184]	; (197fc <uart_init2+0x168>)
   19744:	9301      	str	r3, [sp, #4]
            uart_unit = 7;
   19746:	2607      	movs	r6, #7
            irqn = INT_UART7_TM4C123;
   19748:	f04f 094f 	mov.w	r9, #79	; 0x4f
            peripheral = SYSCTL_PERIPH_UART7;
   1974c:	4f2c      	ldr	r7, [pc, #176]	; (19800 <uart_init2+0x16c>)
            uart_base = UART7_BASE;
   1974e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1981c <uart_init2+0x188>
            break;
   19752:	e7ba      	b.n	196ca <uart_init2+0x36>
    for (uint i = 0; i < 4; i++) {
   19754:	3501      	adds	r5, #1
   19756:	2d03      	cmp	r5, #3
   19758:	d80e      	bhi.n	19778 <uart_init2+0xe4>
        if (pins[i] != NULL) {
   1975a:	ab04      	add	r3, sp, #16
   1975c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   19760:	f853 0c10 	ldr.w	r0, [r3, #-16]
   19764:	2800      	cmp	r0, #0
   19766:	d0f5      	beq.n	19754 <uart_init2+0xc0>
            bool ret = mp_hal_pin_config_alt(pins[i], PIN_FN_UART, uart_unit);
   19768:	4632      	mov	r2, r6
   1976a:	2101      	movs	r1, #1
   1976c:	f7ff f909 	bl	18982 <mp_hal_pin_config_alt>
            if (!ret) {
   19770:	4603      	mov	r3, r0
   19772:	2800      	cmp	r0, #0
   19774:	d1ee      	bne.n	19754 <uart_init2+0xc0>
   19776:	e015      	b.n	197a4 <uart_init2+0x110>
    uart_obj->irqn = irqn;
   19778:	f8c4 9010 	str.w	r9, [r4, #16]
    uart_obj->uart = uart_base;
   1977c:	f8c4 8004 	str.w	r8, [r4, #4]
    uart_obj->periph = peripheral;
   19780:	60a7      	str	r7, [r4, #8]
    uart_obj->regs = ((periph_uart_t*) uart_base);
   19782:	f8c4 800c 	str.w	r8, [r4, #12]
    MAP_SysCtlPeripheralEnable(uart_obj->periph);
   19786:	4638      	mov	r0, r7
   19788:	f007 f9c4 	bl	20b14 <SysCtlPeripheralEnable>
    while(!MAP_SysCtlPeripheralReady(uart_obj->periph)) {};
   1978c:	68a0      	ldr	r0, [r4, #8]
   1978e:	f007 f9af 	bl	20af0 <SysCtlPeripheralReady>
   19792:	4603      	mov	r3, r0
   19794:	2800      	cmp	r0, #0
   19796:	d0f9      	beq.n	1978c <uart_init2+0xf8>
    uart_obj->is_enabled = true;
   19798:	7d62      	ldrb	r2, [r4, #21]
   1979a:	f042 0201 	orr.w	r2, r2, #1
   1979e:	7562      	strb	r2, [r4, #21]
    uart_obj->attached_to_repl = false;
   197a0:	2200      	movs	r2, #0
   197a2:	75a2      	strb	r2, [r4, #22]
}
   197a4:	4618      	mov	r0, r3
   197a6:	b005      	add	sp, #20
   197a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return false;
   197ac:	2300      	movs	r3, #0
   197ae:	e7f9      	b.n	197a4 <uart_init2+0x110>
   197b0:	0002c734 	.word	0x0002c734
   197b4:	0002c6dc 	.word	0x0002c6dc
   197b8:	f0001800 	.word	0xf0001800
   197bc:	0002d444 	.word	0x0002d444
   197c0:	0002d3cc 	.word	0x0002d3cc
   197c4:	f0001802 	.word	0xf0001802
   197c8:	0002d014 	.word	0x0002d014
   197cc:	0002cf9c 	.word	0x0002cf9c
   197d0:	f0001803 	.word	0xf0001803
   197d4:	0002cf14 	.word	0x0002cf14
   197d8:	0002ce6c 	.word	0x0002ce6c
   197dc:	f0001804 	.word	0xf0001804
   197e0:	0002d6a4 	.word	0x0002d6a4
   197e4:	0002d61c 	.word	0x0002d61c
   197e8:	f0001805 	.word	0xf0001805
   197ec:	0002d354 	.word	0x0002d354
   197f0:	0002d2ec 	.word	0x0002d2ec
   197f4:	f0001806 	.word	0xf0001806
   197f8:	0002d4f4 	.word	0x0002d4f4
   197fc:	0002d49c 	.word	0x0002d49c
   19800:	f0001807 	.word	0xf0001807
   19804:	4000c000 	.word	0x4000c000
   19808:	4000e000 	.word	0x4000e000
   1980c:	4000f000 	.word	0x4000f000
   19810:	40010000 	.word	0x40010000
   19814:	40011000 	.word	0x40011000
   19818:	40012000 	.word	0x40012000
   1981c:	40013000 	.word	0x40013000

00019820 <machine_uart_init_helper>:
STATIC mp_obj_t machine_uart_init_helper(machine_uart_obj_t *self, size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   19820:	b5f0      	push	{r4, r5, r6, r7, lr}
   19822:	b08d      	sub	sp, #52	; 0x34
   19824:	4604      	mov	r4, r0
   19826:	4608      	mov	r0, r1
   19828:	4611      	mov	r1, r2
   1982a:	461a      	mov	r2, r3
    mp_arg_parse_all(n_args, pos_args, kw_args,
   1982c:	ab04      	add	r3, sp, #16
   1982e:	9301      	str	r3, [sp, #4]
   19830:	4b62      	ldr	r3, [pc, #392]	; (199bc <machine_uart_init_helper+0x19c>)
   19832:	9300      	str	r3, [sp, #0]
   19834:	2308      	movs	r3, #8
   19836:	f7f0 ffa1 	bl	a77c <mp_arg_parse_all>
    memset(&self->uart, 0, sizeof(self->uart));
   1983a:	2300      	movs	r3, #0
   1983c:	6063      	str	r3, [r4, #4]
    mp_int_t bits = args.bits.u_int;
   1983e:	9d05      	ldr	r5, [sp, #20]
    if (args.parity.u_obj == mp_const_none) {
   19840:	9806      	ldr	r0, [sp, #24]
   19842:	4b5f      	ldr	r3, [pc, #380]	; (199c0 <machine_uart_init_helper+0x1a0>)
   19844:	4298      	cmp	r0, r3
   19846:	d006      	beq.n	19856 <machine_uart_init_helper+0x36>
        mp_int_t parity = mp_obj_get_int(args.parity.u_obj);
   19848:	f7f1 fac0 	bl	adcc <mp_obj_get_int>
        config |= (parity & 1) ? UART_CONFIG_PAR_ODD : UART_CONFIG_PAR_EVEN;
   1984c:	f010 0f01 	tst.w	r0, #1
   19850:	d011      	beq.n	19876 <machine_uart_init_helper+0x56>
   19852:	2602      	movs	r6, #2
   19854:	e000      	b.n	19858 <machine_uart_init_helper+0x38>
        config |= UART_CONFIG_PAR_NONE;
   19856:	2600      	movs	r6, #0
    if (bits == 5) {
   19858:	2d05      	cmp	r5, #5
   1985a:	d00e      	beq.n	1987a <machine_uart_init_helper+0x5a>
    } else if ( bits == 6) {
   1985c:	2d06      	cmp	r5, #6
   1985e:	d07f      	beq.n	19960 <machine_uart_init_helper+0x140>
    } else if ( bits == 7) {
   19860:	2d07      	cmp	r5, #7
   19862:	f000 8082 	beq.w	1996a <machine_uart_init_helper+0x14a>
    } else if ( bits == 8) {
   19866:	2d08      	cmp	r5, #8
   19868:	f040 8084 	bne.w	19974 <machine_uart_init_helper+0x154>
        config |= UART_CONFIG_WLEN_8;
   1986c:	f046 0660 	orr.w	r6, r6, #96	; 0x60
        self->char_width = CHAR_WIDTH_8BIT;
   19870:	2308      	movs	r3, #8
   19872:	75e3      	strb	r3, [r4, #23]
   19874:	e003      	b.n	1987e <machine_uart_init_helper+0x5e>
        config |= (parity & 1) ? UART_CONFIG_PAR_ODD : UART_CONFIG_PAR_EVEN;
   19876:	2606      	movs	r6, #6
   19878:	e7ee      	b.n	19858 <machine_uart_init_helper+0x38>
        self->char_width = CHAR_WIDTH_5BIT;
   1987a:	2305      	movs	r3, #5
   1987c:	75e3      	strb	r3, [r4, #23]
    self->char_mask = ~(0xFF << self->char_width);
   1987e:	7de2      	ldrb	r2, [r4, #23]
   19880:	23ff      	movs	r3, #255	; 0xff
   19882:	4093      	lsls	r3, r2
   19884:	43db      	mvns	r3, r3
   19886:	8323      	strh	r3, [r4, #24]
    switch (args.stop.u_int) {
   19888:	9b07      	ldr	r3, [sp, #28]
   1988a:	2b01      	cmp	r3, #1
   1988c:	d001      	beq.n	19892 <machine_uart_init_helper+0x72>
        default: config |= UART_CONFIG_STOP_TWO; break;
   1988e:	f046 0608 	orr.w	r6, r6, #8
    mp_uint_t req_baudrate = args.baudrate.u_int;
   19892:	9d04      	ldr	r5, [sp, #16]
    if (!uart_init2(self)) {
   19894:	4620      	mov	r0, r4
   19896:	f7ff fefd 	bl	19694 <uart_init2>
   1989a:	2800      	cmp	r0, #0
   1989c:	d06d      	beq.n	1997a <machine_uart_init_helper+0x15a>
    MAP_UARTDisable(self->uart);
   1989e:	6860      	ldr	r0, [r4, #4]
   198a0:	f007 fa92 	bl	20dc8 <UARTDisable>
    MAP_UART9BitDisable(self->uart);
   198a4:	6860      	ldr	r0, [r4, #4]
   198a6:	f007 fae7 	bl	20e78 <UART9BitDisable>
    MAP_UARTConfigSetExpClk(self->uart, SysCtlClockGet(), req_baudrate, config);
   198aa:	6867      	ldr	r7, [r4, #4]
   198ac:	f007 f98e 	bl	20bcc <SysCtlClockGet>
   198b0:	4633      	mov	r3, r6
   198b2:	462a      	mov	r2, r5
   198b4:	4601      	mov	r1, r0
   198b6:	4638      	mov	r0, r7
   198b8:	f007 fa94 	bl	20de4 <UARTConfigSetExpClk>
    self->timeout = args.timeout.u_int;
   198bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   198c0:	8362      	strh	r2, [r4, #26]
    self->timeout_char = args.timeout_char.u_int;
   198c2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   198c6:	83a1      	strh	r1, [r4, #28]
    uint32_t min_timeout_char = 13000 / args.baudrate.u_int + 2;
   198c8:	9804      	ldr	r0, [sp, #16]
   198ca:	f243 23c8 	movw	r3, #13000	; 0x32c8
   198ce:	fb93 f3f0 	sdiv	r3, r3, r0
   198d2:	3302      	adds	r3, #2
    if (self->timeout_char < min_timeout_char) {
   198d4:	4299      	cmp	r1, r3
   198d6:	d200      	bcs.n	198da <machine_uart_init_helper+0xba>
        self->timeout_char = min_timeout_char;
   198d8:	83a3      	strh	r3, [r4, #28]
    if(self->timeout < self->timeout_char) {
   198da:	8ba3      	ldrh	r3, [r4, #28]
   198dc:	429a      	cmp	r2, r3
   198de:	d200      	bcs.n	198e2 <machine_uart_init_helper+0xc2>
        self->timeout = self->timeout_char;
   198e0:	8363      	strh	r3, [r4, #26]
    m_del(byte, self->read_buf, self->read_buf_len << LARGER_THAN_BYTE(self->char_width));
   198e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   198e4:	f7e7 f813 	bl	90e <m_free>
    self->read_buf_head = 0;
   198e8:	2300      	movs	r3, #0
   198ea:	8423      	strh	r3, [r4, #32]
    self->read_buf_tail = 0;
   198ec:	8463      	strh	r3, [r4, #34]	; 0x22
    if (args.read_buf_len.u_int <= 0) {
   198ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
   198f0:	4298      	cmp	r0, r3
   198f2:	dd4a      	ble.n	1998a <machine_uart_init_helper+0x16a>
        self->read_buf_len = args.read_buf_len.u_int + 1; // +1 to adjust for usable length of buffer
   198f4:	3001      	adds	r0, #1
   198f6:	b280      	uxth	r0, r0
   198f8:	83e0      	strh	r0, [r4, #30]
        self->read_buf = m_new(byte,  self->read_buf_len << LARGER_THAN_BYTE(self->char_width));
   198fa:	7de3      	ldrb	r3, [r4, #23]
   198fc:	4a31      	ldr	r2, [pc, #196]	; (199c4 <machine_uart_init_helper+0x1a4>)
   198fe:	fba2 2303 	umull	r2, r3, r2, r3
   19902:	085b      	lsrs	r3, r3, #1
   19904:	4098      	lsls	r0, r3
   19906:	f7e6 ffd9 	bl	8bc <m_malloc>
   1990a:	6260      	str	r0, [r4, #36]	; 0x24
        MAP_UARTIntEnable(self->uart, UART_INT_RX);
   1990c:	2110      	movs	r1, #16
   1990e:	6860      	ldr	r0, [r4, #4]
   19910:	f007 faa3 	bl	20e5a <UARTIntEnable>
        MAP_IntPrioritySet(self->irqn, 0xE0); //lowest
   19914:	21e0      	movs	r1, #224	; 0xe0
   19916:	6920      	ldr	r0, [r4, #16]
   19918:	f007 f85e 	bl	209d8 <IntPrioritySet>
        MAP_SysCtlIntEnable(self->irqn);
   1991c:	6920      	ldr	r0, [r4, #16]
   1991e:	f007 f919 	bl	20b54 <SysCtlIntEnable>
    uint32_t actual_baudrate = 0;
   19922:	2300      	movs	r3, #0
   19924:	9303      	str	r3, [sp, #12]
    clk = MAP_UARTClockSourceGet(self->uart);
   19926:	6860      	ldr	r0, [r4, #4]
   19928:	f007 faa3 	bl	20e72 <UARTClockSourceGet>
    if(clk == UART_CLOCK_SYSTEM) {
   1992c:	2800      	cmp	r0, #0
   1992e:	d136      	bne.n	1999e <machine_uart_init_helper+0x17e>
        MAP_UARTConfigGetExpClk(self->uart, SysCtlClockGet(), &actual_baudrate, &co);
   19930:	6866      	ldr	r6, [r4, #4]
   19932:	f007 f94b 	bl	20bcc <SysCtlClockGet>
   19936:	ab02      	add	r3, sp, #8
   19938:	aa03      	add	r2, sp, #12
   1993a:	4601      	mov	r1, r0
   1993c:	4630      	mov	r0, r6
   1993e:	f007 fa25 	bl	20d8c <UARTConfigGetExpClk>
    if (actual_baudrate > req_baudrate) {
   19942:	9a03      	ldr	r2, [sp, #12]
   19944:	42aa      	cmp	r2, r5
   19946:	d931      	bls.n	199ac <machine_uart_init_helper+0x18c>
        baudrate_diff = actual_baudrate - req_baudrate;
   19948:	1b53      	subs	r3, r2, r5
    if (20 * baudrate_diff > req_baudrate) {
   1994a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1994e:	0099      	lsls	r1, r3, #2
   19950:	42a9      	cmp	r1, r5
   19952:	d82d      	bhi.n	199b0 <machine_uart_init_helper+0x190>
    MAP_UARTEnable(self->uart);
   19954:	6860      	ldr	r0, [r4, #4]
   19956:	f007 fa2c 	bl	20db2 <UARTEnable>
}
   1995a:	4819      	ldr	r0, [pc, #100]	; (199c0 <machine_uart_init_helper+0x1a0>)
   1995c:	b00d      	add	sp, #52	; 0x34
   1995e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        config |= UART_CONFIG_WLEN_6;
   19960:	f046 0620 	orr.w	r6, r6, #32
        self->char_width = CHAR_WIDTH_6BIT;
   19964:	2306      	movs	r3, #6
   19966:	75e3      	strb	r3, [r4, #23]
   19968:	e789      	b.n	1987e <machine_uart_init_helper+0x5e>
        config |= UART_CONFIG_WLEN_7;
   1996a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
        self->char_width = CHAR_WIDTH_7BIT;
   1996e:	2307      	movs	r3, #7
   19970:	75e3      	strb	r3, [r4, #23]
   19972:	e784      	b.n	1987e <machine_uart_init_helper+0x5e>
        mp_raise_ValueError("unsupported combination of bits and parity");
   19974:	4814      	ldr	r0, [pc, #80]	; (199c8 <machine_uart_init_helper+0x1a8>)
   19976:	f7f0 fc97 	bl	a2a8 <mp_raise_ValueError>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_RuntimeError, "UART(%d) init failed!", self->uart_id));
   1997a:	f994 2014 	ldrsb.w	r2, [r4, #20]
   1997e:	4913      	ldr	r1, [pc, #76]	; (199cc <machine_uart_init_helper+0x1ac>)
   19980:	4813      	ldr	r0, [pc, #76]	; (199d0 <machine_uart_init_helper+0x1b0>)
   19982:	f7f3 f8a3 	bl	cacc <mp_obj_new_exception_msg_varg>
   19986:	f7e6 ff7b 	bl	880 <nlr_jump>
        self->read_buf_len = 0;
   1998a:	83e3      	strh	r3, [r4, #30]
        self->read_buf = NULL;
   1998c:	6263      	str	r3, [r4, #36]	; 0x24
        MAP_SysCtlIntDisable(self->irqn);
   1998e:	6920      	ldr	r0, [r4, #16]
   19990:	f007 f8e8 	bl	20b64 <SysCtlIntDisable>
        MAP_UARTIntDisable(self->uart, UART_INT_RX);
   19994:	2110      	movs	r1, #16
   19996:	6860      	ldr	r0, [r4, #4]
   19998:	f007 fa63 	bl	20e62 <UARTIntDisable>
   1999c:	e7c1      	b.n	19922 <machine_uart_init_helper+0x102>
        MAP_UARTConfigGetExpClk(self->uart, 16000000U, &actual_baudrate, &co);
   1999e:	ab02      	add	r3, sp, #8
   199a0:	aa03      	add	r2, sp, #12
   199a2:	490c      	ldr	r1, [pc, #48]	; (199d4 <machine_uart_init_helper+0x1b4>)
   199a4:	6860      	ldr	r0, [r4, #4]
   199a6:	f007 f9f1 	bl	20d8c <UARTConfigGetExpClk>
   199aa:	e7ca      	b.n	19942 <machine_uart_init_helper+0x122>
        baudrate_diff = req_baudrate - actual_baudrate;
   199ac:	1aab      	subs	r3, r5, r2
   199ae:	e7cc      	b.n	1994a <machine_uart_init_helper+0x12a>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "set baudrate %d is not within 5%% of desired value", actual_baudrate));
   199b0:	4909      	ldr	r1, [pc, #36]	; (199d8 <machine_uart_init_helper+0x1b8>)
   199b2:	480a      	ldr	r0, [pc, #40]	; (199dc <machine_uart_init_helper+0x1bc>)
   199b4:	f7f3 f88a 	bl	cacc <mp_obj_new_exception_msg_varg>
   199b8:	f7e6 ff62 	bl	880 <nlr_jump>
   199bc:	0002b258 	.word	0x0002b258
   199c0:	00027b40 	.word	0x00027b40
   199c4:	38e38e39 	.word	0x38e38e39
   199c8:	0002b2a8 	.word	0x0002b2a8
   199cc:	0002b2d4 	.word	0x0002b2d4
   199d0:	00026b94 	.word	0x00026b94
   199d4:	00f42400 	.word	0x00f42400
   199d8:	0002b2ec 	.word	0x0002b2ec
   199dc:	00026cc0 	.word	0x00026cc0

000199e0 <machine_uart_init>:
STATIC mp_obj_t machine_uart_init(size_t n_args, const mp_obj_t *args, mp_map_t *kw_args) {
   199e0:	b510      	push	{r4, lr}
   199e2:	460c      	mov	r4, r1
    return machine_uart_init_helper(args[0], n_args - 1, args + 1, kw_args);
   199e4:	4613      	mov	r3, r2
   199e6:	1d0a      	adds	r2, r1, #4
   199e8:	1e41      	subs	r1, r0, #1
   199ea:	6820      	ldr	r0, [r4, #0]
   199ec:	f7ff ff18 	bl	19820 <machine_uart_init_helper>
}
   199f0:	bd10      	pop	{r4, pc}
	...

000199f4 <machine_uart_make_new>:
STATIC mp_obj_t machine_uart_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   199f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   199f8:	b087      	sub	sp, #28
   199fa:	460c      	mov	r4, r1
   199fc:	4617      	mov	r7, r2
   199fe:	461e      	mov	r6, r3
    mp_arg_check_num(n_args, n_kw, 1, MP_OBJ_FUN_ARGS_MAX, true);
   19a00:	2201      	movs	r2, #1
   19a02:	9200      	str	r2, [sp, #0]
   19a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19a08:	4639      	mov	r1, r7
   19a0a:	4620      	mov	r0, r4
   19a0c:	f7f0 fe84 	bl	a718 <mp_arg_check_num>
    if (MP_OBJ_IS_STR(args[0])) {
   19a10:	6830      	ldr	r0, [r6, #0]
    { return ((((mp_int_t)(o)) & 3) == 2); }
   19a12:	f000 0303 	and.w	r3, r0, #3
   19a16:	2b02      	cmp	r3, #2
   19a18:	d025      	beq.n	19a66 <machine_uart_make_new+0x72>
   19a1a:	b91b      	cbnz	r3, 19a24 <machine_uart_make_new+0x30>
   19a1c:	6802      	ldr	r2, [r0, #0]
   19a1e:	4b39      	ldr	r3, [pc, #228]	; (19b04 <machine_uart_make_new+0x110>)
   19a20:	429a      	cmp	r2, r3
   19a22:	d020      	beq.n	19a66 <machine_uart_make_new+0x72>
        uart_id = mp_obj_get_int(args[0]);
   19a24:	f7f1 f9d2 	bl	adcc <mp_obj_get_int>
   19a28:	4680      	mov	r8, r0
        if (!uart_exists(uart_id)) {
   19a2a:	f7ff fd17 	bl	1945c <uart_exists>
   19a2e:	2800      	cmp	r0, #0
   19a30:	d043      	beq.n	19aba <machine_uart_make_new+0xc6>
    if (MP_STATE_PORT(machine_uart_obj_all)[uart_id - 1] == NULL) {
   19a32:	f108 037b 	add.w	r3, r8, #123	; 0x7b
   19a36:	4a34      	ldr	r2, [pc, #208]	; (19b08 <machine_uart_make_new+0x114>)
   19a38:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   19a3c:	2d00      	cmp	r5, #0
   19a3e:	d052      	beq.n	19ae6 <machine_uart_make_new+0xf2>
    if (n_args > 1 || n_kw > 0) {
   19a40:	2c01      	cmp	r4, #1
   19a42:	d800      	bhi.n	19a46 <machine_uart_make_new+0x52>
   19a44:	b15f      	cbz	r7, 19a5e <machine_uart_make_new+0x6a>
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
   19a46:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   19a4a:	4639      	mov	r1, r7
   19a4c:	a803      	add	r0, sp, #12
   19a4e:	f7f0 ff50 	bl	a8f2 <mp_map_init_fixed_table>
        machine_uart_init_helper(self, n_args - 1, args + 1, &kw_args);
   19a52:	ab03      	add	r3, sp, #12
   19a54:	1d32      	adds	r2, r6, #4
   19a56:	1e61      	subs	r1, r4, #1
   19a58:	4628      	mov	r0, r5
   19a5a:	f7ff fee1 	bl	19820 <machine_uart_init_helper>
}
   19a5e:	4628      	mov	r0, r5
   19a60:	b007      	add	sp, #28
   19a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        const char *port = mp_obj_str_get_str(args[0]);
   19a66:	f7f6 fbf1 	bl	1024c <mp_obj_str_get_str>
   19a6a:	4605      	mov	r5, r0
        } else if (strcmp(port, MICROPY_HW_UART1_NAME) == 0) {
   19a6c:	4927      	ldr	r1, [pc, #156]	; (19b0c <machine_uart_make_new+0x118>)
   19a6e:	f001 ff63 	bl	1b938 <strcmp>
   19a72:	b348      	cbz	r0, 19ac8 <machine_uart_make_new+0xd4>
        } else if (strcmp(port, MICROPY_HW_UART2_NAME) == 0) {
   19a74:	4926      	ldr	r1, [pc, #152]	; (19b10 <machine_uart_make_new+0x11c>)
   19a76:	4628      	mov	r0, r5
   19a78:	f001 ff5e 	bl	1b938 <strcmp>
   19a7c:	b338      	cbz	r0, 19ace <machine_uart_make_new+0xda>
        } else if (strcmp(port, MICROPY_HW_UART3_NAME) == 0) {
   19a7e:	4925      	ldr	r1, [pc, #148]	; (19b14 <machine_uart_make_new+0x120>)
   19a80:	4628      	mov	r0, r5
   19a82:	f001 ff59 	bl	1b938 <strcmp>
   19a86:	b328      	cbz	r0, 19ad4 <machine_uart_make_new+0xe0>
        } else if (strcmp(port, MICROPY_HW_UART4_NAME) == 0) {
   19a88:	4923      	ldr	r1, [pc, #140]	; (19b18 <machine_uart_make_new+0x124>)
   19a8a:	4628      	mov	r0, r5
   19a8c:	f001 ff54 	bl	1b938 <strcmp>
   19a90:	b318      	cbz	r0, 19ada <machine_uart_make_new+0xe6>
        } else if (strcmp(port, MICROPY_HW_UART5_NAME) == 0) {
   19a92:	4922      	ldr	r1, [pc, #136]	; (19b1c <machine_uart_make_new+0x128>)
   19a94:	4628      	mov	r0, r5
   19a96:	f001 ff4f 	bl	1b938 <strcmp>
   19a9a:	b308      	cbz	r0, 19ae0 <machine_uart_make_new+0xec>
        } else if (strcmp(port, MICROPY_HW_UART6_NAME) == 0) {
   19a9c:	4920      	ldr	r1, [pc, #128]	; (19b20 <machine_uart_make_new+0x12c>)
   19a9e:	4628      	mov	r0, r5
   19aa0:	f001 ff4a 	bl	1b938 <strcmp>
   19aa4:	b910      	cbnz	r0, 19aac <machine_uart_make_new+0xb8>
            uart_id = UART_6;
   19aa6:	f04f 0806 	mov.w	r8, #6
   19aaa:	e7c2      	b.n	19a32 <machine_uart_make_new+0x3e>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "UART(%s) doesn't exist", port));
   19aac:	462a      	mov	r2, r5
   19aae:	491d      	ldr	r1, [pc, #116]	; (19b24 <machine_uart_make_new+0x130>)
   19ab0:	481d      	ldr	r0, [pc, #116]	; (19b28 <machine_uart_make_new+0x134>)
   19ab2:	f7f3 f80b 	bl	cacc <mp_obj_new_exception_msg_varg>
   19ab6:	f7e6 fee3 	bl	880 <nlr_jump>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "UART(%d) doesn't exist", uart_id));
   19aba:	4642      	mov	r2, r8
   19abc:	491b      	ldr	r1, [pc, #108]	; (19b2c <machine_uart_make_new+0x138>)
   19abe:	481a      	ldr	r0, [pc, #104]	; (19b28 <machine_uart_make_new+0x134>)
   19ac0:	f7f3 f804 	bl	cacc <mp_obj_new_exception_msg_varg>
   19ac4:	f7e6 fedc 	bl	880 <nlr_jump>
            uart_id = UART_1;
   19ac8:	f04f 0801 	mov.w	r8, #1
   19acc:	e7b1      	b.n	19a32 <machine_uart_make_new+0x3e>
            uart_id = UART_2;
   19ace:	f04f 0802 	mov.w	r8, #2
   19ad2:	e7ae      	b.n	19a32 <machine_uart_make_new+0x3e>
            uart_id = UART_3;
   19ad4:	f04f 0803 	mov.w	r8, #3
   19ad8:	e7ab      	b.n	19a32 <machine_uart_make_new+0x3e>
            uart_id = UART_4;
   19ada:	f04f 0804 	mov.w	r8, #4
   19ade:	e7a8      	b.n	19a32 <machine_uart_make_new+0x3e>
            uart_id = UART_5;
   19ae0:	f04f 0805 	mov.w	r8, #5
   19ae4:	e7a5      	b.n	19a32 <machine_uart_make_new+0x3e>
        self = m_new0(machine_uart_obj_t, 1);
   19ae6:	2028      	movs	r0, #40	; 0x28
   19ae8:	f7e6 fefb 	bl	8e2 <m_malloc0>
   19aec:	4605      	mov	r5, r0
        self->base.type = &machine_uart_type;
   19aee:	4b10      	ldr	r3, [pc, #64]	; (19b30 <machine_uart_make_new+0x13c>)
   19af0:	6003      	str	r3, [r0, #0]
        self->uart_id = uart_id;
   19af2:	f880 8014 	strb.w	r8, [r0, #20]
        MP_STATE_PORT(machine_uart_obj_all)[uart_id - 1] = self;
   19af6:	f108 097b 	add.w	r9, r8, #123	; 0x7b
   19afa:	4b03      	ldr	r3, [pc, #12]	; (19b08 <machine_uart_make_new+0x114>)
   19afc:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
   19b00:	e79e      	b.n	19a40 <machine_uart_make_new+0x4c>
   19b02:	bf00      	nop
   19b04:	00028104 	.word	0x00028104
   19b08:	200008a0 	.word	0x200008a0
   19b0c:	00021cec 	.word	0x00021cec
   19b10:	000225f8 	.word	0x000225f8
   19b14:	00021cfc 	.word	0x00021cfc
   19b18:	0002bcd8 	.word	0x0002bcd8
   19b1c:	00021d0c 	.word	0x00021d0c
   19b20:	0002bcd0 	.word	0x0002bcd0
   19b24:	0002b3b4 	.word	0x0002b3b4
   19b28:	00026cc0 	.word	0x00026cc0
   19b2c:	0002b3cc 	.word	0x0002b3cc
   19b30:	0002b494 	.word	0x0002b494

00019b34 <machine_uart_print>:
STATIC void machine_uart_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   19b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b36:	b085      	sub	sp, #20
   19b38:	4605      	mov	r5, r0
   19b3a:	460c      	mov	r4, r1
    if (!self->is_enabled) {
   19b3c:	7d4b      	ldrb	r3, [r1, #21]
   19b3e:	f013 0f01 	tst.w	r3, #1
   19b42:	d045      	beq.n	19bd0 <machine_uart_print+0x9c>
        if (self->regs->_9BITADDR & UART_9BITADDR_9BITEN){
   19b44:	68cb      	ldr	r3, [r1, #12]
   19b46:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   19b4a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
   19b4e:	d145      	bne.n	19bdc <machine_uart_print+0xa8>
            bits = 5 + ((self->regs->LCRH & UART_LCRH_WLEN_8) >> 5);
   19b50:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   19b52:	f3c6 1641 	ubfx	r6, r6, #5, #2
   19b56:	3605      	adds	r6, #5
            self->uart_id, (MAP_SysCtlClockGet() * 4) / ((64 * self->regs->IBRD) + self->regs->IBRD), bits);
   19b58:	f994 7014 	ldrsb.w	r7, [r4, #20]
   19b5c:	f007 f836 	bl	20bcc <SysCtlClockGet>
   19b60:	0080      	lsls	r0, r0, #2
   19b62:	68e2      	ldr	r2, [r4, #12]
   19b64:	6a53      	ldr	r3, [r2, #36]	; 0x24
   19b66:	6a52      	ldr	r2, [r2, #36]	; 0x24
   19b68:	eb02 1383 	add.w	r3, r2, r3, lsl #6
        mp_printf(print, "UART(%u, baudrate=%u, bits=%u, parity=",
   19b6c:	9600      	str	r6, [sp, #0]
   19b6e:	fbb0 f3f3 	udiv	r3, r0, r3
   19b72:	463a      	mov	r2, r7
   19b74:	492f      	ldr	r1, [pc, #188]	; (19c34 <machine_uart_print+0x100>)
   19b76:	4628      	mov	r0, r5
   19b78:	f7e8 fa78 	bl	206c <mp_printf>
        if (!(self->regs->LCRH & UART_LCRH_PEN)) {
   19b7c:	68e3      	ldr	r3, [r4, #12]
   19b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19b80:	f012 0f02 	tst.w	r2, #2
   19b84:	d02c      	beq.n	19be0 <machine_uart_print+0xac>
            mp_printf(print, self->regs->LCRH & UART_LCRH_EPS ? "odd" : "even");
   19b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19b88:	f013 0f04 	tst.w	r3, #4
   19b8c:	d02d      	beq.n	19bea <machine_uart_print+0xb6>
   19b8e:	492a      	ldr	r1, [pc, #168]	; (19c38 <machine_uart_print+0x104>)
   19b90:	4628      	mov	r0, r5
   19b92:	f7e8 fa6b 	bl	206c <mp_printf>
        if (self->regs->CTL & (UART_CTL_CTSEN | UART_CTL_RTSEN)) {
   19b96:	68e3      	ldr	r3, [r4, #12]
   19b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19b9a:	f413 4f40 	tst.w	r3, #49152	; 0xc000
   19b9e:	d126      	bne.n	19bee <machine_uart_print+0xba>
            self->regs->LCRH & UART_LCRH_STP2 ? 2 : 1,
   19ba0:	68e3      	ldr	r3, [r4, #12]
   19ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        mp_printf(print, ", stop=%u, break=%u, timeout=%u, timeout_char=%u, read_buf_len=%u)",
   19ba4:	f012 0f08 	tst.w	r2, #8
   19ba8:	d03f      	beq.n	19c2a <machine_uart_print+0xf6>
   19baa:	2202      	movs	r2, #2
            self->regs->LCRH & UART_LCRH_BRK,
   19bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        mp_printf(print, ", stop=%u, break=%u, timeout=%u, timeout_char=%u, read_buf_len=%u)",
   19bae:	f003 0301 	and.w	r3, r3, #1
            self->timeout, self->timeout_char,
   19bb2:	8b60      	ldrh	r0, [r4, #26]
   19bb4:	8ba6      	ldrh	r6, [r4, #28]
            self->read_buf_len == 0 ? 0 : self->read_buf_len - 1); // -1 to adjust for usable length of buffer
   19bb6:	8be1      	ldrh	r1, [r4, #30]
        mp_printf(print, ", stop=%u, break=%u, timeout=%u, timeout_char=%u, read_buf_len=%u)",
   19bb8:	2900      	cmp	r1, #0
   19bba:	d038      	beq.n	19c2e <machine_uart_print+0xfa>
   19bbc:	3901      	subs	r1, #1
   19bbe:	9102      	str	r1, [sp, #8]
   19bc0:	9601      	str	r6, [sp, #4]
   19bc2:	9000      	str	r0, [sp, #0]
   19bc4:	491d      	ldr	r1, [pc, #116]	; (19c3c <machine_uart_print+0x108>)
   19bc6:	4628      	mov	r0, r5
   19bc8:	f7e8 fa50 	bl	206c <mp_printf>
}
   19bcc:	b005      	add	sp, #20
   19bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mp_printf(print, "UART(%u)", self->uart_id);
   19bd0:	f991 2014 	ldrsb.w	r2, [r1, #20]
   19bd4:	491a      	ldr	r1, [pc, #104]	; (19c40 <machine_uart_print+0x10c>)
   19bd6:	f7e8 fa49 	bl	206c <mp_printf>
   19bda:	e7f7      	b.n	19bcc <machine_uart_print+0x98>
            bits = 9;
   19bdc:	2609      	movs	r6, #9
   19bde:	e7bb      	b.n	19b58 <machine_uart_print+0x24>
            mp_print_str(print, "None");
   19be0:	4918      	ldr	r1, [pc, #96]	; (19c44 <machine_uart_print+0x110>)
   19be2:	4628      	mov	r0, r5
   19be4:	f7e7 feab 	bl	193e <mp_print_str>
   19be8:	e7d5      	b.n	19b96 <machine_uart_print+0x62>
            mp_printf(print, self->regs->LCRH & UART_LCRH_EPS ? "odd" : "even");
   19bea:	4917      	ldr	r1, [pc, #92]	; (19c48 <machine_uart_print+0x114>)
   19bec:	e7d0      	b.n	19b90 <machine_uart_print+0x5c>
            mp_printf(print, ", flow=");
   19bee:	4917      	ldr	r1, [pc, #92]	; (19c4c <machine_uart_print+0x118>)
   19bf0:	4628      	mov	r0, r5
   19bf2:	f7e8 fa3b 	bl	206c <mp_printf>
            if (self->regs->CTL & UART_CTL_RTSEN) {
   19bf6:	68e3      	ldr	r3, [r4, #12]
   19bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   19bfa:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   19bfe:	d008      	beq.n	19c12 <machine_uart_print+0xde>
                mp_printf(print, "RTS%s", self->regs->CTL & UART_CTL_CTSEN ? "|" : "");
   19c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19c02:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   19c06:	d00e      	beq.n	19c26 <machine_uart_print+0xf2>
   19c08:	4a11      	ldr	r2, [pc, #68]	; (19c50 <machine_uart_print+0x11c>)
   19c0a:	4912      	ldr	r1, [pc, #72]	; (19c54 <machine_uart_print+0x120>)
   19c0c:	4628      	mov	r0, r5
   19c0e:	f7e8 fa2d 	bl	206c <mp_printf>
            if (self->regs->CTL & UART_CTL_CTSEN ) {
   19c12:	68e3      	ldr	r3, [r4, #12]
   19c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19c16:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   19c1a:	d0c1      	beq.n	19ba0 <machine_uart_print+0x6c>
                mp_printf(print, "CTS");
   19c1c:	490e      	ldr	r1, [pc, #56]	; (19c58 <machine_uart_print+0x124>)
   19c1e:	4628      	mov	r0, r5
   19c20:	f7e8 fa24 	bl	206c <mp_printf>
   19c24:	e7bc      	b.n	19ba0 <machine_uart_print+0x6c>
                mp_printf(print, "RTS%s", self->regs->CTL & UART_CTL_CTSEN ? "|" : "");
   19c26:	4a0d      	ldr	r2, [pc, #52]	; (19c5c <machine_uart_print+0x128>)
   19c28:	e7ef      	b.n	19c0a <machine_uart_print+0xd6>
        mp_printf(print, ", stop=%u, break=%u, timeout=%u, timeout_char=%u, read_buf_len=%u)",
   19c2a:	2201      	movs	r2, #1
   19c2c:	e7be      	b.n	19bac <machine_uart_print+0x78>
   19c2e:	2100      	movs	r1, #0
   19c30:	e7c5      	b.n	19bbe <machine_uart_print+0x8a>
   19c32:	bf00      	nop
   19c34:	0002b400 	.word	0x0002b400
   19c38:	0002b3e4 	.word	0x0002b3e4
   19c3c:	0002b438 	.word	0x0002b438
   19c40:	0002b3f4 	.word	0x0002b3f4
   19c44:	000238f0 	.word	0x000238f0
   19c48:	0002b3e8 	.word	0x0002b3e8
   19c4c:	0002b428 	.word	0x0002b428
   19c50:	0002b3f0 	.word	0x0002b3f0
   19c54:	0002b430 	.word	0x0002b430
   19c58:	000222b0 	.word	0x000222b0
   19c5c:	0002bd00 	.word	0x0002bd00

00019c60 <uart_init0>:
    for (int i = 0; i < MP_ARRAY_SIZE(MP_STATE_PORT(machine_uart_obj_all)); i++) {
   19c60:	2300      	movs	r3, #0
   19c62:	e006      	b.n	19c72 <uart_init0+0x12>
        MP_STATE_PORT(machine_uart_obj_all)[i] = NULL;
   19c64:	f103 017c 	add.w	r1, r3, #124	; 0x7c
   19c68:	4a03      	ldr	r2, [pc, #12]	; (19c78 <uart_init0+0x18>)
   19c6a:	2000      	movs	r0, #0
   19c6c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    for (int i = 0; i < MP_ARRAY_SIZE(MP_STATE_PORT(machine_uart_obj_all)); i++) {
   19c70:	3301      	adds	r3, #1
   19c72:	2b07      	cmp	r3, #7
   19c74:	d9f6      	bls.n	19c64 <uart_init0+0x4>
}
   19c76:	4770      	bx	lr
   19c78:	200008a0 	.word	0x200008a0

00019c7c <uart_deinit>:
void uart_deinit(void) {
   19c7c:	b510      	push	{r4, lr}
    for (int i = 0; i < MP_ARRAY_SIZE(MP_STATE_PORT(machine_uart_obj_all)); i++) {
   19c7e:	2400      	movs	r4, #0
   19c80:	e000      	b.n	19c84 <uart_deinit+0x8>
   19c82:	3401      	adds	r4, #1
   19c84:	2c07      	cmp	r4, #7
   19c86:	d809      	bhi.n	19c9c <uart_deinit+0x20>
        machine_uart_obj_t *uart_obj = MP_STATE_PORT(machine_uart_obj_all)[i];
   19c88:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   19c8c:	4a04      	ldr	r2, [pc, #16]	; (19ca0 <uart_deinit+0x24>)
   19c8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        if (uart_obj != NULL) {
   19c92:	2800      	cmp	r0, #0
   19c94:	d0f5      	beq.n	19c82 <uart_deinit+0x6>
            machine_uart_deinit(uart_obj);
   19c96:	f7ff fbff 	bl	19498 <machine_uart_deinit>
   19c9a:	e7f2      	b.n	19c82 <uart_deinit+0x6>
}
   19c9c:	bd10      	pop	{r4, pc}
   19c9e:	bf00      	nop
   19ca0:	200008a0 	.word	0x200008a0

00019ca4 <uart_attach_to_repl>:
    self->attached_to_repl = attached;
   19ca4:	7581      	strb	r1, [r0, #22]
}
   19ca6:	4770      	bx	lr

00019ca8 <uart_rx_any>:
    int buffer_bytes = self->read_buf_head - self->read_buf_tail;
   19ca8:	8c03      	ldrh	r3, [r0, #32]
   19caa:	8c42      	ldrh	r2, [r0, #34]	; 0x22
    if (buffer_bytes < 0) {
   19cac:	1a9b      	subs	r3, r3, r2
   19cae:	d403      	bmi.n	19cb8 <uart_rx_any+0x10>
    } else if (buffer_bytes > 0) {
   19cb0:	2b00      	cmp	r3, #0
   19cb2:	dd04      	ble.n	19cbe <uart_rx_any+0x16>
        return buffer_bytes;
   19cb4:	4618      	mov	r0, r3
   19cb6:	4770      	bx	lr
        return buffer_bytes + self->read_buf_len;
   19cb8:	8bc0      	ldrh	r0, [r0, #30]
   19cba:	4418      	add	r0, r3
   19cbc:	4770      	bx	lr
        return !(self->regs->FR & UART_FR_RXFE);
   19cbe:	68c3      	ldr	r3, [r0, #12]
   19cc0:	699b      	ldr	r3, [r3, #24]
   19cc2:	f013 0f10 	tst.w	r3, #16
   19cc6:	bf0c      	ite	eq
   19cc8:	2001      	moveq	r0, #1
   19cca:	2000      	movne	r0, #0
}
   19ccc:	4770      	bx	lr

00019cce <machine_uart_any>:
STATIC mp_obj_t machine_uart_any(mp_obj_t self_in) {
   19cce:	b508      	push	{r3, lr}
    return MP_OBJ_NEW_SMALL_INT(uart_rx_any(self));
   19cd0:	f7ff ffea 	bl	19ca8 <uart_rx_any>
   19cd4:	0040      	lsls	r0, r0, #1
}
   19cd6:	f040 0001 	orr.w	r0, r0, #1
   19cda:	bd08      	pop	{r3, pc}

00019cdc <machine_uart_ioctl>:

STATIC mp_uint_t machine_uart_ioctl(mp_obj_t self_in, mp_uint_t request, mp_uint_t arg, int *errcode) {
   19cdc:	b538      	push	{r3, r4, r5, lr}
    machine_uart_obj_t *self = self_in;
    mp_uint_t ret;
    if (request == MP_STREAM_POLL) {
   19cde:	2903      	cmp	r1, #3
   19ce0:	d116      	bne.n	19d10 <machine_uart_ioctl+0x34>
   19ce2:	4614      	mov	r4, r2
   19ce4:	4605      	mov	r5, r0
        mp_uint_t flags = arg;
        ret = 0;
        if ((flags & MP_STREAM_POLL_RD) && uart_rx_any(self)) {
   19ce6:	f012 0301 	ands.w	r3, r2, #1
   19cea:	d10a      	bne.n	19d02 <machine_uart_ioctl+0x26>
            ret |= MP_STREAM_POLL_RD;
        }
        if ((flags & MP_STREAM_POLL_WR) && (self->regs->FR & UART_FR_TXFE)) {
   19cec:	f014 0f04 	tst.w	r4, #4
   19cf0:	d012      	beq.n	19d18 <machine_uart_ioctl+0x3c>
   19cf2:	68ea      	ldr	r2, [r5, #12]
   19cf4:	6992      	ldr	r2, [r2, #24]
   19cf6:	f012 0f80 	tst.w	r2, #128	; 0x80
   19cfa:	d00d      	beq.n	19d18 <machine_uart_ioctl+0x3c>
            ret |= MP_STREAM_POLL_WR;
   19cfc:	f043 0304 	orr.w	r3, r3, #4
   19d00:	e00a      	b.n	19d18 <machine_uart_ioctl+0x3c>
        if ((flags & MP_STREAM_POLL_RD) && uart_rx_any(self)) {
   19d02:	f7ff ffd1 	bl	19ca8 <uart_rx_any>
   19d06:	4603      	mov	r3, r0
   19d08:	2800      	cmp	r0, #0
   19d0a:	d0ef      	beq.n	19cec <machine_uart_ioctl+0x10>
            ret |= MP_STREAM_POLL_RD;
   19d0c:	2301      	movs	r3, #1
   19d0e:	e7ed      	b.n	19cec <machine_uart_ioctl+0x10>
        }
    } else {
        *errcode = MP_EINVAL;
   19d10:	2216      	movs	r2, #22
   19d12:	601a      	str	r2, [r3, #0]
        ret = MP_STREAM_ERROR;
   19d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    return ret;
}
   19d18:	4618      	mov	r0, r3
   19d1a:	bd38      	pop	{r3, r4, r5, pc}

00019d1c <uart_rx_char>:
int uart_rx_char(machine_uart_obj_t *self) {
   19d1c:	b510      	push	{r4, lr}
    if (self->read_buf_tail != self->read_buf_head) {
   19d1e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   19d20:	8c02      	ldrh	r2, [r0, #32]
   19d22:	b292      	uxth	r2, r2
   19d24:	4293      	cmp	r3, r2
   19d26:	d01b      	beq.n	19d60 <uart_rx_char+0x44>
        if (self->char_width == CHAR_WIDTH_9BIT) {
   19d28:	7dc2      	ldrb	r2, [r0, #23]
   19d2a:	2a09      	cmp	r2, #9
   19d2c:	d00f      	beq.n	19d4e <uart_rx_char+0x32>
            data = self->read_buf[self->read_buf_tail];
   19d2e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   19d30:	5cd4      	ldrb	r4, [r2, r3]
        self->read_buf_tail = (self->read_buf_tail + 1) % self->read_buf_len;
   19d32:	3301      	adds	r3, #1
   19d34:	8bc1      	ldrh	r1, [r0, #30]
   19d36:	fb93 f2f1 	sdiv	r2, r3, r1
   19d3a:	fb01 3312 	mls	r3, r1, r2, r3
   19d3e:	8443      	strh	r3, [r0, #34]	; 0x22
        if (!(self->regs->FR & UART_FR_RXFE)) {
   19d40:	68c3      	ldr	r3, [r0, #12]
   19d42:	699b      	ldr	r3, [r3, #24]
   19d44:	f013 0f10 	tst.w	r3, #16
   19d48:	d005      	beq.n	19d56 <uart_rx_char+0x3a>
}
   19d4a:	4620      	mov	r0, r4
   19d4c:	bd10      	pop	{r4, pc}
            data = ((uint16_t*)self->read_buf)[self->read_buf_tail];
   19d4e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   19d50:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   19d54:	e7ed      	b.n	19d32 <uart_rx_char+0x16>
            MAP_UARTIntEnable(self->uart, UART_INT_RX);
   19d56:	2110      	movs	r1, #16
   19d58:	6840      	ldr	r0, [r0, #4]
   19d5a:	f007 f87e 	bl	20e5a <UARTIntEnable>
   19d5e:	e7f4      	b.n	19d4a <uart_rx_char+0x2e>
        uint32_t data = self->regs->DR;
   19d60:	68c3      	ldr	r3, [r0, #12]
   19d62:	681b      	ldr	r3, [r3, #0]
        return data & self->char_mask;;
   19d64:	8b04      	ldrh	r4, [r0, #24]
   19d66:	401c      	ands	r4, r3
   19d68:	e7ef      	b.n	19d4a <uart_rx_char+0x2e>

00019d6a <machine_uart_readchar>:
STATIC mp_obj_t machine_uart_readchar(mp_obj_t self_in) {
   19d6a:	b510      	push	{r4, lr}
   19d6c:	4604      	mov	r4, r0
    if (uart_rx_wait(self, self->timeout)) {
   19d6e:	8b41      	ldrh	r1, [r0, #26]
   19d70:	f7ff fc02 	bl	19578 <uart_rx_wait>
   19d74:	b910      	cbnz	r0, 19d7c <machine_uart_readchar+0x12>
        return MP_OBJ_NEW_SMALL_INT(-1);
   19d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19d7a:	bd10      	pop	{r4, pc}
        return MP_OBJ_NEW_SMALL_INT(uart_rx_char(self));
   19d7c:	4620      	mov	r0, r4
   19d7e:	f7ff ffcd 	bl	19d1c <uart_rx_char>
   19d82:	0040      	lsls	r0, r0, #1
   19d84:	f040 0001 	orr.w	r0, r0, #1
   19d88:	e7f7      	b.n	19d7a <machine_uart_readchar+0x10>
	...

00019d8c <machine_uart_read>:
STATIC mp_uint_t machine_uart_read(mp_obj_t self_in, void *buf_in, mp_uint_t size, int *errcode) {
   19d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size & LARGER_THAN_BYTE(self->char_width)) {
   19d8e:	7dc4      	ldrb	r4, [r0, #23]
   19d90:	4d18      	ldr	r5, [pc, #96]	; (19df4 <machine_uart_read+0x68>)
   19d92:	fba5 5404 	umull	r5, r4, r5, r4
   19d96:	0864      	lsrs	r4, r4, #1
   19d98:	4214      	tst	r4, r2
   19d9a:	d104      	bne.n	19da6 <machine_uart_read+0x1a>
    if (size == 0) {
   19d9c:	fa32 f404 	lsrs.w	r4, r2, r4
   19da0:	d106      	bne.n	19db0 <machine_uart_read+0x24>
}
   19da2:	4620      	mov	r0, r4
   19da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *errcode = MP_EIO;
   19da6:	2205      	movs	r2, #5
   19da8:	601a      	str	r2, [r3, #0]
        return MP_STREAM_ERROR;
   19daa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19dae:	e7f8      	b.n	19da2 <machine_uart_read+0x16>
   19db0:	461e      	mov	r6, r3
   19db2:	460f      	mov	r7, r1
   19db4:	4605      	mov	r5, r0
    if (!uart_rx_wait(self, self->timeout)) {
   19db6:	8b41      	ldrh	r1, [r0, #26]
   19db8:	f7ff fbde 	bl	19578 <uart_rx_wait>
   19dbc:	b108      	cbz	r0, 19dc2 <machine_uart_read+0x36>
    byte *buf = buf_in;
   19dbe:	463e      	mov	r6, r7
   19dc0:	e00d      	b.n	19dde <machine_uart_read+0x52>
        *errcode = MP_EAGAIN;
   19dc2:	230b      	movs	r3, #11
   19dc4:	6033      	str	r3, [r6, #0]
        return MP_STREAM_ERROR;
   19dc6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19dca:	e7ea      	b.n	19da2 <machine_uart_read+0x16>
            *(uint16_t*)buf = data;
   19dcc:	f826 0b02 	strh.w	r0, [r6], #2
        if (--size == 0 || !uart_rx_wait(self, self->timeout_char)) {
   19dd0:	3c01      	subs	r4, #1
   19dd2:	d00d      	beq.n	19df0 <machine_uart_read+0x64>
   19dd4:	8ba9      	ldrh	r1, [r5, #28]
   19dd6:	4628      	mov	r0, r5
   19dd8:	f7ff fbce 	bl	19578 <uart_rx_wait>
   19ddc:	b140      	cbz	r0, 19df0 <machine_uart_read+0x64>
        int data = uart_rx_char(self);
   19dde:	4628      	mov	r0, r5
   19de0:	f7ff ff9c 	bl	19d1c <uart_rx_char>
        if (self->char_width == CHAR_WIDTH_9BIT) {
   19de4:	7deb      	ldrb	r3, [r5, #23]
   19de6:	2b09      	cmp	r3, #9
   19de8:	d0f0      	beq.n	19dcc <machine_uart_read+0x40>
            *buf++ = data;
   19dea:	7030      	strb	r0, [r6, #0]
   19dec:	3601      	adds	r6, #1
   19dee:	e7ef      	b.n	19dd0 <machine_uart_read+0x44>
            return buf - orig_buf;
   19df0:	1bf4      	subs	r4, r6, r7
   19df2:	e7d6      	b.n	19da2 <machine_uart_read+0x16>
   19df4:	38e38e39 	.word	0x38e38e39

00019df8 <mp_hal_delay_ms>:
    }
}

// Core delay function that does an efficient sleep and may switch thread context.
// If IRQs are enabled then we must have the GIL.
void mp_hal_delay_ms(mp_uint_t Delay) {
   19df8:	b538      	push	{r3, r4, r5, lr}
   19dfa:	4604      	mov	r4, r0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19dfc:	f3ef 8310 	mrs	r3, PRIMASK
    if (query_irq() == IRQ_STATE_ENABLED) {
   19e00:	b95b      	cbnz	r3, 19e1a <mp_hal_delay_ms+0x22>
        // IRQs enabled, so can use systick counter to do the delay
        uint32_t start = uwTick;
   19e02:	4b0b      	ldr	r3, [pc, #44]	; (19e30 <mp_hal_delay_ms+0x38>)
   19e04:	681d      	ldr	r5, [r3, #0]
        // Wraparound of tick is taken care of by 2's complement arithmetic.
        while (uwTick - start < Delay) {
   19e06:	e002      	b.n	19e0e <mp_hal_delay_ms+0x16>
            // This macro will execute the necessary idle behaviour.  It may
            // raise an exception, switch threads or enter sleep mode (waiting for
            // (at least) the SysTick interrupt).
            MICROPY_EVENT_POLL_HOOK
   19e08:	f7f0 fc6a 	bl	a6e0 <mp_handle_pending>
   19e0c:	bf30      	wfi
        while (uwTick - start < Delay) {
   19e0e:	4b08      	ldr	r3, [pc, #32]	; (19e30 <mp_hal_delay_ms+0x38>)
   19e10:	681b      	ldr	r3, [r3, #0]
   19e12:	1b5b      	subs	r3, r3, r5
   19e14:	42a3      	cmp	r3, r4
   19e16:	d3f7      	bcc.n	19e08 <mp_hal_delay_ms+0x10>
//        for (int i = 0; i < Delay; i++) {
//            for (uint32_t count = 0; ++count <= count_1ms;) {
//            }
//        }
    }
}
   19e18:	bd38      	pop	{r3, r4, r5, pc}
        MAP_SysCtlDelay((MAP_SysCtlClockGet() / 3000) * Delay);
   19e1a:	f006 fed7 	bl	20bcc <SysCtlClockGet>
   19e1e:	4b05      	ldr	r3, [pc, #20]	; (19e34 <mp_hal_delay_ms+0x3c>)
   19e20:	fba3 3000 	umull	r3, r0, r3, r0
   19e24:	0980      	lsrs	r0, r0, #6
   19e26:	fb04 f000 	mul.w	r0, r4, r0
   19e2a:	f006 fecb 	bl	20bc4 <SysCtlDelay>
}
   19e2e:	e7f3      	b.n	19e18 <mp_hal_delay_ms+0x20>
   19e30:	20000ea0 	.word	0x20000ea0
   19e34:	057619f1 	.word	0x057619f1

00019e38 <mp_hal_ticks_ms>:
    }
}

mp_uint_t mp_hal_ticks_ms(void) {
    return uwTick;
}
   19e38:	4b01      	ldr	r3, [pc, #4]	; (19e40 <mp_hal_ticks_ms+0x8>)
   19e3a:	6818      	ldr	r0, [r3, #0]
   19e3c:	4770      	bx	lr
   19e3e:	bf00      	nop
   19e40:	20000ea0 	.word	0x20000ea0

00019e44 <mp_hal_ticks_us>:
   19e44:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19e48:	b672      	cpsid	i

mp_uint_t mp_hal_ticks_us(void) {
    mp_uint_t irq_state = disable_irq();
    uint32_t counter = SysTick->VAL;
   19e4a:	4a0d      	ldr	r2, [pc, #52]	; (19e80 <mp_hal_ticks_us+0x3c>)
   19e4c:	6893      	ldr	r3, [r2, #8]
    uint32_t milliseconds = uwTick;
   19e4e:	480d      	ldr	r0, [pc, #52]	; (19e84 <mp_hal_ticks_us+0x40>)
   19e50:	6800      	ldr	r0, [r0, #0]
    uint32_t status  = SysTick->CTRL;
   19e52:	6812      	ldr	r2, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19e54:	f381 8810 	msr	PRIMASK, r1
    // It's still possible for the countflag bit to get set if the counter was
    // reloaded between reading VAL and reading CTRL. With interrupts  disabled
    // it definitely takes less than 50 HCLK cycles between reading VAL and
    // reading CTRL, so the test (counter > 50) is to cover the case where VAL
    // is +ve and very close to zero, and the COUNTFLAG bit is also set.
    if ((status & SysTick_CTRL_COUNTFLAG_Msk) && counter > 50) {
   19e58:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   19e5c:	d002      	beq.n	19e64 <mp_hal_ticks_us+0x20>
   19e5e:	2b32      	cmp	r3, #50	; 0x32
   19e60:	d900      	bls.n	19e64 <mp_hal_ticks_us+0x20>
        // This means that the HW reloaded VAL between the time we read VAL and the
        // time we read CTRL, which implies that there is an interrupt pending
        // to increment the tick counter.
        milliseconds++;
   19e62:	3001      	adds	r0, #1
    }
    uint32_t load = SysTick->LOAD;
   19e64:	4a06      	ldr	r2, [pc, #24]	; (19e80 <mp_hal_ticks_us+0x3c>)
   19e66:	6852      	ldr	r2, [r2, #4]
    counter = load - counter; // Convert from decrementing to incrementing
   19e68:	1ad3      	subs	r3, r2, r3

    // ((load + 1) / 1000) is the number of counts per microsecond.
    //
    // counter / ((load + 1) / 1000) scales from the systick clock to microseconds
    // and is the same thing as (counter * 1000) / (load + 1)
    return milliseconds * 1000 + (counter * 1000) / (load + 1);
   19e6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   19e6e:	fb01 f303 	mul.w	r3, r1, r3
   19e72:	3201      	adds	r2, #1
   19e74:	fbb3 f3f2 	udiv	r3, r3, r2
}
   19e78:	fb01 3000 	mla	r0, r1, r0, r3
   19e7c:	4770      	bx	lr
   19e7e:	bf00      	nop
   19e80:	e000e010 	.word	0xe000e010
   19e84:	20000ea0 	.word	0x20000ea0

00019e88 <fmt_hex>:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0646a/Cihdjcfc.html

STATIC char *fmt_hex(uint32_t val, char *buf) {
    const char *hexDig = "0123456789abcdef";

    buf[0] = hexDig[(val >> 28) & 0x0f];
   19e88:	0f02      	lsrs	r2, r0, #28
   19e8a:	4b11      	ldr	r3, [pc, #68]	; (19ed0 <fmt_hex+0x48>)
   19e8c:	5cd2      	ldrb	r2, [r2, r3]
   19e8e:	700a      	strb	r2, [r1, #0]
    buf[1] = hexDig[(val >> 24) & 0x0f];
   19e90:	f3c0 6203 	ubfx	r2, r0, #24, #4
   19e94:	5cd2      	ldrb	r2, [r2, r3]
   19e96:	704a      	strb	r2, [r1, #1]
    buf[2] = hexDig[(val >> 20) & 0x0f];
   19e98:	f3c0 5203 	ubfx	r2, r0, #20, #4
   19e9c:	5cd2      	ldrb	r2, [r2, r3]
   19e9e:	708a      	strb	r2, [r1, #2]
    buf[3] = hexDig[(val >> 16) & 0x0f];
   19ea0:	f3c0 4203 	ubfx	r2, r0, #16, #4
   19ea4:	5cd2      	ldrb	r2, [r2, r3]
   19ea6:	70ca      	strb	r2, [r1, #3]
    buf[4] = hexDig[(val >> 12) & 0x0f];
   19ea8:	f3c0 3203 	ubfx	r2, r0, #12, #4
   19eac:	5cd2      	ldrb	r2, [r2, r3]
   19eae:	710a      	strb	r2, [r1, #4]
    buf[5] = hexDig[(val >>  8) & 0x0f];
   19eb0:	f3c0 2203 	ubfx	r2, r0, #8, #4
   19eb4:	5cd2      	ldrb	r2, [r2, r3]
   19eb6:	714a      	strb	r2, [r1, #5]
    buf[6] = hexDig[(val >>  4) & 0x0f];
   19eb8:	f3c0 1203 	ubfx	r2, r0, #4, #4
   19ebc:	5cd2      	ldrb	r2, [r2, r3]
   19ebe:	718a      	strb	r2, [r1, #6]
    buf[7] = hexDig[(val >>  0) & 0x0f];
   19ec0:	f000 000f 	and.w	r0, r0, #15
   19ec4:	5cc3      	ldrb	r3, [r0, r3]
   19ec6:	71cb      	strb	r3, [r1, #7]
    buf[8] = '\0';
   19ec8:	2300      	movs	r3, #0
   19eca:	720b      	strb	r3, [r1, #8]

    return buf;
}
   19ecc:	4608      	mov	r0, r1
   19ece:	4770      	bx	lr
   19ed0:	0002b598 	.word	0x0002b598

00019ed4 <print_reg>:

STATIC void print_reg(const char *label, uint32_t val) {
   19ed4:	b510      	push	{r4, lr}
   19ed6:	b084      	sub	sp, #16
   19ed8:	460c      	mov	r4, r1
    char hexStr[9];

    mp_hal_stdout_tx_str(label);
   19eda:	f7fe fdab 	bl	18a34 <mp_hal_stdout_tx_str>
    mp_hal_stdout_tx_str(fmt_hex(val, hexStr));
   19ede:	a901      	add	r1, sp, #4
   19ee0:	4620      	mov	r0, r4
   19ee2:	f7ff ffd1 	bl	19e88 <fmt_hex>
   19ee6:	f7fe fda5 	bl	18a34 <mp_hal_stdout_tx_str>
    mp_hal_stdout_tx_str("\r\n");
   19eea:	4802      	ldr	r0, [pc, #8]	; (19ef4 <print_reg+0x20>)
   19eec:	f7fe fda2 	bl	18a34 <mp_hal_stdout_tx_str>
}
   19ef0:	b004      	add	sp, #16
   19ef2:	bd10      	pop	{r4, pc}
   19ef4:	0002bda0 	.word	0x0002bda0

00019ef8 <print_hex_hex>:

STATIC void print_hex_hex(const char *label, uint32_t val1, uint32_t val2) {
   19ef8:	b530      	push	{r4, r5, lr}
   19efa:	b085      	sub	sp, #20
   19efc:	460d      	mov	r5, r1
   19efe:	4614      	mov	r4, r2
    char hex_str[9];
    mp_hal_stdout_tx_str(label);
   19f00:	f7fe fd98 	bl	18a34 <mp_hal_stdout_tx_str>
    mp_hal_stdout_tx_str(fmt_hex(val1, hex_str));
   19f04:	a901      	add	r1, sp, #4
   19f06:	4628      	mov	r0, r5
   19f08:	f7ff ffbe 	bl	19e88 <fmt_hex>
   19f0c:	f7fe fd92 	bl	18a34 <mp_hal_stdout_tx_str>
    mp_hal_stdout_tx_str("  ");
   19f10:	4806      	ldr	r0, [pc, #24]	; (19f2c <print_hex_hex+0x34>)
   19f12:	f7fe fd8f 	bl	18a34 <mp_hal_stdout_tx_str>
    mp_hal_stdout_tx_str(fmt_hex(val2, hex_str));
   19f16:	a901      	add	r1, sp, #4
   19f18:	4620      	mov	r0, r4
   19f1a:	f7ff ffb5 	bl	19e88 <fmt_hex>
   19f1e:	f7fe fd89 	bl	18a34 <mp_hal_stdout_tx_str>
    mp_hal_stdout_tx_str("\r\n");
   19f22:	4803      	ldr	r0, [pc, #12]	; (19f30 <print_hex_hex+0x38>)
   19f24:	f7fe fd86 	bl	18a34 <mp_hal_stdout_tx_str>
}
   19f28:	b005      	add	sp, #20
   19f2a:	bd30      	pop	{r4, r5, pc}
   19f2c:	0002b504 	.word	0x0002b504
   19f30:	0002bda0 	.word	0x0002bda0

00019f34 <HardFault_C_Handler>:
    uint32_t    r0, r1, r2, r3, r12, lr, pc, xpsr;
} ExceptionRegisters_t;

int pyb_hard_fault_debug = 0;

void HardFault_C_Handler(ExceptionRegisters_t *regs) {
   19f34:	b538      	push	{r3, r4, r5, lr}
    if (!pyb_hard_fault_debug) {
   19f36:	4b38      	ldr	r3, [pc, #224]	; (1a018 <HardFault_C_Handler+0xe4>)
   19f38:	681b      	ldr	r3, [r3, #0]
   19f3a:	b963      	cbnz	r3, 19f56 <HardFault_C_Handler+0x22>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   19f3c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19f40:	4936      	ldr	r1, [pc, #216]	; (1a01c <HardFault_C_Handler+0xe8>)
   19f42:	68ca      	ldr	r2, [r1, #12]
   19f44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19f48:	4b35      	ldr	r3, [pc, #212]	; (1a020 <HardFault_C_Handler+0xec>)
   19f4a:	4313      	orrs	r3, r2
   19f4c:	60cb      	str	r3, [r1, #12]
   19f4e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   19f52:	bf00      	nop
   19f54:	e7fd      	b.n	19f52 <HardFault_C_Handler+0x1e>
   19f56:	4604      	mov	r4, r0
    // We need to disable the USB so it doesn't try to write data out on
    // the VCP and then block indefinitely waiting for the buffer to drain.
    pyb_usb_flags = 0;
    #endif

    mp_hal_stdout_tx_str("HardFault\r\n");
   19f58:	4832      	ldr	r0, [pc, #200]	; (1a024 <HardFault_C_Handler+0xf0>)
   19f5a:	f7fe fd6b 	bl	18a34 <mp_hal_stdout_tx_str>

    print_reg("R0    ", regs->r0);
   19f5e:	6821      	ldr	r1, [r4, #0]
   19f60:	4831      	ldr	r0, [pc, #196]	; (1a028 <HardFault_C_Handler+0xf4>)
   19f62:	f7ff ffb7 	bl	19ed4 <print_reg>
    print_reg("R1    ", regs->r1);
   19f66:	6861      	ldr	r1, [r4, #4]
   19f68:	4830      	ldr	r0, [pc, #192]	; (1a02c <HardFault_C_Handler+0xf8>)
   19f6a:	f7ff ffb3 	bl	19ed4 <print_reg>
    print_reg("R2    ", regs->r2);
   19f6e:	68a1      	ldr	r1, [r4, #8]
   19f70:	482f      	ldr	r0, [pc, #188]	; (1a030 <HardFault_C_Handler+0xfc>)
   19f72:	f7ff ffaf 	bl	19ed4 <print_reg>
    print_reg("R3    ", regs->r3);
   19f76:	68e1      	ldr	r1, [r4, #12]
   19f78:	482e      	ldr	r0, [pc, #184]	; (1a034 <HardFault_C_Handler+0x100>)
   19f7a:	f7ff ffab 	bl	19ed4 <print_reg>
    print_reg("R12   ", regs->r12);
   19f7e:	6921      	ldr	r1, [r4, #16]
   19f80:	482d      	ldr	r0, [pc, #180]	; (1a038 <HardFault_C_Handler+0x104>)
   19f82:	f7ff ffa7 	bl	19ed4 <print_reg>
    print_reg("SP    ", (uint32_t)regs);
   19f86:	4621      	mov	r1, r4
   19f88:	482c      	ldr	r0, [pc, #176]	; (1a03c <HardFault_C_Handler+0x108>)
   19f8a:	f7ff ffa3 	bl	19ed4 <print_reg>
    print_reg("LR    ", regs->lr);
   19f8e:	6961      	ldr	r1, [r4, #20]
   19f90:	482b      	ldr	r0, [pc, #172]	; (1a040 <HardFault_C_Handler+0x10c>)
   19f92:	f7ff ff9f 	bl	19ed4 <print_reg>
    print_reg("PC    ", regs->pc);
   19f96:	69a1      	ldr	r1, [r4, #24]
   19f98:	482a      	ldr	r0, [pc, #168]	; (1a044 <HardFault_C_Handler+0x110>)
   19f9a:	f7ff ff9b 	bl	19ed4 <print_reg>
    print_reg("XPSR  ", regs->xpsr);
   19f9e:	69e1      	ldr	r1, [r4, #28]
   19fa0:	4829      	ldr	r0, [pc, #164]	; (1a048 <HardFault_C_Handler+0x114>)
   19fa2:	f7ff ff97 	bl	19ed4 <print_reg>

    uint32_t cfsr = SCB->CFSR;
   19fa6:	4b1d      	ldr	r3, [pc, #116]	; (1a01c <HardFault_C_Handler+0xe8>)
   19fa8:	6a9d      	ldr	r5, [r3, #40]	; 0x28

    print_reg("HFSR  ", SCB->HFSR);
   19faa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   19fac:	4827      	ldr	r0, [pc, #156]	; (1a04c <HardFault_C_Handler+0x118>)
   19fae:	f7ff ff91 	bl	19ed4 <print_reg>
    print_reg("CFSR  ", cfsr);
   19fb2:	4629      	mov	r1, r5
   19fb4:	4826      	ldr	r0, [pc, #152]	; (1a050 <HardFault_C_Handler+0x11c>)
   19fb6:	f7ff ff8d 	bl	19ed4 <print_reg>
    if (cfsr & 0x80) {
   19fba:	f015 0f80 	tst.w	r5, #128	; 0x80
   19fbe:	d111      	bne.n	19fe4 <HardFault_C_Handler+0xb0>
        print_reg("MMFAR ", SCB->MMFAR);
    }
    if (cfsr & 0x8000) {
   19fc0:	f415 4f00 	tst.w	r5, #32768	; 0x8000
   19fc4:	d114      	bne.n	19ff0 <HardFault_C_Handler+0xbc>
        print_reg("BFAR  ", SCB->BFAR);
    }

    if ((void*)&_ram_start <= (void*)regs && (void*)regs < (void*)&_ram_end) {
   19fc6:	4b23      	ldr	r3, [pc, #140]	; (1a054 <HardFault_C_Handler+0x120>)
   19fc8:	429c      	cmp	r4, r3
   19fca:	d321      	bcc.n	1a010 <HardFault_C_Handler+0xdc>
   19fcc:	4b22      	ldr	r3, [pc, #136]	; (1a058 <HardFault_C_Handler+0x124>)
   19fce:	429c      	cmp	r4, r3
   19fd0:	d21e      	bcs.n	1a010 <HardFault_C_Handler+0xdc>
        mp_hal_stdout_tx_str("Stack:\r\n");
   19fd2:	4822      	ldr	r0, [pc, #136]	; (1a05c <HardFault_C_Handler+0x128>)
   19fd4:	f7fe fd2e 	bl	18a34 <mp_hal_stdout_tx_str>
        uint32_t *stack_top = &_estack;
        if ((void*)regs < (void*)&_heap_end) {
   19fd8:	4b21      	ldr	r3, [pc, #132]	; (1a060 <HardFault_C_Handler+0x12c>)
   19fda:	429c      	cmp	r4, r3
   19fdc:	d20e      	bcs.n	19ffc <HardFault_C_Handler+0xc8>
            // stack not in static stack area so limit the amount we print
            stack_top = (uint32_t*)regs + 32;
   19fde:	f104 0580 	add.w	r5, r4, #128	; 0x80
   19fe2:	e013      	b.n	1a00c <HardFault_C_Handler+0xd8>
        print_reg("MMFAR ", SCB->MMFAR);
   19fe4:	4b0d      	ldr	r3, [pc, #52]	; (1a01c <HardFault_C_Handler+0xe8>)
   19fe6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   19fe8:	481e      	ldr	r0, [pc, #120]	; (1a064 <HardFault_C_Handler+0x130>)
   19fea:	f7ff ff73 	bl	19ed4 <print_reg>
   19fee:	e7e7      	b.n	19fc0 <HardFault_C_Handler+0x8c>
        print_reg("BFAR  ", SCB->BFAR);
   19ff0:	4b0a      	ldr	r3, [pc, #40]	; (1a01c <HardFault_C_Handler+0xe8>)
   19ff2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   19ff4:	481c      	ldr	r0, [pc, #112]	; (1a068 <HardFault_C_Handler+0x134>)
   19ff6:	f7ff ff6d 	bl	19ed4 <print_reg>
   19ffa:	e7e4      	b.n	19fc6 <HardFault_C_Handler+0x92>
        uint32_t *stack_top = &_estack;
   19ffc:	4d1b      	ldr	r5, [pc, #108]	; (1a06c <HardFault_C_Handler+0x138>)
        }
        for (uint32_t *sp = (uint32_t*)regs; sp < stack_top; ++sp) {
   19ffe:	e005      	b.n	1a00c <HardFault_C_Handler+0xd8>
            print_hex_hex("  ", (uint32_t)sp, *sp);
   1a000:	6822      	ldr	r2, [r4, #0]
   1a002:	4621      	mov	r1, r4
   1a004:	481a      	ldr	r0, [pc, #104]	; (1a070 <HardFault_C_Handler+0x13c>)
   1a006:	f7ff ff77 	bl	19ef8 <print_hex_hex>
        for (uint32_t *sp = (uint32_t*)regs; sp < stack_top; ++sp) {
   1a00a:	3404      	adds	r4, #4
   1a00c:	42a5      	cmp	r5, r4
   1a00e:	d8f7      	bhi.n	1a000 <HardFault_C_Handler+0xcc>
        }
    }

    /* Go to infinite loop when Hard Fault exception occurs */
    while (1) {
        __fatal_error("HardFault");
   1a010:	4818      	ldr	r0, [pc, #96]	; (1a074 <HardFault_C_Handler+0x140>)
   1a012:	f7fe fa67 	bl	184e4 <__fatal_error>
   1a016:	e7fb      	b.n	1a010 <HardFault_C_Handler+0xdc>
   1a018:	20000674 	.word	0x20000674
   1a01c:	e000ed00 	.word	0xe000ed00
   1a020:	05fa0004 	.word	0x05fa0004
   1a024:	0002b4f4 	.word	0x0002b4f4
   1a028:	0002b500 	.word	0x0002b500
   1a02c:	0002b508 	.word	0x0002b508
   1a030:	0002b510 	.word	0x0002b510
   1a034:	0002b518 	.word	0x0002b518
   1a038:	0002b520 	.word	0x0002b520
   1a03c:	0002b528 	.word	0x0002b528
   1a040:	0002b530 	.word	0x0002b530
   1a044:	0002b538 	.word	0x0002b538
   1a048:	0002b540 	.word	0x0002b540
   1a04c:	0002b548 	.word	0x0002b548
   1a050:	0002b550 	.word	0x0002b550
   1a054:	20000000 	.word	0x20000000
   1a058:	20008000 	.word	0x20008000
   1a05c:	0002b568 	.word	0x0002b568
   1a060:	20006eac 	.word	0x20006eac
   1a064:	0002b558 	.word	0x0002b558
   1a068:	0002b560 	.word	0x0002b560
   1a06c:	20008000 	.word	0x20008000
   1a070:	0002b504 	.word	0x0002b504
   1a074:	0002b574 	.word	0x0002b574

0001a078 <HardFault_Handler>:
    //
    // If CONTROL.SPSEL is 0, then the exception was stacked up using the
    // main stack pointer (aka MSP). If CONTROL.SPSEL is 1, then the exception
    // was stacked up using the process stack pointer (aka PSP).

    __asm volatile(
   1a078:	f01e 0f04 	tst.w	lr, #4
   1a07c:	bf0c      	ite	eq
   1a07e:	f3ef 8008 	mrseq	r0, MSP
   1a082:	f3ef 8009 	mrsne	r0, PSP
   1a086:	f7ff bf55 	b.w	19f34 <HardFault_C_Handler>

0001a08a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void) {
}
   1a08a:	4770      	bx	lr

0001a08c <MemManage_Handler>:
/**
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void) {
   1a08c:	b508      	push	{r3, lr}
    /* Go to infinite loop when Memory Manage exception occurs */
    while (1) {
        __fatal_error("MemManage");
   1a08e:	4802      	ldr	r0, [pc, #8]	; (1a098 <MemManage_Handler+0xc>)
   1a090:	f7fe fa28 	bl	184e4 <__fatal_error>
   1a094:	e7fb      	b.n	1a08e <MemManage_Handler+0x2>
   1a096:	bf00      	nop
   1a098:	0002b580 	.word	0x0002b580

0001a09c <BusFault_Handler>:
/**
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void) {
   1a09c:	b508      	push	{r3, lr}
    /* Go to infinite loop when Bus Fault exception occurs */
    while (1) {
        __fatal_error("BusFault");
   1a09e:	4802      	ldr	r0, [pc, #8]	; (1a0a8 <BusFault_Handler+0xc>)
   1a0a0:	f7fe fa20 	bl	184e4 <__fatal_error>
   1a0a4:	e7fb      	b.n	1a09e <BusFault_Handler+0x2>
   1a0a6:	bf00      	nop
   1a0a8:	0002b4e8 	.word	0x0002b4e8

0001a0ac <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void) {
   1a0ac:	b508      	push	{r3, lr}
    /* Go to infinite loop when Usage Fault exception occurs */
    while (1) {
        __fatal_error("UsageFault");
   1a0ae:	4802      	ldr	r0, [pc, #8]	; (1a0b8 <UsageFault_Handler+0xc>)
   1a0b0:	f7fe fa18 	bl	184e4 <__fatal_error>
   1a0b4:	e7fb      	b.n	1a0ae <UsageFault_Handler+0x2>
   1a0b6:	bf00      	nop
   1a0b8:	0002b58c 	.word	0x0002b58c

0001a0bc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void) {
}
   1a0bc:	4770      	bx	lr

0001a0be <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void) {
}
   1a0be:	4770      	bx	lr

0001a0c0 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void) {
    // pendsv_isr_handler();
}
   1a0c0:	4770      	bx	lr
	...

0001a0c4 <SysTick_Handler>:
    // second at the highest interrupt priority.
    // Note: we don't need uwTick to be declared volatile here because this is
    // the only place where it can be modified, and the code is more efficient
    // without the volatile specifier.
    extern uint32_t uwTick;
    uwTick += 1;
   1a0c4:	4a07      	ldr	r2, [pc, #28]	; (1a0e4 <SysTick_Handler+0x20>)
   1a0c6:	6813      	ldr	r3, [r2, #0]
   1a0c8:	3301      	adds	r3, #1
   1a0ca:	6013      	str	r3, [r2, #0]

    // Read the systick control regster. This has the side effect of clearing
    // the COUNTFLAG bit, which makes the logic in mp_hal_ticks_us
    // work properly.
    SysTick->CTRL;
   1a0cc:	4a06      	ldr	r2, [pc, #24]	; (1a0e8 <SysTick_Handler+0x24>)
   1a0ce:	6812      	ldr	r2, [r2, #0]
    // Right now we have the storage and DMA controllers to process during
    // this interrupt and we use custom dispatch handlers.  If this needs to
    // be generalised in the future then a dispatch table can be used as
    // follows: ((void(*)(void))(systick_dispatch[uwTick & 0xf]))();

    if (STORAGE_IDLE_TICK(uwTick)) {
   1a0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1a0d4:	2b02      	cmp	r3, #2
   1a0d6:	d000      	beq.n	1a0da <SysTick_Handler+0x16>
        } else {
            --pyb_thread_cur->timeslice;
        }
    }
    #endif
}
   1a0d8:	4770      	bx	lr
        NVIC->STIR = FLASH_IRQn;
   1a0da:	4b04      	ldr	r3, [pc, #16]	; (1a0ec <SysTick_Handler+0x28>)
   1a0dc:	222d      	movs	r2, #45	; 0x2d
   1a0de:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
   1a0e2:	e7f9      	b.n	1a0d8 <SysTick_Handler+0x14>
   1a0e4:	20000ea0 	.word	0x20000ea0
   1a0e8:	e000e010 	.word	0xe000e010
   1a0ec:	e000e100 	.word	0xe000e100

0001a0f0 <FLASH_IRQHandler>:
    }
    */
    // This call the storage IRQ handler, to check if the flash cache needs flushing
    // storage_irq_handler();
    IRQ_EXIT(FLASH_IRQn);
}
   1a0f0:	4770      	bx	lr

0001a0f2 <spi_tx_wait>:
/******************************************************************************/
// Implementation of hard SPI for machine module

// Waits at most timeout milliseconds for SSI flag to be set.
// Returns true if flag is/was set, false on timeout.
STATIC bool spi_tx_wait(machine_hard_spi_obj_t *self, uint32_t timeout) {
   1a0f2:	b570      	push	{r4, r5, r6, lr}
   1a0f4:	4605      	mov	r5, r0
   1a0f6:	460c      	mov	r4, r1
    uint32_t start = mp_hal_ticks_ms();
   1a0f8:	f7ff fe9e 	bl	19e38 <mp_hal_ticks_ms>
   1a0fc:	4606      	mov	r6, r0
    for (;;) {
        if (self->regs->SR & SSI_SR_TNF) {
   1a0fe:	68eb      	ldr	r3, [r5, #12]
   1a100:	68db      	ldr	r3, [r3, #12]
   1a102:	f013 0f02 	tst.w	r3, #2
   1a106:	d109      	bne.n	1a11c <spi_tx_wait+0x2a>
            return true;
        }
        if (timeout == 0 || mp_hal_ticks_ms() - start >= timeout) {
   1a108:	b154      	cbz	r4, 1a120 <spi_tx_wait+0x2e>
   1a10a:	f7ff fe95 	bl	19e38 <mp_hal_ticks_ms>
   1a10e:	1b80      	subs	r0, r0, r6
   1a110:	42a0      	cmp	r0, r4
   1a112:	d207      	bcs.n	1a124 <spi_tx_wait+0x32>
            return false; // timeout
        }
        MICROPY_EVENT_POLL_HOOK
   1a114:	f7f0 fae4 	bl	a6e0 <mp_handle_pending>
   1a118:	bf30      	wfi
        if (self->regs->SR & SSI_SR_TNF) {
   1a11a:	e7f0      	b.n	1a0fe <spi_tx_wait+0xc>
            return true;
   1a11c:	2001      	movs	r0, #1
    }
}
   1a11e:	bd70      	pop	{r4, r5, r6, pc}
            return false; // timeout
   1a120:	2000      	movs	r0, #0
   1a122:	e7fc      	b.n	1a11e <spi_tx_wait+0x2c>
   1a124:	2000      	movs	r0, #0
   1a126:	e7fa      	b.n	1a11e <spi_tx_wait+0x2c>

0001a128 <spi_wait_flag_unset>:
        }
        MICROPY_EVENT_POLL_HOOK
    }
}

STATIC bool spi_wait_flag_unset(machine_hard_spi_obj_t *self, uint32_t flag, uint32_t timeout) {
   1a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a12a:	4606      	mov	r6, r0
   1a12c:	460d      	mov	r5, r1
   1a12e:	4614      	mov	r4, r2
    // Note: we don't use WFI to idle in this loop because UART tx doesn't generate
    // an interrupt and the flag can be set quickly if the baudrate is large.
    uint32_t start = mp_hal_ticks_ms();
   1a130:	f7ff fe82 	bl	19e38 <mp_hal_ticks_ms>
   1a134:	4607      	mov	r7, r0
    for (;;) {
        if (!(self->regs->SR & flag)) {
   1a136:	68f3      	ldr	r3, [r6, #12]
   1a138:	68db      	ldr	r3, [r3, #12]
   1a13a:	422b      	tst	r3, r5
   1a13c:	d009      	beq.n	1a152 <spi_wait_flag_unset+0x2a>
            return true;
        }
        if (timeout == 0 || mp_hal_ticks_ms() - start >= timeout) {
   1a13e:	b154      	cbz	r4, 1a156 <spi_wait_flag_unset+0x2e>
   1a140:	f7ff fe7a 	bl	19e38 <mp_hal_ticks_ms>
   1a144:	1bc0      	subs	r0, r0, r7
   1a146:	42a0      	cmp	r0, r4
   1a148:	d207      	bcs.n	1a15a <spi_wait_flag_unset+0x32>
            return false; // timeout
        }
        MICROPY_EVENT_POLL_HOOK
   1a14a:	f7f0 fac9 	bl	a6e0 <mp_handle_pending>
   1a14e:	bf30      	wfi
        if (!(self->regs->SR & flag)) {
   1a150:	e7f1      	b.n	1a136 <spi_wait_flag_unset+0xe>
            return true;
   1a152:	2001      	movs	r0, #1
    }
}
   1a154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false; // timeout
   1a156:	2000      	movs	r0, #0
   1a158:	e7fc      	b.n	1a154 <spi_wait_flag_unset+0x2c>
   1a15a:	2000      	movs	r0, #0
   1a15c:	e7fa      	b.n	1a154 <spi_wait_flag_unset+0x2c>

0001a15e <spi_rx_wait>:
STATIC bool spi_rx_wait(machine_hard_spi_obj_t *self, uint32_t timeout) {
   1a15e:	b570      	push	{r4, r5, r6, lr}
   1a160:	4605      	mov	r5, r0
   1a162:	460c      	mov	r4, r1
    uint32_t start = mp_hal_ticks_ms();
   1a164:	f7ff fe68 	bl	19e38 <mp_hal_ticks_ms>
   1a168:	4606      	mov	r6, r0
        if (self->regs->SR & SSI_SR_RNE) {
   1a16a:	68eb      	ldr	r3, [r5, #12]
   1a16c:	68db      	ldr	r3, [r3, #12]
   1a16e:	f013 0f04 	tst.w	r3, #4
   1a172:	d109      	bne.n	1a188 <spi_rx_wait+0x2a>
        if (timeout == 0 || mp_hal_ticks_ms() - start >= timeout) {
   1a174:	b154      	cbz	r4, 1a18c <spi_rx_wait+0x2e>
   1a176:	f7ff fe5f 	bl	19e38 <mp_hal_ticks_ms>
   1a17a:	1b80      	subs	r0, r0, r6
   1a17c:	42a0      	cmp	r0, r4
   1a17e:	d207      	bcs.n	1a190 <spi_rx_wait+0x32>
        MICROPY_EVENT_POLL_HOOK
   1a180:	f7f0 faae 	bl	a6e0 <mp_handle_pending>
   1a184:	bf30      	wfi
        if (self->regs->SR & SSI_SR_RNE) {
   1a186:	e7f0      	b.n	1a16a <spi_rx_wait+0xc>
            return true;
   1a188:	2001      	movs	r0, #1
}
   1a18a:	bd70      	pop	{r4, r5, r6, pc}
            return false; // timeout
   1a18c:	2000      	movs	r0, #0
   1a18e:	e7fc      	b.n	1a18a <spi_rx_wait+0x2c>
   1a190:	2000      	movs	r0, #0
   1a192:	e7fa      	b.n	1a18a <spi_rx_wait+0x2c>

0001a194 <spi_find>:
STATIC int spi_find(mp_obj_t id) {
   1a194:	b510      	push	{r4, lr}
   1a196:	f000 0303 	and.w	r3, r0, #3
    if (MP_OBJ_IS_STR(id)) {
   1a19a:	2b02      	cmp	r3, #2
   1a19c:	d00b      	beq.n	1a1b6 <spi_find+0x22>
   1a19e:	b91b      	cbnz	r3, 1a1a8 <spi_find+0x14>
   1a1a0:	6802      	ldr	r2, [r0, #0]
   1a1a2:	4b1a      	ldr	r3, [pc, #104]	; (1a20c <spi_find+0x78>)
   1a1a4:	429a      	cmp	r2, r3
   1a1a6:	d006      	beq.n	1a1b6 <spi_find+0x22>
        int spi_id = mp_obj_get_int(id);
   1a1a8:	f7f0 fe10 	bl	adcc <mp_obj_get_int>
   1a1ac:	4602      	mov	r2, r0
        if (spi_id >= 0 && spi_id <= MP_ARRAY_SIZE(MP_STATE_PORT(machine_spi_obj_all))) {
   1a1ae:	2804      	cmp	r0, #4
   1a1b0:	d822      	bhi.n	1a1f8 <spi_find+0x64>
}
   1a1b2:	4610      	mov	r0, r2
   1a1b4:	bd10      	pop	{r4, pc}
        const char *port = mp_obj_str_get_str(id);
   1a1b6:	f7f6 f849 	bl	1024c <mp_obj_str_get_str>
   1a1ba:	4604      	mov	r4, r0
        } else if (strcmp(port, MICROPY_HW_SPI0_NAME) == 0) {
   1a1bc:	4914      	ldr	r1, [pc, #80]	; (1a210 <spi_find+0x7c>)
   1a1be:	f001 fbbb 	bl	1b938 <strcmp>
   1a1c2:	4602      	mov	r2, r0
   1a1c4:	2800      	cmp	r0, #0
   1a1c6:	d0f4      	beq.n	1a1b2 <spi_find+0x1e>
        } else if (strcmp(port, MICROPY_HW_SPI1_NAME) == 0) {
   1a1c8:	4912      	ldr	r1, [pc, #72]	; (1a214 <spi_find+0x80>)
   1a1ca:	4620      	mov	r0, r4
   1a1cc:	f001 fbb4 	bl	1b938 <strcmp>
   1a1d0:	b1c0      	cbz	r0, 1a204 <spi_find+0x70>
        } else if (strcmp(port, MICROPY_HW_SPI2_NAME) == 0) {
   1a1d2:	4911      	ldr	r1, [pc, #68]	; (1a218 <spi_find+0x84>)
   1a1d4:	4620      	mov	r0, r4
   1a1d6:	f001 fbaf 	bl	1b938 <strcmp>
   1a1da:	b1a8      	cbz	r0, 1a208 <spi_find+0x74>
        } else if (strcmp(port, MICROPY_HW_SPI3_NAME) == 0) {
   1a1dc:	490f      	ldr	r1, [pc, #60]	; (1a21c <spi_find+0x88>)
   1a1de:	4620      	mov	r0, r4
   1a1e0:	f001 fbaa 	bl	1b938 <strcmp>
   1a1e4:	b908      	cbnz	r0, 1a1ea <spi_find+0x56>
            return SPI_3;
   1a1e6:	2203      	movs	r2, #3
   1a1e8:	e7e3      	b.n	1a1b2 <spi_find+0x1e>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
   1a1ea:	4622      	mov	r2, r4
   1a1ec:	490c      	ldr	r1, [pc, #48]	; (1a220 <spi_find+0x8c>)
   1a1ee:	480d      	ldr	r0, [pc, #52]	; (1a224 <spi_find+0x90>)
   1a1f0:	f7f2 fc6c 	bl	cacc <mp_obj_new_exception_msg_varg>
   1a1f4:	f7e6 fb44 	bl	880 <nlr_jump>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
   1a1f8:	490b      	ldr	r1, [pc, #44]	; (1a228 <spi_find+0x94>)
   1a1fa:	480a      	ldr	r0, [pc, #40]	; (1a224 <spi_find+0x90>)
   1a1fc:	f7f2 fc66 	bl	cacc <mp_obj_new_exception_msg_varg>
   1a200:	f7e6 fb3e 	bl	880 <nlr_jump>
            return SPI_1;
   1a204:	2201      	movs	r2, #1
   1a206:	e7d4      	b.n	1a1b2 <spi_find+0x1e>
            return SPI_2;
   1a208:	2202      	movs	r2, #2
   1a20a:	e7d2      	b.n	1a1b2 <spi_find+0x1e>
   1a20c:	00028104 	.word	0x00028104
   1a210:	000252b4 	.word	0x000252b4
   1a214:	00021cec 	.word	0x00021cec
   1a218:	000225f8 	.word	0x000225f8
   1a21c:	00021cfc 	.word	0x00021cfc
   1a220:	0002b9d8 	.word	0x0002b9d8
   1a224:	00026cc0 	.word	0x00026cc0
   1a228:	0002b9f0 	.word	0x0002b9f0

0001a22c <machine_hard_spi_print>:
    if (bytes_trans != len) {
        mp_hal_raise(MP_EFAULT);
    }
}

STATIC void machine_hard_spi_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1a22c:	b538      	push	{r3, r4, r5, lr}
   1a22e:	4605      	mov	r5, r0
   1a230:	460c      	mov	r4, r1
    machine_hard_spi_obj_t *spi = (machine_hard_spi_obj_t*) self_in;;

    mp_printf(print, "SPI(%u", spi->spi_id);
   1a232:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   1a236:	f002 0207 	and.w	r2, r2, #7
   1a23a:	4924      	ldr	r1, [pc, #144]	; (1a2cc <machine_hard_spi_print+0xa0>)
   1a23c:	f7e7 ff16 	bl	206c <mp_printf>
    
    if(spi->mode == SSI_MODE_MASTER) {
   1a240:	7d23      	ldrb	r3, [r4, #20]
   1a242:	f013 0f01 	tst.w	r3, #1
   1a246:	d11d      	bne.n	1a284 <machine_hard_spi_print+0x58>
        mp_printf(print, ", SPI.MASTER");
   1a248:	4921      	ldr	r1, [pc, #132]	; (1a2d0 <machine_hard_spi_print+0xa4>)
   1a24a:	4628      	mov	r0, r5
   1a24c:	f7e7 ff0e 	bl	206c <mp_printf>
            
        mp_printf(print, ", baudrate=%u", spi->baudrate);
   1a250:	69a2      	ldr	r2, [r4, #24]
   1a252:	4920      	ldr	r1, [pc, #128]	; (1a2d4 <machine_hard_spi_print+0xa8>)
   1a254:	4628      	mov	r0, r5
   1a256:	f7e7 ff09 	bl	206c <mp_printf>
        mp_printf(print, ", SPI.SLAVE");
    } else if(spi->mode == SSI_MODE_SLAVE_OD) {
        mp_printf(print, ", SPI.SLAVE_OD");
    }
    
    mp_printf(print, ", protocol=");
   1a25a:	491f      	ldr	r1, [pc, #124]	; (1a2d8 <machine_hard_spi_print+0xac>)
   1a25c:	4628      	mov	r0, r5
   1a25e:	f7e7 ff05 	bl	206c <mp_printf>
    if(spi->protocol == SSI_FRF_MOTO_MODE_0) mp_printf(print, "SPI0");
   1a262:	6a23      	ldr	r3, [r4, #32]
   1a264:	b19b      	cbz	r3, 1a28e <machine_hard_spi_print+0x62>
    else if(spi->protocol == SSI_FRF_MOTO_MODE_1) mp_printf(print, "SPI1");
   1a266:	2b02      	cmp	r3, #2
   1a268:	d01b      	beq.n	1a2a2 <machine_hard_spi_print+0x76>
    else if(spi->protocol == SSI_FRF_MOTO_MODE_2) mp_printf(print, "SPI2");
   1a26a:	2b01      	cmp	r3, #1
   1a26c:	d01e      	beq.n	1a2ac <machine_hard_spi_print+0x80>
    else if(spi->protocol == SSI_FRF_MOTO_MODE_3) mp_printf(print, "SPI3");
   1a26e:	2b03      	cmp	r3, #3
   1a270:	d021      	beq.n	1a2b6 <machine_hard_spi_print+0x8a>
    else if(spi->protocol == SSI_FRF_TI) mp_printf(print, "TI");
   1a272:	2b10      	cmp	r3, #16
   1a274:	d024      	beq.n	1a2c0 <machine_hard_spi_print+0x94>
    else if(spi->protocol == SSI_FRF_NMW) mp_printf(print, "MICROWIRE");
   1a276:	2b20      	cmp	r3, #32
   1a278:	d10d      	bne.n	1a296 <machine_hard_spi_print+0x6a>
   1a27a:	4918      	ldr	r1, [pc, #96]	; (1a2dc <machine_hard_spi_print+0xb0>)
   1a27c:	4628      	mov	r0, r5
   1a27e:	f7e7 fef5 	bl	206c <mp_printf>
   1a282:	e008      	b.n	1a296 <machine_hard_spi_print+0x6a>
        mp_printf(print, ", SPI.SLAVE");
   1a284:	4916      	ldr	r1, [pc, #88]	; (1a2e0 <machine_hard_spi_print+0xb4>)
   1a286:	4628      	mov	r0, r5
   1a288:	f7e7 fef0 	bl	206c <mp_printf>
   1a28c:	e7e5      	b.n	1a25a <machine_hard_spi_print+0x2e>
    if(spi->protocol == SSI_FRF_MOTO_MODE_0) mp_printf(print, "SPI0");
   1a28e:	4915      	ldr	r1, [pc, #84]	; (1a2e4 <machine_hard_spi_print+0xb8>)
   1a290:	4628      	mov	r0, r5
   1a292:	f7e7 feeb 	bl	206c <mp_printf>
    mp_printf(print, ", bits=%u)", spi->bits);
   1a296:	7f22      	ldrb	r2, [r4, #28]
   1a298:	4913      	ldr	r1, [pc, #76]	; (1a2e8 <machine_hard_spi_print+0xbc>)
   1a29a:	4628      	mov	r0, r5
   1a29c:	f7e7 fee6 	bl	206c <mp_printf>
}
   1a2a0:	bd38      	pop	{r3, r4, r5, pc}
    else if(spi->protocol == SSI_FRF_MOTO_MODE_1) mp_printf(print, "SPI1");
   1a2a2:	4912      	ldr	r1, [pc, #72]	; (1a2ec <machine_hard_spi_print+0xc0>)
   1a2a4:	4628      	mov	r0, r5
   1a2a6:	f7e7 fee1 	bl	206c <mp_printf>
   1a2aa:	e7f4      	b.n	1a296 <machine_hard_spi_print+0x6a>
    else if(spi->protocol == SSI_FRF_MOTO_MODE_2) mp_printf(print, "SPI2");
   1a2ac:	4910      	ldr	r1, [pc, #64]	; (1a2f0 <machine_hard_spi_print+0xc4>)
   1a2ae:	4628      	mov	r0, r5
   1a2b0:	f7e7 fedc 	bl	206c <mp_printf>
   1a2b4:	e7ef      	b.n	1a296 <machine_hard_spi_print+0x6a>
    else if(spi->protocol == SSI_FRF_MOTO_MODE_3) mp_printf(print, "SPI3");
   1a2b6:	490f      	ldr	r1, [pc, #60]	; (1a2f4 <machine_hard_spi_print+0xc8>)
   1a2b8:	4628      	mov	r0, r5
   1a2ba:	f7e7 fed7 	bl	206c <mp_printf>
   1a2be:	e7ea      	b.n	1a296 <machine_hard_spi_print+0x6a>
    else if(spi->protocol == SSI_FRF_TI) mp_printf(print, "TI");
   1a2c0:	490d      	ldr	r1, [pc, #52]	; (1a2f8 <machine_hard_spi_print+0xcc>)
   1a2c2:	4628      	mov	r0, r5
   1a2c4:	f7e7 fed2 	bl	206c <mp_printf>
   1a2c8:	e7e5      	b.n	1a296 <machine_hard_spi_print+0x6a>
   1a2ca:	bf00      	nop
   1a2cc:	0002b8c4 	.word	0x0002b8c4
   1a2d0:	0002b8cc 	.word	0x0002b8cc
   1a2d4:	0002b8dc 	.word	0x0002b8dc
   1a2d8:	0002b8f8 	.word	0x0002b8f8
   1a2dc:	0002b928 	.word	0x0002b928
   1a2e0:	0002b8ec 	.word	0x0002b8ec
   1a2e4:	0002b904 	.word	0x0002b904
   1a2e8:	0002b934 	.word	0x0002b934
   1a2ec:	0002b90c 	.word	0x0002b90c
   1a2f0:	0002b914 	.word	0x0002b914
   1a2f4:	0002b91c 	.word	0x0002b91c
   1a2f8:	0002b924 	.word	0x0002b924

0001a2fc <spi_init0>:
}
   1a2fc:	4770      	bx	lr
	...

0001a300 <spi_init>:
void spi_init(const mp_obj_t *self_in) {
   1a300:	b570      	push	{r4, r5, r6, lr}
   1a302:	b086      	sub	sp, #24
    const pin_obj_t *pins[4] = { NULL, NULL, NULL, NULL };
   1a304:	2300      	movs	r3, #0
   1a306:	9305      	str	r3, [sp, #20]
    } else if (self->spi_id == SPI_0) {
   1a308:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1a30c:	f013 0307 	ands.w	r3, r3, #7
   1a310:	d116      	bne.n	1a340 <spi_init+0x40>
        self->spi_base = SSI0_BASE;
   1a312:	4b5a      	ldr	r3, [pc, #360]	; (1a47c <spi_init+0x17c>)
   1a314:	6043      	str	r3, [r0, #4]
        self->periph = SYSCTL_PERIPH_SSI0;
   1a316:	4a5a      	ldr	r2, [pc, #360]	; (1a480 <spi_init+0x180>)
   1a318:	6082      	str	r2, [r0, #8]
        self->regs = (periph_spi_t*)SSI0_BASE;
   1a31a:	60c3      	str	r3, [r0, #12]
        self->irqn = INT_SSI0;
   1a31c:	2317      	movs	r3, #23
   1a31e:	6103      	str	r3, [r0, #16]
        pins[0] = MICROPY_HW_SPI0_SCK;
   1a320:	4b58      	ldr	r3, [pc, #352]	; (1a484 <spi_init+0x184>)
   1a322:	9302      	str	r3, [sp, #8]
        pins[1] = MICROPY_HW_SPI0_MISO;
   1a324:	4b58      	ldr	r3, [pc, #352]	; (1a488 <spi_init+0x188>)
   1a326:	9303      	str	r3, [sp, #12]
        pins[2] = MICROPY_HW_SPI0_MOSI;
   1a328:	4b58      	ldr	r3, [pc, #352]	; (1a48c <spi_init+0x18c>)
   1a32a:	9304      	str	r3, [sp, #16]
        if(!self->soft_fss) {
   1a32c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1a330:	f013 0f10 	tst.w	r3, #16
   1a334:	d101      	bne.n	1a33a <spi_init+0x3a>
            pins[3] = MICROPY_HW_SPI0_FSS;
   1a336:	4b56      	ldr	r3, [pc, #344]	; (1a490 <spi_init+0x190>)
   1a338:	9305      	str	r3, [sp, #20]
   1a33a:	4604      	mov	r4, r0
void spi_init(const mp_obj_t *self_in) {
   1a33c:	2500      	movs	r5, #0
   1a33e:	e046      	b.n	1a3ce <spi_init+0xce>
    } else if (self->spi_id == SPI_1) {
   1a340:	2b01      	cmp	r3, #1
   1a342:	d019      	beq.n	1a378 <spi_init+0x78>
    } else if (self->spi_id == SPI_2) {
   1a344:	2b02      	cmp	r3, #2
   1a346:	d02c      	beq.n	1a3a2 <spi_init+0xa2>
    } else if (self->spi_id == SPI_3) {
   1a348:	2b03      	cmp	r3, #3
   1a34a:	f040 8095 	bne.w	1a478 <spi_init+0x178>
        self->spi_base = SSI3_BASE;
   1a34e:	4b51      	ldr	r3, [pc, #324]	; (1a494 <spi_init+0x194>)
   1a350:	6043      	str	r3, [r0, #4]
        self->periph = SYSCTL_PERIPH_SSI3;
   1a352:	4a51      	ldr	r2, [pc, #324]	; (1a498 <spi_init+0x198>)
   1a354:	6082      	str	r2, [r0, #8]
        self->regs = (periph_spi_t*)SSI3_BASE;
   1a356:	60c3      	str	r3, [r0, #12]
        self->irqn = INT_SSI3;
   1a358:	234a      	movs	r3, #74	; 0x4a
   1a35a:	6103      	str	r3, [r0, #16]
        pins[0] = MICROPY_HW_SPI3_SCK;
   1a35c:	4b4f      	ldr	r3, [pc, #316]	; (1a49c <spi_init+0x19c>)
   1a35e:	9302      	str	r3, [sp, #8]
        pins[1] = MICROPY_HW_SPI3_MISO;
   1a360:	4b4f      	ldr	r3, [pc, #316]	; (1a4a0 <spi_init+0x1a0>)
   1a362:	9303      	str	r3, [sp, #12]
        pins[2] = MICROPY_HW_SPI3_MOSI;
   1a364:	4b4f      	ldr	r3, [pc, #316]	; (1a4a4 <spi_init+0x1a4>)
   1a366:	9304      	str	r3, [sp, #16]
        if(!self->soft_fss) {
   1a368:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1a36c:	f013 0f10 	tst.w	r3, #16
   1a370:	d1e3      	bne.n	1a33a <spi_init+0x3a>
            pins[3] = MICROPY_HW_SPI3_FSS;
   1a372:	4b4d      	ldr	r3, [pc, #308]	; (1a4a8 <spi_init+0x1a8>)
   1a374:	9305      	str	r3, [sp, #20]
   1a376:	e7e0      	b.n	1a33a <spi_init+0x3a>
        self->spi_base = SSI1_BASE;
   1a378:	4b4c      	ldr	r3, [pc, #304]	; (1a4ac <spi_init+0x1ac>)
   1a37a:	6043      	str	r3, [r0, #4]
        self->periph = SYSCTL_PERIPH_SSI1;
   1a37c:	4a4c      	ldr	r2, [pc, #304]	; (1a4b0 <spi_init+0x1b0>)
   1a37e:	6082      	str	r2, [r0, #8]
        self->regs = (periph_spi_t*)SSI1_BASE;
   1a380:	60c3      	str	r3, [r0, #12]
        self->irqn = INT_SSI1;
   1a382:	2332      	movs	r3, #50	; 0x32
   1a384:	6103      	str	r3, [r0, #16]
        pins[0] = MICROPY_HW_SPI1_SCK;
   1a386:	4b4b      	ldr	r3, [pc, #300]	; (1a4b4 <spi_init+0x1b4>)
   1a388:	9302      	str	r3, [sp, #8]
        pins[1] = MICROPY_HW_SPI1_MISO;
   1a38a:	4b4b      	ldr	r3, [pc, #300]	; (1a4b8 <spi_init+0x1b8>)
   1a38c:	9303      	str	r3, [sp, #12]
        pins[2] = MICROPY_HW_SPI1_MOSI;
   1a38e:	4b4b      	ldr	r3, [pc, #300]	; (1a4bc <spi_init+0x1bc>)
   1a390:	9304      	str	r3, [sp, #16]
        if(!self->soft_fss) {
   1a392:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1a396:	f013 0f10 	tst.w	r3, #16
   1a39a:	d1ce      	bne.n	1a33a <spi_init+0x3a>
            pins[3] = MICROPY_HW_SPI1_FSS;
   1a39c:	4b48      	ldr	r3, [pc, #288]	; (1a4c0 <spi_init+0x1c0>)
   1a39e:	9305      	str	r3, [sp, #20]
   1a3a0:	e7cb      	b.n	1a33a <spi_init+0x3a>
        self->spi_base = SSI2_BASE;
   1a3a2:	4b48      	ldr	r3, [pc, #288]	; (1a4c4 <spi_init+0x1c4>)
   1a3a4:	6043      	str	r3, [r0, #4]
        self->periph = SYSCTL_PERIPH_SSI2;
   1a3a6:	4a48      	ldr	r2, [pc, #288]	; (1a4c8 <spi_init+0x1c8>)
   1a3a8:	6082      	str	r2, [r0, #8]
        self->regs = (periph_spi_t*)SSI2_BASE;
   1a3aa:	60c3      	str	r3, [r0, #12]
        self->irqn = INT_SSI2;
   1a3ac:	2349      	movs	r3, #73	; 0x49
   1a3ae:	6103      	str	r3, [r0, #16]
        pins[0] = MICROPY_HW_SPI2_SCK;
   1a3b0:	4b46      	ldr	r3, [pc, #280]	; (1a4cc <spi_init+0x1cc>)
   1a3b2:	9302      	str	r3, [sp, #8]
        pins[1] = MICROPY_HW_SPI2_MISO;
   1a3b4:	4b46      	ldr	r3, [pc, #280]	; (1a4d0 <spi_init+0x1d0>)
   1a3b6:	9303      	str	r3, [sp, #12]
        pins[2] = MICROPY_HW_SPI2_MOSI;
   1a3b8:	4b46      	ldr	r3, [pc, #280]	; (1a4d4 <spi_init+0x1d4>)
   1a3ba:	9304      	str	r3, [sp, #16]
        if(!self->soft_fss) {
   1a3bc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1a3c0:	f013 0f10 	tst.w	r3, #16
   1a3c4:	d1b9      	bne.n	1a33a <spi_init+0x3a>
            pins[3] = MICROPY_HW_SPI2_FSS;
   1a3c6:	4b44      	ldr	r3, [pc, #272]	; (1a4d8 <spi_init+0x1d8>)
   1a3c8:	9305      	str	r3, [sp, #20]
   1a3ca:	e7b6      	b.n	1a33a <spi_init+0x3a>
    for (uint i = 0; i < (self->soft_fss ? 3 : 4); i++) {
   1a3cc:	3501      	adds	r5, #1
   1a3ce:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1a3d2:	f013 0f10 	tst.w	r3, #16
   1a3d6:	d01f      	beq.n	1a418 <spi_init+0x118>
   1a3d8:	2303      	movs	r3, #3
   1a3da:	429d      	cmp	r5, r3
   1a3dc:	d21e      	bcs.n	1a41c <spi_init+0x11c>
        if (pins[i] == NULL) {
   1a3de:	ab06      	add	r3, sp, #24
   1a3e0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1a3e4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1a3e8:	2e00      	cmp	r6, #0
   1a3ea:	d0ef      	beq.n	1a3cc <spi_init+0xcc>
        mp_hal_pin_config_alt(pins[i], PIN_FN_SSI, self->spi_id);
   1a3ec:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1a3f0:	f002 0207 	and.w	r2, r2, #7
   1a3f4:	2102      	movs	r1, #2
   1a3f6:	4630      	mov	r0, r6
   1a3f8:	f7fe fac3 	bl	18982 <mp_hal_pin_config_alt>
        if(i==0 && (self->protocol & 0x1) ) MAP_GPIOPadConfigSet(pins[i]->gpio, pins[i]->pin_mask, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
   1a3fc:	2d00      	cmp	r5, #0
   1a3fe:	d1e5      	bne.n	1a3cc <spi_init+0xcc>
   1a400:	6a23      	ldr	r3, [r4, #32]
   1a402:	f013 0f01 	tst.w	r3, #1
   1a406:	d0e1      	beq.n	1a3cc <spi_init+0xcc>
   1a408:	230a      	movs	r3, #10
   1a40a:	2201      	movs	r2, #1
   1a40c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   1a410:	68b0      	ldr	r0, [r6, #8]
   1a412:	f006 f9a7 	bl	20764 <GPIOPadConfigSet>
   1a416:	e7d9      	b.n	1a3cc <spi_init+0xcc>
    for (uint i = 0; i < (self->soft_fss ? 3 : 4); i++) {
   1a418:	2304      	movs	r3, #4
   1a41a:	e7de      	b.n	1a3da <spi_init+0xda>
    SysCtlPeripheralEnable(self->periph);
   1a41c:	68a0      	ldr	r0, [r4, #8]
   1a41e:	f006 fb79 	bl	20b14 <SysCtlPeripheralEnable>
    while(!SysCtlPeripheralReady(self->periph));
   1a422:	68a0      	ldr	r0, [r4, #8]
   1a424:	f006 fb64 	bl	20af0 <SysCtlPeripheralReady>
   1a428:	2800      	cmp	r0, #0
   1a42a:	d0fa      	beq.n	1a422 <spi_init+0x122>
    IntDisable(self->irqn);
   1a42c:	6920      	ldr	r0, [r4, #16]
   1a42e:	f006 fae7 	bl	20a00 <IntDisable>
    SSIDisable(self->spi_base);
   1a432:	6860      	ldr	r0, [r4, #4]
   1a434:	f006 fb36 	bl	20aa4 <SSIDisable>
    SSIClockSourceSet(self->spi_base, SSI_CLOCK_SYSTEM);
   1a438:	2100      	movs	r1, #0
   1a43a:	6860      	ldr	r0, [r4, #4]
   1a43c:	f006 fb55 	bl	20aea <SSIClockSourceSet>
    SSIConfigSetExpClk(self->spi_base, MAP_SysCtlClockGet(), self->protocol, self->mode, self->baudrate, self->bits);
   1a440:	6865      	ldr	r5, [r4, #4]
   1a442:	f006 fbc3 	bl	20bcc <SysCtlClockGet>
   1a446:	7d23      	ldrb	r3, [r4, #20]
   1a448:	7f22      	ldrb	r2, [r4, #28]
   1a44a:	9201      	str	r2, [sp, #4]
   1a44c:	69a2      	ldr	r2, [r4, #24]
   1a44e:	9200      	str	r2, [sp, #0]
   1a450:	f003 0301 	and.w	r3, r3, #1
   1a454:	6a22      	ldr	r2, [r4, #32]
   1a456:	4601      	mov	r1, r0
   1a458:	4628      	mov	r0, r5
   1a45a:	f006 fb01 	bl	20a60 <SSIConfigSetExpClk>
    SSIDMADisable(self->spi_base, SSI_DMA_TX | SSI_DMA_RX);
   1a45e:	2103      	movs	r1, #3
   1a460:	6860      	ldr	r0, [r4, #4]
   1a462:	f006 fb39 	bl	20ad8 <SSIDMADisable>
    SSIDMAEnable(self->spi_base, self->dma_enabled);
   1a466:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   1a46a:	0949      	lsrs	r1, r1, #5
   1a46c:	6860      	ldr	r0, [r4, #4]
   1a46e:	f006 fb2f 	bl	20ad0 <SSIDMAEnable>
    SSIEnable(self->spi_base);
   1a472:	6860      	ldr	r0, [r4, #4]
   1a474:	f006 fb11 	bl	20a9a <SSIEnable>
}
   1a478:	b006      	add	sp, #24
   1a47a:	bd70      	pop	{r4, r5, r6, pc}
   1a47c:	40008000 	.word	0x40008000
   1a480:	f0001c00 	.word	0xf0001c00
   1a484:	0002c77c 	.word	0x0002c77c
   1a488:	0002c80c 	.word	0x0002c80c
   1a48c:	0002c854 	.word	0x0002c854
   1a490:	0002c7c4 	.word	0x0002c7c4
   1a494:	4000b000 	.word	0x4000b000
   1a498:	f0001c03 	.word	0xf0001c03
   1a49c:	0002d0bc 	.word	0x0002d0bc
   1a4a0:	0002d1ec 	.word	0x0002d1ec
   1a4a4:	0002d284 	.word	0x0002d284
   1a4a8:	0002d154 	.word	0x0002d154
   1a4ac:	40009000 	.word	0x40009000
   1a4b0:	f0001c01 	.word	0xf0001c01
   1a4b4:	0002d74c 	.word	0x0002d74c
   1a4b8:	0002d86c 	.word	0x0002d86c
   1a4bc:	0002d8f4 	.word	0x0002d8f4
   1a4c0:	0002d7e4 	.word	0x0002d7e4
   1a4c4:	4000a000 	.word	0x4000a000
   1a4c8:	f0001c02 	.word	0xf0001c02
   1a4cc:	0002cb0c 	.word	0x0002cb0c
   1a4d0:	0002cbfc 	.word	0x0002cbfc
   1a4d4:	0002cc64 	.word	0x0002cc64
   1a4d8:	0002cb94 	.word	0x0002cb94

0001a4dc <machine_hard_spi_init_helper>:

STATIC mp_obj_t machine_hard_spi_init_helper(mp_obj_t* self_in, size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1a4dc:	b530      	push	{r4, r5, lr}
   1a4de:	b091      	sub	sp, #68	; 0x44
   1a4e0:	4604      	mov	r4, r0
   1a4e2:	4608      	mov	r0, r1
   1a4e4:	4611      	mov	r1, r2
   1a4e6:	461a      	mov	r2, r3
        { MP_QSTR_sck,      MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = MP_OBJ_NULL} }, // api compat, only fixed values, not implemented
        { MP_QSTR_mosi,     MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = MP_OBJ_NULL} },
        { MP_QSTR_miso,     MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_obj = MP_OBJ_NULL} },
    };
    mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
    mp_arg_parse_all(n_args, pos_args, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   1a4e8:	ab03      	add	r3, sp, #12
   1a4ea:	9301      	str	r3, [sp, #4]
   1a4ec:	4b52      	ldr	r3, [pc, #328]	; (1a638 <machine_hard_spi_init_helper+0x15c>)
   1a4ee:	9300      	str	r3, [sp, #0]
   1a4f0:	230d      	movs	r3, #13
   1a4f2:	f7f0 f943 	bl	a77c <mp_arg_parse_all>

    machine_hard_spi_obj_t *self = (machine_hard_spi_obj_t*)self_in;    

    // here we would check the sck/mosi/miso pins and configure them, but it's not implemented
    if (args[ARG_sck].u_obj != MP_OBJ_NULL
   1a4f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a4f8:	2b00      	cmp	r3, #0
   1a4fa:	d155      	bne.n	1a5a8 <machine_hard_spi_init_helper+0xcc>
        || args[ARG_mosi].u_obj != MP_OBJ_NULL
   1a4fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a4fe:	2b00      	cmp	r3, #0
   1a500:	d152      	bne.n	1a5a8 <machine_hard_spi_init_helper+0xcc>
        || args[ARG_miso].u_obj != MP_OBJ_NULL) {
   1a502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a504:	2b00      	cmp	r3, #0
   1a506:	d14f      	bne.n	1a5a8 <machine_hard_spi_init_helper+0xcc>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError,"explicit choice of sck/mosi/miso is not implemented"));
    }

    // set the SPI configuration values
    if(args[ARG_mode].u_int > 2) {
   1a508:	9a03      	ldr	r2, [sp, #12]
   1a50a:	2a02      	cmp	r2, #2
   1a50c:	dc52      	bgt.n	1a5b4 <machine_hard_spi_init_helper+0xd8>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "Mode accepts only MASTER or SLAVE"));
    }
    self->mode = args[ARG_mode].u_int;
   1a50e:	7d23      	ldrb	r3, [r4, #20]
   1a510:	f362 0300 	bfi	r3, r2, #0, #1
   1a514:	7523      	strb	r3, [r4, #20]

    if(args[ARG_bits].u_int >= 16 || args[ARG_bits].u_int <= 4) {
   1a516:	9b08      	ldr	r3, [sp, #32]
   1a518:	1f5a      	subs	r2, r3, #5
   1a51a:	2a0a      	cmp	r2, #10
   1a51c:	d850      	bhi.n	1a5c0 <machine_hard_spi_init_helper+0xe4>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid word length, only values 4..16 are available"));
    }
    self->bits = args[ARG_bits].u_int;
   1a51e:	7723      	strb	r3, [r4, #28]
    // if(args[ARG_prescaler].u_int & 0xFFFFFF00) {
    //     nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "prescaler only 2-254!"));
    // }
    // uint8_t prescale = args[ARG_prescaler].u_int;

    self->lsb_first = (bool) (args[ARG_firstbit].u_int & 0x1);
   1a520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a522:	f003 0301 	and.w	r3, r3, #1
   1a526:	7f62      	ldrb	r2, [r4, #29]
   1a528:	f363 0200 	bfi	r2, r3, #0, #1
   1a52c:	7762      	strb	r2, [r4, #29]

    if(!self->mode) {
   1a52e:	7d23      	ldrb	r3, [r4, #20]
   1a530:	f013 0f01 	tst.w	r3, #1
   1a534:	d150      	bne.n	1a5d8 <machine_hard_spi_init_helper+0xfc>
        if(args[ARG_baudrate].u_int >= 25000000) {
   1a536:	9a05      	ldr	r2, [sp, #20]
   1a538:	4b40      	ldr	r3, [pc, #256]	; (1a63c <machine_hard_spi_init_helper+0x160>)
   1a53a:	429a      	cmp	r2, r3
   1a53c:	dc46      	bgt.n	1a5cc <machine_hard_spi_init_helper+0xf0>
    } else {
        if(args[ARG_baudrate].u_int >= 6666666) {
            nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "baudrate too high, max 6.66 mBaud as slave"));
        }
    }
    self->baudrate = args[ARG_baudrate].u_int;
   1a53e:	9b05      	ldr	r3, [sp, #20]
   1a540:	61a3      	str	r3, [r4, #24]

    uint8_t phase = (uint8_t)args[ARG_phase].u_int & 0xFF;
   1a542:	9907      	ldr	r1, [sp, #28]
   1a544:	b2c8      	uxtb	r0, r1
    uint8_t polarity = (uint8_t)args[ARG_polarity].u_int & 0xFF;
   1a546:	9b06      	ldr	r3, [sp, #24]
   1a548:	b2dd      	uxtb	r5, r3
    uint32_t protocol = args[ARG_protocol].u_int;
   1a54a:	9a0a      	ldr	r2, [sp, #40]	; 0x28

    // support both polarity/phase and protocol but only one at a time, protocol takes priority
    if(polarity < 0  || polarity > 1) {
   1a54c:	2d01      	cmp	r5, #1
   1a54e:	d84d      	bhi.n	1a5ec <machine_hard_spi_init_helper+0x110>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "polarity not correct; IDLE_LOW or IDLE_HIGH"));
    }
    if(phase < 0 || phase > 1) {
   1a550:	2801      	cmp	r0, #1
   1a552:	d851      	bhi.n	1a5f8 <machine_hard_spi_init_helper+0x11c>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "phase not correct; FIRST_EDGE or SECOND_EDGE"));
    }
    if(protocol != -1){
   1a554:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1a558:	d05a      	beq.n	1a610 <machine_hard_spi_init_helper+0x134>
        if(!(protocol == SSI_FRF_MOTO_MODE_0 || protocol == SSI_FRF_MOTO_MODE_1  ||
   1a55a:	b14a      	cbz	r2, 1a570 <machine_hard_spi_init_helper+0x94>
   1a55c:	2a02      	cmp	r2, #2
   1a55e:	d007      	beq.n	1a570 <machine_hard_spi_init_helper+0x94>
   1a560:	2a01      	cmp	r2, #1
   1a562:	d005      	beq.n	1a570 <machine_hard_spi_init_helper+0x94>
            protocol == SSI_FRF_MOTO_MODE_2 || protocol == SSI_FRF_MOTO_MODE_3  ||
   1a564:	2a03      	cmp	r2, #3
   1a566:	d003      	beq.n	1a570 <machine_hard_spi_init_helper+0x94>
   1a568:	2a10      	cmp	r2, #16
   1a56a:	d001      	beq.n	1a570 <machine_hard_spi_init_helper+0x94>
        if(!(protocol == SSI_FRF_MOTO_MODE_0 || protocol == SSI_FRF_MOTO_MODE_1  ||
   1a56c:	2a20      	cmp	r2, #32
   1a56e:	d149      	bne.n	1a604 <machine_hard_spi_init_helper+0x128>
            protocol == SSI_FRF_TI || protocol == SSI_FRF_NMW)) {
            nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "protocol not supported, please use SPI0..3, TI or MICROWIRE!"));
        }
        self->protocol = protocol;
   1a570:	6222      	str	r2, [r4, #32]

//    if(args[ARG_fss].u_int != 0 || args[ARG_fss].u_int != 1) {
//        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "fss only accepts CS_HARD(0) or CS_SOFT(1)"));
//    }
    // Automatic or Manually assert chipselect? Only applicable in SPI mode
    if(!(self->protocol & 0xF0)) {
   1a572:	6a23      	ldr	r3, [r4, #32]
   1a574:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   1a578:	d151      	bne.n	1a61e <machine_hard_spi_init_helper+0x142>
        self->soft_fss = args[ARG_fss].u_bool;
   1a57a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   1a57e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1a582:	f362 1304 	bfi	r3, r2, #4, #1
   1a586:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    } else {
        self->soft_fss = false;
    }

    if(!(args[ARG_dma].u_int <= 3 && args[ARG_dma].u_int >= 0)) {
   1a58a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a58c:	2a03      	cmp	r2, #3
   1a58e:	d84d      	bhi.n	1a62c <machine_hard_spi_init_helper+0x150>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "dma accepts only DMA_NONE(0), DMA_RX(1), DMA_TX(2) or DMA_BOTH(3)"));
    }
    self->dma_enabled = args[ARG_dma].u_int;
   1a590:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1a594:	f362 1347 	bfi	r3, r2, #5, #3
   1a598:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    
    // init the SPI bus
    spi_init(self_in);
   1a59c:	4620      	mov	r0, r4
   1a59e:	f7ff feaf 	bl	1a300 <spi_init>

    return mp_const_none;
}
   1a5a2:	4827      	ldr	r0, [pc, #156]	; (1a640 <machine_hard_spi_init_helper+0x164>)
   1a5a4:	b011      	add	sp, #68	; 0x44
   1a5a6:	bd30      	pop	{r4, r5, pc}
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError,"explicit choice of sck/mosi/miso is not implemented"));
   1a5a8:	4926      	ldr	r1, [pc, #152]	; (1a644 <machine_hard_spi_init_helper+0x168>)
   1a5aa:	4827      	ldr	r0, [pc, #156]	; (1a648 <machine_hard_spi_init_helper+0x16c>)
   1a5ac:	f7f2 fafe 	bl	cbac <mp_obj_new_exception_msg>
   1a5b0:	f7e6 f966 	bl	880 <nlr_jump>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "Mode accepts only MASTER or SLAVE"));
   1a5b4:	4925      	ldr	r1, [pc, #148]	; (1a64c <machine_hard_spi_init_helper+0x170>)
   1a5b6:	4824      	ldr	r0, [pc, #144]	; (1a648 <machine_hard_spi_init_helper+0x16c>)
   1a5b8:	f7f2 faf8 	bl	cbac <mp_obj_new_exception_msg>
   1a5bc:	f7e6 f960 	bl	880 <nlr_jump>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid word length, only values 4..16 are available"));
   1a5c0:	4923      	ldr	r1, [pc, #140]	; (1a650 <machine_hard_spi_init_helper+0x174>)
   1a5c2:	4821      	ldr	r0, [pc, #132]	; (1a648 <machine_hard_spi_init_helper+0x16c>)
   1a5c4:	f7f2 faf2 	bl	cbac <mp_obj_new_exception_msg>
   1a5c8:	f7e6 f95a 	bl	880 <nlr_jump>
            nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "baudrate too high, max 25 Mbaud as master"));
   1a5cc:	4921      	ldr	r1, [pc, #132]	; (1a654 <machine_hard_spi_init_helper+0x178>)
   1a5ce:	481e      	ldr	r0, [pc, #120]	; (1a648 <machine_hard_spi_init_helper+0x16c>)
   1a5d0:	f7f2 faec 	bl	cbac <mp_obj_new_exception_msg>
   1a5d4:	f7e6 f954 	bl	880 <nlr_jump>
        if(args[ARG_baudrate].u_int >= 6666666) {
   1a5d8:	9a05      	ldr	r2, [sp, #20]
   1a5da:	4b1f      	ldr	r3, [pc, #124]	; (1a658 <machine_hard_spi_init_helper+0x17c>)
   1a5dc:	429a      	cmp	r2, r3
   1a5de:	ddae      	ble.n	1a53e <machine_hard_spi_init_helper+0x62>
            nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "baudrate too high, max 6.66 mBaud as slave"));
   1a5e0:	491e      	ldr	r1, [pc, #120]	; (1a65c <machine_hard_spi_init_helper+0x180>)
   1a5e2:	4819      	ldr	r0, [pc, #100]	; (1a648 <machine_hard_spi_init_helper+0x16c>)
   1a5e4:	f7f2 fae2 	bl	cbac <mp_obj_new_exception_msg>
   1a5e8:	f7e6 f94a 	bl	880 <nlr_jump>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "polarity not correct; IDLE_LOW or IDLE_HIGH"));
   1a5ec:	491c      	ldr	r1, [pc, #112]	; (1a660 <machine_hard_spi_init_helper+0x184>)
   1a5ee:	4816      	ldr	r0, [pc, #88]	; (1a648 <machine_hard_spi_init_helper+0x16c>)
   1a5f0:	f7f2 fadc 	bl	cbac <mp_obj_new_exception_msg>
   1a5f4:	f7e6 f944 	bl	880 <nlr_jump>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "phase not correct; FIRST_EDGE or SECOND_EDGE"));
   1a5f8:	491a      	ldr	r1, [pc, #104]	; (1a664 <machine_hard_spi_init_helper+0x188>)
   1a5fa:	4813      	ldr	r0, [pc, #76]	; (1a648 <machine_hard_spi_init_helper+0x16c>)
   1a5fc:	f7f2 fad6 	bl	cbac <mp_obj_new_exception_msg>
   1a600:	f7e6 f93e 	bl	880 <nlr_jump>
            nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "protocol not supported, please use SPI0..3, TI or MICROWIRE!"));
   1a604:	4918      	ldr	r1, [pc, #96]	; (1a668 <machine_hard_spi_init_helper+0x18c>)
   1a606:	4810      	ldr	r0, [pc, #64]	; (1a648 <machine_hard_spi_init_helper+0x16c>)
   1a608:	f7f2 fad0 	bl	cbac <mp_obj_new_exception_msg>
   1a60c:	f7e6 f938 	bl	880 <nlr_jump>
        self->protocol = ((phase & 0x1) << 1) | ((polarity & 0x1) << 1);
   1a610:	005b      	lsls	r3, r3, #1
   1a612:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   1a616:	f003 0302 	and.w	r3, r3, #2
   1a61a:	6223      	str	r3, [r4, #32]
   1a61c:	e7a9      	b.n	1a572 <machine_hard_spi_init_helper+0x96>
        self->soft_fss = false;
   1a61e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1a622:	f36f 1304 	bfc	r3, #4, #1
   1a626:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   1a62a:	e7ae      	b.n	1a58a <machine_hard_spi_init_helper+0xae>
        nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "dma accepts only DMA_NONE(0), DMA_RX(1), DMA_TX(2) or DMA_BOTH(3)"));
   1a62c:	490f      	ldr	r1, [pc, #60]	; (1a66c <machine_hard_spi_init_helper+0x190>)
   1a62e:	4806      	ldr	r0, [pc, #24]	; (1a648 <machine_hard_spi_init_helper+0x16c>)
   1a630:	f7f2 fabc 	bl	cbac <mp_obj_new_exception_msg>
   1a634:	f7e6 f924 	bl	880 <nlr_jump>
   1a638:	0002b5ac 	.word	0x0002b5ac
   1a63c:	017d783f 	.word	0x017d783f
   1a640:	00027b40 	.word	0x00027b40
   1a644:	0002b614 	.word	0x0002b614
   1a648:	00026cc0 	.word	0x00026cc0
   1a64c:	0002b648 	.word	0x0002b648
   1a650:	0002b66c 	.word	0x0002b66c
   1a654:	0002b6a4 	.word	0x0002b6a4
   1a658:	0065b9a9 	.word	0x0065b9a9
   1a65c:	0002b6d0 	.word	0x0002b6d0
   1a660:	0002b6fc 	.word	0x0002b6fc
   1a664:	0002b728 	.word	0x0002b728
   1a668:	0002b758 	.word	0x0002b758
   1a66c:	0002b798 	.word	0x0002b798

0001a670 <machine_hard_spi_make_new>:
    return machine_hard_spi_init_helper(args[0], n_args - 1, args + 1, kw_args);
}
STATIC MP_DEFINE_CONST_FUN_OBJ_KW(machine_spi_init_obj, 1, machine_hard_spi_init);


mp_obj_t machine_hard_spi_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *all_args) {
   1a670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a674:	b087      	sub	sp, #28
   1a676:	460d      	mov	r5, r1
   1a678:	4617      	mov	r7, r2
   1a67a:	461e      	mov	r6, r3

    // check arguments
    mp_arg_check_num(n_args, n_kw, 1, MP_OBJ_FUN_ARGS_MAX, true);
   1a67c:	2201      	movs	r2, #1
   1a67e:	9200      	str	r2, [sp, #0]
   1a680:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a684:	4639      	mov	r1, r7
   1a686:	4628      	mov	r0, r5
   1a688:	f7f0 f846 	bl	a718 <mp_arg_check_num>

    // find SPI port
    spi_id_t spi_id = spi_find(all_args[0]);
   1a68c:	6830      	ldr	r0, [r6, #0]
   1a68e:	f7ff fd81 	bl	1a194 <spi_find>

    // create dynamic peripheral object
    machine_hard_spi_obj_t *self;

    // get SPI object
    if (MP_STATE_PORT(machine_spi_obj_all)[spi_id - 1] == NULL) {
   1a692:	b2c3      	uxtb	r3, r0
   1a694:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   1a698:	3383      	adds	r3, #131	; 0x83
   1a69a:	4a15      	ldr	r2, [pc, #84]	; (1a6f0 <machine_hard_spi_make_new+0x80>)
   1a69c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   1a6a0:	b194      	cbz	r4, 1a6c8 <machine_hard_spi_make_new+0x58>
    } else {
        // reference existing SSI object
        self = MP_STATE_PORT(machine_spi_obj_all)[spi_id - 1];
    }

    if (n_args > 1 || n_kw > 0) {
   1a6a2:	2d01      	cmp	r5, #1
   1a6a4:	d800      	bhi.n	1a6a8 <machine_hard_spi_make_new+0x38>
   1a6a6:	b15f      	cbz	r7, 1a6c0 <machine_hard_spi_make_new+0x50>
        // start the peripheral
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, all_args + n_args);
   1a6a8:	eb06 0285 	add.w	r2, r6, r5, lsl #2
   1a6ac:	4639      	mov	r1, r7
   1a6ae:	a803      	add	r0, sp, #12
   1a6b0:	f7f0 f91f 	bl	a8f2 <mp_map_init_fixed_table>
        mp_obj_t* self_out = (mp_obj_t*) self;
        machine_hard_spi_init_helper(self_out, n_args - 1, all_args + 1, &kw_args);
   1a6b4:	ab03      	add	r3, sp, #12
   1a6b6:	1d32      	adds	r2, r6, #4
   1a6b8:	1e69      	subs	r1, r5, #1
   1a6ba:	4620      	mov	r0, r4
   1a6bc:	f7ff ff0e 	bl	1a4dc <machine_hard_spi_init_helper>
    }

    return MP_OBJ_FROM_PTR(self);
}
   1a6c0:	4620      	mov	r0, r4
   1a6c2:	b007      	add	sp, #28
   1a6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a6c8:	4680      	mov	r8, r0
        self = m_new0(machine_hard_spi_obj_t, 1);
   1a6ca:	2028      	movs	r0, #40	; 0x28
   1a6cc:	f7e6 f909 	bl	8e2 <m_malloc0>
   1a6d0:	4604      	mov	r4, r0
        self->base.type = &machine_hard_spi_type;
   1a6d2:	4b08      	ldr	r3, [pc, #32]	; (1a6f4 <machine_hard_spi_make_new+0x84>)
   1a6d4:	6003      	str	r3, [r0, #0]
        self->spi_id = spi_id;
   1a6d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1a6da:	f368 0302 	bfi	r3, r8, #0, #3
   1a6de:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        MP_STATE_PORT(machine_spi_obj_all)[spi_id - 1] = self;
   1a6e2:	f109 0984 	add.w	r9, r9, #132	; 0x84
   1a6e6:	4b02      	ldr	r3, [pc, #8]	; (1a6f0 <machine_hard_spi_make_new+0x80>)
   1a6e8:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
   1a6ec:	e7d9      	b.n	1a6a2 <machine_hard_spi_make_new+0x32>
   1a6ee:	bf00      	nop
   1a6f0:	200008a0 	.word	0x200008a0
   1a6f4:	0002b940 	.word	0x0002b940

0001a6f8 <machine_hard_spi_init>:
STATIC mp_obj_t machine_hard_spi_init(size_t n_args, const mp_obj_t *args, mp_map_t *kw_args) {  
   1a6f8:	b510      	push	{r4, lr}
   1a6fa:	460c      	mov	r4, r1
    return machine_hard_spi_init_helper(args[0], n_args - 1, args + 1, kw_args);
   1a6fc:	4613      	mov	r3, r2
   1a6fe:	1d0a      	adds	r2, r1, #4
   1a700:	1e41      	subs	r1, r0, #1
   1a702:	6820      	ldr	r0, [r4, #0]
   1a704:	f7ff feea 	bl	1a4dc <machine_hard_spi_init_helper>
}
   1a708:	bd10      	pop	{r4, pc}

0001a70a <spi_deinit>:
void spi_deinit(const mp_obj_t *self_in) {
   1a70a:	b510      	push	{r4, lr}
   1a70c:	4604      	mov	r4, r0
    SSIDisable(self->spi_base);
   1a70e:	6840      	ldr	r0, [r0, #4]
   1a710:	f006 f9c8 	bl	20aa4 <SSIDisable>
    SysCtlPeripheralDisable(self->periph);
   1a714:	68a0      	ldr	r0, [r4, #8]
   1a716:	f006 fa0d 	bl	20b34 <SysCtlPeripheralDisable>
}
   1a71a:	bd10      	pop	{r4, pc}

0001a71c <machine_hard_spi_deinit>:

STATIC mp_obj_t machine_hard_spi_deinit(mp_obj_t self_in) {
   1a71c:	b500      	push	{lr}
   1a71e:	b083      	sub	sp, #12
   1a720:	ab02      	add	r3, sp, #8
   1a722:	f843 0d04 	str.w	r0, [r3, #-4]!
    // machine_hard_spi_obj_t *self = (machine_hard_spi_obj_t*)self_in;
    spi_deinit(&self_in);
   1a726:	4618      	mov	r0, r3
   1a728:	f7ff ffef 	bl	1a70a <spi_deinit>
    return mp_const_none;
}
   1a72c:	4801      	ldr	r0, [pc, #4]	; (1a734 <machine_hard_spi_deinit+0x18>)
   1a72e:	b003      	add	sp, #12
   1a730:	f85d fb04 	ldr.w	pc, [sp], #4
   1a734:	00027b40 	.word	0x00027b40

0001a738 <spi_tx_only>:
mp_uint_t spi_tx_only(machine_hard_spi_obj_t *self, const uint8_t* data, size_t len, uint32_t word_timeout, int *errcode) {
   1a738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a73c:	b082      	sub	sp, #8
   1a73e:	4604      	mov	r4, r0
   1a740:	4688      	mov	r8, r1
   1a742:	4617      	mov	r7, r2
   1a744:	461e      	mov	r6, r3
    uint num_tx = 0;
   1a746:	2500      	movs	r5, #0
    while(num_tx < len) {
   1a748:	e010      	b.n	1a76c <spi_tx_only+0x34>
            *errcode = MP_ETIMEDOUT;
   1a74a:	2374      	movs	r3, #116	; 0x74
   1a74c:	9a08      	ldr	r2, [sp, #32]
   1a74e:	6013      	str	r3, [r2, #0]
}
   1a750:	4628      	mov	r0, r5
   1a752:	b002      	add	sp, #8
   1a754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SSIDataPutNonBlocking(self->spi_base, data[num_tx]);
   1a758:	f818 1005 	ldrb.w	r1, [r8, r5]
   1a75c:	6860      	ldr	r0, [r4, #4]
   1a75e:	f006 f9a6 	bl	20aae <SSIDataPutNonBlocking>
        SSIDataGetNonBlocking(self->spi_base, &dummy);
   1a762:	a901      	add	r1, sp, #4
   1a764:	6860      	ldr	r0, [r4, #4]
   1a766:	f006 f9aa 	bl	20abe <SSIDataGetNonBlocking>
        num_tx++;
   1a76a:	3501      	adds	r5, #1
    while(num_tx < len) {
   1a76c:	42bd      	cmp	r5, r7
   1a76e:	d219      	bcs.n	1a7a4 <spi_tx_only+0x6c>
        if(!spi_tx_wait(self, word_timeout)) {
   1a770:	4631      	mov	r1, r6
   1a772:	4620      	mov	r0, r4
   1a774:	f7ff fcbd 	bl	1a0f2 <spi_tx_wait>
   1a778:	2800      	cmp	r0, #0
   1a77a:	d0e6      	beq.n	1a74a <spi_tx_only+0x12>
        if(self->lsb_first) {
   1a77c:	7f63      	ldrb	r3, [r4, #29]
   1a77e:	f013 0f01 	tst.w	r3, #1
   1a782:	d0e9      	beq.n	1a758 <spi_tx_only+0x20>
            asm volatile("rbit %1,%0" : "=r" (dat) : "r" (data[num_tx]));
   1a784:	f818 3005 	ldrb.w	r3, [r8, r5]
   1a788:	fa93 f3a3 	rbit	r3, r3
   1a78c:	9300      	str	r3, [sp, #0]
            dat >>= (32 - self->bits);
   1a78e:	9b00      	ldr	r3, [sp, #0]
   1a790:	7f22      	ldrb	r2, [r4, #28]
   1a792:	f1c2 0220 	rsb	r2, r2, #32
   1a796:	40d3      	lsrs	r3, r2
   1a798:	9300      	str	r3, [sp, #0]
            SSIDataPutNonBlocking(self->spi_base, dat);
   1a79a:	9900      	ldr	r1, [sp, #0]
   1a79c:	6860      	ldr	r0, [r4, #4]
   1a79e:	f006 f986 	bl	20aae <SSIDataPutNonBlocking>
   1a7a2:	e7de      	b.n	1a762 <spi_tx_only+0x2a>
    if(!spi_wait_flag_unset(self, SSI_SR_BSY, word_timeout)) {
   1a7a4:	4632      	mov	r2, r6
   1a7a6:	2110      	movs	r1, #16
   1a7a8:	4620      	mov	r0, r4
   1a7aa:	f7ff fcbd 	bl	1a128 <spi_wait_flag_unset>
   1a7ae:	b118      	cbz	r0, 1a7b8 <spi_tx_only+0x80>
    *errcode = 0;
   1a7b0:	2300      	movs	r3, #0
   1a7b2:	9a08      	ldr	r2, [sp, #32]
   1a7b4:	6013      	str	r3, [r2, #0]
    return num_tx;
   1a7b6:	e7cb      	b.n	1a750 <spi_tx_only+0x18>
        *errcode = MP_ETIMEDOUT;
   1a7b8:	2374      	movs	r3, #116	; 0x74
   1a7ba:	9a08      	ldr	r2, [sp, #32]
   1a7bc:	6013      	str	r3, [r2, #0]
        return num_tx;
   1a7be:	e7c7      	b.n	1a750 <spi_tx_only+0x18>

0001a7c0 <spi_rx_only>:
mp_uint_t spi_rx_only(machine_hard_spi_obj_t *self, uint8_t* data, size_t len, uint32_t word_timeout, int *errcode) {
   1a7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7c4:	b082      	sub	sp, #8
   1a7c6:	4604      	mov	r4, r0
   1a7c8:	4688      	mov	r8, r1
   1a7ca:	4617      	mov	r7, r2
   1a7cc:	461e      	mov	r6, r3
    uint num_rx = 0;
   1a7ce:	2500      	movs	r5, #0
    while(num_rx < len) {
   1a7d0:	e009      	b.n	1a7e6 <spi_rx_only+0x26>
            *errcode = MP_ETIMEDOUT;
   1a7d2:	2374      	movs	r3, #116	; 0x74
   1a7d4:	9a08      	ldr	r2, [sp, #32]
   1a7d6:	6013      	str	r3, [r2, #0]
}
   1a7d8:	4628      	mov	r0, r5
   1a7da:	b002      	add	sp, #8
   1a7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data[num_rx] = dumm;
   1a7e0:	9b01      	ldr	r3, [sp, #4]
   1a7e2:	f808 3005 	strb.w	r3, [r8, r5]
    while(num_rx < len) {
   1a7e6:	42bd      	cmp	r5, r7
   1a7e8:	d21b      	bcs.n	1a822 <spi_rx_only+0x62>
        if(!spi_rx_wait(self, word_timeout)) {
   1a7ea:	4631      	mov	r1, r6
   1a7ec:	4620      	mov	r0, r4
   1a7ee:	f7ff fcb6 	bl	1a15e <spi_rx_wait>
   1a7f2:	2800      	cmp	r0, #0
   1a7f4:	d0ed      	beq.n	1a7d2 <spi_rx_only+0x12>
        SSIDataPutNonBlocking(self->spi_base, dummy);
   1a7f6:	2100      	movs	r1, #0
   1a7f8:	6860      	ldr	r0, [r4, #4]
   1a7fa:	f006 f958 	bl	20aae <SSIDataPutNonBlocking>
        num_rx += SSIDataGetNonBlocking(self->spi_base, &dumm);
   1a7fe:	a901      	add	r1, sp, #4
   1a800:	6860      	ldr	r0, [r4, #4]
   1a802:	f006 f95c 	bl	20abe <SSIDataGetNonBlocking>
   1a806:	4405      	add	r5, r0
        if(self->lsb_first) {
   1a808:	7f63      	ldrb	r3, [r4, #29]
   1a80a:	f013 0f01 	tst.w	r3, #1
   1a80e:	d0e7      	beq.n	1a7e0 <spi_rx_only+0x20>
            asm volatile("rbit %1,%0" : "=r" (dumm) : "r" (dumm));
   1a810:	9b01      	ldr	r3, [sp, #4]
   1a812:	fa93 f3a3 	rbit	r3, r3
            dumm >>= (32 - self->bits);
   1a816:	7f22      	ldrb	r2, [r4, #28]
   1a818:	f1c2 0220 	rsb	r2, r2, #32
   1a81c:	40d3      	lsrs	r3, r2
   1a81e:	9301      	str	r3, [sp, #4]
   1a820:	e7de      	b.n	1a7e0 <spi_rx_only+0x20>
    if(!spi_wait_flag_unset(self, SSI_SR_BSY, word_timeout)) {
   1a822:	4632      	mov	r2, r6
   1a824:	2110      	movs	r1, #16
   1a826:	4620      	mov	r0, r4
   1a828:	f7ff fc7e 	bl	1a128 <spi_wait_flag_unset>
   1a82c:	b118      	cbz	r0, 1a836 <spi_rx_only+0x76>
    *errcode = 0;
   1a82e:	2300      	movs	r3, #0
   1a830:	9a08      	ldr	r2, [sp, #32]
   1a832:	6013      	str	r3, [r2, #0]
    return num_rx;
   1a834:	e7d0      	b.n	1a7d8 <spi_rx_only+0x18>
        *errcode = MP_ETIMEDOUT;
   1a836:	2374      	movs	r3, #116	; 0x74
   1a838:	9a08      	ldr	r2, [sp, #32]
   1a83a:	6013      	str	r3, [r2, #0]
        return num_rx;
   1a83c:	e7cc      	b.n	1a7d8 <spi_rx_only+0x18>

0001a83e <spi_rx_tx>:
mp_uint_t spi_rx_tx(machine_hard_spi_obj_t *self, const uint8_t* data_tx, uint8_t* data_rx, size_t len, uint32_t word_timeout, int *errcode) {
   1a83e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a842:	b083      	sub	sp, #12
   1a844:	4604      	mov	r4, r0
   1a846:	4689      	mov	r9, r1
   1a848:	4690      	mov	r8, r2
   1a84a:	461f      	mov	r7, r3
   1a84c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1a84e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    while(num_rtx < len) {
   1a850:	e011      	b.n	1a876 <spi_rx_tx+0x38>
            *errcode = MP_ETIMEDOUT;
   1a852:	2374      	movs	r3, #116	; 0x74
   1a854:	602b      	str	r3, [r5, #0]
}
   1a856:	2000      	movs	r0, #0
   1a858:	b003      	add	sp, #12
   1a85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            *errcode = MP_ETIMEDOUT;
   1a85e:	2374      	movs	r3, #116	; 0x74
   1a860:	602b      	str	r3, [r5, #0]
            return num_rtx;
   1a862:	e7f8      	b.n	1a856 <spi_rx_tx+0x18>
            SSIDataPutNonBlocking(self->spi_base, data_tx[num_rtx]);
   1a864:	f899 1000 	ldrb.w	r1, [r9]
   1a868:	6860      	ldr	r0, [r4, #4]
   1a86a:	f006 f920 	bl	20aae <SSIDataPutNonBlocking>
   1a86e:	e023      	b.n	1a8b8 <spi_rx_tx+0x7a>
        data_rx[num_rtx] = dumm;
   1a870:	9b01      	ldr	r3, [sp, #4]
   1a872:	f888 3000 	strb.w	r3, [r8]
    while(num_rtx < len) {
   1a876:	2f00      	cmp	r7, #0
   1a878:	d02f      	beq.n	1a8da <spi_rx_tx+0x9c>
        if(!spi_rx_wait(self, word_timeout)) {
   1a87a:	4631      	mov	r1, r6
   1a87c:	4620      	mov	r0, r4
   1a87e:	f7ff fc6e 	bl	1a15e <spi_rx_wait>
   1a882:	2800      	cmp	r0, #0
   1a884:	d0e5      	beq.n	1a852 <spi_rx_tx+0x14>
        if(!spi_tx_wait(self, word_timeout)) {
   1a886:	4631      	mov	r1, r6
   1a888:	4620      	mov	r0, r4
   1a88a:	f7ff fc32 	bl	1a0f2 <spi_tx_wait>
   1a88e:	2800      	cmp	r0, #0
   1a890:	d0e5      	beq.n	1a85e <spi_rx_tx+0x20>
        if(self->lsb_first) {
   1a892:	7f63      	ldrb	r3, [r4, #29]
   1a894:	f013 0f01 	tst.w	r3, #1
   1a898:	d0e4      	beq.n	1a864 <spi_rx_tx+0x26>
            asm volatile("rbit %1,%0" : "=r" (dat) : "r" (data_tx[num_rtx]));
   1a89a:	f899 3000 	ldrb.w	r3, [r9]
   1a89e:	fa93 f3a3 	rbit	r3, r3
   1a8a2:	9300      	str	r3, [sp, #0]
            dat >>= (32 - self->bits);
   1a8a4:	9b00      	ldr	r3, [sp, #0]
   1a8a6:	7f22      	ldrb	r2, [r4, #28]
   1a8a8:	f1c2 0220 	rsb	r2, r2, #32
   1a8ac:	40d3      	lsrs	r3, r2
   1a8ae:	9300      	str	r3, [sp, #0]
            SSIDataPutNonBlocking(self->spi_base, dat);
   1a8b0:	9900      	ldr	r1, [sp, #0]
   1a8b2:	6860      	ldr	r0, [r4, #4]
   1a8b4:	f006 f8fb 	bl	20aae <SSIDataPutNonBlocking>
        SSIDataGetNonBlocking(self->spi_base, &dumm);
   1a8b8:	a901      	add	r1, sp, #4
   1a8ba:	6860      	ldr	r0, [r4, #4]
   1a8bc:	f006 f8ff 	bl	20abe <SSIDataGetNonBlocking>
        if(self->lsb_first) {
   1a8c0:	7f63      	ldrb	r3, [r4, #29]
   1a8c2:	f013 0f01 	tst.w	r3, #1
   1a8c6:	d0d3      	beq.n	1a870 <spi_rx_tx+0x32>
            asm volatile("rbit %1,%0" : "=r" (dumm) : "r" (dumm));
   1a8c8:	9b01      	ldr	r3, [sp, #4]
   1a8ca:	fa93 f3a3 	rbit	r3, r3
            dumm >>= (32 - self->bits);
   1a8ce:	7f22      	ldrb	r2, [r4, #28]
   1a8d0:	f1c2 0220 	rsb	r2, r2, #32
   1a8d4:	40d3      	lsrs	r3, r2
   1a8d6:	9301      	str	r3, [sp, #4]
   1a8d8:	e7ca      	b.n	1a870 <spi_rx_tx+0x32>
    if(!spi_wait_flag_unset(self, SSI_SR_BSY, word_timeout)) {
   1a8da:	4632      	mov	r2, r6
   1a8dc:	2110      	movs	r1, #16
   1a8de:	4620      	mov	r0, r4
   1a8e0:	f7ff fc22 	bl	1a128 <spi_wait_flag_unset>
   1a8e4:	b110      	cbz	r0, 1a8ec <spi_rx_tx+0xae>
    *errcode = 0;
   1a8e6:	2300      	movs	r3, #0
   1a8e8:	602b      	str	r3, [r5, #0]
    return num_rtx;
   1a8ea:	e7b4      	b.n	1a856 <spi_rx_tx+0x18>
        *errcode = MP_ETIMEDOUT;
   1a8ec:	2374      	movs	r3, #116	; 0x74
   1a8ee:	602b      	str	r3, [r5, #0]
        return num_rtx;
   1a8f0:	e7b1      	b.n	1a856 <spi_rx_tx+0x18>

0001a8f2 <spi_transfer>:
STATIC void spi_transfer(const mp_obj_t *self_in, size_t len, const uint8_t *src, uint8_t *dest, uint32_t timeout) {
   1a8f2:	b530      	push	{r4, r5, lr}
   1a8f4:	b085      	sub	sp, #20
   1a8f6:	460c      	mov	r4, r1
   1a8f8:	4611      	mov	r1, r2
    mp_int_t status = 0;
   1a8fa:	2200      	movs	r2, #0
   1a8fc:	9203      	str	r2, [sp, #12]
    if (dest == NULL) {
   1a8fe:	b173      	cbz	r3, 1a91e <spi_transfer+0x2c>
   1a900:	461d      	mov	r5, r3
    } else if (src == NULL) {
   1a902:	b1d9      	cbz	r1, 1a93c <spi_transfer+0x4a>
        if (len == 1 || query_irq() == IRQ_STATE_DISABLED) {
   1a904:	2c01      	cmp	r4, #1
   1a906:	d029      	beq.n	1a95c <spi_transfer+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a908:	f3ef 8310 	mrs	r3, PRIMASK
   1a90c:	2b01      	cmp	r3, #1
   1a90e:	d025      	beq.n	1a95c <spi_transfer+0x6a>
    uint bytes_trans = 0;
   1a910:	2000      	movs	r0, #0
    if (status != 0) {
   1a912:	9b03      	ldr	r3, [sp, #12]
   1a914:	bb5b      	cbnz	r3, 1a96e <spi_transfer+0x7c>
    if (bytes_trans != len) {
   1a916:	42a0      	cmp	r0, r4
   1a918:	d12c      	bne.n	1a974 <spi_transfer+0x82>
}
   1a91a:	b005      	add	sp, #20
   1a91c:	bd30      	pop	{r4, r5, pc}
        if (len == 1 || query_irq() == IRQ_STATE_DISABLED) {
   1a91e:	2c01      	cmp	r4, #1
   1a920:	d005      	beq.n	1a92e <spi_transfer+0x3c>
   1a922:	f3ef 8310 	mrs	r3, PRIMASK
   1a926:	2b01      	cmp	r3, #1
   1a928:	d001      	beq.n	1a92e <spi_transfer+0x3c>
    uint bytes_trans = 0;
   1a92a:	2000      	movs	r0, #0
   1a92c:	e7f1      	b.n	1a912 <spi_transfer+0x20>
            bytes_trans = spi_tx_only(self, src, len, timeout, &status);
   1a92e:	ab03      	add	r3, sp, #12
   1a930:	9300      	str	r3, [sp, #0]
   1a932:	9b08      	ldr	r3, [sp, #32]
   1a934:	4622      	mov	r2, r4
   1a936:	f7ff feff 	bl	1a738 <spi_tx_only>
   1a93a:	e7ea      	b.n	1a912 <spi_transfer+0x20>
        if (len == 1 || query_irq() == IRQ_STATE_DISABLED) {
   1a93c:	2c01      	cmp	r4, #1
   1a93e:	d005      	beq.n	1a94c <spi_transfer+0x5a>
   1a940:	f3ef 8310 	mrs	r3, PRIMASK
   1a944:	2b01      	cmp	r3, #1
   1a946:	d001      	beq.n	1a94c <spi_transfer+0x5a>
    uint bytes_trans = 0;
   1a948:	2000      	movs	r0, #0
   1a94a:	e7e2      	b.n	1a912 <spi_transfer+0x20>
            bytes_trans = spi_rx_only(self, dest, len, timeout, &status);
   1a94c:	ab03      	add	r3, sp, #12
   1a94e:	9300      	str	r3, [sp, #0]
   1a950:	9b08      	ldr	r3, [sp, #32]
   1a952:	4622      	mov	r2, r4
   1a954:	4629      	mov	r1, r5
   1a956:	f7ff ff33 	bl	1a7c0 <spi_rx_only>
   1a95a:	e7da      	b.n	1a912 <spi_transfer+0x20>
            bytes_trans = spi_rx_tx(self, src, dest, len, timeout, &status);
   1a95c:	ab03      	add	r3, sp, #12
   1a95e:	9301      	str	r3, [sp, #4]
   1a960:	9b08      	ldr	r3, [sp, #32]
   1a962:	9300      	str	r3, [sp, #0]
   1a964:	4623      	mov	r3, r4
   1a966:	462a      	mov	r2, r5
   1a968:	f7ff ff69 	bl	1a83e <spi_rx_tx>
   1a96c:	e7d1      	b.n	1a912 <spi_transfer+0x20>
        mp_hal_raise(status);
   1a96e:	4618      	mov	r0, r3
   1a970:	f7fd ffa2 	bl	188b8 <mp_hal_raise>
        mp_hal_raise(MP_EFAULT);
   1a974:	200e      	movs	r0, #14
   1a976:	f7fd ff9f 	bl	188b8 <mp_hal_raise>

0001a97a <machine_hard_spi_transfer>:

// STATIC mp_uint_t machine_hard_spi_transmit(const machine_hard_spi_obj_t *self, size_t len, const uint8_t *src, uint32_t timeout) {
    
// }

STATIC void machine_hard_spi_transfer(mp_obj_base_t *self_in, size_t len, const uint8_t *src, uint8_t *dest) {
   1a97a:	b510      	push	{r4, lr}
   1a97c:	b082      	sub	sp, #8
    // machine_hard_spi_obj_t *self = (machine_hard_spi_obj_t*)self_in;
    spi_transfer((mp_obj_t*)self_in, len, src, dest, SPI_TRANSFER_TIMEOUT(len));
   1a97e:	f101 0464 	add.w	r4, r1, #100	; 0x64
   1a982:	9400      	str	r4, [sp, #0]
   1a984:	f7ff ffb5 	bl	1a8f2 <spi_transfer>
}
   1a988:	b002      	add	sp, #8
   1a98a:	bd10      	pop	{r4, pc}

0001a98c <mp_machine_hard_spi_read>:

STATIC mp_obj_t mp_machine_hard_spi_read(size_t n_args, const mp_obj_t *args) {
   1a98c:	b570      	push	{r4, r5, r6, lr}
   1a98e:	b084      	sub	sp, #16
   1a990:	4606      	mov	r6, r0
   1a992:	460c      	mov	r4, r1
    vstr_t vstr;
    vstr_init_len(&vstr, mp_obj_get_int(args[1]));
   1a994:	6848      	ldr	r0, [r1, #4]
   1a996:	f7f0 fa19 	bl	adcc <mp_obj_get_int>
   1a99a:	4601      	mov	r1, r0
   1a99c:	4668      	mov	r0, sp
   1a99e:	f7e6 ff1c 	bl	17da <vstr_init_len>
    memset(vstr.buf, n_args == 3 ? mp_obj_get_int(args[2]) : 0, vstr.len);
   1a9a2:	9d02      	ldr	r5, [sp, #8]
   1a9a4:	2e03      	cmp	r6, #3
   1a9a6:	d010      	beq.n	1a9ca <mp_machine_hard_spi_read+0x3e>
   1a9a8:	2100      	movs	r1, #0
   1a9aa:	9a01      	ldr	r2, [sp, #4]
   1a9ac:	4628      	mov	r0, r5
   1a9ae:	f000 ff65 	bl	1b87c <memset>
    machine_hard_spi_transfer(args[0], vstr.len, (uint8_t*)vstr.buf, (uint8_t*)vstr.buf);
   1a9b2:	9b02      	ldr	r3, [sp, #8]
   1a9b4:	461a      	mov	r2, r3
   1a9b6:	9901      	ldr	r1, [sp, #4]
   1a9b8:	6820      	ldr	r0, [r4, #0]
   1a9ba:	f7ff ffde 	bl	1a97a <machine_hard_spi_transfer>
    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   1a9be:	4669      	mov	r1, sp
   1a9c0:	4804      	ldr	r0, [pc, #16]	; (1a9d4 <mp_machine_hard_spi_read+0x48>)
   1a9c2:	f7f4 ffbf 	bl	f944 <mp_obj_new_str_from_vstr>
}
   1a9c6:	b004      	add	sp, #16
   1a9c8:	bd70      	pop	{r4, r5, r6, pc}
    memset(vstr.buf, n_args == 3 ? mp_obj_get_int(args[2]) : 0, vstr.len);
   1a9ca:	68a0      	ldr	r0, [r4, #8]
   1a9cc:	f7f0 f9fe 	bl	adcc <mp_obj_get_int>
   1a9d0:	4601      	mov	r1, r0
   1a9d2:	e7ea      	b.n	1a9aa <mp_machine_hard_spi_read+0x1e>
   1a9d4:	000280c8 	.word	0x000280c8

0001a9d8 <mp_machine_hard_spi_readinto>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_machine_hard_spi_read_obj, 2, 3, mp_machine_hard_spi_read);

STATIC mp_obj_t mp_machine_hard_spi_readinto(size_t n_args, const mp_obj_t *args) {
   1a9d8:	b570      	push	{r4, r5, r6, lr}
   1a9da:	b084      	sub	sp, #16
   1a9dc:	4606      	mov	r6, r0
   1a9de:	460c      	mov	r4, r1
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_WRITE);
   1a9e0:	2202      	movs	r2, #2
   1a9e2:	a901      	add	r1, sp, #4
   1a9e4:	6860      	ldr	r0, [r4, #4]
   1a9e6:	f7f0 fc63 	bl	b2b0 <mp_get_buffer_raise>
    memset(bufinfo.buf, n_args == 3 ? mp_obj_get_int(args[2]) : 0, bufinfo.len);
   1a9ea:	9d01      	ldr	r5, [sp, #4]
   1a9ec:	2e03      	cmp	r6, #3
   1a9ee:	d00d      	beq.n	1aa0c <mp_machine_hard_spi_readinto+0x34>
   1a9f0:	2100      	movs	r1, #0
   1a9f2:	9a02      	ldr	r2, [sp, #8]
   1a9f4:	4628      	mov	r0, r5
   1a9f6:	f000 ff41 	bl	1b87c <memset>
    machine_hard_spi_transfer(args[0], bufinfo.len, bufinfo.buf, bufinfo.buf);
   1a9fa:	9b01      	ldr	r3, [sp, #4]
   1a9fc:	461a      	mov	r2, r3
   1a9fe:	9902      	ldr	r1, [sp, #8]
   1aa00:	6820      	ldr	r0, [r4, #0]
   1aa02:	f7ff ffba 	bl	1a97a <machine_hard_spi_transfer>
    return mp_const_none;
}
   1aa06:	4804      	ldr	r0, [pc, #16]	; (1aa18 <mp_machine_hard_spi_readinto+0x40>)
   1aa08:	b004      	add	sp, #16
   1aa0a:	bd70      	pop	{r4, r5, r6, pc}
    memset(bufinfo.buf, n_args == 3 ? mp_obj_get_int(args[2]) : 0, bufinfo.len);
   1aa0c:	68a0      	ldr	r0, [r4, #8]
   1aa0e:	f7f0 f9dd 	bl	adcc <mp_obj_get_int>
   1aa12:	4601      	mov	r1, r0
   1aa14:	e7ed      	b.n	1a9f2 <mp_machine_hard_spi_readinto+0x1a>
   1aa16:	bf00      	nop
   1aa18:	00027b40 	.word	0x00027b40

0001aa1c <mp_machine_hard_spi_write>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_machine_hard_spi_readinto_obj, 2, 3, mp_machine_hard_spi_readinto);

STATIC mp_obj_t mp_machine_hard_spi_write(mp_obj_t self, mp_obj_t wr_buf) {
   1aa1c:	b510      	push	{r4, lr}
   1aa1e:	b084      	sub	sp, #16
   1aa20:	4604      	mov	r4, r0
   1aa22:	4608      	mov	r0, r1
    mp_buffer_info_t src;
    mp_get_buffer_raise(wr_buf, &src, MP_BUFFER_READ);
   1aa24:	2201      	movs	r2, #1
   1aa26:	a901      	add	r1, sp, #4
   1aa28:	f7f0 fc42 	bl	b2b0 <mp_get_buffer_raise>
    machine_hard_spi_transfer(self, src.len, (const uint8_t*)src.buf, NULL);
   1aa2c:	2300      	movs	r3, #0
   1aa2e:	9a01      	ldr	r2, [sp, #4]
   1aa30:	9902      	ldr	r1, [sp, #8]
   1aa32:	4620      	mov	r0, r4
   1aa34:	f7ff ffa1 	bl	1a97a <machine_hard_spi_transfer>
    return mp_const_none;
}
   1aa38:	4801      	ldr	r0, [pc, #4]	; (1aa40 <mp_machine_hard_spi_write+0x24>)
   1aa3a:	b004      	add	sp, #16
   1aa3c:	bd10      	pop	{r4, pc}
   1aa3e:	bf00      	nop
   1aa40:	00027b40 	.word	0x00027b40

0001aa44 <mp_machine_hard_spi_write_readinto>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_machine_hard_spi_write_obj, mp_machine_hard_spi_write);

STATIC mp_obj_t mp_machine_hard_spi_write_readinto(mp_obj_t self, mp_obj_t wr_buf, mp_obj_t rd_buf) {
   1aa44:	b530      	push	{r4, r5, lr}
   1aa46:	b087      	sub	sp, #28
   1aa48:	4605      	mov	r5, r0
   1aa4a:	4608      	mov	r0, r1
   1aa4c:	4614      	mov	r4, r2
    mp_buffer_info_t src;
    mp_get_buffer_raise(wr_buf, &src, MP_BUFFER_READ);
   1aa4e:	2201      	movs	r2, #1
   1aa50:	a903      	add	r1, sp, #12
   1aa52:	f7f0 fc2d 	bl	b2b0 <mp_get_buffer_raise>
    mp_buffer_info_t dest;
    mp_get_buffer_raise(rd_buf, &dest, MP_BUFFER_WRITE);
   1aa56:	2202      	movs	r2, #2
   1aa58:	4669      	mov	r1, sp
   1aa5a:	4620      	mov	r0, r4
   1aa5c:	f7f0 fc28 	bl	b2b0 <mp_get_buffer_raise>
    if (src.len != dest.len) {
   1aa60:	9904      	ldr	r1, [sp, #16]
   1aa62:	9b01      	ldr	r3, [sp, #4]
   1aa64:	4299      	cmp	r1, r3
   1aa66:	d107      	bne.n	1aa78 <mp_machine_hard_spi_write_readinto+0x34>
        mp_raise_ValueError("buffers must be the same length");
    }
    machine_hard_spi_transfer(self, src.len, src.buf, dest.buf);
   1aa68:	9b00      	ldr	r3, [sp, #0]
   1aa6a:	9a03      	ldr	r2, [sp, #12]
   1aa6c:	4628      	mov	r0, r5
   1aa6e:	f7ff ff84 	bl	1a97a <machine_hard_spi_transfer>
    return mp_const_none;
}
   1aa72:	4803      	ldr	r0, [pc, #12]	; (1aa80 <mp_machine_hard_spi_write_readinto+0x3c>)
   1aa74:	b007      	add	sp, #28
   1aa76:	bd30      	pop	{r4, r5, pc}
        mp_raise_ValueError("buffers must be the same length");
   1aa78:	4802      	ldr	r0, [pc, #8]	; (1aa84 <mp_machine_hard_spi_write_readinto+0x40>)
   1aa7a:	f7ef fc15 	bl	a2a8 <mp_raise_ValueError>
   1aa7e:	bf00      	nop
   1aa80:	00027b40 	.word	0x00027b40
   1aa84:	0002b9b0 	.word	0x0002b9b0

0001aa88 <sdcard_wait_finished>:
    // HAL_SD_IRQHandler(&sd_handle);
    IRQ_EXIT(INT_SSI2);
}


STATIC int sdcard_wait_finished(uint32_t timeout) {
   1aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa8a:	4607      	mov	r7, r0
    // Wait for HAL driver to be ready (eg for DMA to finish)
    uint32_t start = HAL_GetTick();
   1aa8c:	f7fd ffcc 	bl	18a28 <HAL_GetTick>
   1aa90:	4606      	mov	r6, r0
   1aa92:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1aa96:	b672      	cpsid	i
    for (;;) {
        // Do an atomic check of the state; WFI will exit even if IRQs are disabled
        uint32_t irq_state = disable_irq();
        if (!MAP_SSIBusy(SDC_GPIO_PORT_BASE)) {
   1aa98:	4808      	ldr	r0, [pc, #32]	; (1aabc <sdcard_wait_finished+0x34>)
   1aa9a:	f006 f822 	bl	20ae2 <SSIBusy>
   1aa9e:	b148      	cbz	r0, 1aab4 <sdcard_wait_finished+0x2c>
            enable_irq(irq_state);
            break;
        }
        __WFI();
   1aaa0:	bf30      	wfi
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1aaa2:	f384 8810 	msr	PRIMASK, r4
        enable_irq(irq_state);
        if (HAL_GetTick() - start >= timeout) {
   1aaa6:	f7fd ffbf 	bl	18a28 <HAL_GetTick>
   1aaaa:	1b80      	subs	r0, r0, r6
   1aaac:	42b8      	cmp	r0, r7
   1aaae:	d3f0      	bcc.n	1aa92 <sdcard_wait_finished+0xa>
            return MP_ETIMEDOUT;
   1aab0:	2074      	movs	r0, #116	; 0x74
   1aab2:	e001      	b.n	1aab8 <sdcard_wait_finished+0x30>
   1aab4:	f384 8810 	msr	PRIMASK, r4
    //         return HAL_TIMEOUT;
    //     }
    //     __WFI();
    // }
    return RES_OK;
}
   1aab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aaba:	bf00      	nop
   1aabc:	40059000 	.word	0x40059000

0001aac0 <pyb_sdcard_make_new>:
// Expose the SD card as an object with the block protocol.

// there is a singleton SDCard object
const mp_obj_base_t pyb_sdcard_obj = {&pyb_sdcard_type};

STATIC mp_obj_t pyb_sdcard_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1aac0:	b500      	push	{lr}
   1aac2:	b083      	sub	sp, #12
   1aac4:	4608      	mov	r0, r1
   1aac6:	4611      	mov	r1, r2
    // check arguments
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
   1aac8:	2200      	movs	r2, #0
   1aaca:	9200      	str	r2, [sp, #0]
   1aacc:	4613      	mov	r3, r2
   1aace:	f7ef fe23 	bl	a718 <mp_arg_check_num>

    // return singleton object
    return (mp_obj_t)&pyb_sdcard_obj;
}
   1aad2:	4802      	ldr	r0, [pc, #8]	; (1aadc <pyb_sdcard_make_new+0x1c>)
   1aad4:	b003      	add	sp, #12
   1aad6:	f85d fb04 	ldr.w	pc, [sp], #4
   1aada:	bf00      	nop
   1aadc:	0002ba60 	.word	0x0002ba60

0001aae0 <sd_assert_cs>:
void sd_assert_cs (void) {
   1aae0:	b508      	push	{r3, lr}
    ROM_GPIOPinWrite(SDC_GPIO_PORT_BASE, SDC_SSI_FSS, 0);
   1aae2:	4b04      	ldr	r3, [pc, #16]	; (1aaf4 <sd_assert_cs+0x14>)
   1aae4:	681b      	ldr	r3, [r3, #0]
   1aae6:	681b      	ldr	r3, [r3, #0]
   1aae8:	2200      	movs	r2, #0
   1aaea:	2120      	movs	r1, #32
   1aaec:	4802      	ldr	r0, [pc, #8]	; (1aaf8 <sd_assert_cs+0x18>)
   1aaee:	4798      	blx	r3
}
   1aaf0:	bd08      	pop	{r3, pc}
   1aaf2:	bf00      	nop
   1aaf4:	01000020 	.word	0x01000020
   1aaf8:	40059000 	.word	0x40059000

0001aafc <sd_deassert_cs>:
void sd_deassert_cs (void) {
   1aafc:	b508      	push	{r3, lr}
    ROM_GPIOPinWrite(SDC_GPIO_PORT_BASE, SDC_SSI_FSS, SDC_SSI_FSS);
   1aafe:	4b04      	ldr	r3, [pc, #16]	; (1ab10 <sd_deassert_cs+0x14>)
   1ab00:	681b      	ldr	r3, [r3, #0]
   1ab02:	681b      	ldr	r3, [r3, #0]
   1ab04:	2220      	movs	r2, #32
   1ab06:	4611      	mov	r1, r2
   1ab08:	4802      	ldr	r0, [pc, #8]	; (1ab14 <sd_deassert_cs+0x18>)
   1ab0a:	4798      	blx	r3
}
   1ab0c:	bd08      	pop	{r3, pc}
   1ab0e:	bf00      	nop
   1ab10:	01000020 	.word	0x01000020
   1ab14:	40059000 	.word	0x40059000

0001ab18 <sd_spi_send_byte>:
void sd_spi_send_byte(uint8_t dat) {
   1ab18:	b510      	push	{r4, lr}
   1ab1a:	b082      	sub	sp, #8
   1ab1c:	4604      	mov	r4, r0
    while(SSIBusy(SDC_SSI_BASE)){};
   1ab1e:	480c      	ldr	r0, [pc, #48]	; (1ab50 <sd_spi_send_byte+0x38>)
   1ab20:	f005 ffdf 	bl	20ae2 <SSIBusy>
   1ab24:	2800      	cmp	r0, #0
   1ab26:	d1fa      	bne.n	1ab1e <sd_spi_send_byte+0x6>
    ROM_SSIDataPut(SDC_SSI_BASE, dat); /* Write the data to the tx fifo */
   1ab28:	4b0a      	ldr	r3, [pc, #40]	; (1ab54 <sd_spi_send_byte+0x3c>)
   1ab2a:	681b      	ldr	r3, [r3, #0]
   1ab2c:	681b      	ldr	r3, [r3, #0]
   1ab2e:	4621      	mov	r1, r4
   1ab30:	4807      	ldr	r0, [pc, #28]	; (1ab50 <sd_spi_send_byte+0x38>)
   1ab32:	4798      	blx	r3
    while(SSIBusy(SDC_SSI_BASE)){};
   1ab34:	4806      	ldr	r0, [pc, #24]	; (1ab50 <sd_spi_send_byte+0x38>)
   1ab36:	f005 ffd4 	bl	20ae2 <SSIBusy>
   1ab3a:	2800      	cmp	r0, #0
   1ab3c:	d1fa      	bne.n	1ab34 <sd_spi_send_byte+0x1c>
    ROM_SSIDataGet(SDC_SSI_BASE, &ui32RcvDat); /* flush data read during the write */
   1ab3e:	4b05      	ldr	r3, [pc, #20]	; (1ab54 <sd_spi_send_byte+0x3c>)
   1ab40:	681b      	ldr	r3, [r3, #0]
   1ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab44:	a901      	add	r1, sp, #4
   1ab46:	4802      	ldr	r0, [pc, #8]	; (1ab50 <sd_spi_send_byte+0x38>)
   1ab48:	4798      	blx	r3
}
   1ab4a:	b002      	add	sp, #8
   1ab4c:	bd10      	pop	{r4, pc}
   1ab4e:	bf00      	nop
   1ab50:	4000a000 	.word	0x4000a000
   1ab54:	01000018 	.word	0x01000018

0001ab58 <sd_spi_recieve_byte>:
uint8_t sd_spi_recieve_byte (void) {
   1ab58:	b500      	push	{lr}
   1ab5a:	b083      	sub	sp, #12
    while(SSIBusy(SDC_SSI_BASE)){};
   1ab5c:	480d      	ldr	r0, [pc, #52]	; (1ab94 <sd_spi_recieve_byte+0x3c>)
   1ab5e:	f005 ffc0 	bl	20ae2 <SSIBusy>
   1ab62:	2800      	cmp	r0, #0
   1ab64:	d1fa      	bne.n	1ab5c <sd_spi_recieve_byte+0x4>
    ROM_SSIDataPut(SDC_SSI_BASE, 0xFF); /* write dummy data */
   1ab66:	4b0c      	ldr	r3, [pc, #48]	; (1ab98 <sd_spi_recieve_byte+0x40>)
   1ab68:	681b      	ldr	r3, [r3, #0]
   1ab6a:	681b      	ldr	r3, [r3, #0]
   1ab6c:	21ff      	movs	r1, #255	; 0xff
   1ab6e:	4809      	ldr	r0, [pc, #36]	; (1ab94 <sd_spi_recieve_byte+0x3c>)
   1ab70:	4798      	blx	r3
    while(SSIBusy(SDC_SSI_BASE)){};
   1ab72:	4808      	ldr	r0, [pc, #32]	; (1ab94 <sd_spi_recieve_byte+0x3c>)
   1ab74:	f005 ffb5 	bl	20ae2 <SSIBusy>
   1ab78:	2800      	cmp	r0, #0
   1ab7a:	d1fa      	bne.n	1ab72 <sd_spi_recieve_byte+0x1a>
    ROM_SSIDataGet(SDC_SSI_BASE, &ui32RcvDat); /* read data frm rx fifo */
   1ab7c:	4b06      	ldr	r3, [pc, #24]	; (1ab98 <sd_spi_recieve_byte+0x40>)
   1ab7e:	681b      	ldr	r3, [r3, #0]
   1ab80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab82:	a901      	add	r1, sp, #4
   1ab84:	4803      	ldr	r0, [pc, #12]	; (1ab94 <sd_spi_recieve_byte+0x3c>)
   1ab86:	4798      	blx	r3
}
   1ab88:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1ab8c:	b003      	add	sp, #12
   1ab8e:	f85d fb04 	ldr.w	pc, [sp], #4
   1ab92:	bf00      	nop
   1ab94:	4000a000 	.word	0x4000a000
   1ab98:	01000018 	.word	0x01000018

0001ab9c <sd_spi_recieve_byte_ptr>:
void sd_spi_recieve_byte_ptr (uint8_t *dst) {
   1ab9c:	b510      	push	{r4, lr}
   1ab9e:	4604      	mov	r4, r0
    *dst = sd_spi_recieve_byte();
   1aba0:	f7ff ffda 	bl	1ab58 <sd_spi_recieve_byte>
   1aba4:	7020      	strb	r0, [r4, #0]
}
   1aba6:	bd10      	pop	{r4, pc}

0001aba8 <sd_wait_ready>:
uint8_t sd_wait_ready (void) {
   1aba8:	b538      	push	{r3, r4, r5, lr}
    mp_uint_t start = mp_hal_ticks_ms();    /* Wait for ready in timeout of 500ms */
   1abaa:	f7ff f945 	bl	19e38 <mp_hal_ticks_ms>
   1abae:	4605      	mov	r5, r0
    sd_spi_recieve_byte();
   1abb0:	f7ff ffd2 	bl	1ab58 <sd_spi_recieve_byte>
        res = sd_spi_recieve_byte();
   1abb4:	f7ff ffd0 	bl	1ab58 <sd_spi_recieve_byte>
   1abb8:	4604      	mov	r4, r0
    while ((res != 0xFF) && (mp_hal_ticks_ms() - start) < 500);
   1abba:	28ff      	cmp	r0, #255	; 0xff
   1abbc:	d005      	beq.n	1abca <sd_wait_ready+0x22>
   1abbe:	f7ff f93b 	bl	19e38 <mp_hal_ticks_ms>
   1abc2:	1b40      	subs	r0, r0, r5
   1abc4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1abc8:	d3f4      	bcc.n	1abb4 <sd_wait_ready+0xc>
}
   1abca:	4620      	mov	r0, r4
   1abcc:	bd38      	pop	{r3, r4, r5, pc}
	...

0001abd0 <sd_sel_spi_mode>:
void sd_sel_spi_mode(void) {
   1abd0:	b570      	push	{r4, r5, r6, lr}
   1abd2:	b082      	sub	sp, #8
    sd_deassert_cs();
   1abd4:	f7ff ff92 	bl	1aafc <sd_deassert_cs>
    while(SSIBusy(SDC_SSI_BASE)){};
   1abd8:	480b      	ldr	r0, [pc, #44]	; (1ac08 <sd_sel_spi_mode+0x38>)
   1abda:	f005 ff82 	bl	20ae2 <SSIBusy>
   1abde:	2800      	cmp	r0, #0
   1abe0:	d1fa      	bne.n	1abd8 <sd_sel_spi_mode+0x8>
    for(i = 0 ; i < 10 ; i++)
   1abe2:	2400      	movs	r4, #0
   1abe4:	e00c      	b.n	1ac00 <sd_sel_spi_mode+0x30>
        ROM_SSIDataPut(SDC_SSI_BASE, 0xFF);
   1abe6:	4e09      	ldr	r6, [pc, #36]	; (1ac0c <sd_sel_spi_mode+0x3c>)
   1abe8:	6833      	ldr	r3, [r6, #0]
   1abea:	681b      	ldr	r3, [r3, #0]
   1abec:	4d06      	ldr	r5, [pc, #24]	; (1ac08 <sd_sel_spi_mode+0x38>)
   1abee:	21ff      	movs	r1, #255	; 0xff
   1abf0:	4628      	mov	r0, r5
   1abf2:	4798      	blx	r3
        ROM_SSIDataGet(SDC_SSI_BASE, &ui32Dat);
   1abf4:	6833      	ldr	r3, [r6, #0]
   1abf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1abf8:	a901      	add	r1, sp, #4
   1abfa:	4628      	mov	r0, r5
   1abfc:	4798      	blx	r3
    for(i = 0 ; i < 10 ; i++)
   1abfe:	3401      	adds	r4, #1
   1ac00:	2c09      	cmp	r4, #9
   1ac02:	d9f0      	bls.n	1abe6 <sd_sel_spi_mode+0x16>
}
   1ac04:	b002      	add	sp, #8
   1ac06:	bd70      	pop	{r4, r5, r6, pc}
   1ac08:	4000a000 	.word	0x4000a000
   1ac0c:	01000018 	.word	0x01000018

0001ac10 <sd_power_on>:
void sd_power_on (void) {
   1ac10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac12:	b083      	sub	sp, #12
    ROM_SysCtlPeripheralEnable(SDC_SSI_SYSCTL_PERIPH);
   1ac14:	4d29      	ldr	r5, [pc, #164]	; (1acbc <sd_power_on+0xac>)
   1ac16:	682b      	ldr	r3, [r5, #0]
   1ac18:	699b      	ldr	r3, [r3, #24]
   1ac1a:	4829      	ldr	r0, [pc, #164]	; (1acc0 <sd_power_on+0xb0>)
   1ac1c:	4798      	blx	r3
    ROM_SysCtlPeripheralEnable(SDC_GPIO_SYSCTL_PERIPH);
   1ac1e:	682b      	ldr	r3, [r5, #0]
   1ac20:	699b      	ldr	r3, [r3, #24]
   1ac22:	4828      	ldr	r0, [pc, #160]	; (1acc4 <sd_power_on+0xb4>)
   1ac24:	4798      	blx	r3
    GPIOPinConfigure(GPIO_PB4_SSI2CLK);
   1ac26:	4828      	ldr	r0, [pc, #160]	; (1acc8 <sd_power_on+0xb8>)
   1ac28:	f005 fea8 	bl	2097c <GPIOPinConfigure>
    GPIOPinConfigure(GPIO_PB6_SSI2RX);
   1ac2c:	4827      	ldr	r0, [pc, #156]	; (1accc <sd_power_on+0xbc>)
   1ac2e:	f005 fea5 	bl	2097c <GPIOPinConfigure>
    GPIOPinConfigure(GPIO_PB7_SSI2TX);
   1ac32:	4827      	ldr	r0, [pc, #156]	; (1acd0 <sd_power_on+0xc0>)
   1ac34:	f005 fea2 	bl	2097c <GPIOPinConfigure>
    ROM_GPIOPinTypeSSI(SDC_GPIO_PORT_BASE, SDC_SSI_TX | SDC_SSI_RX | SDC_SSI_CLK);
   1ac38:	4e26      	ldr	r6, [pc, #152]	; (1acd4 <sd_power_on+0xc4>)
   1ac3a:	6833      	ldr	r3, [r6, #0]
   1ac3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ac3e:	4c26      	ldr	r4, [pc, #152]	; (1acd8 <sd_power_on+0xc8>)
   1ac40:	21d0      	movs	r1, #208	; 0xd0
   1ac42:	4620      	mov	r0, r4
   1ac44:	4798      	blx	r3
    ROM_GPIOPinTypeGPIOOutput(SDC_GPIO_PORT_BASE, SDC_SSI_FSS);
   1ac46:	6833      	ldr	r3, [r6, #0]
   1ac48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ac4a:	2120      	movs	r1, #32
   1ac4c:	4620      	mov	r0, r4
   1ac4e:	4798      	blx	r3
    GPIOPinTypeGPIOInput(SDC_GPIO_PORT_BASE, MICROPY_HW_SDCARD_DETECT_PIN->pin_mask);
   1ac50:	4b22      	ldr	r3, [pc, #136]	; (1acdc <sd_power_on+0xcc>)
   1ac52:	f893 6024 	ldrb.w	r6, [r3, #36]	; 0x24
   1ac56:	4631      	mov	r1, r6
   1ac58:	4620      	mov	r0, r4
   1ac5a:	f005 fe80 	bl	2095e <GPIOPinTypeGPIOInput>
    GPIOPadConfigSet(SDC_GPIO_PORT_BASE, MICROPY_HW_SDCARD_DETECT_PIN->pin_mask, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
   1ac5e:	230a      	movs	r3, #10
   1ac60:	2201      	movs	r2, #1
   1ac62:	4631      	mov	r1, r6
   1ac64:	4620      	mov	r0, r4
   1ac66:	f005 fd7d 	bl	20764 <GPIOPadConfigSet>
    MAP_GPIOPadConfigSet(SDC_GPIO_PORT_BASE, SDC_SSI_RX, GPIO_STRENGTH_2MA,
   1ac6a:	230a      	movs	r3, #10
   1ac6c:	2201      	movs	r2, #1
   1ac6e:	2140      	movs	r1, #64	; 0x40
   1ac70:	4620      	mov	r0, r4
   1ac72:	f005 fd77 	bl	20764 <GPIOPadConfigSet>
    MAP_GPIOPadConfigSet(SDC_GPIO_PORT_BASE, SDC_SSI_CLK | SDC_SSI_TX | SDC_SSI_FSS,
   1ac76:	2308      	movs	r3, #8
   1ac78:	2201      	movs	r2, #1
   1ac7a:	21b0      	movs	r1, #176	; 0xb0
   1ac7c:	4620      	mov	r0, r4
   1ac7e:	f005 fd71 	bl	20764 <GPIOPadConfigSet>
    ROM_SSIConfigSetExpClk(SDC_SSI_BASE, ROM_SysCtlClockGet(),
   1ac82:	4e17      	ldr	r6, [pc, #92]	; (1ace0 <sd_power_on+0xd0>)
   1ac84:	6833      	ldr	r3, [r6, #0]
   1ac86:	685f      	ldr	r7, [r3, #4]
   1ac88:	682b      	ldr	r3, [r5, #0]
   1ac8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1ac8c:	4798      	blx	r3
   1ac8e:	f5a4 249e 	sub.w	r4, r4, #323584	; 0x4f000
   1ac92:	2308      	movs	r3, #8
   1ac94:	9301      	str	r3, [sp, #4]
   1ac96:	4b13      	ldr	r3, [pc, #76]	; (1ace4 <sd_power_on+0xd4>)
   1ac98:	9300      	str	r3, [sp, #0]
   1ac9a:	2300      	movs	r3, #0
   1ac9c:	461a      	mov	r2, r3
   1ac9e:	4601      	mov	r1, r0
   1aca0:	4620      	mov	r0, r4
   1aca2:	47b8      	blx	r7
    ROM_SSIEnable(SDC_SSI_BASE);
   1aca4:	6833      	ldr	r3, [r6, #0]
   1aca6:	689b      	ldr	r3, [r3, #8]
   1aca8:	4620      	mov	r0, r4
   1acaa:	4798      	blx	r3
    sd_sel_spi_mode();
   1acac:	f7ff ff90 	bl	1abd0 <sd_sel_spi_mode>
    PowerFlag = 1;
   1acb0:	4b0d      	ldr	r3, [pc, #52]	; (1ace8 <sd_power_on+0xd8>)
   1acb2:	2201      	movs	r2, #1
   1acb4:	701a      	strb	r2, [r3, #0]
}
   1acb6:	b003      	add	sp, #12
   1acb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1acba:	bf00      	nop
   1acbc:	01000044 	.word	0x01000044
   1acc0:	f0001c02 	.word	0xf0001c02
   1acc4:	f0000801 	.word	0xf0000801
   1acc8:	00011002 	.word	0x00011002
   1accc:	00011802 	.word	0x00011802
   1acd0:	00011c02 	.word	0x00011c02
   1acd4:	01000020 	.word	0x01000020
   1acd8:	40059000 	.word	0x40059000
   1acdc:	0002ca84 	.word	0x0002ca84
   1ace0:	01000018 	.word	0x01000018
   1ace4:	00030d40 	.word	0x00030d40
   1ace8:	20000678 	.word	0x20000678

0001acec <sd_spi_set_max_speed>:
void sd_spi_set_max_speed(void) {
   1acec:	b530      	push	{r4, r5, lr}
   1acee:	b083      	sub	sp, #12
    ROM_SSIDisable(SDC_SSI_BASE);
   1acf0:	4b11      	ldr	r3, [pc, #68]	; (1ad38 <sd_spi_set_max_speed+0x4c>)
   1acf2:	681b      	ldr	r3, [r3, #0]
   1acf4:	68db      	ldr	r3, [r3, #12]
   1acf6:	4811      	ldr	r0, [pc, #68]	; (1ad3c <sd_spi_set_max_speed+0x50>)
   1acf8:	4798      	blx	r3
    i = ROM_SysCtlClockGet() / 2;
   1acfa:	4b11      	ldr	r3, [pc, #68]	; (1ad40 <sd_spi_set_max_speed+0x54>)
   1acfc:	681b      	ldr	r3, [r3, #0]
   1acfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1ad00:	4798      	blx	r3
   1ad02:	0844      	lsrs	r4, r0, #1
    if(i > 12000000)
   1ad04:	4b0f      	ldr	r3, [pc, #60]	; (1ad44 <sd_spi_set_max_speed+0x58>)
   1ad06:	429c      	cmp	r4, r3
   1ad08:	d900      	bls.n	1ad0c <sd_spi_set_max_speed+0x20>
        i = 12000000;
   1ad0a:	461c      	mov	r4, r3
    SSIConfigSetExpClk(SDC_SSI_BASE, ROM_SysCtlClockGet(),
   1ad0c:	4b0c      	ldr	r3, [pc, #48]	; (1ad40 <sd_spi_set_max_speed+0x54>)
   1ad0e:	681b      	ldr	r3, [r3, #0]
   1ad10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1ad12:	4798      	blx	r3
   1ad14:	4d09      	ldr	r5, [pc, #36]	; (1ad3c <sd_spi_set_max_speed+0x50>)
   1ad16:	2308      	movs	r3, #8
   1ad18:	9301      	str	r3, [sp, #4]
   1ad1a:	9400      	str	r4, [sp, #0]
   1ad1c:	2300      	movs	r3, #0
   1ad1e:	461a      	mov	r2, r3
   1ad20:	4601      	mov	r1, r0
   1ad22:	4628      	mov	r0, r5
   1ad24:	f005 fe9c 	bl	20a60 <SSIConfigSetExpClk>
    ROM_SSIEnable(SDC_SSI_BASE);
   1ad28:	4b03      	ldr	r3, [pc, #12]	; (1ad38 <sd_spi_set_max_speed+0x4c>)
   1ad2a:	681b      	ldr	r3, [r3, #0]
   1ad2c:	689b      	ldr	r3, [r3, #8]
   1ad2e:	4628      	mov	r0, r5
   1ad30:	4798      	blx	r3
}
   1ad32:	b003      	add	sp, #12
   1ad34:	bd30      	pop	{r4, r5, pc}
   1ad36:	bf00      	nop
   1ad38:	01000018 	.word	0x01000018
   1ad3c:	4000a000 	.word	0x4000a000
   1ad40:	01000044 	.word	0x01000044
   1ad44:	00b71b00 	.word	0x00b71b00

0001ad48 <sd_power_off>:
void sd_power_off (void) {
   1ad48:	b508      	push	{r3, lr}
    MAP_SysCtlPeripheralDisable(SDC_SSI_SYSCTL_PERIPH);
   1ad4a:	4803      	ldr	r0, [pc, #12]	; (1ad58 <sd_power_off+0x10>)
   1ad4c:	f005 fef2 	bl	20b34 <SysCtlPeripheralDisable>
    PowerFlag = 0;
   1ad50:	4b02      	ldr	r3, [pc, #8]	; (1ad5c <sd_power_off+0x14>)
   1ad52:	2200      	movs	r2, #0
   1ad54:	701a      	strb	r2, [r3, #0]
}
   1ad56:	bd08      	pop	{r3, pc}
   1ad58:	f0001c02 	.word	0xf0001c02
   1ad5c:	20000678 	.word	0x20000678

0001ad60 <sd_chk_power>:
}
   1ad60:	4b01      	ldr	r3, [pc, #4]	; (1ad68 <sd_chk_power+0x8>)
   1ad62:	7818      	ldrb	r0, [r3, #0]
   1ad64:	4770      	bx	lr
   1ad66:	bf00      	nop
   1ad68:	20000678 	.word	0x20000678

0001ad6c <sd_spi_receive_block>:
) {
   1ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad6e:	4605      	mov	r5, r0
   1ad70:	460e      	mov	r6, r1
    mp_uint_t start = mp_hal_ticks_ms();
   1ad72:	f7ff f861 	bl	19e38 <mp_hal_ticks_ms>
   1ad76:	4607      	mov	r7, r0
        token = sd_spi_recieve_byte();
   1ad78:	f7ff feee 	bl	1ab58 <sd_spi_recieve_byte>
   1ad7c:	4604      	mov	r4, r0
    } while ((token == 0xFF) && (mp_hal_ticks_ms() - start) < 100);
   1ad7e:	28ff      	cmp	r0, #255	; 0xff
   1ad80:	d104      	bne.n	1ad8c <sd_spi_receive_block+0x20>
   1ad82:	f7ff f859 	bl	19e38 <mp_hal_ticks_ms>
   1ad86:	1bc0      	subs	r0, r0, r7
   1ad88:	2863      	cmp	r0, #99	; 0x63
   1ad8a:	d9f5      	bls.n	1ad78 <sd_spi_receive_block+0xc>
    if(token != 0xFE) return false;    /* If not valid data token, retutn with error */
   1ad8c:	2cfe      	cmp	r4, #254	; 0xfe
   1ad8e:	d001      	beq.n	1ad94 <sd_spi_receive_block+0x28>
   1ad90:	2000      	movs	r0, #0
}
   1ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sd_spi_recieve_byte_ptr(buff++);
   1ad94:	1c6c      	adds	r4, r5, #1
   1ad96:	4628      	mov	r0, r5
   1ad98:	f7ff ff00 	bl	1ab9c <sd_spi_recieve_byte_ptr>
        sd_spi_recieve_byte_ptr(buff++);
   1ad9c:	4620      	mov	r0, r4
   1ad9e:	3502      	adds	r5, #2
   1ada0:	f7ff fefc 	bl	1ab9c <sd_spi_recieve_byte_ptr>
    } while (btr -= 2);
   1ada4:	3e02      	subs	r6, #2
   1ada6:	d1f5      	bne.n	1ad94 <sd_spi_receive_block+0x28>
    sd_spi_recieve_byte();                        /* Discard CRC */
   1ada8:	f7ff fed6 	bl	1ab58 <sd_spi_recieve_byte>
    sd_spi_recieve_byte();
   1adac:	f7ff fed4 	bl	1ab58 <sd_spi_recieve_byte>
    return true;                    /* Return with success */
   1adb0:	2001      	movs	r0, #1
   1adb2:	e7ee      	b.n	1ad92 <sd_spi_receive_block+0x26>

0001adb4 <sd_spi_transmit_block>:
) {
   1adb4:	b570      	push	{r4, r5, r6, lr}
   1adb6:	4606      	mov	r6, r0
   1adb8:	460c      	mov	r4, r1
    if (sd_wait_ready() != 0xFF) return false;
   1adba:	f7ff fef5 	bl	1aba8 <sd_wait_ready>
   1adbe:	28ff      	cmp	r0, #255	; 0xff
   1adc0:	d001      	beq.n	1adc6 <sd_spi_transmit_block+0x12>
   1adc2:	2000      	movs	r0, #0
}
   1adc4:	bd70      	pop	{r4, r5, r6, pc}
    sd_spi_send_byte(token);                    /* Xmit data token */
   1adc6:	4620      	mov	r0, r4
   1adc8:	f7ff fea6 	bl	1ab18 <sd_spi_send_byte>
    if (token != 0xFD) {    /* Is data token */
   1adcc:	2cfd      	cmp	r4, #253	; 0xfd
   1adce:	d01b      	beq.n	1ae08 <sd_spi_transmit_block+0x54>
        wc = 0;
   1add0:	2400      	movs	r4, #0
            sd_spi_send_byte(*buff++);
   1add2:	4635      	mov	r5, r6
   1add4:	f815 0b02 	ldrb.w	r0, [r5], #2
   1add8:	f7ff fe9e 	bl	1ab18 <sd_spi_send_byte>
            sd_spi_send_byte(*buff++);
   1addc:	7870      	ldrb	r0, [r6, #1]
   1adde:	f7ff fe9b 	bl	1ab18 <sd_spi_send_byte>
        } while (--wc);
   1ade2:	1e63      	subs	r3, r4, #1
            sd_spi_send_byte(*buff++);
   1ade4:	462e      	mov	r6, r5
        } while (--wc);
   1ade6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   1adea:	d1f2      	bne.n	1add2 <sd_spi_transmit_block+0x1e>
        sd_spi_send_byte(0xFF);                    /* CRC (Dummy) */
   1adec:	20ff      	movs	r0, #255	; 0xff
   1adee:	f7ff fe93 	bl	1ab18 <sd_spi_send_byte>
        sd_spi_send_byte(0xFF);
   1adf2:	20ff      	movs	r0, #255	; 0xff
   1adf4:	f7ff fe90 	bl	1ab18 <sd_spi_send_byte>
        resp = sd_spi_recieve_byte();                /* Reveive data response */
   1adf8:	f7ff feae 	bl	1ab58 <sd_spi_recieve_byte>
        if ((resp & 0x1F) != 0x05)        /* If not accepted, return with error */
   1adfc:	f000 001f 	and.w	r0, r0, #31
   1ae00:	2805      	cmp	r0, #5
   1ae02:	d003      	beq.n	1ae0c <sd_spi_transmit_block+0x58>
            return false;
   1ae04:	2000      	movs	r0, #0
   1ae06:	e7dd      	b.n	1adc4 <sd_spi_transmit_block+0x10>
    return true;
   1ae08:	2001      	movs	r0, #1
   1ae0a:	e7db      	b.n	1adc4 <sd_spi_transmit_block+0x10>
   1ae0c:	2001      	movs	r0, #1
   1ae0e:	e7d9      	b.n	1adc4 <sd_spi_transmit_block+0x10>

0001ae10 <sd_spi_send_cmd>:
) {
   1ae10:	b570      	push	{r4, r5, r6, lr}
   1ae12:	4604      	mov	r4, r0
   1ae14:	460e      	mov	r6, r1
    if (sd_wait_ready() != 0xFF) return 0xFF;
   1ae16:	f7ff fec7 	bl	1aba8 <sd_wait_ready>
   1ae1a:	28ff      	cmp	r0, #255	; 0xff
   1ae1c:	d001      	beq.n	1ae22 <sd_spi_send_cmd+0x12>
   1ae1e:	20ff      	movs	r0, #255	; 0xff
}
   1ae20:	bd70      	pop	{r4, r5, r6, pc}
   1ae22:	4605      	mov	r5, r0
    sd_spi_send_byte(cmd);                        /* Command */
   1ae24:	4620      	mov	r0, r4
   1ae26:	f7ff fe77 	bl	1ab18 <sd_spi_send_byte>
    sd_spi_send_byte((uint8_t)(arg >> 24));        /* Argument[31..24] */
   1ae2a:	0e30      	lsrs	r0, r6, #24
   1ae2c:	f7ff fe74 	bl	1ab18 <sd_spi_send_byte>
    sd_spi_send_byte((uint8_t)(arg >> 16));        /* Argument[23..16] */
   1ae30:	f3c6 4007 	ubfx	r0, r6, #16, #8
   1ae34:	f7ff fe70 	bl	1ab18 <sd_spi_send_byte>
    sd_spi_send_byte((uint8_t)(arg >> 8));            /* Argument[15..8] */
   1ae38:	f3c6 2007 	ubfx	r0, r6, #8, #8
   1ae3c:	f7ff fe6c 	bl	1ab18 <sd_spi_send_byte>
    sd_spi_send_byte((uint8_t)arg);                /* Argument[7..0] */
   1ae40:	b2f0      	uxtb	r0, r6
   1ae42:	f7ff fe69 	bl	1ab18 <sd_spi_send_byte>
    if (cmd == CMD0) n = 0x95;            /* CRC for CMD0(0) */
   1ae46:	2c40      	cmp	r4, #64	; 0x40
   1ae48:	d013      	beq.n	1ae72 <sd_spi_send_cmd+0x62>
    if (cmd == CMD8) n = 0x87;            /* CRC for CMD8(0x1AA) */
   1ae4a:	2c48      	cmp	r4, #72	; 0x48
   1ae4c:	d013      	beq.n	1ae76 <sd_spi_send_cmd+0x66>
    if (cmd == CMD41) n = 0x95;
   1ae4e:	2c69      	cmp	r4, #105	; 0x69
   1ae50:	d013      	beq.n	1ae7a <sd_spi_send_cmd+0x6a>
    sd_spi_send_byte(n);
   1ae52:	4628      	mov	r0, r5
   1ae54:	f7ff fe60 	bl	1ab18 <sd_spi_send_byte>
    if (cmd == CMD12) sd_spi_recieve_byte();        /* Skip a stuff byte when stop reading */
   1ae58:	2c4c      	cmp	r4, #76	; 0x4c
   1ae5a:	d010      	beq.n	1ae7e <sd_spi_send_cmd+0x6e>
    if (cmd == CMD41) n = 0x95;
   1ae5c:	240a      	movs	r4, #10
        res = sd_spi_recieve_byte();
   1ae5e:	f7ff fe7b 	bl	1ab58 <sd_spi_recieve_byte>
    while ((res & 0x80) && --n);
   1ae62:	f010 0f80 	tst.w	r0, #128	; 0x80
   1ae66:	d0db      	beq.n	1ae20 <sd_spi_send_cmd+0x10>
   1ae68:	1e63      	subs	r3, r4, #1
   1ae6a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   1ae6e:	d1f6      	bne.n	1ae5e <sd_spi_send_cmd+0x4e>
   1ae70:	e7d6      	b.n	1ae20 <sd_spi_send_cmd+0x10>
    if (cmd == CMD0) n = 0x95;            /* CRC for CMD0(0) */
   1ae72:	2595      	movs	r5, #149	; 0x95
   1ae74:	e7e9      	b.n	1ae4a <sd_spi_send_cmd+0x3a>
    if (cmd == CMD8) n = 0x87;            /* CRC for CMD8(0x1AA) */
   1ae76:	2587      	movs	r5, #135	; 0x87
   1ae78:	e7e9      	b.n	1ae4e <sd_spi_send_cmd+0x3e>
    if (cmd == CMD41) n = 0x95;
   1ae7a:	2595      	movs	r5, #149	; 0x95
   1ae7c:	e7e9      	b.n	1ae52 <sd_spi_send_cmd+0x42>
    if (cmd == CMD12) sd_spi_recieve_byte();        /* Skip a stuff byte when stop reading */
   1ae7e:	f7ff fe6b 	bl	1ab58 <sd_spi_recieve_byte>
   1ae82:	e7eb      	b.n	1ae5c <sd_spi_send_cmd+0x4c>

0001ae84 <sd_spi_send_cmd12>:
uint8_t sd_spi_send_cmd12 (void) {
   1ae84:	b538      	push	{r3, r4, r5, lr}
    sd_spi_send_byte(CMD12);
   1ae86:	204c      	movs	r0, #76	; 0x4c
   1ae88:	f7ff fe46 	bl	1ab18 <sd_spi_send_byte>
    sd_spi_send_byte(0);
   1ae8c:	2000      	movs	r0, #0
   1ae8e:	f7ff fe43 	bl	1ab18 <sd_spi_send_byte>
    sd_spi_send_byte(0);
   1ae92:	2000      	movs	r0, #0
   1ae94:	f7ff fe40 	bl	1ab18 <sd_spi_send_byte>
    sd_spi_send_byte(0);
   1ae98:	2000      	movs	r0, #0
   1ae9a:	f7ff fe3d 	bl	1ab18 <sd_spi_send_byte>
    sd_spi_send_byte(0);
   1ae9e:	2000      	movs	r0, #0
   1aea0:	f7ff fe3a 	bl	1ab18 <sd_spi_send_byte>
    sd_spi_send_byte(0);
   1aea4:	2000      	movs	r0, #0
   1aea6:	f7ff fe37 	bl	1ab18 <sd_spi_send_byte>
    uint8_t res = 0;
   1aeaa:	2500      	movs	r5, #0
    for(n = 0; n < 10; n++)
   1aeac:	462c      	mov	r4, r5
   1aeae:	e001      	b.n	1aeb4 <sd_spi_send_cmd12+0x30>
   1aeb0:	3401      	adds	r4, #1
   1aeb2:	b2e4      	uxtb	r4, r4
   1aeb4:	2c09      	cmp	r4, #9
   1aeb6:	d805      	bhi.n	1aec4 <sd_spi_send_cmd12+0x40>
        val = sd_spi_recieve_byte();
   1aeb8:	f7ff fe4e 	bl	1ab58 <sd_spi_recieve_byte>
        if(val != 0xFF)
   1aebc:	28ff      	cmp	r0, #255	; 0xff
   1aebe:	d0f7      	beq.n	1aeb0 <sd_spi_send_cmd12+0x2c>
            res = val;
   1aec0:	4605      	mov	r5, r0
   1aec2:	e7f5      	b.n	1aeb0 <sd_spi_send_cmd12+0x2c>
}
   1aec4:	4628      	mov	r0, r5
   1aec6:	bd38      	pop	{r3, r4, r5, pc}

0001aec8 <sd_disk_read>:
    if (drv || !count) return RES_PARERR;
   1aec8:	2800      	cmp	r0, #0
   1aeca:	d13f      	bne.n	1af4c <sd_disk_read+0x84>
) {
   1aecc:	b570      	push	{r4, r5, r6, lr}
   1aece:	460d      	mov	r5, r1
   1aed0:	4616      	mov	r6, r2
   1aed2:	461c      	mov	r4, r3
    if (drv || !count) return RES_PARERR;
   1aed4:	2b00      	cmp	r3, #0
   1aed6:	d03b      	beq.n	1af50 <sd_disk_read+0x88>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
   1aed8:	4b1f      	ldr	r3, [pc, #124]	; (1af58 <sd_disk_read+0x90>)
   1aeda:	781b      	ldrb	r3, [r3, #0]
   1aedc:	f013 0f01 	tst.w	r3, #1
   1aee0:	d138      	bne.n	1af54 <sd_disk_read+0x8c>
    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
   1aee2:	4b1e      	ldr	r3, [pc, #120]	; (1af5c <sd_disk_read+0x94>)
   1aee4:	781b      	ldrb	r3, [r3, #0]
   1aee6:	f013 0f04 	tst.w	r3, #4
   1aeea:	d100      	bne.n	1aeee <sd_disk_read+0x26>
   1aeec:	0256      	lsls	r6, r2, #9
    sd_assert_cs();            /* CS = L */
   1aeee:	f7ff fdf7 	bl	1aae0 <sd_assert_cs>
    if (count == 1) {    /* Single block read */
   1aef2:	2c01      	cmp	r4, #1
   1aef4:	d01a      	beq.n	1af2c <sd_disk_read+0x64>
        if (sd_spi_send_cmd(CMD18, sector) == 0) {    /* READ_MULTIPLE_BLOCK */
   1aef6:	4631      	mov	r1, r6
   1aef8:	2052      	movs	r0, #82	; 0x52
   1aefa:	f7ff ff89 	bl	1ae10 <sd_spi_send_cmd>
   1aefe:	b968      	cbnz	r0, 1af1c <sd_disk_read+0x54>
                if (!sd_spi_receive_block(buff, 512)) break;
   1af00:	f44f 7100 	mov.w	r1, #512	; 0x200
   1af04:	4628      	mov	r0, r5
   1af06:	f7ff ff31 	bl	1ad6c <sd_spi_receive_block>
   1af0a:	b128      	cbz	r0, 1af18 <sd_disk_read+0x50>
                buff += 512;
   1af0c:	f505 7500 	add.w	r5, r5, #512	; 0x200
            } while (--count);
   1af10:	3c01      	subs	r4, #1
   1af12:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1af16:	d1f3      	bne.n	1af00 <sd_disk_read+0x38>
            sd_spi_send_cmd12();                /* STOP_TRANSMISSION */
   1af18:	f7ff ffb4 	bl	1ae84 <sd_spi_send_cmd12>
    sd_deassert_cs();            /* CS = H */
   1af1c:	f7ff fdee 	bl	1aafc <sd_deassert_cs>
    sd_spi_recieve_byte();            /* Idle (Release DO) */
   1af20:	f7ff fe1a 	bl	1ab58 <sd_spi_recieve_byte>
    return count ? RES_ERROR : RES_OK;
   1af24:	1c20      	adds	r0, r4, #0
   1af26:	bf18      	it	ne
   1af28:	2001      	movne	r0, #1
}
   1af2a:	bd70      	pop	{r4, r5, r6, pc}
        if ((sd_spi_send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
   1af2c:	4631      	mov	r1, r6
   1af2e:	2051      	movs	r0, #81	; 0x51
   1af30:	f7ff ff6e 	bl	1ae10 <sd_spi_send_cmd>
   1af34:	4606      	mov	r6, r0
   1af36:	2800      	cmp	r0, #0
   1af38:	d1f0      	bne.n	1af1c <sd_disk_read+0x54>
            && sd_spi_receive_block(buff, 512))
   1af3a:	f44f 7100 	mov.w	r1, #512	; 0x200
   1af3e:	4628      	mov	r0, r5
   1af40:	f7ff ff14 	bl	1ad6c <sd_spi_receive_block>
   1af44:	2800      	cmp	r0, #0
   1af46:	d0e9      	beq.n	1af1c <sd_disk_read+0x54>
            count = 0;
   1af48:	4634      	mov	r4, r6
   1af4a:	e7e7      	b.n	1af1c <sd_disk_read+0x54>
    if (drv || !count) return RES_PARERR;
   1af4c:	2004      	movs	r0, #4
}
   1af4e:	4770      	bx	lr
    if (drv || !count) return RES_PARERR;
   1af50:	2004      	movs	r0, #4
   1af52:	e7ea      	b.n	1af2a <sd_disk_read+0x62>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
   1af54:	2003      	movs	r0, #3
   1af56:	e7e8      	b.n	1af2a <sd_disk_read+0x62>
   1af58:	20000000 	.word	0x20000000
   1af5c:	20000ea4 	.word	0x20000ea4

0001af60 <sdcard_read_blocks>:
mp_uint_t sdcard_read_blocks(uint8_t *dest, uint32_t block_num, uint32_t num_blocks) {
   1af60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af62:	b083      	sub	sp, #12
   1af64:	4604      	mov	r4, r0
   1af66:	4616      	mov	r6, r2
    if (((uint32_t)dest & 3) != 0) {
   1af68:	f010 0f03 	tst.w	r0, #3
   1af6c:	d01b      	beq.n	1afa6 <sdcard_read_blocks+0x46>
        dest = (uint8_t*)((uint32_t)dest & ~3);
   1af6e:	f020 0303 	bic.w	r3, r0, #3
        saved_word = *(uint32_t*)dest;
   1af72:	681a      	ldr	r2, [r3, #0]
   1af74:	9201      	str	r2, [sp, #4]
        orig_dest = dest;
   1af76:	4605      	mov	r5, r0
        dest = (uint8_t*)((uint32_t)dest & ~3);
   1af78:	461c      	mov	r4, r3
        err = sd_disk_read(0, dest, block_num, num_blocks);
   1af7a:	b2f3      	uxtb	r3, r6
   1af7c:	460a      	mov	r2, r1
   1af7e:	4621      	mov	r1, r4
   1af80:	2000      	movs	r0, #0
   1af82:	f7ff ffa1 	bl	1aec8 <sd_disk_read>
        if (err == RES_OK) {
   1af86:	4607      	mov	r7, r0
   1af88:	b178      	cbz	r0, 1afaa <sdcard_read_blocks+0x4a>
    if (orig_dest != NULL) {
   1af8a:	b14d      	cbz	r5, 1afa0 <sdcard_read_blocks+0x40>
        memmove(orig_dest, dest, num_blocks * SDCARD_BLOCK_SIZE);
   1af8c:	0272      	lsls	r2, r6, #9
   1af8e:	4621      	mov	r1, r4
   1af90:	4628      	mov	r0, r5
   1af92:	f000 fc5b 	bl	1b84c <memmove>
        memcpy(dest, &saved_word, orig_dest - dest);
   1af96:	1b2a      	subs	r2, r5, r4
   1af98:	a901      	add	r1, sp, #4
   1af9a:	4620      	mov	r0, r4
   1af9c:	f000 fc2a 	bl	1b7f4 <memcpy>
}
   1afa0:	4638      	mov	r0, r7
   1afa2:	b003      	add	sp, #12
   1afa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t *orig_dest = NULL;
   1afa6:	2500      	movs	r5, #0
   1afa8:	e7e7      	b.n	1af7a <sdcard_read_blocks+0x1a>
            err = sdcard_wait_finished(60000);
   1afaa:	f64e 2060 	movw	r0, #60000	; 0xea60
   1afae:	f7ff fd6b 	bl	1aa88 <sdcard_wait_finished>
   1afb2:	b2c7      	uxtb	r7, r0
   1afb4:	e7e9      	b.n	1af8a <sdcard_read_blocks+0x2a>
	...

0001afb8 <pyb_sdcard_readblocks>:

    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_3(sd_write_obj, sd_write);

STATIC mp_obj_t pyb_sdcard_readblocks(mp_obj_t self, mp_obj_t block_num, mp_obj_t buf) {
   1afb8:	b530      	push	{r4, r5, lr}
   1afba:	b085      	sub	sp, #20
   1afbc:	460d      	mov	r5, r1
   1afbe:	4610      	mov	r0, r2
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(buf, &bufinfo, MP_BUFFER_WRITE);
   1afc0:	2202      	movs	r2, #2
   1afc2:	a901      	add	r1, sp, #4
   1afc4:	f7f0 f974 	bl	b2b0 <mp_get_buffer_raise>
    mp_uint_t ret = sdcard_read_blocks(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SDCARD_BLOCK_SIZE);
   1afc8:	9c01      	ldr	r4, [sp, #4]
   1afca:	4628      	mov	r0, r5
   1afcc:	f7ef fefe 	bl	adcc <mp_obj_get_int>
   1afd0:	9a02      	ldr	r2, [sp, #8]
   1afd2:	0a52      	lsrs	r2, r2, #9
   1afd4:	4601      	mov	r1, r0
   1afd6:	4620      	mov	r0, r4
   1afd8:	f7ff ffc2 	bl	1af60 <sdcard_read_blocks>
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1afdc:	b110      	cbz	r0, 1afe4 <pyb_sdcard_readblocks+0x2c>
   1afde:	4802      	ldr	r0, [pc, #8]	; (1afe8 <pyb_sdcard_readblocks+0x30>)
    return mp_obj_new_bool(ret == 0);
}
   1afe0:	b005      	add	sp, #20
   1afe2:	bd30      	pop	{r4, r5, pc}
   1afe4:	4801      	ldr	r0, [pc, #4]	; (1afec <pyb_sdcard_readblocks+0x34>)
   1afe6:	e7fb      	b.n	1afe0 <pyb_sdcard_readblocks+0x28>
   1afe8:	00025f44 	.word	0x00025f44
   1afec:	00025f4c 	.word	0x00025f4c

0001aff0 <sd_read>:
STATIC mp_obj_t sd_read(mp_obj_t self, mp_obj_t block_num) {
   1aff0:	b538      	push	{r3, r4, r5, lr}
   1aff2:	460d      	mov	r5, r1
    uint8_t *dest = m_new(uint8_t, SDCARD_BLOCK_SIZE);
   1aff4:	f44f 7000 	mov.w	r0, #512	; 0x200
   1aff8:	f7e5 fc60 	bl	8bc <m_malloc>
   1affc:	4604      	mov	r4, r0
    mp_uint_t ret = sdcard_read_blocks(dest, mp_obj_get_int(block_num), 1);
   1affe:	4628      	mov	r0, r5
   1b000:	f7ef fee4 	bl	adcc <mp_obj_get_int>
   1b004:	2201      	movs	r2, #1
   1b006:	4601      	mov	r1, r0
   1b008:	4620      	mov	r0, r4
   1b00a:	f7ff ffa9 	bl	1af60 <sdcard_read_blocks>
    if (ret != 0) {
   1b00e:	b928      	cbnz	r0, 1b01c <sd_read+0x2c>
    return mp_obj_new_bytearray_by_ref(SDCARD_BLOCK_SIZE, dest);
   1b010:	4621      	mov	r1, r4
   1b012:	f44f 7000 	mov.w	r0, #512	; 0x200
   1b016:	f7f0 fc45 	bl	b8a4 <mp_obj_new_bytearray_by_ref>
}
   1b01a:	bd38      	pop	{r3, r4, r5, pc}
   1b01c:	4605      	mov	r5, r0
        m_del(uint8_t, dest, SDCARD_BLOCK_SIZE);
   1b01e:	4620      	mov	r0, r4
   1b020:	f7e5 fc75 	bl	90e <m_free>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_Exception, "sdcard_read_blocks failed [%u]", ret));
   1b024:	462a      	mov	r2, r5
   1b026:	4903      	ldr	r1, [pc, #12]	; (1b034 <sd_read+0x44>)
   1b028:	4803      	ldr	r0, [pc, #12]	; (1b038 <sd_read+0x48>)
   1b02a:	f7f1 fd4f 	bl	cacc <mp_obj_new_exception_msg_varg>
   1b02e:	f7e5 fc27 	bl	880 <nlr_jump>
   1b032:	bf00      	nop
   1b034:	0002bac8 	.word	0x0002bac8
   1b038:	00026888 	.word	0x00026888

0001b03c <sd_disk_write>:
    if (drv || !count) return RES_PARERR;
   1b03c:	2800      	cmp	r0, #0
   1b03e:	d155      	bne.n	1b0ec <sd_disk_write+0xb0>
) {
   1b040:	b570      	push	{r4, r5, r6, lr}
   1b042:	460d      	mov	r5, r1
   1b044:	4616      	mov	r6, r2
   1b046:	461c      	mov	r4, r3
    if (drv || !count) return RES_PARERR;
   1b048:	2b00      	cmp	r3, #0
   1b04a:	d051      	beq.n	1b0f0 <sd_disk_write+0xb4>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
   1b04c:	4b2b      	ldr	r3, [pc, #172]	; (1b0fc <sd_disk_write+0xc0>)
   1b04e:	781b      	ldrb	r3, [r3, #0]
   1b050:	f013 0f01 	tst.w	r3, #1
   1b054:	d14e      	bne.n	1b0f4 <sd_disk_write+0xb8>
    if (Stat & STA_PROTECT) return RES_WRPRT;
   1b056:	4b29      	ldr	r3, [pc, #164]	; (1b0fc <sd_disk_write+0xc0>)
   1b058:	781b      	ldrb	r3, [r3, #0]
   1b05a:	f013 0f04 	tst.w	r3, #4
   1b05e:	d14b      	bne.n	1b0f8 <sd_disk_write+0xbc>
    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
   1b060:	4b27      	ldr	r3, [pc, #156]	; (1b100 <sd_disk_write+0xc4>)
   1b062:	781b      	ldrb	r3, [r3, #0]
   1b064:	f013 0f04 	tst.w	r3, #4
   1b068:	d100      	bne.n	1b06c <sd_disk_write+0x30>
   1b06a:	0256      	lsls	r6, r2, #9
    sd_assert_cs();            /* CS = L */
   1b06c:	f7ff fd38 	bl	1aae0 <sd_assert_cs>
    if (count == 1) {    /* Single block write */
   1b070:	2c01      	cmp	r4, #1
   1b072:	d021      	beq.n	1b0b8 <sd_disk_write+0x7c>
        if (CardType & 2) {
   1b074:	4b22      	ldr	r3, [pc, #136]	; (1b100 <sd_disk_write+0xc4>)
   1b076:	781b      	ldrb	r3, [r3, #0]
   1b078:	f013 0f02 	tst.w	r3, #2
   1b07c:	d12b      	bne.n	1b0d6 <sd_disk_write+0x9a>
        if (sd_spi_send_cmd(CMD25, sector) == 0) {    /* WRITE_MULTIPLE_BLOCK */
   1b07e:	4631      	mov	r1, r6
   1b080:	2059      	movs	r0, #89	; 0x59
   1b082:	f7ff fec5 	bl	1ae10 <sd_spi_send_cmd>
   1b086:	b978      	cbnz	r0, 1b0a8 <sd_disk_write+0x6c>
                if (!sd_spi_transmit_block(buff, 0xFC)) break;
   1b088:	21fc      	movs	r1, #252	; 0xfc
   1b08a:	4628      	mov	r0, r5
   1b08c:	f7ff fe92 	bl	1adb4 <sd_spi_transmit_block>
   1b090:	b128      	cbz	r0, 1b09e <sd_disk_write+0x62>
                buff += 512;
   1b092:	f505 7500 	add.w	r5, r5, #512	; 0x200
            } while (--count);
   1b096:	3c01      	subs	r4, #1
   1b098:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1b09c:	d1f4      	bne.n	1b088 <sd_disk_write+0x4c>
            if (!sd_spi_transmit_block(0, 0xFD))    /* STOP_TRAN token */
   1b09e:	21fd      	movs	r1, #253	; 0xfd
   1b0a0:	2000      	movs	r0, #0
   1b0a2:	f7ff fe87 	bl	1adb4 <sd_spi_transmit_block>
   1b0a6:	b1f8      	cbz	r0, 1b0e8 <sd_disk_write+0xac>
    sd_deassert_cs();            /* CS = H */
   1b0a8:	f7ff fd28 	bl	1aafc <sd_deassert_cs>
    sd_spi_recieve_byte();            /* Idle (Release DO) */
   1b0ac:	f7ff fd54 	bl	1ab58 <sd_spi_recieve_byte>
    return count ? RES_ERROR : RES_OK;
   1b0b0:	1c20      	adds	r0, r4, #0
   1b0b2:	bf18      	it	ne
   1b0b4:	2001      	movne	r0, #1
}
   1b0b6:	bd70      	pop	{r4, r5, r6, pc}
        if ((sd_spi_send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
   1b0b8:	4631      	mov	r1, r6
   1b0ba:	2058      	movs	r0, #88	; 0x58
   1b0bc:	f7ff fea8 	bl	1ae10 <sd_spi_send_cmd>
   1b0c0:	4606      	mov	r6, r0
   1b0c2:	2800      	cmp	r0, #0
   1b0c4:	d1f0      	bne.n	1b0a8 <sd_disk_write+0x6c>
            && sd_spi_transmit_block(buff, 0xFE))
   1b0c6:	21fe      	movs	r1, #254	; 0xfe
   1b0c8:	4628      	mov	r0, r5
   1b0ca:	f7ff fe73 	bl	1adb4 <sd_spi_transmit_block>
   1b0ce:	2800      	cmp	r0, #0
   1b0d0:	d0ea      	beq.n	1b0a8 <sd_disk_write+0x6c>
            count = 0;
   1b0d2:	4634      	mov	r4, r6
   1b0d4:	e7e8      	b.n	1b0a8 <sd_disk_write+0x6c>
            sd_spi_send_cmd(CMD55, 0); sd_spi_send_cmd(CMD23, count);    /* ACMD23 */
   1b0d6:	2100      	movs	r1, #0
   1b0d8:	2077      	movs	r0, #119	; 0x77
   1b0da:	f7ff fe99 	bl	1ae10 <sd_spi_send_cmd>
   1b0de:	4621      	mov	r1, r4
   1b0e0:	2057      	movs	r0, #87	; 0x57
   1b0e2:	f7ff fe95 	bl	1ae10 <sd_spi_send_cmd>
   1b0e6:	e7ca      	b.n	1b07e <sd_disk_write+0x42>
                count = 1;
   1b0e8:	2401      	movs	r4, #1
   1b0ea:	e7dd      	b.n	1b0a8 <sd_disk_write+0x6c>
    if (drv || !count) return RES_PARERR;
   1b0ec:	2004      	movs	r0, #4
}
   1b0ee:	4770      	bx	lr
    if (drv || !count) return RES_PARERR;
   1b0f0:	2004      	movs	r0, #4
   1b0f2:	e7e0      	b.n	1b0b6 <sd_disk_write+0x7a>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
   1b0f4:	2003      	movs	r0, #3
   1b0f6:	e7de      	b.n	1b0b6 <sd_disk_write+0x7a>
    if (Stat & STA_PROTECT) return RES_WRPRT;
   1b0f8:	2002      	movs	r0, #2
   1b0fa:	e7dc      	b.n	1b0b6 <sd_disk_write+0x7a>
   1b0fc:	20000000 	.word	0x20000000
   1b100:	20000ea4 	.word	0x20000ea4

0001b104 <sdcard_write_blocks>:
mp_uint_t sdcard_write_blocks(const uint8_t *src, uint32_t block_num, uint32_t num_blocks) {
   1b104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b108:	4606      	mov	r6, r0
   1b10a:	4689      	mov	r9, r1
   1b10c:	4690      	mov	r8, r2
    if (((uint32_t)src & 3) != 0) {
   1b10e:	f010 0f03 	tst.w	r0, #3
   1b112:	d01f      	beq.n	1b154 <sdcard_write_blocks+0x50>
        uint8_t *src_aligned = m_new_maybe(uint8_t, SDCARD_BLOCK_SIZE);
   1b114:	f44f 7000 	mov.w	r0, #512	; 0x200
   1b118:	f7e5 fbde 	bl	8d8 <m_malloc_maybe>
        if (src_aligned == NULL) {
   1b11c:	4607      	mov	r7, r0
   1b11e:	b350      	cbz	r0, 1b176 <sdcard_write_blocks+0x72>
        for (size_t i = 0; i < num_blocks; ++i) {
   1b120:	2400      	movs	r4, #0
    DRESULT err = RES_OK;
   1b122:	4625      	mov	r5, r4
        for (size_t i = 0; i < num_blocks; ++i) {
   1b124:	4544      	cmp	r4, r8
   1b126:	d210      	bcs.n	1b14a <sdcard_write_blocks+0x46>
            memcpy(src_aligned, src + i * SDCARD_BLOCK_SIZE, SDCARD_BLOCK_SIZE);
   1b128:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b12c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   1b130:	4638      	mov	r0, r7
   1b132:	f000 fb5f 	bl	1b7f4 <memcpy>
            err = sdcard_write_blocks(src_aligned, block_num + i, 1);
   1b136:	2201      	movs	r2, #1
   1b138:	eb04 0109 	add.w	r1, r4, r9
   1b13c:	4638      	mov	r0, r7
   1b13e:	f7ff ffe1 	bl	1b104 <sdcard_write_blocks>
   1b142:	b2c5      	uxtb	r5, r0
            if (err != RES_OK) {
   1b144:	b90d      	cbnz	r5, 1b14a <sdcard_write_blocks+0x46>
        for (size_t i = 0; i < num_blocks; ++i) {
   1b146:	3401      	adds	r4, #1
   1b148:	e7ec      	b.n	1b124 <sdcard_write_blocks+0x20>
        m_del(uint8_t, src_aligned, SDCARD_BLOCK_SIZE);
   1b14a:	4638      	mov	r0, r7
   1b14c:	f7e5 fbdf 	bl	90e <m_free>
        return err;
   1b150:	4628      	mov	r0, r5
   1b152:	e008      	b.n	1b166 <sdcard_write_blocks+0x62>
        err = sd_disk_write(0,(uint8_t*)src, block_num, num_blocks);
   1b154:	b2d3      	uxtb	r3, r2
   1b156:	460a      	mov	r2, r1
   1b158:	4601      	mov	r1, r0
   1b15a:	2000      	movs	r0, #0
   1b15c:	f7ff ff6e 	bl	1b03c <sd_disk_write>
        if (err == RES_OK) {
   1b160:	4605      	mov	r5, r0
   1b162:	b110      	cbz	r0, 1b16a <sdcard_write_blocks+0x66>
    return err;
   1b164:	4628      	mov	r0, r5
}
   1b166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            err = sdcard_wait_finished(60000);
   1b16a:	f64e 2060 	movw	r0, #60000	; 0xea60
   1b16e:	f7ff fc8b 	bl	1aa88 <sdcard_wait_finished>
   1b172:	b2c5      	uxtb	r5, r0
   1b174:	e7f6      	b.n	1b164 <sdcard_write_blocks+0x60>
            return MP_EFAULT;
   1b176:	200e      	movs	r0, #14
   1b178:	e7f5      	b.n	1b166 <sdcard_write_blocks+0x62>
	...

0001b17c <pyb_sdcard_writeblocks>:
STATIC MP_DEFINE_CONST_FUN_OBJ_3(pyb_sdcard_readblocks_obj, pyb_sdcard_readblocks);

STATIC mp_obj_t pyb_sdcard_writeblocks(mp_obj_t self, mp_obj_t block_num, mp_obj_t buf) {
   1b17c:	b530      	push	{r4, r5, lr}
   1b17e:	b085      	sub	sp, #20
   1b180:	460d      	mov	r5, r1
   1b182:	4610      	mov	r0, r2
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(buf, &bufinfo, MP_BUFFER_READ);
   1b184:	2201      	movs	r2, #1
   1b186:	a901      	add	r1, sp, #4
   1b188:	f7f0 f892 	bl	b2b0 <mp_get_buffer_raise>
    mp_uint_t ret = sdcard_write_blocks(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SDCARD_BLOCK_SIZE);
   1b18c:	9c01      	ldr	r4, [sp, #4]
   1b18e:	4628      	mov	r0, r5
   1b190:	f7ef fe1c 	bl	adcc <mp_obj_get_int>
   1b194:	9a02      	ldr	r2, [sp, #8]
   1b196:	0a52      	lsrs	r2, r2, #9
   1b198:	4601      	mov	r1, r0
   1b19a:	4620      	mov	r0, r4
   1b19c:	f7ff ffb2 	bl	1b104 <sdcard_write_blocks>
   1b1a0:	b110      	cbz	r0, 1b1a8 <pyb_sdcard_writeblocks+0x2c>
   1b1a2:	4802      	ldr	r0, [pc, #8]	; (1b1ac <pyb_sdcard_writeblocks+0x30>)
    return mp_obj_new_bool(ret == 0);
}
   1b1a4:	b005      	add	sp, #20
   1b1a6:	bd30      	pop	{r4, r5, pc}
   1b1a8:	4801      	ldr	r0, [pc, #4]	; (1b1b0 <pyb_sdcard_writeblocks+0x34>)
   1b1aa:	e7fb      	b.n	1b1a4 <pyb_sdcard_writeblocks+0x28>
   1b1ac:	00025f44 	.word	0x00025f44
   1b1b0:	00025f4c 	.word	0x00025f4c

0001b1b4 <sd_write>:
STATIC mp_obj_t sd_write(mp_obj_t self, mp_obj_t block_num, mp_obj_t data) {
   1b1b4:	b530      	push	{r4, r5, lr}
   1b1b6:	b085      	sub	sp, #20
   1b1b8:	460c      	mov	r4, r1
   1b1ba:	4610      	mov	r0, r2
    mp_get_buffer_raise(data, &bufinfo, MP_BUFFER_READ);
   1b1bc:	2201      	movs	r2, #1
   1b1be:	a901      	add	r1, sp, #4
   1b1c0:	f7f0 f876 	bl	b2b0 <mp_get_buffer_raise>
    if (bufinfo.len % SDCARD_BLOCK_SIZE != 0) {
   1b1c4:	9b02      	ldr	r3, [sp, #8]
   1b1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1b1ca:	b973      	cbnz	r3, 1b1ea <sd_write+0x36>
    mp_uint_t ret = sdcard_write_blocks(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SDCARD_BLOCK_SIZE);
   1b1cc:	9d01      	ldr	r5, [sp, #4]
   1b1ce:	4620      	mov	r0, r4
   1b1d0:	f7ef fdfc 	bl	adcc <mp_obj_get_int>
   1b1d4:	9a02      	ldr	r2, [sp, #8]
   1b1d6:	0a52      	lsrs	r2, r2, #9
   1b1d8:	4601      	mov	r1, r0
   1b1da:	4628      	mov	r0, r5
   1b1dc:	f7ff ff92 	bl	1b104 <sdcard_write_blocks>
    if (ret != 0) {
   1b1e0:	4602      	mov	r2, r0
   1b1e2:	b950      	cbnz	r0, 1b1fa <sd_write+0x46>
}
   1b1e4:	4808      	ldr	r0, [pc, #32]	; (1b208 <sd_write+0x54>)
   1b1e6:	b005      	add	sp, #20
   1b1e8:	bd30      	pop	{r4, r5, pc}
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "writes must be a multiple of %d bytes", SDCARD_BLOCK_SIZE));
   1b1ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b1ee:	4907      	ldr	r1, [pc, #28]	; (1b20c <sd_write+0x58>)
   1b1f0:	4807      	ldr	r0, [pc, #28]	; (1b210 <sd_write+0x5c>)
   1b1f2:	f7f1 fc6b 	bl	cacc <mp_obj_new_exception_msg_varg>
   1b1f6:	f7e5 fb43 	bl	880 <nlr_jump>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_Exception, "sdcard_write_blocks failed [%u]", ret));
   1b1fa:	4906      	ldr	r1, [pc, #24]	; (1b214 <sd_write+0x60>)
   1b1fc:	4806      	ldr	r0, [pc, #24]	; (1b218 <sd_write+0x64>)
   1b1fe:	f7f1 fc65 	bl	cacc <mp_obj_new_exception_msg_varg>
   1b202:	f7e5 fb3d 	bl	880 <nlr_jump>
   1b206:	bf00      	nop
   1b208:	00027b40 	.word	0x00027b40
   1b20c:	0002baf0 	.word	0x0002baf0
   1b210:	00026cc0 	.word	0x00026cc0
   1b214:	0002bb18 	.word	0x0002bb18
   1b218:	00026888 	.word	0x00026888

0001b21c <sd_disk_ioctl>:
) {
   1b21c:	b570      	push	{r4, r5, r6, lr}
   1b21e:	b084      	sub	sp, #16
    if (drv) return RES_PARERR;
   1b220:	2800      	cmp	r0, #0
   1b222:	f040 80ba 	bne.w	1b39a <sd_disk_ioctl+0x17e>
   1b226:	460c      	mov	r4, r1
   1b228:	4615      	mov	r5, r2
    if (ctrl == CTRL_POWER) {
   1b22a:	2905      	cmp	r1, #5
   1b22c:	d013      	beq.n	1b256 <sd_disk_ioctl+0x3a>
        if (Stat & STA_NOINIT) return RES_NOTRDY;
   1b22e:	4b5e      	ldr	r3, [pc, #376]	; (1b3a8 <sd_disk_ioctl+0x18c>)
   1b230:	781b      	ldrb	r3, [r3, #0]
   1b232:	f013 0f01 	tst.w	r3, #1
   1b236:	f040 80b4 	bne.w	1b3a2 <sd_disk_ioctl+0x186>
        sd_assert_cs();        /* CS = L */
   1b23a:	f7ff fc51 	bl	1aae0 <sd_assert_cs>
        switch (ctrl) {
   1b23e:	2c0d      	cmp	r4, #13
   1b240:	f200 80a1 	bhi.w	1b386 <sd_disk_ioctl+0x16a>
   1b244:	e8df f004 	tbb	[pc, r4]
   1b248:	9f61216a 	.word	0x9f61216a
   1b24c:	9f9f9f9f 	.word	0x9f9f9f9f
   1b250:	709f9f9f 	.word	0x709f9f9f
   1b254:	8c7e      	.short	0x8c7e
        switch (*ptr) {
   1b256:	7813      	ldrb	r3, [r2, #0]
   1b258:	2b01      	cmp	r3, #1
   1b25a:	d00d      	beq.n	1b278 <sd_disk_ioctl+0x5c>
   1b25c:	b11b      	cbz	r3, 1b266 <sd_disk_ioctl+0x4a>
   1b25e:	2b02      	cmp	r3, #2
   1b260:	d00e      	beq.n	1b280 <sd_disk_ioctl+0x64>
            res = RES_PARERR;
   1b262:	2404      	movs	r4, #4
   1b264:	e09a      	b.n	1b39c <sd_disk_ioctl+0x180>
            if (sd_chk_power())
   1b266:	f7ff fd7b 	bl	1ad60 <sd_chk_power>
   1b26a:	b908      	cbnz	r0, 1b270 <sd_disk_ioctl+0x54>
            res = RES_OK;
   1b26c:	2400      	movs	r4, #0
   1b26e:	e095      	b.n	1b39c <sd_disk_ioctl+0x180>
                sd_power_off();        /* Power off */
   1b270:	f7ff fd6a 	bl	1ad48 <sd_power_off>
            res = RES_OK;
   1b274:	2400      	movs	r4, #0
   1b276:	e091      	b.n	1b39c <sd_disk_ioctl+0x180>
            sd_power_on();                /* Power on */
   1b278:	f7ff fcca 	bl	1ac10 <sd_power_on>
            res = RES_OK;
   1b27c:	2400      	movs	r4, #0
            break;
   1b27e:	e08d      	b.n	1b39c <sd_disk_ioctl+0x180>
            *(ptr+1) = (uint8_t)sd_chk_power();
   1b280:	f7ff fd6e 	bl	1ad60 <sd_chk_power>
   1b284:	7068      	strb	r0, [r5, #1]
            res = RES_OK;
   1b286:	2400      	movs	r4, #0
            break;
   1b288:	e088      	b.n	1b39c <sd_disk_ioctl+0x180>
            if ((sd_spi_send_cmd(CMD9, 0) == 0) && sd_spi_receive_block(csd, 16)) {
   1b28a:	2100      	movs	r1, #0
   1b28c:	2049      	movs	r0, #73	; 0x49
   1b28e:	f7ff fdbf 	bl	1ae10 <sd_spi_send_cmd>
   1b292:	b108      	cbz	r0, 1b298 <sd_disk_ioctl+0x7c>
    res = RES_ERROR;
   1b294:	2401      	movs	r4, #1
   1b296:	e03c      	b.n	1b312 <sd_disk_ioctl+0xf6>
            if ((sd_spi_send_cmd(CMD9, 0) == 0) && sd_spi_receive_block(csd, 16)) {
   1b298:	2110      	movs	r1, #16
   1b29a:	4668      	mov	r0, sp
   1b29c:	f7ff fd66 	bl	1ad6c <sd_spi_receive_block>
   1b2a0:	2800      	cmp	r0, #0
   1b2a2:	d072      	beq.n	1b38a <sd_disk_ioctl+0x16e>
                if ((csd[0] >> 6) == 1) {    /* SDC ver 2.00 */
   1b2a4:	f89d 3000 	ldrb.w	r3, [sp]
   1b2a8:	099b      	lsrs	r3, r3, #6
   1b2aa:	2b01      	cmp	r3, #1
   1b2ac:	d020      	beq.n	1b2f0 <sd_disk_ioctl+0xd4>
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
   1b2ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1b2b2:	f002 020f 	and.w	r2, r2, #15
   1b2b6:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1b2ba:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
   1b2be:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1b2c2:	005b      	lsls	r3, r3, #1
   1b2c4:	f003 0306 	and.w	r3, r3, #6
   1b2c8:	441a      	add	r2, r3
                    csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
   1b2ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b2ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1b2d2:	099b      	lsrs	r3, r3, #6
   1b2d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1b2d8:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1b2dc:	0289      	lsls	r1, r1, #10
   1b2de:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
   1b2e2:	440b      	add	r3, r1
   1b2e4:	3301      	adds	r3, #1
                    *(uint32_t*)buff = (uint32_t)csize << (n - 9);
   1b2e6:	3a07      	subs	r2, #7
   1b2e8:	4093      	lsls	r3, r2
   1b2ea:	602b      	str	r3, [r5, #0]
                res = RES_OK;
   1b2ec:	2400      	movs	r4, #0
   1b2ee:	e010      	b.n	1b312 <sd_disk_ioctl+0xf6>
                    csize = csd[9] + ((uint16_t)csd[8] << 8) + 1;
   1b2f0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1b2f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1b2f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1b2fc:	b29b      	uxth	r3, r3
   1b2fe:	3301      	adds	r3, #1
   1b300:	b29b      	uxth	r3, r3
                    *(uint32_t*)buff = (uint32_t)csize << 10;
   1b302:	029b      	lsls	r3, r3, #10
   1b304:	602b      	str	r3, [r5, #0]
                res = RES_OK;
   1b306:	2400      	movs	r4, #0
   1b308:	e003      	b.n	1b312 <sd_disk_ioctl+0xf6>
            *(uint16_t*)buff = 512;
   1b30a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b30e:	802b      	strh	r3, [r5, #0]
            res = RES_OK;
   1b310:	2400      	movs	r4, #0
        sd_deassert_cs();            /* CS = H */
   1b312:	f7ff fbf3 	bl	1aafc <sd_deassert_cs>
        sd_spi_recieve_byte();            /* Idle (Release DO) */
   1b316:	f7ff fc1f 	bl	1ab58 <sd_spi_recieve_byte>
   1b31a:	e03f      	b.n	1b39c <sd_disk_ioctl+0x180>
            if (sd_wait_ready() == 0xFF)
   1b31c:	f7ff fc44 	bl	1aba8 <sd_wait_ready>
   1b320:	28ff      	cmp	r0, #255	; 0xff
   1b322:	d034      	beq.n	1b38e <sd_disk_ioctl+0x172>
    res = RES_ERROR;
   1b324:	2401      	movs	r4, #1
   1b326:	e7f4      	b.n	1b312 <sd_disk_ioctl+0xf6>
            if (sd_spi_send_cmd(CMD9, 0) == 0        /* READ_CSD */
   1b328:	2100      	movs	r1, #0
   1b32a:	2049      	movs	r0, #73	; 0x49
   1b32c:	f7ff fd70 	bl	1ae10 <sd_spi_send_cmd>
   1b330:	b108      	cbz	r0, 1b336 <sd_disk_ioctl+0x11a>
    res = RES_ERROR;
   1b332:	2401      	movs	r4, #1
   1b334:	e7ed      	b.n	1b312 <sd_disk_ioctl+0xf6>
                && sd_spi_receive_block(ptr, 16))
   1b336:	2110      	movs	r1, #16
   1b338:	4628      	mov	r0, r5
   1b33a:	f7ff fd17 	bl	1ad6c <sd_spi_receive_block>
   1b33e:	bb40      	cbnz	r0, 1b392 <sd_disk_ioctl+0x176>
    res = RES_ERROR;
   1b340:	2401      	movs	r4, #1
   1b342:	e7e6      	b.n	1b312 <sd_disk_ioctl+0xf6>
            if (sd_spi_send_cmd(CMD10, 0) == 0        /* READ_CID */
   1b344:	2100      	movs	r1, #0
   1b346:	204a      	movs	r0, #74	; 0x4a
   1b348:	f7ff fd62 	bl	1ae10 <sd_spi_send_cmd>
   1b34c:	b108      	cbz	r0, 1b352 <sd_disk_ioctl+0x136>
    res = RES_ERROR;
   1b34e:	2401      	movs	r4, #1
   1b350:	e7df      	b.n	1b312 <sd_disk_ioctl+0xf6>
                && sd_spi_receive_block(ptr, 16))
   1b352:	2110      	movs	r1, #16
   1b354:	4628      	mov	r0, r5
   1b356:	f7ff fd09 	bl	1ad6c <sd_spi_receive_block>
   1b35a:	b9e0      	cbnz	r0, 1b396 <sd_disk_ioctl+0x17a>
    res = RES_ERROR;
   1b35c:	2401      	movs	r4, #1
   1b35e:	e7d8      	b.n	1b312 <sd_disk_ioctl+0xf6>
            if (sd_spi_send_cmd(CMD58, 0) == 0) {    /* READ_OCR */
   1b360:	2100      	movs	r1, #0
   1b362:	207a      	movs	r0, #122	; 0x7a
   1b364:	f7ff fd54 	bl	1ae10 <sd_spi_send_cmd>
   1b368:	4604      	mov	r4, r0
   1b36a:	b140      	cbz	r0, 1b37e <sd_disk_ioctl+0x162>
            res = RES_PARERR;
   1b36c:	2404      	movs	r4, #4
   1b36e:	e7d0      	b.n	1b312 <sd_disk_ioctl+0xf6>
                    *ptr++ = sd_spi_recieve_byte();
   1b370:	1c6e      	adds	r6, r5, #1
   1b372:	f7ff fbf1 	bl	1ab58 <sd_spi_recieve_byte>
   1b376:	7028      	strb	r0, [r5, #0]
                for (n = 0; n < 4; n++)
   1b378:	3401      	adds	r4, #1
   1b37a:	b2e4      	uxtb	r4, r4
                    *ptr++ = sd_spi_recieve_byte();
   1b37c:	4635      	mov	r5, r6
                for (n = 0; n < 4; n++)
   1b37e:	2c03      	cmp	r4, #3
   1b380:	d9f6      	bls.n	1b370 <sd_disk_ioctl+0x154>
            res = RES_PARERR;
   1b382:	2404      	movs	r4, #4
   1b384:	e7c5      	b.n	1b312 <sd_disk_ioctl+0xf6>
   1b386:	2404      	movs	r4, #4
   1b388:	e7c3      	b.n	1b312 <sd_disk_ioctl+0xf6>
    res = RES_ERROR;
   1b38a:	2401      	movs	r4, #1
   1b38c:	e7c1      	b.n	1b312 <sd_disk_ioctl+0xf6>
                res = RES_OK;
   1b38e:	2400      	movs	r4, #0
   1b390:	e7bf      	b.n	1b312 <sd_disk_ioctl+0xf6>
                res = RES_OK;
   1b392:	2400      	movs	r4, #0
   1b394:	e7bd      	b.n	1b312 <sd_disk_ioctl+0xf6>
                res = RES_OK;
   1b396:	2400      	movs	r4, #0
   1b398:	e7bb      	b.n	1b312 <sd_disk_ioctl+0xf6>
    if (drv) return RES_PARERR;
   1b39a:	2404      	movs	r4, #4
}
   1b39c:	4620      	mov	r0, r4
   1b39e:	b004      	add	sp, #16
   1b3a0:	bd70      	pop	{r4, r5, r6, pc}
        if (Stat & STA_NOINIT) return RES_NOTRDY;
   1b3a2:	2403      	movs	r4, #3
   1b3a4:	e7fa      	b.n	1b39c <sd_disk_ioctl+0x180>
   1b3a6:	bf00      	nop
   1b3a8:	20000000 	.word	0x20000000

0001b3ac <get_fattime>:
}
   1b3ac:	4800      	ldr	r0, [pc, #0]	; (1b3b0 <get_fattime+0x4>)
   1b3ae:	4770      	bx	lr
   1b3b0:	36c55cc0 	.word	0x36c55cc0

0001b3b4 <sdcard_init>:
void sdcard_init(void) {
   1b3b4:	b508      	push	{r3, lr}
    sd_power_on();
   1b3b6:	f7ff fc2b 	bl	1ac10 <sd_power_on>
}
   1b3ba:	bd08      	pop	{r3, pc}

0001b3bc <sdcard_is_present>:
bool sdcard_is_present(void) {
   1b3bc:	b508      	push	{r3, lr}
    if(mp_hal_pin_read(MICROPY_HW_SDCARD_DETECT_PIN)) {
   1b3be:	4b0a      	ldr	r3, [pc, #40]	; (1b3e8 <sdcard_is_present+0x2c>)
   1b3c0:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1b3c4:	6898      	ldr	r0, [r3, #8]
   1b3c6:	f005 fab8 	bl	2093a <GPIOPinRead>
   1b3ca:	b930      	cbnz	r0, 1b3da <sdcard_is_present+0x1e>
        Stat |= STA_NODISK;
   1b3cc:	4a07      	ldr	r2, [pc, #28]	; (1b3ec <sdcard_is_present+0x30>)
   1b3ce:	7813      	ldrb	r3, [r2, #0]
   1b3d0:	f043 0302 	orr.w	r3, r3, #2
   1b3d4:	7013      	strb	r3, [r2, #0]
        return false; 
   1b3d6:	2000      	movs	r0, #0
}
   1b3d8:	bd08      	pop	{r3, pc}
        Stat &= ~STA_NODISK;
   1b3da:	4a04      	ldr	r2, [pc, #16]	; (1b3ec <sdcard_is_present+0x30>)
   1b3dc:	7813      	ldrb	r3, [r2, #0]
   1b3de:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1b3e2:	7013      	strb	r3, [r2, #0]
        return true;
   1b3e4:	2001      	movs	r0, #1
   1b3e6:	e7f7      	b.n	1b3d8 <sdcard_is_present+0x1c>
   1b3e8:	0002ca84 	.word	0x0002ca84
   1b3ec:	20000000 	.word	0x20000000

0001b3f0 <sd_disk_init>:
    if (drv) return STA_NOINIT;            /* Supports only single drive */
   1b3f0:	2800      	cmp	r0, #0
   1b3f2:	f040 80cc 	bne.w	1b58e <sd_disk_init+0x19e>
) {
   1b3f6:	b570      	push	{r4, r5, r6, lr}
   1b3f8:	b082      	sub	sp, #8
   1b3fa:	4604      	mov	r4, r0
    if(PowerFlag==0) sd_power_on();                            /* Force socket power on */
   1b3fc:	4b65      	ldr	r3, [pc, #404]	; (1b594 <sd_disk_init+0x1a4>)
   1b3fe:	781b      	ldrb	r3, [r3, #0]
   1b400:	b13b      	cbz	r3, 1b412 <sd_disk_init+0x22>
    if (!sdcard_is_present()) return Stat;    /* No card in the socket */
   1b402:	f7ff ffdb 	bl	1b3bc <sdcard_is_present>
   1b406:	b938      	cbnz	r0, 1b418 <sd_disk_init+0x28>
   1b408:	4b63      	ldr	r3, [pc, #396]	; (1b598 <sd_disk_init+0x1a8>)
   1b40a:	7818      	ldrb	r0, [r3, #0]
   1b40c:	b2c0      	uxtb	r0, r0
}
   1b40e:	b002      	add	sp, #8
   1b410:	bd70      	pop	{r4, r5, r6, pc}
    if(PowerFlag==0) sd_power_on();                            /* Force socket power on */
   1b412:	f7ff fbfd 	bl	1ac10 <sd_power_on>
   1b416:	e7f4      	b.n	1b402 <sd_disk_init+0x12>
    sd_sel_spi_mode();            /* Ensure the card is in SPI mode */
   1b418:	f7ff fbda 	bl	1abd0 <sd_sel_spi_mode>
    sd_assert_cs();                /* CS = L */
   1b41c:	f7ff fb60 	bl	1aae0 <sd_assert_cs>
    if (sd_spi_send_cmd(CMD0, 0) == 1) {            /* Enter Idle state */
   1b420:	2100      	movs	r1, #0
   1b422:	2040      	movs	r0, #64	; 0x40
   1b424:	f7ff fcf4 	bl	1ae10 <sd_spi_send_cmd>
   1b428:	4605      	mov	r5, r0
   1b42a:	2801      	cmp	r0, #1
   1b42c:	d013      	beq.n	1b456 <sd_disk_init+0x66>
    CardType = ty;
   1b42e:	4b5b      	ldr	r3, [pc, #364]	; (1b59c <sd_disk_init+0x1ac>)
   1b430:	701c      	strb	r4, [r3, #0]
    sd_deassert_cs();            /* CS = H */
   1b432:	f7ff fb63 	bl	1aafc <sd_deassert_cs>
    sd_spi_recieve_byte();            /* Idle (Release DO) */
   1b436:	f7ff fb8f 	bl	1ab58 <sd_spi_recieve_byte>
    if (ty) {            /* Initialization succeded */
   1b43a:	2c00      	cmp	r4, #0
   1b43c:	f000 80a4 	beq.w	1b588 <sd_disk_init+0x198>
        Stat &= ~STA_NOINIT;        /* Clear STA_NOINIT */
   1b440:	4a55      	ldr	r2, [pc, #340]	; (1b598 <sd_disk_init+0x1a8>)
   1b442:	7813      	ldrb	r3, [r2, #0]
   1b444:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1b448:	7013      	strb	r3, [r2, #0]
        sd_spi_set_max_speed();
   1b44a:	f7ff fc4f 	bl	1acec <sd_spi_set_max_speed>
    return Stat;
   1b44e:	4b52      	ldr	r3, [pc, #328]	; (1b598 <sd_disk_init+0x1a8>)
   1b450:	7818      	ldrb	r0, [r3, #0]
   1b452:	b2c0      	uxtb	r0, r0
   1b454:	e7db      	b.n	1b40e <sd_disk_init+0x1e>
    sd_deassert_cs();
   1b456:	f7ff fb51 	bl	1aafc <sd_deassert_cs>
    sd_wait_ready();
   1b45a:	f7ff fba5 	bl	1aba8 <sd_wait_ready>
    sd_assert_cs();
   1b45e:	f7ff fb3f 	bl	1aae0 <sd_assert_cs>
        if (sd_spi_send_cmd(CMD8, 0x1AA) == 1) {    /* SDC Ver2+ */
   1b462:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1b466:	2048      	movs	r0, #72	; 0x48
   1b468:	f7ff fcd2 	bl	1ae10 <sd_spi_send_cmd>
   1b46c:	2801      	cmp	r0, #1
   1b46e:	d14b      	bne.n	1b508 <sd_disk_init+0x118>
            for (n = 0; n < 4; n++) ocr[n] = sd_spi_recieve_byte();
   1b470:	4625      	mov	r5, r4
   1b472:	e007      	b.n	1b484 <sd_disk_init+0x94>
   1b474:	f7ff fb70 	bl	1ab58 <sd_spi_recieve_byte>
   1b478:	ab02      	add	r3, sp, #8
   1b47a:	442b      	add	r3, r5
   1b47c:	f803 0c04 	strb.w	r0, [r3, #-4]
   1b480:	3501      	adds	r5, #1
   1b482:	b2ed      	uxtb	r5, r5
   1b484:	2d03      	cmp	r5, #3
   1b486:	d9f5      	bls.n	1b474 <sd_disk_init+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
   1b488:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b48c:	2b01      	cmp	r3, #1
   1b48e:	d1ce      	bne.n	1b42e <sd_disk_init+0x3e>
   1b490:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b494:	2baa      	cmp	r3, #170	; 0xaa
   1b496:	d1ca      	bne.n	1b42e <sd_disk_init+0x3e>
                start = mp_hal_ticks_ms();                      /* Initialization timeout of 1000 msec */
   1b498:	f7fe fcce 	bl	19e38 <mp_hal_ticks_ms>
   1b49c:	4605      	mov	r5, r0
   1b49e:	e005      	b.n	1b4ac <sd_disk_init+0xbc>
                } while ((mp_hal_ticks_ms() - start) < 1000);
   1b4a0:	f7fe fcca 	bl	19e38 <mp_hal_ticks_ms>
   1b4a4:	1b40      	subs	r0, r0, r5
   1b4a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   1b4aa:	d20e      	bcs.n	1b4ca <sd_disk_init+0xda>
                    sd_wait_ready(); // Prevent command banging
   1b4ac:	f7ff fb7c 	bl	1aba8 <sd_wait_ready>
                    if (sd_spi_send_cmd(CMD55, 0) <= 1 && sd_spi_send_cmd(CMD41, 0x40000000) == 0) {
   1b4b0:	2100      	movs	r1, #0
   1b4b2:	2077      	movs	r0, #119	; 0x77
   1b4b4:	f7ff fcac 	bl	1ae10 <sd_spi_send_cmd>
   1b4b8:	2801      	cmp	r0, #1
   1b4ba:	d8f1      	bhi.n	1b4a0 <sd_disk_init+0xb0>
   1b4bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1b4c0:	2069      	movs	r0, #105	; 0x69
   1b4c2:	f7ff fca5 	bl	1ae10 <sd_spi_send_cmd>
   1b4c6:	2800      	cmp	r0, #0
   1b4c8:	d1ea      	bne.n	1b4a0 <sd_disk_init+0xb0>
                if ((mp_hal_ticks_ms() - start) < 1000 && sd_spi_send_cmd(CMD58, 0) == 0) {    /* Check CCS bit */
   1b4ca:	f7fe fcb5 	bl	19e38 <mp_hal_ticks_ms>
   1b4ce:	1b40      	subs	r0, r0, r5
   1b4d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   1b4d4:	d2ab      	bcs.n	1b42e <sd_disk_init+0x3e>
   1b4d6:	2100      	movs	r1, #0
   1b4d8:	207a      	movs	r0, #122	; 0x7a
   1b4da:	f7ff fc99 	bl	1ae10 <sd_spi_send_cmd>
   1b4de:	4605      	mov	r5, r0
   1b4e0:	2800      	cmp	r0, #0
   1b4e2:	d1a4      	bne.n	1b42e <sd_disk_init+0x3e>
                    for (n = 0; n < 4; n++) ocr[n] = sd_spi_recieve_byte();
   1b4e4:	2d03      	cmp	r5, #3
   1b4e6:	d808      	bhi.n	1b4fa <sd_disk_init+0x10a>
   1b4e8:	f7ff fb36 	bl	1ab58 <sd_spi_recieve_byte>
   1b4ec:	ab02      	add	r3, sp, #8
   1b4ee:	442b      	add	r3, r5
   1b4f0:	f803 0c04 	strb.w	r0, [r3, #-4]
   1b4f4:	3501      	adds	r5, #1
   1b4f6:	b2ed      	uxtb	r5, r5
   1b4f8:	e7f4      	b.n	1b4e4 <sd_disk_init+0xf4>
                    ty = (ocr[0] & 0x40) ? 6 : 2;
   1b4fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b4fe:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b502:	d03f      	beq.n	1b584 <sd_disk_init+0x194>
   1b504:	2406      	movs	r4, #6
   1b506:	e792      	b.n	1b42e <sd_disk_init+0x3e>
            ty = (sd_spi_send_cmd(CMD55, 0) <= 1 && sd_spi_send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
   1b508:	2100      	movs	r1, #0
   1b50a:	2077      	movs	r0, #119	; 0x77
   1b50c:	f7ff fc80 	bl	1ae10 <sd_spi_send_cmd>
   1b510:	2801      	cmp	r0, #1
   1b512:	d903      	bls.n	1b51c <sd_disk_init+0x12c>
            start = mp_hal_ticks_ms();                      /* Initialization timeout of 1000 msec */
   1b514:	f7fe fc90 	bl	19e38 <mp_hal_ticks_ms>
   1b518:	4606      	mov	r6, r0
   1b51a:	e013      	b.n	1b544 <sd_disk_init+0x154>
            ty = (sd_spi_send_cmd(CMD55, 0) <= 1 && sd_spi_send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
   1b51c:	2100      	movs	r1, #0
   1b51e:	2069      	movs	r0, #105	; 0x69
   1b520:	f7ff fc76 	bl	1ae10 <sd_spi_send_cmd>
   1b524:	2801      	cmp	r0, #1
   1b526:	d8f5      	bhi.n	1b514 <sd_disk_init+0x124>
   1b528:	2502      	movs	r5, #2
   1b52a:	e7f3      	b.n	1b514 <sd_disk_init+0x124>
                    if (sd_spi_send_cmd(CMD55, 0) <= 1 && sd_spi_send_cmd(CMD41, 0) == 0) break;    /* ACMD41 */
   1b52c:	2100      	movs	r1, #0
   1b52e:	2077      	movs	r0, #119	; 0x77
   1b530:	f7ff fc6e 	bl	1ae10 <sd_spi_send_cmd>
   1b534:	2801      	cmp	r0, #1
   1b536:	d91e      	bls.n	1b576 <sd_disk_init+0x186>
            } while ((mp_hal_ticks_ms() - start) < 1000);
   1b538:	f7fe fc7e 	bl	19e38 <mp_hal_ticks_ms>
   1b53c:	1b80      	subs	r0, r0, r6
   1b53e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   1b542:	d207      	bcs.n	1b554 <sd_disk_init+0x164>
                if (ty == 2) {
   1b544:	2d02      	cmp	r5, #2
   1b546:	d0f1      	beq.n	1b52c <sd_disk_init+0x13c>
                    if (sd_spi_send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
   1b548:	2100      	movs	r1, #0
   1b54a:	2041      	movs	r0, #65	; 0x41
   1b54c:	f7ff fc60 	bl	1ae10 <sd_spi_send_cmd>
   1b550:	2800      	cmp	r0, #0
   1b552:	d1f1      	bne.n	1b538 <sd_disk_init+0x148>
            if (!((mp_hal_ticks_ms() - start) < 1000) || sd_spi_send_cmd(CMD16, 512) != 0)    /* sd_assert_cs R/W block length */
   1b554:	f7fe fc70 	bl	19e38 <mp_hal_ticks_ms>
   1b558:	1b80      	subs	r0, r0, r6
   1b55a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   1b55e:	f4bf af66 	bcs.w	1b42e <sd_disk_init+0x3e>
   1b562:	f44f 7100 	mov.w	r1, #512	; 0x200
   1b566:	2050      	movs	r0, #80	; 0x50
   1b568:	f7ff fc52 	bl	1ae10 <sd_spi_send_cmd>
   1b56c:	2800      	cmp	r0, #0
   1b56e:	f47f af5e 	bne.w	1b42e <sd_disk_init+0x3e>
            ty = (sd_spi_send_cmd(CMD55, 0) <= 1 && sd_spi_send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
   1b572:	462c      	mov	r4, r5
   1b574:	e75b      	b.n	1b42e <sd_disk_init+0x3e>
                    if (sd_spi_send_cmd(CMD55, 0) <= 1 && sd_spi_send_cmd(CMD41, 0) == 0) break;    /* ACMD41 */
   1b576:	2100      	movs	r1, #0
   1b578:	2069      	movs	r0, #105	; 0x69
   1b57a:	f7ff fc49 	bl	1ae10 <sd_spi_send_cmd>
   1b57e:	2800      	cmp	r0, #0
   1b580:	d1da      	bne.n	1b538 <sd_disk_init+0x148>
   1b582:	e7e7      	b.n	1b554 <sd_disk_init+0x164>
                    ty = (ocr[0] & 0x40) ? 6 : 2;
   1b584:	2402      	movs	r4, #2
   1b586:	e752      	b.n	1b42e <sd_disk_init+0x3e>
        sd_power_off();
   1b588:	f7ff fbde 	bl	1ad48 <sd_power_off>
   1b58c:	e75f      	b.n	1b44e <sd_disk_init+0x5e>
    if (drv) return STA_NOINIT;            /* Supports only single drive */
   1b58e:	2001      	movs	r0, #1
}
   1b590:	4770      	bx	lr
   1b592:	bf00      	nop
   1b594:	20000678 	.word	0x20000678
   1b598:	20000000 	.word	0x20000000
   1b59c:	20000ea4 	.word	0x20000ea4

0001b5a0 <sd_present>:
STATIC mp_obj_t sd_present(mp_obj_t self) {
   1b5a0:	b508      	push	{r3, lr}
    return mp_obj_new_bool(sdcard_is_present());
   1b5a2:	f7ff ff0b 	bl	1b3bc <sdcard_is_present>
   1b5a6:	b908      	cbnz	r0, 1b5ac <sd_present+0xc>
   1b5a8:	4801      	ldr	r0, [pc, #4]	; (1b5b0 <sd_present+0x10>)
}
   1b5aa:	bd08      	pop	{r3, pc}
   1b5ac:	4801      	ldr	r0, [pc, #4]	; (1b5b4 <sd_present+0x14>)
   1b5ae:	e7fc      	b.n	1b5aa <sd_present+0xa>
   1b5b0:	00025f44 	.word	0x00025f44
   1b5b4:	00025f4c 	.word	0x00025f4c

0001b5b8 <sdcard_power_on>:
bool sdcard_power_on(void) {
   1b5b8:	b510      	push	{r4, lr}
    if (!sdcard_is_present()) {
   1b5ba:	f7ff feff 	bl	1b3bc <sdcard_is_present>
   1b5be:	4604      	mov	r4, r0
   1b5c0:	b908      	cbnz	r0, 1b5c6 <sdcard_power_on+0xe>
}
   1b5c2:	4620      	mov	r0, r4
   1b5c4:	bd10      	pop	{r4, pc}
    sd_power_on();
   1b5c6:	f7ff fb23 	bl	1ac10 <sd_power_on>
    return true;
   1b5ca:	e7fa      	b.n	1b5c2 <sdcard_power_on+0xa>

0001b5cc <sdcard_power_off>:
void sdcard_power_off(void) {
   1b5cc:	b508      	push	{r3, lr}
    sd_power_off();
   1b5ce:	f7ff fbbb 	bl	1ad48 <sd_power_off>
}
   1b5d2:	bd08      	pop	{r3, pc}

0001b5d4 <sd_power>:
STATIC mp_obj_t sd_power(mp_obj_t self, mp_obj_t state) {
   1b5d4:	b508      	push	{r3, lr}
    if (mp_obj_is_true(state)) {
   1b5d6:	4608      	mov	r0, r1
   1b5d8:	f7ef fdd0 	bl	b17c <mp_obj_is_true>
   1b5dc:	b130      	cbz	r0, 1b5ec <sd_power+0x18>
        result = sdcard_power_on();
   1b5de:	f7ff ffeb 	bl	1b5b8 <sdcard_power_on>
   1b5e2:	b908      	cbnz	r0, 1b5e8 <sd_power+0x14>
   1b5e4:	4803      	ldr	r0, [pc, #12]	; (1b5f4 <sd_power+0x20>)
    return mp_obj_new_bool(result);
   1b5e6:	e004      	b.n	1b5f2 <sd_power+0x1e>
   1b5e8:	4803      	ldr	r0, [pc, #12]	; (1b5f8 <sd_power+0x24>)
   1b5ea:	e002      	b.n	1b5f2 <sd_power+0x1e>
        sdcard_power_off();
   1b5ec:	f7ff ffee 	bl	1b5cc <sdcard_power_off>
   1b5f0:	4801      	ldr	r0, [pc, #4]	; (1b5f8 <sd_power+0x24>)
}
   1b5f2:	bd08      	pop	{r3, pc}
   1b5f4:	00025f44 	.word	0x00025f44
   1b5f8:	00025f4c 	.word	0x00025f4c

0001b5fc <sdcard_read_csd>:
void sdcard_read_csd(uint8_t *data) {
   1b5fc:	b510      	push	{r4, lr}
   1b5fe:	4604      	mov	r4, r0
    sd_spi_send_cmd(CMD9, 0);
   1b600:	2100      	movs	r1, #0
   1b602:	2049      	movs	r0, #73	; 0x49
   1b604:	f7ff fc04 	bl	1ae10 <sd_spi_send_cmd>
    sd_spi_receive_block(data, 16);
   1b608:	2110      	movs	r1, #16
   1b60a:	4620      	mov	r0, r4
   1b60c:	f7ff fbae 	bl	1ad6c <sd_spi_receive_block>
}
   1b610:	bd10      	pop	{r4, pc}

0001b612 <sd_info>:
STATIC mp_obj_t sd_info(mp_obj_t self) {
   1b612:	b530      	push	{r4, r5, lr}
   1b614:	b089      	sub	sp, #36	; 0x24
    sdcard_read_csd(csd);
   1b616:	a804      	add	r0, sp, #16
   1b618:	f7ff fff0 	bl	1b5fc <sdcard_read_csd>
    int card_type = (csd[15] & 0b11000000) >> 6; // 0 == v1 SD, 1 == v2 SDHC/XC
   1b61c:	f89d 401f 	ldrb.w	r4, [sp, #31]
    if(card_type) {
   1b620:	09a4      	lsrs	r4, r4, #6
   1b622:	d137      	bne.n	1b694 <sd_info+0x82>
        uint16_t c_size = ((csd[7] & 0b11000000) >> 6) +  ((uint16_t)(csd[8] & 0b11111111) << 2) + ((uint16_t)(csd[9] & 0b00000011) << 10);
   1b624:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1b628:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1b62c:	0080      	lsls	r0, r0, #2
   1b62e:	eb00 1092 	add.w	r0, r0, r2, lsr #6
   1b632:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1b636:	029b      	lsls	r3, r3, #10
   1b638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
   1b63c:	18c2      	adds	r2, r0, r3
        uint16_t c_size_multi = (csd[5] & 0b00000001) + ((csd[6] & 0b00000011) << 1);
   1b63e:	f89d 0015 	ldrb.w	r0, [sp, #21]
   1b642:	f000 0001 	and.w	r0, r0, #1
   1b646:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1b64a:	005b      	lsls	r3, r3, #1
   1b64c:	f003 0306 	and.w	r3, r3, #6
   1b650:	4318      	orrs	r0, r3
        uint16_t bl_len = (csd[10] & 0b00001111);
   1b652:	f89d 501a 	ldrb.w	r5, [sp, #26]
        bl_len = (1 << bl_len);
   1b656:	f005 050f 	and.w	r5, r5, #15
   1b65a:	2301      	movs	r3, #1
   1b65c:	fa03 f505 	lsl.w	r5, r3, r5
   1b660:	b2ad      	uxth	r5, r5
        c_size_multi = (1 << (c_size_multi+2));
   1b662:	3002      	adds	r0, #2
   1b664:	4083      	lsls	r3, r0
        size = (uint64_t)((c_size + 1) * c_size_multi * bl_len);
   1b666:	b298      	uxth	r0, r3
   1b668:	fb02 0000 	mla	r0, r2, r0, r0
   1b66c:	fb05 f000 	mul.w	r0, r5, r0
   1b670:	17c1      	asrs	r1, r0, #31
        mp_obj_new_int_from_ull(size),
   1b672:	f7f2 fc6e 	bl	df52 <mp_obj_new_int_from_ull>
    mp_obj_t tuple[3] = {
   1b676:	9001      	str	r0, [sp, #4]
        mp_obj_new_int_from_uint(bl_size),
   1b678:	4628      	mov	r0, r5
   1b67a:	f7f2 fc7b 	bl	df74 <mp_obj_new_int_from_uint>
    mp_obj_t tuple[3] = {
   1b67e:	9002      	str	r0, [sp, #8]
        mp_obj_new_int(card_type),
   1b680:	4620      	mov	r0, r4
   1b682:	f7f2 fc5a 	bl	df3a <mp_obj_new_int>
    mp_obj_t tuple[3] = {
   1b686:	9003      	str	r0, [sp, #12]
    return mp_obj_new_tuple(3, tuple);
   1b688:	a901      	add	r1, sp, #4
   1b68a:	2003      	movs	r0, #3
   1b68c:	f7f6 f8da 	bl	11844 <mp_obj_new_tuple>
}
   1b690:	b009      	add	sp, #36	; 0x24
   1b692:	bd30      	pop	{r4, r5, pc}
        uint32_t c_size = (uint32_t)(csd[6]) + ((uint32_t)(csd[7]) << 8) + (((uint32_t)(csd[8]) & 0b00111111) << 16);
   1b694:	f89d 0016 	ldrb.w	r0, [sp, #22]
   1b698:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1b69c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   1b6a0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1b6a4:	041b      	lsls	r3, r3, #16
   1b6a6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
   1b6aa:	4403      	add	r3, r0
        size = (uint64_t)((c_size + 1) * 512000);
   1b6ac:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
   1b6b0:	fb03 0000 	mla	r0, r3, r0, r0
   1b6b4:	2100      	movs	r1, #0
    uint bl_size = 0;
   1b6b6:	2500      	movs	r5, #0
   1b6b8:	e7db      	b.n	1b672 <sd_info+0x60>

0001b6ba <sdcard_get_capacity_in_bytes>:
uint64_t sdcard_get_capacity_in_bytes(void) {
   1b6ba:	b500      	push	{lr}
   1b6bc:	b083      	sub	sp, #12
    sd_disk_ioctl(0, GET_SECTOR_SIZE, &size);
   1b6be:	aa01      	add	r2, sp, #4
   1b6c0:	2102      	movs	r1, #2
   1b6c2:	2000      	movs	r0, #0
   1b6c4:	f7ff fdaa 	bl	1b21c <sd_disk_ioctl>
    sd_disk_ioctl(0, GET_SECTOR_COUNT, &count);
   1b6c8:	466a      	mov	r2, sp
   1b6ca:	2101      	movs	r1, #1
   1b6cc:	2000      	movs	r0, #0
   1b6ce:	f7ff fda5 	bl	1b21c <sd_disk_ioctl>
}
   1b6d2:	9801      	ldr	r0, [sp, #4]
   1b6d4:	9b00      	ldr	r3, [sp, #0]
   1b6d6:	fba0 0103 	umull	r0, r1, r0, r3
   1b6da:	b003      	add	sp, #12
   1b6dc:	f85d fb04 	ldr.w	pc, [sp], #4

0001b6e0 <pyb_sdcard_ioctl>:
STATIC MP_DEFINE_CONST_FUN_OBJ_3(pyb_sdcard_writeblocks_obj, pyb_sdcard_writeblocks);

STATIC mp_obj_t pyb_sdcard_ioctl(mp_obj_t self, mp_obj_t cmd_in, mp_obj_t arg_in) {
   1b6e0:	b508      	push	{r3, lr}
    mp_int_t cmd = mp_obj_get_int(cmd_in);
   1b6e2:	4608      	mov	r0, r1
   1b6e4:	f7ef fb72 	bl	adcc <mp_obj_get_int>
    switch (cmd) {
   1b6e8:	3801      	subs	r0, #1
   1b6ea:	2804      	cmp	r0, #4
   1b6ec:	d81a      	bhi.n	1b724 <pyb_sdcard_ioctl+0x44>
   1b6ee:	e8df f000 	tbb	[pc, r0]
   1b6f2:	0c05      	.short	0x0c05
   1b6f4:	1003      	.short	0x1003
   1b6f6:	1c          	.byte	0x1c
   1b6f7:	00          	.byte	0x00
            sdcard_power_off();
            return MP_OBJ_NEW_SMALL_INT(0); // success

        case BP_IOCTL_SYNC:
            // nothing to do
            return MP_OBJ_NEW_SMALL_INT(0); // success
   1b6f8:	2001      	movs	r0, #1
   1b6fa:	e018      	b.n	1b72e <pyb_sdcard_ioctl+0x4e>
            if (!sd_disk_init(0)) {
   1b6fc:	2000      	movs	r0, #0
   1b6fe:	f7ff fe77 	bl	1b3f0 <sd_disk_init>
   1b702:	b9a8      	cbnz	r0, 1b730 <pyb_sdcard_ioctl+0x50>
                return MP_OBJ_NEW_SMALL_INT(-1); // error
   1b704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b708:	e011      	b.n	1b72e <pyb_sdcard_ioctl+0x4e>
            sdcard_power_off();
   1b70a:	f7ff ff5f 	bl	1b5cc <sdcard_power_off>
            return MP_OBJ_NEW_SMALL_INT(0); // success
   1b70e:	2001      	movs	r0, #1
   1b710:	e00d      	b.n	1b72e <pyb_sdcard_ioctl+0x4e>

        case BP_IOCTL_SEC_COUNT:
            return MP_OBJ_NEW_SMALL_INT(sdcard_get_capacity_in_bytes() / SDCARD_BLOCK_SIZE);
   1b712:	f7ff ffd2 	bl	1b6ba <sdcard_get_capacity_in_bytes>
   1b716:	0a40      	lsrs	r0, r0, #9
   1b718:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
   1b71c:	0040      	lsls	r0, r0, #1
   1b71e:	f040 0001 	orr.w	r0, r0, #1
   1b722:	e004      	b.n	1b72e <pyb_sdcard_ioctl+0x4e>

        case BP_IOCTL_SEC_SIZE:
            return MP_OBJ_NEW_SMALL_INT(SDCARD_BLOCK_SIZE);

        default: // unknown command
            return MP_OBJ_NEW_SMALL_INT(-1); // error
   1b724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b728:	e001      	b.n	1b72e <pyb_sdcard_ioctl+0x4e>
            return MP_OBJ_NEW_SMALL_INT(SDCARD_BLOCK_SIZE);
   1b72a:	f240 4001 	movw	r0, #1025	; 0x401
    }
}
   1b72e:	bd08      	pop	{r3, pc}
            return MP_OBJ_NEW_SMALL_INT(0); // success
   1b730:	2001      	movs	r0, #1
   1b732:	e7fc      	b.n	1b72e <pyb_sdcard_ioctl+0x4e>

0001b734 <sdcard_init_vfs>:
    .make_new = pyb_sdcard_make_new,
    .locals_dict = (mp_obj_dict_t*)&pyb_sdcard_locals_dict,
};

void sdcard_init_vfs(fs_user_mount_t *vfs, int part) {
    vfs->base.type = &mp_fat_vfs_type;
   1b734:	4b0b      	ldr	r3, [pc, #44]	; (1b764 <sdcard_init_vfs+0x30>)
   1b736:	6003      	str	r3, [r0, #0]
    vfs->flags |= FSUSER_NATIVE | FSUSER_HAVE_IOCTL;
   1b738:	8883      	ldrh	r3, [r0, #4]
   1b73a:	f043 0305 	orr.w	r3, r3, #5
   1b73e:	8083      	strh	r3, [r0, #4]
    vfs->fatfs.drv = vfs;
   1b740:	6380      	str	r0, [r0, #56]	; 0x38
    vfs->fatfs.part = part;
   1b742:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    vfs->readblocks[0] = (mp_obj_t)&pyb_sdcard_readblocks_obj;
   1b746:	4b08      	ldr	r3, [pc, #32]	; (1b768 <sdcard_init_vfs+0x34>)
   1b748:	6083      	str	r3, [r0, #8]
    vfs->readblocks[1] = (mp_obj_t)&pyb_sdcard_obj;
   1b74a:	4b08      	ldr	r3, [pc, #32]	; (1b76c <sdcard_init_vfs+0x38>)
   1b74c:	60c3      	str	r3, [r0, #12]
    vfs->readblocks[2] = (mp_obj_t)sdcard_read_blocks; // native version
   1b74e:	4a08      	ldr	r2, [pc, #32]	; (1b770 <sdcard_init_vfs+0x3c>)
   1b750:	6102      	str	r2, [r0, #16]
    vfs->writeblocks[0] = (mp_obj_t)&pyb_sdcard_writeblocks_obj;
   1b752:	4a08      	ldr	r2, [pc, #32]	; (1b774 <sdcard_init_vfs+0x40>)
   1b754:	6182      	str	r2, [r0, #24]
    vfs->writeblocks[1] = (mp_obj_t)&pyb_sdcard_obj;
   1b756:	61c3      	str	r3, [r0, #28]
    vfs->writeblocks[2] = (mp_obj_t)sdcard_write_blocks; // native version
   1b758:	4a07      	ldr	r2, [pc, #28]	; (1b778 <sdcard_init_vfs+0x44>)
   1b75a:	6202      	str	r2, [r0, #32]
    vfs->u.ioctl[0] = (mp_obj_t)&pyb_sdcard_ioctl_obj;
   1b75c:	4a07      	ldr	r2, [pc, #28]	; (1b77c <sdcard_init_vfs+0x48>)
   1b75e:	6282      	str	r2, [r0, #40]	; 0x28
    vfs->u.ioctl[1] = (mp_obj_t)&pyb_sdcard_obj;
   1b760:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   1b762:	4770      	bx	lr
   1b764:	0002a888 	.word	0x0002a888
   1b768:	0002ba64 	.word	0x0002ba64
   1b76c:	0002ba60 	.word	0x0002ba60
   1b770:	0001af61 	.word	0x0001af61
   1b774:	0002baa8 	.word	0x0002baa8
   1b778:	0001b105 	.word	0x0001b105
   1b77c:	0002ba08 	.word	0x0002ba08

0001b780 <os_uname>:
    (mp_obj_t)&os_uname_info_machine_obj
);

STATIC mp_obj_t os_uname(void) {
    return (mp_obj_t)&os_uname_info_obj;
}
   1b780:	4800      	ldr	r0, [pc, #0]	; (1b784 <os_uname+0x4>)
   1b782:	4770      	bx	lr
   1b784:	0002bc2c 	.word	0x0002bc2c

0001b788 <os_sync>:
STATIC MP_DEFINE_CONST_FUN_OBJ_0(os_uname_obj, os_uname);

/// \function sync()
/// Sync all filesystems.
STATIC mp_obj_t os_sync(void) {
   1b788:	b510      	push	{r4, lr}
    for (mp_vfs_mount_t *vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   1b78a:	4b07      	ldr	r3, [pc, #28]	; (1b7a8 <os_sync+0x20>)
   1b78c:	f8d3 422c 	ldr.w	r4, [r3, #556]	; 0x22c
   1b790:	e005      	b.n	1b79e <os_sync+0x16>
        // this assumes that vfs->obj is fs_user_mount_t with block device functions
        disk_ioctl(MP_OBJ_TO_PTR(vfs->obj), CTRL_SYNC, NULL);
   1b792:	2200      	movs	r2, #0
   1b794:	4611      	mov	r1, r2
   1b796:	68a0      	ldr	r0, [r4, #8]
   1b798:	f7fc fb98 	bl	17ecc <disk_ioctl>
    for (mp_vfs_mount_t *vfs = MP_STATE_VM(vfs_mount_table); vfs != NULL; vfs = vfs->next) {
   1b79c:	68e4      	ldr	r4, [r4, #12]
   1b79e:	2c00      	cmp	r4, #0
   1b7a0:	d1f7      	bne.n	1b792 <os_sync+0xa>
    }
    return mp_const_none;
}
   1b7a2:	4802      	ldr	r0, [pc, #8]	; (1b7ac <os_sync+0x24>)
   1b7a4:	bd10      	pop	{r4, pc}
   1b7a6:	bf00      	nop
   1b7a8:	200008a0 	.word	0x200008a0
   1b7ac:	00027b40 	.word	0x00027b40

0001b7b0 <uos_dupterm>:
    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(os_urandom_obj, os_urandom);
#endif

STATIC mp_obj_t uos_dupterm(size_t n_args, const mp_obj_t *args) {
   1b7b0:	b538      	push	{r3, r4, r5, lr}
   1b7b2:	460c      	mov	r4, r1
    mp_obj_t prev_obj = mp_uos_dupterm_obj.fun.var(n_args, args);
   1b7b4:	4b0d      	ldr	r3, [pc, #52]	; (1b7ec <uos_dupterm+0x3c>)
   1b7b6:	689b      	ldr	r3, [r3, #8]
   1b7b8:	4798      	blx	r3
   1b7ba:	4605      	mov	r5, r0
    if (mp_obj_get_type(prev_obj) == &machine_uart_type) {
   1b7bc:	f7ef f9de 	bl	ab7c <mp_obj_get_type>
   1b7c0:	4b0b      	ldr	r3, [pc, #44]	; (1b7f0 <uos_dupterm+0x40>)
   1b7c2:	4283      	cmp	r3, r0
   1b7c4:	d007      	beq.n	1b7d6 <uos_dupterm+0x26>
        uart_attach_to_repl(MP_OBJ_TO_PTR(prev_obj), false);
    }
    if (mp_obj_get_type(args[0]) == &machine_uart_type) {
   1b7c6:	6820      	ldr	r0, [r4, #0]
   1b7c8:	f7ef f9d8 	bl	ab7c <mp_obj_get_type>
   1b7cc:	4b08      	ldr	r3, [pc, #32]	; (1b7f0 <uos_dupterm+0x40>)
   1b7ce:	4283      	cmp	r3, r0
   1b7d0:	d006      	beq.n	1b7e0 <uos_dupterm+0x30>
        uart_attach_to_repl(MP_OBJ_TO_PTR(args[0]), true);
    }
    return prev_obj;
}
   1b7d2:	4628      	mov	r0, r5
   1b7d4:	bd38      	pop	{r3, r4, r5, pc}
        uart_attach_to_repl(MP_OBJ_TO_PTR(prev_obj), false);
   1b7d6:	2100      	movs	r1, #0
   1b7d8:	4628      	mov	r0, r5
   1b7da:	f7fe fa63 	bl	19ca4 <uart_attach_to_repl>
   1b7de:	e7f2      	b.n	1b7c6 <uos_dupterm+0x16>
        uart_attach_to_repl(MP_OBJ_TO_PTR(args[0]), true);
   1b7e0:	2101      	movs	r1, #1
   1b7e2:	6820      	ldr	r0, [r4, #0]
   1b7e4:	f7fe fa5e 	bl	19ca4 <uart_attach_to_repl>
    return prev_obj;
   1b7e8:	e7f3      	b.n	1b7d2 <uos_dupterm+0x22>
   1b7ea:	bf00      	nop
   1b7ec:	0002aa14 	.word	0x0002aa14
   1b7f0:	0002b494 	.word	0x0002b494

0001b7f4 <memcpy>:
#include <string.h>

#define likely(x) __builtin_expect((x), 1)

void *memcpy(void *dst, const void *src, size_t n) {
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1b7f4:	ea40 0301 	orr.w	r3, r0, r1
void *memcpy(void *dst, const void *src, size_t n) {
   1b7f8:	b470      	push	{r4, r5, r6}
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1b7fa:	079d      	lsls	r5, r3, #30
   1b7fc:	d117      	bne.n	1b82e <memcpy+0x3a>
        // pointers aligned
        uint32_t *d = dst;
        const uint32_t *s = src;

        // copy words first
        for (size_t i = (n >> 2); i; i--) {
   1b7fe:	0895      	lsrs	r5, r2, #2
   1b800:	d021      	beq.n	1b846 <memcpy+0x52>
   1b802:	00ad      	lsls	r5, r5, #2
   1b804:	194e      	adds	r6, r1, r5
   1b806:	1f03      	subs	r3, r0, #4
            *d++ = *s++;
   1b808:	f851 4b04 	ldr.w	r4, [r1], #4
   1b80c:	f843 4f04 	str.w	r4, [r3, #4]!
        for (size_t i = (n >> 2); i; i--) {
   1b810:	428e      	cmp	r6, r1
   1b812:	d1f9      	bne.n	1b808 <memcpy+0x14>
   1b814:	4405      	add	r5, r0
        }

        if (n & 2) {
   1b816:	0794      	lsls	r4, r2, #30
            // copy half-word
            *(uint16_t*)d = *(const uint16_t*)s;
   1b818:	bf44      	itt	mi
   1b81a:	f831 3b02 	ldrhmi.w	r3, [r1], #2
   1b81e:	f825 3b02 	strhmi.w	r3, [r5], #2
            d = (uint32_t*)((uint16_t*)d + 1);
            s = (const uint32_t*)((const uint16_t*)s + 1);
        }

        if (n & 1) {
   1b822:	07d3      	lsls	r3, r2, #31
            // copy byte
            *((uint8_t*)d) = *((const uint8_t*)s);
   1b824:	bf44      	itt	mi
   1b826:	780b      	ldrbmi	r3, [r1, #0]
   1b828:	702b      	strbmi	r3, [r5, #0]
            *d++ = *s++;
        }
    }

    return dst;
}
   1b82a:	bc70      	pop	{r4, r5, r6}
   1b82c:	4770      	bx	lr
        for (; n; n--) {
   1b82e:	2a00      	cmp	r2, #0
   1b830:	d0fb      	beq.n	1b82a <memcpy+0x36>
   1b832:	440a      	add	r2, r1
   1b834:	1e43      	subs	r3, r0, #1
            *d++ = *s++;
   1b836:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b83a:	f803 4f01 	strb.w	r4, [r3, #1]!
        for (; n; n--) {
   1b83e:	428a      	cmp	r2, r1
   1b840:	d1f9      	bne.n	1b836 <memcpy+0x42>
}
   1b842:	bc70      	pop	{r4, r5, r6}
   1b844:	4770      	bx	lr
        uint32_t *d = dst;
   1b846:	4605      	mov	r5, r0
   1b848:	e7e5      	b.n	1b816 <memcpy+0x22>
   1b84a:	bf00      	nop

0001b84c <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
    if (src < dest && (uint8_t*)dest < (const uint8_t*)src + n) {
   1b84c:	4281      	cmp	r1, r0
   1b84e:	d211      	bcs.n	1b874 <memmove+0x28>
   1b850:	188b      	adds	r3, r1, r2
   1b852:	4298      	cmp	r0, r3
   1b854:	d20e      	bcs.n	1b874 <memmove+0x28>
        // need to copy backwards
        uint8_t *d = (uint8_t*)dest + n - 1;
   1b856:	1e53      	subs	r3, r2, #1
        const uint8_t *s = (const uint8_t*)src + n - 1;
   1b858:	440b      	add	r3, r1
        for (; n > 0; n--) {
   1b85a:	b16a      	cbz	r2, 1b878 <memmove+0x2c>
void *memmove(void *dest, const void *src, size_t n) {
   1b85c:	b410      	push	{r4}
   1b85e:	4402      	add	r2, r0
   1b860:	3901      	subs	r1, #1
            *d-- = *s--;
   1b862:	f813 4901 	ldrb.w	r4, [r3], #-1
   1b866:	f802 4d01 	strb.w	r4, [r2, #-1]!
        for (; n > 0; n--) {
   1b86a:	428b      	cmp	r3, r1
   1b86c:	d1f9      	bne.n	1b862 <memmove+0x16>
        return dest;
    } else {
        // can use normal memcpy
        return memcpy(dest, src, n);
    }
}
   1b86e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b872:	4770      	bx	lr
        return memcpy(dest, src, n);
   1b874:	f7ff bfbe 	b.w	1b7f4 <memcpy>
}
   1b878:	4770      	bx	lr
   1b87a:	bf00      	nop

0001b87c <memset>:

void *memset(void *s, int c, size_t n) {
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1b87c:	b149      	cbz	r1, 1b892 <memset+0x16>
        if (n & 1) {
            *((uint8_t*)s32) = 0;
        }
    } else {
        uint8_t *s2 = s;
        for (; n > 0; n--) {
   1b87e:	b13a      	cbz	r2, 1b890 <memset+0x14>
   1b880:	b2c9      	uxtb	r1, r1
   1b882:	4402      	add	r2, r0
   1b884:	4603      	mov	r3, r0
            *s2++ = c;
   1b886:	f803 1b01 	strb.w	r1, [r3], #1
        for (; n > 0; n--) {
   1b88a:	4293      	cmp	r3, r2
   1b88c:	d1fb      	bne.n	1b886 <memset+0xa>
   1b88e:	4770      	bx	lr
        }
    }
    return s;
}
   1b890:	4770      	bx	lr
void *memset(void *s, int c, size_t n) {
   1b892:	b410      	push	{r4}
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1b894:	f010 0403 	ands.w	r4, r0, #3
   1b898:	d114      	bne.n	1b8c4 <memset+0x48>
        for (size_t i = n >> 2; i > 0; i--) {
   1b89a:	0891      	lsrs	r1, r2, #2
   1b89c:	d01e      	beq.n	1b8dc <memset+0x60>
   1b89e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        uint32_t *s32 = s;
   1b8a2:	4603      	mov	r3, r0
            *s32++ = 0;
   1b8a4:	f843 4b04 	str.w	r4, [r3], #4
        for (size_t i = n >> 2; i > 0; i--) {
   1b8a8:	428b      	cmp	r3, r1
   1b8aa:	d1fb      	bne.n	1b8a4 <memset+0x28>
        if (n & 2) {
   1b8ac:	0794      	lsls	r4, r2, #30
            *((uint16_t*)s32) = 0;
   1b8ae:	bf44      	itt	mi
   1b8b0:	2300      	movmi	r3, #0
   1b8b2:	f821 3b02 	strhmi.w	r3, [r1], #2
        if (n & 1) {
   1b8b6:	07d3      	lsls	r3, r2, #31
   1b8b8:	d501      	bpl.n	1b8be <memset+0x42>
            *((uint8_t*)s32) = 0;
   1b8ba:	2300      	movs	r3, #0
   1b8bc:	700b      	strb	r3, [r1, #0]
}
   1b8be:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b8c2:	4770      	bx	lr
        for (; n > 0; n--) {
   1b8c4:	2a00      	cmp	r2, #0
   1b8c6:	d0fa      	beq.n	1b8be <memset+0x42>
   1b8c8:	b2c9      	uxtb	r1, r1
   1b8ca:	4402      	add	r2, r0
   1b8cc:	4603      	mov	r3, r0
            *s2++ = c;
   1b8ce:	f803 1b01 	strb.w	r1, [r3], #1
        for (; n > 0; n--) {
   1b8d2:	4293      	cmp	r3, r2
   1b8d4:	d1fb      	bne.n	1b8ce <memset+0x52>
}
   1b8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b8da:	4770      	bx	lr
        uint32_t *s32 = s;
   1b8dc:	4601      	mov	r1, r0
   1b8de:	e7e5      	b.n	1b8ac <memset+0x30>

0001b8e0 <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
   1b8e0:	440a      	add	r2, r1
    const uint8_t *s1_8 = s1;
    const uint8_t *s2_8 = s2;
    while (n--) {
   1b8e2:	4291      	cmp	r1, r2
   1b8e4:	d01c      	beq.n	1b920 <memcmp+0x40>
int memcmp(const void *s1, const void *s2, size_t n) {
   1b8e6:	b410      	push	{r4}
        char c1 = *s1_8++;
        char c2 = *s2_8++;
   1b8e8:	f811 3b01 	ldrb.w	r3, [r1], #1
        char c1 = *s1_8++;
   1b8ec:	f810 4b01 	ldrb.w	r4, [r0], #1
        if (c1 < c2) return -1;
   1b8f0:	429c      	cmp	r4, r3
   1b8f2:	d308      	bcc.n	1b906 <memcmp+0x26>
        else if (c1 > c2) return 1;
   1b8f4:	d810      	bhi.n	1b918 <memcmp+0x38>
    while (n--) {
   1b8f6:	4291      	cmp	r1, r2
   1b8f8:	d00a      	beq.n	1b910 <memcmp+0x30>
        char c1 = *s1_8++;
   1b8fa:	f810 4b01 	ldrb.w	r4, [r0], #1
        char c2 = *s2_8++;
   1b8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
        if (c1 < c2) return -1;
   1b902:	429c      	cmp	r4, r3
   1b904:	d2f6      	bcs.n	1b8f4 <memcmp+0x14>
   1b906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    return 0;
}
   1b90a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b90e:	4770      	bx	lr
    return 0;
   1b910:	2000      	movs	r0, #0
}
   1b912:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b916:	4770      	bx	lr
        else if (c1 > c2) return 1;
   1b918:	2001      	movs	r0, #1
}
   1b91a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b91e:	4770      	bx	lr
    return 0;
   1b920:	2000      	movs	r0, #0
}
   1b922:	4770      	bx	lr

0001b924 <strlen>:
    return 0;
}

size_t strlen(const char *str) {
    int len = 0;
    for (const char *s = str; *s; s++) {
   1b924:	7803      	ldrb	r3, [r0, #0]
   1b926:	b12b      	cbz	r3, 1b934 <strlen+0x10>
    int len = 0;
   1b928:	2300      	movs	r3, #0
    for (const char *s = str; *s; s++) {
   1b92a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
        len += 1;
   1b92e:	3301      	adds	r3, #1
    for (const char *s = str; *s; s++) {
   1b930:	2a00      	cmp	r2, #0
   1b932:	d1fa      	bne.n	1b92a <strlen+0x6>
   1b934:	4618      	mov	r0, r3
    }
    return len;
}
   1b936:	4770      	bx	lr

0001b938 <strcmp>:

int strcmp(const char *s1, const char *s2) {
   1b938:	3801      	subs	r0, #1
   1b93a:	3901      	subs	r1, #1
    while (*s1 && *s2) {
   1b93c:	e003      	b.n	1b946 <strcmp+0xe>
   1b93e:	b172      	cbz	r2, 1b95e <strcmp+0x26>
        char c1 = *s1++; // XXX UTF8 get char, next char
        char c2 = *s2++; // XXX UTF8 get char, next char
        if (c1 < c2) return -1;
   1b940:	4293      	cmp	r3, r2
   1b942:	d30e      	bcc.n	1b962 <strcmp+0x2a>
        else if (c1 > c2) return 1;
   1b944:	d80b      	bhi.n	1b95e <strcmp+0x26>
    while (*s1 && *s2) {
   1b946:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1b94a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1b94e:	2b00      	cmp	r3, #0
   1b950:	d1f5      	bne.n	1b93e <strcmp+0x6>
   1b952:	2a00      	cmp	r2, #0
   1b954:	bf14      	ite	ne
   1b956:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1b95a:	2000      	moveq	r0, #0
   1b95c:	4770      	bx	lr
        else if (c1 > c2) return 1;
   1b95e:	2001      	movs	r0, #1
    }
    if (*s2) return -1;
    else if (*s1) return 1;
    else return 0;
}
   1b960:	4770      	bx	lr
        if (c1 < c2) return -1;
   1b962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b966:	4770      	bx	lr

0001b968 <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n) {
   1b968:	b410      	push	{r4}
   1b96a:	3801      	subs	r0, #1
    while (*s1 && *s2 && n > 0) {
   1b96c:	e008      	b.n	1b980 <strncmp+0x18>
   1b96e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b972:	b1bc      	cbz	r4, 1b9a4 <strncmp+0x3c>
   1b974:	b192      	cbz	r2, 1b99c <strncmp+0x34>
        char c1 = *s1++; // XXX UTF8 get char, next char
        char c2 = *s2++; // XXX UTF8 get char, next char
        n--;
        if (c1 < c2) return -1;
   1b976:	42a3      	cmp	r3, r4
        n--;
   1b978:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
        if (c1 < c2) return -1;
   1b97c:	d318      	bcc.n	1b9b0 <strncmp+0x48>
        else if (c1 > c2) return 1;
   1b97e:	d81c      	bhi.n	1b9ba <strncmp+0x52>
    while (*s1 && *s2 && n > 0) {
   1b980:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1b984:	2b00      	cmp	r3, #0
   1b986:	d1f2      	bne.n	1b96e <strncmp+0x6>
    }
    if (n == 0) return 0;
   1b988:	b142      	cbz	r2, 1b99c <strncmp+0x34>
    else if (*s2) return -1;
   1b98a:	780b      	ldrb	r3, [r1, #0]
    else if (*s1) return 1;
    else return 0;
}
   1b98c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b990:	2b00      	cmp	r3, #0
   1b992:	bf14      	ite	ne
   1b994:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1b998:	2000      	moveq	r0, #0
   1b99a:	4770      	bx	lr
    if (n == 0) return 0;
   1b99c:	4610      	mov	r0, r2
}
   1b99e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b9a2:	4770      	bx	lr
    if (n == 0) return 0;
   1b9a4:	1c10      	adds	r0, r2, #0
   1b9a6:	bf18      	it	ne
   1b9a8:	2001      	movne	r0, #1
}
   1b9aa:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b9ae:	4770      	bx	lr
        if (c1 < c2) return -1;
   1b9b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b9b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b9b8:	4770      	bx	lr
        else if (c1 > c2) return 1;
   1b9ba:	2001      	movs	r0, #1
}
   1b9bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b9c0:	4770      	bx	lr
   1b9c2:	bf00      	nop

0001b9c4 <strchr>:
}

// Public Domain implementation of strchr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strchr_function
char *strchr(const char *s, int c)
{
   1b9c4:	b410      	push	{r4}
    /* Scan s for the character.  When this loop is finished,
       s will either point to the end of the string or the
       character we were looking for.  */
    while (*s != '\0' && *s != (char)c)
   1b9c6:	7802      	ldrb	r2, [r0, #0]
   1b9c8:	b182      	cbz	r2, 1b9ec <strchr+0x28>
   1b9ca:	b2cc      	uxtb	r4, r1
   1b9cc:	4294      	cmp	r4, r2
   1b9ce:	d102      	bne.n	1b9d6 <strchr+0x12>
   1b9d0:	e006      	b.n	1b9e0 <strchr+0x1c>
   1b9d2:	42a3      	cmp	r3, r4
   1b9d4:	d004      	beq.n	1b9e0 <strchr+0x1c>
   1b9d6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1b9da:	2b00      	cmp	r3, #0
   1b9dc:	d1f9      	bne.n	1b9d2 <strchr+0xe>
   1b9de:	461c      	mov	r4, r3
        s++;
    return ((*s == c) ? (char *) s : 0);
}
   1b9e0:	428c      	cmp	r4, r1
   1b9e2:	bf18      	it	ne
   1b9e4:	2000      	movne	r0, #0
   1b9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b9ea:	4770      	bx	lr
    while (*s != '\0' && *s != (char)c)
   1b9ec:	4614      	mov	r4, r2
   1b9ee:	e7f7      	b.n	1b9e0 <strchr+0x1c>

0001b9f0 <mp_hal_erase_line_from_cursor>:
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
        }
    }
}

STATIC void mp_hal_erase_line_from_cursor(uint n_chars_to_erase) {
   1b9f0:	b508      	push	{r3, lr}
    (void)n_chars_to_erase;
    mp_hal_stdout_tx_strn("\x1b[K", 3);
   1b9f2:	2103      	movs	r1, #3
   1b9f4:	4801      	ldr	r0, [pc, #4]	; (1b9fc <mp_hal_erase_line_from_cursor+0xc>)
   1b9f6:	f7fc ff39 	bl	1886c <mp_hal_stdout_tx_strn>
}
   1b9fa:	bd08      	pop	{r3, pc}
   1b9fc:	0002bcf8 	.word	0x0002bcf8

0001ba00 <mp_hal_move_cursor_back>:
STATIC void mp_hal_move_cursor_back(uint pos) {
   1ba00:	b500      	push	{lr}
   1ba02:	b083      	sub	sp, #12
    if (pos <= 4) {
   1ba04:	2804      	cmp	r0, #4
   1ba06:	d911      	bls.n	1ba2c <mp_hal_move_cursor_back+0x2c>
        int n = snprintf(&vt100_command[0], sizeof(vt100_command), "\x1b[%u", pos);
   1ba08:	4603      	mov	r3, r0
   1ba0a:	4a0c      	ldr	r2, [pc, #48]	; (1ba3c <mp_hal_move_cursor_back+0x3c>)
   1ba0c:	2106      	movs	r1, #6
   1ba0e:	4668      	mov	r0, sp
   1ba10:	f7fc fca4 	bl	1835c <snprintf>
        if (n > 0) {
   1ba14:	2800      	cmp	r0, #0
   1ba16:	dd0d      	ble.n	1ba34 <mp_hal_move_cursor_back+0x34>
            vt100_command[n] = 'D'; // replace null char
   1ba18:	ab02      	add	r3, sp, #8
   1ba1a:	4403      	add	r3, r0
   1ba1c:	2244      	movs	r2, #68	; 0x44
   1ba1e:	f803 2c08 	strb.w	r2, [r3, #-8]
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
   1ba22:	1c41      	adds	r1, r0, #1
   1ba24:	4668      	mov	r0, sp
   1ba26:	f7fc ff21 	bl	1886c <mp_hal_stdout_tx_strn>
}
   1ba2a:	e003      	b.n	1ba34 <mp_hal_move_cursor_back+0x34>
        mp_hal_stdout_tx_strn("\b\b\b\b", pos);
   1ba2c:	4601      	mov	r1, r0
   1ba2e:	4804      	ldr	r0, [pc, #16]	; (1ba40 <mp_hal_move_cursor_back+0x40>)
   1ba30:	f7fc ff1c 	bl	1886c <mp_hal_stdout_tx_strn>
}
   1ba34:	b003      	add	sp, #12
   1ba36:	f85d fb04 	ldr.w	pc, [sp], #4
   1ba3a:	bf00      	nop
   1ba3c:	0002bd04 	.word	0x0002bd04
   1ba40:	0002bcfc 	.word	0x0002bcfc

0001ba44 <readline_auto_indent>:

    return -1;
}

#if MICROPY_REPL_AUTO_INDENT
STATIC void readline_auto_indent(void) {
   1ba44:	b570      	push	{r4, r5, r6, lr}
    vstr_t *line = rl.line;
   1ba46:	4b24      	ldr	r3, [pc, #144]	; (1bad8 <readline_auto_indent+0x94>)
   1ba48:	681c      	ldr	r4, [r3, #0]
    if (line->len > 1 && line->buf[line->len - 1] == '\n') {
   1ba4a:	6860      	ldr	r0, [r4, #4]
   1ba4c:	2801      	cmp	r0, #1
   1ba4e:	d904      	bls.n	1ba5a <readline_auto_indent+0x16>
   1ba50:	68a1      	ldr	r1, [r4, #8]
   1ba52:	1e42      	subs	r2, r0, #1
   1ba54:	5c8b      	ldrb	r3, [r1, r2]
   1ba56:	2b0a      	cmp	r3, #10
   1ba58:	d000      	beq.n	1ba5c <readline_auto_indent+0x18>
            vstr_add_strn(line, "    ", 4);
            mp_hal_stdout_tx_strn("    ", 4);
            rl.cursor_pos += 4;
        }
    }
}
   1ba5a:	bd70      	pop	{r4, r5, r6, pc}
        for (i = line->len - 1; i > 0; i--) {
   1ba5c:	2a00      	cmp	r2, #0
   1ba5e:	dd06      	ble.n	1ba6e <readline_auto_indent+0x2a>
            if (line->buf[i - 1] == '\n') {
   1ba60:	188b      	adds	r3, r1, r2
   1ba62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   1ba66:	2b0a      	cmp	r3, #10
   1ba68:	d001      	beq.n	1ba6e <readline_auto_indent+0x2a>
        for (i = line->len - 1; i > 0; i--) {
   1ba6a:	3a01      	subs	r2, #1
   1ba6c:	e7f6      	b.n	1ba5c <readline_auto_indent+0x18>
        for (j = i; j < line->len; j++) {
   1ba6e:	4616      	mov	r6, r2
   1ba70:	4613      	mov	r3, r2
   1ba72:	4298      	cmp	r0, r3
   1ba74:	d904      	bls.n	1ba80 <readline_auto_indent+0x3c>
            if (line->buf[j] != ' ') {
   1ba76:	5ccd      	ldrb	r5, [r1, r3]
   1ba78:	2d20      	cmp	r5, #32
   1ba7a:	d101      	bne.n	1ba80 <readline_auto_indent+0x3c>
        for (j = i; j < line->len; j++) {
   1ba7c:	3301      	adds	r3, #1
   1ba7e:	e7f8      	b.n	1ba72 <readline_auto_indent+0x2e>
        if (i > 0 && j + 1 == line->len) {
   1ba80:	2a00      	cmp	r2, #0
   1ba82:	dd02      	ble.n	1ba8a <readline_auto_indent+0x46>
   1ba84:	1c5d      	adds	r5, r3, #1
   1ba86:	42a8      	cmp	r0, r5
   1ba88:	d008      	beq.n	1ba9c <readline_auto_indent+0x58>
        int n = (j - i) / 4;
   1ba8a:	1b9b      	subs	r3, r3, r6
   1ba8c:	089b      	lsrs	r3, r3, #2
        if (line->buf[line->len - 2] == ':') {
   1ba8e:	4401      	add	r1, r0
   1ba90:	f811 2c02 	ldrb.w	r2, [r1, #-2]
   1ba94:	2a3a      	cmp	r2, #58	; 0x3a
   1ba96:	d11a      	bne.n	1bace <readline_auto_indent+0x8a>
            n += 1;
   1ba98:	3301      	adds	r3, #1
   1ba9a:	e018      	b.n	1bace <readline_auto_indent+0x8a>
            for (size_t k = i - 1; k > 0; --k) {
   1ba9c:	3a01      	subs	r2, #1
   1ba9e:	2a00      	cmp	r2, #0
   1baa0:	d0f3      	beq.n	1ba8a <readline_auto_indent+0x46>
                if (line->buf[k - 1] == '\n') {
   1baa2:	3a01      	subs	r2, #1
   1baa4:	5c8d      	ldrb	r5, [r1, r2]
   1baa6:	2d0a      	cmp	r5, #10
   1baa8:	d0d7      	beq.n	1ba5a <readline_auto_indent+0x16>
                } else if (line->buf[k - 1] != ' ') {
   1baaa:	2d20      	cmp	r5, #32
   1baac:	d0f7      	beq.n	1ba9e <readline_auto_indent+0x5a>
   1baae:	e7ec      	b.n	1ba8a <readline_auto_indent+0x46>
            vstr_add_strn(line, "    ", 4);
   1bab0:	4d0a      	ldr	r5, [pc, #40]	; (1badc <readline_auto_indent+0x98>)
   1bab2:	2204      	movs	r2, #4
   1bab4:	4629      	mov	r1, r5
   1bab6:	4620      	mov	r0, r4
   1bab8:	f7e5 fe52 	bl	1760 <vstr_add_strn>
            mp_hal_stdout_tx_strn("    ", 4);
   1babc:	2104      	movs	r1, #4
   1babe:	4628      	mov	r0, r5
   1bac0:	f7fc fed4 	bl	1886c <mp_hal_stdout_tx_strn>
            rl.cursor_pos += 4;
   1bac4:	4a04      	ldr	r2, [pc, #16]	; (1bad8 <readline_auto_indent+0x94>)
   1bac6:	6913      	ldr	r3, [r2, #16]
   1bac8:	3304      	adds	r3, #4
   1baca:	6113      	str	r3, [r2, #16]
        while (n-- > 0) {
   1bacc:	4633      	mov	r3, r6
   1bace:	1e5e      	subs	r6, r3, #1
   1bad0:	2b00      	cmp	r3, #0
   1bad2:	dced      	bgt.n	1bab0 <readline_auto_indent+0x6c>
   1bad4:	e7c1      	b.n	1ba5a <readline_auto_indent+0x16>
   1bad6:	bf00      	nop
   1bad8:	2000067c 	.word	0x2000067c
   1badc:	0002bd0c 	.word	0x0002bd0c

0001bae0 <str_dup_maybe>:
STATIC char *str_dup_maybe(const char *str) {
   1bae0:	b570      	push	{r4, r5, r6, lr}
   1bae2:	4606      	mov	r6, r0
    uint32_t len = strlen(str);
   1bae4:	f7ff ff1e 	bl	1b924 <strlen>
    char *s2 = m_new_maybe(char, len + 1);
   1bae8:	1c45      	adds	r5, r0, #1
   1baea:	4628      	mov	r0, r5
   1baec:	f7e4 fef4 	bl	8d8 <m_malloc_maybe>
    if (s2 == NULL) {
   1baf0:	4604      	mov	r4, r0
   1baf2:	b118      	cbz	r0, 1bafc <str_dup_maybe+0x1c>
    memcpy(s2, str, len + 1);
   1baf4:	462a      	mov	r2, r5
   1baf6:	4631      	mov	r1, r6
   1baf8:	f7ff fe7c 	bl	1b7f4 <memcpy>
}
   1bafc:	4620      	mov	r0, r4
   1bafe:	bd70      	pop	{r4, r5, r6, pc}

0001bb00 <readline_init0>:
void readline_init0(void) {
   1bb00:	b508      	push	{r3, lr}
    memset(MP_STATE_PORT(readline_hist), 0, READLINE_HIST_SIZE * sizeof(const char*));
   1bb02:	2220      	movs	r2, #32
   1bb04:	2100      	movs	r1, #0
   1bb06:	4802      	ldr	r0, [pc, #8]	; (1bb10 <readline_init0+0x10>)
   1bb08:	f7ff feb8 	bl	1b87c <memset>
}
   1bb0c:	bd08      	pop	{r3, pc}
   1bb0e:	bf00      	nop
   1bb10:	20000918 	.word	0x20000918

0001bb14 <readline_init>:
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
    #endif
}

void readline_init(vstr_t *line, const char *prompt) {
   1bb14:	b508      	push	{r3, lr}
    rl.line = line;
   1bb16:	4b09      	ldr	r3, [pc, #36]	; (1bb3c <readline_init+0x28>)
   1bb18:	6018      	str	r0, [r3, #0]
    rl.orig_line_len = line->len;
   1bb1a:	6842      	ldr	r2, [r0, #4]
   1bb1c:	605a      	str	r2, [r3, #4]
    rl.escape_seq = ESEQ_NONE;
   1bb1e:	2000      	movs	r0, #0
   1bb20:	6098      	str	r0, [r3, #8]
    rl.escape_seq_buf[0] = 0;
   1bb22:	7518      	strb	r0, [r3, #20]
    rl.hist_cur = -1;
   1bb24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb28:	60d8      	str	r0, [r3, #12]
    rl.cursor_pos = rl.orig_line_len;
   1bb2a:	611a      	str	r2, [r3, #16]
    rl.prompt = prompt;
   1bb2c:	6199      	str	r1, [r3, #24]
    mp_hal_stdout_tx_str(prompt);
   1bb2e:	4608      	mov	r0, r1
   1bb30:	f7fc ff80 	bl	18a34 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1bb34:	f7ff ff86 	bl	1ba44 <readline_auto_indent>
    #endif
}
   1bb38:	bd08      	pop	{r3, pc}
   1bb3a:	bf00      	nop
   1bb3c:	2000067c 	.word	0x2000067c

0001bb40 <readline_push_history>:
        }
    }
}

void readline_push_history(const char *line) {
    if (line[0] != '\0'
   1bb40:	7803      	ldrb	r3, [r0, #0]
   1bb42:	b1f3      	cbz	r3, 1bb82 <readline_push_history+0x42>
void readline_push_history(const char *line) {
   1bb44:	b510      	push	{r4, lr}
   1bb46:	4604      	mov	r4, r0
        && (MP_STATE_PORT(readline_hist)[0] == NULL
   1bb48:	4b0e      	ldr	r3, [pc, #56]	; (1bb84 <readline_push_history+0x44>)
   1bb4a:	6f98      	ldr	r0, [r3, #120]	; 0x78
   1bb4c:	b118      	cbz	r0, 1bb56 <readline_push_history+0x16>
            || strcmp(MP_STATE_PORT(readline_hist)[0], line) != 0)) {
   1bb4e:	4621      	mov	r1, r4
   1bb50:	f7ff fef2 	bl	1b938 <strcmp>
   1bb54:	b1a0      	cbz	r0, 1bb80 <readline_push_history+0x40>
        // a line which is not empty and different from the last one
        // so update the history
        char *most_recent_hist = str_dup_maybe(line);
   1bb56:	4620      	mov	r0, r4
   1bb58:	f7ff ffc2 	bl	1bae0 <str_dup_maybe>
        if (most_recent_hist != NULL) {
   1bb5c:	4604      	mov	r4, r0
   1bb5e:	b178      	cbz	r0, 1bb80 <readline_push_history+0x40>
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1bb60:	2307      	movs	r3, #7
   1bb62:	e009      	b.n	1bb78 <readline_push_history+0x38>
                MP_STATE_PORT(readline_hist)[i] = MP_STATE_PORT(readline_hist)[i - 1];
   1bb64:	4a07      	ldr	r2, [pc, #28]	; (1bb84 <readline_push_history+0x44>)
   1bb66:	f103 011d 	add.w	r1, r3, #29
   1bb6a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1bb6e:	f103 011e 	add.w	r1, r3, #30
   1bb72:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1bb76:	3b01      	subs	r3, #1
   1bb78:	2b00      	cmp	r3, #0
   1bb7a:	dcf3      	bgt.n	1bb64 <readline_push_history+0x24>
            }
            MP_STATE_PORT(readline_hist)[0] = most_recent_hist;
   1bb7c:	4b01      	ldr	r3, [pc, #4]	; (1bb84 <readline_push_history+0x44>)
   1bb7e:	679c      	str	r4, [r3, #120]	; 0x78
        }
    }
}
   1bb80:	bd10      	pop	{r4, pc}
   1bb82:	4770      	bx	lr
   1bb84:	200008a0 	.word	0x200008a0

0001bb88 <readline_process_char>:
int readline_process_char(int c) {
   1bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb8a:	b083      	sub	sp, #12
    size_t last_line_len = rl.line->len;
   1bb8c:	4baf      	ldr	r3, [pc, #700]	; (1be4c <readline_process_char+0x2c4>)
   1bb8e:	681e      	ldr	r6, [r3, #0]
   1bb90:	6877      	ldr	r7, [r6, #4]
    if (rl.escape_seq == ESEQ_NONE) {
   1bb92:	689c      	ldr	r4, [r3, #8]
   1bb94:	2c00      	cmp	r4, #0
   1bb96:	f040 8092 	bne.w	1bcbe <readline_process_char+0x136>
        if (CHAR_CTRL_A <= c && c <= CHAR_CTRL_E && vstr_len(rl.line) == rl.orig_line_len) {
   1bb9a:	1e43      	subs	r3, r0, #1
   1bb9c:	2b04      	cmp	r3, #4
   1bb9e:	d804      	bhi.n	1bbaa <readline_process_char+0x22>
   1bba0:	4baa      	ldr	r3, [pc, #680]	; (1be4c <readline_process_char+0x2c4>)
   1bba2:	685b      	ldr	r3, [r3, #4]
   1bba4:	42bb      	cmp	r3, r7
   1bba6:	f000 81c0 	beq.w	1bf2a <readline_process_char+0x3a2>
        } else if (c == CHAR_CTRL_A) {
   1bbaa:	2801      	cmp	r0, #1
   1bbac:	f000 8139 	beq.w	1be22 <readline_process_char+0x29a>
        } else if (c == CHAR_CTRL_C) {
   1bbb0:	2803      	cmp	r0, #3
   1bbb2:	f000 81bc 	beq.w	1bf2e <readline_process_char+0x3a6>
        } else if (c == CHAR_CTRL_E) {
   1bbb6:	2805      	cmp	r0, #5
   1bbb8:	f000 8150 	beq.w	1be5c <readline_process_char+0x2d4>
        } else if (c == '\r') {
   1bbbc:	280d      	cmp	r0, #13
   1bbbe:	d00e      	beq.n	1bbde <readline_process_char+0x56>
        } else if (c == 27) {
   1bbc0:	281b      	cmp	r0, #27
   1bbc2:	d018      	beq.n	1bbf6 <readline_process_char+0x6e>
        } else if (c == 8 || c == 127) {
   1bbc4:	2808      	cmp	r0, #8
   1bbc6:	d01c      	beq.n	1bc02 <readline_process_char+0x7a>
   1bbc8:	287f      	cmp	r0, #127	; 0x7f
   1bbca:	d01a      	beq.n	1bc02 <readline_process_char+0x7a>
        } else if (c == 9) {
   1bbcc:	2809      	cmp	r0, #9
   1bbce:	d037      	beq.n	1bc40 <readline_process_char+0xb8>
        } else if (32 <= c && c <= 126) {
   1bbd0:	f1a0 0320 	sub.w	r3, r0, #32
   1bbd4:	2b5e      	cmp	r3, #94	; 0x5e
   1bbd6:	d968      	bls.n	1bcaa <readline_process_char+0x122>
    int redraw_step_back = 0;
   1bbd8:	4625      	mov	r5, r4
    bool redraw_from_cursor = false;
   1bbda:	2600      	movs	r6, #0
   1bbdc:	e12a      	b.n	1be34 <readline_process_char+0x2ac>
            mp_hal_stdout_tx_str("\r\n");
   1bbde:	489c      	ldr	r0, [pc, #624]	; (1be50 <readline_process_char+0x2c8>)
   1bbe0:	f7fc ff28 	bl	18a34 <mp_hal_stdout_tx_str>
            readline_push_history(vstr_null_terminated_str(rl.line) + rl.orig_line_len);
   1bbe4:	4d99      	ldr	r5, [pc, #612]	; (1be4c <readline_process_char+0x2c4>)
   1bbe6:	6828      	ldr	r0, [r5, #0]
   1bbe8:	f7e5 fe4f 	bl	188a <vstr_null_terminated_str>
   1bbec:	686b      	ldr	r3, [r5, #4]
   1bbee:	4418      	add	r0, r3
   1bbf0:	f7ff ffa6 	bl	1bb40 <readline_push_history>
            return 0;
   1bbf4:	e126      	b.n	1be44 <readline_process_char+0x2bc>
            rl.escape_seq = ESEQ_ESC;
   1bbf6:	4b95      	ldr	r3, [pc, #596]	; (1be4c <readline_process_char+0x2c4>)
   1bbf8:	2201      	movs	r2, #1
   1bbfa:	609a      	str	r2, [r3, #8]
    int redraw_step_back = 0;
   1bbfc:	4625      	mov	r5, r4
    bool redraw_from_cursor = false;
   1bbfe:	2600      	movs	r6, #0
   1bc00:	e118      	b.n	1be34 <readline_process_char+0x2ac>
            if (rl.cursor_pos > rl.orig_line_len) {
   1bc02:	4b92      	ldr	r3, [pc, #584]	; (1be4c <readline_process_char+0x2c4>)
   1bc04:	6919      	ldr	r1, [r3, #16]
   1bc06:	685b      	ldr	r3, [r3, #4]
   1bc08:	4299      	cmp	r1, r3
   1bc0a:	d802      	bhi.n	1bc12 <readline_process_char+0x8a>
    int redraw_step_back = 0;
   1bc0c:	4625      	mov	r5, r4
    bool redraw_from_cursor = false;
   1bc0e:	2600      	movs	r6, #0
   1bc10:	e110      	b.n	1be34 <readline_process_char+0x2ac>
                int nspace = 0;
   1bc12:	4622      	mov	r2, r4
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1bc14:	4299      	cmp	r1, r3
   1bc16:	d907      	bls.n	1bc28 <readline_process_char+0xa0>
                    if (rl.line->buf[i] != ' ') {
   1bc18:	68b0      	ldr	r0, [r6, #8]
   1bc1a:	5cc0      	ldrb	r0, [r0, r3]
   1bc1c:	2820      	cmp	r0, #32
   1bc1e:	d102      	bne.n	1bc26 <readline_process_char+0x9e>
                    nspace += 1;
   1bc20:	3201      	adds	r2, #1
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1bc22:	3301      	adds	r3, #1
   1bc24:	e7f6      	b.n	1bc14 <readline_process_char+0x8c>
                        nspace = 0;
   1bc26:	4622      	mov	r2, r4
                if (nspace < 4) {
   1bc28:	2a03      	cmp	r2, #3
   1bc2a:	dc07      	bgt.n	1bc3c <readline_process_char+0xb4>
                    nspace = 1;
   1bc2c:	2501      	movs	r5, #1
                vstr_cut_out_bytes(rl.line, rl.cursor_pos - nspace, nspace);
   1bc2e:	462a      	mov	r2, r5
   1bc30:	1b49      	subs	r1, r1, r5
   1bc32:	4630      	mov	r0, r6
   1bc34:	f7e5 fe68 	bl	1908 <vstr_cut_out_bytes>
                redraw_from_cursor = true;
   1bc38:	2601      	movs	r6, #1
   1bc3a:	e0fb      	b.n	1be34 <readline_process_char+0x2ac>
                    nspace = 4;
   1bc3c:	2504      	movs	r5, #4
   1bc3e:	e7f6      	b.n	1bc2e <readline_process_char+0xa6>
            size_t compl_len = mp_repl_autocomplete(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len, &mp_plat_print, &compl_str);
   1bc40:	68b5      	ldr	r5, [r6, #8]
   1bc42:	4b82      	ldr	r3, [pc, #520]	; (1be4c <readline_process_char+0x2c4>)
   1bc44:	6858      	ldr	r0, [r3, #4]
   1bc46:	6919      	ldr	r1, [r3, #16]
   1bc48:	ab01      	add	r3, sp, #4
   1bc4a:	4a82      	ldr	r2, [pc, #520]	; (1be54 <readline_process_char+0x2cc>)
   1bc4c:	1a09      	subs	r1, r1, r0
   1bc4e:	4428      	add	r0, r5
   1bc50:	f7fa f910 	bl	15e74 <mp_repl_autocomplete>
            if (compl_len == 0) {
   1bc54:	4606      	mov	r6, r0
   1bc56:	b318      	cbz	r0, 1bca0 <readline_process_char+0x118>
            } else if (compl_len == (size_t)(-1)) {
   1bc58:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1bc5c:	d001      	beq.n	1bc62 <readline_process_char+0xda>
                for (size_t i = 0; i < compl_len; ++i) {
   1bc5e:	2500      	movs	r5, #0
   1bc60:	e019      	b.n	1bc96 <readline_process_char+0x10e>
                mp_hal_stdout_tx_str(rl.prompt);
   1bc62:	4d7a      	ldr	r5, [pc, #488]	; (1be4c <readline_process_char+0x2c4>)
   1bc64:	69a8      	ldr	r0, [r5, #24]
   1bc66:	f7fc fee5 	bl	18a34 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_strn(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
   1bc6a:	682b      	ldr	r3, [r5, #0]
   1bc6c:	6898      	ldr	r0, [r3, #8]
   1bc6e:	686b      	ldr	r3, [r5, #4]
   1bc70:	6929      	ldr	r1, [r5, #16]
   1bc72:	1ac9      	subs	r1, r1, r3
   1bc74:	4418      	add	r0, r3
   1bc76:	f7fc fdf9 	bl	1886c <mp_hal_stdout_tx_strn>
    int redraw_step_forward = 0;
   1bc7a:	4623      	mov	r3, r4
                redraw_from_cursor = true;
   1bc7c:	2601      	movs	r6, #1
   1bc7e:	e011      	b.n	1bca4 <readline_process_char+0x11c>
                    vstr_ins_byte(rl.line, rl.cursor_pos + i, *compl_str++);
   1bc80:	4b72      	ldr	r3, [pc, #456]	; (1be4c <readline_process_char+0x2c4>)
   1bc82:	6818      	ldr	r0, [r3, #0]
   1bc84:	6919      	ldr	r1, [r3, #16]
   1bc86:	9b01      	ldr	r3, [sp, #4]
   1bc88:	1c5a      	adds	r2, r3, #1
   1bc8a:	9201      	str	r2, [sp, #4]
   1bc8c:	781a      	ldrb	r2, [r3, #0]
   1bc8e:	4429      	add	r1, r5
   1bc90:	f7e5 fe23 	bl	18da <vstr_ins_byte>
                for (size_t i = 0; i < compl_len; ++i) {
   1bc94:	3501      	adds	r5, #1
   1bc96:	42b5      	cmp	r5, r6
   1bc98:	d3f2      	bcc.n	1bc80 <readline_process_char+0xf8>
                redraw_step_forward = compl_len;
   1bc9a:	4633      	mov	r3, r6
                redraw_from_cursor = true;
   1bc9c:	2601      	movs	r6, #1
   1bc9e:	e001      	b.n	1bca4 <readline_process_char+0x11c>
    int redraw_step_forward = 0;
   1bca0:	4623      	mov	r3, r4
    bool redraw_from_cursor = false;
   1bca2:	2600      	movs	r6, #0
    int redraw_step_back = 0;
   1bca4:	4625      	mov	r5, r4
   1bca6:	461c      	mov	r4, r3
   1bca8:	e0c4      	b.n	1be34 <readline_process_char+0x2ac>
            vstr_ins_char(rl.line, rl.cursor_pos, c);
   1bcaa:	4602      	mov	r2, r0
   1bcac:	4b67      	ldr	r3, [pc, #412]	; (1be4c <readline_process_char+0x2c4>)
   1bcae:	6919      	ldr	r1, [r3, #16]
   1bcb0:	4630      	mov	r0, r6
   1bcb2:	f7e5 fe19 	bl	18e8 <vstr_ins_char>
    int redraw_step_back = 0;
   1bcb6:	4625      	mov	r5, r4
            redraw_step_forward = 1;
   1bcb8:	2401      	movs	r4, #1
            redraw_from_cursor = true;
   1bcba:	4626      	mov	r6, r4
   1bcbc:	e0ba      	b.n	1be34 <readline_process_char+0x2ac>
    } else if (rl.escape_seq == ESEQ_ESC) {
   1bcbe:	2c01      	cmp	r4, #1
   1bcc0:	d00d      	beq.n	1bcde <readline_process_char+0x156>
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET) {
   1bcc2:	2c02      	cmp	r4, #2
   1bcc4:	d023      	beq.n	1bd0e <readline_process_char+0x186>
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET_DIGIT) {
   1bcc6:	2c03      	cmp	r4, #3
   1bcc8:	f000 8095 	beq.w	1bdf6 <readline_process_char+0x26e>
    } else if (rl.escape_seq == ESEQ_ESC_O) {
   1bccc:	2c04      	cmp	r4, #4
   1bcce:	f000 80db 	beq.w	1be88 <readline_process_char+0x300>
        rl.escape_seq = ESEQ_NONE;
   1bcd2:	2500      	movs	r5, #0
   1bcd4:	4b5d      	ldr	r3, [pc, #372]	; (1be4c <readline_process_char+0x2c4>)
   1bcd6:	609d      	str	r5, [r3, #8]
    int redraw_step_forward = 0;
   1bcd8:	462c      	mov	r4, r5
    bool redraw_from_cursor = false;
   1bcda:	462e      	mov	r6, r5
   1bcdc:	e0aa      	b.n	1be34 <readline_process_char+0x2ac>
        switch (c) {
   1bcde:	284f      	cmp	r0, #79	; 0x4f
   1bce0:	d008      	beq.n	1bcf4 <readline_process_char+0x16c>
   1bce2:	285b      	cmp	r0, #91	; 0x5b
   1bce4:	d10d      	bne.n	1bd02 <readline_process_char+0x17a>
                rl.escape_seq = ESEQ_ESC_BRACKET;
   1bce6:	4b59      	ldr	r3, [pc, #356]	; (1be4c <readline_process_char+0x2c4>)
   1bce8:	2202      	movs	r2, #2
   1bcea:	609a      	str	r2, [r3, #8]
    int redraw_step_forward = 0;
   1bcec:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1bcee:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bcf0:	4625      	mov	r5, r4
                break;
   1bcf2:	e09f      	b.n	1be34 <readline_process_char+0x2ac>
                rl.escape_seq = ESEQ_ESC_O;
   1bcf4:	4b55      	ldr	r3, [pc, #340]	; (1be4c <readline_process_char+0x2c4>)
   1bcf6:	2204      	movs	r2, #4
   1bcf8:	609a      	str	r2, [r3, #8]
    int redraw_step_forward = 0;
   1bcfa:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1bcfc:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bcfe:	4625      	mov	r5, r4
                break;
   1bd00:	e098      	b.n	1be34 <readline_process_char+0x2ac>
                rl.escape_seq = ESEQ_NONE;
   1bd02:	2500      	movs	r5, #0
   1bd04:	4b51      	ldr	r3, [pc, #324]	; (1be4c <readline_process_char+0x2c4>)
   1bd06:	609d      	str	r5, [r3, #8]
    int redraw_step_forward = 0;
   1bd08:	462c      	mov	r4, r5
    bool redraw_from_cursor = false;
   1bd0a:	462e      	mov	r6, r5
   1bd0c:	e092      	b.n	1be34 <readline_process_char+0x2ac>
        if ('0' <= c && c <= '9') {
   1bd0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1bd12:	2b09      	cmp	r3, #9
   1bd14:	d807      	bhi.n	1bd26 <readline_process_char+0x19e>
            rl.escape_seq = ESEQ_ESC_BRACKET_DIGIT;
   1bd16:	4b4d      	ldr	r3, [pc, #308]	; (1be4c <readline_process_char+0x2c4>)
   1bd18:	2203      	movs	r2, #3
   1bd1a:	609a      	str	r2, [r3, #8]
            rl.escape_seq_buf[0] = c;
   1bd1c:	7518      	strb	r0, [r3, #20]
    int redraw_step_forward = 0;
   1bd1e:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1bd20:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bd22:	4625      	mov	r5, r4
   1bd24:	e086      	b.n	1be34 <readline_process_char+0x2ac>
            rl.escape_seq = ESEQ_NONE;
   1bd26:	4b49      	ldr	r3, [pc, #292]	; (1be4c <readline_process_char+0x2c4>)
   1bd28:	2200      	movs	r2, #0
   1bd2a:	609a      	str	r2, [r3, #8]
            if (c == 'A') {
   1bd2c:	2841      	cmp	r0, #65	; 0x41
   1bd2e:	d00e      	beq.n	1bd4e <readline_process_char+0x1c6>
            } else if (c == 'B') {
   1bd30:	2842      	cmp	r0, #66	; 0x42
   1bd32:	d02b      	beq.n	1bd8c <readline_process_char+0x204>
            } else if (c == 'C') {
   1bd34:	2843      	cmp	r0, #67	; 0x43
   1bd36:	d04d      	beq.n	1bdd4 <readline_process_char+0x24c>
            } else if (c == 'D') {
   1bd38:	2844      	cmp	r0, #68	; 0x44
   1bd3a:	d053      	beq.n	1bde4 <readline_process_char+0x25c>
            } else if (c == 'H') {
   1bd3c:	2848      	cmp	r0, #72	; 0x48
   1bd3e:	d070      	beq.n	1be22 <readline_process_char+0x29a>
            } else if (c == 'F') {
   1bd40:	2846      	cmp	r0, #70	; 0x46
   1bd42:	f000 808b 	beq.w	1be5c <readline_process_char+0x2d4>
    int redraw_step_forward = 0;
   1bd46:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1bd48:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bd4a:	4625      	mov	r5, r4
   1bd4c:	e072      	b.n	1be34 <readline_process_char+0x2ac>
                if (rl.hist_cur + 1 < (int)READLINE_HIST_SIZE && MP_STATE_PORT(readline_hist)[rl.hist_cur + 1] != NULL) {
   1bd4e:	68db      	ldr	r3, [r3, #12]
   1bd50:	3301      	adds	r3, #1
   1bd52:	2b07      	cmp	r3, #7
   1bd54:	f300 80a2 	bgt.w	1be9c <readline_process_char+0x314>
   1bd58:	f103 021e 	add.w	r2, r3, #30
   1bd5c:	493e      	ldr	r1, [pc, #248]	; (1be58 <readline_process_char+0x2d0>)
   1bd5e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1bd62:	2a00      	cmp	r2, #0
   1bd64:	f000 809e 	beq.w	1bea4 <readline_process_char+0x31c>
                    rl.hist_cur += 1;
   1bd68:	4c38      	ldr	r4, [pc, #224]	; (1be4c <readline_process_char+0x2c4>)
   1bd6a:	60e3      	str	r3, [r4, #12]
                    rl.line->len = rl.orig_line_len;
   1bd6c:	6862      	ldr	r2, [r4, #4]
   1bd6e:	6072      	str	r2, [r6, #4]
                    vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1bd70:	331e      	adds	r3, #30
   1bd72:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   1bd76:	4630      	mov	r0, r6
   1bd78:	f7e5 fda3 	bl	18c2 <vstr_add_str>
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1bd7c:	6925      	ldr	r5, [r4, #16]
   1bd7e:	6863      	ldr	r3, [r4, #4]
   1bd80:	1aed      	subs	r5, r5, r3
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1bd82:	6822      	ldr	r2, [r4, #0]
   1bd84:	6854      	ldr	r4, [r2, #4]
   1bd86:	1ae4      	subs	r4, r4, r3
                    redraw_from_cursor = true;
   1bd88:	2601      	movs	r6, #1
   1bd8a:	e053      	b.n	1be34 <readline_process_char+0x2ac>
                if (rl.hist_cur >= 0) {
   1bd8c:	4b2f      	ldr	r3, [pc, #188]	; (1be4c <readline_process_char+0x2c4>)
   1bd8e:	68db      	ldr	r3, [r3, #12]
   1bd90:	2b00      	cmp	r3, #0
   1bd92:	da03      	bge.n	1bd9c <readline_process_char+0x214>
    int redraw_step_forward = 0;
   1bd94:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1bd96:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bd98:	4625      	mov	r5, r4
   1bd9a:	e04b      	b.n	1be34 <readline_process_char+0x2ac>
                    rl.hist_cur -= 1;
   1bd9c:	4c2b      	ldr	r4, [pc, #172]	; (1be4c <readline_process_char+0x2c4>)
   1bd9e:	3b01      	subs	r3, #1
   1bda0:	60e3      	str	r3, [r4, #12]
                    vstr_cut_tail_bytes(rl.line, rl.line->len - rl.orig_line_len);
   1bda2:	6861      	ldr	r1, [r4, #4]
   1bda4:	1a79      	subs	r1, r7, r1
   1bda6:	4630      	mov	r0, r6
   1bda8:	f7e5 fda5 	bl	18f6 <vstr_cut_tail_bytes>
                    if (rl.hist_cur >= 0) {
   1bdac:	68e3      	ldr	r3, [r4, #12]
   1bdae:	2b00      	cmp	r3, #0
   1bdb0:	da08      	bge.n	1bdc4 <readline_process_char+0x23c>
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1bdb2:	4b26      	ldr	r3, [pc, #152]	; (1be4c <readline_process_char+0x2c4>)
   1bdb4:	691d      	ldr	r5, [r3, #16]
   1bdb6:	685a      	ldr	r2, [r3, #4]
   1bdb8:	1aad      	subs	r5, r5, r2
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1bdba:	681b      	ldr	r3, [r3, #0]
   1bdbc:	685c      	ldr	r4, [r3, #4]
   1bdbe:	1aa4      	subs	r4, r4, r2
                    redraw_from_cursor = true;
   1bdc0:	2601      	movs	r6, #1
   1bdc2:	e037      	b.n	1be34 <readline_process_char+0x2ac>
                        vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1bdc4:	331e      	adds	r3, #30
   1bdc6:	4a24      	ldr	r2, [pc, #144]	; (1be58 <readline_process_char+0x2d0>)
   1bdc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1bdcc:	6820      	ldr	r0, [r4, #0]
   1bdce:	f7e5 fd78 	bl	18c2 <vstr_add_str>
   1bdd2:	e7ee      	b.n	1bdb2 <readline_process_char+0x22a>
                if (rl.cursor_pos < rl.line->len) {
   1bdd4:	4b1d      	ldr	r3, [pc, #116]	; (1be4c <readline_process_char+0x2c4>)
   1bdd6:	691b      	ldr	r3, [r3, #16]
   1bdd8:	42bb      	cmp	r3, r7
   1bdda:	d367      	bcc.n	1beac <readline_process_char+0x324>
    int redraw_step_forward = 0;
   1bddc:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1bdde:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bde0:	4625      	mov	r5, r4
   1bde2:	e027      	b.n	1be34 <readline_process_char+0x2ac>
                if (rl.cursor_pos > rl.orig_line_len) {
   1bde4:	4b19      	ldr	r3, [pc, #100]	; (1be4c <readline_process_char+0x2c4>)
   1bde6:	691a      	ldr	r2, [r3, #16]
   1bde8:	685b      	ldr	r3, [r3, #4]
   1bdea:	429a      	cmp	r2, r3
   1bdec:	d862      	bhi.n	1beb4 <readline_process_char+0x32c>
    int redraw_step_forward = 0;
   1bdee:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1bdf0:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bdf2:	4625      	mov	r5, r4
   1bdf4:	e01e      	b.n	1be34 <readline_process_char+0x2ac>
        if (c == '~') {
   1bdf6:	287e      	cmp	r0, #126	; 0x7e
   1bdf8:	d003      	beq.n	1be02 <readline_process_char+0x27a>
    int redraw_step_forward = 0;
   1bdfa:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1bdfc:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bdfe:	4625      	mov	r5, r4
   1be00:	e015      	b.n	1be2e <readline_process_char+0x2a6>
            if (rl.escape_seq_buf[0] == '1' || rl.escape_seq_buf[0] == '7') {
   1be02:	4b12      	ldr	r3, [pc, #72]	; (1be4c <readline_process_char+0x2c4>)
   1be04:	7d1b      	ldrb	r3, [r3, #20]
   1be06:	2b31      	cmp	r3, #49	; 0x31
   1be08:	d00b      	beq.n	1be22 <readline_process_char+0x29a>
   1be0a:	2b37      	cmp	r3, #55	; 0x37
   1be0c:	d009      	beq.n	1be22 <readline_process_char+0x29a>
            } else if (rl.escape_seq_buf[0] == '4' || rl.escape_seq_buf[0] == '8') {
   1be0e:	2b34      	cmp	r3, #52	; 0x34
   1be10:	d024      	beq.n	1be5c <readline_process_char+0x2d4>
   1be12:	2b38      	cmp	r3, #56	; 0x38
   1be14:	d022      	beq.n	1be5c <readline_process_char+0x2d4>
            } else if (rl.escape_seq_buf[0] == '3') {
   1be16:	2b33      	cmp	r3, #51	; 0x33
   1be18:	d026      	beq.n	1be68 <readline_process_char+0x2e0>
    int redraw_step_forward = 0;
   1be1a:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1be1c:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1be1e:	4625      	mov	r5, r4
   1be20:	e005      	b.n	1be2e <readline_process_char+0x2a6>
                redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1be22:	4b0a      	ldr	r3, [pc, #40]	; (1be4c <readline_process_char+0x2c4>)
   1be24:	691d      	ldr	r5, [r3, #16]
   1be26:	685b      	ldr	r3, [r3, #4]
   1be28:	1aed      	subs	r5, r5, r3
    int redraw_step_forward = 0;
   1be2a:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1be2c:	4626      	mov	r6, r4
        rl.escape_seq = ESEQ_NONE;
   1be2e:	4b07      	ldr	r3, [pc, #28]	; (1be4c <readline_process_char+0x2c4>)
   1be30:	2200      	movs	r2, #0
   1be32:	609a      	str	r2, [r3, #8]
    if (redraw_step_back > 0) {
   1be34:	2d00      	cmp	r5, #0
   1be36:	dc41      	bgt.n	1bebc <readline_process_char+0x334>
    if (redraw_from_cursor) {
   1be38:	2e00      	cmp	r6, #0
   1be3a:	d147      	bne.n	1becc <readline_process_char+0x344>
    } else if (redraw_step_forward > 0) {
   1be3c:	2c00      	cmp	r4, #0
   1be3e:	dc66      	bgt.n	1bf0e <readline_process_char+0x386>
    return -1;
   1be40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1be44:	4620      	mov	r0, r4
   1be46:	b003      	add	sp, #12
   1be48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1be4a:	bf00      	nop
   1be4c:	2000067c 	.word	0x2000067c
   1be50:	0002bda0 	.word	0x0002bda0
   1be54:	00023684 	.word	0x00023684
   1be58:	200008a0 	.word	0x200008a0
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1be5c:	4b35      	ldr	r3, [pc, #212]	; (1bf34 <readline_process_char+0x3ac>)
   1be5e:	691c      	ldr	r4, [r3, #16]
   1be60:	1b3c      	subs	r4, r7, r4
    bool redraw_from_cursor = false;
   1be62:	2600      	movs	r6, #0
    int redraw_step_back = 0;
   1be64:	4635      	mov	r5, r6
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1be66:	e7e2      	b.n	1be2e <readline_process_char+0x2a6>
                if (rl.cursor_pos < rl.line->len) {
   1be68:	4b32      	ldr	r3, [pc, #200]	; (1bf34 <readline_process_char+0x3ac>)
   1be6a:	6919      	ldr	r1, [r3, #16]
   1be6c:	42b9      	cmp	r1, r7
   1be6e:	d303      	bcc.n	1be78 <readline_process_char+0x2f0>
    int redraw_step_forward = 0;
   1be70:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1be72:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1be74:	4625      	mov	r5, r4
   1be76:	e7da      	b.n	1be2e <readline_process_char+0x2a6>
                    vstr_cut_out_bytes(rl.line, rl.cursor_pos, 1);
   1be78:	2201      	movs	r2, #1
   1be7a:	4630      	mov	r0, r6
   1be7c:	f7e5 fd44 	bl	1908 <vstr_cut_out_bytes>
    int redraw_step_forward = 0;
   1be80:	2400      	movs	r4, #0
                    redraw_from_cursor = true;
   1be82:	2601      	movs	r6, #1
    int redraw_step_back = 0;
   1be84:	4625      	mov	r5, r4
   1be86:	e7d2      	b.n	1be2e <readline_process_char+0x2a6>
        switch (c) {
   1be88:	2846      	cmp	r0, #70	; 0x46
   1be8a:	d0e7      	beq.n	1be5c <readline_process_char+0x2d4>
   1be8c:	2848      	cmp	r0, #72	; 0x48
   1be8e:	d0c8      	beq.n	1be22 <readline_process_char+0x29a>
                rl.escape_seq = ESEQ_NONE;
   1be90:	2500      	movs	r5, #0
   1be92:	4b28      	ldr	r3, [pc, #160]	; (1bf34 <readline_process_char+0x3ac>)
   1be94:	609d      	str	r5, [r3, #8]
    int redraw_step_forward = 0;
   1be96:	462c      	mov	r4, r5
    bool redraw_from_cursor = false;
   1be98:	462e      	mov	r6, r5
   1be9a:	e7cb      	b.n	1be34 <readline_process_char+0x2ac>
    int redraw_step_forward = 0;
   1be9c:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1be9e:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bea0:	4625      	mov	r5, r4
   1bea2:	e7c7      	b.n	1be34 <readline_process_char+0x2ac>
    int redraw_step_forward = 0;
   1bea4:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1bea6:	4626      	mov	r6, r4
    int redraw_step_back = 0;
   1bea8:	4625      	mov	r5, r4
   1beaa:	e7c3      	b.n	1be34 <readline_process_char+0x2ac>
                    redraw_step_forward = 1;
   1beac:	2401      	movs	r4, #1
    bool redraw_from_cursor = false;
   1beae:	2600      	movs	r6, #0
    int redraw_step_back = 0;
   1beb0:	4635      	mov	r5, r6
   1beb2:	e7bf      	b.n	1be34 <readline_process_char+0x2ac>
    int redraw_step_forward = 0;
   1beb4:	2400      	movs	r4, #0
    bool redraw_from_cursor = false;
   1beb6:	4626      	mov	r6, r4
                    redraw_step_back = 1;
   1beb8:	2501      	movs	r5, #1
   1beba:	e7bb      	b.n	1be34 <readline_process_char+0x2ac>
        mp_hal_move_cursor_back(redraw_step_back);
   1bebc:	4628      	mov	r0, r5
   1bebe:	f7ff fd9f 	bl	1ba00 <mp_hal_move_cursor_back>
        rl.cursor_pos -= redraw_step_back;
   1bec2:	4a1c      	ldr	r2, [pc, #112]	; (1bf34 <readline_process_char+0x3ac>)
   1bec4:	6913      	ldr	r3, [r2, #16]
   1bec6:	1b5d      	subs	r5, r3, r5
   1bec8:	6115      	str	r5, [r2, #16]
   1beca:	e7b5      	b.n	1be38 <readline_process_char+0x2b0>
        if (rl.line->len < last_line_len) {
   1becc:	4b19      	ldr	r3, [pc, #100]	; (1bf34 <readline_process_char+0x3ac>)
   1bece:	681b      	ldr	r3, [r3, #0]
   1bed0:	685b      	ldr	r3, [r3, #4]
   1bed2:	42bb      	cmp	r3, r7
   1bed4:	d315      	bcc.n	1bf02 <readline_process_char+0x37a>
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, rl.line->len - rl.cursor_pos);
   1bed6:	4d17      	ldr	r5, [pc, #92]	; (1bf34 <readline_process_char+0x3ac>)
   1bed8:	682a      	ldr	r2, [r5, #0]
   1beda:	6890      	ldr	r0, [r2, #8]
   1bedc:	692b      	ldr	r3, [r5, #16]
   1bede:	6851      	ldr	r1, [r2, #4]
   1bee0:	1ac9      	subs	r1, r1, r3
   1bee2:	4418      	add	r0, r3
   1bee4:	f7fc fcc2 	bl	1886c <mp_hal_stdout_tx_strn>
        mp_hal_move_cursor_back(rl.line->len - (rl.cursor_pos + redraw_step_forward));
   1bee8:	682b      	ldr	r3, [r5, #0]
   1beea:	6858      	ldr	r0, [r3, #4]
   1beec:	692b      	ldr	r3, [r5, #16]
   1beee:	4423      	add	r3, r4
   1bef0:	1ac0      	subs	r0, r0, r3
   1bef2:	f7ff fd85 	bl	1ba00 <mp_hal_move_cursor_back>
        rl.cursor_pos += redraw_step_forward;
   1bef6:	692b      	ldr	r3, [r5, #16]
   1bef8:	441c      	add	r4, r3
   1befa:	612c      	str	r4, [r5, #16]
    return -1;
   1befc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1bf00:	e7a0      	b.n	1be44 <readline_process_char+0x2bc>
            mp_hal_erase_line_from_cursor(last_line_len - rl.cursor_pos);
   1bf02:	4b0c      	ldr	r3, [pc, #48]	; (1bf34 <readline_process_char+0x3ac>)
   1bf04:	6918      	ldr	r0, [r3, #16]
   1bf06:	1a38      	subs	r0, r7, r0
   1bf08:	f7ff fd72 	bl	1b9f0 <mp_hal_erase_line_from_cursor>
   1bf0c:	e7e3      	b.n	1bed6 <readline_process_char+0x34e>
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, redraw_step_forward);
   1bf0e:	4d09      	ldr	r5, [pc, #36]	; (1bf34 <readline_process_char+0x3ac>)
   1bf10:	682b      	ldr	r3, [r5, #0]
   1bf12:	6898      	ldr	r0, [r3, #8]
   1bf14:	692b      	ldr	r3, [r5, #16]
   1bf16:	4621      	mov	r1, r4
   1bf18:	4418      	add	r0, r3
   1bf1a:	f7fc fca7 	bl	1886c <mp_hal_stdout_tx_strn>
        rl.cursor_pos += redraw_step_forward;
   1bf1e:	692b      	ldr	r3, [r5, #16]
   1bf20:	441c      	add	r4, r3
   1bf22:	612c      	str	r4, [r5, #16]
    return -1;
   1bf24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1bf28:	e78c      	b.n	1be44 <readline_process_char+0x2bc>
            return c;
   1bf2a:	4604      	mov	r4, r0
   1bf2c:	e78a      	b.n	1be44 <readline_process_char+0x2bc>
            return c;
   1bf2e:	4604      	mov	r4, r0
   1bf30:	e788      	b.n	1be44 <readline_process_char+0x2bc>
   1bf32:	bf00      	nop
   1bf34:	2000067c 	.word	0x2000067c

0001bf38 <readline>:
int readline(vstr_t *line, const char *prompt) {
   1bf38:	b508      	push	{r3, lr}
    readline_init(line, prompt);
   1bf3a:	f7ff fdeb 	bl	1bb14 <readline_init>
        int c = mp_hal_stdin_rx_chr();
   1bf3e:	f7fc fc89 	bl	18854 <mp_hal_stdin_rx_chr>
        int r = readline_process_char(c);
   1bf42:	f7ff fe21 	bl	1bb88 <readline_process_char>
        if (r >= 0) {
   1bf46:	2800      	cmp	r0, #0
   1bf48:	dbf9      	blt.n	1bf3e <readline+0x6>
}
   1bf4a:	bd08      	pop	{r3, pc}

0001bf4c <timeutils_is_leap_year>:
#define DAYS_PER_4Y   (365*4   + 1)

STATIC const uint16_t days_since_jan1[]= { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };

bool timeutils_is_leap_year(mp_uint_t year) {
    return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
   1bf4c:	f010 0f03 	tst.w	r0, #3
   1bf50:	d107      	bne.n	1bf62 <timeutils_is_leap_year+0x16>
   1bf52:	4b0b      	ldr	r3, [pc, #44]	; (1bf80 <timeutils_is_leap_year+0x34>)
   1bf54:	fba3 2300 	umull	r2, r3, r3, r0
   1bf58:	095b      	lsrs	r3, r3, #5
   1bf5a:	2264      	movs	r2, #100	; 0x64
   1bf5c:	fb02 0313 	mls	r3, r2, r3, r0
   1bf60:	b963      	cbnz	r3, 1bf7c <timeutils_is_leap_year+0x30>
   1bf62:	4b07      	ldr	r3, [pc, #28]	; (1bf80 <timeutils_is_leap_year+0x34>)
   1bf64:	fba3 2300 	umull	r2, r3, r3, r0
   1bf68:	09db      	lsrs	r3, r3, #7
   1bf6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1bf6e:	fb02 0313 	mls	r3, r2, r3, r0
   1bf72:	b10b      	cbz	r3, 1bf78 <timeutils_is_leap_year+0x2c>
   1bf74:	2000      	movs	r0, #0
}
   1bf76:	4770      	bx	lr
    return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
   1bf78:	2001      	movs	r0, #1
   1bf7a:	4770      	bx	lr
   1bf7c:	2001      	movs	r0, #1
   1bf7e:	4770      	bx	lr
   1bf80:	51eb851f 	.word	0x51eb851f

0001bf84 <timeutils_year_day>:
    return mdays;
}

// compute the day of the year, between 1 and 366
// month should be between 1 and 12, date should start at 1
mp_uint_t timeutils_year_day(mp_uint_t year, mp_uint_t month, mp_uint_t date) {
   1bf84:	b510      	push	{r4, lr}
    mp_uint_t yday = days_since_jan1[month - 1] + date;
   1bf86:	1e4c      	subs	r4, r1, #1
   1bf88:	4b05      	ldr	r3, [pc, #20]	; (1bfa0 <timeutils_year_day+0x1c>)
   1bf8a:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
   1bf8e:	4414      	add	r4, r2
    if (month >= 3 && timeutils_is_leap_year(year)) {
   1bf90:	2902      	cmp	r1, #2
   1bf92:	d903      	bls.n	1bf9c <timeutils_year_day+0x18>
   1bf94:	f7ff ffda 	bl	1bf4c <timeutils_is_leap_year>
   1bf98:	b100      	cbz	r0, 1bf9c <timeutils_year_day+0x18>
        yday += 1;
   1bf9a:	3401      	adds	r4, #1
    }
    return yday;
}
   1bf9c:	4620      	mov	r0, r4
   1bf9e:	bd10      	pop	{r4, pc}
   1bfa0:	0002bd14 	.word	0x0002bd14

0001bfa4 <timeutils_seconds_since_2000>:
    tm->tm_yday = timeutils_year_day(tm->tm_year, tm->tm_mon, tm->tm_mday);
}

// returns the number of seconds, as an integer, since 2000-01-01
mp_uint_t timeutils_seconds_since_2000(mp_uint_t year, mp_uint_t month,
    mp_uint_t date, mp_uint_t hour, mp_uint_t minute, mp_uint_t second) {
   1bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bfa6:	4604      	mov	r4, r0
   1bfa8:	9e06      	ldr	r6, [sp, #24]
    return
        second
        + minute * 60
   1bfaa:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
   1bfae:	00b7      	lsls	r7, r6, #2
        + hour * 3600
   1bfb0:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   1bfb4:	fb05 7303 	mla	r3, r5, r3, r7
   1bfb8:	9d07      	ldr	r5, [sp, #28]
   1bfba:	441d      	add	r5, r3
        + (timeutils_year_day(year, month, date) - 1
   1bfbc:	f7ff ffe2 	bl	1bf84 <timeutils_year_day>
            + ((year - 2000 + 3) / 4) // add a day each 4 years starting with 2001
   1bfc0:	f2a4 72cd 	subw	r2, r4, #1997	; 0x7cd
   1bfc4:	eb00 0092 	add.w	r0, r0, r2, lsr #2
            - ((year - 2000 + 99) / 100) // subtract a day each 100 years starting with 2001
   1bfc8:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
   1bfcc:	490b      	ldr	r1, [pc, #44]	; (1bffc <timeutils_seconds_since_2000+0x58>)
   1bfce:	fba1 2303 	umull	r2, r3, r1, r3
   1bfd2:	eba0 1353 	sub.w	r3, r0, r3, lsr #5
            + ((year - 2000 + 399) / 400) // add a day each 400 years starting with 2001
   1bfd6:	f2a4 6241 	subw	r2, r4, #1601	; 0x641
   1bfda:	fba1 1202 	umull	r1, r2, r1, r2
   1bfde:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
        + (timeutils_year_day(year, month, date) - 1
   1bfe2:	4a07      	ldr	r2, [pc, #28]	; (1c000 <timeutils_seconds_since_2000+0x5c>)
   1bfe4:	fb02 5303 	mla	r3, r2, r3, r5
            ) * 86400
        + (year - 2000) * 31536000;
   1bfe8:	f102 72ef 	add.w	r2, r2, #31326208	; 0x1de0000
   1bfec:	f502 32f1 	add.w	r2, r2, #123392	; 0x1e200
   1bff0:	fb02 3304 	mla	r3, r2, r4, r3
}
   1bff4:	4803      	ldr	r0, [pc, #12]	; (1c004 <timeutils_seconds_since_2000+0x60>)
   1bff6:	4418      	add	r0, r3
   1bff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bffa:	bf00      	nop
   1bffc:	51eb851f 	.word	0x51eb851f
   1c000:	00015180 	.word	0x00015180
   1c004:	509c5680 	.word	0x509c5680

0001c008 <mp_hal_set_interrupt_char>:

#if MICROPY_KBD_EXCEPTION

int mp_interrupt_char;

void mp_hal_set_interrupt_char(int c) {
   1c008:	b510      	push	{r4, lr}
   1c00a:	4604      	mov	r4, r0
    if (c != -1) {
   1c00c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1c010:	d002      	beq.n	1c018 <mp_hal_set_interrupt_char+0x10>
        mp_obj_exception_clear_traceback(MP_OBJ_FROM_PTR(&MP_STATE_VM(mp_kbd_exception)));
   1c012:	4803      	ldr	r0, [pc, #12]	; (1c020 <mp_hal_set_interrupt_char+0x18>)
   1c014:	f7f0 fdfc 	bl	cc10 <mp_obj_exception_clear_traceback>
    }
    mp_interrupt_char = c;
   1c018:	4b02      	ldr	r3, [pc, #8]	; (1c024 <mp_hal_set_interrupt_char+0x1c>)
   1c01a:	601c      	str	r4, [r3, #0]
}
   1c01c:	bd10      	pop	{r4, pc}
   1c01e:	bf00      	nop
   1c020:	200008c4 	.word	0x200008c4
   1c024:	20000ea8 	.word	0x20000ea8

0001c028 <parse_compile_execute>:
// parses, compiles and executes the code in the lexer
// frees the lexer before returning
// EXEC_FLAG_PRINT_EOF prints 2 EOF chars: 1 after normal output, 1 after exception output
// EXEC_FLAG_ALLOW_DEBUGGING allows debugging info to be printed after executing the code
// EXEC_FLAG_IS_REPL is used for REPL inputs (flag passed on to mp_compile)
STATIC int parse_compile_execute(const void *source, mp_parse_input_kind_t input_kind, int exec_flags) {
   1c028:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c02a:	b095      	sub	sp, #84	; 0x54
   1c02c:	4605      	mov	r5, r0
   1c02e:	460e      	mov	r6, r1
   1c030:	4614      	mov	r4, r2
    int ret = 0;
    uint32_t start = 0;

    // by default a SystemExit exception returns 0
    pyexec_system_exit = 0;
   1c032:	4b45      	ldr	r3, [pc, #276]	; (1c148 <parse_compile_execute+0x120>)
   1c034:	2200      	movs	r2, #0
   1c036:	601a      	str	r2, [r3, #0]

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1c038:	a808      	add	r0, sp, #32
   1c03a:	f7e4 fc0f 	bl	85c <nlr_push>
   1c03e:	2800      	cmp	r0, #0
   1c040:	d146      	bne.n	1c0d0 <parse_compile_execute+0xa8>
        } else
        #endif
        {
            #if MICROPY_ENABLE_COMPILER
            mp_lexer_t *lex;
            if (exec_flags & EXEC_FLAG_SOURCE_IS_VSTR) {
   1c042:	f014 0f10 	tst.w	r4, #16
   1c046:	d130      	bne.n	1c0aa <parse_compile_execute+0x82>
                const vstr_t *vstr = source;
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
            } else if (exec_flags & EXEC_FLAG_SOURCE_IS_FILENAME) {
   1c048:	f014 0f20 	tst.w	r4, #32
   1c04c:	d135      	bne.n	1c0ba <parse_compile_execute+0x92>
                lex = mp_lexer_new_from_file(source);
            } else {
                lex = (mp_lexer_t*)source;
            }
            // source is a lexer, parse and compile the script
            qstr source_name = lex->source_name;
   1c04e:	682f      	ldr	r7, [r5, #0]
            mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1c050:	4632      	mov	r2, r6
   1c052:	4629      	mov	r1, r5
   1c054:	a806      	add	r0, sp, #24
   1c056:	f7e8 fb03 	bl	4660 <mp_parse>
            module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, exec_flags & EXEC_FLAG_IS_REPL);
   1c05a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   1c05e:	2200      	movs	r2, #0
   1c060:	4639      	mov	r1, r7
   1c062:	a806      	add	r0, sp, #24
   1c064:	f7eb fdc8 	bl	7bf8 <mp_compile>
   1c068:	4605      	mov	r5, r0
            mp_raise_msg(&mp_type_RuntimeError, "script compilation not supported");
            #endif
        }

        // execute code
        mp_hal_set_interrupt_char(CHAR_CTRL_C); // allow ctrl-C to interrupt us
   1c06a:	2003      	movs	r0, #3
   1c06c:	f7ff ffcc 	bl	1c008 <mp_hal_set_interrupt_char>
        start = mp_hal_ticks_ms();
   1c070:	f7fd fee2 	bl	19e38 <mp_hal_ticks_ms>
   1c074:	4606      	mov	r6, r0
        mp_call_function_0(module_fun);
   1c076:	4628      	mov	r0, r5
   1c078:	f7ed fb24 	bl	96c4 <mp_call_function_0>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c080:	f7ff ffc2 	bl	1c008 <mp_hal_set_interrupt_char>
        nlr_pop();
   1c084:	f7e4 fbe2 	bl	84c <nlr_pop>
        ret = 1;
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c088:	f014 0f01 	tst.w	r4, #1
   1c08c:	d11a      	bne.n	1c0c4 <parse_compile_execute+0x9c>
        ret = 1;
   1c08e:	2501      	movs	r5, #1
            ret = 0;
        }
    }

    // display debugging info if wanted
    if ((exec_flags & EXEC_FLAG_ALLOW_DEBUGGING) && repl_display_debugging_info) {
   1c090:	f014 0f02 	tst.w	r4, #2
   1c094:	d003      	beq.n	1c09e <parse_compile_execute+0x76>
   1c096:	4b2d      	ldr	r3, [pc, #180]	; (1c14c <parse_compile_execute+0x124>)
   1c098:	781b      	ldrb	r3, [r3, #0]
   1c09a:	2b00      	cmp	r3, #0
   1c09c:	d136      	bne.n	1c10c <parse_compile_execute+0xe4>
        gc_collect();
        gc_dump_info();
        #endif
    }

    if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c09e:	f014 0f01 	tst.w	r4, #1
   1c0a2:	d14c      	bne.n	1c13e <parse_compile_execute+0x116>
        mp_hal_stdout_tx_strn("\x04", 1);
    }

    return ret;
}
   1c0a4:	4628      	mov	r0, r5
   1c0a6:	b015      	add	sp, #84	; 0x54
   1c0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
   1c0aa:	2300      	movs	r3, #0
   1c0ac:	686a      	ldr	r2, [r5, #4]
   1c0ae:	68a9      	ldr	r1, [r5, #8]
   1c0b0:	2037      	movs	r0, #55	; 0x37
   1c0b2:	f7e7 ff82 	bl	3fba <mp_lexer_new_from_str_len>
   1c0b6:	4605      	mov	r5, r0
   1c0b8:	e7c9      	b.n	1c04e <parse_compile_execute+0x26>
                lex = mp_lexer_new_from_file(source);
   1c0ba:	4628      	mov	r0, r5
   1c0bc:	f7e7 ff8b 	bl	3fd6 <mp_lexer_new_from_file>
   1c0c0:	4605      	mov	r5, r0
   1c0c2:	e7c4      	b.n	1c04e <parse_compile_execute+0x26>
            mp_hal_stdout_tx_strn("\x04", 1);
   1c0c4:	2101      	movs	r1, #1
   1c0c6:	4822      	ldr	r0, [pc, #136]	; (1c150 <parse_compile_execute+0x128>)
   1c0c8:	f7fc fbd0 	bl	1886c <mp_hal_stdout_tx_strn>
        ret = 1;
   1c0cc:	2501      	movs	r5, #1
   1c0ce:	e7df      	b.n	1c090 <parse_compile_execute+0x68>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c0d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c0d4:	f7ff ff98 	bl	1c008 <mp_hal_set_interrupt_char>
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c0d8:	f014 0f01 	tst.w	r4, #1
   1c0dc:	d10a      	bne.n	1c0f4 <parse_compile_execute+0xcc>
        if (mp_obj_is_subclass_fast(mp_obj_get_type((mp_obj_t)nlr.ret_val), &mp_type_SystemExit)) {
   1c0de:	9809      	ldr	r0, [sp, #36]	; 0x24
   1c0e0:	f7ee fd4c 	bl	ab7c <mp_obj_get_type>
   1c0e4:	491b      	ldr	r1, [pc, #108]	; (1c154 <parse_compile_execute+0x12c>)
   1c0e6:	f7f6 fb0f 	bl	12708 <mp_obj_is_subclass_fast>
   1c0ea:	b140      	cbz	r0, 1c0fe <parse_compile_execute+0xd6>
            ret = pyexec_system_exit;
   1c0ec:	4b16      	ldr	r3, [pc, #88]	; (1c148 <parse_compile_execute+0x120>)
   1c0ee:	681d      	ldr	r5, [r3, #0]
    uint32_t start = 0;
   1c0f0:	2600      	movs	r6, #0
   1c0f2:	e7cd      	b.n	1c090 <parse_compile_execute+0x68>
            mp_hal_stdout_tx_strn("\x04", 1);
   1c0f4:	2101      	movs	r1, #1
   1c0f6:	4816      	ldr	r0, [pc, #88]	; (1c150 <parse_compile_execute+0x128>)
   1c0f8:	f7fc fbb8 	bl	1886c <mp_hal_stdout_tx_strn>
   1c0fc:	e7ef      	b.n	1c0de <parse_compile_execute+0xb6>
            mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1c0fe:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c100:	4815      	ldr	r0, [pc, #84]	; (1c158 <parse_compile_execute+0x130>)
   1c102:	f7ee fd85 	bl	ac10 <mp_obj_print_exception>
    uint32_t start = 0;
   1c106:	2600      	movs	r6, #0
            ret = 0;
   1c108:	4635      	mov	r5, r6
   1c10a:	e7c1      	b.n	1c090 <parse_compile_execute+0x68>
        mp_uint_t ticks = mp_hal_ticks_ms() - start; // TODO implement a function that does this properly
   1c10c:	f7fd fe94 	bl	19e38 <mp_hal_ticks_ms>
        printf("took " UINT_FMT " ms\n", ticks);
   1c110:	1b81      	subs	r1, r0, r6
   1c112:	4812      	ldr	r0, [pc, #72]	; (1c15c <parse_compile_execute+0x134>)
   1c114:	f7fc f8d0 	bl	182b8 <printf>
            qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1c118:	ab06      	add	r3, sp, #24
   1c11a:	aa05      	add	r2, sp, #20
   1c11c:	a904      	add	r1, sp, #16
   1c11e:	a803      	add	r0, sp, #12
   1c120:	f7e5 fac4 	bl	16ac <qstr_pool_info>
            printf("qstr:\n  n_pool=" UINT_FMT "\n  n_qstr=" UINT_FMT "\n  "
   1c124:	9b06      	ldr	r3, [sp, #24]
   1c126:	9300      	str	r3, [sp, #0]
   1c128:	9b05      	ldr	r3, [sp, #20]
   1c12a:	9a04      	ldr	r2, [sp, #16]
   1c12c:	9903      	ldr	r1, [sp, #12]
   1c12e:	480c      	ldr	r0, [pc, #48]	; (1c160 <parse_compile_execute+0x138>)
   1c130:	f7fc f8c2 	bl	182b8 <printf>
        gc_collect();
   1c134:	f7fc fbac 	bl	18890 <gc_collect>
        gc_dump_info();
   1c138:	f7e5 f82a 	bl	1190 <gc_dump_info>
   1c13c:	e7af      	b.n	1c09e <parse_compile_execute+0x76>
        mp_hal_stdout_tx_strn("\x04", 1);
   1c13e:	2101      	movs	r1, #1
   1c140:	4803      	ldr	r0, [pc, #12]	; (1c150 <parse_compile_execute+0x128>)
   1c142:	f7fc fb93 	bl	1886c <mp_hal_stdout_tx_strn>
    return ret;
   1c146:	e7ad      	b.n	1c0a4 <parse_compile_execute+0x7c>
   1c148:	20000698 	.word	0x20000698
   1c14c:	2000069c 	.word	0x2000069c
   1c150:	0002bd30 	.word	0x0002bd30
   1c154:	00026c48 	.word	0x00026c48
   1c158:	00023684 	.word	0x00023684
   1c15c:	0002bd34 	.word	0x0002bd34
   1c160:	0002b020 	.word	0x0002b020

0001c164 <pyb_set_repl_info>:
            return false;
    }
}
#endif

mp_obj_t pyb_set_repl_info(mp_obj_t o_value) {
   1c164:	b508      	push	{r3, lr}
    repl_display_debugging_info = mp_obj_get_int(o_value);
   1c166:	f7ee fe31 	bl	adcc <mp_obj_get_int>
   1c16a:	3000      	adds	r0, #0
   1c16c:	bf18      	it	ne
   1c16e:	2001      	movne	r0, #1
   1c170:	4b01      	ldr	r3, [pc, #4]	; (1c178 <pyb_set_repl_info+0x14>)
   1c172:	7018      	strb	r0, [r3, #0]
    return mp_const_none;
}
   1c174:	4801      	ldr	r0, [pc, #4]	; (1c17c <pyb_set_repl_info+0x18>)
   1c176:	bd08      	pop	{r3, pc}
   1c178:	2000069c 	.word	0x2000069c
   1c17c:	00027b40 	.word	0x00027b40

0001c180 <pyexec_raw_repl>:
int pyexec_raw_repl(void) {
   1c180:	b500      	push	{lr}
   1c182:	b085      	sub	sp, #20
    vstr_init(&line, 32);
   1c184:	2120      	movs	r1, #32
   1c186:	4668      	mov	r0, sp
   1c188:	f7e5 fb17 	bl	17ba <vstr_init>
    mp_hal_stdout_tx_str("raw REPL; CTRL-B to exit\r\n");
   1c18c:	481e      	ldr	r0, [pc, #120]	; (1c208 <pyexec_raw_repl+0x88>)
   1c18e:	f7fc fc51 	bl	18a34 <mp_hal_stdout_tx_str>
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   1c192:	2300      	movs	r3, #0
   1c194:	9301      	str	r3, [sp, #4]
        mp_hal_stdout_tx_str(">");
   1c196:	481d      	ldr	r0, [pc, #116]	; (1c20c <pyexec_raw_repl+0x8c>)
   1c198:	f7fc fc4c 	bl	18a34 <mp_hal_stdout_tx_str>
   1c19c:	e00e      	b.n	1c1bc <pyexec_raw_repl+0x3c>
                mp_hal_stdout_tx_str("\r\n");
   1c19e:	481c      	ldr	r0, [pc, #112]	; (1c210 <pyexec_raw_repl+0x90>)
   1c1a0:	f7fc fc48 	bl	18a34 <mp_hal_stdout_tx_str>
                vstr_clear(&line);
   1c1a4:	4668      	mov	r0, sp
   1c1a6:	f7e5 fb35 	bl	1814 <vstr_clear>
                pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   1c1aa:	4b1a      	ldr	r3, [pc, #104]	; (1c214 <pyexec_raw_repl+0x94>)
   1c1ac:	2201      	movs	r2, #1
   1c1ae:	701a      	strb	r2, [r3, #0]
                return 0;
   1c1b0:	2000      	movs	r0, #0
}
   1c1b2:	b005      	add	sp, #20
   1c1b4:	f85d fb04 	ldr.w	pc, [sp], #4
   1c1b8:	2300      	movs	r3, #0
   1c1ba:	9301      	str	r3, [sp, #4]
            int c = mp_hal_stdin_rx_chr();
   1c1bc:	f7fc fb4a 	bl	18854 <mp_hal_stdin_rx_chr>
            if (c == CHAR_CTRL_A) {
   1c1c0:	2801      	cmp	r0, #1
   1c1c2:	d0e3      	beq.n	1c18c <pyexec_raw_repl+0xc>
            } else if (c == CHAR_CTRL_B) {
   1c1c4:	2802      	cmp	r0, #2
   1c1c6:	d0ea      	beq.n	1c19e <pyexec_raw_repl+0x1e>
            } else if (c == CHAR_CTRL_C) {
   1c1c8:	2803      	cmp	r0, #3
   1c1ca:	d0f5      	beq.n	1c1b8 <pyexec_raw_repl+0x38>
            } else if (c == CHAR_CTRL_D) {
   1c1cc:	2804      	cmp	r0, #4
   1c1ce:	d004      	beq.n	1c1da <pyexec_raw_repl+0x5a>
                vstr_add_byte(&line, c);
   1c1d0:	b2c1      	uxtb	r1, r0
   1c1d2:	4668      	mov	r0, sp
   1c1d4:	f7e5 fb69 	bl	18aa <vstr_add_byte>
   1c1d8:	e7f0      	b.n	1c1bc <pyexec_raw_repl+0x3c>
        mp_hal_stdout_tx_str("OK");
   1c1da:	480f      	ldr	r0, [pc, #60]	; (1c218 <pyexec_raw_repl+0x98>)
   1c1dc:	f7fc fc2a 	bl	18a34 <mp_hal_stdout_tx_str>
        if (line.len == 0) {
   1c1e0:	9b01      	ldr	r3, [sp, #4]
   1c1e2:	b143      	cbz	r3, 1c1f6 <pyexec_raw_repl+0x76>
        int ret = parse_compile_execute(&line, MP_PARSE_FILE_INPUT, EXEC_FLAG_PRINT_EOF | EXEC_FLAG_SOURCE_IS_VSTR);
   1c1e4:	2211      	movs	r2, #17
   1c1e6:	2101      	movs	r1, #1
   1c1e8:	4668      	mov	r0, sp
   1c1ea:	f7ff ff1d 	bl	1c028 <parse_compile_execute>
        if (ret & PYEXEC_FORCED_EXIT) {
   1c1ee:	f410 7f80 	tst.w	r0, #256	; 0x100
   1c1f2:	d0ce      	beq.n	1c192 <pyexec_raw_repl+0x12>
   1c1f4:	e7dd      	b.n	1c1b2 <pyexec_raw_repl+0x32>
            mp_hal_stdout_tx_str("\r\n");
   1c1f6:	4806      	ldr	r0, [pc, #24]	; (1c210 <pyexec_raw_repl+0x90>)
   1c1f8:	f7fc fc1c 	bl	18a34 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1c1fc:	4668      	mov	r0, sp
   1c1fe:	f7e5 fb09 	bl	1814 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1c202:	f44f 7080 	mov.w	r0, #256	; 0x100
   1c206:	e7d4      	b.n	1c1b2 <pyexec_raw_repl+0x32>
   1c208:	0002bdec 	.word	0x0002bdec
   1c20c:	000279b0 	.word	0x000279b0
   1c210:	0002bda0 	.word	0x0002bda0
   1c214:	20000001 	.word	0x20000001
   1c218:	0002be08 	.word	0x0002be08

0001c21c <pyexec_friendly_repl>:
int pyexec_friendly_repl(void) {
   1c21c:	b500      	push	{lr}
   1c21e:	b087      	sub	sp, #28
    vstr_init(&line, 32);
   1c220:	2120      	movs	r1, #32
   1c222:	a802      	add	r0, sp, #8
   1c224:	f7e5 fac9 	bl	17ba <vstr_init>
    mp_hal_stdout_tx_str("MicroPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME "\r\n");
   1c228:	483e      	ldr	r0, [pc, #248]	; (1c324 <pyexec_friendly_repl+0x108>)
   1c22a:	f7fc fc03 	bl	18a34 <mp_hal_stdout_tx_str>
   1c22e:	e050      	b.n	1c2d2 <pyexec_friendly_repl+0xb6>
            mp_hal_stdout_tx_str("\r\n");
   1c230:	483d      	ldr	r0, [pc, #244]	; (1c328 <pyexec_friendly_repl+0x10c>)
   1c232:	f7fc fbff 	bl	18a34 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1c236:	a802      	add	r0, sp, #8
   1c238:	f7e5 faec 	bl	1814 <vstr_clear>
            pyexec_mode_kind = PYEXEC_MODE_RAW_REPL;
   1c23c:	2000      	movs	r0, #0
   1c23e:	4b3b      	ldr	r3, [pc, #236]	; (1c32c <pyexec_friendly_repl+0x110>)
   1c240:	7018      	strb	r0, [r3, #0]
}
   1c242:	b007      	add	sp, #28
   1c244:	f85d fb04 	ldr.w	pc, [sp], #4
            mp_hal_stdout_tx_str("\r\n");
   1c248:	4837      	ldr	r0, [pc, #220]	; (1c328 <pyexec_friendly_repl+0x10c>)
   1c24a:	f7fc fbf3 	bl	18a34 <mp_hal_stdout_tx_str>
            goto friendly_repl_reset;
   1c24e:	e7eb      	b.n	1c228 <pyexec_friendly_repl+0xc>
            mp_hal_stdout_tx_str("\r\n");
   1c250:	4835      	ldr	r0, [pc, #212]	; (1c328 <pyexec_friendly_repl+0x10c>)
   1c252:	f7fc fbef 	bl	18a34 <mp_hal_stdout_tx_str>
            continue;
   1c256:	e03c      	b.n	1c2d2 <pyexec_friendly_repl+0xb6>
            mp_hal_stdout_tx_str("\r\n");
   1c258:	4833      	ldr	r0, [pc, #204]	; (1c328 <pyexec_friendly_repl+0x10c>)
   1c25a:	f7fc fbeb 	bl	18a34 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1c25e:	a802      	add	r0, sp, #8
   1c260:	f7e5 fad8 	bl	1814 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1c264:	f44f 7080 	mov.w	r0, #256	; 0x100
   1c268:	e7eb      	b.n	1c242 <pyexec_friendly_repl+0x26>
            mp_hal_stdout_tx_str("\r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== ");
   1c26a:	4831      	ldr	r0, [pc, #196]	; (1c330 <pyexec_friendly_repl+0x114>)
   1c26c:	f7fc fbe2 	bl	18a34 <mp_hal_stdout_tx_str>
   1c270:	2300      	movs	r3, #0
   1c272:	9303      	str	r3, [sp, #12]
   1c274:	e00b      	b.n	1c28e <pyexec_friendly_repl+0x72>
                    mp_hal_stdout_tx_str("\r\n");
   1c276:	482c      	ldr	r0, [pc, #176]	; (1c328 <pyexec_friendly_repl+0x10c>)
   1c278:	f7fc fbdc 	bl	18a34 <mp_hal_stdout_tx_str>
   1c27c:	e029      	b.n	1c2d2 <pyexec_friendly_repl+0xb6>
                    mp_hal_stdout_tx_str("\r\n");
   1c27e:	482a      	ldr	r0, [pc, #168]	; (1c328 <pyexec_friendly_repl+0x10c>)
   1c280:	f7fc fbd8 	bl	18a34 <mp_hal_stdout_tx_str>
            parse_input_kind = MP_PARSE_FILE_INPUT;
   1c284:	2101      	movs	r1, #1
   1c286:	e01d      	b.n	1c2c4 <pyexec_friendly_repl+0xa8>
                        mp_hal_stdout_tx_str("\r\n=== ");
   1c288:	482a      	ldr	r0, [pc, #168]	; (1c334 <pyexec_friendly_repl+0x118>)
   1c28a:	f7fc fbd3 	bl	18a34 <mp_hal_stdout_tx_str>
                char c = mp_hal_stdin_rx_chr();
   1c28e:	f7fc fae1 	bl	18854 <mp_hal_stdin_rx_chr>
   1c292:	b2c1      	uxtb	r1, r0
   1c294:	f88d 1007 	strb.w	r1, [sp, #7]
                if (c == CHAR_CTRL_C) {
   1c298:	2903      	cmp	r1, #3
   1c29a:	d0ec      	beq.n	1c276 <pyexec_friendly_repl+0x5a>
                } else if (c == CHAR_CTRL_D) {
   1c29c:	2904      	cmp	r1, #4
   1c29e:	d0ee      	beq.n	1c27e <pyexec_friendly_repl+0x62>
                    vstr_add_byte(&line, c);
   1c2a0:	a802      	add	r0, sp, #8
   1c2a2:	f7e5 fb02 	bl	18aa <vstr_add_byte>
                    if (c == '\r') {
   1c2a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c2aa:	2b0d      	cmp	r3, #13
   1c2ac:	d0ec      	beq.n	1c288 <pyexec_friendly_repl+0x6c>
                        mp_hal_stdout_tx_strn(&c, 1);
   1c2ae:	2101      	movs	r1, #1
   1c2b0:	f10d 0007 	add.w	r0, sp, #7
   1c2b4:	f7fc fada 	bl	1886c <mp_hal_stdout_tx_strn>
            for (;;) {
   1c2b8:	e7e9      	b.n	1c28e <pyexec_friendly_repl+0x72>
                    mp_hal_stdout_tx_str("\r\n");
   1c2ba:	481b      	ldr	r0, [pc, #108]	; (1c328 <pyexec_friendly_repl+0x10c>)
   1c2bc:	f7fc fbba 	bl	18a34 <mp_hal_stdout_tx_str>
                    goto input_restart;
   1c2c0:	e007      	b.n	1c2d2 <pyexec_friendly_repl+0xb6>
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1c2c2:	2100      	movs	r1, #0
        ret = parse_compile_execute(&line, parse_input_kind, EXEC_FLAG_ALLOW_DEBUGGING | EXEC_FLAG_IS_REPL | EXEC_FLAG_SOURCE_IS_VSTR);
   1c2c4:	2216      	movs	r2, #22
   1c2c6:	a802      	add	r0, sp, #8
   1c2c8:	f7ff feae 	bl	1c028 <parse_compile_execute>
        if (ret & PYEXEC_FORCED_EXIT) {
   1c2cc:	f410 7f80 	tst.w	r0, #256	; 0x100
   1c2d0:	d1b7      	bne.n	1c242 <pyexec_friendly_repl+0x26>
   1c2d2:	2300      	movs	r3, #0
   1c2d4:	9303      	str	r3, [sp, #12]
        int ret = readline(&line, ">>> ");
   1c2d6:	4918      	ldr	r1, [pc, #96]	; (1c338 <pyexec_friendly_repl+0x11c>)
   1c2d8:	a802      	add	r0, sp, #8
   1c2da:	f7ff fe2d 	bl	1bf38 <readline>
        if (ret == CHAR_CTRL_A) {
   1c2de:	2801      	cmp	r0, #1
   1c2e0:	d0a6      	beq.n	1c230 <pyexec_friendly_repl+0x14>
        } else if (ret == CHAR_CTRL_B) {
   1c2e2:	2802      	cmp	r0, #2
   1c2e4:	d0b0      	beq.n	1c248 <pyexec_friendly_repl+0x2c>
        } else if (ret == CHAR_CTRL_C) {
   1c2e6:	2803      	cmp	r0, #3
   1c2e8:	d0b2      	beq.n	1c250 <pyexec_friendly_repl+0x34>
        } else if (ret == CHAR_CTRL_D) {
   1c2ea:	2804      	cmp	r0, #4
   1c2ec:	d0b4      	beq.n	1c258 <pyexec_friendly_repl+0x3c>
        } else if (ret == CHAR_CTRL_E) {
   1c2ee:	2805      	cmp	r0, #5
   1c2f0:	d0bb      	beq.n	1c26a <pyexec_friendly_repl+0x4e>
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1c2f2:	9b03      	ldr	r3, [sp, #12]
        } else if (vstr_len(&line) == 0) {
   1c2f4:	2b00      	cmp	r3, #0
   1c2f6:	d0ec      	beq.n	1c2d2 <pyexec_friendly_repl+0xb6>
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1c2f8:	a802      	add	r0, sp, #8
   1c2fa:	f7e5 fac6 	bl	188a <vstr_null_terminated_str>
   1c2fe:	f7f9 fcf3 	bl	15ce8 <mp_repl_continue_with_input>
   1c302:	2800      	cmp	r0, #0
   1c304:	d0dd      	beq.n	1c2c2 <pyexec_friendly_repl+0xa6>
                vstr_add_byte(&line, '\n');
   1c306:	210a      	movs	r1, #10
   1c308:	a802      	add	r0, sp, #8
   1c30a:	f7e5 face 	bl	18aa <vstr_add_byte>
                ret = readline(&line, "... ");
   1c30e:	490b      	ldr	r1, [pc, #44]	; (1c33c <pyexec_friendly_repl+0x120>)
   1c310:	a802      	add	r0, sp, #8
   1c312:	f7ff fe11 	bl	1bf38 <readline>
                if (ret == CHAR_CTRL_C) {
   1c316:	2803      	cmp	r0, #3
   1c318:	d0cf      	beq.n	1c2ba <pyexec_friendly_repl+0x9e>
                } else if (ret == CHAR_CTRL_D) {
   1c31a:	2804      	cmp	r0, #4
   1c31c:	d1ec      	bne.n	1c2f8 <pyexec_friendly_repl+0xdc>
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1c31e:	2100      	movs	r1, #0
   1c320:	e7d0      	b.n	1c2c4 <pyexec_friendly_repl+0xa8>
   1c322:	bf00      	nop
   1c324:	0002bd48 	.word	0x0002bd48
   1c328:	0002bda0 	.word	0x0002bda0
   1c32c:	20000001 	.word	0x20000001
   1c330:	0002bdac 	.word	0x0002bdac
   1c334:	0002bddc 	.word	0x0002bddc
   1c338:	0002bda4 	.word	0x0002bda4
   1c33c:	0002bde4 	.word	0x0002bde4

0001c340 <pyexec_file>:
int pyexec_file(const char *filename) {
   1c340:	b508      	push	{r3, lr}
    return parse_compile_execute(filename, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_FILENAME);
   1c342:	2220      	movs	r2, #32
   1c344:	2101      	movs	r1, #1
   1c346:	f7ff fe6f 	bl	1c028 <parse_compile_execute>
}
   1c34a:	bd08      	pop	{r3, pc}

0001c34c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)    /* Load a 4-byte little-endian word */
{
    DWORD rv;

    rv = ptr[3];
    rv = rv << 8 | ptr[2];
   1c34c:	8842      	ldrh	r2, [r0, #2]
    rv = rv << 8 | ptr[1];
   1c34e:	7843      	ldrb	r3, [r0, #1]
    rv = rv << 8 | ptr[0];
   1c350:	7800      	ldrb	r0, [r0, #0]
    rv = rv << 8 | ptr[1];
   1c352:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    return rv;
}
   1c356:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1c35a:	4770      	bx	lr

0001c35c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)    /* Store a 4-byte word in little-endian */
{
    *ptr++ = (BYTE)val; val >>= 8;
   1c35c:	0a0b      	lsrs	r3, r1, #8
   1c35e:	7001      	strb	r1, [r0, #0]
    *ptr++ = (BYTE)val; val >>= 8;
   1c360:	7043      	strb	r3, [r0, #1]
   1c362:	0c0b      	lsrs	r3, r1, #16
    *ptr++ = (BYTE)val; val >>= 8;
   1c364:	0e09      	lsrs	r1, r1, #24
   1c366:	7083      	strb	r3, [r0, #2]
    *ptr++ = (BYTE)val;
   1c368:	70c1      	strb	r1, [r0, #3]
}
   1c36a:	4770      	bx	lr

0001c36c <clust2sect>:
    FATFS* fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= fs->n_fatent - 2) return 0;     /* Invalid cluster# */
   1c36c:	6a03      	ldr	r3, [r0, #32]
    clst -= 2;
   1c36e:	3902      	subs	r1, #2
    if (clst >= fs->n_fatent - 2) return 0;     /* Invalid cluster# */
   1c370:	3b02      	subs	r3, #2
   1c372:	428b      	cmp	r3, r1
    return clst * fs->csize + fs->database;
   1c374:	bf83      	ittte	hi
   1c376:	89c3      	ldrhhi	r3, [r0, #14]
   1c378:	6b40      	ldrhi	r0, [r0, #52]	; 0x34
   1c37a:	fb01 0003 	mlahi	r0, r1, r3, r0
    if (clst >= fs->n_fatent - 2) return 0;     /* Invalid cluster# */
   1c37e:	2000      	movls	r0, #0
}
   1c380:	4770      	bx	lr

0001c382 <sum_sfn>:

static
BYTE sum_sfn (
    const BYTE* dir     /* Pointer to the SFN entry */
)
{
   1c382:	4602      	mov	r2, r0
   1c384:	f100 010b 	add.w	r1, r0, #11
    BYTE sum = 0;
   1c388:	2000      	movs	r0, #0
    UINT n = 11;

    do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1c38a:	01c3      	lsls	r3, r0, #7
   1c38c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
   1c390:	f812 0b01 	ldrb.w	r0, [r2], #1
   1c394:	fa50 f383 	uxtab	r3, r0, r3
   1c398:	428a      	cmp	r2, r1
   1c39a:	b2d8      	uxtb	r0, r3
   1c39c:	d1f5      	bne.n	1c38a <sum_sfn+0x8>
    return sum;
}
   1c39e:	4770      	bx	lr

0001c3a0 <validate>:
static
FRESULT validate (  /* Returns FR_OK or FR_INVALID_OBJECT */
    _FDID* obj,     /* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
    FATFS** fs      /* Pointer to pointer to the owner file system object to return */
)
{
   1c3a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c3a2:	460d      	mov	r5, r1
    FRESULT res;
    DSTATUS stat;


    if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || disk_ioctl(obj->fs->drv, IOCTL_STATUS, &stat) != RES_OK || (stat & STA_NOINIT)) {
   1c3a4:	4604      	mov	r4, r0
   1c3a6:	b920      	cbnz	r0, 1c3b2 <validate+0x12>
        *fs = 0;                /* The object is invalid */
   1c3a8:	2300      	movs	r3, #0
   1c3aa:	602b      	str	r3, [r5, #0]
        res = FR_INVALID_OBJECT;
   1c3ac:	2009      	movs	r0, #9
        *fs = obj->fs;          /* Owner file sytem object */
        ENTER_FF(obj->fs);      /* Lock file system */
        res = FR_OK;
    }
    return res;
}
   1c3ae:	b003      	add	sp, #12
   1c3b0:	bd30      	pop	{r4, r5, pc}
    if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || disk_ioctl(obj->fs->drv, IOCTL_STATUS, &stat) != RES_OK || (stat & STA_NOINIT)) {
   1c3b2:	6803      	ldr	r3, [r0, #0]
   1c3b4:	2b00      	cmp	r3, #0
   1c3b6:	d0f7      	beq.n	1c3a8 <validate+0x8>
   1c3b8:	795a      	ldrb	r2, [r3, #5]
   1c3ba:	2a00      	cmp	r2, #0
   1c3bc:	d0f4      	beq.n	1c3a8 <validate+0x8>
   1c3be:	8959      	ldrh	r1, [r3, #10]
   1c3c0:	8882      	ldrh	r2, [r0, #4]
   1c3c2:	4291      	cmp	r1, r2
   1c3c4:	d1f0      	bne.n	1c3a8 <validate+0x8>
   1c3c6:	f10d 0207 	add.w	r2, sp, #7
   1c3ca:	2106      	movs	r1, #6
   1c3cc:	6818      	ldr	r0, [r3, #0]
   1c3ce:	f7fb fd7d 	bl	17ecc <disk_ioctl>
   1c3d2:	2800      	cmp	r0, #0
   1c3d4:	d1e8      	bne.n	1c3a8 <validate+0x8>
   1c3d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c3da:	f010 0001 	ands.w	r0, r0, #1
   1c3de:	d1e3      	bne.n	1c3a8 <validate+0x8>
        *fs = obj->fs;          /* Owner file sytem object */
   1c3e0:	6823      	ldr	r3, [r4, #0]
   1c3e2:	602b      	str	r3, [r5, #0]
   1c3e4:	e7e3      	b.n	1c3ae <validate+0xe>

0001c3e6 <ld_clust.isra.0>:
    rv = rv << 8 | ptr[0];
   1c3e6:	7eca      	ldrb	r2, [r1, #27]
   1c3e8:	7e8b      	ldrb	r3, [r1, #26]
    if (fs->fs_type == FS_FAT32) {
   1c3ea:	2803      	cmp	r0, #3
    cl = ld_word(dir + DIR_FstClusLO);
   1c3ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    rv = rv << 8 | ptr[0];
   1c3f0:	bf01      	itttt	eq
   1c3f2:	7d48      	ldrbeq	r0, [r1, #21]
   1c3f4:	7d0a      	ldrbeq	r2, [r1, #20]
        cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   1c3f6:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
   1c3fa:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
   1c3fe:	4618      	mov	r0, r3
   1c400:	4770      	bx	lr

0001c402 <st_clust.isra.1>:
    *ptr++ = (BYTE)val; val >>= 8;
   1c402:	f3c2 2307 	ubfx	r3, r2, #8, #8
   1c406:	768a      	strb	r2, [r1, #26]
    *ptr++ = (BYTE)val;
   1c408:	76cb      	strb	r3, [r1, #27]
    if (fs->fs_type == FS_FAT32) {
   1c40a:	7803      	ldrb	r3, [r0, #0]
   1c40c:	2b03      	cmp	r3, #3
        st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   1c40e:	bf01      	itttt	eq
   1c410:	0c12      	lsreq	r2, r2, #16
    *ptr++ = (BYTE)val; val >>= 8;
   1c412:	750a      	strbeq	r2, [r1, #20]
   1c414:	0a12      	lsreq	r2, r2, #8
    *ptr++ = (BYTE)val;
   1c416:	754a      	strbeq	r2, [r1, #21]
}
   1c418:	4770      	bx	lr

0001c41a <sync_window.part.2>:
FRESULT sync_window (   /* Returns FR_OK or FR_DISK_ERROR */
   1c41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        wsect = fs->winsect;    /* Current sector number */
   1c41c:	6b85      	ldr	r5, [r0, #56]	; 0x38
        if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
   1c41e:	f100 073c 	add.w	r7, r0, #60	; 0x3c
FRESULT sync_window (   /* Returns FR_OK or FR_DISK_ERROR */
   1c422:	4604      	mov	r4, r0
        if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
   1c424:	2301      	movs	r3, #1
   1c426:	462a      	mov	r2, r5
   1c428:	4639      	mov	r1, r7
   1c42a:	6800      	ldr	r0, [r0, #0]
   1c42c:	f7fb fd14 	bl	17e58 <disk_write>
   1c430:	b9a0      	cbnz	r0, 1c45c <sync_window.part.2+0x42>
            if (wsect - fs->fatbase < fs->fsize) {      /* Is it in the FAT area? */
   1c432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c434:	6a62      	ldr	r2, [r4, #36]	; 0x24
            fs->wflag = 0;
   1c436:	71e0      	strb	r0, [r4, #7]
            if (wsect - fs->fatbase < fs->fsize) {      /* Is it in the FAT area? */
   1c438:	1aeb      	subs	r3, r5, r3
   1c43a:	4293      	cmp	r3, r2
   1c43c:	d301      	bcc.n	1c442 <sync_window.part.2+0x28>
    FRESULT res = FR_OK;
   1c43e:	2000      	movs	r0, #0
}
   1c440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                for (nf = fs->n_fats; nf >= 2; nf--) {  /* Reflect the change to all FAT copies */
   1c442:	79a6      	ldrb	r6, [r4, #6]
   1c444:	2e01      	cmp	r6, #1
   1c446:	d9fa      	bls.n	1c43e <sync_window.part.2+0x24>
                    wsect += fs->fsize;
   1c448:	6a63      	ldr	r3, [r4, #36]	; 0x24
                    disk_write(fs->drv, fs->win, wsect, 1);
   1c44a:	6820      	ldr	r0, [r4, #0]
                    wsect += fs->fsize;
   1c44c:	441d      	add	r5, r3
                    disk_write(fs->drv, fs->win, wsect, 1);
   1c44e:	462a      	mov	r2, r5
   1c450:	2301      	movs	r3, #1
   1c452:	4639      	mov	r1, r7
   1c454:	f7fb fd00 	bl	17e58 <disk_write>
                for (nf = fs->n_fats; nf >= 2; nf--) {  /* Reflect the change to all FAT copies */
   1c458:	3e01      	subs	r6, #1
   1c45a:	e7f3      	b.n	1c444 <sync_window.part.2+0x2a>
            res = FR_DISK_ERR;
   1c45c:	2001      	movs	r0, #1
   1c45e:	e7ef      	b.n	1c440 <sync_window.part.2+0x26>

0001c460 <sync_window>:
    if (fs->wflag) {    /* Write back the sector if it is dirty */
   1c460:	79c3      	ldrb	r3, [r0, #7]
   1c462:	b10b      	cbz	r3, 1c468 <sync_window+0x8>
   1c464:	f7ff bfd9 	b.w	1c41a <sync_window.part.2>
}
   1c468:	4618      	mov	r0, r3
   1c46a:	4770      	bx	lr

0001c46c <move_window>:
    if (sector != fs->winsect) {    /* Window offset changed? */
   1c46c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c46e:	428b      	cmp	r3, r1
{
   1c470:	b570      	push	{r4, r5, r6, lr}
   1c472:	4606      	mov	r6, r0
   1c474:	460d      	mov	r5, r1
    if (sector != fs->winsect) {    /* Window offset changed? */
   1c476:	d012      	beq.n	1c49e <move_window+0x32>
        res = sync_window(fs);      /* Write-back changes */
   1c478:	f7ff fff2 	bl	1c460 <sync_window>
        if (res == FR_OK) {         /* Fill sector window with new data */
   1c47c:	4604      	mov	r4, r0
   1c47e:	b960      	cbnz	r0, 1c49a <move_window+0x2e>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
   1c480:	462a      	mov	r2, r5
   1c482:	2301      	movs	r3, #1
   1c484:	f106 013c 	add.w	r1, r6, #60	; 0x3c
   1c488:	6830      	ldr	r0, [r6, #0]
   1c48a:	f7fb fcaf 	bl	17dec <disk_read>
   1c48e:	2800      	cmp	r0, #0
                res = FR_DISK_ERR;
   1c490:	bf1c      	itt	ne
   1c492:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   1c496:	2401      	movne	r4, #1
            fs->winsect = sector;
   1c498:	63b5      	str	r5, [r6, #56]	; 0x38
}
   1c49a:	4620      	mov	r0, r4
   1c49c:	bd70      	pop	{r4, r5, r6, pc}
    FRESULT res = FR_OK;
   1c49e:	2400      	movs	r4, #0
   1c4a0:	e7fb      	b.n	1c49a <move_window+0x2e>
	...

0001c4a4 <check_fs>:
    fs->wflag = 0; fs->winsect = 0xFFFFFFFF;        /* Invaidate window */
   1c4a4:	2300      	movs	r3, #0
{
   1c4a6:	b510      	push	{r4, lr}
    fs->wflag = 0; fs->winsect = 0xFFFFFFFF;        /* Invaidate window */
   1c4a8:	71c3      	strb	r3, [r0, #7]
   1c4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c4ae:	6383      	str	r3, [r0, #56]	; 0x38
{
   1c4b0:	4604      	mov	r4, r0
    if (move_window(fs, sect) != FR_OK) return 4;   /* Load boot record */
   1c4b2:	f7ff ffdb 	bl	1c46c <move_window>
   1c4b6:	bb30      	cbnz	r0, 1c506 <check_fs+0x62>
    rv = rv << 8 | ptr[0];
   1c4b8:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
   1c4bc:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
   1c4c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3; /* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
   1c4c4:	f64a 2255 	movw	r2, #43605	; 0xaa55
   1c4c8:	4293      	cmp	r3, r2
   1c4ca:	d11e      	bne.n	1c50a <check_fs+0x66>
    if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
   1c4cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1c4d0:	2be9      	cmp	r3, #233	; 0xe9
   1c4d2:	d005      	beq.n	1c4e0 <check_fs+0x3c>
   1c4d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1c4d6:	4a10      	ldr	r2, [pc, #64]	; (1c518 <check_fs+0x74>)
   1c4d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
   1c4dc:	4293      	cmp	r3, r2
   1c4de:	d116      	bne.n	1c50e <check_fs+0x6a>
        if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;   /* Check "FAT" string */
   1c4e0:	f104 0072 	add.w	r0, r4, #114	; 0x72
   1c4e4:	f7ff ff32 	bl	1c34c <ld_dword>
   1c4e8:	4b0c      	ldr	r3, [pc, #48]	; (1c51c <check_fs+0x78>)
   1c4ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c4ee:	4298      	cmp	r0, r3
   1c4f0:	d00f      	beq.n	1c512 <check_fs+0x6e>
        if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;            /* Check "FAT3" string */
   1c4f2:	f104 008e 	add.w	r0, r4, #142	; 0x8e
   1c4f6:	f7ff ff29 	bl	1c34c <ld_dword>
        if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;   /* Check "FAT" string */
   1c4fa:	4b09      	ldr	r3, [pc, #36]	; (1c520 <check_fs+0x7c>)
   1c4fc:	4298      	cmp	r0, r3
   1c4fe:	bf14      	ite	ne
   1c500:	2002      	movne	r0, #2
   1c502:	2000      	moveq	r0, #0
}
   1c504:	bd10      	pop	{r4, pc}
    if (move_window(fs, sect) != FR_OK) return 4;   /* Load boot record */
   1c506:	2004      	movs	r0, #4
   1c508:	e7fc      	b.n	1c504 <check_fs+0x60>
    if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3; /* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
   1c50a:	2003      	movs	r0, #3
   1c50c:	e7fa      	b.n	1c504 <check_fs+0x60>
    return 2;
   1c50e:	2002      	movs	r0, #2
   1c510:	e7f8      	b.n	1c504 <check_fs+0x60>
        if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;   /* Check "FAT" string */
   1c512:	2000      	movs	r0, #0
   1c514:	e7f6      	b.n	1c504 <check_fs+0x60>
   1c516:	bf00      	nop
   1c518:	009000eb 	.word	0x009000eb
   1c51c:	00544146 	.word	0x00544146
   1c520:	33544146 	.word	0x33544146

0001c524 <find_volume>:
{
   1c524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (fs->fs_type) {                  /* If the volume has been mounted */
   1c528:	7943      	ldrb	r3, [r0, #5]
{
   1c52a:	b087      	sub	sp, #28
   1c52c:	4604      	mov	r4, r0
    mode &= (BYTE)~FA_READ;             /* Desired access mode, write access or not */
   1c52e:	f001 05fe 	and.w	r5, r1, #254	; 0xfe
    if (fs->fs_type) {                  /* If the volume has been mounted */
   1c532:	b19b      	cbz	r3, 1c55c <find_volume+0x38>
        disk_ioctl(fs->drv, IOCTL_STATUS, &stat);
   1c534:	2106      	movs	r1, #6
   1c536:	f10d 0207 	add.w	r2, sp, #7
   1c53a:	6800      	ldr	r0, [r0, #0]
   1c53c:	f7fb fcc6 	bl	17ecc <disk_ioctl>
        if (!(stat & STA_NOINIT)) {     /* and the physical drive is kept initialized */
   1c540:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c544:	07c1      	lsls	r1, r0, #31
   1c546:	d409      	bmi.n	1c55c <find_volume+0x38>
            if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {    /* Check write protection if needed */
   1c548:	2d00      	cmp	r5, #0
   1c54a:	f000 8124 	beq.w	1c796 <find_volume+0x272>
   1c54e:	f010 0004 	ands.w	r0, r0, #4
   1c552:	d000      	beq.n	1c556 <find_volume+0x32>
                return FR_WRITE_PROTECTED;
   1c554:	200a      	movs	r0, #10
}
   1c556:	b007      	add	sp, #28
   1c558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fs->fs_type = 0;                    /* Clear the file system object */
   1c55c:	2300      	movs	r3, #0
   1c55e:	7163      	strb	r3, [r4, #5]
    disk_ioctl(fs->drv, IOCTL_INIT, &stat); /* Initialize the physical drive */
   1c560:	f10d 0207 	add.w	r2, sp, #7
   1c564:	2105      	movs	r1, #5
   1c566:	6820      	ldr	r0, [r4, #0]
   1c568:	f7fb fcb0 	bl	17ecc <disk_ioctl>
    if (stat & STA_NOINIT) {            /* Check if the initialization succeeded */
   1c56c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c570:	07da      	lsls	r2, r3, #31
   1c572:	f100 8112 	bmi.w	1c79a <find_volume+0x276>
    if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
   1c576:	b10d      	cbz	r5, 1c57c <find_volume+0x58>
   1c578:	075b      	lsls	r3, r3, #29
   1c57a:	d4eb      	bmi.n	1c554 <find_volume+0x30>
    fmt = check_fs(fs, bsect);          /* Load sector 0 and check if it is an FAT-VBR as SFD */
   1c57c:	2100      	movs	r1, #0
   1c57e:	4620      	mov	r0, r4
   1c580:	f7ff ff90 	bl	1c4a4 <check_fs>
    if (fmt == 2 || (fmt < 2 && LD2PT(fs) != 0)) { /* Not an FAT-VBR or forced partition number */
   1c584:	2802      	cmp	r0, #2
    fmt = check_fs(fs, bsect);          /* Load sector 0 and check if it is an FAT-VBR as SFD */
   1c586:	4603      	mov	r3, r0
    if (fmt == 2 || (fmt < 2 && LD2PT(fs) != 0)) { /* Not an FAT-VBR or forced partition number */
   1c588:	d003      	beq.n	1c592 <find_volume+0x6e>
   1c58a:	2801      	cmp	r0, #1
   1c58c:	d824      	bhi.n	1c5d8 <find_volume+0xb4>
   1c58e:	7925      	ldrb	r5, [r4, #4]
   1c590:	b375      	cbz	r5, 1c5f0 <find_volume+0xcc>
   1c592:	f204 2502 	addw	r5, r4, #514	; 0x202
{
   1c596:	2100      	movs	r1, #0
            br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
   1c598:	af02      	add	r7, sp, #8
   1c59a:	f815 0c04 	ldrb.w	r0, [r5, #-4]
   1c59e:	b110      	cbz	r0, 1c5a6 <find_volume+0x82>
   1c5a0:	4628      	mov	r0, r5
   1c5a2:	f7ff fed3 	bl	1c34c <ld_dword>
   1c5a6:	f847 0021 	str.w	r0, [r7, r1, lsl #2]
        for (i = 0; i < 4; i++) {           /* Get partition offset */
   1c5aa:	3101      	adds	r1, #1
   1c5ac:	2904      	cmp	r1, #4
   1c5ae:	f105 0510 	add.w	r5, r5, #16
   1c5b2:	d1f2      	bne.n	1c59a <find_volume+0x76>
        i = LD2PT(fs);                      /* Partition number: 0:auto, 1-4:forced */
   1c5b4:	7926      	ldrb	r6, [r4, #4]
        if (i) i--;
   1c5b6:	b106      	cbz	r6, 1c5ba <find_volume+0x96>
   1c5b8:	3e01      	subs	r6, #1
            bsect = br[i];
   1c5ba:	f857 5026 	ldr.w	r5, [r7, r6, lsl #2]
            fmt = bsect ? check_fs(fs, bsect) : 3;  /* Check the partition */
   1c5be:	b17d      	cbz	r5, 1c5e0 <find_volume+0xbc>
   1c5c0:	4629      	mov	r1, r5
   1c5c2:	4620      	mov	r0, r4
   1c5c4:	f7ff ff6e 	bl	1c4a4 <check_fs>
   1c5c8:	4603      	mov	r3, r0
        } while (!LD2PT(fs) && fmt >= 2 && ++i < 4);
   1c5ca:	7922      	ldrb	r2, [r4, #4]
   1c5cc:	b952      	cbnz	r2, 1c5e4 <find_volume+0xc0>
   1c5ce:	2b01      	cmp	r3, #1
   1c5d0:	d90e      	bls.n	1c5f0 <find_volume+0xcc>
   1c5d2:	3601      	adds	r6, #1
   1c5d4:	2e03      	cmp	r6, #3
   1c5d6:	d9f0      	bls.n	1c5ba <find_volume+0x96>
    if (fmt == 4) return FR_DISK_ERR;       /* An error occured in the disk I/O layer */
   1c5d8:	2b04      	cmp	r3, #4
   1c5da:	d107      	bne.n	1c5ec <find_volume+0xc8>
   1c5dc:	2001      	movs	r0, #1
   1c5de:	e7ba      	b.n	1c556 <find_volume+0x32>
            fmt = bsect ? check_fs(fs, bsect) : 3;  /* Check the partition */
   1c5e0:	2303      	movs	r3, #3
   1c5e2:	e7f2      	b.n	1c5ca <find_volume+0xa6>
    if (fmt == 4) return FR_DISK_ERR;       /* An error occured in the disk I/O layer */
   1c5e4:	2b04      	cmp	r3, #4
   1c5e6:	d0f9      	beq.n	1c5dc <find_volume+0xb8>
    if (fmt >= 2) return FR_NO_FILESYSTEM;  /* No FAT volume is found */
   1c5e8:	2b01      	cmp	r3, #1
   1c5ea:	d901      	bls.n	1c5f0 <find_volume+0xcc>
   1c5ec:	200d      	movs	r0, #13
   1c5ee:	e7b2      	b.n	1c556 <find_volume+0x32>
    rv = rv << 8 | ptr[0];
   1c5f0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   1c5f4:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   1c5f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;   /* (BPB_BytsPerSec must be equal to the physical sector size) */
   1c5fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c600:	d1f4      	bne.n	1c5ec <find_volume+0xc8>
    rv = rv << 8 | ptr[0];
   1c602:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
   1c606:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
        if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
   1c60a:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
   1c60e:	d104      	bne.n	1c61a <find_volume+0xf6>
   1c610:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1c614:	f7ff fe9a 	bl	1c34c <ld_dword>
   1c618:	4606      	mov	r6, r0
        fs->n_fats = fs->win[BPB_NumFATs];                  /* Number of FATs */
   1c61a:	f894 904c 	ldrb.w	r9, [r4, #76]	; 0x4c
        fs->fsize = fasize;
   1c61e:	6266      	str	r6, [r4, #36]	; 0x24
        if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;    /* (Must be 1 or 2) */
   1c620:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1c624:	2b01      	cmp	r3, #1
        fs->n_fats = fs->win[BPB_NumFATs];                  /* Number of FATs */
   1c626:	f884 9006 	strb.w	r9, [r4, #6]
        if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;    /* (Must be 1 or 2) */
   1c62a:	d8df      	bhi.n	1c5ec <find_volume+0xc8>
        fs->csize = fs->win[BPB_SecPerClus];                /* Cluster size */
   1c62c:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
   1c630:	b2bb      	uxth	r3, r7
   1c632:	81e3      	strh	r3, [r4, #14]
        if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;   /* (Must be power of 2) */
   1c634:	2b00      	cmp	r3, #0
   1c636:	d0d9      	beq.n	1c5ec <find_volume+0xc8>
   1c638:	1e7b      	subs	r3, r7, #1
   1c63a:	423b      	tst	r3, r7
   1c63c:	d1d6      	bne.n	1c5ec <find_volume+0xc8>
    rv = rv << 8 | ptr[0];
   1c63e:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   1c642:	f894 804d 	ldrb.w	r8, [r4, #77]	; 0x4d
   1c646:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
        if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM; /* (Must be sector aligned) */
   1c64a:	f018 0f0f 	tst.w	r8, #15
        fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);  /* Number of root directory entries */
   1c64e:	f8a4 800c 	strh.w	r8, [r4, #12]
        if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM; /* (Must be sector aligned) */
   1c652:	d1cb      	bne.n	1c5ec <find_volume+0xc8>
    rv = rv << 8 | ptr[0];
   1c654:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   1c658:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
        if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
   1c65c:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
   1c660:	d103      	bne.n	1c66a <find_volume+0x146>
   1c662:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1c666:	f7ff fe71 	bl	1c34c <ld_dword>
    rv = rv << 8 | ptr[0];
   1c66a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   1c66e:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
        if (nrsv == 0) return FR_NO_FILESYSTEM;             /* (Must not be 0) */
   1c672:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
   1c676:	d0b9      	beq.n	1c5ec <find_volume+0xc8>
        fasize *= fs->n_fats;                               /* Number of sectors for FAT area */
   1c678:	fb06 f309 	mul.w	r3, r6, r9
        sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE); /* RSV + FAT + DIR */
   1c67c:	eb02 1c18 	add.w	ip, r2, r8, lsr #4
   1c680:	449c      	add	ip, r3
        if (tsect < sysect) return FR_NO_FILESYSTEM;        /* (Invalid volume size) */
   1c682:	4584      	cmp	ip, r0
   1c684:	d8b2      	bhi.n	1c5ec <find_volume+0xc8>
        nclst = (tsect - sysect) / fs->csize;               /* Number of clusters */
   1c686:	eba0 010c 	sub.w	r1, r0, ip
   1c68a:	fbb1 f1f7 	udiv	r1, r1, r7
        if (nclst == 0) return FR_NO_FILESYSTEM;            /* (Invalid volume size) */
   1c68e:	2900      	cmp	r1, #0
   1c690:	d0ac      	beq.n	1c5ec <find_volume+0xc8>
        fmt = FS_FAT32;
   1c692:	f64f 77f5 	movw	r7, #65525	; 0xfff5
   1c696:	42b9      	cmp	r1, r7
   1c698:	bf94      	ite	ls
   1c69a:	2702      	movls	r7, #2
   1c69c:	2703      	movhi	r7, #3
        if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   1c69e:	f640 70f5 	movw	r0, #4085	; 0xff5
   1c6a2:	4281      	cmp	r1, r0
   1c6a4:	bf98      	it	ls
   1c6a6:	2701      	movls	r7, #1
        fs->fatbase = bsect + nrsv;                         /* FAT start sector */
   1c6a8:	442a      	add	r2, r5
        fs->n_fatent = nclst + 2;                           /* Number of FAT entries */
   1c6aa:	3102      	adds	r1, #2
        fs->database = bsect + sysect;                      /* Data start sector */
   1c6ac:	eb0c 0005 	add.w	r0, ip, r5
        if (fmt == FS_FAT32) {
   1c6b0:	2f03      	cmp	r7, #3
        fs->n_fatent = nclst + 2;                           /* Number of FAT entries */
   1c6b2:	6221      	str	r1, [r4, #32]
        fs->volbase = bsect;                                /* Volume start sector */
   1c6b4:	62a5      	str	r5, [r4, #40]	; 0x28
        fs->fatbase = bsect + nrsv;                         /* FAT start sector */
   1c6b6:	62e2      	str	r2, [r4, #44]	; 0x2c
        fs->database = bsect + sysect;                      /* Data start sector */
   1c6b8:	6360      	str	r0, [r4, #52]	; 0x34
        if (fmt == FS_FAT32) {
   1c6ba:	d159      	bne.n	1c770 <find_volume+0x24c>
    rv = rv << 8 | ptr[0];
   1c6bc:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
   1c6c0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
            if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;   /* (Must be FAT32 revision 0.0) */
   1c6c4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
   1c6c8:	d190      	bne.n	1c5ec <find_volume+0xc8>
            if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
   1c6ca:	f1b8 0f00 	cmp.w	r8, #0
   1c6ce:	d18d      	bne.n	1c5ec <find_volume+0xc8>
            fs->dirbase = ld_dword(fs->win + BPB_RootClus32);   /* Root directory start cluster */
   1c6d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1c6d4:	f7ff fe3a 	bl	1c34c <ld_dword>
   1c6d8:	6320      	str	r0, [r4, #48]	; 0x30
            szbfat = fs->n_fatent * 4;                      /* (Needed FAT size) */
   1c6da:	0089      	lsls	r1, r1, #2
        if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;  /* (BPB_FATSz must not be less than the size needed) */
   1c6dc:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   1c6e0:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
   1c6e4:	d382      	bcc.n	1c5ec <find_volume+0xc8>
        fs->last_clst = fs->free_clst = 0xFFFFFFFF;     /* Initialize cluster allocation information */
   1c6e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c6ea:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if (fmt == FS_FAT32             /* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
   1c6ee:	2f03      	cmp	r7, #3
        fs->fsi_flag = 0x80;
   1c6f0:	f04f 0380 	mov.w	r3, #128	; 0x80
   1c6f4:	7223      	strb	r3, [r4, #8]
        if (fmt == FS_FAT32             /* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
   1c6f6:	d12f      	bne.n	1c758 <find_volume+0x234>
    rv = rv << 8 | ptr[0];
   1c6f8:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
   1c6fc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1c700:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            && ld_word(fs->win + BPB_FSInfo32) == 1
   1c704:	2b01      	cmp	r3, #1
   1c706:	d127      	bne.n	1c758 <find_volume+0x234>
            && move_window(fs, bsect + 1) == FR_OK)
   1c708:	1c69      	adds	r1, r5, #1
   1c70a:	4620      	mov	r0, r4
   1c70c:	f7ff feae 	bl	1c46c <move_window>
   1c710:	bb10      	cbnz	r0, 1c758 <find_volume+0x234>
    rv = rv << 8 | ptr[0];
   1c712:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
   1c716:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
            fs->fsi_flag = 0;
   1c71a:	7220      	strb	r0, [r4, #8]
    rv = rv << 8 | ptr[0];
   1c71c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            if (ld_word(fs->win + BS_55AA) == 0xAA55    /* Load FSINFO data if available */
   1c720:	f64a 2255 	movw	r2, #43605	; 0xaa55
   1c724:	4293      	cmp	r3, r2
   1c726:	d117      	bne.n	1c758 <find_volume+0x234>
                && ld_dword(fs->win + FSI_LeadSig) == 0x41615252
   1c728:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1c72c:	f7ff fe0e 	bl	1c34c <ld_dword>
   1c730:	4b1b      	ldr	r3, [pc, #108]	; (1c7a0 <find_volume+0x27c>)
   1c732:	4298      	cmp	r0, r3
   1c734:	d110      	bne.n	1c758 <find_volume+0x234>
                && ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
   1c736:	f504 7008 	add.w	r0, r4, #544	; 0x220
   1c73a:	f7ff fe07 	bl	1c34c <ld_dword>
   1c73e:	4b19      	ldr	r3, [pc, #100]	; (1c7a4 <find_volume+0x280>)
   1c740:	4298      	cmp	r0, r3
   1c742:	d109      	bne.n	1c758 <find_volume+0x234>
                fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
   1c744:	f504 7009 	add.w	r0, r4, #548	; 0x224
   1c748:	f7ff fe00 	bl	1c34c <ld_dword>
   1c74c:	61a0      	str	r0, [r4, #24]
                fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
   1c74e:	f504 700a 	add.w	r0, r4, #552	; 0x228
   1c752:	f7ff fdfb 	bl	1c34c <ld_dword>
   1c756:	6160      	str	r0, [r4, #20]
    fs->id = ++Fsid;    /* File system mount ID */
   1c758:	4a13      	ldr	r2, [pc, #76]	; (1c7a8 <find_volume+0x284>)
    fs->fs_type = fmt;  /* FAT sub-type */
   1c75a:	7167      	strb	r7, [r4, #5]
    fs->id = ++Fsid;    /* File system mount ID */
   1c75c:	8813      	ldrh	r3, [r2, #0]
   1c75e:	3301      	adds	r3, #1
   1c760:	b29b      	uxth	r3, r3
   1c762:	8013      	strh	r3, [r2, #0]
   1c764:	8163      	strh	r3, [r4, #10]
    fs->cdir = 0;       /* Initialize current directory */
   1c766:	2000      	movs	r0, #0
    fs->lfnbuf = LfnBuf;    /* Static LFN working buffer */
   1c768:	4b10      	ldr	r3, [pc, #64]	; (1c7ac <find_volume+0x288>)
   1c76a:	6123      	str	r3, [r4, #16]
    fs->cdir = 0;       /* Initialize current directory */
   1c76c:	61e0      	str	r0, [r4, #28]
   1c76e:	e6f2      	b.n	1c556 <find_volume+0x32>
            if (fs->n_rootdir == 0) return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
   1c770:	f1b8 0f00 	cmp.w	r8, #0
   1c774:	f43f af3a 	beq.w	1c5ec <find_volume+0xc8>
                fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1c778:	2f02      	cmp	r7, #2
   1c77a:	ea4f 0041 	mov.w	r0, r1, lsl #1
   1c77e:	bf18      	it	ne
   1c780:	1840      	addne	r0, r0, r1
            fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
   1c782:	4413      	add	r3, r2
                fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1c784:	bf18      	it	ne
   1c786:	f001 0101 	andne.w	r1, r1, #1
            fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
   1c78a:	6323      	str	r3, [r4, #48]	; 0x30
                fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1c78c:	bf0c      	ite	eq
   1c78e:	4601      	moveq	r1, r0
   1c790:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
   1c794:	e7a2      	b.n	1c6dc <find_volume+0x1b8>
            return FR_OK;               /* The file system object is valid */
   1c796:	4628      	mov	r0, r5
   1c798:	e6dd      	b.n	1c556 <find_volume+0x32>
        return FR_NOT_READY;            /* Failed to initialize due to no medium or hard error */
   1c79a:	2003      	movs	r0, #3
   1c79c:	e6db      	b.n	1c556 <find_volume+0x32>
   1c79e:	bf00      	nop
   1c7a0:	41615252 	.word	0x41615252
   1c7a4:	61417272 	.word	0x61417272
   1c7a8:	2000069e 	.word	0x2000069e
   1c7ac:	200006a0 	.word	0x200006a0

0001c7b0 <put_fat>:
    if (clst >= 2 && clst < fs->n_fatent) { /* Check if in valid range */
   1c7b0:	2901      	cmp	r1, #1
{
   1c7b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c7b6:	4605      	mov	r5, r0
   1c7b8:	460c      	mov	r4, r1
   1c7ba:	4617      	mov	r7, r2
    if (clst >= 2 && clst < fs->n_fatent) { /* Check if in valid range */
   1c7bc:	d972      	bls.n	1c8a4 <put_fat+0xf4>
   1c7be:	6a03      	ldr	r3, [r0, #32]
   1c7c0:	428b      	cmp	r3, r1
   1c7c2:	d96f      	bls.n	1c8a4 <put_fat+0xf4>
        switch (fs->fs_type) {
   1c7c4:	7943      	ldrb	r3, [r0, #5]
   1c7c6:	2b02      	cmp	r3, #2
   1c7c8:	d03f      	beq.n	1c84a <put_fat+0x9a>
   1c7ca:	2b03      	cmp	r3, #3
   1c7cc:	d050      	beq.n	1c870 <put_fat+0xc0>
   1c7ce:	2b01      	cmp	r3, #1
   1c7d0:	d168      	bne.n	1c8a4 <put_fat+0xf4>
            bc = (UINT)clst; bc += bc / 2;
   1c7d2:	eb01 0851 	add.w	r8, r1, r1, lsr #1
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1c7d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1c7d8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
   1c7dc:	f7ff fe46 	bl	1c46c <move_window>
   1c7e0:	4606      	mov	r6, r0
            if (res != FR_OK) break;
   1c7e2:	bb38      	cbnz	r0, 1c834 <put_fat+0x84>
            p = fs->win + bc++ % SS(fs);
   1c7e4:	f105 093c 	add.w	r9, r5, #60	; 0x3c
   1c7e8:	f108 0a01 	add.w	sl, r8, #1
   1c7ec:	f3c8 0808 	ubfx	r8, r8, #0, #9
            *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1c7f0:	f014 0401 	ands.w	r4, r4, #1
   1c7f4:	bf1f      	itttt	ne
   1c7f6:	f819 3008 	ldrbne.w	r3, [r9, r8]
   1c7fa:	f003 020f 	andne.w	r2, r3, #15
   1c7fe:	013b      	lslne	r3, r7, #4
   1c800:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
   1c804:	bf14      	ite	ne
   1c806:	4313      	orrne	r3, r2
   1c808:	b2fb      	uxtbeq	r3, r7
   1c80a:	f809 3008 	strb.w	r3, [r9, r8]
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1c80e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
            fs->wflag = 1;
   1c810:	2301      	movs	r3, #1
   1c812:	71eb      	strb	r3, [r5, #7]
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1c814:	eb01 215a 	add.w	r1, r1, sl, lsr #9
   1c818:	4628      	mov	r0, r5
   1c81a:	f7ff fe27 	bl	1c46c <move_window>
            if (res != FR_OK) break;
   1c81e:	4606      	mov	r6, r0
   1c820:	b940      	cbnz	r0, 1c834 <put_fat+0x84>
            p = fs->win + bc % SS(fs);
   1c822:	f3ca 0a08 	ubfx	sl, sl, #0, #9
            *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   1c826:	b144      	cbz	r4, 1c83a <put_fat+0x8a>
   1c828:	f3c7 1707 	ubfx	r7, r7, #4, #8
   1c82c:	f809 700a 	strb.w	r7, [r9, sl]
            fs->wflag = 1;
   1c830:	2301      	movs	r3, #1
   1c832:	71eb      	strb	r3, [r5, #7]
}
   1c834:	4630      	mov	r0, r6
   1c836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   1c83a:	f819 300a 	ldrb.w	r3, [r9, sl]
   1c83e:	f3c7 2703 	ubfx	r7, r7, #8, #4
   1c842:	f023 030f 	bic.w	r3, r3, #15
   1c846:	431f      	orrs	r7, r3
   1c848:	e7f0      	b.n	1c82c <put_fat+0x7c>
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   1c84a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1c84c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   1c850:	f7ff fe0c 	bl	1c46c <move_window>
            if (res != FR_OK) break;
   1c854:	4606      	mov	r6, r0
   1c856:	2800      	cmp	r0, #0
   1c858:	d1ec      	bne.n	1c834 <put_fat+0x84>
            st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
   1c85a:	0064      	lsls	r4, r4, #1
   1c85c:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   1c860:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   1c864:	191a      	adds	r2, r3, r4
    *ptr++ = (BYTE)val; val >>= 8;
   1c866:	551f      	strb	r7, [r3, r4]
   1c868:	f3c7 2707 	ubfx	r7, r7, #8, #8
    *ptr++ = (BYTE)val;
   1c86c:	7057      	strb	r7, [r2, #1]
   1c86e:	e7df      	b.n	1c830 <put_fat+0x80>
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   1c870:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1c872:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   1c876:	f7ff fdf9 	bl	1c46c <move_window>
            if (res != FR_OK) break;
   1c87a:	4606      	mov	r6, r0
   1c87c:	2800      	cmp	r0, #0
   1c87e:	d1d9      	bne.n	1c834 <put_fat+0x84>
                val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   1c880:	00a4      	lsls	r4, r4, #2
   1c882:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   1c886:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   1c88a:	441c      	add	r4, r3
   1c88c:	4620      	mov	r0, r4
   1c88e:	f7ff fd5d 	bl	1c34c <ld_dword>
   1c892:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
   1c896:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
            st_dword(fs->win + clst * 4 % SS(fs), val);
   1c89a:	4339      	orrs	r1, r7
   1c89c:	4620      	mov	r0, r4
   1c89e:	f7ff fd5d 	bl	1c35c <st_dword>
   1c8a2:	e7c5      	b.n	1c830 <put_fat+0x80>
    FRESULT res = FR_INT_ERR;
   1c8a4:	2602      	movs	r6, #2
   1c8a6:	e7c5      	b.n	1c834 <put_fat+0x84>

0001c8a8 <get_fat.isra.7>:
    if (clst < 2 || clst >= fs->n_fatent) { /* Check if in valid range */
   1c8a8:	2901      	cmp	r1, #1
DWORD get_fat ( /* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
   1c8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c8ac:	4605      	mov	r5, r0
   1c8ae:	460c      	mov	r4, r1
    if (clst < 2 || clst >= fs->n_fatent) { /* Check if in valid range */
   1c8b0:	d952      	bls.n	1c958 <get_fat.isra.7+0xb0>
   1c8b2:	6a03      	ldr	r3, [r0, #32]
   1c8b4:	4299      	cmp	r1, r3
   1c8b6:	d24f      	bcs.n	1c958 <get_fat.isra.7+0xb0>
        switch (fs->fs_type) {
   1c8b8:	7943      	ldrb	r3, [r0, #5]
   1c8ba:	2b02      	cmp	r3, #2
   1c8bc:	d029      	beq.n	1c912 <get_fat.isra.7+0x6a>
   1c8be:	2b03      	cmp	r3, #3
   1c8c0:	d038      	beq.n	1c934 <get_fat.isra.7+0x8c>
   1c8c2:	2b01      	cmp	r3, #1
   1c8c4:	d148      	bne.n	1c958 <get_fat.isra.7+0xb0>
            bc = (UINT)clst; bc += bc / 2;
   1c8c6:	eb01 0651 	add.w	r6, r1, r1, lsr #1
            if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   1c8ca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1c8cc:	eb01 2156 	add.w	r1, r1, r6, lsr #9
   1c8d0:	f7ff fdcc 	bl	1c46c <move_window>
   1c8d4:	b110      	cbz	r0, 1c8dc <get_fat.isra.7+0x34>
        val = 0xFFFFFFFF;   /* Default value falls on disk error */
   1c8d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            wc = fs->win[bc++ % SS(fs)];
   1c8dc:	1c77      	adds	r7, r6, #1
            if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   1c8de:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
            wc = fs->win[bc++ % SS(fs)];
   1c8e0:	f3c6 0608 	ubfx	r6, r6, #0, #9
   1c8e4:	442e      	add	r6, r5
            if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   1c8e6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
   1c8ea:	4628      	mov	r0, r5
            wc = fs->win[bc++ % SS(fs)];
   1c8ec:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
            if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   1c8f0:	f7ff fdbc 	bl	1c46c <move_window>
   1c8f4:	2800      	cmp	r0, #0
   1c8f6:	d1ee      	bne.n	1c8d6 <get_fat.isra.7+0x2e>
            wc |= fs->win[bc % SS(fs)] << 8;
   1c8f8:	f3c7 0708 	ubfx	r7, r7, #0, #9
   1c8fc:	443d      	add	r5, r7
            val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   1c8fe:	07e3      	lsls	r3, r4, #31
            wc |= fs->win[bc % SS(fs)] << 8;
   1c900:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
   1c904:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
            val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   1c908:	bf4c      	ite	mi
   1c90a:	0900      	lsrmi	r0, r0, #4
   1c90c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
   1c910:	e7e3      	b.n	1c8da <get_fat.isra.7+0x32>
            if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   1c912:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1c914:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   1c918:	f7ff fda8 	bl	1c46c <move_window>
   1c91c:	2800      	cmp	r0, #0
   1c91e:	d1da      	bne.n	1c8d6 <get_fat.isra.7+0x2e>
            val = ld_word(fs->win + clst * 2 % SS(fs));
   1c920:	0064      	lsls	r4, r4, #1
   1c922:	353c      	adds	r5, #60	; 0x3c
   1c924:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   1c928:	192b      	adds	r3, r5, r4
    rv = rv << 8 | ptr[0];
   1c92a:	5d28      	ldrb	r0, [r5, r4]
   1c92c:	785b      	ldrb	r3, [r3, #1]
            val = ld_word(fs->win + clst * 2 % SS(fs));
   1c92e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1c932:	e7d2      	b.n	1c8da <get_fat.isra.7+0x32>
            if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   1c934:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1c936:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   1c93a:	f7ff fd97 	bl	1c46c <move_window>
   1c93e:	2800      	cmp	r0, #0
   1c940:	d1c9      	bne.n	1c8d6 <get_fat.isra.7+0x2e>
            val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
   1c942:	00a4      	lsls	r4, r4, #2
   1c944:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1c948:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   1c94c:	4420      	add	r0, r4
   1c94e:	f7ff fcfd 	bl	1c34c <ld_dword>
   1c952:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
   1c956:	e7c0      	b.n	1c8da <get_fat.isra.7+0x32>
            val = 1;    /* Internal error */
   1c958:	2001      	movs	r0, #1
   1c95a:	e7be      	b.n	1c8da <get_fat.isra.7+0x32>

0001c95c <dir_sdi>:
    if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {    /* Check range of offset and alignment */
   1c95c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
   1c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c962:	4606      	mov	r6, r0
   1c964:	460d      	mov	r5, r1
    if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {    /* Check range of offset and alignment */
   1c966:	d301      	bcc.n	1c96c <dir_sdi+0x10>
        return FR_INT_ERR;
   1c968:	2002      	movs	r0, #2
}
   1c96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {    /* Check range of offset and alignment */
   1c96c:	06ca      	lsls	r2, r1, #27
   1c96e:	d1fb      	bne.n	1c968 <dir_sdi+0xc>
    clst = dp->obj.sclust;      /* Table start cluster (0:root) */
   1c970:	6882      	ldr	r2, [r0, #8]
    FATFS *fs = dp->obj.fs;
   1c972:	6804      	ldr	r4, [r0, #0]
    dp->dptr = ofs;             /* Set current offset */
   1c974:	6131      	str	r1, [r6, #16]
    if (clst == 0 && fs->fs_type >= FS_FAT32) { /* Replace cluster# 0 with root cluster# */
   1c976:	b9c2      	cbnz	r2, 1c9aa <dir_sdi+0x4e>
   1c978:	7963      	ldrb	r3, [r4, #5]
   1c97a:	2b02      	cmp	r3, #2
   1c97c:	d901      	bls.n	1c982 <dir_sdi+0x26>
        clst = fs->dirbase;
   1c97e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if (clst == 0) {    /* Static table (root-directory in FAT12/16) */
   1c980:	b9a3      	cbnz	r3, 1c9ac <dir_sdi+0x50>
        if (ofs / SZDIRE >= fs->n_rootdir)  return FR_INT_ERR;  /* Is index out of range? */
   1c982:	89a3      	ldrh	r3, [r4, #12]
   1c984:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
   1c988:	d9ee      	bls.n	1c968 <dir_sdi+0xc>
        dp->sect = fs->dirbase;
   1c98a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c98c:	61b3      	str	r3, [r6, #24]
    if (!dp->sect) return FR_INT_ERR;
   1c98e:	69b3      	ldr	r3, [r6, #24]
    dp->clust = clst;                   /* Current cluster# */
   1c990:	6172      	str	r2, [r6, #20]
    if (!dp->sect) return FR_INT_ERR;
   1c992:	2b00      	cmp	r3, #0
   1c994:	d0e8      	beq.n	1c968 <dir_sdi+0xc>
    dp->sect += ofs / SS(fs);           /* Sector# of the directory entry */
   1c996:	eb03 2355 	add.w	r3, r3, r5, lsr #9
    dp->dir = fs->win + (ofs % SS(fs)); /* Pointer to the entry in the win[] */
   1c99a:	343c      	adds	r4, #60	; 0x3c
   1c99c:	f3c5 0508 	ubfx	r5, r5, #0, #9
   1c9a0:	442c      	add	r4, r5
    dp->sect += ofs / SS(fs);           /* Sector# of the directory entry */
   1c9a2:	61b3      	str	r3, [r6, #24]
    dp->dir = fs->win + (ofs % SS(fs)); /* Pointer to the entry in the win[] */
   1c9a4:	61f4      	str	r4, [r6, #28]
    return FR_OK;
   1c9a6:	2000      	movs	r0, #0
   1c9a8:	e7df      	b.n	1c96a <dir_sdi+0xe>
   1c9aa:	4613      	mov	r3, r2
        csz = (DWORD)fs->csize * SS(fs);    /* Bytes per cluster */
   1c9ac:	89e7      	ldrh	r7, [r4, #14]
        while (ofs >= csz) {                /* Follow cluster chain */
   1c9ae:	461a      	mov	r2, r3
        csz = (DWORD)fs->csize * SS(fs);    /* Bytes per cluster */
   1c9b0:	027f      	lsls	r7, r7, #9
        while (ofs >= csz) {                /* Follow cluster chain */
   1c9b2:	42bd      	cmp	r5, r7
            clst = get_fat(&dp->obj, clst);             /* Get next cluster */
   1c9b4:	4611      	mov	r1, r2
        while (ofs >= csz) {                /* Follow cluster chain */
   1c9b6:	d204      	bcs.n	1c9c2 <dir_sdi+0x66>
        dp->sect = clust2sect(fs, clst);
   1c9b8:	4620      	mov	r0, r4
   1c9ba:	f7ff fcd7 	bl	1c36c <clust2sect>
   1c9be:	61b0      	str	r0, [r6, #24]
   1c9c0:	e7e5      	b.n	1c98e <dir_sdi+0x32>
            clst = get_fat(&dp->obj, clst);             /* Get next cluster */
   1c9c2:	6830      	ldr	r0, [r6, #0]
   1c9c4:	f7ff ff70 	bl	1c8a8 <get_fat.isra.7>
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR; /* Disk error */
   1c9c8:	1c43      	adds	r3, r0, #1
            clst = get_fat(&dp->obj, clst);             /* Get next cluster */
   1c9ca:	4602      	mov	r2, r0
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR; /* Disk error */
   1c9cc:	d006      	beq.n	1c9dc <dir_sdi+0x80>
            if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;    /* Reached to end of table or internal error */
   1c9ce:	2801      	cmp	r0, #1
   1c9d0:	d9ca      	bls.n	1c968 <dir_sdi+0xc>
   1c9d2:	6a23      	ldr	r3, [r4, #32]
   1c9d4:	4283      	cmp	r3, r0
   1c9d6:	d9c7      	bls.n	1c968 <dir_sdi+0xc>
            ofs -= csz;
   1c9d8:	1bed      	subs	r5, r5, r7
   1c9da:	e7ea      	b.n	1c9b2 <dir_sdi+0x56>
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR; /* Disk error */
   1c9dc:	2001      	movs	r0, #1
   1c9de:	e7c4      	b.n	1c96a <dir_sdi+0xe>

0001c9e0 <create_chain>:
{
   1c9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9e4:	4680      	mov	r8, r0
    FATFS *fs = obj->fs;
   1c9e6:	6805      	ldr	r5, [r0, #0]
    if (clst == 0) {    /* Create a new chain */
   1c9e8:	460f      	mov	r7, r1
   1c9ea:	b971      	cbnz	r1, 1ca0a <create_chain+0x2a>
        scl = fs->last_clst;                /* Get suggested cluster to start from */
   1c9ec:	696e      	ldr	r6, [r5, #20]
        if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   1c9ee:	b1f6      	cbz	r6, 1ca2e <create_chain+0x4e>
   1c9f0:	6a2b      	ldr	r3, [r5, #32]
   1c9f2:	42b3      	cmp	r3, r6
   1c9f4:	bf98      	it	ls
   1c9f6:	2601      	movls	r6, #1
   1c9f8:	4634      	mov	r4, r6
            if (ncl >= fs->n_fatent) {      /* Check wrap-around */
   1c9fa:	6a2b      	ldr	r3, [r5, #32]
            ncl++;                          /* Next cluster */
   1c9fc:	3401      	adds	r4, #1
            if (ncl >= fs->n_fatent) {      /* Check wrap-around */
   1c9fe:	42a3      	cmp	r3, r4
   1ca00:	d818      	bhi.n	1ca34 <create_chain+0x54>
                if (ncl > scl) return 0;    /* No free cluster */
   1ca02:	2e01      	cmp	r6, #1
   1ca04:	d815      	bhi.n	1ca32 <create_chain+0x52>
   1ca06:	2400      	movs	r4, #0
   1ca08:	e009      	b.n	1ca1e <create_chain+0x3e>
        cs = get_fat(obj, clst);            /* Check the cluster status */
   1ca0a:	4628      	mov	r0, r5
   1ca0c:	f7ff ff4c 	bl	1c8a8 <get_fat.isra.7>
        if (cs < 2) return 1;               /* Invalid value */
   1ca10:	2801      	cmp	r0, #1
        cs = get_fat(obj, clst);            /* Check the cluster status */
   1ca12:	4604      	mov	r4, r0
        if (cs < 2) return 1;               /* Invalid value */
   1ca14:	d937      	bls.n	1ca86 <create_chain+0xa6>
        if (cs == 0xFFFFFFFF) return cs;    /* A disk error occurred */
   1ca16:	1c43      	adds	r3, r0, #1
   1ca18:	d104      	bne.n	1ca24 <create_chain+0x44>
        ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;    /* Failed. Create error status */
   1ca1a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1ca1e:	4620      	mov	r0, r4
   1ca20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (cs < fs->n_fatent) return cs;   /* It is already followed by next cluster */
   1ca24:	6a2b      	ldr	r3, [r5, #32]
   1ca26:	4283      	cmp	r3, r0
   1ca28:	d8f9      	bhi.n	1ca1e <create_chain+0x3e>
   1ca2a:	463e      	mov	r6, r7
   1ca2c:	e7e4      	b.n	1c9f8 <create_chain+0x18>
        if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   1ca2e:	2601      	movs	r6, #1
   1ca30:	e7e2      	b.n	1c9f8 <create_chain+0x18>
                ncl = 2;
   1ca32:	2402      	movs	r4, #2
            cs = get_fat(obj, ncl);         /* Get the cluster status */
   1ca34:	4621      	mov	r1, r4
   1ca36:	f8d8 0000 	ldr.w	r0, [r8]
   1ca3a:	f7ff ff35 	bl	1c8a8 <get_fat.isra.7>
            if (cs == 0) break;             /* Found a free cluster */
   1ca3e:	b130      	cbz	r0, 1ca4e <create_chain+0x6e>
            if (cs == 1 || cs == 0xFFFFFFFF) return cs; /* An error occurred */
   1ca40:	2801      	cmp	r0, #1
   1ca42:	d020      	beq.n	1ca86 <create_chain+0xa6>
   1ca44:	3001      	adds	r0, #1
   1ca46:	d0e8      	beq.n	1ca1a <create_chain+0x3a>
            if (ncl == scl) return 0;       /* No free cluster */
   1ca48:	42b4      	cmp	r4, r6
   1ca4a:	d1d6      	bne.n	1c9fa <create_chain+0x1a>
   1ca4c:	e7db      	b.n	1ca06 <create_chain+0x26>
        res = put_fat(fs, ncl, 0xFFFFFFFF); /* Mark the new cluster 'EOC' */
   1ca4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ca52:	4621      	mov	r1, r4
   1ca54:	4628      	mov	r0, r5
   1ca56:	f7ff feab 	bl	1c7b0 <put_fat>
        if (res == FR_OK && clst) {
   1ca5a:	b990      	cbnz	r0, 1ca82 <create_chain+0xa2>
   1ca5c:	b957      	cbnz	r7, 1ca74 <create_chain+0x94>
        if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
   1ca5e:	6a2a      	ldr	r2, [r5, #32]
   1ca60:	69ab      	ldr	r3, [r5, #24]
        fs->last_clst = ncl;
   1ca62:	616c      	str	r4, [r5, #20]
        if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
   1ca64:	3a02      	subs	r2, #2
   1ca66:	4293      	cmp	r3, r2
   1ca68:	d30f      	bcc.n	1ca8a <create_chain+0xaa>
        fs->fsi_flag |= 1;
   1ca6a:	7a2b      	ldrb	r3, [r5, #8]
   1ca6c:	f043 0301 	orr.w	r3, r3, #1
   1ca70:	722b      	strb	r3, [r5, #8]
   1ca72:	e7d4      	b.n	1ca1e <create_chain+0x3e>
            res = put_fat(fs, clst, ncl);   /* Link it from the previous one if needed */
   1ca74:	4622      	mov	r2, r4
   1ca76:	4639      	mov	r1, r7
   1ca78:	4628      	mov	r0, r5
   1ca7a:	f7ff fe99 	bl	1c7b0 <put_fat>
    if (res == FR_OK) {         /* Update FSINFO if function succeeded. */
   1ca7e:	2800      	cmp	r0, #0
   1ca80:	d0ed      	beq.n	1ca5e <create_chain+0x7e>
        ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;    /* Failed. Create error status */
   1ca82:	2801      	cmp	r0, #1
   1ca84:	d0c9      	beq.n	1ca1a <create_chain+0x3a>
   1ca86:	2401      	movs	r4, #1
   1ca88:	e7c9      	b.n	1ca1e <create_chain+0x3e>
        if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
   1ca8a:	3b01      	subs	r3, #1
   1ca8c:	61ab      	str	r3, [r5, #24]
   1ca8e:	e7ec      	b.n	1ca6a <create_chain+0x8a>

0001ca90 <remove_chain>:
{
   1ca90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca92:	460d      	mov	r5, r1
    if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;    /* Check if in valid range */
   1ca94:	2d01      	cmp	r5, #1
{
   1ca96:	4607      	mov	r7, r0
   1ca98:	4611      	mov	r1, r2
    if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;    /* Check if in valid range */
   1ca9a:	d92c      	bls.n	1caf6 <remove_chain+0x66>
    FATFS *fs = obj->fs;
   1ca9c:	6804      	ldr	r4, [r0, #0]
    if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;    /* Check if in valid range */
   1ca9e:	6a23      	ldr	r3, [r4, #32]
   1caa0:	42ab      	cmp	r3, r5
   1caa2:	d928      	bls.n	1caf6 <remove_chain+0x66>
    if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   1caa4:	b12a      	cbz	r2, 1cab2 <remove_chain+0x22>
        res = put_fat(fs, pclst, 0xFFFFFFFF);
   1caa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1caaa:	4620      	mov	r0, r4
   1caac:	f7ff fe80 	bl	1c7b0 <put_fat>
        if (res != FR_OK) return res;
   1cab0:	b930      	cbnz	r0, 1cac0 <remove_chain+0x30>
        nxt = get_fat(obj, clst);           /* Get cluster status */
   1cab2:	4629      	mov	r1, r5
   1cab4:	6838      	ldr	r0, [r7, #0]
   1cab6:	f7ff fef7 	bl	1c8a8 <get_fat.isra.7>
        if (nxt == 0) break;                /* Empty cluster? */
   1caba:	4606      	mov	r6, r0
   1cabc:	b908      	cbnz	r0, 1cac2 <remove_chain+0x32>
    return FR_OK;
   1cabe:	2000      	movs	r0, #0
}
   1cac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (nxt == 1) return FR_INT_ERR;    /* Internal error? */
   1cac2:	2801      	cmp	r0, #1
   1cac4:	d017      	beq.n	1caf6 <remove_chain+0x66>
        if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error? */
   1cac6:	1c43      	adds	r3, r0, #1
   1cac8:	d017      	beq.n	1cafa <remove_chain+0x6a>
            res = put_fat(fs, clst, 0);     /* Mark the cluster 'free' on the FAT */
   1caca:	2200      	movs	r2, #0
   1cacc:	4629      	mov	r1, r5
   1cace:	4620      	mov	r0, r4
   1cad0:	f7ff fe6e 	bl	1c7b0 <put_fat>
            if (res != FR_OK) return res;
   1cad4:	2800      	cmp	r0, #0
   1cad6:	d1f3      	bne.n	1cac0 <remove_chain+0x30>
        if (fs->free_clst < fs->n_fatent - 2) { /* Update FSINFO */
   1cad8:	6a22      	ldr	r2, [r4, #32]
   1cada:	69a3      	ldr	r3, [r4, #24]
   1cadc:	1e91      	subs	r1, r2, #2
   1cade:	428b      	cmp	r3, r1
   1cae0:	d205      	bcs.n	1caee <remove_chain+0x5e>
            fs->free_clst++;
   1cae2:	3301      	adds	r3, #1
   1cae4:	61a3      	str	r3, [r4, #24]
            fs->fsi_flag |= 1;
   1cae6:	7a23      	ldrb	r3, [r4, #8]
   1cae8:	f043 0301 	orr.w	r3, r3, #1
   1caec:	7223      	strb	r3, [r4, #8]
    } while (clst < fs->n_fatent);  /* Repeat while not the last link */
   1caee:	42b2      	cmp	r2, r6
   1caf0:	4635      	mov	r5, r6
   1caf2:	d8de      	bhi.n	1cab2 <remove_chain+0x22>
   1caf4:	e7e3      	b.n	1cabe <remove_chain+0x2e>
    if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;    /* Check if in valid range */
   1caf6:	2002      	movs	r0, #2
   1caf8:	e7e2      	b.n	1cac0 <remove_chain+0x30>
        if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error? */
   1cafa:	2001      	movs	r0, #1
   1cafc:	e7e0      	b.n	1cac0 <remove_chain+0x30>

0001cafe <get_fileinfo>:
{
   1cafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fno->fname[0] = 0;      /* Invaidate file info */
   1cb02:	2500      	movs	r5, #0
    FATFS *fs = dp->obj.fs;
   1cb04:	f8d0 8000 	ldr.w	r8, [r0]
    fno->fname[0] = 0;      /* Invaidate file info */
   1cb08:	758d      	strb	r5, [r1, #22]
    if (!dp->sect) return;  /* Exit if read pointer has reached end of directory */
   1cb0a:	6983      	ldr	r3, [r0, #24]
{
   1cb0c:	4606      	mov	r6, r0
   1cb0e:	460c      	mov	r4, r1
    if (!dp->sect) return;  /* Exit if read pointer has reached end of directory */
   1cb10:	2b00      	cmp	r3, #0
   1cb12:	d057      	beq.n	1cbc4 <get_fileinfo+0xc6>
        if (dp->blk_ofs != 0xFFFFFFFF) {    /* Get LFN if available */
   1cb14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1cb16:	3301      	adds	r3, #1
   1cb18:	d00a      	beq.n	1cb30 <get_fileinfo+0x32>
   1cb1a:	f101 0716 	add.w	r7, r1, #22
            while ((w = fs->lfnbuf[j++]) != 0) {    /* Get an LFN character */
   1cb1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1cb22:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
   1cb26:	2800      	cmp	r0, #0
   1cb28:	d14e      	bne.n	1cbc8 <get_fileinfo+0xca>
            fno->fname[i] = 0;  /* Terminate the LFN */
   1cb2a:	4425      	add	r5, r4
   1cb2c:	2300      	movs	r3, #0
   1cb2e:	75ab      	strb	r3, [r5, #22]
        c = (TCHAR)dp->dir[i++];
   1cb30:	69f1      	ldr	r1, [r6, #28]
    lfv = fno->fname[i];    /* LFN is exist if non-zero */
   1cb32:	7da0      	ldrb	r0, [r4, #22]
   1cb34:	f101 0e0b 	add.w	lr, r1, #11
        c = (TCHAR)dp->dir[i++];
   1cb38:	460d      	mov	r5, r1
    i = j = 0;
   1cb3a:	2300      	movs	r3, #0
            fno->altname[j++] = '.';
   1cb3c:	262e      	movs	r6, #46	; 0x2e
        c = (TCHAR)dp->dir[i++];
   1cb3e:	f815 2b01 	ldrb.w	r2, [r5], #1
        if (c == ' ') continue;             /* Skip padding spaces */
   1cb42:	2a20      	cmp	r2, #32
   1cb44:	d024      	beq.n	1cb90 <get_fileinfo+0x92>
        if (c == RDDEM) c = (TCHAR)DDEM;    /* Restore replaced DDEM character */
   1cb46:	2a05      	cmp	r2, #5
   1cb48:	eba5 0c01 	sub.w	ip, r5, r1
   1cb4c:	bf08      	it	eq
   1cb4e:	22e5      	moveq	r2, #229	; 0xe5
        if (i == 9) {                       /* Insert a . if extension is exist */
   1cb50:	f1bc 0f09 	cmp.w	ip, #9
   1cb54:	d104      	bne.n	1cb60 <get_fileinfo+0x62>
   1cb56:	18e7      	adds	r7, r4, r3
            if (!lfv) fno->fname[j] = '.';
   1cb58:	b900      	cbnz	r0, 1cb5c <get_fileinfo+0x5e>
   1cb5a:	75be      	strb	r6, [r7, #22]
            fno->altname[j++] = '.';
   1cb5c:	727e      	strb	r6, [r7, #9]
   1cb5e:	3301      	adds	r3, #1
        fno->altname[j] = c;
   1cb60:	18e7      	adds	r7, r4, r3
   1cb62:	727a      	strb	r2, [r7, #9]
        if (!lfv) {
   1cb64:	b998      	cbnz	r0, 1cb8e <get_fileinfo+0x90>
            if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
   1cb66:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
   1cb6a:	f1b8 0f19 	cmp.w	r8, #25
   1cb6e:	d80d      	bhi.n	1cb8c <get_fileinfo+0x8e>
   1cb70:	f1bc 0f09 	cmp.w	ip, #9
   1cb74:	f891 800c 	ldrb.w	r8, [r1, #12]
   1cb78:	bf34      	ite	cc
   1cb7a:	f04f 0c08 	movcc.w	ip, #8
   1cb7e:	f04f 0c10 	movcs.w	ip, #16
   1cb82:	ea18 0f0c 	tst.w	r8, ip
                c += 0x20;          /* To lower */
   1cb86:	bf1c      	itt	ne
   1cb88:	3220      	addne	r2, #32
   1cb8a:	b2d2      	uxtbne	r2, r2
            fno->fname[j] = c;
   1cb8c:	75ba      	strb	r2, [r7, #22]
        j++;
   1cb8e:	3301      	adds	r3, #1
    while (i < 11) {        /* Copy name body and extension */
   1cb90:	4575      	cmp	r5, lr
   1cb92:	d1d4      	bne.n	1cb3e <get_fileinfo+0x40>
    if (!lfv) {
   1cb94:	b928      	cbnz	r0, 1cba2 <get_fileinfo+0xa4>
        fno->fname[j] = 0;
   1cb96:	18e2      	adds	r2, r4, r3
   1cb98:	7590      	strb	r0, [r2, #22]
        if (!dp->dir[DIR_NTres]) j = 0; /* Altname is no longer needed if neither LFN nor case info is exist. */
   1cb9a:	7b0a      	ldrb	r2, [r1, #12]
   1cb9c:	2a00      	cmp	r2, #0
   1cb9e:	bf08      	it	eq
   1cba0:	2300      	moveq	r3, #0
    fno->altname[j] = 0;    /* Terminate the SFN */
   1cba2:	4423      	add	r3, r4
   1cba4:	2200      	movs	r2, #0
   1cba6:	725a      	strb	r2, [r3, #9]
    fno->fattrib = dp->dir[DIR_Attr];               /* Attribute */
   1cba8:	7acb      	ldrb	r3, [r1, #11]
   1cbaa:	7223      	strb	r3, [r4, #8]
    fno->fsize = ld_dword(dp->dir + DIR_FileSize);  /* Size */
   1cbac:	f101 001c 	add.w	r0, r1, #28
   1cbb0:	f7ff fbcc 	bl	1c34c <ld_dword>
   1cbb4:	6020      	str	r0, [r4, #0]
    tm = ld_dword(dp->dir + DIR_ModTime);           /* Timestamp */
   1cbb6:	f101 0016 	add.w	r0, r1, #22
   1cbba:	f7ff fbc7 	bl	1c34c <ld_dword>
    fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
   1cbbe:	80e0      	strh	r0, [r4, #6]
   1cbc0:	0c00      	lsrs	r0, r0, #16
   1cbc2:	80a0      	strh	r0, [r4, #4]
}
   1cbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                w = ff_convert(w, 0);       /* Unicode -> OEM */
   1cbc8:	2100      	movs	r1, #0
   1cbca:	f001 fde5 	bl	1e798 <ff_convert>
                if (w == 0) { i = 0; break; }   /* No LFN if it could not be converted */
   1cbce:	b130      	cbz	r0, 1cbde <get_fileinfo+0xe0>
   1cbd0:	3501      	adds	r5, #1
                if (i >= _MAX_LFN) { i = 0; break; }    /* No LFN if buffer overflow */
   1cbd2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   1cbd6:	d002      	beq.n	1cbde <get_fileinfo+0xe0>
                fno->fname[i++] = (TCHAR)w;
   1cbd8:	f807 0b01 	strb.w	r0, [r7], #1
   1cbdc:	e79f      	b.n	1cb1e <get_fileinfo+0x20>
                if (w == 0) { i = 0; break; }   /* No LFN if it could not be converted */
   1cbde:	2500      	movs	r5, #0
   1cbe0:	e7a3      	b.n	1cb2a <get_fileinfo+0x2c>

0001cbe2 <sync_fs>:
{
   1cbe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cbe4:	4604      	mov	r4, r0
    res = sync_window(fs);
   1cbe6:	f7ff fc3b 	bl	1c460 <sync_window>
   1cbea:	4605      	mov	r5, r0
    if (res == FR_OK) {
   1cbec:	2800      	cmp	r0, #0
   1cbee:	d142      	bne.n	1cc76 <sync_fs+0x94>
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
   1cbf0:	7963      	ldrb	r3, [r4, #5]
   1cbf2:	2b03      	cmp	r3, #3
   1cbf4:	d137      	bne.n	1cc66 <sync_fs+0x84>
   1cbf6:	7a27      	ldrb	r7, [r4, #8]
   1cbf8:	2f01      	cmp	r7, #1
   1cbfa:	d134      	bne.n	1cc66 <sync_fs+0x84>
            mem_set(fs->win, 0, SS(fs));
   1cbfc:	f104 063c 	add.w	r6, r4, #60	; 0x3c
   1cc00:	4601      	mov	r1, r0
   1cc02:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cc06:	4630      	mov	r0, r6
   1cc08:	f7fe fe38 	bl	1b87c <memset>
    *ptr++ = (BYTE)val; val >>= 8;
   1cc0c:	2355      	movs	r3, #85	; 0x55
   1cc0e:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
    *ptr++ = (BYTE)val;
   1cc12:	23aa      	movs	r3, #170	; 0xaa
   1cc14:	f884 323b 	strb.w	r3, [r4, #571]	; 0x23b
    *ptr++ = (BYTE)val; val >>= 8;
   1cc18:	2352      	movs	r3, #82	; 0x52
    *ptr++ = (BYTE)val;
   1cc1a:	2241      	movs	r2, #65	; 0x41
    *ptr++ = (BYTE)val; val >>= 8;
   1cc1c:	2172      	movs	r1, #114	; 0x72
   1cc1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    *ptr++ = (BYTE)val; val >>= 8;
   1cc22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    *ptr++ = (BYTE)val; val >>= 8;
   1cc26:	2361      	movs	r3, #97	; 0x61
   1cc28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    *ptr++ = (BYTE)val;
   1cc2c:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
    *ptr++ = (BYTE)val; val >>= 8;
   1cc30:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
    *ptr++ = (BYTE)val;
   1cc34:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
    *ptr++ = (BYTE)val; val >>= 8;
   1cc38:	f884 1220 	strb.w	r1, [r4, #544]	; 0x220
    *ptr++ = (BYTE)val; val >>= 8;
   1cc3c:	f884 1221 	strb.w	r1, [r4, #545]	; 0x221
            st_dword(fs->win + FSI_Free_Count, fs->free_clst);
   1cc40:	f504 7009 	add.w	r0, r4, #548	; 0x224
   1cc44:	69a1      	ldr	r1, [r4, #24]
   1cc46:	f7ff fb89 	bl	1c35c <st_dword>
            st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
   1cc4a:	6961      	ldr	r1, [r4, #20]
   1cc4c:	f504 700a 	add.w	r0, r4, #552	; 0x228
   1cc50:	f7ff fb84 	bl	1c35c <st_dword>
            fs->winsect = fs->volbase + 1;
   1cc54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            disk_write(fs->drv, fs->win, fs->winsect, 1);
   1cc56:	6820      	ldr	r0, [r4, #0]
            fs->winsect = fs->volbase + 1;
   1cc58:	3201      	adds	r2, #1
   1cc5a:	63a2      	str	r2, [r4, #56]	; 0x38
            disk_write(fs->drv, fs->win, fs->winsect, 1);
   1cc5c:	463b      	mov	r3, r7
   1cc5e:	4631      	mov	r1, r6
   1cc60:	f7fb f8fa 	bl	17e58 <disk_write>
            fs->fsi_flag = 0;
   1cc64:	7225      	strb	r5, [r4, #8]
        if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   1cc66:	2200      	movs	r2, #0
   1cc68:	4611      	mov	r1, r2
   1cc6a:	6820      	ldr	r0, [r4, #0]
   1cc6c:	f7fb f92e 	bl	17ecc <disk_ioctl>
   1cc70:	3000      	adds	r0, #0
   1cc72:	bf18      	it	ne
   1cc74:	2001      	movne	r0, #1
}
   1cc76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cc78 <dir_next>:
    if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;  /* Report EOT when offset has reached max value */
   1cc78:	6983      	ldr	r3, [r0, #24]
{
   1cc7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc7e:	4605      	mov	r5, r0
   1cc80:	460f      	mov	r7, r1
    if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;  /* Report EOT when offset has reached max value */
   1cc82:	b1ab      	cbz	r3, 1ccb0 <dir_next+0x38>
    ofs = dp->dptr + SZDIRE;    /* Next entry */
   1cc84:	6902      	ldr	r2, [r0, #16]
   1cc86:	f102 0820 	add.w	r8, r2, #32
    if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;  /* Report EOT when offset has reached max value */
   1cc8a:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
   1cc8e:	d20f      	bcs.n	1ccb0 <dir_next+0x38>
    if (ofs % SS(fs) == 0) {    /* Sector changed? */
   1cc90:	f3c8 0908 	ubfx	r9, r8, #0, #9
    FATFS *fs = dp->obj.fs;
   1cc94:	6804      	ldr	r4, [r0, #0]
    if (ofs % SS(fs) == 0) {    /* Sector changed? */
   1cc96:	f1b9 0f00 	cmp.w	r9, #0
   1cc9a:	d14d      	bne.n	1cd38 <dir_next+0xc0>
        if (!dp->clust) {       /* Static table */
   1cc9c:	6941      	ldr	r1, [r0, #20]
        dp->sect++;             /* Next sector */
   1cc9e:	3301      	adds	r3, #1
   1cca0:	6183      	str	r3, [r0, #24]
        if (!dp->clust) {       /* Static table */
   1cca2:	b939      	cbnz	r1, 1ccb4 <dir_next+0x3c>
            if (ofs / SZDIRE >= fs->n_rootdir) {    /* Report EOT if it reached end of static table */
   1cca4:	89a3      	ldrh	r3, [r4, #12]
   1cca6:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
   1ccaa:	d845      	bhi.n	1cd38 <dir_next+0xc0>
                dp->sect = 0; return FR_NO_FILE;
   1ccac:	2300      	movs	r3, #0
   1ccae:	61ab      	str	r3, [r5, #24]
    if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;  /* Report EOT when offset has reached max value */
   1ccb0:	2004      	movs	r0, #4
   1ccb2:	e00b      	b.n	1cccc <dir_next+0x54>
            if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {        /* Cluster changed? */
   1ccb4:	89e3      	ldrh	r3, [r4, #14]
   1ccb6:	3b01      	subs	r3, #1
   1ccb8:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
   1ccbc:	d13c      	bne.n	1cd38 <dir_next+0xc0>
                clst = get_fat(&dp->obj, dp->clust);            /* Get next cluster */
   1ccbe:	4620      	mov	r0, r4
   1ccc0:	f7ff fdf2 	bl	1c8a8 <get_fat.isra.7>
                if (clst <= 1) return FR_INT_ERR;               /* Internal error */
   1ccc4:	2801      	cmp	r0, #1
                clst = get_fat(&dp->obj, dp->clust);            /* Get next cluster */
   1ccc6:	4606      	mov	r6, r0
                if (clst <= 1) return FR_INT_ERR;               /* Internal error */
   1ccc8:	d802      	bhi.n	1ccd0 <dir_next+0x58>
   1ccca:	2002      	movs	r0, #2
}
   1cccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (clst == 0xFFFFFFFF) return FR_DISK_ERR;     /* Disk error */
   1ccd0:	1c42      	adds	r2, r0, #1
   1ccd2:	d101      	bne.n	1ccd8 <dir_next+0x60>
   1ccd4:	2001      	movs	r0, #1
   1ccd6:	e7f9      	b.n	1cccc <dir_next+0x54>
                if (clst >= fs->n_fatent) {                     /* Reached end of dynamic table */
   1ccd8:	6a23      	ldr	r3, [r4, #32]
   1ccda:	4283      	cmp	r3, r0
   1ccdc:	d826      	bhi.n	1cd2c <dir_next+0xb4>
                    if (!stretch) {                             /* If no stretch, report EOT */
   1ccde:	2f00      	cmp	r7, #0
   1cce0:	d0e4      	beq.n	1ccac <dir_next+0x34>
                    clst = create_chain(&dp->obj, dp->clust);   /* Allocate a cluster */
   1cce2:	6969      	ldr	r1, [r5, #20]
   1cce4:	4628      	mov	r0, r5
   1cce6:	f7ff fe7b 	bl	1c9e0 <create_chain>
                    if (clst == 0) return FR_DENIED;            /* No free cluster */
   1ccea:	4606      	mov	r6, r0
   1ccec:	2800      	cmp	r0, #0
   1ccee:	d036      	beq.n	1cd5e <dir_next+0xe6>
                    if (clst == 1) return FR_INT_ERR;           /* Internal error */
   1ccf0:	2801      	cmp	r0, #1
   1ccf2:	d0ea      	beq.n	1ccca <dir_next+0x52>
                    if (clst == 0xFFFFFFFF) return FR_DISK_ERR; /* Disk error */
   1ccf4:	1c43      	adds	r3, r0, #1
   1ccf6:	d0ed      	beq.n	1ccd4 <dir_next+0x5c>
                    if (sync_window(fs) != FR_OK) return FR_DISK_ERR;   /* Flush disk access window */
   1ccf8:	4620      	mov	r0, r4
   1ccfa:	f7ff fbb1 	bl	1c460 <sync_window>
   1ccfe:	4607      	mov	r7, r0
   1cd00:	2800      	cmp	r0, #0
   1cd02:	d1e7      	bne.n	1ccd4 <dir_next+0x5c>
                    mem_set(fs->win, 0, SS(fs));                /* Clear window buffer */
   1cd04:	4601      	mov	r1, r0
   1cd06:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cd0a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1cd0e:	f7fe fdb5 	bl	1b87c <memset>
                    for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {    /* Fill the new cluster with 0 */
   1cd12:	4631      	mov	r1, r6
   1cd14:	4620      	mov	r0, r4
   1cd16:	f7ff fb29 	bl	1c36c <clust2sect>
                        fs->wflag = 1;
   1cd1a:	f04f 0a01 	mov.w	sl, #1
                    for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {    /* Fill the new cluster with 0 */
   1cd1e:	63a0      	str	r0, [r4, #56]	; 0x38
   1cd20:	89e3      	ldrh	r3, [r4, #14]
   1cd22:	429f      	cmp	r7, r3
   1cd24:	d30f      	bcc.n	1cd46 <dir_next+0xce>
                    fs->winsect -= n;                           /* Restore window offset */
   1cd26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cd28:	1bdf      	subs	r7, r3, r7
   1cd2a:	63a7      	str	r7, [r4, #56]	; 0x38
                dp->clust = clst;       /* Initialize data for new cluster */
   1cd2c:	616e      	str	r6, [r5, #20]
                dp->sect = clust2sect(fs, clst);
   1cd2e:	4631      	mov	r1, r6
   1cd30:	4620      	mov	r0, r4
   1cd32:	f7ff fb1b 	bl	1c36c <clust2sect>
   1cd36:	61a8      	str	r0, [r5, #24]
    dp->dir = fs->win + ofs % SS(fs);   /* Pointer to the entry in the win[] */
   1cd38:	343c      	adds	r4, #60	; 0x3c
   1cd3a:	444c      	add	r4, r9
    dp->dptr = ofs;                     /* Current entry */
   1cd3c:	f8c5 8010 	str.w	r8, [r5, #16]
    dp->dir = fs->win + ofs % SS(fs);   /* Pointer to the entry in the win[] */
   1cd40:	61ec      	str	r4, [r5, #28]
    return FR_OK;
   1cd42:	2000      	movs	r0, #0
   1cd44:	e7c2      	b.n	1cccc <dir_next+0x54>
                        fs->wflag = 1;
   1cd46:	f884 a007 	strb.w	sl, [r4, #7]
   1cd4a:	4620      	mov	r0, r4
   1cd4c:	f7ff fb65 	bl	1c41a <sync_window.part.2>
                        if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
   1cd50:	2800      	cmp	r0, #0
   1cd52:	d1bf      	bne.n	1ccd4 <dir_next+0x5c>
                    for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {    /* Fill the new cluster with 0 */
   1cd54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cd56:	3301      	adds	r3, #1
   1cd58:	3701      	adds	r7, #1
   1cd5a:	63a3      	str	r3, [r4, #56]	; 0x38
   1cd5c:	e7e0      	b.n	1cd20 <dir_next+0xa8>
                    if (clst == 0) return FR_DENIED;            /* No free cluster */
   1cd5e:	2007      	movs	r0, #7
   1cd60:	e7b4      	b.n	1cccc <dir_next+0x54>

0001cd62 <dir_alloc>:
{
   1cd62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd64:	460f      	mov	r7, r1
    res = dir_sdi(dp, 0);
   1cd66:	2100      	movs	r1, #0
{
   1cd68:	4604      	mov	r4, r0
    FATFS *fs = dp->obj.fs;
   1cd6a:	6806      	ldr	r6, [r0, #0]
    res = dir_sdi(dp, 0);
   1cd6c:	f7ff fdf6 	bl	1c95c <dir_sdi>
    if (res == FR_OK) {
   1cd70:	b9a8      	cbnz	r0, 1cd9e <dir_alloc+0x3c>
        n = 0;
   1cd72:	4605      	mov	r5, r0
            res = move_window(fs, dp->sect);
   1cd74:	69a1      	ldr	r1, [r4, #24]
   1cd76:	4630      	mov	r0, r6
   1cd78:	f7ff fb78 	bl	1c46c <move_window>
            if (res != FR_OK) break;
   1cd7c:	b978      	cbnz	r0, 1cd9e <dir_alloc+0x3c>
            if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
   1cd7e:	69e3      	ldr	r3, [r4, #28]
   1cd80:	781b      	ldrb	r3, [r3, #0]
   1cd82:	2be5      	cmp	r3, #229	; 0xe5
   1cd84:	d000      	beq.n	1cd88 <dir_alloc+0x26>
   1cd86:	b91b      	cbnz	r3, 1cd90 <dir_alloc+0x2e>
                if (++n == nent) break; /* A block of contiguous free entries is found */
   1cd88:	3501      	adds	r5, #1
   1cd8a:	42bd      	cmp	r5, r7
   1cd8c:	d101      	bne.n	1cd92 <dir_alloc+0x30>
}
   1cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                n = 0;                  /* Not a blank entry. Restart to search */
   1cd90:	4605      	mov	r5, r0
            res = dir_next(dp, 1);
   1cd92:	2101      	movs	r1, #1
   1cd94:	4620      	mov	r0, r4
   1cd96:	f7ff ff6f 	bl	1cc78 <dir_next>
        } while (res == FR_OK); /* Next entry with table stretch enabled */
   1cd9a:	2800      	cmp	r0, #0
   1cd9c:	d0ea      	beq.n	1cd74 <dir_alloc+0x12>
    if (res == FR_NO_FILE) res = FR_DENIED; /* No directory entry to allocate */
   1cd9e:	2804      	cmp	r0, #4
   1cda0:	bf08      	it	eq
   1cda2:	2007      	moveq	r0, #7
   1cda4:	e7f3      	b.n	1cd8e <dir_alloc+0x2c>
	...

0001cda8 <dir_read>:
{
   1cda8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    BYTE ord = 0xFF, sum = 0xFF;
   1cdac:	25ff      	movs	r5, #255	; 0xff
    FATFS *fs = dp->obj.fs;
   1cdae:	6806      	ldr	r6, [r0, #0]
        uc = ld_word(dir + LfnOfs[s]);      /* Pick an LFN character */
   1cdb0:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1ced0 <dir_read+0x128>
{
   1cdb4:	4682      	mov	sl, r0
   1cdb6:	460f      	mov	r7, r1
    BYTE ord = 0xFF, sum = 0xFF;
   1cdb8:	462c      	mov	r4, r5
    FRESULT res = FR_NO_FILE;
   1cdba:	f04f 0b04 	mov.w	fp, #4
            if (uc != 0xFFFF) return 0;     /* Check filler */
   1cdbe:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (dp->sect) {
   1cdc2:	f8da 1018 	ldr.w	r1, [sl, #24]
   1cdc6:	b919      	cbnz	r1, 1cdd0 <dir_read+0x28>
    if (res != FR_OK) dp->sect = 0;     /* Terminate the read operation on error or EOT */
   1cdc8:	f1bb 0f00 	cmp.w	fp, #0
   1cdcc:	d072      	beq.n	1ceb4 <dir_read+0x10c>
   1cdce:	e061      	b.n	1ce94 <dir_read+0xec>
        res = move_window(fs, dp->sect);
   1cdd0:	4630      	mov	r0, r6
   1cdd2:	f7ff fb4b 	bl	1c46c <move_window>
        if (res != FR_OK) break;
   1cdd6:	4683      	mov	fp, r0
   1cdd8:	2800      	cmp	r0, #0
   1cdda:	d15b      	bne.n	1ce94 <dir_read+0xec>
        c = dp->dir[DIR_Name];  /* Test for the entry type */
   1cddc:	f8da 001c 	ldr.w	r0, [sl, #28]
   1cde0:	7802      	ldrb	r2, [r0, #0]
        if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of the directory */
   1cde2:	2a00      	cmp	r2, #0
   1cde4:	d070      	beq.n	1cec8 <dir_read+0x120>
            dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK; /* Get attribute */
   1cde6:	7ac3      	ldrb	r3, [r0, #11]
            if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {   /* An entry without valid data */
   1cde8:	2ae5      	cmp	r2, #229	; 0xe5
            dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK; /* Get attribute */
   1cdea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1cdee:	f88a 3006 	strb.w	r3, [sl, #6]
            if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {   /* An entry without valid data */
   1cdf2:	d055      	beq.n	1cea0 <dir_read+0xf8>
   1cdf4:	2a2e      	cmp	r2, #46	; 0x2e
   1cdf6:	d053      	beq.n	1cea0 <dir_read+0xf8>
   1cdf8:	f023 0120 	bic.w	r1, r3, #32
   1cdfc:	f1a1 0c08 	sub.w	ip, r1, #8
   1ce00:	f1dc 0100 	rsbs	r1, ip, #0
   1ce04:	eb41 010c 	adc.w	r1, r1, ip
   1ce08:	42b9      	cmp	r1, r7
   1ce0a:	d149      	bne.n	1cea0 <dir_read+0xf8>
                if (a == AM_LFN) {          /* An LFN entry is found */
   1ce0c:	2b0f      	cmp	r3, #15
   1ce0e:	d14c      	bne.n	1ceaa <dir_read+0x102>
                    if (c & LLEF) {         /* Is it start of an LFN sequence? */
   1ce10:	0651      	lsls	r1, r2, #25
   1ce12:	d543      	bpl.n	1ce9c <dir_read+0xf4>
                        dp->blk_ofs = dp->dptr;
   1ce14:	f8da 3010 	ldr.w	r3, [sl, #16]
                        sum = dp->dir[LDIR_Chksum];
   1ce18:	7b45      	ldrb	r5, [r0, #13]
                        dp->blk_ofs = dp->dptr;
   1ce1a:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
                        c &= (BYTE)~LLEF; ord = c;
   1ce1e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
                    ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   1ce22:	7b43      	ldrb	r3, [r0, #13]
   1ce24:	42ab      	cmp	r3, r5
   1ce26:	d13b      	bne.n	1cea0 <dir_read+0xf8>
    rv = rv << 8 | ptr[0];
   1ce28:	7ec1      	ldrb	r1, [r0, #27]
   1ce2a:	7e83      	ldrb	r3, [r0, #26]
   1ce2c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;   /* Check LDIR_FstClusLO */
   1ce30:	b21b      	sxth	r3, r3
   1ce32:	bbab      	cbnz	r3, 1cea0 <dir_read+0xf8>
    i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;  /* Offset in the LFN buffer */
   1ce34:	7801      	ldrb	r1, [r0, #0]
                    ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   1ce36:	f8d6 c010 	ldr.w	ip, [r6, #16]
    i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;  /* Offset in the LFN buffer */
   1ce3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1ce3e:	3901      	subs	r1, #1
   1ce40:	240d      	movs	r4, #13
   1ce42:	4361      	muls	r1, r4
    for (wc = 1, s = 0; s < 13; s++) {      /* Process all characters in the entry */
   1ce44:	f04f 0e01 	mov.w	lr, #1
        uc = ld_word(dir + LfnOfs[s]);      /* Pick an LFN character */
   1ce48:	f813 4008 	ldrb.w	r4, [r3, r8]
   1ce4c:	eb00 0b04 	add.w	fp, r0, r4
    rv = rv << 8 | ptr[0];
   1ce50:	5d04      	ldrb	r4, [r0, r4]
   1ce52:	f89b b001 	ldrb.w	fp, [fp, #1]
   1ce56:	ea44 240b 	orr.w	r4, r4, fp, lsl #8
        if (wc) {
   1ce5a:	f1be 0f00 	cmp.w	lr, #0
   1ce5e:	d021      	beq.n	1cea4 <dir_read+0xfc>
            if (i >= _MAX_LFN) return 0;    /* Buffer overflow? */
   1ce60:	29fe      	cmp	r1, #254	; 0xfe
   1ce62:	d81d      	bhi.n	1cea0 <dir_read+0xf8>
            lfnbuf[i++] = wc = uc;          /* Store it */
   1ce64:	f82c 4011 	strh.w	r4, [ip, r1, lsl #1]
    rv = rv << 8 | ptr[0];
   1ce68:	46a6      	mov	lr, r4
            lfnbuf[i++] = wc = uc;          /* Store it */
   1ce6a:	3101      	adds	r1, #1
    for (wc = 1, s = 0; s < 13; s++) {      /* Process all characters in the entry */
   1ce6c:	3301      	adds	r3, #1
   1ce6e:	2b0d      	cmp	r3, #13
   1ce70:	d1ea      	bne.n	1ce48 <dir_read+0xa0>
    if (dir[LDIR_Ord] & LLEF) {             /* Put terminator if it is the last LFN part */
   1ce72:	7803      	ldrb	r3, [r0, #0]
   1ce74:	065b      	lsls	r3, r3, #25
   1ce76:	d504      	bpl.n	1ce82 <dir_read+0xda>
        if (i >= _MAX_LFN) return 0;        /* Buffer overflow? */
   1ce78:	29fe      	cmp	r1, #254	; 0xfe
   1ce7a:	d811      	bhi.n	1cea0 <dir_read+0xf8>
        lfnbuf[i] = 0;
   1ce7c:	2300      	movs	r3, #0
   1ce7e:	f82c 3011 	strh.w	r3, [ip, r1, lsl #1]
                    ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   1ce82:	1e54      	subs	r4, r2, #1
   1ce84:	b2e4      	uxtb	r4, r4
        res = dir_next(dp, 0);      /* Next entry */
   1ce86:	2100      	movs	r1, #0
   1ce88:	4650      	mov	r0, sl
   1ce8a:	f7ff fef5 	bl	1cc78 <dir_next>
        if (res != FR_OK) break;
   1ce8e:	4683      	mov	fp, r0
   1ce90:	2800      	cmp	r0, #0
   1ce92:	d096      	beq.n	1cdc2 <dir_read+0x1a>
    if (res != FR_OK) dp->sect = 0;     /* Terminate the read operation on error or EOT */
   1ce94:	2300      	movs	r3, #0
   1ce96:	f8ca 3018 	str.w	r3, [sl, #24]
   1ce9a:	e00d      	b.n	1ceb8 <dir_read+0x110>
                    ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   1ce9c:	4294      	cmp	r4, r2
   1ce9e:	d0c0      	beq.n	1ce22 <dir_read+0x7a>
   1cea0:	24ff      	movs	r4, #255	; 0xff
   1cea2:	e7f0      	b.n	1ce86 <dir_read+0xde>
            if (uc != 0xFFFF) return 0;     /* Check filler */
   1cea4:	454c      	cmp	r4, r9
   1cea6:	d0e1      	beq.n	1ce6c <dir_read+0xc4>
   1cea8:	e7fa      	b.n	1cea0 <dir_read+0xf8>
                    if (ord || sum != sum_sfn(dp->dir)) {   /* Is there a valid LFN? */
   1ceaa:	b944      	cbnz	r4, 1cebe <dir_read+0x116>
   1ceac:	f7ff fa69 	bl	1c382 <sum_sfn>
   1ceb0:	42a8      	cmp	r0, r5
   1ceb2:	d104      	bne.n	1cebe <dir_read+0x116>
        res = move_window(fs, dp->sect);
   1ceb4:	f04f 0b00 	mov.w	fp, #0
}
   1ceb8:	4658      	mov	r0, fp
   1ceba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        dp->blk_ofs = 0xFFFFFFFF;           /* It has no LFN. */
   1cebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cec2:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
   1cec6:	e7f7      	b.n	1ceb8 <dir_read+0x110>
        if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of the directory */
   1cec8:	f04f 0b04 	mov.w	fp, #4
   1cecc:	e7e2      	b.n	1ce94 <dir_read+0xec>
   1cece:	bf00      	nop
   1ced0:	0002be8c 	.word	0x0002be8c

0001ced4 <dir_remove>:
    res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);   /* Goto top of the entry block if LFN is exist */
   1ced4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1ced6:	1c4b      	adds	r3, r1, #1
{
   1ced8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cedc:	4604      	mov	r4, r0
    FATFS *fs = dp->obj.fs;
   1cede:	6805      	ldr	r5, [r0, #0]
    DWORD last = dp->dptr;
   1cee0:	6906      	ldr	r6, [r0, #16]
    res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);   /* Goto top of the entry block if LFN is exist */
   1cee2:	d118      	bne.n	1cf16 <dir_remove+0x42>
                dp->dir[DIR_Name] = DDEM;
   1cee4:	27e5      	movs	r7, #229	; 0xe5
            fs->wflag = 1;
   1cee6:	f04f 0801 	mov.w	r8, #1
            res = move_window(fs, dp->sect);
   1ceea:	69a1      	ldr	r1, [r4, #24]
   1ceec:	4628      	mov	r0, r5
   1ceee:	f7ff fabd 	bl	1c46c <move_window>
            if (res != FR_OK) break;
   1cef2:	b960      	cbnz	r0, 1cf0e <dir_remove+0x3a>
                dp->dir[DIR_Name] = DDEM;
   1cef4:	69e3      	ldr	r3, [r4, #28]
   1cef6:	701f      	strb	r7, [r3, #0]
            fs->wflag = 1;
   1cef8:	f885 8007 	strb.w	r8, [r5, #7]
            if (dp->dptr >= last) break;    /* If reached last entry then all entries of the object has been deleted. */
   1cefc:	6923      	ldr	r3, [r4, #16]
   1cefe:	42b3      	cmp	r3, r6
   1cf00:	d20d      	bcs.n	1cf1e <dir_remove+0x4a>
            res = dir_next(dp, 0);  /* Next entry */
   1cf02:	4601      	mov	r1, r0
   1cf04:	4620      	mov	r0, r4
   1cf06:	f7ff feb7 	bl	1cc78 <dir_next>
        } while (res == FR_OK);
   1cf0a:	2800      	cmp	r0, #0
   1cf0c:	d0ed      	beq.n	1ceea <dir_remove+0x16>
        if (res == FR_NO_FILE) res = FR_INT_ERR;
   1cf0e:	2804      	cmp	r0, #4
   1cf10:	bf08      	it	eq
   1cf12:	2002      	moveq	r0, #2
   1cf14:	e003      	b.n	1cf1e <dir_remove+0x4a>
    res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);   /* Goto top of the entry block if LFN is exist */
   1cf16:	f7ff fd21 	bl	1c95c <dir_sdi>
    if (res == FR_OK) {
   1cf1a:	2800      	cmp	r0, #0
   1cf1c:	d0e2      	beq.n	1cee4 <dir_remove+0x10>
}
   1cf1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0001cf24 <dir_find>:
{
   1cf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = dir_sdi(dp, 0);           /* Rewind directory object */
   1cf28:	2100      	movs	r1, #0
{
   1cf2a:	b085      	sub	sp, #20
   1cf2c:	4604      	mov	r4, r0
    FATFS *fs = dp->obj.fs;
   1cf2e:	f8d0 a000 	ldr.w	sl, [r0]
    res = dir_sdi(dp, 0);           /* Rewind directory object */
   1cf32:	f7ff fd13 	bl	1c95c <dir_sdi>
    if (res != FR_OK) return res;
   1cf36:	4680      	mov	r8, r0
   1cf38:	2800      	cmp	r0, #0
   1cf3a:	f040 8093 	bne.w	1d064 <dir_find+0x140>
    ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF; /* Reset LFN sequence */
   1cf3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cf42:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1cf46:	62e3      	str	r3, [r4, #44]	; 0x2c
   1cf48:	464e      	mov	r6, r9
        res = move_window(fs, dp->sect);
   1cf4a:	69a1      	ldr	r1, [r4, #24]
   1cf4c:	4650      	mov	r0, sl
   1cf4e:	f7ff fa8d 	bl	1c46c <move_window>
        if (res != FR_OK) break;
   1cf52:	4680      	mov	r8, r0
   1cf54:	2800      	cmp	r0, #0
   1cf56:	f040 8085 	bne.w	1d064 <dir_find+0x140>
        c = dp->dir[DIR_Name];
   1cf5a:	69e5      	ldr	r5, [r4, #28]
   1cf5c:	782f      	ldrb	r7, [r5, #0]
        if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of table */
   1cf5e:	2f00      	cmp	r7, #0
   1cf60:	f000 8084 	beq.w	1d06c <dir_find+0x148>
        dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   1cf64:	7aea      	ldrb	r2, [r5, #11]
        if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {   /* An entry without valid data */
   1cf66:	2fe5      	cmp	r7, #229	; 0xe5
        dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   1cf68:	f002 033f 	and.w	r3, r2, #63	; 0x3f
   1cf6c:	71a3      	strb	r3, [r4, #6]
        if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {   /* An entry without valid data */
   1cf6e:	d003      	beq.n	1cf78 <dir_find+0x54>
   1cf70:	0712      	lsls	r2, r2, #28
   1cf72:	d505      	bpl.n	1cf80 <dir_find+0x5c>
   1cf74:	2b0f      	cmp	r3, #15
   1cf76:	d005      	beq.n	1cf84 <dir_find+0x60>
                ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;   /* Reset LFN sequence */
   1cf78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cf7c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1cf7e:	e058      	b.n	1d032 <dir_find+0x10e>
            if (a == AM_LFN) {          /* An LFN entry is found */
   1cf80:	2b0f      	cmp	r3, #15
   1cf82:	d15d      	bne.n	1d040 <dir_find+0x11c>
                if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
   1cf84:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1cf88:	0658      	lsls	r0, r3, #25
   1cf8a:	d448      	bmi.n	1d01e <dir_find+0xfa>
                    if (c & LLEF) {     /* Is it start of LFN sequence? */
   1cf8c:	0679      	lsls	r1, r7, #25
   1cf8e:	d54e      	bpl.n	1d02e <dir_find+0x10a>
                        dp->blk_ofs = dp->dptr; /* Start offset of LFN */
   1cf90:	6923      	ldr	r3, [r4, #16]
                        sum = dp->dir[LDIR_Chksum];
   1cf92:	f895 900d 	ldrb.w	r9, [r5, #13]
                        dp->blk_ofs = dp->dptr; /* Start offset of LFN */
   1cf96:	62e3      	str	r3, [r4, #44]	; 0x2c
                        c &= (BYTE)~LLEF; ord = c;  /* LFN start order */
   1cf98:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
                    ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   1cf9c:	7b6b      	ldrb	r3, [r5, #13]
   1cf9e:	454b      	cmp	r3, r9
   1cfa0:	d147      	bne.n	1d032 <dir_find+0x10e>
    rv = rv << 8 | ptr[0];
   1cfa2:	7eeb      	ldrb	r3, [r5, #27]
   1cfa4:	7eae      	ldrb	r6, [r5, #26]
   1cfa6:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;   /* Check LDIR_FstClusLO */
   1cfaa:	b236      	sxth	r6, r6
   1cfac:	2e00      	cmp	r6, #0
   1cfae:	d140      	bne.n	1d032 <dir_find+0x10e>
    i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;  /* Offset in the LFN buffer */
   1cfb0:	f895 8000 	ldrb.w	r8, [r5]
                    ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   1cfb4:	f8da b010 	ldr.w	fp, [sl, #16]
    i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;  /* Offset in the LFN buffer */
   1cfb8:	f008 083f 	and.w	r8, r8, #63	; 0x3f
   1cfbc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1cfc0:	f04f 080d 	mov.w	r8, #13
   1cfc4:	fb08 f803 	mul.w	r8, r8, r3
    for (wc = 1, s = 0; s < 13; s++) {      /* Process all characters in the entry */
   1cfc8:	2101      	movs	r1, #1
        uc = ld_word(dir + LfnOfs[s]);      /* Pick an LFN character */
   1cfca:	4b2a      	ldr	r3, [pc, #168]	; (1d074 <dir_find+0x150>)
   1cfcc:	5cf2      	ldrb	r2, [r6, r3]
   1cfce:	18ab      	adds	r3, r5, r2
    rv = rv << 8 | ptr[0];
   1cfd0:	7858      	ldrb	r0, [r3, #1]
   1cfd2:	5cab      	ldrb	r3, [r5, r2]
   1cfd4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
        if (wc) {
   1cfd8:	b369      	cbz	r1, 1d036 <dir_find+0x112>
            if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) { /* Compare it */
   1cfda:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
   1cfde:	d828      	bhi.n	1d032 <dir_find+0x10e>
   1cfe0:	4618      	mov	r0, r3
   1cfe2:	9303      	str	r3, [sp, #12]
   1cfe4:	f001 fbf4 	bl	1e7d0 <ff_wtoupper>
   1cfe8:	f108 0201 	add.w	r2, r8, #1
   1cfec:	9002      	str	r0, [sp, #8]
   1cfee:	f83b 0018 	ldrh.w	r0, [fp, r8, lsl #1]
   1cff2:	9201      	str	r2, [sp, #4]
   1cff4:	f001 fbec 	bl	1e7d0 <ff_wtoupper>
   1cff8:	9902      	ldr	r1, [sp, #8]
   1cffa:	4281      	cmp	r1, r0
   1cffc:	d119      	bne.n	1d032 <dir_find+0x10e>
    rv = rv << 8 | ptr[0];
   1cffe:	9b03      	ldr	r3, [sp, #12]
            if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) { /* Compare it */
   1d000:	9a01      	ldr	r2, [sp, #4]
    rv = rv << 8 | ptr[0];
   1d002:	4619      	mov	r1, r3
            if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) { /* Compare it */
   1d004:	4690      	mov	r8, r2
    for (wc = 1, s = 0; s < 13; s++) {      /* Process all characters in the entry */
   1d006:	3601      	adds	r6, #1
   1d008:	2e0d      	cmp	r6, #13
   1d00a:	d1de      	bne.n	1cfca <dir_find+0xa6>
    if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;    /* Last segment matched but different length */
   1d00c:	782b      	ldrb	r3, [r5, #0]
   1d00e:	065a      	lsls	r2, r3, #25
   1d010:	d503      	bpl.n	1d01a <dir_find+0xf6>
   1d012:	b111      	cbz	r1, 1d01a <dir_find+0xf6>
   1d014:	f83b 3018 	ldrh.w	r3, [fp, r8, lsl #1]
   1d018:	b95b      	cbnz	r3, 1d032 <dir_find+0x10e>
                    ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   1d01a:	3f01      	subs	r7, #1
   1d01c:	b2fe      	uxtb	r6, r7
        res = dir_next(dp, 0);  /* Next entry */
   1d01e:	2100      	movs	r1, #0
   1d020:	4620      	mov	r0, r4
   1d022:	f7ff fe29 	bl	1cc78 <dir_next>
    } while (res == FR_OK);
   1d026:	4680      	mov	r8, r0
   1d028:	2800      	cmp	r0, #0
   1d02a:	d08e      	beq.n	1cf4a <dir_find+0x26>
   1d02c:	e01a      	b.n	1d064 <dir_find+0x140>
                    ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   1d02e:	42be      	cmp	r6, r7
   1d030:	d0b4      	beq.n	1cf9c <dir_find+0x78>
   1d032:	26ff      	movs	r6, #255	; 0xff
   1d034:	e7f3      	b.n	1d01e <dir_find+0xfa>
            if (uc != 0xFFFF) return 0;     /* Check filler */
   1d036:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d03a:	4293      	cmp	r3, r2
   1d03c:	d0e3      	beq.n	1d006 <dir_find+0xe2>
   1d03e:	e7f8      	b.n	1d032 <dir_find+0x10e>
                if (!ord && sum == sum_sfn(dp->dir)) break; /* LFN matched? */
   1d040:	b926      	cbnz	r6, 1d04c <dir_find+0x128>
   1d042:	4628      	mov	r0, r5
   1d044:	f7ff f99d 	bl	1c382 <sum_sfn>
   1d048:	4548      	cmp	r0, r9
   1d04a:	d00b      	beq.n	1d064 <dir_find+0x140>
                if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;    /* SFN matched? */
   1d04c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1d050:	07db      	lsls	r3, r3, #31
   1d052:	d491      	bmi.n	1cf78 <dir_find+0x54>
   1d054:	220b      	movs	r2, #11
   1d056:	f104 0120 	add.w	r1, r4, #32
   1d05a:	4628      	mov	r0, r5
   1d05c:	f7fe fc40 	bl	1b8e0 <memcmp>
   1d060:	2800      	cmp	r0, #0
   1d062:	d189      	bne.n	1cf78 <dir_find+0x54>
}
   1d064:	4640      	mov	r0, r8
   1d066:	b005      	add	sp, #20
   1d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of table */
   1d06c:	f04f 0804 	mov.w	r8, #4
   1d070:	e7f8      	b.n	1d064 <dir_find+0x140>
   1d072:	bf00      	nop
   1d074:	0002be8c 	.word	0x0002be8c

0001d078 <dir_register>:
{
   1d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;  /* Check name validity */
   1d07c:	f890 b02b 	ldrb.w	fp, [r0, #43]	; 0x2b
   1d080:	f01b 04a0 	ands.w	r4, fp, #160	; 0xa0
{
   1d084:	b089      	sub	sp, #36	; 0x24
   1d086:	4605      	mov	r5, r0
    if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;  /* Check name validity */
   1d088:	f040 8082 	bne.w	1d190 <dir_register+0x118>
    FATFS *fs = dp->obj.fs;
   1d08c:	6807      	ldr	r7, [r0, #0]
    for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;  /* Get lfn length */
   1d08e:	693a      	ldr	r2, [r7, #16]
   1d090:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   1d094:	2b00      	cmp	r3, #0
   1d096:	d163      	bne.n	1d160 <dir_register+0xe8>
    mem_cpy(sn, dp->fn, 12);
   1d098:	f105 0620 	add.w	r6, r5, #32
   1d09c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1d0a0:	f10d 0914 	add.w	r9, sp, #20
    if (sn[NSFLAG] & NS_LOSS) {         /* When LFN is out of 8.3 format, generate a numbered name */
   1d0a4:	f01b 0f01 	tst.w	fp, #1
    mem_cpy(sn, dp->fn, 12);
   1d0a8:	e889 0007 	stmia.w	r9, {r0, r1, r2}
    if (sn[NSFLAG] & NS_LOSS) {         /* When LFN is out of 8.3 format, generate a numbered name */
   1d0ac:	d077      	beq.n	1d19e <dir_register+0x126>
        dp->fn[NSFLAG] = NS_NOLFN;      /* Find only SFN */
   1d0ae:	2340      	movs	r3, #64	; 0x40
   1d0b0:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
        for (n = 1; n < 100; n++) {
   1d0b4:	f04f 0801 	mov.w	r8, #1
    mem_cpy(dst, src, 11);
   1d0b8:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
   1d0bc:	46b4      	mov	ip, r6
            gen_numname(dp->fn, sn, fs->lfnbuf, n); /* Generate a numbered name */
   1d0be:	693b      	ldr	r3, [r7, #16]
    mem_cpy(dst, src, 11);
   1d0c0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1d0c4:	f82c 2b02 	strh.w	r2, [ip], #2
    if (seq > 5) {  /* In case of many collisions, generate a hash number instead of sequential number */
   1d0c8:	f1b8 0f05 	cmp.w	r8, #5
    mem_cpy(dst, src, 11);
   1d0cc:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1d0d0:	f88c 2000 	strb.w	r2, [ip]
    if (seq > 5) {  /* In case of many collisions, generate a hash number instead of sequential number */
   1d0d4:	d958      	bls.n	1d188 <dir_register+0x110>
   1d0d6:	1e98      	subs	r0, r3, #2
   1d0d8:	4642      	mov	r2, r8
        while (*lfn) {  /* Create a CRC */
   1d0da:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   1d0de:	2900      	cmp	r1, #0
   1d0e0:	d140      	bne.n	1d164 <dir_register+0xec>
    if (seq > 5) {  /* In case of many collisions, generate a hash number instead of sequential number */
   1d0e2:	2107      	movs	r1, #7
        c = (BYTE)((seq % 16) + '0');
   1d0e4:	f002 0c0f 	and.w	ip, r2, #15
   1d0e8:	f10c 0030 	add.w	r0, ip, #48	; 0x30
        if (c > '9') c += 7;
   1d0ec:	2839      	cmp	r0, #57	; 0x39
        ns[i--] = c;
   1d0ee:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   1d0f2:	ab03      	add	r3, sp, #12
        if (c > '9') c += 7;
   1d0f4:	bf88      	it	hi
   1d0f6:	f10c 0037 	addhi.w	r0, ip, #55	; 0x37
        ns[i--] = c;
   1d0fa:	eb03 0c01 	add.w	ip, r3, r1
    } while (seq);
   1d0fe:	0912      	lsrs	r2, r2, #4
        ns[i--] = c;
   1d100:	f88c 0001 	strb.w	r0, [ip, #1]
    } while (seq);
   1d104:	d1ee      	bne.n	1d0e4 <dir_register+0x6c>
    ns[i] = '~';
   1d106:	ab08      	add	r3, sp, #32
   1d108:	1858      	adds	r0, r3, r1
   1d10a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   1d10e:	f800 cc14 	strb.w	ip, [r0, #-20]
    for (j = 0; j < i && dst[j] != ' '; j++) {
   1d112:	428a      	cmp	r2, r1
   1d114:	d004      	beq.n	1d120 <dir_register+0xa8>
   1d116:	5cb0      	ldrb	r0, [r6, r2]
   1d118:	2820      	cmp	r0, #32
   1d11a:	f102 0c01 	add.w	ip, r2, #1
   1d11e:	d135      	bne.n	1d18c <dir_register+0x114>
   1d120:	4432      	add	r2, r6
        dst[j++] = (i < 8) ? ns[i++] : ' ';
   1d122:	2907      	cmp	r1, #7
   1d124:	bf9b      	ittet	ls
   1d126:	ab08      	addls	r3, sp, #32
   1d128:	1858      	addls	r0, r3, r1
   1d12a:	2020      	movhi	r0, #32
   1d12c:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
   1d130:	f802 0b01 	strb.w	r0, [r2], #1
    } while (j < 8);
   1d134:	eba2 0006 	sub.w	r0, r2, r6
        dst[j++] = (i < 8) ? ns[i++] : ' ';
   1d138:	bf98      	it	ls
   1d13a:	3101      	addls	r1, #1
    } while (j < 8);
   1d13c:	2807      	cmp	r0, #7
   1d13e:	d9f0      	bls.n	1d122 <dir_register+0xaa>
            res = dir_find(dp);             /* Check if the name collides with existing SFN */
   1d140:	4628      	mov	r0, r5
   1d142:	f7ff feef 	bl	1cf24 <dir_find>
            if (res != FR_OK) break;
   1d146:	4682      	mov	sl, r0
   1d148:	bb28      	cbnz	r0, 1d196 <dir_register+0x11e>
        for (n = 1; n < 100; n++) {
   1d14a:	f108 0801 	add.w	r8, r8, #1
   1d14e:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
   1d152:	d1b1      	bne.n	1d0b8 <dir_register+0x40>
        if (n == 100) return FR_DENIED;     /* Abort if too many collisions */
   1d154:	f04f 0a07 	mov.w	sl, #7
}
   1d158:	4650      	mov	r0, sl
   1d15a:	b009      	add	sp, #36	; 0x24
   1d15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;  /* Get lfn length */
   1d160:	3401      	adds	r4, #1
   1d162:	e795      	b.n	1d090 <dir_register+0x18>
        while (*lfn) {  /* Create a CRC */
   1d164:	f04f 0c10 	mov.w	ip, #16
                sr = (sr << 1) + (wc & 1);
   1d168:	f001 0e01 	and.w	lr, r1, #1
   1d16c:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
                if (sr & 0x10000) sr ^= 0x11021;
   1d170:	03d3      	lsls	r3, r2, #15
   1d172:	bf44      	itt	mi
   1d174:	f482 3288 	eormi.w	r2, r2, #69632	; 0x11000
   1d178:	f082 0221 	eormi.w	r2, r2, #33	; 0x21
            for (i = 0; i < 16; i++) {
   1d17c:	f1bc 0c01 	subs.w	ip, ip, #1
                wc >>= 1;
   1d180:	ea4f 0151 	mov.w	r1, r1, lsr #1
            for (i = 0; i < 16; i++) {
   1d184:	d1f0      	bne.n	1d168 <dir_register+0xf0>
   1d186:	e7a8      	b.n	1d0da <dir_register+0x62>
    if (seq > 5) {  /* In case of many collisions, generate a hash number instead of sequential number */
   1d188:	4642      	mov	r2, r8
   1d18a:	e7aa      	b.n	1d0e2 <dir_register+0x6a>
    for (j = 0; j < i && dst[j] != ' '; j++) {
   1d18c:	4662      	mov	r2, ip
   1d18e:	e7c0      	b.n	1d112 <dir_register+0x9a>
    if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;  /* Check name validity */
   1d190:	f04f 0a06 	mov.w	sl, #6
   1d194:	e7e0      	b.n	1d158 <dir_register+0xe0>
        if (res != FR_NO_FILE) return res;  /* Abort if the result is other than 'not collided' */
   1d196:	2804      	cmp	r0, #4
   1d198:	d1de      	bne.n	1d158 <dir_register+0xe0>
        dp->fn[NSFLAG] = sn[NSFLAG];
   1d19a:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;    /* Number of entries to allocate */
   1d19e:	f01b 0f02 	tst.w	fp, #2
   1d1a2:	bf1b      	ittet	ne
   1d1a4:	340c      	addne	r4, #12
   1d1a6:	230d      	movne	r3, #13
   1d1a8:	2401      	moveq	r4, #1
   1d1aa:	fbb4 f4f3 	udivne	r4, r4, r3
   1d1ae:	bf18      	it	ne
   1d1b0:	3401      	addne	r4, #1
    res = dir_alloc(dp, nent);      /* Allocate entries */
   1d1b2:	4621      	mov	r1, r4
   1d1b4:	4628      	mov	r0, r5
   1d1b6:	f7ff fdd4 	bl	1cd62 <dir_alloc>
    if (res == FR_OK && --nent) {   /* Set LFN entry if needed */
   1d1ba:	4682      	mov	sl, r0
   1d1bc:	2800      	cmp	r0, #0
   1d1be:	d1cb      	bne.n	1d158 <dir_register+0xe0>
   1d1c0:	3c01      	subs	r4, #1
   1d1c2:	d056      	beq.n	1d272 <dir_register+0x1fa>
        res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
   1d1c4:	6929      	ldr	r1, [r5, #16]
   1d1c6:	4628      	mov	r0, r5
   1d1c8:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
   1d1cc:	f7ff fbc6 	bl	1c95c <dir_sdi>
        if (res == FR_OK) {
   1d1d0:	4682      	mov	sl, r0
   1d1d2:	2800      	cmp	r0, #0
   1d1d4:	d1c0      	bne.n	1d158 <dir_register+0xe0>
            sum = sum_sfn(dp->fn);  /* Checksum value of the SFN tied to the LFN */
   1d1d6:	4630      	mov	r0, r6
   1d1d8:	f7ff f8d3 	bl	1c382 <sum_sfn>
        if (wc != 0xFFFF) wc = lfn[i++];    /* Get an effective character */
   1d1dc:	f64f 79ff 	movw	r9, #65535	; 0xffff
            sum = sum_sfn(dp->fn);  /* Checksum value of the SFN tied to the LFN */
   1d1e0:	4680      	mov	r8, r0
                res = move_window(fs, dp->sect);
   1d1e2:	69a9      	ldr	r1, [r5, #24]
   1d1e4:	4638      	mov	r0, r7
   1d1e6:	f7ff f941 	bl	1c46c <move_window>
   1d1ea:	4682      	mov	sl, r0
                if (res != FR_OK) break;
   1d1ec:	2800      	cmp	r0, #0
   1d1ee:	d1b3      	bne.n	1d158 <dir_register+0xe0>
                put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
   1d1f0:	69eb      	ldr	r3, [r5, #28]
   1d1f2:	f8d7 e010 	ldr.w	lr, [r7, #16]
    dir[LDIR_Chksum] = sum;         /* Set checksum */
   1d1f6:	f883 800d 	strb.w	r8, [r3, #13]
    dir[LDIR_Attr] = AM_LFN;        /* Set attribute. LFN entry */
   1d1fa:	220f      	movs	r2, #15
                put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
   1d1fc:	b2e1      	uxtb	r1, r4
    i = (ord - 1) * 13;             /* Get offset in the LFN working buffer */
   1d1fe:	f04f 0c0d 	mov.w	ip, #13
    dir[LDIR_Attr] = AM_LFN;        /* Set attribute. LFN entry */
   1d202:	72da      	strb	r2, [r3, #11]
    i = (ord - 1) * 13;             /* Get offset in the LFN working buffer */
   1d204:	1e4a      	subs	r2, r1, #1
   1d206:	fb0c f202 	mul.w	r2, ip, r2
    dir[LDIR_Type] = 0;
   1d20a:	7318      	strb	r0, [r3, #12]
    *ptr++ = (BYTE)val; val >>= 8;
   1d20c:	7698      	strb	r0, [r3, #26]
    *ptr++ = (BYTE)val;
   1d20e:	76d8      	strb	r0, [r3, #27]
    i = (ord - 1) * 13;             /* Get offset in the LFN working buffer */
   1d210:	9201      	str	r2, [sp, #4]
    s = wc = 0;
   1d212:	4684      	mov	ip, r0
        if (wc != 0xFFFF) wc = lfn[i++];    /* Get an effective character */
   1d214:	4548      	cmp	r0, r9
   1d216:	bf1f      	itttt	ne
   1d218:	9a01      	ldrne	r2, [sp, #4]
   1d21a:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
   1d21e:	3201      	addne	r2, #1
   1d220:	9201      	strne	r2, [sp, #4]
        st_word(dir + LfnOfs[s], wc);       /* Put it */
   1d222:	4a23      	ldr	r2, [pc, #140]	; (1d2b0 <dir_register+0x238>)
   1d224:	f81c a002 	ldrb.w	sl, [ip, r2]
    } while (++s < 13);
   1d228:	f10c 0c01 	add.w	ip, ip, #1
        st_word(dir + LfnOfs[s], wc);       /* Put it */
   1d22c:	eb03 0b0a 	add.w	fp, r3, sl
    *ptr++ = (BYTE)val; val >>= 8;
   1d230:	f803 000a 	strb.w	r0, [r3, sl]
   1d234:	ea4f 2a10 	mov.w	sl, r0, lsr #8
        if (wc == 0) wc = 0xFFFF;       /* Padding characters for left locations */
   1d238:	2800      	cmp	r0, #0
   1d23a:	bf08      	it	eq
   1d23c:	4648      	moveq	r0, r9
    } while (++s < 13);
   1d23e:	f1bc 0f0d 	cmp.w	ip, #13
    *ptr++ = (BYTE)val;
   1d242:	f88b a001 	strb.w	sl, [fp, #1]
    } while (++s < 13);
   1d246:	d1e5      	bne.n	1d214 <dir_register+0x19c>
    if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;   /* Last LFN part is the start of LFN sequence */
   1d248:	4548      	cmp	r0, r9
   1d24a:	d003      	beq.n	1d254 <dir_register+0x1dc>
   1d24c:	9a01      	ldr	r2, [sp, #4]
   1d24e:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
   1d252:	b90a      	cbnz	r2, 1d258 <dir_register+0x1e0>
   1d254:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    dir[LDIR_Ord] = ord;            /* Set the LFN order */
   1d258:	7019      	strb	r1, [r3, #0]
                fs->wflag = 1;
   1d25a:	2301      	movs	r3, #1
   1d25c:	71fb      	strb	r3, [r7, #7]
                res = dir_next(dp, 0);  /* Next entry */
   1d25e:	2100      	movs	r1, #0
   1d260:	4628      	mov	r0, r5
   1d262:	f7ff fd09 	bl	1cc78 <dir_next>
            } while (res == FR_OK && --nent);
   1d266:	4682      	mov	sl, r0
   1d268:	2800      	cmp	r0, #0
   1d26a:	f47f af75 	bne.w	1d158 <dir_register+0xe0>
   1d26e:	3c01      	subs	r4, #1
   1d270:	d1b7      	bne.n	1d1e2 <dir_register+0x16a>
        res = move_window(fs, dp->sect);
   1d272:	69a9      	ldr	r1, [r5, #24]
   1d274:	4638      	mov	r0, r7
   1d276:	f7ff f8f9 	bl	1c46c <move_window>
        if (res == FR_OK) {
   1d27a:	4682      	mov	sl, r0
   1d27c:	2800      	cmp	r0, #0
   1d27e:	f47f af6b 	bne.w	1d158 <dir_register+0xe0>
            mem_set(dp->dir, 0, SZDIRE);    /* Clean the entry */
   1d282:	4601      	mov	r1, r0
   1d284:	2220      	movs	r2, #32
   1d286:	69e8      	ldr	r0, [r5, #28]
   1d288:	f7fe faf8 	bl	1b87c <memset>
            mem_cpy(dp->dir + DIR_Name, dp->fn, 11);    /* Put SFN */
   1d28c:	ce03      	ldmia	r6!, {r0, r1}
   1d28e:	69eb      	ldr	r3, [r5, #28]
   1d290:	6018      	str	r0, [r3, #0]
   1d292:	6059      	str	r1, [r3, #4]
   1d294:	78b2      	ldrb	r2, [r6, #2]
   1d296:	8831      	ldrh	r1, [r6, #0]
   1d298:	8119      	strh	r1, [r3, #8]
   1d29a:	729a      	strb	r2, [r3, #10]
            dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);   /* Put NT flag */
   1d29c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1d2a0:	69ea      	ldr	r2, [r5, #28]
   1d2a2:	f003 0318 	and.w	r3, r3, #24
   1d2a6:	7313      	strb	r3, [r2, #12]
            fs->wflag = 1;
   1d2a8:	2301      	movs	r3, #1
   1d2aa:	71fb      	strb	r3, [r7, #7]
   1d2ac:	e754      	b.n	1d158 <dir_register+0xe0>
   1d2ae:	bf00      	nop
   1d2b0:	0002be8c 	.word	0x0002be8c

0001d2b4 <follow_path>:
{
   1d2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (*path != '/' && *path != '\\') {    /* Without heading separator */
   1d2b8:	780b      	ldrb	r3, [r1, #0]
    FATFS *fs = obj->fs;
   1d2ba:	f8d0 b000 	ldr.w	fp, [r0]
    if (*path != '/' && *path != '\\') {    /* Without heading separator */
   1d2be:	2b2f      	cmp	r3, #47	; 0x2f
{
   1d2c0:	4606      	mov	r6, r0
   1d2c2:	4688      	mov	r8, r1
    if (*path != '/' && *path != '\\') {    /* Without heading separator */
   1d2c4:	d001      	beq.n	1d2ca <follow_path+0x16>
   1d2c6:	2b5c      	cmp	r3, #92	; 0x5c
   1d2c8:	d10a      	bne.n	1d2e0 <follow_path+0x2c>
   1d2ca:	4642      	mov	r2, r8
        while (*path == '/' || *path == '\\') path++;   /* Strip heading separator */
   1d2cc:	7813      	ldrb	r3, [r2, #0]
   1d2ce:	2b2f      	cmp	r3, #47	; 0x2f
   1d2d0:	4690      	mov	r8, r2
   1d2d2:	f102 0201 	add.w	r2, r2, #1
   1d2d6:	d0f9      	beq.n	1d2cc <follow_path+0x18>
   1d2d8:	2b5c      	cmp	r3, #92	; 0x5c
   1d2da:	d0f7      	beq.n	1d2cc <follow_path+0x18>
        obj->sclust = 0;                    /* Start from the root directory */
   1d2dc:	2300      	movs	r3, #0
   1d2de:	e001      	b.n	1d2e4 <follow_path+0x30>
        obj->sclust = fs->cdir;             /* Start from the current directory */
   1d2e0:	f8db 301c 	ldr.w	r3, [fp, #28]
        obj->sclust = 0;                    /* Start from the root directory */
   1d2e4:	60b3      	str	r3, [r6, #8]
    if ((UINT)*path < ' ') {                /* Null path name is the origin directory itself */
   1d2e6:	f898 3000 	ldrb.w	r3, [r8]
   1d2ea:	2b1f      	cmp	r3, #31
   1d2ec:	f200 80d8 	bhi.w	1d4a0 <follow_path+0x1ec>
        dp->fn[NSFLAG] = NS_NONAME;
   1d2f0:	2380      	movs	r3, #128	; 0x80
        res = dir_sdi(dp, 0);
   1d2f2:	2100      	movs	r1, #0
   1d2f4:	4630      	mov	r0, r6
        dp->fn[NSFLAG] = NS_NONAME;
   1d2f6:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
}
   1d2fa:	b003      	add	sp, #12
   1d2fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        res = dir_sdi(dp, 0);
   1d300:	f7ff bb2c 	b.w	1c95c <dir_sdi>
        if (di >= _MAX_LFN) return FR_INVALID_NAME; /* Reject too long name */
   1d304:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1d308:	d00b      	beq.n	1d322 <follow_path+0x6e>
        w = ff_convert(w, 1);           /* Convert ANSI/OEM to Unicode */
   1d30a:	2101      	movs	r1, #1
   1d30c:	f001 fa44 	bl	1e798 <ff_convert>
        if (!w) return FR_INVALID_NAME; /* Reject invalid code */
   1d310:	b138      	cbz	r0, 1d322 <follow_path+0x6e>
        if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;    /* Reject illegal characters for LFN */
   1d312:	287f      	cmp	r0, #127	; 0x7f
   1d314:	d807      	bhi.n	1d326 <follow_path+0x72>
   1d316:	4a93      	ldr	r2, [pc, #588]	; (1d564 <follow_path+0x2b0>)
    while (*str && *str != chr) str++;
   1d318:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1d31c:	b11b      	cbz	r3, 1d326 <follow_path+0x72>
   1d31e:	4283      	cmp	r3, r0
   1d320:	d1fa      	bne.n	1d318 <follow_path+0x64>
                        res = FR_OK;
   1d322:	2006      	movs	r0, #6
   1d324:	e10b      	b.n	1d53e <follow_path+0x28a>
        lfn[di++] = w;                  /* Store the Unicode character */
   1d326:	f827 0f02 	strh.w	r0, [r7, #2]!
   1d32a:	4625      	mov	r5, r4
   1d32c:	e0c0      	b.n	1d4b0 <follow_path+0x1fc>
    if ((di == 1 && lfn[di - 1] == '.') ||
   1d32e:	2d02      	cmp	r5, #2
   1d330:	d104      	bne.n	1d33c <follow_path+0x88>
        (di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {    /* Is this segment a dot name? */
   1d332:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1d336:	2b2e      	cmp	r3, #46	; 0x2e
   1d338:	f000 80d7 	beq.w	1d4ea <follow_path+0x236>
   1d33c:	eb09 0345 	add.w	r3, r9, r5, lsl #1
    while (di) {                        /* Snip off trailing spaces and dots if exist */
   1d340:	bb6d      	cbnz	r5, 1d39e <follow_path+0xea>
    lfn[di] = 0;                        /* LFN is created */
   1d342:	2100      	movs	r1, #0
   1d344:	eb09 0345 	add.w	r3, r9, r5, lsl #1
   1d348:	f829 1015 	strh.w	r1, [r9, r5, lsl #1]
    if (di == 0) return FR_INVALID_NAME;    /* Reject nul name */
   1d34c:	2d00      	cmp	r5, #0
   1d34e:	d0e8      	beq.n	1d322 <follow_path+0x6e>
    mem_set(dp->fn, ' ', 11);
   1d350:	f04f 3020 	mov.w	r0, #538976288	; 0x20202020
   1d354:	6270      	str	r0, [r6, #36]	; 0x24
   1d356:	6230      	str	r0, [r6, #32]
   1d358:	f8c6 0027 	str.w	r0, [r6, #39]	; 0x27
    for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;  /* Strip leading spaces and dots */
   1d35c:	f839 2011 	ldrh.w	r2, [r9, r1, lsl #1]
   1d360:	2a20      	cmp	r2, #32
   1d362:	d024      	beq.n	1d3ae <follow_path+0xfa>
   1d364:	2a2e      	cmp	r2, #46	; 0x2e
   1d366:	d022      	beq.n	1d3ae <follow_path+0xfa>
    if (si) cf |= NS_LOSS | NS_LFN;
   1d368:	b109      	cbz	r1, 1d36e <follow_path+0xba>
   1d36a:	f044 0403 	orr.w	r4, r4, #3
    while (di && lfn[di - 1] != '.') di--;  /* Find extension (di<=si: no extension) */
   1d36e:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
   1d372:	2a2e      	cmp	r2, #46	; 0x2e
   1d374:	d001      	beq.n	1d37a <follow_path+0xc6>
   1d376:	3d01      	subs	r5, #1
   1d378:	d1f9      	bne.n	1d36e <follow_path+0xba>
        dp->fn[i++] = (BYTE)w;
   1d37a:	2300      	movs	r3, #0
   1d37c:	f04f 0a08 	mov.w	sl, #8
   1d380:	461f      	mov	r7, r3
        w = lfn[si++];                  /* Get an LFN character */
   1d382:	f839 0011 	ldrh.w	r0, [r9, r1, lsl #1]
   1d386:	1c4a      	adds	r2, r1, #1
        if (!w) break;                  /* Break on end of the LFN */
   1d388:	b310      	cbz	r0, 1d3d0 <follow_path+0x11c>
        if (w == ' ' || (w == '.' && si != di)) {   /* Remove spaces and dots */
   1d38a:	2820      	cmp	r0, #32
   1d38c:	d003      	beq.n	1d396 <follow_path+0xe2>
   1d38e:	282e      	cmp	r0, #46	; 0x2e
   1d390:	d10f      	bne.n	1d3b2 <follow_path+0xfe>
   1d392:	42aa      	cmp	r2, r5
   1d394:	d011      	beq.n	1d3ba <follow_path+0x106>
            cf |= NS_LOSS | NS_LFN; continue;
   1d396:	f044 0403 	orr.w	r4, r4, #3
        dp->fn[i++] = (BYTE)w;
   1d39a:	4611      	mov	r1, r2
   1d39c:	e7f1      	b.n	1d382 <follow_path+0xce>
        w = lfn[di - 1];
   1d39e:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
        if (w != ' ' && w != '.') break;
   1d3a2:	2a20      	cmp	r2, #32
   1d3a4:	d001      	beq.n	1d3aa <follow_path+0xf6>
   1d3a6:	2a2e      	cmp	r2, #46	; 0x2e
   1d3a8:	d1cb      	bne.n	1d342 <follow_path+0x8e>
        di--;
   1d3aa:	3d01      	subs	r5, #1
   1d3ac:	e7c8      	b.n	1d340 <follow_path+0x8c>
    for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;  /* Strip leading spaces and dots */
   1d3ae:	3101      	adds	r1, #1
   1d3b0:	e7d4      	b.n	1d35c <follow_path+0xa8>
        if (i >= ni || si == di) {      /* Extension or end of SFN */
   1d3b2:	4553      	cmp	r3, sl
   1d3b4:	d205      	bcs.n	1d3c2 <follow_path+0x10e>
   1d3b6:	42aa      	cmp	r2, r5
   1d3b8:	d13a      	bne.n	1d430 <follow_path+0x17c>
            if (ni == 11) {             /* Long extension */
   1d3ba:	f1ba 0f0b 	cmp.w	sl, #11
   1d3be:	d130      	bne.n	1d422 <follow_path+0x16e>
   1d3c0:	e002      	b.n	1d3c8 <follow_path+0x114>
   1d3c2:	f1ba 0f0b 	cmp.w	sl, #11
   1d3c6:	d127      	bne.n	1d418 <follow_path+0x164>
                cf |= NS_LOSS | NS_LFN; break;
   1d3c8:	f044 0403 	orr.w	r4, r4, #3
   1d3cc:	f04f 0a0b 	mov.w	sl, #11
    if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;   /* If the first character collides with DDEM, replace it with RDDEM */
   1d3d0:	f896 3020 	ldrb.w	r3, [r6, #32]
   1d3d4:	2be5      	cmp	r3, #229	; 0xe5
   1d3d6:	bf04      	itt	eq
   1d3d8:	2305      	moveq	r3, #5
   1d3da:	f886 3020 	strbeq.w	r3, [r6, #32]
    if (ni == 8) b <<= 2;
   1d3de:	f1ba 0f08 	cmp.w	sl, #8
   1d3e2:	bf04      	itt	eq
   1d3e4:	00bf      	lsleq	r7, r7, #2
   1d3e6:	b2ff      	uxtbeq	r7, r7
   1d3e8:	f007 030c 	and.w	r3, r7, #12
    if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN; /* Create LFN entry when there are composite capitals */
   1d3ec:	2b0c      	cmp	r3, #12
   1d3ee:	d003      	beq.n	1d3f8 <follow_path+0x144>
   1d3f0:	f007 0203 	and.w	r2, r7, #3
   1d3f4:	2a03      	cmp	r2, #3
   1d3f6:	d101      	bne.n	1d3fc <follow_path+0x148>
   1d3f8:	f044 0402 	orr.w	r4, r4, #2
    if (!(cf & NS_LFN)) {                       /* When LFN is in 8.3 format without extended character, NT flags are created */
   1d3fc:	07a0      	lsls	r0, r4, #30
   1d3fe:	f100 8089 	bmi.w	1d514 <follow_path+0x260>
        if ((b & 0x03) == 0x01) cf |= NS_EXT;   /* NT flag (Extension has only small capital) */
   1d402:	f007 0703 	and.w	r7, r7, #3
   1d406:	2f01      	cmp	r7, #1
   1d408:	bf08      	it	eq
   1d40a:	f044 0410 	orreq.w	r4, r4, #16
        if ((b & 0x0C) == 0x04) cf |= NS_BODY;  /* NT flag (Filename has only small capital) */
   1d40e:	2b04      	cmp	r3, #4
   1d410:	bf08      	it	eq
   1d412:	f044 0408 	orreq.w	r4, r4, #8
   1d416:	e07d      	b.n	1d514 <follow_path+0x260>
            if (si != di) cf |= NS_LOSS | NS_LFN;   /* Out of 8.3 format */
   1d418:	42aa      	cmp	r2, r5
   1d41a:	d002      	beq.n	1d422 <follow_path+0x16e>
   1d41c:	f044 0403 	orr.w	r4, r4, #3
            if (si > di) break;         /* No extension */
   1d420:	d8d6      	bhi.n	1d3d0 <follow_path+0x11c>
            b <<= 2; continue;
   1d422:	00bf      	lsls	r7, r7, #2
   1d424:	b2ff      	uxtb	r7, r7
   1d426:	462a      	mov	r2, r5
            si = di; i = 8; ni = 11;    /* Enter extension section */
   1d428:	f04f 0a0b 	mov.w	sl, #11
   1d42c:	2308      	movs	r3, #8
   1d42e:	e7b4      	b.n	1d39a <follow_path+0xe6>
        if (w >= 0x80) {                /* Non ASCII character */
   1d430:	287f      	cmp	r0, #127	; 0x7f
   1d432:	d90e      	bls.n	1d452 <follow_path+0x19e>
            w = ff_convert(w, 0);       /* Unicode -> OEM code */
   1d434:	2100      	movs	r1, #0
   1d436:	e9cd 2300 	strd	r2, r3, [sp]
   1d43a:	f001 f9ad 	bl	1e798 <ff_convert>
   1d43e:	f044 0402 	orr.w	r4, r4, #2
            if (w) w = ExCvt[w - 0x80]; /* Convert extended character to upper (SBCS) */
   1d442:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d446:	b160      	cbz	r0, 1d462 <follow_path+0x1ae>
   1d448:	4947      	ldr	r1, [pc, #284]	; (1d568 <follow_path+0x2b4>)
   1d44a:	4408      	add	r0, r1
   1d44c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
            if (!w || chk_chr("+,;=[]", w)) {   /* Replace illegal characters for SFN */
   1d450:	b138      	cbz	r0, 1d462 <follow_path+0x1ae>
   1d452:	f8df c118 	ldr.w	ip, [pc, #280]	; 1d56c <follow_path+0x2b8>
    while (*str && *str != chr) str++;
   1d456:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   1d45a:	2900      	cmp	r1, #0
   1d45c:	d074      	beq.n	1d548 <follow_path+0x294>
   1d45e:	4281      	cmp	r1, r0
   1d460:	d1f9      	bne.n	1d456 <follow_path+0x1a2>
                w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   1d462:	f044 0403 	orr.w	r4, r4, #3
   1d466:	205f      	movs	r0, #95	; 0x5f
        dp->fn[i++] = (BYTE)w;
   1d468:	18f1      	adds	r1, r6, r3
   1d46a:	3301      	adds	r3, #1
   1d46c:	f881 0020 	strb.w	r0, [r1, #32]
   1d470:	e793      	b.n	1d39a <follow_path+0xe6>
                    b |= 2;
   1d472:	f047 0702 	orr.w	r7, r7, #2
   1d476:	e7f7      	b.n	1d468 <follow_path+0x1b4>
                        if (!(ns & NS_LAST)) res = FR_NO_PATH;  /* Adjust error code if not last segment */
   1d478:	2a00      	cmp	r2, #0
   1d47a:	bf08      	it	eq
   1d47c:	2005      	moveq	r0, #5
   1d47e:	e05e      	b.n	1d53e <follow_path+0x28a>
            if (ns & NS_LAST) break;            /* Last segment matched. Function completed. */
   1d480:	075a      	lsls	r2, r3, #29
   1d482:	d45c      	bmi.n	1d53e <follow_path+0x28a>
            if (!(obj->attr & AM_DIR)) {        /* It is not a sub-directory and cannot follow */
   1d484:	79b3      	ldrb	r3, [r6, #6]
   1d486:	06db      	lsls	r3, r3, #27
   1d488:	d55c      	bpl.n	1d544 <follow_path+0x290>
                obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));    /* Open next directory */
   1d48a:	6933      	ldr	r3, [r6, #16]
   1d48c:	f89b 0005 	ldrb.w	r0, [fp, #5]
   1d490:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1d494:	f10b 013c 	add.w	r1, fp, #60	; 0x3c
   1d498:	4419      	add	r1, r3
   1d49a:	f7fe ffa4 	bl	1c3e6 <ld_clust.isra.0>
   1d49e:	60b0      	str	r0, [r6, #8]
    p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
   1d4a0:	6833      	ldr	r3, [r6, #0]
   1d4a2:	f8d3 9010 	ldr.w	r9, [r3, #16]
   1d4a6:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   1d4aa:	f1a9 0702 	sub.w	r7, r9, #2
   1d4ae:	2500      	movs	r5, #0
        w = p[si++];                    /* Get a character */
   1d4b0:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
        if (w < ' ') break;             /* Break if end of the path name */
   1d4b4:	281f      	cmp	r0, #31
        w = p[si++];                    /* Get a character */
   1d4b6:	f105 0401 	add.w	r4, r5, #1
        if (w < ' ') break;             /* Break if end of the path name */
   1d4ba:	d90e      	bls.n	1d4da <follow_path+0x226>
        if (w == '/' || w == '\\') {    /* Break if a separator is found */
   1d4bc:	282f      	cmp	r0, #47	; 0x2f
   1d4be:	d002      	beq.n	1d4c6 <follow_path+0x212>
   1d4c0:	285c      	cmp	r0, #92	; 0x5c
   1d4c2:	f47f af1f 	bne.w	1d304 <follow_path+0x50>
   1d4c6:	eb08 0304 	add.w	r3, r8, r4
   1d4ca:	eba3 0408 	sub.w	r4, r3, r8
            while (p[si] == '/' || p[si] == '\\') si++; /* Skip duplicated separator if exist */
   1d4ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d4d2:	2a2f      	cmp	r2, #47	; 0x2f
   1d4d4:	d0f9      	beq.n	1d4ca <follow_path+0x216>
   1d4d6:	2a5c      	cmp	r2, #92	; 0x5c
   1d4d8:	d0f7      	beq.n	1d4ca <follow_path+0x216>
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of the path */
   1d4da:	281f      	cmp	r0, #31
    *path = &p[si];                     /* Return pointer to the next segment */
   1d4dc:	44a0      	add	r8, r4
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of the path */
   1d4de:	bf8c      	ite	hi
   1d4e0:	2400      	movhi	r4, #0
   1d4e2:	2404      	movls	r4, #4
    if ((di == 1 && lfn[di - 1] == '.') ||
   1d4e4:	2d01      	cmp	r5, #1
   1d4e6:	f47f af22 	bne.w	1d32e <follow_path+0x7a>
        (di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {    /* Is this segment a dot name? */
   1d4ea:	f8b9 3000 	ldrh.w	r3, [r9]
   1d4ee:	2b2e      	cmp	r3, #46	; 0x2e
   1d4f0:	f47f af24 	bne.w	1d33c <follow_path+0x88>
        lfn[di] = 0;
   1d4f4:	2300      	movs	r3, #0
   1d4f6:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
   1d4fa:	f106 0220 	add.w	r2, r6, #32
            dp->fn[i] = (i < di) ? '.' : ' ';
   1d4fe:	429d      	cmp	r5, r3
   1d500:	bf94      	ite	ls
   1d502:	2120      	movls	r1, #32
   1d504:	212e      	movhi	r1, #46	; 0x2e
        for (i = 0; i < 11; i++)        /* Create dot name for SFN entry */
   1d506:	3301      	adds	r3, #1
   1d508:	2b0b      	cmp	r3, #11
            dp->fn[i] = (i < di) ? '.' : ' ';
   1d50a:	f802 1b01 	strb.w	r1, [r2], #1
        for (i = 0; i < 11; i++)        /* Create dot name for SFN entry */
   1d50e:	d1f6      	bne.n	1d4fe <follow_path+0x24a>
        dp->fn[i] = cf | NS_DOT;        /* This is a dot entry */
   1d510:	f044 0420 	orr.w	r4, r4, #32
    dp->fn[NSFLAG] = cf;    /* SFN is created */
   1d514:	f886 402b 	strb.w	r4, [r6, #43]	; 0x2b
            res = dir_find(dp);             /* Find an object with the segment name */
   1d518:	4630      	mov	r0, r6
   1d51a:	f7ff fd03 	bl	1cf24 <dir_find>
            ns = dp->fn[NSFLAG];
   1d51e:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
            if (res != FR_OK) {             /* Failed to find the object */
   1d522:	2800      	cmp	r0, #0
   1d524:	d0ac      	beq.n	1d480 <follow_path+0x1cc>
                if (res == FR_NO_FILE) {    /* Object is not found */
   1d526:	2804      	cmp	r0, #4
   1d528:	d109      	bne.n	1d53e <follow_path+0x28a>
                    if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exist, stay there */
   1d52a:	0699      	lsls	r1, r3, #26
   1d52c:	f003 0204 	and.w	r2, r3, #4
   1d530:	d5a2      	bpl.n	1d478 <follow_path+0x1c4>
                        if (!(ns & NS_LAST)) continue;  /* Continue to follow if not last segment */
   1d532:	2a00      	cmp	r2, #0
   1d534:	d0b4      	beq.n	1d4a0 <follow_path+0x1ec>
                        dp->fn[NSFLAG] = NS_NONAME;
   1d536:	2380      	movs	r3, #128	; 0x80
   1d538:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
                        res = FR_OK;
   1d53c:	2000      	movs	r0, #0
}
   1d53e:	b003      	add	sp, #12
   1d540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        if (!(ns & NS_LAST)) res = FR_NO_PATH;  /* Adjust error code if not last segment */
   1d544:	2005      	movs	r0, #5
    return res;
   1d546:	e7fa      	b.n	1d53e <follow_path+0x28a>
                if (IsUpper(w)) {       /* ASCII large capital */
   1d548:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
   1d54c:	2919      	cmp	r1, #25
   1d54e:	d990      	bls.n	1d472 <follow_path+0x1be>
                    if (IsLower(w)) {   /* ASCII small capital */
   1d550:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
   1d554:	2919      	cmp	r1, #25
                        b |= 1; w -= 0x20;
   1d556:	bf9e      	ittt	ls
   1d558:	3820      	subls	r0, #32
   1d55a:	f047 0701 	orrls.w	r7, r7, #1
   1d55e:	b280      	uxthls	r0, r0
   1d560:	e782      	b.n	1d468 <follow_path+0x1b4>
   1d562:	bf00      	nop
   1d564:	0002bee9 	.word	0x0002bee9
   1d568:	0002be0c 	.word	0x0002be0c
   1d56c:	0002bef2 	.word	0x0002bef2

0001d570 <f_mount>:
    FATFS* fs           /* Pointer to the file system object to mount */
)
{
    FRESULT res;

    fs->fs_type = 0;                    /* Clear new fs object */
   1d570:	2100      	movs	r1, #0
   1d572:	7141      	strb	r1, [r0, #5]
#if _FS_REENTRANT                       /* Create sync object for the new volume */
    if (!ff_cre_syncobj(fs, &fs->sobj)) return FR_INT_ERR;
#endif

    res = find_volume(fs, 0);           /* Force mounted the volume */
   1d574:	f7fe bfd6 	b.w	1c524 <find_volume>

0001d578 <f_open>:
    FATFS *fs,
    FIL* fp,            /* Pointer to the blank file object */
    const TCHAR* path,  /* Pointer to the file name */
    BYTE mode           /* Access mode and file open mode flags */
)
{
   1d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d57c:	4605      	mov	r5, r0
   1d57e:	b08c      	sub	sp, #48	; 0x30
   1d580:	4691      	mov	r9, r2
   1d582:	461f      	mov	r7, r3
    FSIZE_t ofs;
#endif
    DEF_NAMBUF


    if (!fp) return FR_INVALID_OBJECT;
   1d584:	460c      	mov	r4, r1
   1d586:	2900      	cmp	r1, #0
   1d588:	f000 80c4 	beq.w	1d714 <f_open+0x19c>

    /* Get logical drive */
    mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
   1d58c:	f003 063f 	and.w	r6, r3, #63	; 0x3f
    res = find_volume(fs, mode);
   1d590:	4631      	mov	r1, r6
   1d592:	f7fe ffc7 	bl	1c524 <find_volume>
    if (res == FR_OK) {
   1d596:	2800      	cmp	r0, #0
   1d598:	f040 80b4 	bne.w	1d704 <f_open+0x18c>
        dj.obj.fs = fs;
   1d59c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
        INIT_NAMBUF(fs);
        res = follow_path(&dj, path);   /* Follow the file path */
   1d5a0:	4649      	mov	r1, r9
        dj.obj.fs = fs;
   1d5a2:	f848 5d30 	str.w	r5, [r8, #-48]!
        res = follow_path(&dj, path);   /* Follow the file path */
   1d5a6:	4640      	mov	r0, r8
   1d5a8:	f7ff fe84 	bl	1d2b4 <follow_path>
#if !_FS_READONLY   /* R/W configuration */
        if (res == FR_OK) {
   1d5ac:	4602      	mov	r2, r0
   1d5ae:	b920      	cbnz	r0, 1d5ba <f_open+0x42>
            if (dj.fn[NSFLAG] & NS_NONAME) {    /* Origin directory itself? */
   1d5b0:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
                res = FR_INVALID_NAME;
   1d5b4:	2b00      	cmp	r3, #0
   1d5b6:	bfb8      	it	lt
   1d5b8:	2206      	movlt	r2, #6
                res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
            }
#endif
        }
        /* Create or Open a file */
        if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1d5ba:	f017 0f1c 	tst.w	r7, #28
   1d5be:	d04e      	beq.n	1d65e <f_open+0xe6>
            if (res != FR_OK) {                 /* No file, create new */
   1d5c0:	2a00      	cmp	r2, #0
   1d5c2:	d043      	beq.n	1d64c <f_open+0xd4>
                if (res == FR_NO_FILE)          /* There is no file to open, create a new entry */
   1d5c4:	2a04      	cmp	r2, #4
   1d5c6:	d13e      	bne.n	1d646 <f_open+0xce>
#if _FS_LOCK != 0
                    res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
                    res = dir_register(&dj);
   1d5c8:	4640      	mov	r0, r8
   1d5ca:	f7ff fd55 	bl	1d078 <dir_register>
                    res = FR_DENIED;
                } else {
                    if (mode & FA_CREATE_NEW) res = FR_EXIST;   /* Cannot create as new file */
                }
            }
            if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
   1d5ce:	4602      	mov	r2, r0
   1d5d0:	bbc8      	cbnz	r0, 1d646 <f_open+0xce>
                mode |= FA_CREATE_ALWAYS;       /* File is created */
   1d5d2:	f046 0608 	orr.w	r6, r6, #8
            if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
   1d5d6:	0731      	lsls	r1, r6, #28
   1d5d8:	d54b      	bpl.n	1d672 <f_open+0xfa>
                dw = GET_FATTIME();
   1d5da:	f7fd fee7 	bl	1b3ac <get_fattime>
   1d5de:	4602      	mov	r2, r0
                    }
                } else
#endif
                {
                    /* Clean directory info */
                    st_dword(dj.dir + DIR_CrtTime, dw); /* Set created time */
   1d5e0:	4601      	mov	r1, r0
   1d5e2:	9807      	ldr	r0, [sp, #28]
   1d5e4:	300e      	adds	r0, #14
   1d5e6:	f7fe feb9 	bl	1c35c <st_dword>
                    st_dword(dj.dir + DIR_ModTime, dw); /* Set modified time */
   1d5ea:	9807      	ldr	r0, [sp, #28]
   1d5ec:	4611      	mov	r1, r2
   1d5ee:	3016      	adds	r0, #22
   1d5f0:	f7fe feb4 	bl	1c35c <st_dword>
                    dj.dir[DIR_Attr] = AM_ARC;          /* Reset attribute */
   1d5f4:	9b07      	ldr	r3, [sp, #28]
   1d5f6:	2220      	movs	r2, #32
   1d5f8:	72da      	strb	r2, [r3, #11]
                    cl = ld_clust(fs, dj.dir);          /* Get cluster chain */
   1d5fa:	f8dd a01c 	ldr.w	sl, [sp, #28]
   1d5fe:	46a9      	mov	r9, r5
   1d600:	4651      	mov	r1, sl
   1d602:	f819 0f05 	ldrb.w	r0, [r9, #5]!
   1d606:	f7fe feee 	bl	1c3e6 <ld_clust.isra.0>
                    st_clust(fs, dj.dir, 0);            /* Reset file allocation info */
   1d60a:	2200      	movs	r2, #0
                    cl = ld_clust(fs, dj.dir);          /* Get cluster chain */
   1d60c:	4607      	mov	r7, r0
                    st_clust(fs, dj.dir, 0);            /* Reset file allocation info */
   1d60e:	4648      	mov	r0, r9
   1d610:	f7fe fef7 	bl	1c402 <st_clust.isra.1>
                    st_dword(dj.dir + DIR_FileSize, 0);
   1d614:	9b07      	ldr	r3, [sp, #28]
    *ptr++ = (BYTE)val; val >>= 8;
   1d616:	2200      	movs	r2, #0
   1d618:	771a      	strb	r2, [r3, #28]
    *ptr++ = (BYTE)val; val >>= 8;
   1d61a:	775a      	strb	r2, [r3, #29]
    *ptr++ = (BYTE)val; val >>= 8;
   1d61c:	779a      	strb	r2, [r3, #30]
    *ptr++ = (BYTE)val;
   1d61e:	77da      	strb	r2, [r3, #31]
                    fs->wflag = 1;
   1d620:	2301      	movs	r3, #1
   1d622:	71eb      	strb	r3, [r5, #7]

                    if (cl) {                           /* Remove the cluster chain if exist */
   1d624:	b32f      	cbz	r7, 1d672 <f_open+0xfa>
                        dw = fs->winsect;
                        res = remove_chain(&dj.obj, cl, 0);
   1d626:	4639      	mov	r1, r7
   1d628:	4640      	mov	r0, r8
                        dw = fs->winsect;
   1d62a:	f8d5 9038 	ldr.w	r9, [r5, #56]	; 0x38
                        res = remove_chain(&dj.obj, cl, 0);
   1d62e:	f7ff fa2f 	bl	1ca90 <remove_chain>
                        if (res == FR_OK) {
   1d632:	4602      	mov	r2, r0
   1d634:	b938      	cbnz	r0, 1d646 <f_open+0xce>
                            res = move_window(fs, dw);
   1d636:	4649      	mov	r1, r9
   1d638:	4628      	mov	r0, r5
   1d63a:	f7fe ff17 	bl	1c46c <move_window>
                            fs->last_clst = cl - 1;     /* Reuse the cluster hole */
   1d63e:	3f01      	subs	r7, #1
   1d640:	616f      	str	r7, [r5, #20]
                        res = FR_DENIED;
                    }
                }
            }
        }
        if (res == FR_OK) {
   1d642:	4602      	mov	r2, r0
   1d644:	b1a8      	cbz	r0, 1d672 <f_open+0xfa>
        }

        FREE_NAMBUF();
    }

    if (res != FR_OK) fp->obj.fs = 0;   /* Invalidate file object on error */
   1d646:	2300      	movs	r3, #0
   1d648:	6023      	str	r3, [r4, #0]
   1d64a:	e032      	b.n	1d6b2 <f_open+0x13a>
                if (dj.obj.attr & (AM_RDO | AM_DIR)) {  /* Cannot overwrite it (R/O or DIR) */
   1d64c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1d650:	f013 0f11 	tst.w	r3, #17
   1d654:	d15a      	bne.n	1d70c <f_open+0x194>
                    if (mode & FA_CREATE_NEW) res = FR_EXIST;   /* Cannot create as new file */
   1d656:	0778      	lsls	r0, r7, #29
   1d658:	d5bd      	bpl.n	1d5d6 <f_open+0x5e>
   1d65a:	2208      	movs	r2, #8
   1d65c:	e7f3      	b.n	1d646 <f_open+0xce>
            if (res == FR_OK) {                 /* Following succeeded */
   1d65e:	2a00      	cmp	r2, #0
   1d660:	d1f1      	bne.n	1d646 <f_open+0xce>
                if (dj.obj.attr & AM_DIR) {     /* It is a directory */
   1d662:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1d666:	06da      	lsls	r2, r3, #27
   1d668:	d44e      	bmi.n	1d708 <f_open+0x190>
                    if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
   1d66a:	07bf      	lsls	r7, r7, #30
   1d66c:	d501      	bpl.n	1d672 <f_open+0xfa>
   1d66e:	07d8      	lsls	r0, r3, #31
   1d670:	d44c      	bmi.n	1d70c <f_open+0x194>
            fp->dir_sect = fs->winsect;         /* Pointer to the directory entry */
   1d672:	6bab      	ldr	r3, [r5, #56]	; 0x38
            fp->dir_ptr = dj.dir;
   1d674:	9f07      	ldr	r7, [sp, #28]
            fp->dir_sect = fs->winsect;         /* Pointer to the directory entry */
   1d676:	6223      	str	r3, [r4, #32]
            fp->dir_ptr = dj.dir;
   1d678:	6267      	str	r7, [r4, #36]	; 0x24
                fp->obj.sclust = ld_clust(fs, dj.dir);              /* Get allocation info */
   1d67a:	7968      	ldrb	r0, [r5, #5]
            if (mode & FA_CREATE_ALWAYS)        /* Set file change flag if created or overwritten */
   1d67c:	0731      	lsls	r1, r6, #28
                fp->obj.sclust = ld_clust(fs, dj.dir);              /* Get allocation info */
   1d67e:	4639      	mov	r1, r7
                mode |= FA_MODIFIED;
   1d680:	bf48      	it	mi
   1d682:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
                fp->obj.sclust = ld_clust(fs, dj.dir);              /* Get allocation info */
   1d686:	f7fe feae 	bl	1c3e6 <ld_clust.isra.0>
   1d68a:	4601      	mov	r1, r0
   1d68c:	60a0      	str	r0, [r4, #8]
                fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   1d68e:	f107 001c 	add.w	r0, r7, #28
   1d692:	f7fe fe5b 	bl	1c34c <ld_dword>
            fp->obj.id = fs->id;
   1d696:	896b      	ldrh	r3, [r5, #10]
   1d698:	80a3      	strh	r3, [r4, #4]
            if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {   /* Seek to end of file if FA_OPEN_APPEND is specified */
   1d69a:	06b2      	lsls	r2, r6, #26
            fp->err = 0;            /* Clear error flag */
   1d69c:	f04f 0300 	mov.w	r3, #0
                fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   1d6a0:	4607      	mov	r7, r0
   1d6a2:	60e0      	str	r0, [r4, #12]
            fp->obj.fs = fs;        /* Validate the file object */
   1d6a4:	6025      	str	r5, [r4, #0]
            fp->flag = mode;        /* Set file access mode */
   1d6a6:	7426      	strb	r6, [r4, #16]
            fp->err = 0;            /* Clear error flag */
   1d6a8:	7463      	strb	r3, [r4, #17]
            fp->sect = 0;           /* Invalidate current data sector */
   1d6aa:	61e3      	str	r3, [r4, #28]
            fp->fptr = 0;           /* Set file pointer top of the file */
   1d6ac:	6163      	str	r3, [r4, #20]
            if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {   /* Seek to end of file if FA_OPEN_APPEND is specified */
   1d6ae:	d404      	bmi.n	1d6ba <f_open+0x142>
    if (!fp) return FR_INVALID_OBJECT;
   1d6b0:	2200      	movs	r2, #0

    LEAVE_FF(fs, res);
}
   1d6b2:	4610      	mov	r0, r2
   1d6b4:	b00c      	add	sp, #48	; 0x30
   1d6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {   /* Seek to end of file if FA_OPEN_APPEND is specified */
   1d6ba:	2800      	cmp	r0, #0
   1d6bc:	d0f8      	beq.n	1d6b0 <f_open+0x138>
                bcs = (DWORD)fs->csize * SS(fs);    /* Cluster size in byte */
   1d6be:	89ee      	ldrh	r6, [r5, #14]
                fp->fptr = fp->obj.objsize;         /* Offset to seek */
   1d6c0:	6160      	str	r0, [r4, #20]
                bcs = (DWORD)fs->csize * SS(fs);    /* Cluster size in byte */
   1d6c2:	0276      	lsls	r6, r6, #9
                for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   1d6c4:	42be      	cmp	r6, r7
   1d6c6:	d30f      	bcc.n	1d6e8 <f_open+0x170>
   1d6c8:	2200      	movs	r2, #0
                fp->clust = clst;
   1d6ca:	61a1      	str	r1, [r4, #24]
                if (res == FR_OK && ofs % SS(fs)) { /* Fill sector buffer if not on the sector boundary */
   1d6cc:	2a00      	cmp	r2, #0
   1d6ce:	d1ba      	bne.n	1d646 <f_open+0xce>
   1d6d0:	f3c7 0308 	ubfx	r3, r7, #0, #9
   1d6d4:	2b00      	cmp	r3, #0
   1d6d6:	d0eb      	beq.n	1d6b0 <f_open+0x138>
                    if ((sc = clust2sect(fs, clst)) == 0) {
   1d6d8:	4628      	mov	r0, r5
   1d6da:	f7fe fe47 	bl	1c36c <clust2sect>
   1d6de:	b1b8      	cbz	r0, 1d710 <f_open+0x198>
                        fp->sect = sc + (DWORD)(ofs / SS(fs));
   1d6e0:	eb00 2057 	add.w	r0, r0, r7, lsr #9
   1d6e4:	61e0      	str	r0, [r4, #28]
   1d6e6:	e7e4      	b.n	1d6b2 <f_open+0x13a>
                    clst = get_fat(&fp->obj, clst);
   1d6e8:	6820      	ldr	r0, [r4, #0]
   1d6ea:	f7ff f8dd 	bl	1c8a8 <get_fat.isra.7>
                    if (clst <= 1) res = FR_INT_ERR;
   1d6ee:	2801      	cmp	r0, #1
                    clst = get_fat(&fp->obj, clst);
   1d6f0:	4601      	mov	r1, r0
   1d6f2:	eba7 0706 	sub.w	r7, r7, r6
                    if (clst <= 1) res = FR_INT_ERR;
   1d6f6:	d903      	bls.n	1d700 <f_open+0x188>
                for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   1d6f8:	1c43      	adds	r3, r0, #1
   1d6fa:	d1e3      	bne.n	1d6c4 <f_open+0x14c>
                    if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   1d6fc:	2201      	movs	r2, #1
   1d6fe:	e7e4      	b.n	1d6ca <f_open+0x152>
                    if (clst <= 1) res = FR_INT_ERR;
   1d700:	2202      	movs	r2, #2
   1d702:	e7e2      	b.n	1d6ca <f_open+0x152>
   1d704:	4602      	mov	r2, r0
   1d706:	e79e      	b.n	1d646 <f_open+0xce>
                    res = FR_NO_FILE;
   1d708:	2204      	movs	r2, #4
   1d70a:	e79c      	b.n	1d646 <f_open+0xce>
                    res = FR_DENIED;
   1d70c:	2207      	movs	r2, #7
   1d70e:	e79a      	b.n	1d646 <f_open+0xce>
                        res = FR_INT_ERR;
   1d710:	2202      	movs	r2, #2
   1d712:	e798      	b.n	1d646 <f_open+0xce>
    if (!fp) return FR_INVALID_OBJECT;
   1d714:	2209      	movs	r2, #9
   1d716:	e7cc      	b.n	1d6b2 <f_open+0x13a>

0001d718 <f_read>:
    FIL* fp,    /* Pointer to the file object */
    void* buff, /* Pointer to data buffer */
    UINT btr,   /* Number of bytes to read */
    UINT* br    /* Pointer to number of bytes read */
)
{
   1d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d71c:	4699      	mov	r9, r3
   1d71e:	b085      	sub	sp, #20
    FSIZE_t remain;
    UINT rcnt, cc, csect;
    BYTE *rbuff = (BYTE*)buff;


    *br = 0;    /* Clear read byte counter */
   1d720:	2300      	movs	r3, #0
{
   1d722:	4688      	mov	r8, r1
    *br = 0;    /* Clear read byte counter */
   1d724:	f8c9 3000 	str.w	r3, [r9]
    res = validate(&fp->obj, &fs);              /* Check validity of the file object */
   1d728:	a903      	add	r1, sp, #12
{
   1d72a:	4604      	mov	r4, r0
   1d72c:	4615      	mov	r5, r2
    res = validate(&fp->obj, &fs);              /* Check validity of the file object */
   1d72e:	f7fe fe37 	bl	1c3a0 <validate>
    if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);   /* Check validity */
   1d732:	4606      	mov	r6, r0
   1d734:	b9e0      	cbnz	r0, 1d770 <f_read+0x58>
   1d736:	7c66      	ldrb	r6, [r4, #17]
   1d738:	b9d6      	cbnz	r6, 1d770 <f_read+0x58>
    if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   1d73a:	7c23      	ldrb	r3, [r4, #16]
   1d73c:	07da      	lsls	r2, r3, #31
   1d73e:	d579      	bpl.n	1d834 <f_read+0x11c>
    remain = fp->obj.objsize - fp->fptr;
   1d740:	68e3      	ldr	r3, [r4, #12]
   1d742:	6967      	ldr	r7, [r4, #20]
   1d744:	1bdf      	subs	r7, r3, r7
   1d746:	42af      	cmp	r7, r5
   1d748:	bf28      	it	cs
   1d74a:	462f      	movcs	r7, r5
    if (btr > remain) btr = (UINT)remain;       /* Truncate btr by remaining bytes */

    for ( ;  btr;                               /* Repeat until all data read */
   1d74c:	b187      	cbz	r7, 1d770 <f_read+0x58>
        rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
        if (fp->fptr % SS(fs) == 0) {           /* On the sector boundary? */
   1d74e:	6962      	ldr	r2, [r4, #20]
   1d750:	f3c2 0308 	ubfx	r3, r2, #0, #9
   1d754:	2b00      	cmp	r3, #0
   1d756:	d154      	bne.n	1d802 <f_read+0xea>
            csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));    /* Sector offset in the cluster */
   1d758:	9b03      	ldr	r3, [sp, #12]
   1d75a:	89db      	ldrh	r3, [r3, #14]
   1d75c:	3b01      	subs	r3, #1
            if (csect == 0) {                   /* On the cluster boundary? */
   1d75e:	ea13 2a52 	ands.w	sl, r3, r2, lsr #9
   1d762:	d113      	bne.n	1d78c <f_read+0x74>
                if (fp->fptr == 0) {            /* On the top of the file? */
   1d764:	b942      	cbnz	r2, 1d778 <f_read+0x60>
                    clst = fp->obj.sclust;      /* Follow cluster chain from the origin */
   1d766:	68a0      	ldr	r0, [r4, #8]
#endif
                    {
                        clst = get_fat(&fp->obj, fp->clust);    /* Follow cluster chain on the FAT */
                    }
                }
                if (clst < 2) ABORT(fs, FR_INT_ERR);
   1d768:	2801      	cmp	r0, #1
   1d76a:	d80a      	bhi.n	1d782 <f_read+0x6a>
   1d76c:	2602      	movs	r6, #2
                if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1d76e:	7466      	strb	r6, [r4, #17]
        mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);  /* Extract partial sector */
#endif
    }

    LEAVE_FF(fs, FR_OK);
}
   1d770:	4630      	mov	r0, r6
   1d772:	b005      	add	sp, #20
   1d774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        clst = get_fat(&fp->obj, fp->clust);    /* Follow cluster chain on the FAT */
   1d778:	69a1      	ldr	r1, [r4, #24]
   1d77a:	6820      	ldr	r0, [r4, #0]
   1d77c:	f7ff f894 	bl	1c8a8 <get_fat.isra.7>
   1d780:	e7f2      	b.n	1d768 <f_read+0x50>
                if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1d782:	1c43      	adds	r3, r0, #1
   1d784:	d101      	bne.n	1d78a <f_read+0x72>
   1d786:	2601      	movs	r6, #1
   1d788:	e7f1      	b.n	1d76e <f_read+0x56>
                fp->clust = clst;               /* Update current cluster */
   1d78a:	61a0      	str	r0, [r4, #24]
            sect = clust2sect(fs, fp->clust);   /* Get current sector */
   1d78c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1d790:	69a1      	ldr	r1, [r4, #24]
   1d792:	4658      	mov	r0, fp
   1d794:	f7fe fdea 	bl	1c36c <clust2sect>
            if (!sect) ABORT(fs, FR_INT_ERR);
   1d798:	2800      	cmp	r0, #0
   1d79a:	d0e7      	beq.n	1d76c <f_read+0x54>
            sect += csect;
   1d79c:	eb0a 0300 	add.w	r3, sl, r0
            if (cc) {                           /* Read maximum contiguous sectors directly */
   1d7a0:	0a7d      	lsrs	r5, r7, #9
            sect += csect;
   1d7a2:	9301      	str	r3, [sp, #4]
            if (cc) {                           /* Read maximum contiguous sectors directly */
   1d7a4:	d02b      	beq.n	1d7fe <f_read+0xe6>
                if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
   1d7a6:	f8bb 200e 	ldrh.w	r2, [fp, #14]
                if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   1d7aa:	f8db 0000 	ldr.w	r0, [fp]
                if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
   1d7ae:	eb0a 0105 	add.w	r1, sl, r5
   1d7b2:	4291      	cmp	r1, r2
                    cc = fs->csize - csect;
   1d7b4:	bf88      	it	hi
   1d7b6:	eba2 050a 	subhi.w	r5, r2, sl
                if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   1d7ba:	462b      	mov	r3, r5
   1d7bc:	9a01      	ldr	r2, [sp, #4]
   1d7be:	4641      	mov	r1, r8
   1d7c0:	f7fa fb14 	bl	17dec <disk_read>
   1d7c4:	2800      	cmp	r0, #0
   1d7c6:	d1de      	bne.n	1d786 <f_read+0x6e>
                if (fs->wflag && fs->winsect - sect < cc) {
   1d7c8:	9903      	ldr	r1, [sp, #12]
   1d7ca:	79cb      	ldrb	r3, [r1, #7]
   1d7cc:	b15b      	cbz	r3, 1d7e6 <f_read+0xce>
   1d7ce:	6b88      	ldr	r0, [r1, #56]	; 0x38
   1d7d0:	9b01      	ldr	r3, [sp, #4]
   1d7d2:	1ac0      	subs	r0, r0, r3
   1d7d4:	42a8      	cmp	r0, r5
   1d7d6:	d206      	bcs.n	1d7e6 <f_read+0xce>
                    mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
   1d7d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d7dc:	313c      	adds	r1, #60	; 0x3c
   1d7de:	eb08 2040 	add.w	r0, r8, r0, lsl #9
   1d7e2:	f7fe f807 	bl	1b7f4 <memcpy>
                rcnt = SS(fs) * cc;             /* Number of bytes transferred */
   1d7e6:	026d      	lsls	r5, r5, #9
        rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   1d7e8:	6963      	ldr	r3, [r4, #20]
   1d7ea:	442b      	add	r3, r5
   1d7ec:	6163      	str	r3, [r4, #20]
   1d7ee:	f8d9 3000 	ldr.w	r3, [r9]
   1d7f2:	442b      	add	r3, r5
   1d7f4:	44a8      	add	r8, r5
   1d7f6:	f8c9 3000 	str.w	r3, [r9]
   1d7fa:	1b7f      	subs	r7, r7, r5
   1d7fc:	e7a6      	b.n	1d74c <f_read+0x34>
            fp->sect = sect;
   1d7fe:	9b01      	ldr	r3, [sp, #4]
   1d800:	61e3      	str	r3, [r4, #28]
        rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);    /* Number of bytes left in the sector */
   1d802:	6965      	ldr	r5, [r4, #20]
        if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR); /* Move sector window */
   1d804:	69e1      	ldr	r1, [r4, #28]
   1d806:	9803      	ldr	r0, [sp, #12]
        rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);    /* Number of bytes left in the sector */
   1d808:	f3c5 0508 	ubfx	r5, r5, #0, #9
   1d80c:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
   1d810:	42bd      	cmp	r5, r7
   1d812:	bf28      	it	cs
   1d814:	463d      	movcs	r5, r7
        if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR); /* Move sector window */
   1d816:	f7fe fe29 	bl	1c46c <move_window>
   1d81a:	2800      	cmp	r0, #0
   1d81c:	d1b3      	bne.n	1d786 <f_read+0x6e>
        mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);  /* Extract partial sector */
   1d81e:	9903      	ldr	r1, [sp, #12]
   1d820:	6963      	ldr	r3, [r4, #20]
   1d822:	313c      	adds	r1, #60	; 0x3c
   1d824:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1d828:	462a      	mov	r2, r5
   1d82a:	4419      	add	r1, r3
   1d82c:	4640      	mov	r0, r8
   1d82e:	f7fd ffe1 	bl	1b7f4 <memcpy>
   1d832:	e7d9      	b.n	1d7e8 <f_read+0xd0>
    if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   1d834:	2607      	movs	r6, #7
   1d836:	e79b      	b.n	1d770 <f_read+0x58>

0001d838 <f_write>:
    FIL* fp,            /* Pointer to the file object */
    const void* buff,   /* Pointer to the data to be written */
    UINT btw,           /* Number of bytes to write */
    UINT* bw            /* Pointer to number of bytes written */
)
{
   1d838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d83c:	469b      	mov	fp, r3
   1d83e:	b085      	sub	sp, #20
    DWORD clst, sect;
    UINT wcnt, cc, csect;
    const BYTE *wbuff = (const BYTE*)buff;


    *bw = 0;    /* Clear write byte counter */
   1d840:	2300      	movs	r3, #0
{
   1d842:	4689      	mov	r9, r1
    *bw = 0;    /* Clear write byte counter */
   1d844:	f8cb 3000 	str.w	r3, [fp]
    res = validate(&fp->obj, &fs);          /* Check validity of the file object */
   1d848:	a903      	add	r1, sp, #12
{
   1d84a:	4604      	mov	r4, r0
   1d84c:	4617      	mov	r7, r2
    res = validate(&fp->obj, &fs);          /* Check validity of the file object */
   1d84e:	f7fe fda7 	bl	1c3a0 <validate>
    if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);   /* Check validity */
   1d852:	4606      	mov	r6, r0
   1d854:	bb10      	cbnz	r0, 1d89c <f_write+0x64>
   1d856:	7c66      	ldrb	r6, [r4, #17]
   1d858:	bb06      	cbnz	r6, 1d89c <f_write+0x64>
    if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);    /* Check access mode */
   1d85a:	7c23      	ldrb	r3, [r4, #16]
   1d85c:	079a      	lsls	r2, r3, #30
   1d85e:	f140 80a7 	bpl.w	1d9b0 <f_write+0x178>

    /* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
    if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   1d862:	6963      	ldr	r3, [r4, #20]
   1d864:	42fb      	cmn	r3, r7
   1d866:	d300      	bcc.n	1d86a <f_write+0x32>
        btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   1d868:	43df      	mvns	r7, r3
    }

    for ( ;  btw;                           /* Repeat until all data written */
   1d86a:	b19f      	cbz	r7, 1d894 <f_write+0x5c>
        wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
        if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
   1d86c:	6963      	ldr	r3, [r4, #20]
   1d86e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1d872:	2a00      	cmp	r2, #0
   1d874:	d17f      	bne.n	1d976 <f_write+0x13e>
            csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);    /* Sector offset in the cluster */
   1d876:	9a03      	ldr	r2, [sp, #12]
   1d878:	89d2      	ldrh	r2, [r2, #14]
   1d87a:	3a01      	subs	r2, #1
            if (csect == 0) {               /* On the cluster boundary? */
   1d87c:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
   1d880:	9201      	str	r2, [sp, #4]
   1d882:	d11e      	bne.n	1d8c2 <f_write+0x8a>
                if (fp->fptr == 0) {        /* On the top of the file? */
   1d884:	b973      	cbnz	r3, 1d8a4 <f_write+0x6c>
                    clst = fp->obj.sclust;  /* Follow from the origin */
   1d886:	68a0      	ldr	r0, [r4, #8]
                    if (clst == 0) {        /* If no cluster is allocated, */
   1d888:	b970      	cbnz	r0, 1d8a8 <f_write+0x70>
                        clst = create_chain(&fp->obj, 0);   /* create a new cluster chain */
   1d88a:	4601      	mov	r1, r0
                    if (fp->cltbl) {
                        clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
                    } else
#endif
                    {
                        clst = create_chain(&fp->obj, fp->clust);   /* Follow or stretch cluster chain on the FAT */
   1d88c:	4620      	mov	r0, r4
   1d88e:	f7ff f8a7 	bl	1c9e0 <create_chain>
                    }
                }
                if (clst == 0) break;       /* Could not allocate a new cluster (disk full) */
   1d892:	b948      	cbnz	r0, 1d8a8 <f_write+0x70>
        mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);  /* Fit data to the sector */
        fp->flag |= FA_DIRTY;
#endif
    }

    fp->flag |= FA_MODIFIED;                /* Set file change flag */
   1d894:	7c23      	ldrb	r3, [r4, #16]
   1d896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d89a:	7423      	strb	r3, [r4, #16]

    LEAVE_FF(fs, FR_OK);
}
   1d89c:	4630      	mov	r0, r6
   1d89e:	b005      	add	sp, #20
   1d8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        clst = create_chain(&fp->obj, fp->clust);   /* Follow or stretch cluster chain on the FAT */
   1d8a4:	69a1      	ldr	r1, [r4, #24]
   1d8a6:	e7f1      	b.n	1d88c <f_write+0x54>
                if (clst == 1) ABORT(fs, FR_INT_ERR);
   1d8a8:	2801      	cmp	r0, #1
   1d8aa:	d102      	bne.n	1d8b2 <f_write+0x7a>
   1d8ac:	2602      	movs	r6, #2
                if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1d8ae:	7466      	strb	r6, [r4, #17]
   1d8b0:	e7f4      	b.n	1d89c <f_write+0x64>
   1d8b2:	1c43      	adds	r3, r0, #1
   1d8b4:	d101      	bne.n	1d8ba <f_write+0x82>
   1d8b6:	2601      	movs	r6, #1
   1d8b8:	e7f9      	b.n	1d8ae <f_write+0x76>
                if (fp->obj.sclust == 0) fp->obj.sclust = clst; /* Set start cluster if the first write */
   1d8ba:	68a3      	ldr	r3, [r4, #8]
                fp->clust = clst;           /* Update current cluster */
   1d8bc:	61a0      	str	r0, [r4, #24]
                if (fp->obj.sclust == 0) fp->obj.sclust = clst; /* Set start cluster if the first write */
   1d8be:	b903      	cbnz	r3, 1d8c2 <f_write+0x8a>
   1d8c0:	60a0      	str	r0, [r4, #8]
            if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);    /* Write-back sector cache */
   1d8c2:	9803      	ldr	r0, [sp, #12]
   1d8c4:	69e3      	ldr	r3, [r4, #28]
   1d8c6:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1d8c8:	429a      	cmp	r2, r3
   1d8ca:	d103      	bne.n	1d8d4 <f_write+0x9c>
   1d8cc:	f7fe fdc8 	bl	1c460 <sync_window>
   1d8d0:	2800      	cmp	r0, #0
   1d8d2:	d1f0      	bne.n	1d8b6 <f_write+0x7e>
            sect = clust2sect(fs, fp->clust);   /* Get current sector */
   1d8d4:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1d8d8:	69a1      	ldr	r1, [r4, #24]
   1d8da:	4650      	mov	r0, sl
   1d8dc:	f7fe fd46 	bl	1c36c <clust2sect>
            if (!sect) ABORT(fs, FR_INT_ERR);
   1d8e0:	2800      	cmp	r0, #0
   1d8e2:	d0e3      	beq.n	1d8ac <f_write+0x74>
            sect += csect;
   1d8e4:	9b01      	ldr	r3, [sp, #4]
            if (cc) {                       /* Write maximum contiguous sectors directly */
   1d8e6:	0a7d      	lsrs	r5, r7, #9
            sect += csect;
   1d8e8:	eb03 0800 	add.w	r8, r3, r0
            if (cc) {                       /* Write maximum contiguous sectors directly */
   1d8ec:	d035      	beq.n	1d95a <f_write+0x122>
                if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
   1d8ee:	9a01      	ldr	r2, [sp, #4]
   1d8f0:	f8ba 300e 	ldrh.w	r3, [sl, #14]
                if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   1d8f4:	f8da 0000 	ldr.w	r0, [sl]
                if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
   1d8f8:	442a      	add	r2, r5
   1d8fa:	429a      	cmp	r2, r3
                    cc = fs->csize - csect;
   1d8fc:	bf84      	itt	hi
   1d8fe:	9a01      	ldrhi	r2, [sp, #4]
   1d900:	1a9d      	subhi	r5, r3, r2
                if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   1d902:	462b      	mov	r3, r5
   1d904:	4642      	mov	r2, r8
   1d906:	4649      	mov	r1, r9
   1d908:	f7fa faa6 	bl	17e58 <disk_write>
   1d90c:	2800      	cmp	r0, #0
   1d90e:	d1d2      	bne.n	1d8b6 <f_write+0x7e>
                if (fs->winsect - sect < cc) {  /* Refill sector cache if it gets invalidated by the direct write */
   1d910:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1d914:	f8da 1038 	ldr.w	r1, [sl, #56]	; 0x38
   1d918:	eba1 0108 	sub.w	r1, r1, r8
   1d91c:	42a9      	cmp	r1, r5
   1d91e:	d20b      	bcs.n	1d938 <f_write+0x100>
   1d920:	9001      	str	r0, [sp, #4]
                    mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
   1d922:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d926:	eb09 2141 	add.w	r1, r9, r1, lsl #9
   1d92a:	f10a 003c 	add.w	r0, sl, #60	; 0x3c
   1d92e:	f7fd ff61 	bl	1b7f4 <memcpy>
                    fs->wflag = 0;
   1d932:	9b01      	ldr	r3, [sp, #4]
   1d934:	f88a 3007 	strb.w	r3, [sl, #7]
                wcnt = SS(fs) * cc;     /* Number of bytes transferred */
   1d938:	026d      	lsls	r5, r5, #9
        wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
   1d93a:	6963      	ldr	r3, [r4, #20]
   1d93c:	68e2      	ldr	r2, [r4, #12]
   1d93e:	442b      	add	r3, r5
   1d940:	6163      	str	r3, [r4, #20]
   1d942:	429a      	cmp	r2, r3
   1d944:	bf2c      	ite	cs
   1d946:	60e2      	strcs	r2, [r4, #12]
   1d948:	60e3      	strcc	r3, [r4, #12]
   1d94a:	f8db 3000 	ldr.w	r3, [fp]
   1d94e:	442b      	add	r3, r5
   1d950:	44a9      	add	r9, r5
   1d952:	f8cb 3000 	str.w	r3, [fp]
   1d956:	1b7f      	subs	r7, r7, r5
   1d958:	e787      	b.n	1d86a <f_write+0x32>
            if (fp->fptr >= fp->obj.objsize) {  /* Avoid silly cache filling on the growing edge */
   1d95a:	6962      	ldr	r2, [r4, #20]
   1d95c:	68e3      	ldr	r3, [r4, #12]
   1d95e:	429a      	cmp	r2, r3
   1d960:	d307      	bcc.n	1d972 <f_write+0x13a>
                if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   1d962:	4650      	mov	r0, sl
   1d964:	f7fe fd7c 	bl	1c460 <sync_window>
   1d968:	2800      	cmp	r0, #0
   1d96a:	d1a4      	bne.n	1d8b6 <f_write+0x7e>
                fs->winsect = sect;
   1d96c:	9b03      	ldr	r3, [sp, #12]
   1d96e:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
            fp->sect = sect;
   1d972:	f8c4 801c 	str.w	r8, [r4, #28]
        wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);    /* Number of bytes left in the sector */
   1d976:	6965      	ldr	r5, [r4, #20]
        if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR); /* Move sector window */
   1d978:	69e1      	ldr	r1, [r4, #28]
   1d97a:	9803      	ldr	r0, [sp, #12]
        wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);    /* Number of bytes left in the sector */
   1d97c:	f3c5 0508 	ubfx	r5, r5, #0, #9
   1d980:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
   1d984:	42bd      	cmp	r5, r7
   1d986:	bf28      	it	cs
   1d988:	463d      	movcs	r5, r7
        if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR); /* Move sector window */
   1d98a:	f7fe fd6f 	bl	1c46c <move_window>
   1d98e:	2800      	cmp	r0, #0
   1d990:	d191      	bne.n	1d8b6 <f_write+0x7e>
        mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);  /* Fit data to the sector */
   1d992:	9803      	ldr	r0, [sp, #12]
   1d994:	6963      	ldr	r3, [r4, #20]
   1d996:	303c      	adds	r0, #60	; 0x3c
   1d998:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1d99c:	462a      	mov	r2, r5
   1d99e:	4418      	add	r0, r3
   1d9a0:	4649      	mov	r1, r9
   1d9a2:	f7fd ff27 	bl	1b7f4 <memcpy>
        fs->wflag = 1;
   1d9a6:	9b03      	ldr	r3, [sp, #12]
   1d9a8:	f04f 0201 	mov.w	r2, #1
   1d9ac:	71da      	strb	r2, [r3, #7]
   1d9ae:	e7c4      	b.n	1d93a <f_write+0x102>
    if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);    /* Check access mode */
   1d9b0:	2607      	movs	r6, #7
   1d9b2:	e773      	b.n	1d89c <f_write+0x64>

0001d9b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
    FIL* fp     /* Pointer to the file object */
)
{
   1d9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
    DEF_NAMBUF
#endif


    res = validate(&fp->obj, &fs);  /* Check validity of the file object */
   1d9b6:	a901      	add	r1, sp, #4
{
   1d9b8:	4604      	mov	r4, r0
    res = validate(&fp->obj, &fs);  /* Check validity of the file object */
   1d9ba:	f7fe fcf1 	bl	1c3a0 <validate>
    if (res == FR_OK) {
   1d9be:	4605      	mov	r5, r0
   1d9c0:	bb60      	cbnz	r0, 1da1c <f_sync+0x68>
        if (fp->flag & FA_MODIFIED) {   /* Is there any change to the file? */
   1d9c2:	7c23      	ldrb	r3, [r4, #16]
   1d9c4:	065b      	lsls	r3, r3, #25
   1d9c6:	d529      	bpl.n	1da1c <f_sync+0x68>
                if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
                fp->flag &= (BYTE)~FA_DIRTY;
            }
#endif
            /* Update the directory entry */
            tm = GET_FATTIME();             /* Modified time */
   1d9c8:	f7fd fcf0 	bl	1b3ac <get_fattime>
                    FREE_NAMBUF();
                }
            } else
#endif
            {
                res = move_window(fs, fp->dir_sect);
   1d9cc:	6a21      	ldr	r1, [r4, #32]
            tm = GET_FATTIME();             /* Modified time */
   1d9ce:	4607      	mov	r7, r0
                res = move_window(fs, fp->dir_sect);
   1d9d0:	9801      	ldr	r0, [sp, #4]
   1d9d2:	f7fe fd4b 	bl	1c46c <move_window>
                if (res == FR_OK) {
   1d9d6:	4605      	mov	r5, r0
   1d9d8:	bb00      	cbnz	r0, 1da1c <f_sync+0x68>
                    dir = fp->dir_ptr;
   1d9da:	6a66      	ldr	r6, [r4, #36]	; 0x24
                    dir[DIR_Attr] |= AM_ARC;                        /* Set archive bit */
   1d9dc:	7af3      	ldrb	r3, [r6, #11]
   1d9de:	f043 0320 	orr.w	r3, r3, #32
   1d9e2:	72f3      	strb	r3, [r6, #11]
                    st_clust(fp->obj.fs, dir, fp->obj.sclust);      /* Update file allocation info  */
   1d9e4:	6820      	ldr	r0, [r4, #0]
   1d9e6:	68a2      	ldr	r2, [r4, #8]
   1d9e8:	4631      	mov	r1, r6
   1d9ea:	3005      	adds	r0, #5
   1d9ec:	f7fe fd09 	bl	1c402 <st_clust.isra.1>
                    st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);   /* Update file size */
   1d9f0:	68e1      	ldr	r1, [r4, #12]
   1d9f2:	f106 001c 	add.w	r0, r6, #28
   1d9f6:	f7fe fcb1 	bl	1c35c <st_dword>
                    st_dword(dir + DIR_ModTime, tm);                /* Update modified time */
   1d9fa:	4639      	mov	r1, r7
   1d9fc:	f106 0016 	add.w	r0, r6, #22
   1da00:	f7fe fcac 	bl	1c35c <st_dword>
                    st_word(dir + DIR_LstAccDate, 0);
                    fs->wflag = 1;
   1da04:	9801      	ldr	r0, [sp, #4]
    *ptr++ = (BYTE)val; val >>= 8;
   1da06:	74b5      	strb	r5, [r6, #18]
                    fs->wflag = 1;
   1da08:	2301      	movs	r3, #1
    *ptr++ = (BYTE)val;
   1da0a:	74f5      	strb	r5, [r6, #19]
                    fs->wflag = 1;
   1da0c:	71c3      	strb	r3, [r0, #7]
                    res = sync_fs(fs);                  /* Restore it to the directory */
   1da0e:	f7ff f8e8 	bl	1cbe2 <sync_fs>
                    fp->flag &= (BYTE)~FA_MODIFIED;
   1da12:	7c23      	ldrb	r3, [r4, #16]
   1da14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
                    res = sync_fs(fs);                  /* Restore it to the directory */
   1da18:	4605      	mov	r5, r0
                    fp->flag &= (BYTE)~FA_MODIFIED;
   1da1a:	7423      	strb	r3, [r4, #16]
            }
        }
    }

    LEAVE_FF(fs, res);
}
   1da1c:	4628      	mov	r0, r5
   1da1e:	b003      	add	sp, #12
   1da20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001da22 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
    FIL* fp     /* Pointer to the file object to be closed */
)
{
   1da22:	b513      	push	{r0, r1, r4, lr}
   1da24:	4604      	mov	r4, r0
    FRESULT res;
    FATFS *fs;

#if !_FS_READONLY
    res = f_sync(fp);                   /* Flush cached data */
   1da26:	f7ff ffc5 	bl	1d9b4 <f_sync>
    if (res == FR_OK)
   1da2a:	b928      	cbnz	r0, 1da38 <f_close+0x16>
#endif
    {
        res = validate(&fp->obj, &fs);  /* Lock volume */
   1da2c:	a901      	add	r1, sp, #4
   1da2e:	4620      	mov	r0, r4
   1da30:	f7fe fcb6 	bl	1c3a0 <validate>
        if (res == FR_OK) {
   1da34:	b900      	cbnz	r0, 1da38 <f_close+0x16>
#if _FS_LOCK != 0
            res = dec_lock(fp->obj.lockid); /* Decrement file open counter */
            if (res == FR_OK)
#endif
            {
                fp->obj.fs = 0;         /* Invalidate file object */
   1da36:	6020      	str	r0, [r4, #0]
            unlock_fs(fs, FR_OK);       /* Unlock volume */
#endif
        }
    }
    return res;
}
   1da38:	b002      	add	sp, #8
   1da3a:	bd10      	pop	{r4, pc}

0001da3c <f_chdir>:

FRESULT f_chdir (
    FATFS *fs,
    const TCHAR* path   /* Pointer to the directory path */
)
{
   1da3c:	b570      	push	{r4, r5, r6, lr}
   1da3e:	460e      	mov	r6, r1
   1da40:	b08c      	sub	sp, #48	; 0x30
    FRESULT res;
    DIR dj;
    DEF_NAMBUF

    /* Get logical drive */
    res = find_volume(fs, 0);
   1da42:	2100      	movs	r1, #0
{
   1da44:	4605      	mov	r5, r0
    res = find_volume(fs, 0);
   1da46:	f7fe fd6d 	bl	1c524 <find_volume>
    if (res == FR_OK) {
   1da4a:	4604      	mov	r4, r0
   1da4c:	b968      	cbnz	r0, 1da6a <f_chdir+0x2e>
        dj.obj.fs = fs;
   1da4e:	a80c      	add	r0, sp, #48	; 0x30
        INIT_NAMBUF(fs);
        res = follow_path(&dj, path);       /* Follow the path */
   1da50:	4631      	mov	r1, r6
        dj.obj.fs = fs;
   1da52:	f840 5d30 	str.w	r5, [r0, #-48]!
        res = follow_path(&dj, path);       /* Follow the path */
   1da56:	f7ff fc2d 	bl	1d2b4 <follow_path>
        if (res == FR_OK) {                 /* Follow completed */
   1da5a:	4604      	mov	r4, r0
   1da5c:	b990      	cbnz	r0, 1da84 <f_chdir+0x48>
            if (dj.fn[NSFLAG] & NS_NONAME) {
   1da5e:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
   1da62:	2b00      	cmp	r3, #0
   1da64:	da04      	bge.n	1da70 <f_chdir+0x34>
                fs->cdir = dj.obj.sclust;   /* It is the start directory itself */
   1da66:	9b02      	ldr	r3, [sp, #8]
   1da68:	61eb      	str	r3, [r5, #28]
        FREE_NAMBUF();
        if (res == FR_NO_FILE) res = FR_NO_PATH;
    }

    LEAVE_FF(fs, res);
}
   1da6a:	4620      	mov	r0, r4
   1da6c:	b00c      	add	sp, #48	; 0x30
   1da6e:	bd70      	pop	{r4, r5, r6, pc}
                if (dj.obj.attr & AM_DIR) { /* It is a sub-directory */
   1da70:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1da74:	06db      	lsls	r3, r3, #27
   1da76:	d509      	bpl.n	1da8c <f_chdir+0x50>
                        fs->cdir = ld_clust(fs, dj.dir);                    /* Sub-directory cluster */
   1da78:	9907      	ldr	r1, [sp, #28]
   1da7a:	7968      	ldrb	r0, [r5, #5]
   1da7c:	f7fe fcb3 	bl	1c3e6 <ld_clust.isra.0>
   1da80:	61e8      	str	r0, [r5, #28]
   1da82:	e7f2      	b.n	1da6a <f_chdir+0x2e>
        if (res == FR_NO_FILE) res = FR_NO_PATH;
   1da84:	2804      	cmp	r0, #4
                    res = FR_NO_PATH;       /* Reached but a file */
   1da86:	bf08      	it	eq
   1da88:	2405      	moveq	r4, #5
   1da8a:	e7ee      	b.n	1da6a <f_chdir+0x2e>
   1da8c:	2405      	movs	r4, #5
   1da8e:	e7ec      	b.n	1da6a <f_chdir+0x2e>

0001da90 <f_getcwd>:
FRESULT f_getcwd (
    FATFS *fs,
    TCHAR* buff,    /* Pointer to the directory path */
    UINT len        /* Size of path */
)
{
   1da90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1da94:	460d      	mov	r5, r1
    TCHAR *tp;
    FILINFO fno;
    DEF_NAMBUF


    *buff = 0;
   1da96:	2100      	movs	r1, #0
{
   1da98:	b0d2      	sub	sp, #328	; 0x148
    *buff = 0;
   1da9a:	7029      	strb	r1, [r5, #0]
{
   1da9c:	4680      	mov	r8, r0
   1da9e:	4691      	mov	r9, r2
    /* Get logical drive */
    res = find_volume(fs, 0);   /* Get current volume */
   1daa0:	f7fe fd40 	bl	1c524 <find_volume>
    if (res == FR_OK) {
   1daa4:	4607      	mov	r7, r0
   1daa6:	b988      	cbnz	r0, 1dacc <f_getcwd+0x3c>
        dj.obj.fs = fs;
        INIT_NAMBUF(fs);
        i = len;            /* Bottom of buffer (directory stack base) */
        if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {    /* (Cannot do getcwd on exFAT and returns root path) */
            dj.obj.sclust = fs->cdir;               /* Start to follow upper directory from current directory */
   1daa8:	f8d8 301c 	ldr.w	r3, [r8, #28]
        dj.obj.fs = fs;
   1daac:	f8cd 8000 	str.w	r8, [sp]
            dj.obj.sclust = fs->cdir;               /* Start to follow upper directory from current directory */
   1dab0:	9302      	str	r3, [sp, #8]
            while ((ccl = dj.obj.sclust) != 0) {    /* Repeat while current directory is a sub-directory */
   1dab2:	464e      	mov	r6, r9
   1dab4:	f8dd a008 	ldr.w	sl, [sp, #8]
   1dab8:	f1ba 0f00 	cmp.w	sl, #0
   1dabc:	d10a      	bne.n	1dad4 <f_getcwd+0x44>
                buff[--i] = '/';
            }
        }
        tp = buff;
        if (res == FR_OK) {
            if (i == len) {                 /* Root-directory */
   1dabe:	454e      	cmp	r6, r9
   1dac0:	d159      	bne.n	1db76 <f_getcwd+0xe6>
                *tp++ = '/';
   1dac2:	232f      	movs	r3, #47	; 0x2f
   1dac4:	702b      	strb	r3, [r5, #0]
   1dac6:	3501      	adds	r5, #1
                do      /* Add stacked path str */
                    *tp++ = buff[i++];
                while (i < len);
            }
        }
        *tp = 0;
   1dac8:	2300      	movs	r3, #0
   1daca:	702b      	strb	r3, [r5, #0]
        FREE_NAMBUF();
    }

    LEAVE_FF(fs, res);
}
   1dacc:	4638      	mov	r0, r7
   1dace:	b052      	add	sp, #328	; 0x148
   1dad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                res = dir_sdi(&dj, 1 * SZDIRE); /* Get parent directory */
   1dad4:	2120      	movs	r1, #32
   1dad6:	4668      	mov	r0, sp
   1dad8:	f7fe ff40 	bl	1c95c <dir_sdi>
                if (res != FR_OK) break;
   1dadc:	2800      	cmp	r0, #0
   1dade:	d158      	bne.n	1db92 <f_getcwd+0x102>
                res = move_window(fs, dj.sect);
   1dae0:	9906      	ldr	r1, [sp, #24]
   1dae2:	4640      	mov	r0, r8
   1dae4:	f7fe fcc2 	bl	1c46c <move_window>
                if (res != FR_OK) break;
   1dae8:	4604      	mov	r4, r0
   1daea:	2800      	cmp	r0, #0
   1daec:	d14f      	bne.n	1db8e <f_getcwd+0xfe>
                dj.obj.sclust = ld_clust(fs, dj.dir);   /* Goto parent directory */
   1daee:	9907      	ldr	r1, [sp, #28]
   1daf0:	f898 0005 	ldrb.w	r0, [r8, #5]
   1daf4:	f7fe fc77 	bl	1c3e6 <ld_clust.isra.0>
                res = dir_sdi(&dj, 0);
   1daf8:	4621      	mov	r1, r4
                dj.obj.sclust = ld_clust(fs, dj.dir);   /* Goto parent directory */
   1dafa:	9002      	str	r0, [sp, #8]
                res = dir_sdi(&dj, 0);
   1dafc:	4668      	mov	r0, sp
   1dafe:	f7fe ff2d 	bl	1c95c <dir_sdi>
                if (res != FR_OK) break;
   1db02:	2800      	cmp	r0, #0
   1db04:	d145      	bne.n	1db92 <f_getcwd+0x102>
                    res = dir_read(&dj, 0);
   1db06:	2100      	movs	r1, #0
   1db08:	4668      	mov	r0, sp
   1db0a:	f7ff f94d 	bl	1cda8 <dir_read>
                    if (res != FR_OK) break;
   1db0e:	4604      	mov	r4, r0
   1db10:	b968      	cbnz	r0, 1db2e <f_getcwd+0x9e>
                    if (ccl == ld_clust(fs, dj.dir)) break; /* Found the entry */
   1db12:	9907      	ldr	r1, [sp, #28]
   1db14:	f898 0005 	ldrb.w	r0, [r8, #5]
   1db18:	f7fe fc65 	bl	1c3e6 <ld_clust.isra.0>
   1db1c:	4550      	cmp	r0, sl
   1db1e:	d00b      	beq.n	1db38 <f_getcwd+0xa8>
                    res = dir_next(&dj, 0);
   1db20:	4621      	mov	r1, r4
   1db22:	4668      	mov	r0, sp
   1db24:	f7ff f8a8 	bl	1cc78 <dir_next>
                } while (res == FR_OK);
   1db28:	4604      	mov	r4, r0
   1db2a:	2800      	cmp	r0, #0
   1db2c:	d0eb      	beq.n	1db06 <f_getcwd+0x76>
                if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
   1db2e:	2c04      	cmp	r4, #4
   1db30:	bf14      	ite	ne
   1db32:	4627      	movne	r7, r4
   1db34:	2702      	moveq	r7, #2
   1db36:	e7c7      	b.n	1dac8 <f_getcwd+0x38>
                get_fileinfo(&dj, &fno);        /* Get the directory name and push it to the buffer */
   1db38:	4668      	mov	r0, sp
   1db3a:	a90c      	add	r1, sp, #48	; 0x30
   1db3c:	f7fe ffdf 	bl	1cafe <get_fileinfo>
                for (n = 0; fno.fname[n]; n++) ;
   1db40:	4620      	mov	r0, r4
   1db42:	ab0c      	add	r3, sp, #48	; 0x30
   1db44:	4403      	add	r3, r0
   1db46:	7d9b      	ldrb	r3, [r3, #22]
   1db48:	b96b      	cbnz	r3, 1db66 <f_getcwd+0xd6>
                if (i < n + 3) {
   1db4a:	1cc3      	adds	r3, r0, #3
   1db4c:	42b3      	cmp	r3, r6
   1db4e:	d822      	bhi.n	1db96 <f_getcwd+0x106>
                while (n) buff[--i] = fno.fname[--n];
   1db50:	1a32      	subs	r2, r6, r0
   1db52:	4603      	mov	r3, r0
   1db54:	442a      	add	r2, r5
   1db56:	b943      	cbnz	r3, 1db6a <f_getcwd+0xda>
   1db58:	1e73      	subs	r3, r6, #1
   1db5a:	1a1b      	subs	r3, r3, r0
                buff[--i] = '/';
   1db5c:	222f      	movs	r2, #47	; 0x2f
   1db5e:	43c0      	mvns	r0, r0
   1db60:	4406      	add	r6, r0
   1db62:	54ea      	strb	r2, [r5, r3]
   1db64:	e7a6      	b.n	1dab4 <f_getcwd+0x24>
                for (n = 0; fno.fname[n]; n++) ;
   1db66:	3001      	adds	r0, #1
   1db68:	e7eb      	b.n	1db42 <f_getcwd+0xb2>
                while (n) buff[--i] = fno.fname[--n];
   1db6a:	3b01      	subs	r3, #1
   1db6c:	a90c      	add	r1, sp, #48	; 0x30
   1db6e:	4419      	add	r1, r3
   1db70:	7d89      	ldrb	r1, [r1, #22]
   1db72:	54d1      	strb	r1, [r2, r3]
   1db74:	e7ef      	b.n	1db56 <f_getcwd+0xc6>
   1db76:	19a9      	adds	r1, r5, r6
            if (i == len) {                 /* Root-directory */
   1db78:	462b      	mov	r3, r5
                    *tp++ = buff[i++];
   1db7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1db7e:	f803 2b01 	strb.w	r2, [r3], #1
                while (i < len);
   1db82:	1b5a      	subs	r2, r3, r5
   1db84:	4432      	add	r2, r6
   1db86:	4591      	cmp	r9, r2
   1db88:	d8f7      	bhi.n	1db7a <f_getcwd+0xea>
                    *tp++ = buff[i++];
   1db8a:	461d      	mov	r5, r3
   1db8c:	e79c      	b.n	1dac8 <f_getcwd+0x38>
                res = move_window(fs, dj.sect);
   1db8e:	4607      	mov	r7, r0
   1db90:	e79a      	b.n	1dac8 <f_getcwd+0x38>
                res = dir_sdi(&dj, 0);
   1db92:	4607      	mov	r7, r0
   1db94:	e798      	b.n	1dac8 <f_getcwd+0x38>
                    res = FR_NOT_ENOUGH_CORE; break;
   1db96:	2711      	movs	r7, #17
   1db98:	e796      	b.n	1dac8 <f_getcwd+0x38>

0001db9a <f_lseek>:

FRESULT f_lseek (
    FIL* fp,        /* Pointer to the file object */
    FSIZE_t ofs     /* File pointer from top of file */
)
{
   1db9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1db9c:	460d      	mov	r5, r1
    FSIZE_t ifptr;
#if _USE_FASTSEEK
    DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

    res = validate(&fp->obj, &fs);      /* Check validity of the file object */
   1db9e:	a901      	add	r1, sp, #4
{
   1dba0:	4604      	mov	r4, r0
    res = validate(&fp->obj, &fs);      /* Check validity of the file object */
   1dba2:	f7fe fbfd 	bl	1c3a0 <validate>
    if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);   /* Check validity */
   1dba6:	4606      	mov	r6, r0
   1dba8:	2800      	cmp	r0, #0
   1dbaa:	d13f      	bne.n	1dc2c <f_lseek+0x92>
   1dbac:	7c66      	ldrb	r6, [r4, #17]
   1dbae:	2e00      	cmp	r6, #0
   1dbb0:	d13c      	bne.n	1dc2c <f_lseek+0x92>
    /* Normal Seek */
    {
#if _FS_EXFAT
        if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;    /* Clip at 4GiB-1 if at FATxx */
#endif
        if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {    /* In read-only mode, clip offset with the file size */
   1dbb2:	68e3      	ldr	r3, [r4, #12]
   1dbb4:	42ab      	cmp	r3, r5
   1dbb6:	d204      	bcs.n	1dbc2 <f_lseek+0x28>
   1dbb8:	7c22      	ldrb	r2, [r4, #16]
   1dbba:	f012 0f02 	tst.w	r2, #2
   1dbbe:	bf08      	it	eq
   1dbc0:	461d      	moveq	r5, r3
            ofs = fp->obj.objsize;
        }
        ifptr = fp->fptr;
        fp->fptr = nsect = 0;
   1dbc2:	2200      	movs	r2, #0
        ifptr = fp->fptr;
   1dbc4:	6963      	ldr	r3, [r4, #20]
        fp->fptr = nsect = 0;
   1dbc6:	6162      	str	r2, [r4, #20]
        if (ofs) {
   1dbc8:	b90d      	cbnz	r5, 1dbce <f_lseek+0x34>
        fp->fptr = nsect = 0;
   1dbca:	4628      	mov	r0, r5
   1dbcc:	e01c      	b.n	1dc08 <f_lseek+0x6e>
            bcs = (DWORD)fs->csize * SS(fs);    /* Cluster size (byte) */
   1dbce:	9a01      	ldr	r2, [sp, #4]
   1dbd0:	89d7      	ldrh	r7, [r2, #14]
   1dbd2:	027f      	lsls	r7, r7, #9
            if (ifptr > 0 &&
   1dbd4:	b303      	cbz	r3, 1dc18 <f_lseek+0x7e>
                (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
   1dbd6:	3b01      	subs	r3, #1
   1dbd8:	1e6a      	subs	r2, r5, #1
   1dbda:	fbb3 f1f7 	udiv	r1, r3, r7
   1dbde:	fbb2 f2f7 	udiv	r2, r2, r7
            if (ifptr > 0 &&
   1dbe2:	428a      	cmp	r2, r1
   1dbe4:	d318      	bcc.n	1dc18 <f_lseek+0x7e>
                fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);   /* start from the current cluster */
   1dbe6:	427a      	negs	r2, r7
   1dbe8:	4013      	ands	r3, r2
                ofs -= fp->fptr;
                clst = fp->clust;
   1dbea:	69a1      	ldr	r1, [r4, #24]
                fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);   /* start from the current cluster */
   1dbec:	6163      	str	r3, [r4, #20]
                ofs -= fp->fptr;
   1dbee:	1aed      	subs	r5, r5, r3
                    fp->obj.sclust = clst;
                }
#endif
                fp->clust = clst;
            }
            if (clst != 0) {
   1dbf0:	2900      	cmp	r1, #0
   1dbf2:	d140      	bne.n	1dc76 <f_lseek+0xdc>
        fp->fptr = nsect = 0;
   1dbf4:	2000      	movs	r0, #0
                    if (!nsect) ABORT(fs, FR_INT_ERR);
                    nsect += (DWORD)(ofs / SS(fs));
                }
            }
        }
        if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {      /* Set file change flag if the file size is extended */
   1dbf6:	68e3      	ldr	r3, [r4, #12]
   1dbf8:	6965      	ldr	r5, [r4, #20]
   1dbfa:	429d      	cmp	r5, r3
            fp->obj.objsize = fp->fptr;
            fp->flag |= FA_MODIFIED;
   1dbfc:	bf81      	itttt	hi
   1dbfe:	7c23      	ldrbhi	r3, [r4, #16]
            fp->obj.objsize = fp->fptr;
   1dc00:	60e5      	strhi	r5, [r4, #12]
            fp->flag |= FA_MODIFIED;
   1dc02:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
   1dc06:	7423      	strbhi	r3, [r4, #16]
        }
        if (fp->fptr % SS(fs) && nsect != fp->sect) {   /* Fill sector cache if needed */
   1dc08:	f3c5 0508 	ubfx	r5, r5, #0, #9
   1dc0c:	b175      	cbz	r5, 1dc2c <f_lseek+0x92>
   1dc0e:	69e3      	ldr	r3, [r4, #28]
   1dc10:	4283      	cmp	r3, r0
   1dc12:	d00b      	beq.n	1dc2c <f_lseek+0x92>
                fp->flag &= (BYTE)~FA_DIRTY;
            }
#endif
            if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);    /* Fill sector cache */
#endif
            fp->sect = nsect;
   1dc14:	61e0      	str	r0, [r4, #28]
   1dc16:	e009      	b.n	1dc2c <f_lseek+0x92>
                clst = fp->obj.sclust;                  /* start from the first cluster */
   1dc18:	68a1      	ldr	r1, [r4, #8]
                if (clst == 0) {                        /* If no cluster chain, create a new chain */
   1dc1a:	b979      	cbnz	r1, 1dc3c <f_lseek+0xa2>
                    clst = create_chain(&fp->obj, 0);
   1dc1c:	4620      	mov	r0, r4
   1dc1e:	f7fe fedf 	bl	1c9e0 <create_chain>
                    if (clst == 1) ABORT(fs, FR_INT_ERR);
   1dc22:	2801      	cmp	r0, #1
                    clst = create_chain(&fp->obj, 0);
   1dc24:	4601      	mov	r1, r0
                    if (clst == 1) ABORT(fs, FR_INT_ERR);
   1dc26:	d104      	bne.n	1dc32 <f_lseek+0x98>
   1dc28:	2602      	movs	r6, #2
                    if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1dc2a:	7466      	strb	r6, [r4, #17]
        }
    }

    LEAVE_FF(fs, res);
}
   1dc2c:	4630      	mov	r0, r6
   1dc2e:	b003      	add	sp, #12
   1dc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1dc32:	3001      	adds	r0, #1
   1dc34:	d101      	bne.n	1dc3a <f_lseek+0xa0>
   1dc36:	2601      	movs	r6, #1
   1dc38:	e7f7      	b.n	1dc2a <f_lseek+0x90>
                    fp->obj.sclust = clst;
   1dc3a:	60a1      	str	r1, [r4, #8]
                fp->clust = clst;
   1dc3c:	61a1      	str	r1, [r4, #24]
   1dc3e:	e7d7      	b.n	1dbf0 <f_lseek+0x56>
                    ofs -= bcs; fp->fptr += bcs;
   1dc40:	443b      	add	r3, r7
   1dc42:	6163      	str	r3, [r4, #20]
                    if (fp->flag & FA_WRITE) {          /* Check if in write mode or not */
   1dc44:	7c23      	ldrb	r3, [r4, #16]
   1dc46:	079a      	lsls	r2, r3, #30
                    ofs -= bcs; fp->fptr += bcs;
   1dc48:	eba5 0507 	sub.w	r5, r5, r7
                    if (fp->flag & FA_WRITE) {          /* Check if in write mode or not */
   1dc4c:	d506      	bpl.n	1dc5c <f_lseek+0xc2>
                        clst = create_chain(&fp->obj, clst);    /* Follow chain with forceed stretch */
   1dc4e:	4620      	mov	r0, r4
   1dc50:	f7fe fec6 	bl	1c9e0 <create_chain>
                        if (clst == 0) {                /* Clip file size in case of disk full */
   1dc54:	4601      	mov	r1, r0
   1dc56:	b928      	cbnz	r0, 1dc64 <f_lseek+0xca>
                            ofs = 0; break;
   1dc58:	4605      	mov	r5, r0
   1dc5a:	e00f      	b.n	1dc7c <f_lseek+0xe2>
                        clst = get_fat(&fp->obj, clst); /* Follow cluster chain if not in write mode */
   1dc5c:	6820      	ldr	r0, [r4, #0]
   1dc5e:	f7fe fe23 	bl	1c8a8 <get_fat.isra.7>
   1dc62:	4601      	mov	r1, r0
                    if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1dc64:	1c4b      	adds	r3, r1, #1
   1dc66:	d0e6      	beq.n	1dc36 <f_lseek+0x9c>
                    if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   1dc68:	2901      	cmp	r1, #1
   1dc6a:	d9dd      	bls.n	1dc28 <f_lseek+0x8e>
   1dc6c:	9b01      	ldr	r3, [sp, #4]
   1dc6e:	6a1b      	ldr	r3, [r3, #32]
   1dc70:	428b      	cmp	r3, r1
   1dc72:	d9d9      	bls.n	1dc28 <f_lseek+0x8e>
                    fp->clust = clst;
   1dc74:	61a1      	str	r1, [r4, #24]
                while (ofs > bcs) {                     /* Cluster following loop */
   1dc76:	42bd      	cmp	r5, r7
   1dc78:	6963      	ldr	r3, [r4, #20]
   1dc7a:	d8e1      	bhi.n	1dc40 <f_lseek+0xa6>
                fp->fptr += ofs;
   1dc7c:	6963      	ldr	r3, [r4, #20]
   1dc7e:	442b      	add	r3, r5
   1dc80:	6163      	str	r3, [r4, #20]
                if (ofs % SS(fs)) {
   1dc82:	f3c5 0308 	ubfx	r3, r5, #0, #9
   1dc86:	2b00      	cmp	r3, #0
   1dc88:	d0b4      	beq.n	1dbf4 <f_lseek+0x5a>
                    nsect = clust2sect(fs, clst);   /* Current sector */
   1dc8a:	9801      	ldr	r0, [sp, #4]
   1dc8c:	f7fe fb6e 	bl	1c36c <clust2sect>
                    if (!nsect) ABORT(fs, FR_INT_ERR);
   1dc90:	2800      	cmp	r0, #0
   1dc92:	d0c9      	beq.n	1dc28 <f_lseek+0x8e>
                    nsect += (DWORD)(ofs / SS(fs));
   1dc94:	eb00 2055 	add.w	r0, r0, r5, lsr #9
   1dc98:	e7ad      	b.n	1dbf6 <f_lseek+0x5c>

0001dc9a <f_opendir>:
FRESULT f_opendir (
    FATFS *fs,
    DIR* dp,            /* Pointer to directory object to create */
    const TCHAR* path   /* Pointer to the directory path */
)
{
   1dc9a:	b570      	push	{r4, r5, r6, lr}
   1dc9c:	4605      	mov	r5, r0
   1dc9e:	4616      	mov	r6, r2
    FRESULT res;
    _FDID *obj;
    DEF_NAMBUF


    if (!dp) return FR_INVALID_OBJECT;
   1dca0:	460c      	mov	r4, r1
   1dca2:	b321      	cbz	r1, 1dcee <f_opendir+0x54>

    /* Get logical drive */
    obj = &dp->obj;
    res = find_volume(fs, 0);
   1dca4:	2100      	movs	r1, #0
   1dca6:	f7fe fc3d 	bl	1c524 <find_volume>
    if (res == FR_OK) {
   1dcaa:	b968      	cbnz	r0, 1dcc8 <f_opendir+0x2e>
        obj->fs = fs;
   1dcac:	6025      	str	r5, [r4, #0]
        INIT_NAMBUF(fs);
        res = follow_path(dp, path);            /* Follow the path to the directory */
   1dcae:	4631      	mov	r1, r6
   1dcb0:	4620      	mov	r0, r4
   1dcb2:	f7ff faff 	bl	1d2b4 <follow_path>
        if (res == FR_OK) {                     /* Follow completed */
   1dcb6:	b9e0      	cbnz	r0, 1dcf2 <f_opendir+0x58>
            if (!(dp->fn[NSFLAG] & NS_NONAME)) {    /* It is not the origin directory itself */
   1dcb8:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
   1dcbc:	2b00      	cmp	r3, #0
   1dcbe:	db0b      	blt.n	1dcd8 <f_opendir+0x3e>
                if (obj->attr & AM_DIR) {       /* This object is a sub-directory */
   1dcc0:	79a3      	ldrb	r3, [r4, #6]
   1dcc2:	06db      	lsls	r3, r3, #27
   1dcc4:	d403      	bmi.n	1dcce <f_opendir+0x34>
#endif
                    {
                        obj->sclust = ld_clust(fs, dp->dir);    /* Get object location */
                    }
                } else {                        /* This object is a file */
                    res = FR_NO_PATH;
   1dcc6:	2005      	movs	r0, #5
            }
        }
        FREE_NAMBUF();
        if (res == FR_NO_FILE) res = FR_NO_PATH;
    }
    if (res != FR_OK) obj->fs = 0;      /* Invalidate the directory object if function faild */
   1dcc8:	2300      	movs	r3, #0
   1dcca:	6023      	str	r3, [r4, #0]
   1dccc:	e00e      	b.n	1dcec <f_opendir+0x52>
                        obj->sclust = ld_clust(fs, dp->dir);    /* Get object location */
   1dcce:	7968      	ldrb	r0, [r5, #5]
   1dcd0:	69e1      	ldr	r1, [r4, #28]
   1dcd2:	f7fe fb88 	bl	1c3e6 <ld_clust.isra.0>
   1dcd6:	60a0      	str	r0, [r4, #8]
                obj->id = fs->id;
   1dcd8:	896b      	ldrh	r3, [r5, #10]
   1dcda:	80a3      	strh	r3, [r4, #4]
                res = dir_sdi(dp, 0);           /* Rewind directory */
   1dcdc:	2100      	movs	r1, #0
   1dcde:	4620      	mov	r0, r4
   1dce0:	f7fe fe3c 	bl	1c95c <dir_sdi>
        if (res == FR_NO_FILE) res = FR_NO_PATH;
   1dce4:	2804      	cmp	r0, #4
   1dce6:	d0ee      	beq.n	1dcc6 <f_opendir+0x2c>
    if (res != FR_OK) obj->fs = 0;      /* Invalidate the directory object if function faild */
   1dce8:	2800      	cmp	r0, #0
   1dcea:	d1ed      	bne.n	1dcc8 <f_opendir+0x2e>

    LEAVE_FF(fs, res);
}
   1dcec:	bd70      	pop	{r4, r5, r6, pc}
    if (!dp) return FR_INVALID_OBJECT;
   1dcee:	2009      	movs	r0, #9
   1dcf0:	e7fc      	b.n	1dcec <f_opendir+0x52>
        if (res == FR_NO_FILE) res = FR_NO_PATH;
   1dcf2:	2804      	cmp	r0, #4
   1dcf4:	d0e7      	beq.n	1dcc6 <f_opendir+0x2c>
   1dcf6:	e7e7      	b.n	1dcc8 <f_opendir+0x2e>

0001dcf8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
    DIR *dp     /* Pointer to the directory object to be closed */
)
{
   1dcf8:	b513      	push	{r0, r1, r4, lr}
    FRESULT res;
    FATFS *fs;


    res = validate(&dp->obj, &fs);          /* Check validity of the file object */
   1dcfa:	a901      	add	r1, sp, #4
{
   1dcfc:	4604      	mov	r4, r0
    res = validate(&dp->obj, &fs);          /* Check validity of the file object */
   1dcfe:	f7fe fb4f 	bl	1c3a0 <validate>
    if (res == FR_OK) {
   1dd02:	b900      	cbnz	r0, 1dd06 <f_closedir+0xe>
            res = dec_lock(dp->obj.lockid);
        }
        if (res == FR_OK)
#endif
        {
            dp->obj.fs = 0;         /* Invalidate directory object */
   1dd04:	6020      	str	r0, [r4, #0]
#if _FS_REENTRANT
        unlock_fs(fs, FR_OK);       /* Unlock volume */
#endif
    }
    return res;
}
   1dd06:	b002      	add	sp, #8
   1dd08:	bd10      	pop	{r4, pc}

0001dd0a <f_readdir>:

FRESULT f_readdir (
    DIR* dp,            /* Pointer to the open directory object */
    FILINFO* fno        /* Pointer to file information to return */
)
{
   1dd0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1dd0c:	460d      	mov	r5, r1
    FRESULT res;
    FATFS *fs;
    DEF_NAMBUF


    res = validate(&dp->obj, &fs);  /* Check validity of the directory object */
   1dd0e:	a901      	add	r1, sp, #4
{
   1dd10:	4604      	mov	r4, r0
    res = validate(&dp->obj, &fs);  /* Check validity of the directory object */
   1dd12:	f7fe fb45 	bl	1c3a0 <validate>
    if (res == FR_OK) {
   1dd16:	b920      	cbnz	r0, 1dd22 <f_readdir+0x18>
        if (!fno) {
            res = dir_sdi(dp, 0);           /* Rewind the directory object */
   1dd18:	4601      	mov	r1, r0
   1dd1a:	4620      	mov	r0, r4
        if (!fno) {
   1dd1c:	b91d      	cbnz	r5, 1dd26 <f_readdir+0x1c>
            res = dir_sdi(dp, 0);           /* Rewind the directory object */
   1dd1e:	f7fe fe1d 	bl	1c95c <dir_sdi>
            }
            FREE_NAMBUF();
        }
    }
    LEAVE_FF(fs, res);
}
   1dd22:	b002      	add	sp, #8
   1dd24:	bd70      	pop	{r4, r5, r6, pc}
            res = dir_read(dp, 0);          /* Read an item */
   1dd26:	f7ff f83f 	bl	1cda8 <dir_read>
            if (res == FR_OK) {             /* A valid entry is found */
   1dd2a:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
   1dd2e:	d1f8      	bne.n	1dd22 <f_readdir+0x18>
                get_fileinfo(dp, fno);      /* Get the object information */
   1dd30:	4629      	mov	r1, r5
   1dd32:	4620      	mov	r0, r4
   1dd34:	f7fe fee3 	bl	1cafe <get_fileinfo>
                res = dir_next(dp, 0);      /* Increment index for next */
   1dd38:	4631      	mov	r1, r6
   1dd3a:	4620      	mov	r0, r4
   1dd3c:	f7fe ff9c 	bl	1cc78 <dir_next>
                if (res == FR_NO_FILE) res = FR_OK; /* Ignore end of directory now */
   1dd40:	2804      	cmp	r0, #4
   1dd42:	bf08      	it	eq
   1dd44:	2000      	moveq	r0, #0
   1dd46:	e7ec      	b.n	1dd22 <f_readdir+0x18>

0001dd48 <f_stat>:
FRESULT f_stat (
    FATFS *fs,
    const TCHAR* path,  /* Pointer to the file path */
    FILINFO* fno        /* Pointer to file information to return */
)
{
   1dd48:	b570      	push	{r4, r5, r6, lr}
   1dd4a:	460e      	mov	r6, r1
   1dd4c:	b08c      	sub	sp, #48	; 0x30
    DIR dj;
    DEF_NAMBUF


    /* Get logical drive */
    res = find_volume(fs, 0);
   1dd4e:	2100      	movs	r1, #0
{
   1dd50:	4604      	mov	r4, r0
   1dd52:	4615      	mov	r5, r2
    res = find_volume(fs, 0);
   1dd54:	f7fe fbe6 	bl	1c524 <find_volume>
    dj.obj.fs = fs;
   1dd58:	9400      	str	r4, [sp, #0]
    if (res == FR_OK) {
   1dd5a:	4604      	mov	r4, r0
   1dd5c:	b970      	cbnz	r0, 1dd7c <f_stat+0x34>
        INIT_NAMBUF(dj.obj.fs);
        res = follow_path(&dj, path);   /* Follow the file path */
   1dd5e:	4631      	mov	r1, r6
   1dd60:	4668      	mov	r0, sp
   1dd62:	f7ff faa7 	bl	1d2b4 <follow_path>
        if (res == FR_OK) {             /* Follow completed */
   1dd66:	4604      	mov	r4, r0
   1dd68:	b940      	cbnz	r0, 1dd7c <f_stat+0x34>
            if (dj.fn[NSFLAG] & NS_NONAME) {    /* It is origin directory */
   1dd6a:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
   1dd6e:	2b00      	cmp	r3, #0
   1dd70:	db07      	blt.n	1dd82 <f_stat+0x3a>
                res = FR_INVALID_NAME;
            } else {                            /* Found an object */
                if (fno) get_fileinfo(&dj, fno);
   1dd72:	b11d      	cbz	r5, 1dd7c <f_stat+0x34>
   1dd74:	4629      	mov	r1, r5
   1dd76:	4668      	mov	r0, sp
   1dd78:	f7fe fec1 	bl	1cafe <get_fileinfo>
        }
        FREE_NAMBUF();
    }

    LEAVE_FF(dj.obj.fs, res);
}
   1dd7c:	4620      	mov	r0, r4
   1dd7e:	b00c      	add	sp, #48	; 0x30
   1dd80:	bd70      	pop	{r4, r5, r6, pc}
                res = FR_INVALID_NAME;
   1dd82:	2406      	movs	r4, #6
   1dd84:	e7fa      	b.n	1dd7c <f_stat+0x34>

0001dd86 <f_getfree>:

FRESULT f_getfree (
    FATFS *fs,
    DWORD* nclst        /* Pointer to a variable to return number of free clusters */
)
{
   1dd86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dd8a:	468a      	mov	sl, r1
    BYTE *p;
    _FDID obj;


    /* Get logical drive */
    res = find_volume(fs, 0);
   1dd8c:	2100      	movs	r1, #0
{
   1dd8e:	4604      	mov	r4, r0
    res = find_volume(fs, 0);
   1dd90:	f7fe fbc8 	bl	1c524 <find_volume>
    if (res == FR_OK) {
   1dd94:	4605      	mov	r5, r0
   1dd96:	b940      	cbnz	r0, 1ddaa <f_getfree+0x24>
        /* If free_clst is valid, return it without full cluster scan */
        if (fs->free_clst <= fs->n_fatent - 2) {
   1dd98:	f8d4 9020 	ldr.w	r9, [r4, #32]
   1dd9c:	69a3      	ldr	r3, [r4, #24]
   1dd9e:	f1a9 0202 	sub.w	r2, r9, #2
   1dda2:	4293      	cmp	r3, r2
   1dda4:	d804      	bhi.n	1ddb0 <f_getfree+0x2a>
            *nclst = fs->free_clst;
   1dda6:	f8ca 3000 	str.w	r3, [sl]
            fs->fsi_flag |= 1;      /* FSInfo is to be updated */
        }
    }

    LEAVE_FF(fs, res);
}
   1ddaa:	4628      	mov	r0, r5
   1ddac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (fs->fs_type == FS_FAT12) {  /* FAT12: Sector unalighed FAT entries */
   1ddb0:	7963      	ldrb	r3, [r4, #5]
   1ddb2:	2b01      	cmp	r3, #1
   1ddb4:	d117      	bne.n	1dde6 <f_getfree+0x60>
                clst = 2; obj.fs = fs;
   1ddb6:	2702      	movs	r7, #2
            nfree = 0;
   1ddb8:	4606      	mov	r6, r0
                    stat = get_fat(&obj, clst);
   1ddba:	4639      	mov	r1, r7
   1ddbc:	4620      	mov	r0, r4
   1ddbe:	f7fe fd73 	bl	1c8a8 <get_fat.isra.7>
                    if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   1ddc2:	1c43      	adds	r3, r0, #1
   1ddc4:	d03c      	beq.n	1de40 <f_getfree+0xba>
                    if (stat == 1) { res = FR_INT_ERR; break; }
   1ddc6:	2801      	cmp	r0, #1
   1ddc8:	d03c      	beq.n	1de44 <f_getfree+0xbe>
                    if (stat == 0) nfree++;
   1ddca:	b900      	cbnz	r0, 1ddce <f_getfree+0x48>
   1ddcc:	3601      	adds	r6, #1
                } while (++clst < fs->n_fatent);
   1ddce:	6a23      	ldr	r3, [r4, #32]
   1ddd0:	3701      	adds	r7, #1
   1ddd2:	42bb      	cmp	r3, r7
   1ddd4:	d8f1      	bhi.n	1ddba <f_getfree+0x34>
            *nclst = nfree;         /* Return the free clusters */
   1ddd6:	f8ca 6000 	str.w	r6, [sl]
            fs->fsi_flag |= 1;      /* FSInfo is to be updated */
   1ddda:	7a23      	ldrb	r3, [r4, #8]
            fs->free_clst = nfree;  /* Now free_clst is valid */
   1dddc:	61a6      	str	r6, [r4, #24]
            fs->fsi_flag |= 1;      /* FSInfo is to be updated */
   1ddde:	f043 0301 	orr.w	r3, r3, #1
   1dde2:	7223      	strb	r3, [r4, #8]
   1dde4:	e7e1      	b.n	1ddaa <f_getfree+0x24>
                    clst = fs->n_fatent; sect = fs->fatbase;
   1dde6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
                    i = 0; p = 0;
   1dde8:	4607      	mov	r7, r0
   1ddea:	4680      	mov	r8, r0
            nfree = 0;
   1ddec:	4606      	mov	r6, r0
                        if (i == 0) {
   1ddee:	f1b8 0f00 	cmp.w	r8, #0
   1ddf2:	d10a      	bne.n	1de0a <f_getfree+0x84>
                            res = move_window(fs, sect++);
   1ddf4:	4620      	mov	r0, r4
   1ddf6:	f101 0801 	add.w	r8, r1, #1
   1ddfa:	f7fe fb37 	bl	1c46c <move_window>
                            if (res != FR_OK) break;
   1ddfe:	bb18      	cbnz	r0, 1de48 <f_getfree+0xc2>
                            res = move_window(fs, sect++);
   1de00:	4641      	mov	r1, r8
                            p = fs->win;
   1de02:	f104 073c 	add.w	r7, r4, #60	; 0x3c
                            i = SS(fs);
   1de06:	f44f 7800 	mov.w	r8, #512	; 0x200
                        if (fs->fs_type == FS_FAT16) {
   1de0a:	7963      	ldrb	r3, [r4, #5]
   1de0c:	2b02      	cmp	r3, #2
   1de0e:	d10c      	bne.n	1de2a <f_getfree+0xa4>
    rv = rv << 8 | ptr[0];
   1de10:	787a      	ldrb	r2, [r7, #1]
   1de12:	783b      	ldrb	r3, [r7, #0]
                            if (ld_word(p) == 0) nfree++;
   1de14:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
   1de18:	bf08      	it	eq
   1de1a:	3601      	addeq	r6, #1
                            p += 2; i -= 2;
   1de1c:	3702      	adds	r7, #2
   1de1e:	f1a8 0802 	sub.w	r8, r8, #2
                    } while (--clst);
   1de22:	f1b9 0901 	subs.w	r9, r9, #1
   1de26:	d1e2      	bne.n	1ddee <f_getfree+0x68>
   1de28:	e7d5      	b.n	1ddd6 <f_getfree+0x50>
                            if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
   1de2a:	4638      	mov	r0, r7
   1de2c:	f7fe fa8e 	bl	1c34c <ld_dword>
   1de30:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
   1de34:	bf08      	it	eq
   1de36:	3601      	addeq	r6, #1
                            p += 4; i -= 4;
   1de38:	3704      	adds	r7, #4
   1de3a:	f1a8 0804 	sub.w	r8, r8, #4
   1de3e:	e7f0      	b.n	1de22 <f_getfree+0x9c>
                    if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   1de40:	2501      	movs	r5, #1
   1de42:	e7c8      	b.n	1ddd6 <f_getfree+0x50>
                    if (stat == 1) { res = FR_INT_ERR; break; }
   1de44:	2502      	movs	r5, #2
   1de46:	e7c6      	b.n	1ddd6 <f_getfree+0x50>
                            res = move_window(fs, sect++);
   1de48:	4605      	mov	r5, r0
   1de4a:	e7c4      	b.n	1ddd6 <f_getfree+0x50>

0001de4c <f_unlink>:

FRESULT f_unlink (
    FATFS *fs,
    const TCHAR* path       /* Pointer to the file or directory path */
)
{
   1de4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de4e:	460e      	mov	r6, r1
   1de50:	b099      	sub	sp, #100	; 0x64
#endif
    DEF_NAMBUF


    /* Get logical drive */
    res = find_volume(fs, FA_WRITE);
   1de52:	2102      	movs	r1, #2
{
   1de54:	4605      	mov	r5, r0
    res = find_volume(fs, FA_WRITE);
   1de56:	f7fe fb65 	bl	1c524 <find_volume>
    dj.obj.fs = fs;
   1de5a:	9500      	str	r5, [sp, #0]
    if (res == FR_OK) {
   1de5c:	4604      	mov	r4, r0
   1de5e:	b980      	cbnz	r0, 1de82 <f_unlink+0x36>
        INIT_NAMBUF(fs);
        res = follow_path(&dj, path);       /* Follow the file path */
   1de60:	4631      	mov	r1, r6
   1de62:	4668      	mov	r0, sp
   1de64:	f7ff fa26 	bl	1d2b4 <follow_path>
        if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
   1de68:	4604      	mov	r4, r0
   1de6a:	b950      	cbnz	r0, 1de82 <f_unlink+0x36>
   1de6c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1de70:	0698      	lsls	r0, r3, #26
   1de72:	d43b      	bmi.n	1deec <f_unlink+0xa0>
        }
#if _FS_LOCK != 0
        if (res == FR_OK) res = chk_lock(&dj, 2);   /* Check if it is an open object */
#endif
        if (res == FR_OK) {                 /* The object is accessible */
            if (dj.fn[NSFLAG] & NS_NONAME) {
   1de74:	0619      	lsls	r1, r3, #24
   1de76:	d439      	bmi.n	1deec <f_unlink+0xa0>
                res = FR_INVALID_NAME;      /* Cannot remove the origin directory */
            } else {
                if (dj.obj.attr & AM_RDO) {
   1de78:	f89d 7006 	ldrb.w	r7, [sp, #6]
   1de7c:	07fa      	lsls	r2, r7, #31
   1de7e:	d503      	bpl.n	1de88 <f_unlink+0x3c>
                    res = FR_DENIED;        /* Cannot remove R/O object */
   1de80:	2407      	movs	r4, #7
        }
        FREE_NAMBUF();
    }

    LEAVE_FF(fs, res);
}
   1de82:	4620      	mov	r0, r4
   1de84:	b019      	add	sp, #100	; 0x64
   1de86:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    dclst = ld_clust(fs, dj.dir);
   1de88:	9907      	ldr	r1, [sp, #28]
   1de8a:	7968      	ldrb	r0, [r5, #5]
   1de8c:	f7fe faab 	bl	1c3e6 <ld_clust.isra.0>
                if (dj.obj.attr & AM_DIR) {         /* Is it a sub-directory ? */
   1de90:	06fb      	lsls	r3, r7, #27
                    dclst = ld_clust(fs, dj.dir);
   1de92:	4606      	mov	r6, r0
                if (dj.obj.attr & AM_DIR) {         /* Is it a sub-directory ? */
   1de94:	d40b      	bmi.n	1deae <f_unlink+0x62>
                res = dir_remove(&dj);          /* Remove the directory entry */
   1de96:	4668      	mov	r0, sp
   1de98:	f7ff f81c 	bl	1ced4 <dir_remove>
                if (res == FR_OK && dclst) {    /* Remove the cluster chain if exist */
   1de9c:	4604      	mov	r4, r0
   1de9e:	2800      	cmp	r0, #0
   1dea0:	d1ef      	bne.n	1de82 <f_unlink+0x36>
   1dea2:	b9d6      	cbnz	r6, 1deda <f_unlink+0x8e>
                if (res == FR_OK) res = sync_fs(fs);
   1dea4:	4628      	mov	r0, r5
   1dea6:	f7fe fe9c 	bl	1cbe2 <sync_fs>
   1deaa:	4604      	mov	r4, r0
   1deac:	e7e9      	b.n	1de82 <f_unlink+0x36>
                    if (dclst == fs->cdir) {                /* Is it the current directory? */
   1deae:	69eb      	ldr	r3, [r5, #28]
   1deb0:	4283      	cmp	r3, r0
   1deb2:	d0e5      	beq.n	1de80 <f_unlink+0x34>
                        sdj.obj.sclust = dclst;
   1deb4:	900e      	str	r0, [sp, #56]	; 0x38
                        res = dir_sdi(&sdj, 0);
   1deb6:	4621      	mov	r1, r4
   1deb8:	a80c      	add	r0, sp, #48	; 0x30
                        sdj.obj.fs = fs;                        /* Open the sub-directory */
   1deba:	950c      	str	r5, [sp, #48]	; 0x30
                        res = dir_sdi(&sdj, 0);
   1debc:	f7fe fd4e 	bl	1c95c <dir_sdi>
                        if (res == FR_OK) {
   1dec0:	4604      	mov	r4, r0
   1dec2:	2800      	cmp	r0, #0
   1dec4:	d1dd      	bne.n	1de82 <f_unlink+0x36>
                            res = dir_read(&sdj, 0);            /* Read an item */
   1dec6:	4601      	mov	r1, r0
   1dec8:	a80c      	add	r0, sp, #48	; 0x30
   1deca:	f7fe ff6d 	bl	1cda8 <dir_read>
                            if (res == FR_OK) res = FR_DENIED;  /* Not empty? */
   1dece:	4604      	mov	r4, r0
   1ded0:	2800      	cmp	r0, #0
   1ded2:	d0d5      	beq.n	1de80 <f_unlink+0x34>
                            if (res == FR_NO_FILE) res = FR_OK; /* Empty? */
   1ded4:	2804      	cmp	r0, #4
   1ded6:	d1d4      	bne.n	1de82 <f_unlink+0x36>
   1ded8:	e7dd      	b.n	1de96 <f_unlink+0x4a>
                    res = remove_chain(&dj.obj, dclst, 0);
   1deda:	4602      	mov	r2, r0
   1dedc:	4631      	mov	r1, r6
   1dede:	4668      	mov	r0, sp
   1dee0:	f7fe fdd6 	bl	1ca90 <remove_chain>
                if (res == FR_OK) res = sync_fs(fs);
   1dee4:	4604      	mov	r4, r0
   1dee6:	2800      	cmp	r0, #0
   1dee8:	d0dc      	beq.n	1dea4 <f_unlink+0x58>
   1deea:	e7ca      	b.n	1de82 <f_unlink+0x36>
            res = FR_INVALID_NAME;          /* Cannot remove dot entry */
   1deec:	2406      	movs	r4, #6
   1deee:	e7c8      	b.n	1de82 <f_unlink+0x36>

0001def0 <f_mkdir>:

FRESULT f_mkdir (
    FATFS *fs,
    const TCHAR* path       /* Pointer to the directory path */
)
{
   1def0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1def4:	460e      	mov	r6, r1
   1def6:	b08d      	sub	sp, #52	; 0x34
    DWORD dsc, dcl, pcl, tm;
    DEF_NAMBUF


    /* Get logical drive */
    res = find_volume(fs, FA_WRITE);
   1def8:	2102      	movs	r1, #2
{
   1defa:	4604      	mov	r4, r0
    res = find_volume(fs, FA_WRITE);
   1defc:	f7fe fb12 	bl	1c524 <find_volume>
    dj.obj.fs = fs;
   1df00:	9400      	str	r4, [sp, #0]
    if (res == FR_OK) {
   1df02:	4605      	mov	r5, r0
   1df04:	2800      	cmp	r0, #0
   1df06:	f040 80a3 	bne.w	1e050 <f_mkdir+0x160>
        INIT_NAMBUF(fs);
        res = follow_path(&dj, path);           /* Follow the file path */
   1df0a:	4631      	mov	r1, r6
   1df0c:	4668      	mov	r0, sp
   1df0e:	f7ff f9d1 	bl	1d2b4 <follow_path>
        if (res == FR_OK) res = FR_EXIST;       /* Any object with same name is already existing */
   1df12:	4605      	mov	r5, r0
   1df14:	2800      	cmp	r0, #0
   1df16:	f000 809f 	beq.w	1e058 <f_mkdir+0x168>
        if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
   1df1a:	2804      	cmp	r0, #4
   1df1c:	f040 8098 	bne.w	1e050 <f_mkdir+0x160>
   1df20:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
   1df24:	f011 0120 	ands.w	r1, r1, #32
   1df28:	f040 8098 	bne.w	1e05c <f_mkdir+0x16c>
            res = FR_INVALID_NAME;
        }
        if (res == FR_NO_FILE) {                /* Can create a new directory */
            dcl = create_chain(&dj.obj, 0);     /* Allocate a cluster for the new directory table */
   1df2c:	4668      	mov	r0, sp
   1df2e:	f7fe fd57 	bl	1c9e0 <create_chain>
            dj.obj.objsize = (DWORD)fs->csize * SS(fs);
   1df32:	89e3      	ldrh	r3, [r4, #14]
   1df34:	025b      	lsls	r3, r3, #9
   1df36:	9303      	str	r3, [sp, #12]
            res = FR_OK;
            if (dcl == 0) res = FR_DENIED;      /* No space to allocate a new cluster */
   1df38:	4606      	mov	r6, r0
   1df3a:	2800      	cmp	r0, #0
   1df3c:	d05c      	beq.n	1dff8 <f_mkdir+0x108>
            if (dcl == 1) res = FR_INT_ERR;
   1df3e:	2801      	cmp	r0, #1
   1df40:	d05c      	beq.n	1dffc <f_mkdir+0x10c>
            if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   1df42:	1c43      	adds	r3, r0, #1
   1df44:	d05c      	beq.n	1e000 <f_mkdir+0x110>
            if (res == FR_OK) res = sync_window(fs);    /* Flush FAT */
   1df46:	4620      	mov	r0, r4
   1df48:	f7fe fa8a 	bl	1c460 <sync_window>
   1df4c:	4605      	mov	r5, r0
            tm = GET_FATTIME();
   1df4e:	f7fd fa2d 	bl	1b3ac <get_fattime>
   1df52:	4682      	mov	sl, r0
            if (res == FR_OK) {                 /* Initialize the new directory table */
   1df54:	2d00      	cmp	r5, #0
   1df56:	d149      	bne.n	1dfec <f_mkdir+0xfc>
                dsc = clust2sect(fs, dcl);
   1df58:	4631      	mov	r1, r6
   1df5a:	4620      	mov	r0, r4
   1df5c:	f7fe fa06 	bl	1c36c <clust2sect>
                dir = fs->win;
   1df60:	f104 073c 	add.w	r7, r4, #60	; 0x3c
                mem_set(dir, 0, SS(fs));
   1df64:	f44f 7200 	mov.w	r2, #512	; 0x200
   1df68:	4629      	mov	r1, r5
                dsc = clust2sect(fs, dcl);
   1df6a:	4681      	mov	r9, r0
                mem_set(dir, 0, SS(fs));
   1df6c:	4638      	mov	r0, r7
   1df6e:	f7fd fc85 	bl	1b87c <memset>
                if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
                    mem_set(dir + DIR_Name, ' ', 11);   /* Create "." entry */
   1df72:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   1df76:	63e3      	str	r3, [r4, #60]	; 0x3c
   1df78:	607b      	str	r3, [r7, #4]
   1df7a:	f8c7 3007 	str.w	r3, [r7, #7]
                    dir[DIR_Name] = '.';
   1df7e:	232e      	movs	r3, #46	; 0x2e
   1df80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
                    dir[DIR_Attr] = AM_DIR;
   1df84:	2310      	movs	r3, #16
   1df86:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
                    st_dword(dir + DIR_ModTime, tm);
   1df8a:	4651      	mov	r1, sl
   1df8c:	f104 0052 	add.w	r0, r4, #82	; 0x52
   1df90:	f104 0805 	add.w	r8, r4, #5
   1df94:	f7fe f9e2 	bl	1c35c <st_dword>
                    st_clust(fs, dir, dcl);
   1df98:	4632      	mov	r2, r6
   1df9a:	4639      	mov	r1, r7
   1df9c:	4640      	mov	r0, r8
   1df9e:	f7fe fa30 	bl	1c402 <st_clust.isra.1>
                    mem_cpy(dir + SZDIRE, dir, SZDIRE);     /* Create ".." entry */
   1dfa2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   1dfa6:	463b      	mov	r3, r7
   1dfa8:	460a      	mov	r2, r1
   1dfaa:	f853 0b04 	ldr.w	r0, [r3], #4
   1dfae:	f842 0b04 	str.w	r0, [r2], #4
   1dfb2:	428b      	cmp	r3, r1
   1dfb4:	d1f9      	bne.n	1dfaa <f_mkdir+0xba>
                    dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   1dfb6:	232e      	movs	r3, #46	; 0x2e
   1dfb8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
                    if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
   1dfbc:	7963      	ldrb	r3, [r4, #5]
                    dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   1dfbe:	9a02      	ldr	r2, [sp, #8]
                    if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
   1dfc0:	2b03      	cmp	r3, #3
   1dfc2:	d103      	bne.n	1dfcc <f_mkdir+0xdc>
   1dfc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dfc6:	4293      	cmp	r3, r2
   1dfc8:	bf08      	it	eq
   1dfca:	2200      	moveq	r2, #0
                    st_clust(fs, dir + SZDIRE, pcl);
   1dfcc:	4640      	mov	r0, r8
   1dfce:	f7fe fa18 	bl	1c402 <st_clust.isra.1>
                }
                for (n = fs->csize; n; n--) {   /* Write dot entries and clear following sectors */
   1dfd2:	f8b4 b00e 	ldrh.w	fp, [r4, #14]
   1dfd6:	44d9      	add	r9, fp
   1dfd8:	eba9 020b 	sub.w	r2, r9, fp
   1dfdc:	f1bb 0f00 	cmp.w	fp, #0
   1dfe0:	d110      	bne.n	1e004 <f_mkdir+0x114>
                    res = sync_window(fs);
                    if (res != FR_OK) break;
                    mem_set(dir, 0, SS(fs));
                }
            }
            if (res == FR_OK) res = dir_register(&dj);  /* Register the object to the directoy */
   1dfe2:	4668      	mov	r0, sp
   1dfe4:	f7ff f848 	bl	1d078 <dir_register>
            if (res == FR_OK) {
   1dfe8:	4605      	mov	r5, r0
   1dfea:	b1f0      	cbz	r0, 1e02a <f_mkdir+0x13a>
                    dir[DIR_Attr] = AM_DIR;             /* Attribute */
                    fs->wflag = 1;
                }
                if (res == FR_OK) res = sync_fs(fs);
            } else {
                remove_chain(&dj.obj, dcl, 0);      /* Could not register, remove cluster chain */
   1dfec:	2200      	movs	r2, #0
   1dfee:	4631      	mov	r1, r6
   1dff0:	4668      	mov	r0, sp
   1dff2:	f7fe fd4d 	bl	1ca90 <remove_chain>
   1dff6:	e02b      	b.n	1e050 <f_mkdir+0x160>
            if (dcl == 0) res = FR_DENIED;      /* No space to allocate a new cluster */
   1dff8:	2507      	movs	r5, #7
   1dffa:	e7a8      	b.n	1df4e <f_mkdir+0x5e>
            if (dcl == 1) res = FR_INT_ERR;
   1dffc:	2502      	movs	r5, #2
   1dffe:	e7a6      	b.n	1df4e <f_mkdir+0x5e>
            if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   1e000:	2501      	movs	r5, #1
   1e002:	e7a4      	b.n	1df4e <f_mkdir+0x5e>
                    fs->wflag = 1;
   1e004:	f04f 0301 	mov.w	r3, #1
                    fs->winsect = dsc++;
   1e008:	63a2      	str	r2, [r4, #56]	; 0x38
                    fs->wflag = 1;
   1e00a:	71e3      	strb	r3, [r4, #7]
   1e00c:	4620      	mov	r0, r4
   1e00e:	f7fe fa04 	bl	1c41a <sync_window.part.2>
                    if (res != FR_OK) break;
   1e012:	4605      	mov	r5, r0
   1e014:	2800      	cmp	r0, #0
   1e016:	d1e9      	bne.n	1dfec <f_mkdir+0xfc>
                    mem_set(dir, 0, SS(fs));
   1e018:	4601      	mov	r1, r0
   1e01a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e01e:	4638      	mov	r0, r7
   1e020:	f7fd fc2c 	bl	1b87c <memset>
                for (n = fs->csize; n; n--) {   /* Write dot entries and clear following sectors */
   1e024:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1e028:	e7d6      	b.n	1dfd8 <f_mkdir+0xe8>
                    dir = dj.dir;
   1e02a:	9d07      	ldr	r5, [sp, #28]
                    st_dword(dir + DIR_ModTime, tm);    /* Created time */
   1e02c:	4651      	mov	r1, sl
   1e02e:	f105 0016 	add.w	r0, r5, #22
   1e032:	f7fe f993 	bl	1c35c <st_dword>
                    st_clust(fs, dir, dcl);             /* Table start cluster */
   1e036:	4629      	mov	r1, r5
   1e038:	4632      	mov	r2, r6
   1e03a:	4640      	mov	r0, r8
   1e03c:	f7fe f9e1 	bl	1c402 <st_clust.isra.1>
                    dir[DIR_Attr] = AM_DIR;             /* Attribute */
   1e040:	2310      	movs	r3, #16
   1e042:	72eb      	strb	r3, [r5, #11]
                    fs->wflag = 1;
   1e044:	2301      	movs	r3, #1
   1e046:	71e3      	strb	r3, [r4, #7]
                if (res == FR_OK) res = sync_fs(fs);
   1e048:	4620      	mov	r0, r4
   1e04a:	f7fe fdca 	bl	1cbe2 <sync_fs>
   1e04e:	4605      	mov	r5, r0
        }
        FREE_NAMBUF();
    }

    LEAVE_FF(fs, res);
}
   1e050:	4628      	mov	r0, r5
   1e052:	b00d      	add	sp, #52	; 0x34
   1e054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (res == FR_OK) res = FR_EXIST;       /* Any object with same name is already existing */
   1e058:	2508      	movs	r5, #8
   1e05a:	e7f9      	b.n	1e050 <f_mkdir+0x160>
            res = FR_INVALID_NAME;
   1e05c:	2506      	movs	r5, #6
    LEAVE_FF(fs, res);
   1e05e:	e7f7      	b.n	1e050 <f_mkdir+0x160>

0001e060 <f_rename>:
FRESULT f_rename (
    FATFS *fs,
    const TCHAR* path_old,  /* Pointer to the object name to be renamed */
    const TCHAR* path_new   /* Pointer to the new name */
)
{
   1e060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e064:	460c      	mov	r4, r1
   1e066:	b09e      	sub	sp, #120	; 0x78
    BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
    DWORD dw;
    DEF_NAMBUF


    res = find_volume(fs, FA_WRITE);
   1e068:	2102      	movs	r1, #2
{
   1e06a:	4606      	mov	r6, r0
   1e06c:	4690      	mov	r8, r2
    res = find_volume(fs, FA_WRITE);
   1e06e:	f7fe fa59 	bl	1c524 <find_volume>
    if (res == FR_OK) {
   1e072:	2800      	cmp	r0, #0
   1e074:	d17c      	bne.n	1e170 <f_rename+0x110>
        djo.obj.fs = fs;
   1e076:	af1e      	add	r7, sp, #120	; 0x78
        INIT_NAMBUF(fs);
        res = follow_path(&djo, path_old);      /* Check old object */
   1e078:	4621      	mov	r1, r4
        djo.obj.fs = fs;
   1e07a:	f847 6d60 	str.w	r6, [r7, #-96]!
        res = follow_path(&djo, path_old);      /* Check old object */
   1e07e:	4638      	mov	r0, r7
   1e080:	f7ff f918 	bl	1d2b4 <follow_path>
        if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME; /* Check validity of name */
   1e084:	2800      	cmp	r0, #0
   1e086:	d173      	bne.n	1e170 <f_rename+0x110>
   1e088:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1e08c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
   1e090:	d171      	bne.n	1e176 <f_rename+0x116>
                    }
                }
            } else
#endif
            {   /* At FAT12/FAT16/FAT32 */
                mem_cpy(buf, djo.dir + DIR_Attr, 21);   /* Save information about the object except name */
   1e092:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1e094:	466a      	mov	r2, sp
   1e096:	f104 030b 	add.w	r3, r4, #11
   1e09a:	341b      	adds	r4, #27
   1e09c:	6818      	ldr	r0, [r3, #0]
   1e09e:	6859      	ldr	r1, [r3, #4]
   1e0a0:	4615      	mov	r5, r2
   1e0a2:	c503      	stmia	r5!, {r0, r1}
   1e0a4:	3308      	adds	r3, #8
   1e0a6:	42a3      	cmp	r3, r4
   1e0a8:	462a      	mov	r2, r5
   1e0aa:	d1f7      	bne.n	1e09c <f_rename+0x3c>
   1e0ac:	6818      	ldr	r0, [r3, #0]
   1e0ae:	6028      	str	r0, [r5, #0]
   1e0b0:	791b      	ldrb	r3, [r3, #4]
   1e0b2:	712b      	strb	r3, [r5, #4]
                mem_cpy(&djn, &djo, sizeof (DIR));      /* Duplicate the directory object */
   1e0b4:	463d      	mov	r5, r7
   1e0b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e0b8:	ac12      	add	r4, sp, #72	; 0x48
   1e0ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e0bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e0be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e0c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e0c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                res = follow_path(&djn, path_new);      /* Make sure if new object name is not in use */
   1e0c8:	4641      	mov	r1, r8
   1e0ca:	a812      	add	r0, sp, #72	; 0x48
   1e0cc:	f7ff f8f2 	bl	1d2b4 <follow_path>
                if (res == FR_OK) {                     /* Is new name already in use by any other object? */
   1e0d0:	b948      	cbnz	r0, 1e0e6 <f_rename+0x86>
                    res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   1e0d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1e0d4:	9b08      	ldr	r3, [sp, #32]
   1e0d6:	429a      	cmp	r2, r3
   1e0d8:	d103      	bne.n	1e0e2 <f_rename+0x82>
   1e0da:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1e0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e0de:	429a      	cmp	r2, r3
   1e0e0:	d003      	beq.n	1e0ea <f_rename+0x8a>
   1e0e2:	2008      	movs	r0, #8
   1e0e4:	e044      	b.n	1e170 <f_rename+0x110>
                }
                if (res == FR_NO_FILE) {                /* It is a valid path and no name collision */
   1e0e6:	2804      	cmp	r0, #4
   1e0e8:	d142      	bne.n	1e170 <f_rename+0x110>
                    res = dir_register(&djn);           /* Register the new entry */
   1e0ea:	a812      	add	r0, sp, #72	; 0x48
   1e0ec:	f7fe ffc4 	bl	1d078 <dir_register>
                    if (res == FR_OK) {
   1e0f0:	2800      	cmp	r0, #0
   1e0f2:	d13d      	bne.n	1e170 <f_rename+0x110>
                        dir = djn.dir;                  /* Copy information about object except name */
   1e0f4:	9919      	ldr	r1, [sp, #100]	; 0x64
                        mem_cpy(dir + 13, buf + 2, 19);
   1e0f6:	f10d 0302 	add.w	r3, sp, #2
   1e0fa:	f101 020d 	add.w	r2, r1, #13
   1e0fe:	f10d 0012 	add.w	r0, sp, #18
   1e102:	f853 4b04 	ldr.w	r4, [r3], #4
   1e106:	f842 4b04 	str.w	r4, [r2], #4
   1e10a:	4283      	cmp	r3, r0
   1e10c:	d1f9      	bne.n	1e102 <f_rename+0xa2>
   1e10e:	8818      	ldrh	r0, [r3, #0]
   1e110:	8010      	strh	r0, [r2, #0]
   1e112:	789b      	ldrb	r3, [r3, #2]
   1e114:	7093      	strb	r3, [r2, #2]
                        dir[DIR_Attr] = buf[0] | AM_ARC;
   1e116:	f89d 3000 	ldrb.w	r3, [sp]
                        fs->wflag = 1;
   1e11a:	2401      	movs	r4, #1
                        dir[DIR_Attr] = buf[0] | AM_ARC;
   1e11c:	f043 0320 	orr.w	r3, r3, #32
   1e120:	72cb      	strb	r3, [r1, #11]
                        fs->wflag = 1;
   1e122:	71f4      	strb	r4, [r6, #7]
                        if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) { /* Update .. entry in the sub-directory if needed */
   1e124:	7acb      	ldrb	r3, [r1, #11]
   1e126:	06db      	lsls	r3, r3, #27
   1e128:	d51b      	bpl.n	1e162 <f_rename+0x102>
   1e12a:	9a08      	ldr	r2, [sp, #32]
   1e12c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1e12e:	429a      	cmp	r2, r3
   1e130:	d017      	beq.n	1e162 <f_rename+0x102>
                            dw = clust2sect(fs, ld_clust(fs, dir));
   1e132:	7970      	ldrb	r0, [r6, #5]
   1e134:	f7fe f957 	bl	1c3e6 <ld_clust.isra.0>
   1e138:	4601      	mov	r1, r0
   1e13a:	4630      	mov	r0, r6
   1e13c:	f7fe f916 	bl	1c36c <clust2sect>
                            if (!dw) {
   1e140:	4601      	mov	r1, r0
   1e142:	b1d0      	cbz	r0, 1e17a <f_rename+0x11a>
                                res = FR_INT_ERR;
                            } else {
/* Start of critical section where any interruption can cause a cross-link */
                                res = move_window(fs, dw);
   1e144:	4630      	mov	r0, r6
   1e146:	f7fe f991 	bl	1c46c <move_window>
                                dir = fs->win + SZDIRE * 1; /* Ptr to .. entry */
                                if (res == FR_OK && dir[1] == '.') {
   1e14a:	b988      	cbnz	r0, 1e170 <f_rename+0x110>
   1e14c:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
   1e150:	2b2e      	cmp	r3, #46	; 0x2e
   1e152:	d106      	bne.n	1e162 <f_rename+0x102>
                                    st_clust(fs, dir, djn.obj.sclust);
   1e154:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1e156:	f106 015c 	add.w	r1, r6, #92	; 0x5c
   1e15a:	1d70      	adds	r0, r6, #5
   1e15c:	f7fe f951 	bl	1c402 <st_clust.isra.1>
                                    fs->wflag = 1;
   1e160:	71f4      	strb	r4, [r6, #7]
                        }
                    }
                }
            }
            if (res == FR_OK) {
                res = dir_remove(&djo);     /* Remove old entry */
   1e162:	4638      	mov	r0, r7
   1e164:	f7fe feb6 	bl	1ced4 <dir_remove>
                if (res == FR_OK) {
   1e168:	b910      	cbnz	r0, 1e170 <f_rename+0x110>
                    res = sync_fs(fs);
   1e16a:	4630      	mov	r0, r6
   1e16c:	f7fe fd39 	bl	1cbe2 <sync_fs>
        }
        FREE_NAMBUF();
    }

    LEAVE_FF(fs, res);
}
   1e170:	b01e      	add	sp, #120	; 0x78
   1e172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME; /* Check validity of name */
   1e176:	2006      	movs	r0, #6
   1e178:	e7fa      	b.n	1e170 <f_rename+0x110>
                                res = FR_INT_ERR;
   1e17a:	2002      	movs	r0, #2
   1e17c:	e7f8      	b.n	1e170 <f_rename+0x110>
	...

0001e180 <f_mkfs>:
    BYTE opt,           /* Format option */
    DWORD au,           /* Size of allocation unit [byte] */
    void* work,         /* Pointer to working buffer */
    UINT len            /* Size of working buffer */
)
{
   1e180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif


    /* Check mounted drive and clear work area */
    fs->fs_type = 0;    /* Clear mounted volume */
    pdrv = fs->drv;     /* Physical drive */
   1e184:	6806      	ldr	r6, [r0, #0]
{
   1e186:	b08b      	sub	sp, #44	; 0x2c
   1e188:	461c      	mov	r4, r3
    fs->fs_type = 0;    /* Clear mounted volume */
   1e18a:	2300      	movs	r3, #0
   1e18c:	7143      	strb	r3, [r0, #5]
{
   1e18e:	9103      	str	r1, [sp, #12]
    part = LD2PT(fs);   /* Partition (0:create as new, 1-4:get from partition table) */
   1e190:	7903      	ldrb	r3, [r0, #4]
   1e192:	9302      	str	r3, [sp, #8]
{
   1e194:	4615      	mov	r5, r2

    /* Check physical drive status */
    disk_ioctl(pdrv, IOCTL_INIT, &stat);
   1e196:	2105      	movs	r1, #5
   1e198:	f10d 021f 	add.w	r2, sp, #31
   1e19c:	4630      	mov	r0, r6
   1e19e:	f7f9 fe95 	bl	17ecc <disk_ioctl>
    if (stat & STA_NOINIT) return FR_NOT_READY;
   1e1a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1e1a6:	07df      	lsls	r7, r3, #31
   1e1a8:	f100 8283 	bmi.w	1e6b2 <f_mkfs+0x532>
    if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   1e1ac:	0758      	lsls	r0, r3, #29
   1e1ae:	f100 8282 	bmi.w	1e6b6 <f_mkfs+0x536>
    if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;    /* Erase block to align data area */
   1e1b2:	aa08      	add	r2, sp, #32
   1e1b4:	2103      	movs	r1, #3
   1e1b6:	4630      	mov	r0, r6
   1e1b8:	f7f9 fe88 	bl	17ecc <disk_ioctl>
   1e1bc:	b930      	cbnz	r0, 1e1cc <f_mkfs+0x4c>
   1e1be:	9a08      	ldr	r2, [sp, #32]
   1e1c0:	1e53      	subs	r3, r2, #1
   1e1c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e1c6:	d201      	bcs.n	1e1cc <f_mkfs+0x4c>
   1e1c8:	421a      	tst	r2, r3
   1e1ca:	d001      	beq.n	1e1d0 <f_mkfs+0x50>
   1e1cc:	2301      	movs	r3, #1
   1e1ce:	9308      	str	r3, [sp, #32]
    if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
    if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
    ss = _MAX_SS;
#endif
    if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER; /* Check if au is valid */
   1e1d0:	b145      	cbz	r5, 1e1e4 <f_mkfs+0x64>
   1e1d2:	4b5c      	ldr	r3, [pc, #368]	; (1e344 <f_mkfs+0x1c4>)
   1e1d4:	f5a5 7200 	sub.w	r2, r5, #512	; 0x200
   1e1d8:	429a      	cmp	r2, r3
   1e1da:	d903      	bls.n	1e1e4 <f_mkfs+0x64>
   1e1dc:	2013      	movs	r0, #19
    }

    if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

    return FR_OK;
}
   1e1de:	b00b      	add	sp, #44	; 0x2c
   1e1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER; /* Check if au is valid */
   1e1e4:	1e6a      	subs	r2, r5, #1
   1e1e6:	402a      	ands	r2, r5
   1e1e8:	d1f8      	bne.n	1e1dc <f_mkfs+0x5c>
    szb_buf = sz_buf * ss;  /* Size of working buffer (byte) */
   1e1ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1e1ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1e1f0:	f023 0301 	bic.w	r3, r3, #1
   1e1f4:	9305      	str	r3, [sp, #20]
    if (!szb_buf) return FR_MKFS_ABORTED;
   1e1f6:	b90b      	cbnz	r3, 1e1fc <f_mkfs+0x7c>
   1e1f8:	200e      	movs	r0, #14
   1e1fa:	e7f0      	b.n	1e1de <f_mkfs+0x5e>
    if (_MULTI_PARTITION && part != 0) {
   1e1fc:	9b02      	ldr	r3, [sp, #8]
   1e1fe:	2b00      	cmp	r3, #0
   1e200:	d061      	beq.n	1e2c6 <f_mkfs+0x146>
        if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;   /* Load MBR */
   1e202:	2301      	movs	r3, #1
   1e204:	4621      	mov	r1, r4
   1e206:	4630      	mov	r0, r6
   1e208:	f7f9 fdf0 	bl	17dec <disk_read>
   1e20c:	b108      	cbz	r0, 1e212 <f_mkfs+0x92>
        if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;  /* Write it to the VBR sector */
   1e20e:	2001      	movs	r0, #1
   1e210:	e7e5      	b.n	1e1de <f_mkfs+0x5e>
    rv = rv << 8 | ptr[0];
   1e212:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
   1e216:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
   1e21a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        if (ld_word(buf + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;   /* Check if MBR is valid */
   1e21e:	f64a 2255 	movw	r2, #43605	; 0xaa55
   1e222:	4293      	cmp	r3, r2
   1e224:	d1e8      	bne.n	1e1f8 <f_mkfs+0x78>
        pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
   1e226:	9b02      	ldr	r3, [sp, #8]
   1e228:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   1e22c:	f501 71d7 	add.w	r1, r1, #430	; 0x1ae
        if (!pte[PTE_System]) return FR_MKFS_ABORTED;   /* No partition? */
   1e230:	790b      	ldrb	r3, [r1, #4]
   1e232:	2b00      	cmp	r3, #0
   1e234:	d0e0      	beq.n	1e1f8 <f_mkfs+0x78>
        b_vol = ld_dword(pte + PTE_StLba);      /* Get volume start sector */
   1e236:	f101 0008 	add.w	r0, r1, #8
   1e23a:	f7fe f887 	bl	1c34c <ld_dword>
   1e23e:	4681      	mov	r9, r0
        sz_vol = ld_dword(pte + PTE_SizLba);    /* Get volume size */
   1e240:	f101 000c 	add.w	r0, r1, #12
   1e244:	f7fe f882 	bl	1c34c <ld_dword>
   1e248:	9009      	str	r0, [sp, #36]	; 0x24
    if (sz_vol < 50) return FR_MKFS_ABORTED;   /* Check if volume size is >=50s */
   1e24a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
   1e24e:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
   1e252:	d9d1      	bls.n	1e1f8 <f_mkfs+0x78>
    au /= ss;   /* Cluster size in unit of sector */
   1e254:	0a6b      	lsrs	r3, r5, #9
        if (au > 128) return FR_INVALID_PARAMETER;  /* Too large au for FAT/FAT32 */
   1e256:	2b80      	cmp	r3, #128	; 0x80
   1e258:	d8c0      	bhi.n	1e1dc <f_mkfs+0x5c>
        if (opt & FM_FAT32) {   /* FAT32 possible? */
   1e25a:	9a03      	ldr	r2, [sp, #12]
   1e25c:	f012 0e02 	ands.w	lr, r2, #2
   1e260:	d008      	beq.n	1e274 <f_mkfs+0xf4>
            if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {    /* FAT32 only or no-FAT? */
   1e262:	f002 0107 	and.w	r1, r2, #7
   1e266:	2902      	cmp	r1, #2
   1e268:	f000 8234 	beq.w	1e6d4 <f_mkfs+0x554>
   1e26c:	4611      	mov	r1, r2
   1e26e:	07c9      	lsls	r1, r1, #31
   1e270:	f140 8230 	bpl.w	1e6d4 <f_mkfs+0x554>
        if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;   /* no-FAT? */
   1e274:	9903      	ldr	r1, [sp, #12]
   1e276:	07ca      	lsls	r2, r1, #31
   1e278:	d5b0      	bpl.n	1e1dc <f_mkfs+0x5c>
                if (!pau) { /* au auto-selection */
   1e27a:	2b00      	cmp	r3, #0
   1e27c:	d153      	bne.n	1e326 <f_mkfs+0x1a6>
   1e27e:	4832      	ldr	r0, [pc, #200]	; (1e348 <f_mkfs+0x1c8>)
                    n = sz_vol / 0x1000;    /* Volume size in unit of 4KS */
   1e280:	ea4f 351a 	mov.w	r5, sl, lsr #12
                    for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;   /* Get from table */
   1e284:	f04f 0801 	mov.w	r8, #1
   1e288:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   1e28c:	b109      	cbz	r1, 1e292 <f_mkfs+0x112>
   1e28e:	42a9      	cmp	r1, r5
   1e290:	d931      	bls.n	1e2f6 <f_mkfs+0x176>
                if (n_clst > MAX_FAT12) {
   1e292:	f640 71f5 	movw	r1, #4085	; 0xff5
                n_clst = sz_vol / pau;
   1e296:	fbba f5f8 	udiv	r5, sl, r8
                if (n_clst > MAX_FAT12) {
   1e29a:	428d      	cmp	r5, r1
                    n = (n_clst * 3 + 1) / 2 + 3;   /* FAT size [byte] */
   1e29c:	bf9b      	ittet	ls
   1e29e:	eb05 0545 	addls.w	r5, r5, r5, lsl #1
   1e2a2:	3501      	addls	r5, #1
                    n = n_clst * 2 + 4;     /* FAT size [byte] */
   1e2a4:	3502      	addhi	r5, #2
                    n = (n_clst * 3 + 1) / 2 + 3;   /* FAT size [byte] */
   1e2a6:	086d      	lsrls	r5, r5, #1
                    n = n_clst * 2 + 4;     /* FAT size [byte] */
   1e2a8:	bf8c      	ite	hi
   1e2aa:	006d      	lslhi	r5, r5, #1
                    n = (n_clst * 3 + 1) / 2 + 3;   /* FAT size [byte] */
   1e2ac:	3503      	addls	r5, #3
                sz_fat = (n + ss - 1) / ss;     /* FAT size [sector] */
   1e2ae:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
                sz_dir = (DWORD)n_rootdir * SZDIRE / ss;    /* Rootdir size [sector] */
   1e2b2:	f04f 0120 	mov.w	r1, #32
   1e2b6:	bf8c      	ite	hi
   1e2b8:	2702      	movhi	r7, #2
                    fmt = FS_FAT12;
   1e2ba:	2701      	movls	r7, #1
                sz_fat = (n + ss - 1) / ss;     /* FAT size [sector] */
   1e2bc:	0a6d      	lsrs	r5, r5, #9
                sz_rsv = 1;                     /* Number of reserved sectors */
   1e2be:	f04f 0b01 	mov.w	fp, #1
                sz_dir = (DWORD)n_rootdir * SZDIRE / ss;    /* Rootdir size [sector] */
   1e2c2:	9101      	str	r1, [sp, #4]
   1e2c4:	e228      	b.n	1e718 <f_mkfs+0x598>
        if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
   1e2c6:	aa09      	add	r2, sp, #36	; 0x24
   1e2c8:	2101      	movs	r1, #1
   1e2ca:	4630      	mov	r0, r6
   1e2cc:	f7f9 fdfe 	bl	17ecc <disk_ioctl>
   1e2d0:	2800      	cmp	r0, #0
   1e2d2:	d19c      	bne.n	1e20e <f_mkfs+0x8e>
        b_vol = (opt & FM_SFD) ? 0 : 63;        /* Volume start sector */
   1e2d4:	9b03      	ldr	r3, [sp, #12]
   1e2d6:	f013 0f08 	tst.w	r3, #8
        if (sz_vol < b_vol) return FR_MKFS_ABORTED;
   1e2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
        b_vol = (opt & FM_SFD) ? 0 : 63;        /* Volume start sector */
   1e2dc:	bf0c      	ite	eq
   1e2de:	f04f 093f 	moveq.w	r9, #63	; 0x3f
   1e2e2:	f04f 0900 	movne.w	r9, #0
        if (sz_vol < b_vol) return FR_MKFS_ABORTED;
   1e2e6:	454b      	cmp	r3, r9
   1e2e8:	d386      	bcc.n	1e1f8 <f_mkfs+0x78>
        sz_vol -= b_vol;                        /* Volume size */
   1e2ea:	eba3 0309 	sub.w	r3, r3, r9
   1e2ee:	9309      	str	r3, [sp, #36]	; 0x24
   1e2f0:	e7ab      	b.n	1e24a <f_mkfs+0xca>
                    for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;   /* Get from table */
   1e2f2:	005b      	lsls	r3, r3, #1
   1e2f4:	e1f4      	b.n	1e6e0 <f_mkfs+0x560>
                    for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;   /* Get from table */
   1e2f6:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1e2fa:	e7c5      	b.n	1e288 <f_mkfs+0x108>
            if (fmt == FS_FAT16) {
   1e2fc:	2f02      	cmp	r7, #2
   1e2fe:	d125      	bne.n	1e34c <f_mkfs+0x1cc>
                if (n_clst > MAX_FAT16) {   /* Too many clusters for FAT16 */
   1e300:	9a04      	ldr	r2, [sp, #16]
   1e302:	f64f 71f5 	movw	r1, #65525	; 0xfff5
   1e306:	428a      	cmp	r2, r1
   1e308:	d90f      	bls.n	1e32a <f_mkfs+0x1aa>
                    if (!au && (pau * 2) <= 64) {
   1e30a:	2b00      	cmp	r3, #0
   1e30c:	f040 81de 	bne.w	1e6cc <f_mkfs+0x54c>
   1e310:	ea4f 0348 	mov.w	r3, r8, lsl #1
   1e314:	2b40      	cmp	r3, #64	; 0x40
   1e316:	d9b0      	bls.n	1e27a <f_mkfs+0xfa>
                    if ((opt & FM_FAT32)) {
   1e318:	f1be 0f00 	cmp.w	lr, #0
   1e31c:	f040 81dc 	bne.w	1e6d8 <f_mkfs+0x558>
                    if (!au && (au = pau * 2) <= 128) continue; /* Adjust cluster size and retry */
   1e320:	2b80      	cmp	r3, #128	; 0x80
   1e322:	f63f af69 	bhi.w	1e1f8 <f_mkfs+0x78>
   1e326:	4698      	mov	r8, r3
   1e328:	e7b3      	b.n	1e292 <f_mkfs+0x112>
                if  (n_clst <= MAX_FAT12) { /* Too few clusters for FAT16 */
   1e32a:	9a04      	ldr	r2, [sp, #16]
   1e32c:	f640 71f5 	movw	r1, #4085	; 0xff5
   1e330:	428a      	cmp	r2, r1
   1e332:	d812      	bhi.n	1e35a <f_mkfs+0x1da>
                    if (!au && (au = pau * 2) <= 128) continue; /* Adjust cluster size and retry */
   1e334:	2b00      	cmp	r3, #0
   1e336:	f47f af5f 	bne.w	1e1f8 <f_mkfs+0x78>
   1e33a:	ea4f 0348 	mov.w	r3, r8, lsl #1
   1e33e:	2b80      	cmp	r3, #128	; 0x80
   1e340:	d99b      	bls.n	1e27a <f_mkfs+0xfa>
   1e342:	e759      	b.n	1e1f8 <f_mkfs+0x78>
   1e344:	00fffe00 	.word	0x00fffe00
   1e348:	0002be98 	.word	0x0002be98
            if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;  /* Too many clusters for FAT12 */
   1e34c:	9a04      	ldr	r2, [sp, #16]
   1e34e:	f640 73f5 	movw	r3, #4085	; 0xff5
   1e352:	429a      	cmp	r2, r3
   1e354:	f63f af50 	bhi.w	1e1f8 <f_mkfs+0x78>
   1e358:	2701      	movs	r7, #1
        mem_set(buf, 0, ss);
   1e35a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e35e:	2100      	movs	r1, #0
   1e360:	4620      	mov	r0, r4
   1e362:	f7fd fa8b 	bl	1b87c <memset>
        mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
   1e366:	4bd5      	ldr	r3, [pc, #852]	; (1e6bc <f_mkfs+0x53c>)
    *ptr++ = (BYTE)val; val >>= 8;
   1e368:	f884 b00e 	strb.w	fp, [r4, #14]
        mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
   1e36c:	681a      	ldr	r2, [r3, #0]
   1e36e:	6022      	str	r2, [r4, #0]
   1e370:	685a      	ldr	r2, [r3, #4]
   1e372:	6062      	str	r2, [r4, #4]
   1e374:	891a      	ldrh	r2, [r3, #8]
   1e376:	7a9b      	ldrb	r3, [r3, #10]
   1e378:	8122      	strh	r2, [r4, #8]
        st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));   /* Number of root directory entries */
   1e37a:	2f03      	cmp	r7, #3
    *ptr++ = (BYTE)val;
   1e37c:	f04f 0202 	mov.w	r2, #2
        mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
   1e380:	72a3      	strb	r3, [r4, #10]
    *ptr++ = (BYTE)val; val >>= 8;
   1e382:	f04f 0300 	mov.w	r3, #0
   1e386:	72e3      	strb	r3, [r4, #11]
    *ptr++ = (BYTE)val;
   1e388:	7322      	strb	r2, [r4, #12]
    *ptr++ = (BYTE)val; val >>= 8;
   1e38a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
        buf[BPB_NumFATs] = (BYTE)n_fats;                /* Number of FATs */
   1e38e:	f04f 0201 	mov.w	r2, #1
    *ptr++ = (BYTE)val; val >>= 8;
   1e392:	7463      	strb	r3, [r4, #17]
   1e394:	bf18      	it	ne
   1e396:	2302      	movne	r3, #2
        if (sz_vol < 0x10000) {
   1e398:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
        buf[BPB_SecPerClus] = (BYTE)pau;                /* Cluster size [sector] */
   1e39c:	f884 800d 	strb.w	r8, [r4, #13]
    *ptr++ = (BYTE)val;
   1e3a0:	f884 b00f 	strb.w	fp, [r4, #15]
        buf[BPB_NumFATs] = (BYTE)n_fats;                /* Number of FATs */
   1e3a4:	7422      	strb	r2, [r4, #16]
    *ptr++ = (BYTE)val;
   1e3a6:	74a3      	strb	r3, [r4, #18]
        if (sz_vol < 0x10000) {
   1e3a8:	f080 811b 	bcs.w	1e5e2 <f_mkfs+0x462>
    *ptr++ = (BYTE)val; val >>= 8;
   1e3ac:	f884 a013 	strb.w	sl, [r4, #19]
   1e3b0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
    *ptr++ = (BYTE)val;
   1e3b4:	f884 a014 	strb.w	sl, [r4, #20]
        buf[BPB_Media] = 0xF8;                          /* Media descriptor byte */
   1e3b8:	23f8      	movs	r3, #248	; 0xf8
   1e3ba:	7563      	strb	r3, [r4, #21]
    *ptr++ = (BYTE)val; val >>= 8;
   1e3bc:	233f      	movs	r3, #63	; 0x3f
   1e3be:	7623      	strb	r3, [r4, #24]
    *ptr++ = (BYTE)val;
   1e3c0:	f04f 0a00 	mov.w	sl, #0
    *ptr++ = (BYTE)val; val >>= 8;
   1e3c4:	23ff      	movs	r3, #255	; 0xff
    *ptr++ = (BYTE)val;
   1e3c6:	f884 a019 	strb.w	sl, [r4, #25]
    *ptr++ = (BYTE)val; val >>= 8;
   1e3ca:	76a3      	strb	r3, [r4, #26]
    *ptr++ = (BYTE)val;
   1e3cc:	f884 a01b 	strb.w	sl, [r4, #27]
        st_dword(buf + BPB_HiddSec, b_vol);             /* Volume offset in the physical drive [sector] */
   1e3d0:	4649      	mov	r1, r9
   1e3d2:	f104 001c 	add.w	r0, r4, #28
   1e3d6:	f7fd ffc1 	bl	1c35c <st_dword>
        if (fmt == FS_FAT32) {
   1e3da:	2f03      	cmp	r7, #3
   1e3dc:	f040 8107 	bne.w	1e5ee <f_mkfs+0x46e>
            st_dword(buf + BS_VolID32, GET_FATTIME());  /* VSN */
   1e3e0:	f7fc ffe4 	bl	1b3ac <get_fattime>
   1e3e4:	4601      	mov	r1, r0
   1e3e6:	f104 0043 	add.w	r0, r4, #67	; 0x43
   1e3ea:	f7fd ffb7 	bl	1c35c <st_dword>
            st_dword(buf + BPB_FATSz32, sz_fat);        /* FAT size [sector] */
   1e3ee:	4629      	mov	r1, r5
   1e3f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1e3f4:	f7fd ffb2 	bl	1c35c <st_dword>
    *ptr++ = (BYTE)val; val >>= 8;
   1e3f8:	2302      	movs	r3, #2
   1e3fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    *ptr++ = (BYTE)val; val >>= 8;
   1e3fe:	2301      	movs	r3, #1
   1e400:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   1e404:	2306      	movs	r3, #6
   1e406:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
            buf[BS_DrvNum32] = 0x80;                    /* Drive number (for int13) */
   1e40a:	2380      	movs	r3, #128	; 0x80
   1e40c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            buf[BS_BootSig32] = 0x29;                   /* Extended boot signature */
   1e410:	2329      	movs	r3, #41	; 0x29
   1e412:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);   /* Volume label, FAT signature */
   1e416:	4baa      	ldr	r3, [pc, #680]	; (1e6c0 <f_mkfs+0x540>)
    *ptr++ = (BYTE)val; val >>= 8;
   1e418:	f884 a02d 	strb.w	sl, [r4, #45]	; 0x2d
    *ptr++ = (BYTE)val; val >>= 8;
   1e41c:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
    *ptr++ = (BYTE)val;
   1e420:	f884 a02f 	strb.w	sl, [r4, #47]	; 0x2f
    *ptr++ = (BYTE)val;
   1e424:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
   1e428:	f884 a033 	strb.w	sl, [r4, #51]	; 0x33
            mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);   /* Volume label, FAT signature */
   1e42c:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1e430:	f103 0110 	add.w	r1, r3, #16
   1e434:	f853 0b04 	ldr.w	r0, [r3], #4
   1e438:	f842 0b04 	str.w	r0, [r2], #4
   1e43c:	428b      	cmp	r3, r1
   1e43e:	d1f9      	bne.n	1e434 <f_mkfs+0x2b4>
            mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
   1e440:	8819      	ldrh	r1, [r3, #0]
   1e442:	789b      	ldrb	r3, [r3, #2]
   1e444:	7093      	strb	r3, [r2, #2]
    *ptr++ = (BYTE)val; val >>= 8;
   1e446:	f04f 0b55 	mov.w	fp, #85	; 0x55
    *ptr++ = (BYTE)val;
   1e44a:	f06f 0355 	mvn.w	r3, #85	; 0x55
            mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
   1e44e:	8011      	strh	r1, [r2, #0]
        if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;  /* Write it to the VBR sector */
   1e450:	4630      	mov	r0, r6
    *ptr++ = (BYTE)val;
   1e452:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
    *ptr++ = (BYTE)val; val >>= 8;
   1e456:	f884 b1fe 	strb.w	fp, [r4, #510]	; 0x1fe
        if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;  /* Write it to the VBR sector */
   1e45a:	2301      	movs	r3, #1
   1e45c:	464a      	mov	r2, r9
   1e45e:	4621      	mov	r1, r4
   1e460:	f7f9 fcfa 	bl	17e58 <disk_write>
   1e464:	4682      	mov	sl, r0
   1e466:	2800      	cmp	r0, #0
   1e468:	f47f aed1 	bne.w	1e20e <f_mkfs+0x8e>
        if (fmt == FS_FAT32) {
   1e46c:	2f03      	cmp	r7, #3
   1e46e:	d13f      	bne.n	1e4f0 <f_mkfs+0x370>
            disk_write(pdrv, buf, b_vol + 6, 1);        /* Write backup VBR (VBR + 6) */
   1e470:	2301      	movs	r3, #1
   1e472:	f109 0206 	add.w	r2, r9, #6
   1e476:	4621      	mov	r1, r4
   1e478:	4630      	mov	r0, r6
   1e47a:	f7f9 fced 	bl	17e58 <disk_write>
            mem_set(buf, 0, ss);
   1e47e:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e482:	4651      	mov	r1, sl
   1e484:	4620      	mov	r0, r4
   1e486:	f7fd f9f9 	bl	1b87c <memset>
    *ptr++ = (BYTE)val; val >>= 8;
   1e48a:	2352      	movs	r3, #82	; 0x52
   1e48c:	7023      	strb	r3, [r4, #0]
    *ptr++ = (BYTE)val; val >>= 8;
   1e48e:	7063      	strb	r3, [r4, #1]
    *ptr++ = (BYTE)val; val >>= 8;
   1e490:	2361      	movs	r3, #97	; 0x61
   1e492:	70a3      	strb	r3, [r4, #2]
    *ptr++ = (BYTE)val;
   1e494:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
            st_dword(buf + FSI_Free_Count, n_clst - 1); /* Number of free clusters */
   1e498:	9b04      	ldr	r3, [sp, #16]
    *ptr++ = (BYTE)val;
   1e49a:	2241      	movs	r2, #65	; 0x41
    *ptr++ = (BYTE)val; val >>= 8;
   1e49c:	2172      	movs	r1, #114	; 0x72
    *ptr++ = (BYTE)val;
   1e49e:	70e2      	strb	r2, [r4, #3]
    *ptr++ = (BYTE)val; val >>= 8;
   1e4a0:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
    *ptr++ = (BYTE)val; val >>= 8;
   1e4a4:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
    *ptr++ = (BYTE)val; val >>= 8;
   1e4a8:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
            st_dword(buf + FSI_Free_Count, n_clst - 1); /* Number of free clusters */
   1e4ac:	1e59      	subs	r1, r3, #1
   1e4ae:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
   1e4b2:	f7fd ff53 	bl	1c35c <st_dword>
    *ptr++ = (BYTE)val; val >>= 8;
   1e4b6:	2302      	movs	r3, #2
   1e4b8:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
    *ptr++ = (BYTE)val;
   1e4bc:	f06f 0355 	mvn.w	r3, #85	; 0x55
   1e4c0:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
            disk_write(pdrv, buf, b_vol + 7, 1);        /* Write backup FSINFO (VBR + 7) */
   1e4c4:	f109 0207 	add.w	r2, r9, #7
   1e4c8:	2301      	movs	r3, #1
   1e4ca:	4621      	mov	r1, r4
    *ptr++ = (BYTE)val; val >>= 8;
   1e4cc:	f884 a1ed 	strb.w	sl, [r4, #493]	; 0x1ed
    *ptr++ = (BYTE)val; val >>= 8;
   1e4d0:	f884 a1ee 	strb.w	sl, [r4, #494]	; 0x1ee
    *ptr++ = (BYTE)val;
   1e4d4:	f884 a1ef 	strb.w	sl, [r4, #495]	; 0x1ef
    *ptr++ = (BYTE)val; val >>= 8;
   1e4d8:	f884 b1fe 	strb.w	fp, [r4, #510]	; 0x1fe
            disk_write(pdrv, buf, b_vol + 7, 1);        /* Write backup FSINFO (VBR + 7) */
   1e4dc:	4630      	mov	r0, r6
   1e4de:	f7f9 fcbb 	bl	17e58 <disk_write>
            disk_write(pdrv, buf, b_vol + 1, 1);        /* Write original FSINFO (VBR + 1) */
   1e4e2:	2301      	movs	r3, #1
   1e4e4:	eb09 0203 	add.w	r2, r9, r3
   1e4e8:	4621      	mov	r1, r4
   1e4ea:	4630      	mov	r0, r6
   1e4ec:	f7f9 fcb4 	bl	17e58 <disk_write>
        mem_set(buf, 0, (UINT)szb_buf);
   1e4f0:	9a05      	ldr	r2, [sp, #20]
   1e4f2:	2100      	movs	r1, #0
   1e4f4:	4620      	mov	r0, r4
   1e4f6:	f7fd f9c1 	bl	1b87c <memset>
            if (fmt == FS_FAT32) {
   1e4fa:	2f03      	cmp	r7, #3
   1e4fc:	f040 8094 	bne.w	1e628 <f_mkfs+0x4a8>
    *ptr++ = (BYTE)val; val >>= 8;
   1e500:	23f8      	movs	r3, #248	; 0xf8
   1e502:	7023      	strb	r3, [r4, #0]
    *ptr++ = (BYTE)val; val >>= 8;
   1e504:	23ff      	movs	r3, #255	; 0xff
   1e506:	7063      	strb	r3, [r4, #1]
    *ptr++ = (BYTE)val; val >>= 8;
   1e508:	70a3      	strb	r3, [r4, #2]
    *ptr++ = (BYTE)val;
   1e50a:	70e3      	strb	r3, [r4, #3]
    *ptr++ = (BYTE)val; val >>= 8;
   1e50c:	7123      	strb	r3, [r4, #4]
    *ptr++ = (BYTE)val; val >>= 8;
   1e50e:	7163      	strb	r3, [r4, #5]
    *ptr++ = (BYTE)val; val >>= 8;
   1e510:	71a3      	strb	r3, [r4, #6]
    *ptr++ = (BYTE)val;
   1e512:	71e3      	strb	r3, [r4, #7]
    *ptr++ = (BYTE)val; val >>= 8;
   1e514:	7223      	strb	r3, [r4, #8]
    *ptr++ = (BYTE)val; val >>= 8;
   1e516:	7263      	strb	r3, [r4, #9]
    *ptr++ = (BYTE)val; val >>= 8;
   1e518:	72a3      	strb	r3, [r4, #10]
    *ptr++ = (BYTE)val;
   1e51a:	230f      	movs	r3, #15
   1e51c:	72e3      	strb	r3, [r4, #11]
    sz_buf = len / ss;      /* Size of working buffer (sector) */
   1e51e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1e520:	ea4f 2b53 	mov.w	fp, r3, lsr #9
                n = (nsect > sz_buf) ? sz_buf : nsect;
   1e524:	455d      	cmp	r5, fp
   1e526:	46aa      	mov	sl, r5
   1e528:	bf28      	it	cs
   1e52a:	46da      	movcs	sl, fp
                if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   1e52c:	4621      	mov	r1, r4
   1e52e:	4653      	mov	r3, sl
   1e530:	9a00      	ldr	r2, [sp, #0]
   1e532:	4630      	mov	r0, r6
   1e534:	f7f9 fc90 	bl	17e58 <disk_write>
   1e538:	4601      	mov	r1, r0
   1e53a:	2800      	cmp	r0, #0
   1e53c:	f47f ae67 	bne.w	1e20e <f_mkfs+0x8e>
                mem_set(buf, 0, ss);
   1e540:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e544:	4620      	mov	r0, r4
   1e546:	f7fd f999 	bl	1b87c <memset>
                sect += n; nsect -= n;
   1e54a:	9b00      	ldr	r3, [sp, #0]
            } while (nsect);
   1e54c:	ebb5 050a 	subs.w	r5, r5, sl
                sect += n; nsect -= n;
   1e550:	4453      	add	r3, sl
   1e552:	9300      	str	r3, [sp, #0]
            } while (nsect);
   1e554:	d1e6      	bne.n	1e524 <f_mkfs+0x3a4>
        nsect = (fmt == FS_FAT32) ? pau : sz_dir;   /* Number of root directory sectors */
   1e556:	9b01      	ldr	r3, [sp, #4]
   1e558:	2f03      	cmp	r7, #3
   1e55a:	bf08      	it	eq
   1e55c:	4643      	moveq	r3, r8
   1e55e:	9301      	str	r3, [sp, #4]
            n = (nsect > sz_buf) ? sz_buf : nsect;
   1e560:	9b01      	ldr	r3, [sp, #4]
            if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   1e562:	9a00      	ldr	r2, [sp, #0]
            n = (nsect > sz_buf) ? sz_buf : nsect;
   1e564:	455b      	cmp	r3, fp
   1e566:	bf28      	it	cs
   1e568:	465b      	movcs	r3, fp
            if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   1e56a:	4621      	mov	r1, r4
   1e56c:	4630      	mov	r0, r6
            n = (nsect > sz_buf) ? sz_buf : nsect;
   1e56e:	461d      	mov	r5, r3
            if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   1e570:	f7f9 fc72 	bl	17e58 <disk_write>
   1e574:	2800      	cmp	r0, #0
   1e576:	f47f ae4a 	bne.w	1e20e <f_mkfs+0x8e>
            sect += n; nsect -= n;
   1e57a:	9b00      	ldr	r3, [sp, #0]
   1e57c:	442b      	add	r3, r5
   1e57e:	9300      	str	r3, [sp, #0]
        } while (nsect);
   1e580:	9b01      	ldr	r3, [sp, #4]
   1e582:	1b5b      	subs	r3, r3, r5
   1e584:	9301      	str	r3, [sp, #4]
   1e586:	d1eb      	bne.n	1e560 <f_mkfs+0x3e0>
        if (fmt == FS_FAT32) {
   1e588:	2f03      	cmp	r7, #3
   1e58a:	d056      	beq.n	1e63a <f_mkfs+0x4ba>
            if (sz_vol >= 0x10000) {
   1e58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e58e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e592:	d254      	bcs.n	1e63e <f_mkfs+0x4be>
                sys = (fmt == FS_FAT16) ? 0x04 : 0x01;  /* FAT16 (<64KS) : FAT12 (<64KS) */
   1e594:	2f02      	cmp	r7, #2
   1e596:	bf14      	ite	ne
   1e598:	2501      	movne	r5, #1
   1e59a:	2504      	moveq	r5, #4
    if (_MULTI_PARTITION && part != 0) {
   1e59c:	9b02      	ldr	r3, [sp, #8]
   1e59e:	2b00      	cmp	r3, #0
   1e5a0:	d04f      	beq.n	1e642 <f_mkfs+0x4c2>
        if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;   /* Read the MBR */
   1e5a2:	2200      	movs	r2, #0
   1e5a4:	2301      	movs	r3, #1
   1e5a6:	4621      	mov	r1, r4
   1e5a8:	4630      	mov	r0, r6
   1e5aa:	f7f9 fc1f 	bl	17dec <disk_read>
   1e5ae:	4602      	mov	r2, r0
   1e5b0:	2800      	cmp	r0, #0
   1e5b2:	f47f ae2c 	bne.w	1e20e <f_mkfs+0x8e>
        buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;        /* Set system type */
   1e5b6:	9b02      	ldr	r3, [sp, #8]
   1e5b8:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1e5bc:	f883 51b2 	strb.w	r5, [r3, #434]	; 0x1b2
        if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;  /* Write it back to the MBR */
   1e5c0:	2301      	movs	r3, #1
            if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;  /* Write it to the MBR */
   1e5c2:	4621      	mov	r1, r4
   1e5c4:	4630      	mov	r0, r6
   1e5c6:	f7f9 fc47 	bl	17e58 <disk_write>
   1e5ca:	2800      	cmp	r0, #0
   1e5cc:	f47f ae1f 	bne.w	1e20e <f_mkfs+0x8e>
    if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
   1e5d0:	2200      	movs	r2, #0
   1e5d2:	4611      	mov	r1, r2
   1e5d4:	4630      	mov	r0, r6
   1e5d6:	f7f9 fc79 	bl	17ecc <disk_ioctl>
    if (stat & STA_NOINIT) return FR_NOT_READY;
   1e5da:	3000      	adds	r0, #0
   1e5dc:	bf18      	it	ne
   1e5de:	2001      	movne	r0, #1
   1e5e0:	e5fd      	b.n	1e1de <f_mkfs+0x5e>
            st_dword(buf + BPB_TotSec32, sz_vol);       /* Volume size in 32-bit LBA */
   1e5e2:	4651      	mov	r1, sl
   1e5e4:	f104 0020 	add.w	r0, r4, #32
   1e5e8:	f7fd feb8 	bl	1c35c <st_dword>
   1e5ec:	e6e4      	b.n	1e3b8 <f_mkfs+0x238>
            st_dword(buf + BS_VolID, GET_FATTIME());    /* VSN */
   1e5ee:	f7fc fedd 	bl	1b3ac <get_fattime>
   1e5f2:	4601      	mov	r1, r0
   1e5f4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1e5f8:	f7fd feb0 	bl	1c35c <st_dword>
    *ptr++ = (BYTE)val; val >>= 8;
   1e5fc:	f3c5 2307 	ubfx	r3, r5, #8, #8
    *ptr++ = (BYTE)val;
   1e600:	75e3      	strb	r3, [r4, #23]
            buf[BS_DrvNum] = 0x80;                      /* Drive number (for int13) */
   1e602:	2380      	movs	r3, #128	; 0x80
   1e604:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            buf[BS_BootSig] = 0x29;                     /* Extended boot signature */
   1e608:	2329      	movs	r3, #41	; 0x29
   1e60a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
            mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
   1e60e:	4b2d      	ldr	r3, [pc, #180]	; (1e6c4 <f_mkfs+0x544>)
    *ptr++ = (BYTE)val; val >>= 8;
   1e610:	75a5      	strb	r5, [r4, #22]
            mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
   1e612:	f104 022b 	add.w	r2, r4, #43	; 0x2b
   1e616:	f103 0110 	add.w	r1, r3, #16
   1e61a:	f853 0b04 	ldr.w	r0, [r3], #4
   1e61e:	f842 0b04 	str.w	r0, [r2], #4
   1e622:	428b      	cmp	r3, r1
   1e624:	d1f9      	bne.n	1e61a <f_mkfs+0x49a>
   1e626:	e70b      	b.n	1e440 <f_mkfs+0x2c0>
                st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);   /* Entry 0 and 1 */
   1e628:	2f01      	cmp	r7, #1
   1e62a:	4927      	ldr	r1, [pc, #156]	; (1e6c8 <f_mkfs+0x548>)
   1e62c:	4620      	mov	r0, r4
   1e62e:	bf18      	it	ne
   1e630:	f06f 0107 	mvnne.w	r1, #7
   1e634:	f7fd fe92 	bl	1c35c <st_dword>
   1e638:	e771      	b.n	1e51e <f_mkfs+0x39e>
            sys = 0x0C;     /* FAT32X */
   1e63a:	250c      	movs	r5, #12
   1e63c:	e7ae      	b.n	1e59c <f_mkfs+0x41c>
                sys = 0x06; /* FAT12/16 (>=64KS) */
   1e63e:	2506      	movs	r5, #6
   1e640:	e7ac      	b.n	1e59c <f_mkfs+0x41c>
        if (!(opt & FM_SFD)) {
   1e642:	9b03      	ldr	r3, [sp, #12]
   1e644:	071b      	lsls	r3, r3, #28
   1e646:	d4c3      	bmi.n	1e5d0 <f_mkfs+0x450>
            mem_set(buf, 0, ss);
   1e648:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e64c:	9902      	ldr	r1, [sp, #8]
   1e64e:	4620      	mov	r0, r4
   1e650:	f7fd f914 	bl	1b87c <memset>
    *ptr++ = (BYTE)val; val >>= 8;
   1e654:	2355      	movs	r3, #85	; 0x55
   1e656:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
            n = (b_vol + sz_vol) / (63 * 255);  /* (End CHS is incorrect) */
   1e65a:	9a09      	ldr	r2, [sp, #36]	; 0x24
            pte[PTE_System] = sys;              /* System type */
   1e65c:	f884 51c2 	strb.w	r5, [r4, #450]	; 0x1c2
    *ptr++ = (BYTE)val;
   1e660:	23aa      	movs	r3, #170	; 0xaa
   1e662:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
            pte[PTE_Boot] = 0;                  /* Boot indicator */
   1e666:	9b02      	ldr	r3, [sp, #8]
   1e668:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
            pte[PTE_StCyl] = 0;                 /* Start cylinder */
   1e66c:	f884 31c1 	strb.w	r3, [r4, #449]	; 0x1c1
            n = (b_vol + sz_vol) / (63 * 255);  /* (End CHS is incorrect) */
   1e670:	444a      	add	r2, r9
   1e672:	f643 63c1 	movw	r3, #16065	; 0x3ec1
   1e676:	fbb2 f2f3 	udiv	r2, r2, r3
            pte[PTE_EdHead] = 254;              /* End head */
   1e67a:	23fe      	movs	r3, #254	; 0xfe
   1e67c:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
            pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);   /* End sector */
   1e680:	0893      	lsrs	r3, r2, #2
   1e682:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
            pte[PTE_StHead] = 1;                /* Start head */
   1e686:	2701      	movs	r7, #1
            pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);   /* End sector */
   1e688:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
            pte[PTE_EdCyl] = (BYTE)n;           /* End cylinder */
   1e68c:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
            st_dword(pte + PTE_StLba, b_vol);   /* Start offset in LBA */
   1e690:	4649      	mov	r1, r9
   1e692:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
            pte[PTE_StHead] = 1;                /* Start head */
   1e696:	f884 71bf 	strb.w	r7, [r4, #447]	; 0x1bf
            pte[PTE_StSec] = 1;                 /* Start sector */
   1e69a:	f884 71c0 	strb.w	r7, [r4, #448]	; 0x1c0
            st_dword(pte + PTE_StLba, b_vol);   /* Start offset in LBA */
   1e69e:	f7fd fe5d 	bl	1c35c <st_dword>
            st_dword(pte + PTE_SizLba, sz_vol); /* Size in sectors */
   1e6a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e6a4:	f504 70e5 	add.w	r0, r4, #458	; 0x1ca
   1e6a8:	f7fd fe58 	bl	1c35c <st_dword>
            if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;  /* Write it to the MBR */
   1e6ac:	463b      	mov	r3, r7
   1e6ae:	9a02      	ldr	r2, [sp, #8]
   1e6b0:	e787      	b.n	1e5c2 <f_mkfs+0x442>
    if (stat & STA_NOINIT) return FR_NOT_READY;
   1e6b2:	2003      	movs	r0, #3
   1e6b4:	e593      	b.n	1e1de <f_mkfs+0x5e>
    if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   1e6b6:	200a      	movs	r0, #10
   1e6b8:	e591      	b.n	1e1de <f_mkfs+0x5e>
   1e6ba:	bf00      	nop
   1e6bc:	0002beb6 	.word	0x0002beb6
   1e6c0:	0002bec2 	.word	0x0002bec2
   1e6c4:	0002bed6 	.word	0x0002bed6
   1e6c8:	00fffff8 	.word	0x00fffff8
                    if ((opt & FM_FAT32)) {
   1e6cc:	f1be 0f00 	cmp.w	lr, #0
   1e6d0:	f43f ad92 	beq.w	1e1f8 <f_mkfs+0x78>
                if (!pau) { /* au auto-selection */
   1e6d4:	2b00      	cmp	r3, #0
   1e6d6:	d159      	bne.n	1e78c <f_mkfs+0x60c>
   1e6d8:	482d      	ldr	r0, [pc, #180]	; (1e790 <f_mkfs+0x610>)
                    n = sz_vol / 0x20000;   /* Volume size in unit of 128KS */
   1e6da:	ea4f 455a 	mov.w	r5, sl, lsr #17
                    for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;   /* Get from table */
   1e6de:	2301      	movs	r3, #1
   1e6e0:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   1e6e4:	b119      	cbz	r1, 1e6ee <f_mkfs+0x56e>
   1e6e6:	42a9      	cmp	r1, r5
   1e6e8:	f67f ae03 	bls.w	1e2f2 <f_mkfs+0x172>
   1e6ec:	2100      	movs	r1, #0
                n_clst = sz_vol / pau;  /* Number of clusters */
   1e6ee:	fbba f0f3 	udiv	r0, sl, r3
                if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
   1e6f2:	4f28      	ldr	r7, [pc, #160]	; (1e794 <f_mkfs+0x614>)
                sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;    /* FAT size [sector] */
   1e6f4:	0085      	lsls	r5, r0, #2
                if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
   1e6f6:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   1e6fa:	38f6      	subs	r0, #246	; 0xf6
                sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;    /* FAT size [sector] */
   1e6fc:	f205 2507 	addw	r5, r5, #519	; 0x207
                if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
   1e700:	42b8      	cmp	r0, r7
                sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;    /* FAT size [sector] */
   1e702:	ea4f 2555 	mov.w	r5, r5, lsr #9
                if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
   1e706:	f63f ad77 	bhi.w	1e1f8 <f_mkfs+0x78>
   1e70a:	4698      	mov	r8, r3
   1e70c:	460b      	mov	r3, r1
                sz_dir = 0;     /* No static directory */
   1e70e:	2100      	movs	r1, #0
   1e710:	9101      	str	r1, [sp, #4]
                sz_rsv = 32;    /* Number of reserved sectors */
   1e712:	f04f 0b20 	mov.w	fp, #32
   1e716:	2703      	movs	r7, #3
            b_fat = b_vol + sz_rsv;                     /* FAT base */
   1e718:	eb09 010b 	add.w	r1, r9, fp
   1e71c:	9100      	str	r1, [sp, #0]
            b_data = b_fat + sz_fat * n_fats + sz_dir;  /* Data base */
   1e71e:	9901      	ldr	r1, [sp, #4]
            n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;   /* Next nearest erase block from current data base */
   1e720:	f8dd c020 	ldr.w	ip, [sp, #32]
            b_data = b_fat + sz_fat * n_fats + sz_dir;  /* Data base */
   1e724:	1868      	adds	r0, r5, r1
   1e726:	9900      	ldr	r1, [sp, #0]
   1e728:	4408      	add	r0, r1
            n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;   /* Next nearest erase block from current data base */
   1e72a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
            if (fmt == FS_FAT32) {      /* FAT32: Move FAT base */
   1e72e:	2f03      	cmp	r7, #3
            n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;   /* Next nearest erase block from current data base */
   1e730:	4401      	add	r1, r0
   1e732:	f1cc 0c00 	rsb	ip, ip, #0
                sz_rsv += n; b_fat += n;
   1e736:	bf08      	it	eq
   1e738:	9a00      	ldreq	r2, [sp, #0]
            n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;   /* Next nearest erase block from current data base */
   1e73a:	ea01 010c 	and.w	r1, r1, ip
   1e73e:	eba1 0100 	sub.w	r1, r1, r0
                sz_rsv += n; b_fat += n;
   1e742:	bf01      	itttt	eq
   1e744:	1852      	addeq	r2, r2, r1
   1e746:	448b      	addeq	fp, r1
   1e748:	4611      	moveq	r1, r2
   1e74a:	9100      	streq	r1, [sp, #0]
                sz_fat += n / n_fats;
   1e74c:	bf18      	it	ne
   1e74e:	186d      	addne	r5, r5, r1
            if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED; /* Too small volume */
   1e750:	ebc9 1108 	rsb	r1, r9, r8, lsl #4
   1e754:	4408      	add	r0, r1
   1e756:	4582      	cmp	sl, r0
   1e758:	f4ff ad4e 	bcc.w	1e1f8 <f_mkfs+0x78>
            n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
   1e75c:	9a01      	ldr	r2, [sp, #4]
   1e75e:	ebaa 010b 	sub.w	r1, sl, fp
   1e762:	1b49      	subs	r1, r1, r5
            if (fmt == FS_FAT32) {
   1e764:	2f03      	cmp	r7, #3
            n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
   1e766:	eba1 0102 	sub.w	r1, r1, r2
   1e76a:	fbb1 f2f8 	udiv	r2, r1, r8
   1e76e:	9204      	str	r2, [sp, #16]
            if (fmt == FS_FAT32) {
   1e770:	f47f adc4 	bne.w	1e2fc <f_mkfs+0x17c>
                if (n_clst <= MAX_FAT16) {  /* Too few clusters for FAT32 */
   1e774:	f64f 71f5 	movw	r1, #65525	; 0xfff5
   1e778:	428a      	cmp	r2, r1
   1e77a:	f63f adee 	bhi.w	1e35a <f_mkfs+0x1da>
                    if (!au && (au = pau / 2) != 0) continue;   /* Adjust cluster size and retry */
   1e77e:	2b00      	cmp	r3, #0
   1e780:	f47f ad3a 	bne.w	1e1f8 <f_mkfs+0x78>
   1e784:	ea5f 0358 	movs.w	r3, r8, lsr #1
   1e788:	f43f ad36 	beq.w	1e1f8 <f_mkfs+0x78>
   1e78c:	4619      	mov	r1, r3
   1e78e:	e7ae      	b.n	1e6ee <f_mkfs+0x56e>
   1e790:	0002bea6 	.word	0x0002bea6
   1e794:	0ffeffff 	.word	0x0ffeffff

0001e798 <ff_convert>:
)
{
    WCHAR c;


    if (chr < 0x80) {   /* ASCII */
   1e798:	287f      	cmp	r0, #127	; 0x7f
   1e79a:	d916      	bls.n	1e7ca <ff_convert+0x32>
        c = chr;

    } else {
        if (dir) {      /* OEM code to Unicode */
   1e79c:	b131      	cbz	r1, 1e7ac <ff_convert+0x14>
            c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
   1e79e:	28ff      	cmp	r0, #255	; 0xff
   1e7a0:	d812      	bhi.n	1e7c8 <ff_convert+0x30>
   1e7a2:	3880      	subs	r0, #128	; 0x80
   1e7a4:	4b09      	ldr	r3, [pc, #36]	; (1e7cc <ff_convert+0x34>)
   1e7a6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1e7aa:	4770      	bx	lr

        } else {        /* Unicode to OEM code */
            for (c = 0; c < 0x80; c++) {
   1e7ac:	2300      	movs	r3, #0
   1e7ae:	2b7f      	cmp	r3, #127	; 0x7f
   1e7b0:	d807      	bhi.n	1e7c2 <ff_convert+0x2a>
                if (chr == Tbl[c]) break;
   1e7b2:	4a06      	ldr	r2, [pc, #24]	; (1e7cc <ff_convert+0x34>)
   1e7b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1e7b8:	4282      	cmp	r2, r0
   1e7ba:	d002      	beq.n	1e7c2 <ff_convert+0x2a>
            for (c = 0; c < 0x80; c++) {
   1e7bc:	3301      	adds	r3, #1
   1e7be:	b29b      	uxth	r3, r3
   1e7c0:	e7f5      	b.n	1e7ae <ff_convert+0x16>
            }
            c = (c + 0x80) & 0xFF;
   1e7c2:	3380      	adds	r3, #128	; 0x80
   1e7c4:	b2d8      	uxtb	r0, r3
   1e7c6:	4770      	bx	lr
            c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
   1e7c8:	2000      	movs	r0, #0
        }
    }

    return c;
}
   1e7ca:	4770      	bx	lr
   1e7cc:	0002befc 	.word	0x0002befc

0001e7d0 <ff_wtoupper>:
    };
    const WCHAR *p;
    WCHAR bc, nc, cmd;


    p = chr < 0x1000 ? cvt1 : cvt2;
   1e7d0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1e7d4:	d207      	bcs.n	1e7e6 <ff_wtoupper+0x16>
   1e7d6:	4b23      	ldr	r3, [pc, #140]	; (1e864 <ff_wtoupper+0x94>)
    for (;;) {
        bc = *p++;                              /* Get block base */
   1e7d8:	881a      	ldrh	r2, [r3, #0]
        if (!bc || chr < bc) break;
   1e7da:	2a00      	cmp	r2, #0
   1e7dc:	d040      	beq.n	1e860 <ff_wtoupper+0x90>
   1e7de:	4290      	cmp	r0, r2
   1e7e0:	d33e      	bcc.n	1e860 <ff_wtoupper+0x90>
{
   1e7e2:	b4f0      	push	{r4, r5, r6, r7}
   1e7e4:	e006      	b.n	1e7f4 <ff_wtoupper+0x24>
    p = chr < 0x1000 ? cvt1 : cvt2;
   1e7e6:	4b20      	ldr	r3, [pc, #128]	; (1e868 <ff_wtoupper+0x98>)
   1e7e8:	e7f6      	b.n	1e7d8 <ff_wtoupper+0x8>
        nc = *p++; cmd = nc >> 8; nc &= 0xFF;   /* Get processing command and block size */
   1e7ea:	462b      	mov	r3, r5
        bc = *p++;                              /* Get block base */
   1e7ec:	881a      	ldrh	r2, [r3, #0]
        if (!bc || chr < bc) break;
   1e7ee:	b1ca      	cbz	r2, 1e824 <ff_wtoupper+0x54>
   1e7f0:	4290      	cmp	r0, r2
   1e7f2:	d317      	bcc.n	1e824 <ff_wtoupper+0x54>
        nc = *p++; cmd = nc >> 8; nc &= 0xFF;   /* Get processing command and block size */
   1e7f4:	1d1d      	adds	r5, r3, #4
   1e7f6:	885b      	ldrh	r3, [r3, #2]
   1e7f8:	0a19      	lsrs	r1, r3, #8
   1e7fa:	b2db      	uxtb	r3, r3
        if (chr < bc + nc) {    /* In the block? */
   1e7fc:	189c      	adds	r4, r3, r2
   1e7fe:	42a0      	cmp	r0, r4
   1e800:	db04      	blt.n	1e80c <ff_wtoupper+0x3c>
            case 7: chr -= 80; break;               /* Shift -80 */
            case 8: chr -= 0x1C60; break;           /* Shift -0x1C60 */
            }
            break;
        }
        if (!cmd) p += nc;
   1e802:	2900      	cmp	r1, #0
   1e804:	d1f1      	bne.n	1e7ea <ff_wtoupper+0x1a>
   1e806:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1e80a:	e7ef      	b.n	1e7ec <ff_wtoupper+0x1c>
            switch (cmd) {
   1e80c:	2908      	cmp	r1, #8
   1e80e:	d809      	bhi.n	1e824 <ff_wtoupper+0x54>
   1e810:	e8df f001 	tbb	[pc, r1]
   1e814:	13100a05 	.word	0x13100a05
   1e818:	1f1c1916 	.word	0x1f1c1916
   1e81c:	22          	.byte	0x22
   1e81d:	00          	.byte	0x00
            case 0: chr = p[chr - bc]; break;       /* Table conversion */
   1e81e:	1a86      	subs	r6, r0, r2
   1e820:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
    }

    return chr;
}
   1e824:	bcf0      	pop	{r4, r5, r6, r7}
   1e826:	4770      	bx	lr
            case 1: chr -= (chr - bc) & 1; break;   /* Case pairs */
   1e828:	1a82      	subs	r2, r0, r2
   1e82a:	f002 0301 	and.w	r3, r2, #1
   1e82e:	1ac0      	subs	r0, r0, r3
   1e830:	b280      	uxth	r0, r0
   1e832:	e7f7      	b.n	1e824 <ff_wtoupper+0x54>
            case 2: chr -= 16; break;               /* Shift -16 */
   1e834:	3810      	subs	r0, #16
   1e836:	b280      	uxth	r0, r0
   1e838:	e7f4      	b.n	1e824 <ff_wtoupper+0x54>
            case 3: chr -= 32; break;               /* Shift -32 */
   1e83a:	3820      	subs	r0, #32
   1e83c:	b280      	uxth	r0, r0
   1e83e:	e7f1      	b.n	1e824 <ff_wtoupper+0x54>
            case 4: chr -= 48; break;               /* Shift -48 */
   1e840:	3830      	subs	r0, #48	; 0x30
   1e842:	b280      	uxth	r0, r0
   1e844:	e7ee      	b.n	1e824 <ff_wtoupper+0x54>
            case 5: chr -= 26; break;               /* Shift -26 */
   1e846:	381a      	subs	r0, #26
   1e848:	b280      	uxth	r0, r0
   1e84a:	e7eb      	b.n	1e824 <ff_wtoupper+0x54>
            case 6: chr += 8; break;                /* Shift +8 */
   1e84c:	3008      	adds	r0, #8
   1e84e:	b280      	uxth	r0, r0
   1e850:	e7e8      	b.n	1e824 <ff_wtoupper+0x54>
            case 7: chr -= 80; break;               /* Shift -80 */
   1e852:	3850      	subs	r0, #80	; 0x50
   1e854:	b280      	uxth	r0, r0
   1e856:	e7e5      	b.n	1e824 <ff_wtoupper+0x54>
            case 8: chr -= 0x1C60; break;           /* Shift -0x1C60 */
   1e858:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
   1e85c:	b280      	uxth	r0, r0
   1e85e:	e7e1      	b.n	1e824 <ff_wtoupper+0x54>
}
   1e860:	4770      	bx	lr
   1e862:	bf00      	nop
   1e864:	0002bffc 	.word	0x0002bffc
   1e868:	0002c1f0 	.word	0x0002c1f0

0001e86c <scalbnf>:
float scalbnf(float x, int n)
{
	union {float f; uint32_t i;} u;
	float_t y = x;

	if (n > 127) {
   1e86c:	287f      	cmp	r0, #127	; 0x7f
   1e86e:	dd15      	ble.n	1e89c <scalbnf+0x30>
		y *= 0x1p127f;
   1e870:	eddf 7a16 	vldr	s15, [pc, #88]	; 1e8cc <scalbnf+0x60>
		n -= 127;
   1e874:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
		if (n > 127) {
   1e878:	2b7f      	cmp	r3, #127	; 0x7f
		y *= 0x1p127f;
   1e87a:	ee20 0a27 	vmul.f32	s0, s0, s15
		if (n > 127) {
   1e87e:	dd06      	ble.n	1e88e <scalbnf+0x22>
			y *= 0x1p127f;
			n -= 127;
   1e880:	f1a0 03fe 	sub.w	r3, r0, #254	; 0xfe
   1e884:	2b7f      	cmp	r3, #127	; 0x7f
			y *= 0x1p127f;
   1e886:	ee20 0a27 	vmul.f32	s0, s0, s15
   1e88a:	bfa8      	it	ge
   1e88c:	237f      	movge	r3, #127	; 0x7f
			n += 126;
			if (n < -126)
				n = -126;
		}
	}
	u.i = (uint32_t)(0x7f+n)<<23;
   1e88e:	337f      	adds	r3, #127	; 0x7f
   1e890:	05db      	lsls	r3, r3, #23
	x = y * u.f;
	return x;
}
   1e892:	ee07 3a90 	vmov	s15, r3
   1e896:	ee20 0a27 	vmul.f32	s0, s0, s15
   1e89a:	4770      	bx	lr
	} else if (n < -126) {
   1e89c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
   1e8a0:	da12      	bge.n	1e8c8 <scalbnf+0x5c>
		y *= 0x1p-126f;
   1e8a2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1e8d0 <scalbnf+0x64>
		n += 126;
   1e8a6:	f100 037e 	add.w	r3, r0, #126	; 0x7e
		if (n < -126) {
   1e8aa:	f113 0f7e 	cmn.w	r3, #126	; 0x7e
		y *= 0x1p-126f;
   1e8ae:	ee20 0a27 	vmul.f32	s0, s0, s15
		if (n < -126) {
   1e8b2:	daec      	bge.n	1e88e <scalbnf+0x22>
			n += 126;
   1e8b4:	f100 03fc 	add.w	r3, r0, #252	; 0xfc
   1e8b8:	f06f 027d 	mvn.w	r2, #125	; 0x7d
   1e8bc:	4293      	cmp	r3, r2
			y *= 0x1p-126f;
   1e8be:	ee20 0a27 	vmul.f32	s0, s0, s15
   1e8c2:	bfb8      	it	lt
   1e8c4:	4613      	movlt	r3, r2
   1e8c6:	e7e2      	b.n	1e88e <scalbnf+0x22>
   1e8c8:	4603      	mov	r3, r0
   1e8ca:	e7e0      	b.n	1e88e <scalbnf+0x22>
   1e8cc:	7f000000 	.word	0x7f000000
   1e8d0:	00800000 	.word	0x00800000

0001e8d4 <powf>:
	float y1,t1,t2,r,s,sn,t,u,v,w;
	int32_t i,j,k,yisint,n;
	int32_t hx,hy,ix,iy,is;

	GET_FLOAT_WORD(hx, x);
	GET_FLOAT_WORD(hy, y);
   1e8d4:	ee10 1a90 	vmov	r1, s1
	ix = hx & 0x7fffffff;
	iy = hy & 0x7fffffff;

	/* x**0 = 1, even if x is NaN */
	if (iy == 0)
   1e8d8:	f031 4000 	bics.w	r0, r1, #2147483648	; 0x80000000
{
   1e8dc:	b570      	push	{r4, r5, r6, lr}
	if (iy == 0)
   1e8de:	f000 827d 	beq.w	1eddc <powf+0x508>
	GET_FLOAT_WORD(hx, x);
   1e8e2:	ee10 4a10 	vmov	r4, s0
		return 1.0f;
	/* 1**y = 1, even if y is NaN */
	if (hx == 0x3f800000)
   1e8e6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
   1e8ea:	f000 8277 	beq.w	1eddc <powf+0x508>
	ix = hx & 0x7fffffff;
   1e8ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
		return 1.0f;
	/* NaN if either arg is NaN */
	if (ix > 0x7f800000 || iy > 0x7f800000)
   1e8f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1e8f6:	dc02      	bgt.n	1e8fe <powf+0x2a>
   1e8f8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1e8fc:	dd04      	ble.n	1e908 <powf+0x34>
		return x + y;
   1e8fe:	ee70 7a20 	vadd.f32	s15, s0, s1
	if ((j>>23) <= 0)  /* subnormal output */
		z = scalbnf(z, n);
	else
		SET_FLOAT_WORD(z, j);
	return sn*z;
}
   1e902:	eeb0 0a67 	vmov.f32	s0, s15
   1e906:	bd70      	pop	{r4, r5, r6, pc}
	if (hx < 0) {
   1e908:	2c00      	cmp	r4, #0
   1e90a:	da1d      	bge.n	1e948 <powf+0x74>
		if (iy >= 0x4b800000)
   1e90c:	f1b0 4f97 	cmp.w	r0, #1266679808	; 0x4b800000
   1e910:	da2a      	bge.n	1e968 <powf+0x94>
		else if (iy >= 0x3f800000) {
   1e912:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
   1e916:	db30      	blt.n	1e97a <powf+0xa6>
			k = (iy>>23) - 0x7f;         /* exponent */
   1e918:	15c5      	asrs	r5, r0, #23
			j = iy>>(23-k);
   1e91a:	f1c5 0596 	rsb	r5, r5, #150	; 0x96
   1e91e:	fa40 f205 	asr.w	r2, r0, r5
			if ((j<<(23-k)) == iy)
   1e922:	fa02 f505 	lsl.w	r5, r2, r5
   1e926:	4285      	cmp	r5, r0
   1e928:	d127      	bne.n	1e97a <powf+0xa6>
				yisint = 2 - (j & 1);
   1e92a:	f002 0201 	and.w	r2, r2, #1
   1e92e:	f1c2 0202 	rsb	r2, r2, #2
	if (iy == 0x3f800000)    /* y is +-1 */
   1e932:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
   1e936:	d122      	bne.n	1e97e <powf+0xaa>
		return hy >= 0 ? x : 1.0f/x;
   1e938:	2900      	cmp	r1, #0
   1e93a:	f280 8255 	bge.w	1ede8 <powf+0x514>
   1e93e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1e942:	eec7 7a00 	vdiv.f32	s15, s14, s0
   1e946:	e7dc      	b.n	1e902 <powf+0x2e>
	yisint  = 0;
   1e948:	2200      	movs	r2, #0
	if (iy == 0x7f800000) {  /* y is +-inf */
   1e94a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1e94e:	d1f0      	bne.n	1e932 <powf+0x5e>
		if (ix == 0x3f800000)      /* (-1)**+-inf is 1 */
   1e950:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   1e954:	f000 8242 	beq.w	1eddc <powf+0x508>
		else if (ix > 0x3f800000)  /* (|x|>1)**+-inf = inf,0 */
   1e958:	dd08      	ble.n	1e96c <powf+0x98>
			return hy >= 0 ? y : 0.0f;
   1e95a:	eddf 7a9e 	vldr	s15, [pc, #632]	; 1ebd4 <powf+0x300>
   1e95e:	2900      	cmp	r1, #0
   1e960:	bfa8      	it	ge
   1e962:	eef0 7a60 	vmovge.f32	s15, s1
   1e966:	e7cc      	b.n	1e902 <powf+0x2e>
			yisint = 2; /* even integer y */
   1e968:	2202      	movs	r2, #2
   1e96a:	e7ee      	b.n	1e94a <powf+0x76>
		else if (ix != 0)          /* (|x|<1)**+-inf = 0,inf if x!=0 */
   1e96c:	b16b      	cbz	r3, 1e98a <powf+0xb6>
			return hy >= 0 ? 0.0f: -y;
   1e96e:	2900      	cmp	r1, #0
   1e970:	f280 8237 	bge.w	1ede2 <powf+0x50e>
   1e974:	eef1 7a60 	vneg.f32	s15, s1
   1e978:	e7c3      	b.n	1e902 <powf+0x2e>
	yisint  = 0;
   1e97a:	2200      	movs	r2, #0
   1e97c:	e7d9      	b.n	1e932 <powf+0x5e>
	if (hy == 0x40000000)    /* y is 2 */
   1e97e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
   1e982:	d102      	bne.n	1e98a <powf+0xb6>
		return x*x;
   1e984:	ee60 7a00 	vmul.f32	s15, s0, s0
   1e988:	e7bb      	b.n	1e902 <powf+0x2e>
	if (hy == 0x3f000000) {  /* y is  0.5 */
   1e98a:	f1b1 5f7c 	cmp.w	r1, #1056964608	; 0x3f000000
   1e98e:	d105      	bne.n	1e99c <powf+0xc8>
		if (hx >= 0)     /* x >= +0 */
   1e990:	2c00      	cmp	r4, #0
   1e992:	db03      	blt.n	1e99c <powf+0xc8>
}
   1e994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return sqrtf(x);
   1e998:	f000 bd98 	b.w	1f4cc <sqrtf>
	ax = fabsf(x);
   1e99c:	eef0 7ac0 	vabs.f32	s15, s0
	if (ix == 0x7f800000 || ix == 0 || ix == 0x3f800000) { /* x is +-0,+-inf,+-1 */
   1e9a0:	b123      	cbz	r3, 1e9ac <powf+0xd8>
   1e9a2:	f024 4540 	bic.w	r5, r4, #3221225472	; 0xc0000000
   1e9a6:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
   1e9aa:	d115      	bne.n	1e9d8 <powf+0x104>
		if (hy < 0)  /* z = (1/|x|) */
   1e9ac:	2900      	cmp	r1, #0
			z = 1.0f/z;
   1e9ae:	bfbc      	itt	lt
   1e9b0:	eeb7 7a00 	vmovlt.f32	s14, #112	; 0x3f800000  1.0
   1e9b4:	eec7 7a27 	vdivlt.f32	s15, s14, s15
		if (hx < 0) {
   1e9b8:	2c00      	cmp	r4, #0
   1e9ba:	daa2      	bge.n	1e902 <powf+0x2e>
			if (((ix-0x3f800000)|yisint) == 0) {
   1e9bc:	f1a3 537e 	sub.w	r3, r3, #1065353216	; 0x3f800000
   1e9c0:	4313      	orrs	r3, r2
   1e9c2:	d104      	bne.n	1e9ce <powf+0xfa>
				z = (z-z)/(z-z); /* (-1)**non-int is NaN */
   1e9c4:	ee37 7ae7 	vsub.f32	s14, s15, s15
   1e9c8:	eec7 7a07 	vdiv.f32	s15, s14, s14
   1e9cc:	e799      	b.n	1e902 <powf+0x2e>
			} else if (yisint == 1)
   1e9ce:	2a01      	cmp	r2, #1
   1e9d0:	d197      	bne.n	1e902 <powf+0x2e>
				z = -z;          /* (x<0)**odd = -(|x|**odd) */
   1e9d2:	eef1 7a67 	vneg.f32	s15, s15
   1e9d6:	e794      	b.n	1e902 <powf+0x2e>
	if (hx < 0) {
   1e9d8:	2c00      	cmp	r4, #0
   1e9da:	da19      	bge.n	1ea10 <powf+0x13c>
		if (yisint == 0) /* (x<0)**(non-int) is NaN */
   1e9dc:	b922      	cbnz	r2, 1e9e8 <powf+0x114>
			return (x-x)/(x-x);
   1e9de:	ee30 0a40 	vsub.f32	s0, s0, s0
   1e9e2:	eec0 7a00 	vdiv.f32	s15, s0, s0
   1e9e6:	e78c      	b.n	1e902 <powf+0x2e>
			sn = -1.0f;
   1e9e8:	2a01      	cmp	r2, #1
   1e9ea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1e9ee:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1e9f2:	bf08      	it	eq
   1e9f4:	eef0 5a40 	vmoveq.f32	s11, s0
	if (iy > 0x4d000000) { /* if |y| > 2**27 */
   1e9f8:	f1b0 4f9a 	cmp.w	r0, #1291845632	; 0x4d000000
   1e9fc:	f340 8112 	ble.w	1ec24 <powf+0x350>
		if (ix < 0x3f7ffff8)
   1ea00:	4a75      	ldr	r2, [pc, #468]	; (1ebd8 <powf+0x304>)
   1ea02:	4293      	cmp	r3, r2
   1ea04:	dc07      	bgt.n	1ea16 <powf+0x142>
			return hy < 0 ? sn*huge*huge : sn*tiny*tiny;
   1ea06:	2900      	cmp	r1, #0
   1ea08:	da0a      	bge.n	1ea20 <powf+0x14c>
			return sn*huge*huge;  /* overflow */
   1ea0a:	ed9f 0a74 	vldr	s0, [pc, #464]	; 1ebdc <powf+0x308>
   1ea0e:	e009      	b.n	1ea24 <powf+0x150>
	sn = 1.0f; /* sign of result */
   1ea10:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1ea14:	e7f0      	b.n	1e9f8 <powf+0x124>
		if (ix > 0x3f800007)
   1ea16:	4a72      	ldr	r2, [pc, #456]	; (1ebe0 <powf+0x30c>)
   1ea18:	4293      	cmp	r3, r2
   1ea1a:	dd08      	ble.n	1ea2e <powf+0x15a>
			return hy > 0 ? sn*huge*huge : sn*tiny*tiny;
   1ea1c:	2900      	cmp	r1, #0
   1ea1e:	dcf4      	bgt.n	1ea0a <powf+0x136>
			return hy < 0 ? sn*huge*huge : sn*tiny*tiny;
   1ea20:	ed9f 0a70 	vldr	s0, [pc, #448]	; 1ebe4 <powf+0x310>
   1ea24:	ee65 7a80 	vmul.f32	s15, s11, s0
   1ea28:	ee67 7a80 	vmul.f32	s15, s15, s0
   1ea2c:	e769      	b.n	1e902 <powf+0x2e>
		t = ax - 1;     /* t has 20 trailing zeros */
   1ea2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1ea32:	ee37 0ac0 	vsub.f32	s0, s15, s0
		w = (t*t)*(0.5f - t*(0.333333333333f - t*0.25f));
   1ea36:	eddf 7a6c 	vldr	s15, [pc, #432]	; 1ebe8 <powf+0x314>
   1ea3a:	eef1 6a40 	vneg.f32	s13, s0
   1ea3e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1ea42:	eee6 7a87 	vfma.f32	s15, s13, s14
   1ea46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1ea4a:	eea7 7ac0 	vfms.f32	s14, s15, s0
   1ea4e:	ee60 7a00 	vmul.f32	s15, s0, s0
   1ea52:	ee67 7a27 	vmul.f32	s15, s14, s15
		v = t*ivln2_l - w*ivln2;
   1ea56:	ed9f 7a65 	vldr	s14, [pc, #404]	; 1ebec <powf+0x318>
   1ea5a:	ee27 7a67 	vnmul.f32	s14, s14, s15
   1ea5e:	eddf 7a64 	vldr	s15, [pc, #400]	; 1ebf0 <powf+0x31c>
   1ea62:	eea0 7a27 	vfma.f32	s14, s0, s15
		t1 = u + v;
   1ea66:	eddf 7a63 	vldr	s15, [pc, #396]	; 1ebf4 <powf+0x320>
   1ea6a:	eeb0 6a47 	vmov.f32	s12, s14
   1ea6e:	eea0 6a27 	vfma.f32	s12, s0, s15
   1ea72:	ee16 3a10 	vmov	r3, s12
		SET_FLOAT_WORD(t1, is & 0xfffff000);
   1ea76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1ea7a:	f023 030f 	bic.w	r3, r3, #15
		t2 = v - (t1-u);
   1ea7e:	ee06 3a10 	vmov	s12, r3
   1ea82:	eea6 6aa7 	vfma.f32	s12, s13, s15
   1ea86:	ee37 7a46 	vsub.f32	s14, s14, s12
	SET_FLOAT_WORD(y1, is & 0xfffff000);
   1ea8a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1ea8e:	f021 010f 	bic.w	r1, r1, #15
	p_l = (y-y1)*t1 + y*t2;
   1ea92:	ee07 1a90 	vmov	s15, r1
   1ea96:	ee70 7ae7 	vsub.f32	s15, s1, s15
   1ea9a:	ee67 0a20 	vmul.f32	s1, s14, s1
   1ea9e:	ee07 3a10 	vmov	s14, r3
   1eaa2:	eee7 0a87 	vfma.f32	s1, s15, s14
	p_h = y1*t1;
   1eaa6:	ee07 3a90 	vmov	s15, r3
   1eaaa:	ee07 1a10 	vmov	s14, r1
   1eaae:	ee27 7a87 	vmul.f32	s14, s15, s14
	z = p_l + p_h;
   1eab2:	ee70 7a87 	vadd.f32	s15, s1, s14
	GET_FLOAT_WORD(j, z);
   1eab6:	ee17 2a90 	vmov	r2, s15
	if (j > 0x43000000)          /* if z > 128 */
   1eaba:	f1b2 4f86 	cmp.w	r2, #1124073472	; 0x43000000
   1eabe:	dca4      	bgt.n	1ea0a <powf+0x136>
	else if (j == 0x43000000) {  /* if z == 128 */
   1eac0:	f040 8174 	bne.w	1edac <powf+0x4d8>
		if (p_l + ovt > z - p_h)
   1eac4:	eddf 6a4c 	vldr	s13, [pc, #304]	; 1ebf8 <powf+0x324>
   1eac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1eacc:	ee70 6aa6 	vadd.f32	s13, s1, s13
   1ead0:	eef4 6ae7 	vcmpe.f32	s13, s15
   1ead4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ead8:	dc97      	bgt.n	1ea0a <powf+0x136>
	i = j & 0x7fffffff;
   1eada:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
	if (i > 0x3f000000) {   /* if |z| > 0.5, set n = [z+0.5] */
   1eade:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1eae2:	f340 8176 	ble.w	1edd2 <powf+0x4fe>
	k = (i>>23) - 0x7f;
   1eae6:	15db      	asrs	r3, r3, #23
		n = j + (0x00800000>>(k+1));
   1eae8:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
   1eaec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1eaf0:	4103      	asrs	r3, r0
   1eaf2:	4413      	add	r3, r2
		k = ((n&0x7fffffff)>>23) - 0x7f;  /* new k for n */
   1eaf4:	f3c3 51c7 	ubfx	r1, r3, #23, #8
		SET_FLOAT_WORD(t, n & ~(0x007fffff>>k));
   1eaf8:	4840      	ldr	r0, [pc, #256]	; (1ebfc <powf+0x328>)
		k = ((n&0x7fffffff)>>23) - 0x7f;  /* new k for n */
   1eafa:	397f      	subs	r1, #127	; 0x7f
		SET_FLOAT_WORD(t, n & ~(0x007fffff>>k));
   1eafc:	4108      	asrs	r0, r1
   1eafe:	ea23 0400 	bic.w	r4, r3, r0
		p_h -= t;
   1eb02:	ee07 4a90 	vmov	s15, r4
		n = ((n&0x007fffff)|0x00800000)>>(23-k);
   1eb06:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1eb0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1eb0e:	f1c1 0117 	rsb	r1, r1, #23
   1eb12:	4108      	asrs	r0, r1
		if (j < 0)
   1eb14:	2a00      	cmp	r2, #0
		p_h -= t;
   1eb16:	ee37 7a67 	vsub.f32	s14, s14, s15
			n = -n;
   1eb1a:	bfb8      	it	lt
   1eb1c:	4240      	neglt	r0, r0
	t = p_l + p_h;
   1eb1e:	ee77 7a20 	vadd.f32	s15, s14, s1
	v = (p_l-(t-p_h))*lg2 + t*lg2_l;
   1eb22:	ed9f 0a37 	vldr	s0, [pc, #220]	; 1ec00 <powf+0x32c>
	z = u + v;
   1eb26:	eddf 6a37 	vldr	s13, [pc, #220]	; 1ec04 <powf+0x330>
	SET_FLOAT_WORD(t, is & 0xffff8000);
   1eb2a:	ee17 3a90 	vmov	r3, s15
   1eb2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   1eb32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1eb36:	ee07 3a90 	vmov	s15, r3
	v = (p_l-(t-p_h))*lg2 + t*lg2_l;
   1eb3a:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1eb3e:	ee27 0a80 	vmul.f32	s0, s15, s0
   1eb42:	ee70 0ac7 	vsub.f32	s1, s1, s14
   1eb46:	ed9f 7a30 	vldr	s14, [pc, #192]	; 1ec08 <powf+0x334>
   1eb4a:	eea0 0a87 	vfma.f32	s0, s1, s14
	z = u + v;
   1eb4e:	eeb0 7a40 	vmov.f32	s14, s0
   1eb52:	eea7 7aa6 	vfma.f32	s14, s15, s13
	w = v - (z - u);
   1eb56:	eeb0 6a47 	vmov.f32	s12, s14
   1eb5a:	eea7 6ae6 	vfms.f32	s12, s15, s13
	t = z*z;
   1eb5e:	ee67 7a07 	vmul.f32	s15, s14, s14
	w = v - (z - u);
   1eb62:	ee30 0a46 	vsub.f32	s0, s0, s12
	t1 = z - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))));
   1eb66:	eddf 6a29 	vldr	s13, [pc, #164]	; 1ec0c <powf+0x338>
   1eb6a:	ed9f 6a29 	vldr	s12, [pc, #164]	; 1ec10 <powf+0x33c>
   1eb6e:	eea7 6aa6 	vfma.f32	s12, s15, s13
   1eb72:	eddf 6a28 	vldr	s13, [pc, #160]	; 1ec14 <powf+0x340>
   1eb76:	eee6 6a27 	vfma.f32	s13, s12, s15
   1eb7a:	ed9f 6a27 	vldr	s12, [pc, #156]	; 1ec18 <powf+0x344>
   1eb7e:	eea6 6aa7 	vfma.f32	s12, s13, s15
   1eb82:	eddf 6a26 	vldr	s13, [pc, #152]	; 1ec1c <powf+0x348>
   1eb86:	eee6 6a27 	vfma.f32	s13, s12, s15
   1eb8a:	eeb0 6a47 	vmov.f32	s12, s14
   1eb8e:	eea6 6ae7 	vfms.f32	s12, s13, s15
	r = (z*t1)/(t1-2.0f) - (w+z*w);
   1eb92:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
	t1 = z - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))));
   1eb96:	eef0 7a46 	vmov.f32	s15, s12
	r = (z*t1)/(t1-2.0f) - (w+z*w);
   1eb9a:	ee77 6ae6 	vsub.f32	s13, s15, s13
   1eb9e:	ee27 6a06 	vmul.f32	s12, s14, s12
   1eba2:	eea7 0a00 	vfma.f32	s0, s14, s0
   1eba6:	eec6 7a26 	vdiv.f32	s15, s12, s13
   1ebaa:	ee37 0ac0 	vsub.f32	s0, s15, s0
	z = 1.0f - (r - z);
   1ebae:	ee30 7a47 	vsub.f32	s14, s0, s14
   1ebb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1ebb6:	ee30 0a47 	vsub.f32	s0, s0, s14
	GET_FLOAT_WORD(j, z);
   1ebba:	ee10 3a10 	vmov	r3, s0
	j += n<<23;
   1ebbe:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
	if ((j>>23) <= 0)  /* subnormal output */
   1ebc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1ebc6:	f280 8106 	bge.w	1edd6 <powf+0x502>
		z = scalbnf(z, n);
   1ebca:	f7ff fe4f 	bl	1e86c <scalbnf>
	return sn*z;
   1ebce:	ee60 7a25 	vmul.f32	s15, s0, s11
   1ebd2:	e696      	b.n	1e902 <powf+0x2e>
   1ebd4:	00000000 	.word	0x00000000
   1ebd8:	3f7ffff7 	.word	0x3f7ffff7
   1ebdc:	7149f2ca 	.word	0x7149f2ca
   1ebe0:	3f800007 	.word	0x3f800007
   1ebe4:	0da24260 	.word	0x0da24260
   1ebe8:	3eaaaaab 	.word	0x3eaaaaab
   1ebec:	3fb8aa3b 	.word	0x3fb8aa3b
   1ebf0:	36eca570 	.word	0x36eca570
   1ebf4:	3fb8aa00 	.word	0x3fb8aa00
   1ebf8:	3338aa3c 	.word	0x3338aa3c
   1ebfc:	007fffff 	.word	0x007fffff
   1ec00:	35bfbe8c 	.word	0x35bfbe8c
   1ec04:	3f317200 	.word	0x3f317200
   1ec08:	3f317218 	.word	0x3f317218
   1ec0c:	3331bb4c 	.word	0x3331bb4c
   1ec10:	b5ddea0e 	.word	0xb5ddea0e
   1ec14:	388ab355 	.word	0x388ab355
   1ec18:	bb360b61 	.word	0xbb360b61
   1ec1c:	3e2aaaab 	.word	0x3e2aaaab
   1ec20:	4b800000 	.word	0x4b800000
		if (ix < 0x00800000) {
   1ec24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
			GET_FLOAT_WORD(ix, ax);
   1ec28:	bfbf      	itttt	lt
   1ec2a:	ed1f 7a03 	vldrlt	s14, [pc, #-12]	; 1ec20 <powf+0x34c>
   1ec2e:	ee67 7a87 	vmullt.f32	s15, s15, s14
			n -= 24;
   1ec32:	f06f 0217 	mvnlt.w	r2, #23
			GET_FLOAT_WORD(ix, ax);
   1ec36:	ee17 3a90 	vmovlt	r3, s15
		n += ((ix)>>23) - 0x7f;
   1ec3a:	ea4f 50e3 	mov.w	r0, r3, asr #23
		n = 0;
   1ec3e:	bfa8      	it	ge
   1ec40:	2200      	movge	r2, #0
		n += ((ix)>>23) - 0x7f;
   1ec42:	387f      	subs	r0, #127	; 0x7f
   1ec44:	4410      	add	r0, r2
		if (j <= 0x1cc471)       /* |x|<sqrt(3/2) */
   1ec46:	4a6a      	ldr	r2, [pc, #424]	; (1edf0 <powf+0x51c>)
		j = ix & 0x007fffff;
   1ec48:	f3c3 0316 	ubfx	r3, r3, #0, #23
		if (j <= 0x1cc471)       /* |x|<sqrt(3/2) */
   1ec4c:	4293      	cmp	r3, r2
		ix = j | 0x3f800000;     /* normalize ix */
   1ec4e:	f043 557e 	orr.w	r5, r3, #1065353216	; 0x3f800000
		if (j <= 0x1cc471)       /* |x|<sqrt(3/2) */
   1ec52:	dd06      	ble.n	1ec62 <powf+0x38e>
		else if (j < 0x5db3d7)   /* |x|<sqrt(3)   */
   1ec54:	4a67      	ldr	r2, [pc, #412]	; (1edf4 <powf+0x520>)
   1ec56:	4293      	cmp	r3, r2
   1ec58:	f340 80a6 	ble.w	1eda8 <powf+0x4d4>
			n += 1;
   1ec5c:	3001      	adds	r0, #1
			ix -= 0x00800000;
   1ec5e:	f5a5 0500 	sub.w	r5, r5, #8388608	; 0x800000
			k = 0;
   1ec62:	2400      	movs	r4, #0
		u = ax - bp[k];   /* bp[0]=1.0, bp[1]=1.5 */
   1ec64:	4b64      	ldr	r3, [pc, #400]	; (1edf8 <powf+0x524>)
		SET_FLOAT_WORD(s_h, is & 0xfffff000);
   1ec66:	4a65      	ldr	r2, [pc, #404]	; (1edfc <powf+0x528>)
		u = ax - bp[k];   /* bp[0]=1.0, bp[1]=1.5 */
   1ec68:	00a6      	lsls	r6, r4, #2
   1ec6a:	4433      	add	r3, r6
   1ec6c:	edd3 6a00 	vldr	s13, [r3]
		SET_FLOAT_WORD(ax, ix);
   1ec70:	ee07 5a10 	vmov	s14, r5
		v = 1.0f/(ax+bp[k]);
   1ec74:	ee76 7a87 	vadd.f32	s15, s13, s14
   1ec78:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   1ec7c:	ee84 6aa7 	vdiv.f32	s12, s9, s15
		u = ax - bp[k];   /* bp[0]=1.0, bp[1]=1.5 */
   1ec80:	ee37 5a66 	vsub.f32	s10, s14, s13
		s = u*v;
   1ec84:	ee25 4a06 	vmul.f32	s8, s10, s12
		SET_FLOAT_WORD(s_h, is & 0xfffff000);
   1ec88:	ee14 3a10 	vmov	r3, s8
   1ec8c:	4013      	ands	r3, r2
   1ec8e:	ee04 3a90 	vmov	s9, r3
		is = ((ix>>1) & 0xfffff000) | 0x20000000;
   1ec92:	4b5b      	ldr	r3, [pc, #364]	; (1ee00 <powf+0x52c>)
   1ec94:	ea03 0365 	and.w	r3, r3, r5, asr #1
   1ec98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		SET_FLOAT_WORD(t_h, is + 0x00400000 + (k<<21));
   1ec9c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   1eca0:	eb03 5344 	add.w	r3, r3, r4, lsl #21
   1eca4:	ee07 3a90 	vmov	s15, r3
		s_l = v*((u - s_h*t_h) - s_h*t_l);
   1eca8:	eef1 3a64 	vneg.f32	s7, s9
   1ecac:	eea3 5aa7 	vfma.f32	s10, s7, s15
		t_l = ax - (t_h - bp[k]);
   1ecb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
		r = s2*s2*(L1+s2*(L2+s2*(L3+s2*(L4+s2*(L5+s2*L6)))));
   1ecb4:	eddf 6a53 	vldr	s13, [pc, #332]	; 1ee04 <powf+0x530>
		t_l = ax - (t_h - bp[k]);
   1ecb8:	ee77 7a67 	vsub.f32	s15, s14, s15
		s2 = s*s;
   1ecbc:	ee24 7a04 	vmul.f32	s14, s8, s8
		s_l = v*((u - s_h*t_h) - s_h*t_l);
   1ecc0:	eea3 5aa7 	vfma.f32	s10, s7, s15
		r = s2*s2*(L1+s2*(L2+s2*(L3+s2*(L4+s2*(L5+s2*L6)))));
   1ecc4:	ee27 3a07 	vmul.f32	s6, s14, s14
		s_l = v*((u - s_h*t_h) - s_h*t_l);
   1ecc8:	ee65 7a06 	vmul.f32	s15, s10, s12
		r = s2*s2*(L1+s2*(L2+s2*(L3+s2*(L4+s2*(L5+s2*L6)))));
   1eccc:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 1ee08 <powf+0x534>
   1ecd0:	eee7 6a05 	vfma.f32	s13, s14, s10
   1ecd4:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 1ee0c <powf+0x538>
   1ecd8:	eea6 5a87 	vfma.f32	s10, s13, s14
   1ecdc:	eddf 6a4c 	vldr	s13, [pc, #304]	; 1ee10 <powf+0x53c>
   1ece0:	eee5 6a07 	vfma.f32	s13, s10, s14
   1ece4:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 1ee14 <powf+0x540>
   1ece8:	eea6 5a87 	vfma.f32	s10, s13, s14
   1ecec:	eddf 6a4a 	vldr	s13, [pc, #296]	; 1ee18 <powf+0x544>
		r += s_l*(s_h+s);
   1ecf0:	ee34 6a84 	vadd.f32	s12, s9, s8
		r = s2*s2*(L1+s2*(L2+s2*(L3+s2*(L4+s2*(L5+s2*L6)))));
   1ecf4:	eee5 6a07 	vfma.f32	s13, s10, s14
		r += s_l*(s_h+s);
   1ecf8:	ee26 6a27 	vmul.f32	s12, s12, s15
		t_h = 3.0f + s2 + r;
   1ecfc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1ed00:	eeb0 7a45 	vmov.f32	s14, s10
		r += s_l*(s_h+s);
   1ed04:	eea3 6a26 	vfma.f32	s12, s6, s13
		t_h = 3.0f + s2 + r;
   1ed08:	eea4 7aa4 	vfma.f32	s14, s9, s9
   1ed0c:	ee37 7a06 	vadd.f32	s14, s14, s12
		SET_FLOAT_WORD(t_h, is & 0xfffff000);
   1ed10:	ee17 3a10 	vmov	r3, s14
   1ed14:	4013      	ands	r3, r2
   1ed16:	ee07 3a10 	vmov	s14, r3
		t_l = r - ((t_h - 3.0f) - s2);
   1ed1a:	ee77 6a45 	vsub.f32	s13, s14, s10
   1ed1e:	eee3 6aa4 	vfma.f32	s13, s7, s9
   1ed22:	ee76 6a66 	vsub.f32	s13, s12, s13
		v = s_l*t_h + t_l*s;
   1ed26:	ee66 6a84 	vmul.f32	s13, s13, s8
   1ed2a:	eee7 6a27 	vfma.f32	s13, s14, s15
		p_h = u + v;
   1ed2e:	eef0 7a66 	vmov.f32	s15, s13
   1ed32:	eee4 7a87 	vfma.f32	s15, s9, s14
		t1 = (((z_h + z_l) + dp_h[k]) + t);
   1ed36:	eddf 4a39 	vldr	s9, [pc, #228]	; 1ee1c <powf+0x548>
		SET_FLOAT_WORD(p_h, is & 0xfffff000);
   1ed3a:	ee17 3a90 	vmov	r3, s15
   1ed3e:	4013      	ands	r3, r2
		p_l = v - (p_h - u);
   1ed40:	ee06 3a10 	vmov	s12, r3
   1ed44:	eea3 6a87 	vfma.f32	s12, s7, s14
		z_l = cp_l*p_h + p_l*cp+dp_l[k];
   1ed48:	ed9f 7a35 	vldr	s14, [pc, #212]	; 1ee20 <powf+0x54c>
		p_l = v - (p_h - u);
   1ed4c:	ee76 6ac6 	vsub.f32	s13, s13, s12
		SET_FLOAT_WORD(p_h, is & 0xfffff000);
   1ed50:	ee07 3a90 	vmov	s15, r3
		z_l = cp_l*p_h + p_l*cp+dp_l[k];
   1ed54:	ee66 6a87 	vmul.f32	s13, s13, s14
   1ed58:	ed9f 7a32 	vldr	s14, [pc, #200]	; 1ee24 <powf+0x550>
   1ed5c:	4b32      	ldr	r3, [pc, #200]	; (1ee28 <powf+0x554>)
   1ed5e:	eee7 6a87 	vfma.f32	s13, s15, s14
   1ed62:	4433      	add	r3, r6
   1ed64:	ed93 7a00 	vldr	s14, [r3]
		t1 = (((z_h + z_l) + dp_h[k]) + t);
   1ed68:	4b30      	ldr	r3, [pc, #192]	; (1ee2c <powf+0x558>)
		z_l = cp_l*p_h + p_l*cp+dp_l[k];
   1ed6a:	ee76 6a87 	vadd.f32	s13, s13, s14
		t1 = (((z_h + z_l) + dp_h[k]) + t);
   1ed6e:	4433      	add	r3, r6
   1ed70:	eeb0 5a66 	vmov.f32	s10, s13
   1ed74:	eea7 5aa4 	vfma.f32	s10, s15, s9
   1ed78:	ed93 4a00 	vldr	s8, [r3]
		t = (float)n;
   1ed7c:	ee07 0a10 	vmov	s14, r0
		t1 = (((z_h + z_l) + dp_h[k]) + t);
   1ed80:	ee35 5a04 	vadd.f32	s10, s10, s8
		t = (float)n;
   1ed84:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		t1 = (((z_h + z_l) + dp_h[k]) + t);
   1ed88:	ee35 7a06 	vadd.f32	s14, s10, s12
		SET_FLOAT_WORD(t1, is & 0xfffff000);
   1ed8c:	ee17 3a10 	vmov	r3, s14
   1ed90:	4013      	ands	r3, r2
		t2 = z_l - (((t1 - t) - dp_h[k]) - z_h);
   1ed92:	ee07 3a10 	vmov	s14, r3
   1ed96:	ee37 7a46 	vsub.f32	s14, s14, s12
   1ed9a:	ee37 7a44 	vsub.f32	s14, s14, s8
   1ed9e:	eea7 7ae4 	vfms.f32	s14, s15, s9
   1eda2:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1eda6:	e670      	b.n	1ea8a <powf+0x1b6>
			k = 1;
   1eda8:	2401      	movs	r4, #1
   1edaa:	e75b      	b.n	1ec64 <powf+0x390>
	} else if ((j&0x7fffffff) > 0x43160000)  /* z < -150 */ // FIXME: check should be  (uint32_t)j > 0xc3160000
   1edac:	4b20      	ldr	r3, [pc, #128]	; (1ee30 <powf+0x55c>)
   1edae:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   1edb2:	4299      	cmp	r1, r3
   1edb4:	f73f ae34 	bgt.w	1ea20 <powf+0x14c>
	else if (j == 0xc3160000) {  /* z == -150 */
   1edb8:	4b1e      	ldr	r3, [pc, #120]	; (1ee34 <powf+0x560>)
   1edba:	429a      	cmp	r2, r3
   1edbc:	f47f ae8d 	bne.w	1eada <powf+0x206>
		if (p_l <= z-p_h)
   1edc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1edc4:	eef4 7ae0 	vcmpe.f32	s15, s1
   1edc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1edcc:	f6ff ae85 	blt.w	1eada <powf+0x206>
   1edd0:	e626      	b.n	1ea20 <powf+0x14c>
	n = 0;
   1edd2:	2000      	movs	r0, #0
   1edd4:	e6a3      	b.n	1eb1e <powf+0x24a>
		SET_FLOAT_WORD(z, j);
   1edd6:	ee00 3a10 	vmov	s0, r3
   1edda:	e6f8      	b.n	1ebce <powf+0x2fa>
		return 1.0f;
   1eddc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1ede0:	e58f      	b.n	1e902 <powf+0x2e>
			return hy >= 0 ? y : 0.0f;
   1ede2:	eddf 7a15 	vldr	s15, [pc, #84]	; 1ee38 <powf+0x564>
   1ede6:	e58c      	b.n	1e902 <powf+0x2e>
		return hy >= 0 ? x : 1.0f/x;
   1ede8:	eef0 7a40 	vmov.f32	s15, s0
   1edec:	e589      	b.n	1e902 <powf+0x2e>
   1edee:	bf00      	nop
   1edf0:	001cc471 	.word	0x001cc471
   1edf4:	005db3d6 	.word	0x005db3d6
   1edf8:	0002c2ac 	.word	0x0002c2ac
   1edfc:	fffff000 	.word	0xfffff000
   1ee00:	dffff000 	.word	0xdffff000
   1ee04:	3e6c3255 	.word	0x3e6c3255
   1ee08:	3e53f142 	.word	0x3e53f142
   1ee0c:	3e8ba305 	.word	0x3e8ba305
   1ee10:	3eaaaaab 	.word	0x3eaaaaab
   1ee14:	3edb6db7 	.word	0x3edb6db7
   1ee18:	3f19999a 	.word	0x3f19999a
   1ee1c:	3f764000 	.word	0x3f764000
   1ee20:	3f76384f 	.word	0x3f76384f
   1ee24:	b8f623c6 	.word	0xb8f623c6
   1ee28:	0002c2bc 	.word	0x0002c2bc
   1ee2c:	0002c2b4 	.word	0x0002c2b4
   1ee30:	43160000 	.word	0x43160000
   1ee34:	c3160000 	.word	0xc3160000
   1ee38:	00000000 	.word	0x00000000

0001ee3c <expf>:
{
	float_t hi, lo, c, xx, y;
	int k, sign;
	uint32_t hx;

	GET_FLOAT_WORD(hx, x);
   1ee3c:	ee10 3a10 	vmov	r3, s0
	sign = hx >> 31;   /* sign bit of x */
	hx &= 0x7fffffff;  /* high word of |x| */

	/* special cases */
	if (hx >= 0x42aeac50) {  /* if |x| >= -87.33655f or NaN */
   1ee40:	493f      	ldr	r1, [pc, #252]	; (1ef40 <expf+0x104>)
	sign = hx >> 31;   /* sign bit of x */
   1ee42:	0fda      	lsrs	r2, r3, #31
	hx &= 0x7fffffff;  /* high word of |x| */
   1ee44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if (hx >= 0x42aeac50) {  /* if |x| >= -87.33655f or NaN */
   1ee48:	428b      	cmp	r3, r1
{
   1ee4a:	b082      	sub	sp, #8
	if (hx >= 0x42aeac50) {  /* if |x| >= -87.33655f or NaN */
   1ee4c:	d921      	bls.n	1ee92 <expf+0x56>
		if (hx >= 0x42b17218 && !sign) {  /* x >= 88.722839f */
   1ee4e:	f501 3131 	add.w	r1, r1, #181248	; 0x2c400
   1ee52:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   1ee56:	428b      	cmp	r3, r1
   1ee58:	d906      	bls.n	1ee68 <expf+0x2c>
   1ee5a:	b96a      	cbnz	r2, 1ee78 <expf+0x3c>
			/* overflow */
			x *= 0x1p127f;
   1ee5c:	eddf 7a39 	vldr	s15, [pc, #228]	; 1ef44 <expf+0x108>
   1ee60:	ee20 0a27 	vmul.f32	s0, s0, s15
	c = x - xx*(expf_P1+xx*expf_P2);
	y = 1 + (x*c/(2-c) - lo + hi);
	if (k == 0)
		return y;
	return scalbnf(y, k);
}
   1ee64:	b002      	add	sp, #8
   1ee66:	4770      	bx	lr
		if (sign) {
   1ee68:	b932      	cbnz	r2, 1ee78 <expf+0x3c>
		if (hx > 0x3f851592)  /* if |x| > 1.5 ln2 */
   1ee6a:	4937      	ldr	r1, [pc, #220]	; (1ef48 <expf+0x10c>)
   1ee6c:	428b      	cmp	r3, r1
   1ee6e:	d822      	bhi.n	1eeb6 <expf+0x7a>
			k = 1 - sign - sign;
   1ee70:	f1c2 0001 	rsb	r0, r2, #1
   1ee74:	1a80      	subs	r0, r0, r2
   1ee76:	e02b      	b.n	1eed0 <expf+0x94>
			FORCE_EVAL(-0x1p-149f/x);
   1ee78:	ed9f 7a34 	vldr	s14, [pc, #208]	; 1ef4c <expf+0x110>
   1ee7c:	eec7 7a00 	vdiv.f32	s15, s14, s0
   1ee80:	edcd 7a00 	vstr	s15, [sp]
   1ee84:	9900      	ldr	r1, [sp, #0]
			if (hx >= 0x42cff1b5)  /* x <= -103.972084f */
   1ee86:	4932      	ldr	r1, [pc, #200]	; (1ef50 <expf+0x114>)
   1ee88:	428b      	cmp	r3, r1
   1ee8a:	d9ee      	bls.n	1ee6a <expf+0x2e>
				return 0;
   1ee8c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 1ef54 <expf+0x118>
   1ee90:	e7e8      	b.n	1ee64 <expf+0x28>
	if (hx > 0x3eb17218) {  /* if |x| > 0.5 ln2 */
   1ee92:	4931      	ldr	r1, [pc, #196]	; (1ef58 <expf+0x11c>)
   1ee94:	428b      	cmp	r3, r1
   1ee96:	d8e8      	bhi.n	1ee6a <expf+0x2e>
	} else if (hx > 0x39000000) {  /* |x| > 2**-14 */
   1ee98:	f1b3 5f64 	cmp.w	r3, #956301312	; 0x39000000
   1ee9c:	d849      	bhi.n	1ef32 <expf+0xf6>
		FORCE_EVAL(0x1p127f + x);
   1ee9e:	eddf 7a29 	vldr	s15, [pc, #164]	; 1ef44 <expf+0x108>
   1eea2:	ee70 7a27 	vadd.f32	s15, s0, s15
   1eea6:	edcd 7a01 	vstr	s15, [sp, #4]
		return 1 + x;
   1eeaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		FORCE_EVAL(0x1p127f + x);
   1eeae:	9b01      	ldr	r3, [sp, #4]
		return 1 + x;
   1eeb0:	ee30 0a27 	vadd.f32	s0, s0, s15
   1eeb4:	e7d6      	b.n	1ee64 <expf+0x28>
			k = invln2*x + half[sign];
   1eeb6:	4829      	ldr	r0, [pc, #164]	; (1ef5c <expf+0x120>)
   1eeb8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 1ef60 <expf+0x124>
   1eebc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1eec0:	edd0 7a00 	vldr	s15, [r0]
   1eec4:	eee0 7a07 	vfma.f32	s15, s0, s14
   1eec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1eecc:	ee17 0a90 	vmov	r0, s15
		hi = x - k*ln2hi;  /* k*ln2hi is exact here */
   1eed0:	ee07 0a90 	vmov	s15, r0
   1eed4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 1ef64 <expf+0x128>
   1eed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1eedc:	eef0 6a40 	vmov.f32	s13, s0
   1eee0:	eee7 6ac7 	vfms.f32	s13, s15, s14
		lo = k*ln2lo;
   1eee4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 1ef68 <expf+0x12c>
   1eee8:	ee67 7a80 	vmul.f32	s15, s15, s0
		x = hi - lo;
   1eeec:	ee36 0ae7 	vsub.f32	s0, s13, s15
	xx = x*x;
   1eef0:	ee20 6a00 	vmul.f32	s12, s0, s0
	c = x - xx*(expf_P1+xx*expf_P2);
   1eef4:	eddf 5a1d 	vldr	s11, [pc, #116]	; 1ef6c <expf+0x130>
   1eef8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 1ef70 <expf+0x134>
   1eefc:	eea6 7a25 	vfma.f32	s14, s12, s11
   1ef00:	eef0 5a40 	vmov.f32	s11, s0
   1ef04:	eee7 5a46 	vfms.f32	s11, s14, s12
	y = 1 + (x*c/(2-c) - lo + hi);
   1ef08:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
   1ef0c:	ee20 0a25 	vmul.f32	s0, s0, s11
   1ef10:	ee36 6a65 	vsub.f32	s12, s12, s11
   1ef14:	ee80 7a06 	vdiv.f32	s14, s0, s12
   1ef18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1ef1c:	ee77 7a67 	vsub.f32	s15, s14, s15
   1ef20:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1ef24:	ee37 0a80 	vadd.f32	s0, s15, s0
	if (k == 0)
   1ef28:	2800      	cmp	r0, #0
   1ef2a:	d09b      	beq.n	1ee64 <expf+0x28>
}
   1ef2c:	b002      	add	sp, #8
	return scalbnf(y, k);
   1ef2e:	f7ff bc9d 	b.w	1e86c <scalbnf>
		hi = x;
   1ef32:	eef0 6a40 	vmov.f32	s13, s0
		k = 0;
   1ef36:	2000      	movs	r0, #0
		lo = 0;
   1ef38:	eddf 7a06 	vldr	s15, [pc, #24]	; 1ef54 <expf+0x118>
   1ef3c:	e7d8      	b.n	1eef0 <expf+0xb4>
   1ef3e:	bf00      	nop
   1ef40:	42aeac4f 	.word	0x42aeac4f
   1ef44:	7f000000 	.word	0x7f000000
   1ef48:	3f851592 	.word	0x3f851592
   1ef4c:	80000001 	.word	0x80000001
   1ef50:	42cff1b4 	.word	0x42cff1b4
   1ef54:	00000000 	.word	0x00000000
   1ef58:	3eb17218 	.word	0x3eb17218
   1ef5c:	0002c2c4 	.word	0x0002c2c4
   1ef60:	3fb8aa3b 	.word	0x3fb8aa3b
   1ef64:	3f317200 	.word	0x3f317200
   1ef68:	35bfbe8e 	.word	0x35bfbe8e
   1ef6c:	bb355215 	.word	0xbb355215
   1ef70:	3e2aaa8f 	.word	0x3e2aaa8f

0001ef74 <expm1f>:

float expm1f(float x)
{
	float_t y,hi,lo,c,t,e,hxs,hfx,r1,twopk;
	union {float f; uint32_t i;} u = {x};
	uint32_t hx = u.i & 0x7fffffff;
   1ef74:	ee10 2a10 	vmov	r2, s0
	int k, sign = u.i >> 31;

	/* filter out huge and non-finite argument */
	if (hx >= 0x4195b844) {  /* if |x|>=27*ln2 */
   1ef78:	4974      	ldr	r1, [pc, #464]	; (1f14c <expm1f+0x1d8>)
	uint32_t hx = u.i & 0x7fffffff;
   1ef7a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
	if (hx >= 0x4195b844) {  /* if |x|>=27*ln2 */
   1ef7e:	428b      	cmp	r3, r1
{
   1ef80:	b082      	sub	sp, #8
	int k, sign = u.i >> 31;
   1ef82:	ea4f 72d2 	mov.w	r2, r2, lsr #31
	if (hx >= 0x4195b844) {  /* if |x|>=27*ln2 */
   1ef86:	d911      	bls.n	1efac <expm1f+0x38>
		if (hx > 0x7f800000)  /* NaN */
   1ef88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1ef8c:	d87b      	bhi.n	1f086 <expm1f+0x112>
			return x;
		if (sign)
   1ef8e:	2a00      	cmp	r2, #0
   1ef90:	f040 80d8 	bne.w	1f144 <expm1f+0x1d0>
			return -1;
		if (x > o_threshold) {
   1ef94:	eddf 7a6e 	vldr	s15, [pc, #440]	; 1f150 <expm1f+0x1dc>
   1ef98:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1efa0:	dd49      	ble.n	1f036 <expm1f+0xc2>
			x *= 0x1p127f;
   1efa2:	eddf 7a6c 	vldr	s15, [pc, #432]	; 1f154 <expm1f+0x1e0>
	/* exp(x) ~ 2^k (x_reduced - e + 1) */
	if (k == -1)
		return 0.5f*(x-e) - 0.5f;
	if (k == 1) {
		if (x < -0.25f)
			return -2.0f*(e-(x+0.5f));
   1efa6:	ee27 0a80 	vmul.f32	s0, s15, s0
   1efaa:	e06c      	b.n	1f086 <expm1f+0x112>
	if (hx > 0x3eb17218) {           /* if  |x| > 0.5 ln2 */
   1efac:	496a      	ldr	r1, [pc, #424]	; (1f158 <expm1f+0x1e4>)
   1efae:	428b      	cmp	r3, r1
   1efb0:	d95e      	bls.n	1f070 <expm1f+0xfc>
		if (hx < 0x3F851592) {       /* and |x| < 1.5 ln2 */
   1efb2:	496a      	ldr	r1, [pc, #424]	; (1f15c <expm1f+0x1e8>)
   1efb4:	428b      	cmp	r3, r1
   1efb6:	d83e      	bhi.n	1f036 <expm1f+0xc2>
   1efb8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 1f160 <expm1f+0x1ec>
			if (!sign) {
   1efbc:	bba2      	cbnz	r2, 1f028 <expm1f+0xb4>
				hi = x - ln2_hi;
   1efbe:	ee30 7a47 	vsub.f32	s14, s0, s14
				lo = ln2_lo;
   1efc2:	eddf 7a68 	vldr	s15, [pc, #416]	; 1f164 <expm1f+0x1f0>
				k =  1;
   1efc6:	2301      	movs	r3, #1
		x = hi-lo;
   1efc8:	ee37 0a67 	vsub.f32	s0, s14, s15
		c = (hi-x)-lo;
   1efcc:	ee37 7a40 	vsub.f32	s14, s14, s0
   1efd0:	ee77 7a67 	vsub.f32	s15, s14, s15
	hfx = 0.5f*x;
   1efd4:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
   1efd8:	ee60 4a05 	vmul.f32	s9, s0, s10
	r1 = 1.0f+hxs*(Q1+hxs*Q2);
   1efdc:	ed9f 6a62 	vldr	s12, [pc, #392]	; 1f168 <expm1f+0x1f4>
   1efe0:	ed9f 7a62 	vldr	s14, [pc, #392]	; 1f16c <expm1f+0x1f8>
	hxs = x*hfx;
   1efe4:	ee60 6a24 	vmul.f32	s13, s0, s9
	r1 = 1.0f+hxs*(Q1+hxs*Q2);
   1efe8:	eea6 7a86 	vfma.f32	s14, s13, s12
   1efec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1eff0:	eef0 5a46 	vmov.f32	s11, s12
   1eff4:	eee7 5a26 	vfma.f32	s11, s14, s13
   1eff8:	eeb0 7a65 	vmov.f32	s14, s11
	t  = 3.0f - r1*hfx;
   1effc:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
   1f000:	eee4 5ac7 	vfms.f32	s11, s9, s14
	e  = hxs*((r1-t)/(6.0f - x*t));
   1f004:	eef1 4a08 	vmov.f32	s9, #24	; 0x40c00000  6.0
   1f008:	eee0 4a65 	vfms.f32	s9, s0, s11
   1f00c:	ee37 7a65 	vsub.f32	s14, s14, s11
   1f010:	eec7 5a24 	vdiv.f32	s11, s14, s9
   1f014:	ee65 5aa6 	vmul.f32	s11, s11, s13
	if (k == 0)  /* c is 0 */
   1f018:	bbcb      	cbnz	r3, 1f08e <expm1f+0x11a>
		return x - (x*e-hxs);
   1f01a:	eef0 7a66 	vmov.f32	s15, s13
   1f01e:	eed0 7a25 	vfnms.f32	s15, s0, s11
   1f022:	ee30 0a67 	vsub.f32	s0, s0, s15
   1f026:	e02e      	b.n	1f086 <expm1f+0x112>
				hi = x + ln2_hi;
   1f028:	ee30 7a07 	vadd.f32	s14, s0, s14
				k = -1;
   1f02c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				lo = -ln2_lo;
   1f030:	eddf 7a4f 	vldr	s15, [pc, #316]	; 1f170 <expm1f+0x1fc>
   1f034:	e7c8      	b.n	1efc8 <expm1f+0x54>
			k  = invln2*x + (sign ? -0.5f : 0.5f);
   1f036:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1f03a:	2a00      	cmp	r2, #0
   1f03c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
   1f040:	bf08      	it	eq
   1f042:	eef0 7a47 	vmoveq.f32	s15, s14
   1f046:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 1f174 <expm1f+0x200>
			lo = t*ln2_lo;
   1f04a:	eddf 6a46 	vldr	s13, [pc, #280]	; 1f164 <expm1f+0x1f0>
			k  = invln2*x + (sign ? -0.5f : 0.5f);
   1f04e:	ee40 7a07 	vmla.f32	s15, s0, s14
			hi = x - t*ln2_hi;      /* t*ln2_hi is exact here */
   1f052:	ed9f 7a43 	vldr	s14, [pc, #268]	; 1f160 <expm1f+0x1ec>
			k  = invln2*x + (sign ? -0.5f : 0.5f);
   1f056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1f05a:	ee17 3a90 	vmov	r3, s15
			t  = k;
   1f05e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			hi = x - t*ln2_hi;      /* t*ln2_hi is exact here */
   1f062:	eea7 0ac7 	vfms.f32	s0, s15, s14
			lo = t*ln2_lo;
   1f066:	ee67 7aa6 	vmul.f32	s15, s15, s13
			hi = x - t*ln2_hi;      /* t*ln2_hi is exact here */
   1f06a:	eeb0 7a40 	vmov.f32	s14, s0
   1f06e:	e7ab      	b.n	1efc8 <expm1f+0x54>
	} else if (hx < 0x33000000) {  /* when |x|<2**-25, return x */
   1f070:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
   1f074:	d209      	bcs.n	1f08a <expm1f+0x116>
		if (hx < 0x00800000)
   1f076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1f07a:	d204      	bcs.n	1f086 <expm1f+0x112>
			FORCE_EVAL(x*x);
   1f07c:	ee60 7a00 	vmul.f32	s15, s0, s0
   1f080:	edcd 7a01 	vstr	s15, [sp, #4]
   1f084:	9b01      	ldr	r3, [sp, #4]
	if (k < 23)
		y = (x-e+(1-u.f))*twopk;
	else
		y = (x-(e+u.f)+1)*twopk;
	return y;
}
   1f086:	b002      	add	sp, #8
   1f088:	4770      	bx	lr
		k = 0;
   1f08a:	2300      	movs	r3, #0
   1f08c:	e7a2      	b.n	1efd4 <expm1f+0x60>
	e  = x*(e-c) - c;
   1f08e:	ee75 5ae7 	vsub.f32	s11, s11, s15
	if (k == -1)
   1f092:	1c5a      	adds	r2, r3, #1
	e  = x*(e-c) - c;
   1f094:	eed0 7a25 	vfnms.f32	s15, s0, s11
	e -= hxs;
   1f098:	ee77 7ae6 	vsub.f32	s15, s15, s13
	if (k == -1)
   1f09c:	d108      	bne.n	1f0b0 <expm1f+0x13c>
		return 0.5f*(x-e) - 0.5f;
   1f09e:	ee30 7a67 	vsub.f32	s14, s0, s15
   1f0a2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
   1f0a6:	eee7 7a05 	vfma.f32	s15, s14, s10
   1f0aa:	eeb0 0a67 	vmov.f32	s0, s15
   1f0ae:	e7ea      	b.n	1f086 <expm1f+0x112>
	if (k == 1) {
   1f0b0:	2b01      	cmp	r3, #1
   1f0b2:	d116      	bne.n	1f0e2 <expm1f+0x16e>
		if (x < -0.25f)
   1f0b4:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
   1f0b8:	eeb4 0ac7 	vcmpe.f32	s0, s14
   1f0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f0c0:	d506      	bpl.n	1f0d0 <expm1f+0x15c>
			return -2.0f*(e-(x+0.5f));
   1f0c2:	ee30 0a05 	vadd.f32	s0, s0, s10
   1f0c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
   1f0ca:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
   1f0ce:	e76a      	b.n	1efa6 <expm1f+0x32>
		return 1.0f + 2.0f*(x-e);
   1f0d0:	ee70 7a67 	vsub.f32	s15, s0, s15
   1f0d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   1f0d8:	eea7 6a87 	vfma.f32	s12, s15, s14
   1f0dc:	eeb0 0a46 	vmov.f32	s0, s12
   1f0e0:	e7d1      	b.n	1f086 <expm1f+0x112>
	u.i = (0x7f+k)<<23;  /* 2^k */
   1f0e2:	f103 027f 	add.w	r2, r3, #127	; 0x7f
   1f0e6:	05d2      	lsls	r2, r2, #23
	if (k < 0 || k > 56) {   /* suffice to return exp(x)-1 */
   1f0e8:	2b38      	cmp	r3, #56	; 0x38
	u.i = (0x7f+k)<<23;  /* 2^k */
   1f0ea:	ee06 2a90 	vmov	s13, r2
	if (k < 0 || k > 56) {   /* suffice to return exp(x)-1 */
   1f0ee:	d910      	bls.n	1f112 <expm1f+0x19e>
		y = x - e + 1.0f;
   1f0f0:	ee70 7a67 	vsub.f32	s15, s0, s15
		if (k == 128)
   1f0f4:	2b80      	cmp	r3, #128	; 0x80
		y = x - e + 1.0f;
   1f0f6:	ee77 7a86 	vadd.f32	s15, s15, s12
			y = y*2.0f*0x1p127f;
   1f0fa:	bf05      	ittet	eq
   1f0fc:	ed9f 0a15 	vldreq	s0, [pc, #84]	; 1f154 <expm1f+0x1e0>
   1f100:	ee77 7aa7 	vaddeq.f32	s15, s15, s15
			y = y*twopk;
   1f104:	ee66 7aa7 	vmulne.f32	s15, s13, s15
			y = y*2.0f*0x1p127f;
   1f108:	ee67 7a80 	vmuleq.f32	s15, s15, s0
		return y - 1.0f;
   1f10c:	ee37 0ac6 	vsub.f32	s0, s15, s12
   1f110:	e7b9      	b.n	1f086 <expm1f+0x112>
	u.i = (0x7f-k)<<23;  /* 2^-k */
   1f112:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
   1f116:	05d2      	lsls	r2, r2, #23
   1f118:	ee07 2a10 	vmov	s14, r2
	if (k < 23)
   1f11c:	2b16      	cmp	r3, #22
		y = (x-(e+u.f)+1)*twopk;
   1f11e:	bfcb      	itete	gt
   1f120:	ee77 7a27 	vaddgt.f32	s15, s14, s15
		y = (x-e+(1-u.f))*twopk;
   1f124:	ee30 0a67 	vsuble.f32	s0, s0, s15
		y = (x-(e+u.f)+1)*twopk;
   1f128:	ee70 7a67 	vsubgt.f32	s15, s0, s15
		y = (x-e+(1-u.f))*twopk;
   1f12c:	ee76 7a47 	vsuble.f32	s15, s12, s14
		y = (x-(e+u.f)+1)*twopk;
   1f130:	bfcb      	itete	gt
   1f132:	ee77 7a86 	vaddgt.f32	s15, s15, s12
		y = (x-e+(1-u.f))*twopk;
   1f136:	ee30 0a27 	vaddle.f32	s0, s0, s15
		y = (x-(e+u.f)+1)*twopk;
   1f13a:	ee27 0aa6 	vmulgt.f32	s0, s15, s13
		y = (x-e+(1-u.f))*twopk;
   1f13e:	ee20 0a26 	vmulle.f32	s0, s0, s13
   1f142:	e7a0      	b.n	1f086 <expm1f+0x112>
			return -1;
   1f144:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1f148:	e79d      	b.n	1f086 <expm1f+0x112>
   1f14a:	bf00      	nop
   1f14c:	4195b843 	.word	0x4195b843
   1f150:	42b17180 	.word	0x42b17180
   1f154:	7f000000 	.word	0x7f000000
   1f158:	3eb17218 	.word	0x3eb17218
   1f15c:	3f851591 	.word	0x3f851591
   1f160:	3f317180 	.word	0x3f317180
   1f164:	3717f7d1 	.word	0x3717f7d1
   1f168:	3acf3010 	.word	0x3acf3010
   1f16c:	bd088868 	.word	0xbd088868
   1f170:	b717f7d1 	.word	0xb717f7d1
   1f174:	3fb8aa3b 	.word	0x3fb8aa3b

0001f178 <__expo2f>:
	float scale;

	/* note that k is odd and scale*scale overflows */
	SET_FLOAT_WORD(scale, (uint32_t)(0x7f + k/2) << 23);
	/* exp(x - k ln2) * 2**(k-1) */
	return expf(x - kln2) * scale * scale;
   1f178:	eddf 7a06 	vldr	s15, [pc, #24]	; 1f194 <__expo2f+0x1c>
{
   1f17c:	b508      	push	{r3, lr}
	return expf(x - kln2) * scale * scale;
   1f17e:	ee30 0a67 	vsub.f32	s0, s0, s15
   1f182:	f7ff fe5b 	bl	1ee3c <expf>
   1f186:	eddf 7a04 	vldr	s15, [pc, #16]	; 1f198 <__expo2f+0x20>
   1f18a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
   1f18e:	ee20 0a27 	vmul.f32	s0, s0, s15
   1f192:	bd08      	pop	{r3, pc}
   1f194:	4322e3bc 	.word	0x4322e3bc
   1f198:	7a000000 	.word	0x7a000000

0001f19c <logf>:
	union {float f; uint32_t i;} u = {x};
	float_t hfsq,f,s,z,R,w,t1,t2,dk;
	uint32_t ix;
	int k;

	ix = u.i;
   1f19c:	ee10 2a10 	vmov	r2, s0
	k = 0;
	if (ix < 0x00800000 || ix>>31) {  /* x < 2**-126  */
   1f1a0:	4b34      	ldr	r3, [pc, #208]	; (1f274 <logf+0xd8>)
   1f1a2:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
   1f1a6:	4299      	cmp	r1, r3
   1f1a8:	d959      	bls.n	1f25e <logf+0xc2>
		if (ix<<1 == 0)
   1f1aa:	0053      	lsls	r3, r2, #1
   1f1ac:	d106      	bne.n	1f1bc <logf+0x20>
			return -1/(x*x);  /* log(+-0)=-inf */
   1f1ae:	ee60 7a00 	vmul.f32	s15, s0, s0
   1f1b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
		if (ix>>31)
			return (x-x)/0.0f; /* log(-#) = NaN */
   1f1b6:	ee87 0a27 	vdiv.f32	s0, s14, s15
   1f1ba:	4770      	bx	lr
		if (ix>>31)
   1f1bc:	2a00      	cmp	r2, #0
   1f1be:	da04      	bge.n	1f1ca <logf+0x2e>
			return (x-x)/0.0f; /* log(-#) = NaN */
   1f1c0:	ee30 7a40 	vsub.f32	s14, s0, s0
   1f1c4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 1f278 <logf+0xdc>
   1f1c8:	e7f5      	b.n	1f1b6 <logf+0x1a>
		/* subnormal number, scale up x */
		k -= 25;
		x *= 0x1p25f;
		u.f = x;
		ix = u.i;
   1f1ca:	eddf 7a2c 	vldr	s15, [pc, #176]	; 1f27c <logf+0xe0>
   1f1ce:	ee60 7a27 	vmul.f32	s15, s0, s15
		k -= 25;
   1f1d2:	f06f 0118 	mvn.w	r1, #24
		ix = u.i;
   1f1d6:	ee17 2a90 	vmov	r2, s15
		return x;
	} else if (ix == 0x3f800000)
		return 0;

	/* reduce x into [sqrt(2)/2, sqrt(2)] */
	ix += 0x3f800000 - 0x3f3504f3;
   1f1da:	4b29      	ldr	r3, [pc, #164]	; (1f280 <logf+0xe4>)

	f = x - 1.0f;
	s = f/(2.0f + f);
	z = s*s;
	w = z*z;
	t1= w*(Lg2+w*Lg4);
   1f1dc:	eddf 6a29 	vldr	s13, [pc, #164]	; 1f284 <logf+0xe8>
   1f1e0:	eddf 4a29 	vldr	s9, [pc, #164]	; 1f288 <logf+0xec>
	t2= z*(Lg1+w*Lg3);
   1f1e4:	eddf 3a29 	vldr	s7, [pc, #164]	; 1f28c <logf+0xf0>
	ix += 0x3f800000 - 0x3f3504f3;
   1f1e8:	4413      	add	r3, r2
	ix = (ix&0x007fffff) + 0x3f3504f3;
   1f1ea:	4a29      	ldr	r2, [pc, #164]	; (1f290 <logf+0xf4>)
   1f1ec:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1f1f0:	4402      	add	r2, r0
	f = x - 1.0f;
   1f1f2:	ee07 2a90 	vmov	s15, r2
   1f1f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1f1fa:	ee37 7ac0 	vsub.f32	s14, s15, s0
	s = f/(2.0f + f);
   1f1fe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   1f202:	ee77 7a27 	vadd.f32	s15, s14, s15
	k += (int)(ix>>23) - 0x7f;
   1f206:	0ddb      	lsrs	r3, r3, #23
	s = f/(2.0f + f);
   1f208:	eec7 5a27 	vdiv.f32	s11, s14, s15
	k += (int)(ix>>23) - 0x7f;
   1f20c:	3b7f      	subs	r3, #127	; 0x7f
   1f20e:	440b      	add	r3, r1
	R = t2 + t1;
	hfsq = 0.5f*f*f;
   1f210:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	z = s*s;
   1f214:	ee25 4aa5 	vmul.f32	s8, s11, s11
	hfsq = 0.5f*f*f;
   1f218:	ee27 6a06 	vmul.f32	s12, s14, s12
	w = z*z;
   1f21c:	ee24 5a04 	vmul.f32	s10, s8, s8
	dk = k;
   1f220:	ee07 3a90 	vmov	s15, r3
	t1= w*(Lg2+w*Lg4);
   1f224:	eee5 4a26 	vfma.f32	s9, s10, s13
	t2= z*(Lg1+w*Lg3);
   1f228:	eddf 6a1a 	vldr	s13, [pc, #104]	; 1f294 <logf+0xf8>
	return s*(hfsq+R) + dk*ln2_lo - hfsq + f + dk*ln2_hi;
   1f22c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 1f298 <logf+0xfc>
	t2= z*(Lg1+w*Lg3);
   1f230:	eee5 6a23 	vfma.f32	s13, s10, s7
	dk = k;
   1f234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	t2= z*(Lg1+w*Lg3);
   1f238:	ee66 6a84 	vmul.f32	s13, s13, s8
	return s*(hfsq+R) + dk*ln2_lo - hfsq + f + dk*ln2_hi;
   1f23c:	ee27 0a80 	vmul.f32	s0, s15, s0
	R = t2 + t1;
   1f240:	eee4 6a85 	vfma.f32	s13, s9, s10
	return s*(hfsq+R) + dk*ln2_lo - hfsq + f + dk*ln2_hi;
   1f244:	eee6 6a07 	vfma.f32	s13, s12, s14
   1f248:	eea6 0aa5 	vfma.f32	s0, s13, s11
   1f24c:	eea6 0a47 	vfms.f32	s0, s12, s14
   1f250:	ee30 0a07 	vadd.f32	s0, s0, s14
   1f254:	ed9f 7a11 	vldr	s14, [pc, #68]	; 1f29c <logf+0x100>
   1f258:	eea7 0a87 	vfma.f32	s0, s15, s14
   1f25c:	4770      	bx	lr
	} else if (ix >= 0x7f800000) {
   1f25e:	429a      	cmp	r2, r3
   1f260:	d806      	bhi.n	1f270 <logf+0xd4>
	} else if (ix == 0x3f800000)
   1f262:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
   1f266:	d001      	beq.n	1f26c <logf+0xd0>
	k = 0;
   1f268:	2100      	movs	r1, #0
   1f26a:	e7b6      	b.n	1f1da <logf+0x3e>
		return 0;
   1f26c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 1f278 <logf+0xdc>
}
   1f270:	4770      	bx	lr
   1f272:	bf00      	nop
   1f274:	7f7fffff 	.word	0x7f7fffff
   1f278:	00000000 	.word	0x00000000
   1f27c:	4c000000 	.word	0x4c000000
   1f280:	004afb0d 	.word	0x004afb0d
   1f284:	3e789e26 	.word	0x3e789e26
   1f288:	3eccce13 	.word	0x3eccce13
   1f28c:	3e91e9ee 	.word	0x3e91e9ee
   1f290:	3f3504f3 	.word	0x3f3504f3
   1f294:	3f2aaaaa 	.word	0x3f2aaaaa
   1f298:	3717f7d1 	.word	0x3717f7d1
   1f29c:	3f317180 	.word	0x3f317180

0001f2a0 <coshf>:
	union {float f; uint32_t i;} u = {.f = x};
	uint32_t w;
	float t;

	/* |x| */
	u.i &= 0x7fffffff;
   1f2a0:	ee10 3a10 	vmov	r3, s0
{
   1f2a4:	b507      	push	{r0, r1, r2, lr}
	x = u.f;
	w = u.i;

	/* |x| < log(2) */
	if (w < 0x3f317217) {
   1f2a6:	4a1d      	ldr	r2, [pc, #116]	; (1f31c <coshf+0x7c>)
	u.i &= 0x7fffffff;
   1f2a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if (w < 0x3f317217) {
   1f2ac:	4293      	cmp	r3, r2
	u.i &= 0x7fffffff;
   1f2ae:	ee00 3a10 	vmov	s0, r3
	if (w < 0x3f317217) {
   1f2b2:	d81d      	bhi.n	1f2f0 <coshf+0x50>
		if (w < 0x3f800000 - (12<<23)) {
   1f2b4:	f1b3 5f66 	cmp.w	r3, #964689920	; 0x39800000
   1f2b8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   1f2bc:	d20b      	bcs.n	1f2d6 <coshf+0x36>
			FORCE_EVAL(x + 0x1p120f);
   1f2be:	eddf 7a18 	vldr	s15, [pc, #96]	; 1f320 <coshf+0x80>
   1f2c2:	ee30 0a27 	vadd.f32	s0, s0, s15
   1f2c6:	ed8d 0a01 	vstr	s0, [sp, #4]
   1f2ca:	9b01      	ldr	r3, [sp, #4]
			return 1;
   1f2cc:	eeb0 0a44 	vmov.f32	s0, s8
	}

	/* |x| > log(FLT_MAX) or nan */
	t = __expo2f(x);
	return t;
}
   1f2d0:	b003      	add	sp, #12
   1f2d2:	f85d fb04 	ldr.w	pc, [sp], #4
		t = expm1f(x);
   1f2d6:	f7ff fe4d 	bl	1ef74 <expm1f>
		return 1 + t*t/(2*(1+t));
   1f2da:	ee20 7a00 	vmul.f32	s14, s0, s0
   1f2de:	ee30 0a04 	vadd.f32	s0, s0, s8
   1f2e2:	ee30 0a00 	vadd.f32	s0, s0, s0
   1f2e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
   1f2ea:	ee37 0a84 	vadd.f32	s0, s15, s8
   1f2ee:	e7ef      	b.n	1f2d0 <coshf+0x30>
	if (w < 0x42b17217) {
   1f2f0:	4a0c      	ldr	r2, [pc, #48]	; (1f324 <coshf+0x84>)
   1f2f2:	4293      	cmp	r3, r2
   1f2f4:	d80c      	bhi.n	1f310 <coshf+0x70>
		t = expf(x);
   1f2f6:	f7ff fda1 	bl	1ee3c <expf>
		return 0.5f*(t + 1/t);
   1f2fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f2fe:	ee87 4a80 	vdiv.f32	s8, s15, s0
   1f302:	ee34 4a00 	vadd.f32	s8, s8, s0
   1f306:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
   1f30a:	ee24 0a00 	vmul.f32	s0, s8, s0
   1f30e:	e7df      	b.n	1f2d0 <coshf+0x30>
}
   1f310:	b003      	add	sp, #12
   1f312:	f85d eb04 	ldr.w	lr, [sp], #4
	t = __expo2f(x);
   1f316:	f7ff bf2f 	b.w	1f178 <__expo2f>
   1f31a:	bf00      	nop
   1f31c:	3f317216 	.word	0x3f317216
   1f320:	7b800000 	.word	0x7b800000
   1f324:	42b17216 	.word	0x42b17216

0001f328 <sinhf>:
// sinhf from musl-0.9.15
/*****************************************************************************/
/*****************************************************************************/

float sinhf(float x)
{
   1f328:	b508      	push	{r3, lr}
	union {float f; uint32_t i;} u = {.f = x};
	uint32_t w;
	float t, h, absx;

	h = 0.5;
	if (u.i >> 31)
   1f32a:	ee10 3a10 	vmov	r3, s0
   1f32e:	1e18      	subs	r0, r3, #0
	u.i &= 0x7fffffff;
	absx = u.f;
	w = u.i;

	/* |x| < log(FLT_MAX) */
	if (w < 0x42b17217) {
   1f330:	4b1c      	ldr	r3, [pc, #112]	; (1f3a4 <sinhf+0x7c>)
	u.i &= 0x7fffffff;
   1f332:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
		h = -h;
   1f336:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
   1f33a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
   1f33e:	bfb8      	it	lt
   1f340:	eef0 3a67 	vmovlt.f32	s7, s15
	if (w < 0x42b17217) {
   1f344:	4298      	cmp	r0, r3
{
   1f346:	eeb0 4a40 	vmov.f32	s8, s0
	u.i &= 0x7fffffff;
   1f34a:	ee00 0a10 	vmov	s0, r0
	if (w < 0x42b17217) {
   1f34e:	d821      	bhi.n	1f394 <sinhf+0x6c>
		t = expm1f(absx);
   1f350:	f7ff fe10 	bl	1ef74 <expm1f>
		if (w < 0x3f800000) {
   1f354:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
   1f358:	d213      	bcs.n	1f382 <sinhf+0x5a>
			if (w < 0x3f800000 - (12<<23))
   1f35a:	f1b0 5f66 	cmp.w	r0, #964689920	; 0x39800000
   1f35e:	d30d      	bcc.n	1f37c <sinhf+0x54>
				return x;
			return h*(2*t - t*t/(t+1));
   1f360:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f364:	ee70 7a27 	vadd.f32	s15, s0, s15
   1f368:	ee20 7a00 	vmul.f32	s14, s0, s0
   1f36c:	ee87 4a27 	vdiv.f32	s8, s14, s15
   1f370:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   1f374:	ee90 4a27 	vfnms.f32	s8, s0, s15
		}
		return h*(t + t/(t+1));
   1f378:	ee24 4a23 	vmul.f32	s8, s8, s7
	}

	/* |x| > logf(FLT_MAX) or nan */
	t = 2*h*__expo2f(absx);
	return t;
}
   1f37c:	eeb0 0a44 	vmov.f32	s0, s8
   1f380:	bd08      	pop	{r3, pc}
		return h*(t + t/(t+1));
   1f382:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f386:	ee70 7a27 	vadd.f32	s15, s0, s15
   1f38a:	ee80 4a27 	vdiv.f32	s8, s0, s15
   1f38e:	ee34 4a00 	vadd.f32	s8, s8, s0
   1f392:	e7f1      	b.n	1f378 <sinhf+0x50>
	t = 2*h*__expo2f(absx);
   1f394:	f7ff fef0 	bl	1f178 <__expo2f>
   1f398:	ee73 3aa3 	vadd.f32	s7, s7, s7
   1f39c:	ee23 4a80 	vmul.f32	s8, s7, s0
	return t;
   1f3a0:	e7ec      	b.n	1f37c <sinhf+0x54>
   1f3a2:	bf00      	nop
   1f3a4:	42b17216 	.word	0x42b17216

0001f3a8 <ceilf>:
// ceilf, floorf and truncf from musl-0.9.15
/*****************************************************************************/
/*****************************************************************************/

float ceilf(float x)
{
   1f3a8:	ee10 3a10 	vmov	r3, s0
	union {float f; uint32_t i;} u = {x};
	int e = (int)(u.i >> 23 & 0xff) - 0x7f;
   1f3ac:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1f3b0:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
	uint32_t m;

	if (e >= 23)
   1f3b4:	2816      	cmp	r0, #22
{
   1f3b6:	b082      	sub	sp, #8
	int e = (int)(u.i >> 23 & 0xff) - 0x7f;
   1f3b8:	ee10 2a10 	vmov	r2, s0
	if (e >= 23)
   1f3bc:	dc11      	bgt.n	1f3e2 <ceilf+0x3a>
		return x;
	if (e >= 0) {
   1f3be:	2800      	cmp	r0, #0
   1f3c0:	db13      	blt.n	1f3ea <ceilf+0x42>
		m = 0x007fffff >> e;
   1f3c2:	4913      	ldr	r1, [pc, #76]	; (1f410 <ceilf+0x68>)
   1f3c4:	4101      	asrs	r1, r0
		if ((u.i & m) == 0)
   1f3c6:	420b      	tst	r3, r1
   1f3c8:	d00b      	beq.n	1f3e2 <ceilf+0x3a>
			return x;
		FORCE_EVAL(x + 0x1p120f);
   1f3ca:	eddf 7a12 	vldr	s15, [pc, #72]	; 1f414 <ceilf+0x6c>
   1f3ce:	ee70 7a27 	vadd.f32	s15, s0, s15
		if (u.i >> 31 == 0)
   1f3d2:	2b00      	cmp	r3, #0
		FORCE_EVAL(x + 0x1p120f);
   1f3d4:	edcd 7a00 	vstr	s15, [sp]
			u.i += m;
   1f3d8:	bfa8      	it	ge
   1f3da:	185b      	addge	r3, r3, r1
		FORCE_EVAL(x + 0x1p120f);
   1f3dc:	9800      	ldr	r0, [sp, #0]
		u.i &= ~m;
   1f3de:	ea23 0301 	bic.w	r3, r3, r1
			u.f = -0.0;
		else if (u.i << 1)
			u.f = 1.0;
	}
	return u.f;
}
   1f3e2:	ee00 3a10 	vmov	s0, r3
   1f3e6:	b002      	add	sp, #8
   1f3e8:	4770      	bx	lr
		FORCE_EVAL(x + 0x1p120f);
   1f3ea:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1f414 <ceilf+0x6c>
   1f3ee:	ee70 7a27 	vadd.f32	s15, s0, s15
		if (u.i >> 31)
   1f3f2:	2b00      	cmp	r3, #0
		FORCE_EVAL(x + 0x1p120f);
   1f3f4:	edcd 7a01 	vstr	s15, [sp, #4]
   1f3f8:	9901      	ldr	r1, [sp, #4]
		if (u.i >> 31)
   1f3fa:	db06      	blt.n	1f40a <ceilf+0x62>
			u.f = 1.0;
   1f3fc:	0052      	lsls	r2, r2, #1
   1f3fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f402:	bf18      	it	ne
   1f404:	ee17 3a90 	vmovne	r3, s15
   1f408:	e7eb      	b.n	1f3e2 <ceilf+0x3a>
			u.f = -0.0;
   1f40a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1f40e:	e7e8      	b.n	1f3e2 <ceilf+0x3a>
   1f410:	007fffff 	.word	0x007fffff
   1f414:	7b800000 	.word	0x7b800000

0001f418 <floorf>:

float floorf(float x)
{
   1f418:	ee10 3a10 	vmov	r3, s0
	union {float f; uint32_t i;} u = {x};
	int e = (int)(u.i >> 23 & 0xff) - 0x7f;
   1f41c:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1f420:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
	uint32_t m;

	if (e >= 23)
   1f424:	2816      	cmp	r0, #22
{
   1f426:	b082      	sub	sp, #8
	int e = (int)(u.i >> 23 & 0xff) - 0x7f;
   1f428:	ee10 2a10 	vmov	r2, s0
	if (e >= 23)
   1f42c:	dc11      	bgt.n	1f452 <floorf+0x3a>
		return x;
	if (e >= 0) {
   1f42e:	2800      	cmp	r0, #0
   1f430:	db13      	blt.n	1f45a <floorf+0x42>
		m = 0x007fffff >> e;
   1f432:	4913      	ldr	r1, [pc, #76]	; (1f480 <floorf+0x68>)
   1f434:	4101      	asrs	r1, r0
		if ((u.i & m) == 0)
   1f436:	420b      	tst	r3, r1
   1f438:	d00b      	beq.n	1f452 <floorf+0x3a>
			return x;
		FORCE_EVAL(x + 0x1p120f);
   1f43a:	eddf 7a12 	vldr	s15, [pc, #72]	; 1f484 <floorf+0x6c>
   1f43e:	ee70 7a27 	vadd.f32	s15, s0, s15
		if (u.i >> 31)
   1f442:	2b00      	cmp	r3, #0
		FORCE_EVAL(x + 0x1p120f);
   1f444:	edcd 7a00 	vstr	s15, [sp]
			u.i += m;
   1f448:	bfb8      	it	lt
   1f44a:	185b      	addlt	r3, r3, r1
		FORCE_EVAL(x + 0x1p120f);
   1f44c:	9800      	ldr	r0, [sp, #0]
		u.i &= ~m;
   1f44e:	ea23 0301 	bic.w	r3, r3, r1
			u.i = 0;
		else if (u.i << 1)
			u.f = -1.0;
	}
	return u.f;
}
   1f452:	ee00 3a10 	vmov	s0, r3
   1f456:	b002      	add	sp, #8
   1f458:	4770      	bx	lr
		FORCE_EVAL(x + 0x1p120f);
   1f45a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1f484 <floorf+0x6c>
   1f45e:	ee70 7a27 	vadd.f32	s15, s0, s15
		if (u.i >> 31 == 0)
   1f462:	2b00      	cmp	r3, #0
		FORCE_EVAL(x + 0x1p120f);
   1f464:	edcd 7a01 	vstr	s15, [sp, #4]
   1f468:	9901      	ldr	r1, [sp, #4]
		if (u.i >> 31 == 0)
   1f46a:	da06      	bge.n	1f47a <floorf+0x62>
			u.f = -1.0;
   1f46c:	0052      	lsls	r2, r2, #1
   1f46e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   1f472:	bf18      	it	ne
   1f474:	ee17 3a90 	vmovne	r3, s15
   1f478:	e7eb      	b.n	1f452 <floorf+0x3a>
			u.i = 0;
   1f47a:	2300      	movs	r3, #0
   1f47c:	e7e9      	b.n	1f452 <floorf+0x3a>
   1f47e:	bf00      	nop
   1f480:	007fffff 	.word	0x007fffff
   1f484:	7b800000 	.word	0x7b800000

0001f488 <truncf>:

float truncf(float x)
{
   1f488:	ee10 2a10 	vmov	r2, s0
	union {float f; uint32_t i;} u = {x};
	int e = (int)(u.i >> 23 & 0xff) - 0x7f + 9;
   1f48c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   1f490:	3b76      	subs	r3, #118	; 0x76
	uint32_t m;

	if (e >= 23 + 9)
   1f492:	2b1f      	cmp	r3, #31
{
   1f494:	b082      	sub	sp, #8
	int e = (int)(u.i >> 23 & 0xff) - 0x7f + 9;
   1f496:	ee10 0a10 	vmov	r0, s0
	if (e >= 23 + 9)
   1f49a:	dc11      	bgt.n	1f4c0 <truncf+0x38>
		return x;
	if (e < 9)
		e = 1;
   1f49c:	2b08      	cmp	r3, #8
   1f49e:	bfd8      	it	le
   1f4a0:	2301      	movle	r3, #1
	m = -1U >> e;
   1f4a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f4a6:	fa21 f303 	lsr.w	r3, r1, r3
	if ((u.i & m) == 0)
   1f4aa:	421a      	tst	r2, r3
   1f4ac:	d008      	beq.n	1f4c0 <truncf+0x38>
		return x;
	FORCE_EVAL(x + 0x1p120f);
   1f4ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 1f4c8 <truncf+0x40>
   1f4b2:	ee70 7a27 	vadd.f32	s15, s0, s15
   1f4b6:	edcd 7a01 	vstr	s15, [sp, #4]
   1f4ba:	9a01      	ldr	r2, [sp, #4]
	u.i &= ~m;
   1f4bc:	ea20 0203 	bic.w	r2, r0, r3
	return u.f;
}
   1f4c0:	ee00 2a10 	vmov	s0, r2
   1f4c4:	b002      	add	sp, #8
   1f4c6:	4770      	bx	lr
   1f4c8:	7b800000 	.word	0x7b800000

0001f4cc <sqrtf>:
// an implementation of sqrtf for Thumb using hardware VFP instructions

#include <math.h>

float sqrtf(float x) {
    asm volatile (
   1f4cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
            "vsqrt.f32  %[r], %[x]\n"
            : [r] "=t" (x)
            : [x] "t"  (x));
    return x;
}
   1f4d0:	4770      	bx	lr
	...

0001f4d4 <R>:
qS1 = -7.0662963390e-01;

static float R(float z)
{
	float_t p, q;
	p = z*(pS0+z*(pS1+z*pS2));
   1f4d4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1f500 <R+0x2c>
   1f4d8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1f504 <R+0x30>
	q = 1.0f+z*qS1;
   1f4dc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 1f508 <R+0x34>
	p = z*(pS0+z*(pS1+z*pS2));
   1f4e0:	eea0 7a27 	vfma.f32	s14, s0, s15
   1f4e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 1f50c <R+0x38>
   1f4e8:	eee7 7a00 	vfma.f32	s15, s14, s0
	q = 1.0f+z*qS1;
   1f4ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1f4f0:	eea0 7a26 	vfma.f32	s14, s0, s13
	p = z*(pS0+z*(pS1+z*pS2));
   1f4f4:	ee67 7a80 	vmul.f32	s15, s15, s0
	return p/q;
}
   1f4f8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1f4fc:	4770      	bx	lr
   1f4fe:	bf00      	nop
   1f500:	bc0dd36b 	.word	0xbc0dd36b
   1f504:	bd2f13ba 	.word	0xbd2f13ba
   1f508:	bf34e5ae 	.word	0xbf34e5ae
   1f50c:	3e2aaa75 	.word	0x3e2aaa75

0001f510 <asinf>:

float asinf(float x)
{
   1f510:	b510      	push	{r4, lr}
	// dpgeorge: s was double in original implementation
	float s,z;
	uint32_t hx,ix;

	GET_FLOAT_WORD(hx, x);
   1f512:	ee10 4a10 	vmov	r4, s0
	ix = hx & 0x7fffffff;
   1f516:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
	if (ix >= 0x3f800000) {  /* |x| >= 1 */
   1f51a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
{
   1f51e:	ed2d 8b02 	vpush	{d8}
   1f522:	eeb0 6a40 	vmov.f32	s12, s0
	if (ix >= 0x3f800000) {  /* |x| >= 1 */
   1f526:	d314      	bcc.n	1f552 <asinf+0x42>
		if (ix == 0x3f800000)  /* |x| == 1 */
			return x*pio2_hi + 0x1p-120f;  /* asin(+-1) = +-pi/2 with inexact */
		return 0/(x-x);  /* asin(|x|>1) is NaN */
   1f528:	bf19      	ittee	ne
   1f52a:	ee76 7a46 	vsubne.f32	s15, s12, s12
   1f52e:	ed9f 7a23 	vldrne	s14, [pc, #140]	; 1f5bc <asinf+0xac>
			return x*pio2_hi + 0x1p-120f;  /* asin(+-1) = +-pi/2 with inexact */
   1f532:	eddf 7a23 	vldreq	s15, [pc, #140]	; 1f5c0 <asinf+0xb0>
   1f536:	ed9f 7a23 	vldreq	s14, [pc, #140]	; 1f5c4 <asinf+0xb4>
		return 0/(x-x);  /* asin(|x|>1) is NaN */
   1f53a:	bf12      	itee	ne
   1f53c:	ee87 6a27 	vdivne.f32	s12, s14, s15
			return x*pio2_hi + 0x1p-120f;  /* asin(+-1) = +-pi/2 with inexact */
   1f540:	eee0 7a07 	vfmaeq.f32	s15, s0, s14
   1f544:	eeb0 6a67 	vmoveq.f32	s12, s15
	s = sqrtf(z);
	x = pio2_hi - (2*(s+s*R(z)) - pio2_lo); // dpgeorge: use pio2_hi and pio2_lo
	if (hx >> 31)
		return -x;
	return x;
}
   1f548:	ecbd 8b02 	vpop	{d8}
   1f54c:	eeb0 0a46 	vmov.f32	s0, s12
   1f550:	bd10      	pop	{r4, pc}
	if (ix < 0x3f000000) {  /* |x| < 0.5 */
   1f552:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1f556:	d20b      	bcs.n	1f570 <asinf+0x60>
		if (ix < 0x39800000 && ix >= 0x00800000)
   1f558:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1f55c:	f1b3 5f64 	cmp.w	r3, #956301312	; 0x39000000
   1f560:	d3f2      	bcc.n	1f548 <asinf+0x38>
		return x + x*R(x*x);
   1f562:	ee20 0a00 	vmul.f32	s0, s0, s0
   1f566:	f7ff ffb5 	bl	1f4d4 <R>
   1f56a:	eea0 6a06 	vfma.f32	s12, s0, s12
   1f56e:	e7eb      	b.n	1f548 <asinf+0x38>
	z = (1 - fabsf(x))*0.5f;
   1f570:	eeb0 6ac0 	vabs.f32	s12, s0
   1f574:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   1f578:	ee38 6a46 	vsub.f32	s12, s16, s12
   1f57c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
   1f580:	ee26 8a08 	vmul.f32	s16, s12, s16
	s = sqrtf(z);
   1f584:	eeb0 0a48 	vmov.f32	s0, s16
   1f588:	f7ff ffa0 	bl	1f4cc <sqrtf>
   1f58c:	eeb0 6a40 	vmov.f32	s12, s0
	x = pio2_hi - (2*(s+s*R(z)) - pio2_lo); // dpgeorge: use pio2_hi and pio2_lo
   1f590:	eeb0 0a48 	vmov.f32	s0, s16
   1f594:	f7ff ff9e 	bl	1f4d4 <R>
   1f598:	eea0 6a06 	vfma.f32	s12, s0, s12
	if (hx >> 31)
   1f59c:	2c00      	cmp	r4, #0
	x = pio2_hi - (2*(s+s*R(z)) - pio2_lo); // dpgeorge: use pio2_hi and pio2_lo
   1f59e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1f5c8 <asinf+0xb8>
   1f5a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   1f5a6:	eee6 7a07 	vfma.f32	s15, s12, s14
   1f5aa:	ed9f 6a06 	vldr	s12, [pc, #24]	; 1f5c4 <asinf+0xb4>
   1f5ae:	ee36 6a67 	vsub.f32	s12, s12, s15
		return -x;
   1f5b2:	bfb8      	it	lt
   1f5b4:	eeb1 6a46 	vneglt.f32	s12, s12
   1f5b8:	e7c6      	b.n	1f548 <asinf+0x38>
   1f5ba:	bf00      	nop
   1f5bc:	00000000 	.word	0x00000000
   1f5c0:	03800000 	.word	0x03800000
   1f5c4:	3fc90fda 	.word	0x3fc90fda
   1f5c8:	b3a22168 	.word	0xb3a22168

0001f5cc <acosf>:
 * is preserved.
 * ====================================================
 */

float acosf(float x)
{
   1f5cc:	b508      	push	{r3, lr}
	float z,w,s,c,df;
	uint32_t hx,ix;

	GET_FLOAT_WORD(hx, x);
   1f5ce:	ee10 2a10 	vmov	r2, s0
	ix = hx & 0x7fffffff;
   1f5d2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
	/* |x| >= 1 or nan */
	if (ix >= 0x3f800000) {
   1f5d6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
{
   1f5da:	ed2d 8b02 	vpush	{d8}
   1f5de:	eef0 5a40 	vmov.f32	s11, s0
	if (ix >= 0x3f800000) {
   1f5e2:	d312      	bcc.n	1f60a <acosf+0x3e>
		if (ix == 0x3f800000) {
   1f5e4:	d10a      	bne.n	1f5fc <acosf+0x30>
			if (hx >> 31)
				return 2*pio2_hi + 0x1p-120f;
			return 0;
   1f5e6:	ed9f 0a37 	vldr	s0, [pc, #220]	; 1f6c4 <acosf+0xf8>
   1f5ea:	eddf 7a37 	vldr	s15, [pc, #220]	; 1f6c8 <acosf+0xfc>
			if (hx >> 31)
   1f5ee:	2a00      	cmp	r2, #0
			return 0;
   1f5f0:	bfa8      	it	ge
   1f5f2:	eeb0 0a67 	vmovge.f32	s0, s15
	GET_FLOAT_WORD(hx,s);
	SET_FLOAT_WORD(df,hx&0xfffff000);
	c = (z-df*df)/(s+df);
	w = R(z)*s+c;
	return 2*(df+w);
}
   1f5f6:	ecbd 8b02 	vpop	{d8}
   1f5fa:	bd08      	pop	{r3, pc}
		return 0/(x-x);
   1f5fc:	ee70 5a40 	vsub.f32	s11, s0, s0
   1f600:	eddf 7a31 	vldr	s15, [pc, #196]	; 1f6c8 <acosf+0xfc>
   1f604:	ee87 0aa5 	vdiv.f32	s0, s15, s11
   1f608:	e7f5      	b.n	1f5f6 <acosf+0x2a>
	if (ix < 0x3f000000) {
   1f60a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1f60e:	d211      	bcs.n	1f634 <acosf+0x68>
		if (ix <= 0x32800000) /* |x| < 2**-26 */
   1f610:	f1b3 5f4a 	cmp.w	r3, #847249408	; 0x32800000
   1f614:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 1f6cc <acosf+0x100>
   1f618:	d950      	bls.n	1f6bc <acosf+0xf0>
		return pio2_hi - (x - (pio2_lo-x*R(x*x)));
   1f61a:	ee20 0a00 	vmul.f32	s0, s0, s0
   1f61e:	f7ff ff59 	bl	1f4d4 <R>
   1f622:	eddf 7a2b 	vldr	s15, [pc, #172]	; 1f6d0 <acosf+0x104>
   1f626:	eee0 7a65 	vfms.f32	s15, s0, s11
   1f62a:	ee35 0ae7 	vsub.f32	s0, s11, s15
   1f62e:	ee36 0a40 	vsub.f32	s0, s12, s0
   1f632:	e7e0      	b.n	1f5f6 <acosf+0x2a>
	if (hx >> 31) {
   1f634:	2a00      	cmp	r2, #0
   1f636:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   1f63a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
   1f63e:	da1a      	bge.n	1f676 <acosf+0xaa>
		z = (1+x)*0.5f;
   1f640:	ee75 5a88 	vadd.f32	s11, s11, s16
   1f644:	ee25 8a80 	vmul.f32	s16, s11, s0
		s = sqrtf(z);
   1f648:	eeb0 0a48 	vmov.f32	s0, s16
   1f64c:	f7ff ff3e 	bl	1f4cc <sqrtf>
   1f650:	eeb0 6a40 	vmov.f32	s12, s0
		w = R(z)*s-pio2_lo;
   1f654:	eeb0 0a48 	vmov.f32	s0, s16
   1f658:	f7ff ff3c 	bl	1f4d4 <R>
   1f65c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 1f6d4 <acosf+0x108>
   1f660:	eee0 7a06 	vfma.f32	s15, s0, s12
		return 2*(pio2_hi - (s+w));
   1f664:	ed9f 0a19 	vldr	s0, [pc, #100]	; 1f6cc <acosf+0x100>
   1f668:	ee77 7a86 	vadd.f32	s15, s15, s12
   1f66c:	ee30 0a67 	vsub.f32	s0, s0, s15
	return 2*(df+w);
   1f670:	ee30 0a00 	vadd.f32	s0, s0, s0
   1f674:	e7bf      	b.n	1f5f6 <acosf+0x2a>
	z = (1-x)*0.5f;
   1f676:	ee78 5a65 	vsub.f32	s11, s16, s11
   1f67a:	ee25 8a80 	vmul.f32	s16, s11, s0
	s = sqrtf(z);
   1f67e:	eeb0 0a48 	vmov.f32	s0, s16
   1f682:	f7ff ff23 	bl	1f4cc <sqrtf>
	SET_FLOAT_WORD(df,hx&0xfffff000);
   1f686:	ee10 3a10 	vmov	r3, s0
   1f68a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1f68e:	f023 030f 	bic.w	r3, r3, #15
   1f692:	ee05 3a90 	vmov	s11, r3
	c = (z-df*df)/(s+df);
   1f696:	eeb0 7a48 	vmov.f32	s14, s16
   1f69a:	eea5 7ae5 	vfms.f32	s14, s11, s11
   1f69e:	ee70 7a25 	vadd.f32	s15, s0, s11
	s = sqrtf(z);
   1f6a2:	eeb0 5a40 	vmov.f32	s10, s0
	c = (z-df*df)/(s+df);
   1f6a6:	ee87 6a27 	vdiv.f32	s12, s14, s15
	w = R(z)*s+c;
   1f6aa:	eeb0 0a48 	vmov.f32	s0, s16
   1f6ae:	f7ff ff11 	bl	1f4d4 <R>
   1f6b2:	eea0 6a05 	vfma.f32	s12, s0, s10
	return 2*(df+w);
   1f6b6:	ee36 0a25 	vadd.f32	s0, s12, s11
   1f6ba:	e7d9      	b.n	1f670 <acosf+0xa4>
			return pio2_hi + 0x1p-120f;
   1f6bc:	eeb0 0a46 	vmov.f32	s0, s12
   1f6c0:	e799      	b.n	1f5f6 <acosf+0x2a>
   1f6c2:	bf00      	nop
   1f6c4:	40490fda 	.word	0x40490fda
   1f6c8:	00000000 	.word	0x00000000
   1f6cc:	3fc90fda 	.word	0x3fc90fda
   1f6d0:	33a22168 	.word	0x33a22168
   1f6d4:	b3a22168 	.word	0xb3a22168

0001f6d8 <atan2f>:
float atan2f(float y, float x)
{
	float z;
	uint32_t m,ix,iy;

	if (isnan(x) || isnan(y))
   1f6d8:	eef4 0a60 	vcmp.f32	s1, s1
   1f6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   1f6e0:	b510      	push	{r4, lr}
   1f6e2:	eef0 7a40 	vmov.f32	s15, s0
	if (isnan(x) || isnan(y))
   1f6e6:	d604      	bvs.n	1f6f2 <atan2f+0x1a>
   1f6e8:	eeb4 0a40 	vcmp.f32	s0, s0
   1f6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f6f0:	d704      	bvc.n	1f6fc <atan2f+0x24>
		return x+y;
   1f6f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
	case 1: return -z;             /* atan(-,+) */
	case 2: return pi - (z-pi_lo); /* atan(+,-) */
	default: /* case 3 */
		return (z-pi_lo) - pi; /* atan(-,-) */
	}
}
   1f6f6:	eeb0 0a67 	vmov.f32	s0, s15
   1f6fa:	bd10      	pop	{r4, pc}
	GET_FLOAT_WORD(ix, x);
   1f6fc:	ee10 2a90 	vmov	r2, s1
	if (ix == 0x3f800000)  /* x=1.0 */
   1f700:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
   1f704:	d103      	bne.n	1f70e <atan2f+0x36>
}
   1f706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return atanf(y);
   1f70a:	f000 b88d 	b.w	1f828 <atanf>
	m = ((iy>>31)&1) | ((ix>>30)&2);  /* 2*sign(x)+sign(y) */
   1f70e:	ee10 3a10 	vmov	r3, s0
   1f712:	0f94      	lsrs	r4, r2, #30
   1f714:	f004 0402 	and.w	r4, r4, #2
   1f718:	ea44 74d3 	orr.w	r4, r4, r3, lsr #31
	if (iy == 0) {
   1f71c:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   1f720:	d108      	bne.n	1f734 <atan2f+0x5c>
		switch (m) {
   1f722:	2c02      	cmp	r4, #2
   1f724:	d067      	beq.n	1f7f6 <atan2f+0x11e>
		case 3: return -pi; /* atan(-0,-anything) =-pi */
   1f726:	ed9f 7a35 	vldr	s14, [pc, #212]	; 1f7fc <atan2f+0x124>
   1f72a:	2c03      	cmp	r4, #3
   1f72c:	bf08      	it	eq
   1f72e:	eef0 7a47 	vmoveq.f32	s15, s14
   1f732:	e7e0      	b.n	1f6f6 <atan2f+0x1e>
	if (ix == 0)
   1f734:	f032 4200 	bics.w	r2, r2, #2147483648	; 0x80000000
   1f738:	d109      	bne.n	1f74e <atan2f+0x76>
		return m&1 ? -pi/2 : pi/2;
   1f73a:	eddf 7a31 	vldr	s15, [pc, #196]	; 1f800 <atan2f+0x128>
   1f73e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 1f804 <atan2f+0x12c>
   1f742:	f014 0f01 	tst.w	r4, #1
   1f746:	bf18      	it	ne
   1f748:	eef0 7a47 	vmovne.f32	s15, s14
   1f74c:	e7d3      	b.n	1f6f6 <atan2f+0x1e>
	if (ix == 0x7f800000) {
   1f74e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1f752:	d122      	bne.n	1f79a <atan2f+0xc2>
		if (iy == 0x7f800000) {
   1f754:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1f758:	d112      	bne.n	1f780 <atan2f+0xa8>
			switch (m) {
   1f75a:	2c02      	cmp	r4, #2
   1f75c:	d00a      	beq.n	1f774 <atan2f+0x9c>
   1f75e:	2c03      	cmp	r4, #3
   1f760:	d00b      	beq.n	1f77a <atan2f+0xa2>
			case 0: return  pi/4; /* atan(+INF,+INF) */
   1f762:	eddf 7a29 	vldr	s15, [pc, #164]	; 1f808 <atan2f+0x130>
   1f766:	ed9f 7a29 	vldr	s14, [pc, #164]	; 1f80c <atan2f+0x134>
   1f76a:	2c01      	cmp	r4, #1
			case 0: return  0.0f;    /* atan(+...,+INF) */
   1f76c:	bf18      	it	ne
   1f76e:	eef0 7a47 	vmovne.f32	s15, s14
   1f772:	e7c0      	b.n	1f6f6 <atan2f+0x1e>
			case 2: return 3*pi/4;  /*atan(+INF,-INF)*/
   1f774:	eddf 7a26 	vldr	s15, [pc, #152]	; 1f810 <atan2f+0x138>
   1f778:	e7bd      	b.n	1f6f6 <atan2f+0x1e>
			case 3: return -3*pi/4; /*atan(-INF,-INF)*/
   1f77a:	eddf 7a26 	vldr	s15, [pc, #152]	; 1f814 <atan2f+0x13c>
   1f77e:	e7ba      	b.n	1f6f6 <atan2f+0x1e>
			switch (m) {
   1f780:	2c02      	cmp	r4, #2
   1f782:	d038      	beq.n	1f7f6 <atan2f+0x11e>
   1f784:	2c03      	cmp	r4, #3
   1f786:	d005      	beq.n	1f794 <atan2f+0xbc>
			case 0: return  0.0f;    /* atan(+...,+INF) */
   1f788:	2c01      	cmp	r4, #1
   1f78a:	eddf 7a23 	vldr	s15, [pc, #140]	; 1f818 <atan2f+0x140>
   1f78e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 1f81c <atan2f+0x144>
   1f792:	e7eb      	b.n	1f76c <atan2f+0x94>
		case 3: return -pi; /* atan(-0,-anything) =-pi */
   1f794:	eddf 7a19 	vldr	s15, [pc, #100]	; 1f7fc <atan2f+0x124>
   1f798:	e7ad      	b.n	1f6f6 <atan2f+0x1e>
	if (ix+(26<<23) < iy || iy == 0x7f800000)
   1f79a:	f102 6150 	add.w	r1, r2, #218103808	; 0xd000000
   1f79e:	4299      	cmp	r1, r3
   1f7a0:	d3cb      	bcc.n	1f73a <atan2f+0x62>
   1f7a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1f7a6:	d0c8      	beq.n	1f73a <atan2f+0x62>
	if ((m&2) && iy+(26<<23) < ix)  /*|y/x| < 0x1p-26, x < 0 */
   1f7a8:	07a1      	lsls	r1, r4, #30
   1f7aa:	d503      	bpl.n	1f7b4 <atan2f+0xdc>
   1f7ac:	f103 6350 	add.w	r3, r3, #218103808	; 0xd000000
   1f7b0:	4293      	cmp	r3, r2
   1f7b2:	d315      	bcc.n	1f7e0 <atan2f+0x108>
		z = atanf(fabsf(y/x));
   1f7b4:	ee87 0aa0 	vdiv.f32	s0, s15, s1
   1f7b8:	eeb0 0ac0 	vabs.f32	s0, s0
   1f7bc:	f000 f834 	bl	1f828 <atanf>
   1f7c0:	eef0 7a40 	vmov.f32	s15, s0
	switch (m) {
   1f7c4:	2c01      	cmp	r4, #1
   1f7c6:	d00e      	beq.n	1f7e6 <atan2f+0x10e>
   1f7c8:	d395      	bcc.n	1f6f6 <atan2f+0x1e>
   1f7ca:	2c02      	cmp	r4, #2
   1f7cc:	eddf 6a14 	vldr	s13, [pc, #80]	; 1f820 <atan2f+0x148>
   1f7d0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 1f824 <atan2f+0x14c>
   1f7d4:	d00a      	beq.n	1f7ec <atan2f+0x114>
		return (z-pi_lo) - pi; /* atan(-,-) */
   1f7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1f7da:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1f7de:	e78a      	b.n	1f6f6 <atan2f+0x1e>
		z = 0.0;
   1f7e0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 1f81c <atan2f+0x144>
   1f7e4:	e7ee      	b.n	1f7c4 <atan2f+0xec>
	case 1: return -z;             /* atan(-,+) */
   1f7e6:	eef1 7a67 	vneg.f32	s15, s15
   1f7ea:	e784      	b.n	1f6f6 <atan2f+0x1e>
	case 2: return pi - (z-pi_lo); /* atan(+,-) */
   1f7ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1f7f0:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f7f4:	e77f      	b.n	1f6f6 <atan2f+0x1e>
		case 2: return  pi; /* atan(+0,-anything) = pi */
   1f7f6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1f824 <atan2f+0x14c>
   1f7fa:	e77c      	b.n	1f6f6 <atan2f+0x1e>
   1f7fc:	c0490fdb 	.word	0xc0490fdb
   1f800:	3fc90fdb 	.word	0x3fc90fdb
   1f804:	bfc90fdb 	.word	0xbfc90fdb
   1f808:	bf490fdb 	.word	0xbf490fdb
   1f80c:	3f490fdb 	.word	0x3f490fdb
   1f810:	4016cbe4 	.word	0x4016cbe4
   1f814:	c016cbe4 	.word	0xc016cbe4
   1f818:	80000000 	.word	0x80000000
   1f81c:	00000000 	.word	0x00000000
   1f820:	33bbbd2e 	.word	0x33bbbd2e
   1f824:	40490fdb 	.word	0x40490fdb

0001f828 <atanf>:
{
	float_t w,s1,s2,z;
	uint32_t ix,sign;
	int id;

	GET_FLOAT_WORD(ix, x);
   1f828:	ee10 3a10 	vmov	r3, s0
	sign = ix>>31;
   1f82c:	0fd8      	lsrs	r0, r3, #31
	ix &= 0x7fffffff;
   1f82e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if (ix >= 0x4c800000) {  /* if |x| >= 2**26 */
   1f832:	f1b3 4f99 	cmp.w	r3, #1283457024	; 0x4c800000
{
   1f836:	b082      	sub	sp, #8
	if (ix >= 0x4c800000) {  /* if |x| >= 2**26 */
   1f838:	d30e      	bcc.n	1f858 <atanf+0x30>
		if (isnan(x))
   1f83a:	eeb4 0a40 	vcmp.f32	s0, s0
   1f83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f842:	d607      	bvs.n	1f854 <atanf+0x2c>
			return x;
		z = atanhi[3] + 0x1p-120f;
		return sign ? -z : z;
   1f844:	ed9f 0a40 	vldr	s0, [pc, #256]	; 1f948 <atanf+0x120>
   1f848:	eddf 7a40 	vldr	s15, [pc, #256]	; 1f94c <atanf+0x124>
   1f84c:	2800      	cmp	r0, #0
   1f84e:	bf18      	it	ne
   1f850:	eeb0 0a67 	vmovne.f32	s0, s15
	s2 = w*(aT[1]+w*aT[3]);
	if (id < 0)
		return x - x*(s1+s2);
	z = atanhi[id] - ((x*(s1+s2) - atanlo[id]) - x);
	return sign ? -z : z;
}
   1f854:	b002      	add	sp, #8
   1f856:	4770      	bx	lr
	if (ix < 0x3ee00000) {   /* |x| < 0.4375 */
   1f858:	4a3d      	ldr	r2, [pc, #244]	; (1f950 <atanf+0x128>)
   1f85a:	4293      	cmp	r3, r2
   1f85c:	d80b      	bhi.n	1f876 <atanf+0x4e>
		if (ix < 0x39800000) {  /* |x| < 2**-12 */
   1f85e:	f1b3 5f66 	cmp.w	r3, #964689920	; 0x39800000
   1f862:	d25a      	bcs.n	1f91a <atanf+0xf2>
			if (ix < 0x00800000)
   1f864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1f868:	d2f4      	bcs.n	1f854 <atanf+0x2c>
				FORCE_EVAL(x*x);
   1f86a:	ee60 7a00 	vmul.f32	s15, s0, s0
   1f86e:	edcd 7a01 	vstr	s15, [sp, #4]
   1f872:	9b01      	ldr	r3, [sp, #4]
   1f874:	e7ee      	b.n	1f854 <atanf+0x2c>
		if (ix < 0x3f980000) {  /* |x| < 1.1875 */
   1f876:	4a37      	ldr	r2, [pc, #220]	; (1f954 <atanf+0x12c>)
   1f878:	4293      	cmp	r3, r2
		x = fabsf(x);
   1f87a:	eef0 7ac0 	vabs.f32	s15, s0
		if (ix < 0x3f980000) {  /* |x| < 1.1875 */
   1f87e:	d837      	bhi.n	1f8f0 <atanf+0xc8>
			if (ix < 0x3f300000) {  /*  7/16 <= |x| < 11/16 */
   1f880:	f5a2 02d0 	sub.w	r2, r2, #6815744	; 0x680000
   1f884:	4293      	cmp	r3, r2
   1f886:	d829      	bhi.n	1f8dc <atanf+0xb4>
				x = (2.0f*x - 1.0f)/(2.0f + x);
   1f888:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   1f88c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1f890:	eea7 7aa6 	vfma.f32	s14, s15, s13
				id = 0;
   1f894:	2300      	movs	r3, #0
				x = (2.0f*x - 1.0f)/(2.0f + x);
   1f896:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1f89a:	ee87 0a27 	vdiv.f32	s0, s14, s15
	if (id < 0)
   1f89e:	1c5a      	adds	r2, r3, #1
	z = x*x;
   1f8a0:	ee60 6a00 	vmul.f32	s13, s0, s0
	s1 = z*(aT[0]+w*(aT[2]+w*aT[4]));
   1f8a4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 1f958 <atanf+0x130>
   1f8a8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 1f95c <atanf+0x134>
	s2 = w*(aT[1]+w*aT[3]);
   1f8ac:	eddf 5a2c 	vldr	s11, [pc, #176]	; 1f960 <atanf+0x138>
	w = z*z;
   1f8b0:	ee26 7aa6 	vmul.f32	s14, s13, s13
	s1 = z*(aT[0]+w*(aT[2]+w*aT[4]));
   1f8b4:	eee7 7a06 	vfma.f32	s15, s14, s12
   1f8b8:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 1f964 <atanf+0x13c>
   1f8bc:	eea7 6a87 	vfma.f32	s12, s15, s14
	s2 = w*(aT[1]+w*aT[3]);
   1f8c0:	eddf 7a29 	vldr	s15, [pc, #164]	; 1f968 <atanf+0x140>
   1f8c4:	eee7 7a25 	vfma.f32	s15, s14, s11
   1f8c8:	ee67 7a87 	vmul.f32	s15, s15, s14
   1f8cc:	eee6 7a26 	vfma.f32	s15, s12, s13
   1f8d0:	ee67 7a80 	vmul.f32	s15, s15, s0
	if (id < 0)
   1f8d4:	d124      	bne.n	1f920 <atanf+0xf8>
		return x - x*(s1+s2);
   1f8d6:	ee30 0a67 	vsub.f32	s0, s0, s15
   1f8da:	e7bb      	b.n	1f854 <atanf+0x2c>
				x = (x - 1.0f)/(x + 1.0f);
   1f8dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1f8e0:	ee77 6ac7 	vsub.f32	s13, s15, s14
   1f8e4:	ee77 7a87 	vadd.f32	s15, s15, s14
				id = 1;
   1f8e8:	2301      	movs	r3, #1
				x = (x - 1.0f)/(x + 1.0f);
   1f8ea:	ee86 0aa7 	vdiv.f32	s0, s13, s15
   1f8ee:	e7d6      	b.n	1f89e <atanf+0x76>
			if (ix < 0x401c0000) {  /* |x| < 2.4375 */
   1f8f0:	4a1e      	ldr	r2, [pc, #120]	; (1f96c <atanf+0x144>)
   1f8f2:	4293      	cmp	r3, r2
   1f8f4:	d80b      	bhi.n	1f90e <atanf+0xe6>
				x = (x - 1.5f)/(1.0f + 1.5f*x);
   1f8f6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
   1f8fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1f8fe:	eea7 7aa6 	vfma.f32	s14, s15, s13
				id = 2;
   1f902:	2302      	movs	r3, #2
				x = (x - 1.5f)/(1.0f + 1.5f*x);
   1f904:	ee37 6ae6 	vsub.f32	s12, s15, s13
   1f908:	ee86 0a07 	vdiv.f32	s0, s12, s14
   1f90c:	e7c7      	b.n	1f89e <atanf+0x76>
				x = -1.0f/x;
   1f90e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1f912:	ee87 0a27 	vdiv.f32	s0, s14, s15
				id = 3;
   1f916:	2303      	movs	r3, #3
   1f918:	e7c1      	b.n	1f89e <atanf+0x76>
		id = -1;
   1f91a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f91e:	e7be      	b.n	1f89e <atanf+0x76>
	z = atanhi[id] - ((x*(s1+s2) - atanlo[id]) - x);
   1f920:	4a13      	ldr	r2, [pc, #76]	; (1f970 <atanf+0x148>)
   1f922:	4914      	ldr	r1, [pc, #80]	; (1f974 <atanf+0x14c>)
   1f924:	009b      	lsls	r3, r3, #2
   1f926:	441a      	add	r2, r3
   1f928:	440b      	add	r3, r1
   1f92a:	ed93 7a00 	vldr	s14, [r3]
   1f92e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1f932:	ee37 0ac0 	vsub.f32	s0, s15, s0
   1f936:	edd2 7a00 	vldr	s15, [r2]
   1f93a:	ee37 0ac0 	vsub.f32	s0, s15, s0
	return sign ? -z : z;
   1f93e:	2800      	cmp	r0, #0
   1f940:	d088      	beq.n	1f854 <atanf+0x2c>
   1f942:	eeb1 0a40 	vneg.f32	s0, s0
   1f946:	e785      	b.n	1f854 <atanf+0x2c>
   1f948:	3fc90fda 	.word	0x3fc90fda
   1f94c:	bfc90fda 	.word	0xbfc90fda
   1f950:	3edfffff 	.word	0x3edfffff
   1f954:	3f97ffff 	.word	0x3f97ffff
   1f958:	3d7cac25 	.word	0x3d7cac25
   1f95c:	3e11f50d 	.word	0x3e11f50d
   1f960:	bdda1247 	.word	0xbdda1247
   1f964:	3eaaaaa9 	.word	0x3eaaaaa9
   1f968:	be4cca98 	.word	0xbe4cca98
   1f96c:	401bffff 	.word	0x401bffff
   1f970:	0002c2cc 	.word	0x0002c2cc
   1f974:	0002c2dc 	.word	0x0002c2dc

0001f978 <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
   1f978:	b5f0      	push	{r4, r5, r6, r7, lr}
	float z,w,t,r,fn;
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
   1f97a:	ee10 5a10 	vmov	r5, s0
	ix = hx&0x7fffffff;
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
   1f97e:	4a86      	ldr	r2, [pc, #536]	; (1fb98 <__ieee754_rem_pio2f+0x220>)
	ix = hx&0x7fffffff;
   1f980:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
   1f984:	4293      	cmp	r3, r2
{
   1f986:	b087      	sub	sp, #28
   1f988:	4604      	mov	r4, r0
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
   1f98a:	dc05      	bgt.n	1f998 <__ieee754_rem_pio2f+0x20>
	    {y[0] = x; y[1] = 0; return 0;}
   1f98c:	2300      	movs	r3, #0
   1f98e:	ed80 0a00 	vstr	s0, [r0]
   1f992:	6043      	str	r3, [r0, #4]
	}
    /* 
     * all other (large) arguments
     */
	if(!FLT_UWORD_IS_FINITE(ix)) {
	    y[0]=y[1]=x-x; return 0;
   1f994:	2000      	movs	r0, #0
   1f996:	e020      	b.n	1f9da <__ieee754_rem_pio2f+0x62>
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
   1f998:	4a80      	ldr	r2, [pc, #512]	; (1fb9c <__ieee754_rem_pio2f+0x224>)
   1f99a:	4293      	cmp	r3, r2
   1f99c:	dc38      	bgt.n	1fa10 <__ieee754_rem_pio2f+0x98>
	    if(hx>0) { 
   1f99e:	2d00      	cmp	r5, #0
   1f9a0:	f023 030f 	bic.w	r3, r3, #15
   1f9a4:	eddf 7a7e 	vldr	s15, [pc, #504]	; 1fba0 <__ieee754_rem_pio2f+0x228>
   1f9a8:	4a7e      	ldr	r2, [pc, #504]	; (1fba4 <__ieee754_rem_pio2f+0x22c>)
   1f9aa:	dd18      	ble.n	1f9de <__ieee754_rem_pio2f+0x66>
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
   1f9ac:	4293      	cmp	r3, r2
		z = x - pio2_1;
   1f9ae:	ee30 0a67 	vsub.f32	s0, s0, s15
		    z -= pio2_2;
   1f9b2:	bf09      	itett	eq
   1f9b4:	eddf 7a7c 	vldreq	s15, [pc, #496]	; 1fba8 <__ieee754_rem_pio2f+0x230>
		    y[0] = z - pio2_1t;
   1f9b8:	eddf 7a7c 	vldrne	s15, [pc, #496]	; 1fbac <__ieee754_rem_pio2f+0x234>
		    z -= pio2_2;
   1f9bc:	ee30 0a67 	vsubeq.f32	s0, s0, s15
		    y[0] = z - pio2_2t;
   1f9c0:	eddf 7a7b 	vldreq	s15, [pc, #492]	; 1fbb0 <__ieee754_rem_pio2f+0x238>
   1f9c4:	ee30 7a67 	vsub.f32	s14, s0, s15
		    y[1] = (z-y[0])-pio2_2t;
   1f9c8:	ee30 0a47 	vsub.f32	s0, s0, s14
		    y[0] = z - pio2_2t;
   1f9cc:	ed80 7a00 	vstr	s14, [r0]
		    y[1] = (z-y[0])-pio2_2t;
   1f9d0:	ee30 0a67 	vsub.f32	s0, s0, s15
   1f9d4:	ed80 0a01 	vstr	s0, [r0, #4]
		return 1;
   1f9d8:	2001      	movs	r0, #1
	nx = 3;
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
	return n;
}
   1f9da:	b007      	add	sp, #28
   1f9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
   1f9de:	4293      	cmp	r3, r2
		z = x + pio2_1;
   1f9e0:	ee30 0a27 	vadd.f32	s0, s0, s15
		    z += pio2_2;
   1f9e4:	bf09      	itett	eq
   1f9e6:	eddf 7a70 	vldreq	s15, [pc, #448]	; 1fba8 <__ieee754_rem_pio2f+0x230>
		    y[0] = z + pio2_1t;
   1f9ea:	eddf 7a70 	vldrne	s15, [pc, #448]	; 1fbac <__ieee754_rem_pio2f+0x234>
		    z += pio2_2;
   1f9ee:	ee30 0a27 	vaddeq.f32	s0, s0, s15
		    y[0] = z + pio2_2t;
   1f9f2:	eddf 7a6f 	vldreq	s15, [pc, #444]	; 1fbb0 <__ieee754_rem_pio2f+0x238>
   1f9f6:	ee30 7a27 	vadd.f32	s14, s0, s15
		    y[1] = (z-y[0])+pio2_2t;
   1f9fa:	ee30 0a47 	vsub.f32	s0, s0, s14
		    y[0] = z + pio2_2t;
   1f9fe:	ed80 7a00 	vstr	s14, [r0]
		    y[1] = (z-y[0])+pio2_2t;
   1fa02:	ee30 0a27 	vadd.f32	s0, s0, s15
   1fa06:	ed80 0a01 	vstr	s0, [r0, #4]
		return -1;
   1fa0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fa0e:	e7e4      	b.n	1f9da <__ieee754_rem_pio2f+0x62>
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
   1fa10:	4a68      	ldr	r2, [pc, #416]	; (1fbb4 <__ieee754_rem_pio2f+0x23c>)
   1fa12:	4293      	cmp	r3, r2
   1fa14:	dc71      	bgt.n	1fafa <__ieee754_rem_pio2f+0x182>
	    n  = (__int32_t) (t*invpio2+half);
   1fa16:	ed9f 7a68 	vldr	s14, [pc, #416]	; 1fbb8 <__ieee754_rem_pio2f+0x240>
	    t  = fabsf(x);
   1fa1a:	eeb0 0ac0 	vabs.f32	s0, s0
	    n  = (__int32_t) (t*invpio2+half);
   1fa1e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1fa22:	eee0 7a07 	vfma.f32	s15, s0, s14
   1fa26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	    fn = (float)n;
   1fa2a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	    n  = (__int32_t) (t*invpio2+half);
   1fa2e:	ee17 0a90 	vmov	r0, s15
	    r  = t-fn*pio2_1;
   1fa32:	eddf 7a5b 	vldr	s15, [pc, #364]	; 1fba0 <__ieee754_rem_pio2f+0x228>
   1fa36:	eeb1 7a46 	vneg.f32	s14, s12
   1fa3a:	eea7 0a27 	vfma.f32	s0, s14, s15
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
   1fa3e:	281f      	cmp	r0, #31
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
   1fa40:	eddf 7a5a 	vldr	s15, [pc, #360]	; 1fbac <__ieee754_rem_pio2f+0x234>
   1fa44:	ee66 7a27 	vmul.f32	s15, s12, s15
   1fa48:	ee70 6a67 	vsub.f32	s13, s0, s15
   1fa4c:	ee16 2a90 	vmov	r2, s13
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
   1fa50:	dc1c      	bgt.n	1fa8c <__ieee754_rem_pio2f+0x114>
   1fa52:	1e47      	subs	r7, r0, #1
   1fa54:	4e59      	ldr	r6, [pc, #356]	; (1fbbc <__ieee754_rem_pio2f+0x244>)
   1fa56:	f856 6027 	ldr.w	r6, [r6, r7, lsl #2]
   1fa5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
   1fa5e:	42b1      	cmp	r1, r6
   1fa60:	d014      	beq.n	1fa8c <__ieee754_rem_pio2f+0x114>
	        y[0] = r-w; 
   1fa62:	6022      	str	r2, [r4, #0]
	    y[1] = (r-y[0])-w;
   1fa64:	ed94 7a00 	vldr	s14, [r4]
   1fa68:	ee30 0a47 	vsub.f32	s0, s0, s14
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
   1fa6c:	2d00      	cmp	r5, #0
	    y[1] = (r-y[0])-w;
   1fa6e:	ee30 0a67 	vsub.f32	s0, s0, s15
   1fa72:	ed84 0a01 	vstr	s0, [r4, #4]
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
   1fa76:	dab0      	bge.n	1f9da <__ieee754_rem_pio2f+0x62>
   1fa78:	eeb1 7a47 	vneg.f32	s14, s14
   1fa7c:	eeb1 0a40 	vneg.f32	s0, s0
   1fa80:	ed84 7a00 	vstr	s14, [r4]
   1fa84:	ed84 0a01 	vstr	s0, [r4, #4]
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
   1fa88:	4240      	negs	r0, r0
   1fa8a:	e7a6      	b.n	1f9da <__ieee754_rem_pio2f+0x62>
	        j  = ix>>23;
   1fa8c:	15db      	asrs	r3, r3, #23
	        i = j-((high>>23)&0xff);
   1fa8e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
   1fa92:	1a59      	subs	r1, r3, r1
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
   1fa94:	2908      	cmp	r1, #8
   1fa96:	dde4      	ble.n	1fa62 <__ieee754_rem_pio2f+0xea>
		    r  = t-w;
   1fa98:	eddf 7a43 	vldr	s15, [pc, #268]	; 1fba8 <__ieee754_rem_pio2f+0x230>
   1fa9c:	eef0 6a40 	vmov.f32	s13, s0
   1faa0:	eee7 6a27 	vfma.f32	s13, s14, s15
		    w  = fn*pio2_2t-((t-r)-w);	
   1faa4:	ee30 0a66 	vsub.f32	s0, s0, s13
   1faa8:	eea7 0a27 	vfma.f32	s0, s14, s15
   1faac:	eddf 7a40 	vldr	s15, [pc, #256]	; 1fbb0 <__ieee754_rem_pio2f+0x238>
   1fab0:	ee96 0a27 	vfnms.f32	s0, s12, s15
		    y[0] = r-w;
   1fab4:	ee76 5ac0 	vsub.f32	s11, s13, s0
		    w  = fn*pio2_2t-((t-r)-w);	
   1fab8:	eef0 7a40 	vmov.f32	s15, s0
		    y[0] = r-w;
   1fabc:	ee15 2a90 	vmov	r2, s11
		    i = j-((high>>23)&0xff);
   1fac0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
   1fac4:	1a5b      	subs	r3, r3, r1
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
   1fac6:	2b19      	cmp	r3, #25
   1fac8:	dc04      	bgt.n	1fad4 <__ieee754_rem_pio2f+0x15c>
		    y[0] = r-w;
   1faca:	edc4 5a00 	vstr	s11, [r4]
		    r  = t-w;
   1face:	eeb0 0a66 	vmov.f32	s0, s13
   1fad2:	e7c7      	b.n	1fa64 <__ieee754_rem_pio2f+0xec>
		    	r  = t-w;
   1fad4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 1fbc0 <__ieee754_rem_pio2f+0x248>
   1fad8:	eeb0 0a66 	vmov.f32	s0, s13
   1fadc:	eea7 0a25 	vfma.f32	s0, s14, s11
		    	w  = fn*pio2_3t-((t-r)-w);	
   1fae0:	ee76 7ac0 	vsub.f32	s15, s13, s0
   1fae4:	eee7 7a25 	vfma.f32	s15, s14, s11
   1fae8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1fbc4 <__ieee754_rem_pio2f+0x24c>
   1faec:	eed6 7a07 	vfnms.f32	s15, s12, s14
		    	y[0] = r-w;
   1faf0:	ee30 7a67 	vsub.f32	s14, s0, s15
   1faf4:	ed84 7a00 	vstr	s14, [r4]
   1faf8:	e7b4      	b.n	1fa64 <__ieee754_rem_pio2f+0xec>
	if(!FLT_UWORD_IS_FINITE(ix)) {
   1fafa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1fafe:	db06      	blt.n	1fb0e <__ieee754_rem_pio2f+0x196>
	    y[0]=y[1]=x-x; return 0;
   1fb00:	ee30 0a40 	vsub.f32	s0, s0, s0
   1fb04:	ed80 0a01 	vstr	s0, [r0, #4]
   1fb08:	ed80 0a00 	vstr	s0, [r0]
   1fb0c:	e742      	b.n	1f994 <__ieee754_rem_pio2f+0x1c>
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
   1fb0e:	15da      	asrs	r2, r3, #23
   1fb10:	3a86      	subs	r2, #134	; 0x86
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
   1fb12:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1fb16:	ee07 3a90 	vmov	s15, r3
		tx[i] = (float)((__int32_t)(z));
   1fb1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
		z     = (z-tx[i])*two8;
   1fb1e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 1fbc8 <__ieee754_rem_pio2f+0x250>
		tx[i] = (float)((__int32_t)(z));
   1fb22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		z     = (z-tx[i])*two8;
   1fb26:	ee77 7ac7 	vsub.f32	s15, s15, s14
		tx[i] = (float)((__int32_t)(z));
   1fb2a:	ed8d 7a03 	vstr	s14, [sp, #12]
		z     = (z-tx[i])*two8;
   1fb2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
		tx[i] = (float)((__int32_t)(z));
   1fb32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   1fb36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		z     = (z-tx[i])*two8;
   1fb3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
		tx[i] = (float)((__int32_t)(z));
   1fb3e:	ed8d 7a04 	vstr	s14, [sp, #16]
		z     = (z-tx[i])*two8;
   1fb42:	ee67 7aa6 	vmul.f32	s15, s15, s13
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
   1fb46:	eef5 7a40 	vcmp.f32	s15, #0.0
   1fb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	tx[2] = z;
   1fb4e:	edcd 7a05 	vstr	s15, [sp, #20]
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
   1fb52:	d11e      	bne.n	1fb92 <__ieee754_rem_pio2f+0x21a>
   1fb54:	eeb5 7a40 	vcmp.f32	s14, #0.0
   1fb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fb5c:	bf0c      	ite	eq
   1fb5e:	2301      	moveq	r3, #1
   1fb60:	2302      	movne	r3, #2
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
   1fb62:	491a      	ldr	r1, [pc, #104]	; (1fbcc <__ieee754_rem_pio2f+0x254>)
   1fb64:	9101      	str	r1, [sp, #4]
   1fb66:	2102      	movs	r1, #2
   1fb68:	9100      	str	r1, [sp, #0]
   1fb6a:	a803      	add	r0, sp, #12
   1fb6c:	4621      	mov	r1, r4
   1fb6e:	f000 f8f1 	bl	1fd54 <__kernel_rem_pio2f>
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
   1fb72:	2d00      	cmp	r5, #0
   1fb74:	f6bf af31 	bge.w	1f9da <__ieee754_rem_pio2f+0x62>
   1fb78:	edd4 7a00 	vldr	s15, [r4]
   1fb7c:	eef1 7a67 	vneg.f32	s15, s15
   1fb80:	edc4 7a00 	vstr	s15, [r4]
   1fb84:	edd4 7a01 	vldr	s15, [r4, #4]
   1fb88:	eef1 7a67 	vneg.f32	s15, s15
   1fb8c:	edc4 7a01 	vstr	s15, [r4, #4]
   1fb90:	e77a      	b.n	1fa88 <__ieee754_rem_pio2f+0x110>
	nx = 3;
   1fb92:	2303      	movs	r3, #3
   1fb94:	e7e5      	b.n	1fb62 <__ieee754_rem_pio2f+0x1ea>
   1fb96:	bf00      	nop
   1fb98:	3f490fd8 	.word	0x3f490fd8
   1fb9c:	4016cbe3 	.word	0x4016cbe3
   1fba0:	3fc90f80 	.word	0x3fc90f80
   1fba4:	3fc90fd0 	.word	0x3fc90fd0
   1fba8:	37354400 	.word	0x37354400
   1fbac:	37354443 	.word	0x37354443
   1fbb0:	2e85a308 	.word	0x2e85a308
   1fbb4:	43490f80 	.word	0x43490f80
   1fbb8:	3f22f984 	.word	0x3f22f984
   1fbbc:	0002c2ec 	.word	0x0002c2ec
   1fbc0:	2e85a300 	.word	0x2e85a300
   1fbc4:	248d3132 	.word	0x248d3132
   1fbc8:	43800000 	.word	0x43800000
   1fbcc:	0002c36c 	.word	0x0002c36c

0001fbd0 <fmodf>:

float fmodf(float x, float y)
{
	union {float f; uint32_t i;} ux = {x}, uy = {y};
	int ex = ux.i>>23 & 0xff;
	int ey = uy.i>>23 & 0xff;
   1fbd0:	ee10 1a90 	vmov	r1, s1
	uint32_t sx = ux.i & 0x80000000;
	uint32_t i;
	uint32_t uxi = ux.i;

	if (uy.i<<1 == 0 || isnan(y) || ex == 0xff)
   1fbd4:	004b      	lsls	r3, r1, #1
{
   1fbd6:	b530      	push	{r4, r5, lr}
	if (uy.i<<1 == 0 || isnan(y) || ex == 0xff)
   1fbd8:	d00a      	beq.n	1fbf0 <fmodf+0x20>
   1fbda:	eef4 0a60 	vcmp.f32	s1, s1
   1fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fbe2:	d605      	bvs.n	1fbf0 <fmodf+0x20>
	int ex = ux.i>>23 & 0xff;
   1fbe4:	ee10 0a10 	vmov	r0, s0
   1fbe8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
	if (uy.i<<1 == 0 || isnan(y) || ex == 0xff)
   1fbec:	2aff      	cmp	r2, #255	; 0xff
   1fbee:	d104      	bne.n	1fbfa <fmodf+0x2a>
		return (x*y)/(x*y);
   1fbf0:	ee60 0a20 	vmul.f32	s1, s0, s1
   1fbf4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
		uxi >>= -ex + 1;
	}
	uxi |= sx;
	ux.i = uxi;
	return ux.f;
}
   1fbf8:	bd30      	pop	{r4, r5, pc}
	if (uxi<<1 <= uy.i<<1) {
   1fbfa:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
   1fbfe:	d305      	bcc.n	1fc0c <fmodf+0x3c>
		if (uxi<<1 == uy.i<<1)
   1fc00:	d1fa      	bne.n	1fbf8 <fmodf+0x28>
			return 0*x;
   1fc02:	eddf 7a24 	vldr	s15, [pc, #144]	; 1fc94 <fmodf+0xc4>
   1fc06:	ee20 0a27 	vmul.f32	s0, s0, s15
   1fc0a:	e7f5      	b.n	1fbf8 <fmodf+0x28>
	if (!ex) {
   1fc0c:	bb5a      	cbnz	r2, 1fc66 <fmodf+0x96>
		for (i = uxi<<9; i>>31 == 0; ex--, i <<= 1);
   1fc0e:	0243      	lsls	r3, r0, #9
   1fc10:	2b00      	cmp	r3, #0
   1fc12:	da25      	bge.n	1fc60 <fmodf+0x90>
		uxi <<= -ex + 1;
   1fc14:	f1c2 0301 	rsb	r3, r2, #1
   1fc18:	fa00 f303 	lsl.w	r3, r0, r3
	int ey = uy.i>>23 & 0xff;
   1fc1c:	f3c1 54c7 	ubfx	r4, r1, #23, #8
	if (!ey) {
   1fc20:	bb4c      	cbnz	r4, 1fc76 <fmodf+0xa6>
		for (i = uy.i<<9; i>>31 == 0; ey--, i <<= 1);
   1fc22:	024d      	lsls	r5, r1, #9
   1fc24:	2d00      	cmp	r5, #0
   1fc26:	da23      	bge.n	1fc70 <fmodf+0xa0>
		uy.i <<= -ey + 1;
   1fc28:	f1c4 0501 	rsb	r5, r4, #1
   1fc2c:	40a9      	lsls	r1, r5
	for (; ex > ey; ex--) {
   1fc2e:	42a2      	cmp	r2, r4
   1fc30:	eba3 0501 	sub.w	r5, r3, r1
   1fc34:	dc24      	bgt.n	1fc80 <fmodf+0xb0>
	if (i >> 31 == 0) {
   1fc36:	2d00      	cmp	r5, #0
   1fc38:	db01      	blt.n	1fc3e <fmodf+0x6e>
		if (i == 0)
   1fc3a:	d0e2      	beq.n	1fc02 <fmodf+0x32>
   1fc3c:	462b      	mov	r3, r5
	for (; uxi>>23 == 0; uxi <<= 1, ex--);
   1fc3e:	0dd9      	lsrs	r1, r3, #23
   1fc40:	d025      	beq.n	1fc8e <fmodf+0xbe>
	if (ex > 0) {
   1fc42:	2a00      	cmp	r2, #0
		uxi -= 1U << 23;
   1fc44:	bfcb      	itete	gt
   1fc46:	f5a3 0300 	subgt.w	r3, r3, #8388608	; 0x800000
		uxi >>= -ex + 1;
   1fc4a:	f1c2 0201 	rsble	r2, r2, #1
		uxi |= (uint32_t)ex << 23;
   1fc4e:	ea43 53c2 	orrgt.w	r3, r3, r2, lsl #23
		uxi >>= -ex + 1;
   1fc52:	40d3      	lsrle	r3, r2
	uint32_t sx = ux.i & 0x80000000;
   1fc54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
	ux.i = uxi;
   1fc58:	4303      	orrs	r3, r0
   1fc5a:	ee00 3a10 	vmov	s0, r3
	return ux.f;
   1fc5e:	e7cb      	b.n	1fbf8 <fmodf+0x28>
		for (i = uxi<<9; i>>31 == 0; ex--, i <<= 1);
   1fc60:	3a01      	subs	r2, #1
   1fc62:	005b      	lsls	r3, r3, #1
   1fc64:	e7d4      	b.n	1fc10 <fmodf+0x40>
		uxi &= -1U >> 9;
   1fc66:	f3c0 0316 	ubfx	r3, r0, #0, #23
		uxi |= 1U << 23;
   1fc6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1fc6e:	e7d5      	b.n	1fc1c <fmodf+0x4c>
		for (i = uy.i<<9; i>>31 == 0; ey--, i <<= 1);
   1fc70:	3c01      	subs	r4, #1
   1fc72:	006d      	lsls	r5, r5, #1
   1fc74:	e7d6      	b.n	1fc24 <fmodf+0x54>
		uy.i &= -1U >> 9;
   1fc76:	f3c1 0116 	ubfx	r1, r1, #0, #23
		uy.i |= 1U << 23;
   1fc7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1fc7e:	e7d6      	b.n	1fc2e <fmodf+0x5e>
		if (i >> 31 == 0) {
   1fc80:	2d00      	cmp	r5, #0
   1fc82:	db01      	blt.n	1fc88 <fmodf+0xb8>
			if (i == 0)
   1fc84:	d0bd      	beq.n	1fc02 <fmodf+0x32>
   1fc86:	462b      	mov	r3, r5
		uxi <<= 1;
   1fc88:	005b      	lsls	r3, r3, #1
	for (; ex > ey; ex--) {
   1fc8a:	3a01      	subs	r2, #1
   1fc8c:	e7cf      	b.n	1fc2e <fmodf+0x5e>
	for (; uxi>>23 == 0; uxi <<= 1, ex--);
   1fc8e:	005b      	lsls	r3, r3, #1
   1fc90:	3a01      	subs	r2, #1
   1fc92:	e7d4      	b.n	1fc3e <fmodf+0x6e>
   1fc94:	00000000 	.word	0x00000000

0001fc98 <__kernel_cosf>:
	float x,y;
#endif
{
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
   1fc98:	ee10 3a10 	vmov	r3, s0
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
   1fc9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if(ix<0x32000000) {			/* if x < 2**27 */
   1fca0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   1fca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1fca8:	da05      	bge.n	1fcb6 <__kernel_cosf+0x1e>
	    if(((int)x)==0) return one;		/* generate inexact */
   1fcaa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1fcae:	ee17 2a90 	vmov	r2, s15
   1fcb2:	2a00      	cmp	r2, #0
   1fcb4:	d03b      	beq.n	1fd2e <__kernel_cosf+0x96>
	}
	z  = x*x;
   1fcb6:	ee20 6a00 	vmul.f32	s12, s0, s0
   1fcba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
   1fcbe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 1fd34 <__kernel_cosf+0x9c>
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
   1fcc2:	4a1d      	ldr	r2, [pc, #116]	; (1fd38 <__kernel_cosf+0xa0>)
   1fcc4:	ee66 7a07 	vmul.f32	s15, s12, s14
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
   1fcc8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 1fd3c <__kernel_cosf+0xa4>
   1fccc:	eea6 7a25 	vfma.f32	s14, s12, s11
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
   1fcd0:	4293      	cmp	r3, r2
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
   1fcd2:	eddf 5a1b 	vldr	s11, [pc, #108]	; 1fd40 <__kernel_cosf+0xa8>
   1fcd6:	eee7 5a06 	vfma.f32	s11, s14, s12
   1fcda:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1fd44 <__kernel_cosf+0xac>
   1fcde:	eea5 7a86 	vfma.f32	s14, s11, s12
   1fce2:	eddf 5a19 	vldr	s11, [pc, #100]	; 1fd48 <__kernel_cosf+0xb0>
   1fce6:	eee7 5a06 	vfma.f32	s11, s14, s12
   1fcea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 1fd4c <__kernel_cosf+0xb4>
   1fcee:	eea5 7a86 	vfma.f32	s14, s11, s12
   1fcf2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   1fcf6:	ee27 7a06 	vmul.f32	s14, s14, s12
   1fcfa:	eee6 0a07 	vfma.f32	s1, s12, s14
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
   1fcfe:	dc04      	bgt.n	1fd0a <__kernel_cosf+0x72>
	    return one - ((float)0.5*z - (z*r - x*y));
   1fd00:	ee77 0ae0 	vsub.f32	s1, s15, s1
   1fd04:	ee36 0ae0 	vsub.f32	s0, s13, s1
   1fd08:	4770      	bx	lr
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
   1fd0a:	4a11      	ldr	r2, [pc, #68]	; (1fd50 <__kernel_cosf+0xb8>)
   1fd0c:	4293      	cmp	r3, r2
		qx = (float)0.28125;
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
   1fd0e:	bfda      	itte	le
   1fd10:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
   1fd14:	ee07 3a10 	vmovle	s14, r3
		qx = (float)0.28125;
   1fd18:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
	    }
	    hz = (float)0.5*z-qx;
   1fd1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
	    a  = one-qx;
   1fd20:	ee36 0ac7 	vsub.f32	s0, s13, s14
	    return a - (hz - (z*r-x*y));
   1fd24:	ee77 7ae0 	vsub.f32	s15, s15, s1
   1fd28:	ee30 0a67 	vsub.f32	s0, s0, s15
   1fd2c:	4770      	bx	lr
	    if(((int)x)==0) return one;		/* generate inexact */
   1fd2e:	eeb0 0a66 	vmov.f32	s0, s13
	}
}
   1fd32:	4770      	bx	lr
   1fd34:	ad47d74e 	.word	0xad47d74e
   1fd38:	3e999999 	.word	0x3e999999
   1fd3c:	310f74f6 	.word	0x310f74f6
   1fd40:	b493f27c 	.word	0xb493f27c
   1fd44:	37d00d01 	.word	0x37d00d01
   1fd48:	bab60b61 	.word	0xbab60b61
   1fd4c:	3d2aaaab 	.word	0x3d2aaaab
   1fd50:	3f480000 	.word	0x3f480000

0001fd54 <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
   1fd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd58:	ed2d 8b04 	vpush	{d8-d9}
   1fd5c:	b0d7      	sub	sp, #348	; 0x15c
   1fd5e:	469b      	mov	fp, r3
   1fd60:	460e      	mov	r6, r1
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
   1fd62:	4bbe      	ldr	r3, [pc, #760]	; (2005c <__kernel_rem_pio2f+0x308>)
   1fd64:	9964      	ldr	r1, [sp, #400]	; 0x190
{
   1fd66:	9002      	str	r0, [sp, #8]
	jk = init_jk[prec];
   1fd68:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
{
   1fd6c:	9865      	ldr	r0, [sp, #404]	; 0x194
	jv = (e0-3)/8; if(jv<0) jv=0;
	q0 =  e0-8*(jv+1);

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
   1fd6e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 2006c <__kernel_rem_pio2f+0x318>
	jv = (e0-3)/8; if(jv<0) jv=0;
   1fd72:	1ed1      	subs	r1, r2, #3
   1fd74:	2308      	movs	r3, #8
   1fd76:	fb91 f1f3 	sdiv	r1, r1, r3
   1fd7a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	jx =  nx-1;
   1fd7e:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
	q0 =  e0-8*(jv+1);
   1fd82:	1c4c      	adds	r4, r1, #1
   1fd84:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
	j = jv-jx; m = jx+jk;
   1fd88:	eba1 050a 	sub.w	r5, r1, sl
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
   1fd8c:	aa1a      	add	r2, sp, #104	; 0x68
	j = jv-jx; m = jx+jk;
   1fd8e:	eb09 070a 	add.w	r7, r9, sl
   1fd92:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
   1fd96:	4696      	mov	lr, r2
   1fd98:	2300      	movs	r3, #0
   1fd9a:	42bb      	cmp	r3, r7
   1fd9c:	dd0f      	ble.n	1fdbe <__kernel_rem_pio2f+0x6a>
   1fd9e:	af42      	add	r7, sp, #264	; 0x108

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
   1fda0:	2200      	movs	r2, #0
   1fda2:	454a      	cmp	r2, r9
   1fda4:	dc27      	bgt.n	1fdf6 <__kernel_rem_pio2f+0xa2>
   1fda6:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   1fdaa:	eb0b 0302 	add.w	r3, fp, r2
   1fdae:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
   1fdb2:	9d02      	ldr	r5, [sp, #8]
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
   1fdb4:	eddf 7aad 	vldr	s15, [pc, #692]	; 2006c <__kernel_rem_pio2f+0x318>
   1fdb8:	f04f 0c00 	mov.w	ip, #0
   1fdbc:	e015      	b.n	1fdea <__kernel_rem_pio2f+0x96>
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
   1fdbe:	42dd      	cmn	r5, r3
   1fdc0:	bf5d      	ittte	pl
   1fdc2:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
   1fdc6:	ee07 2a90 	vmovpl	s15, r2
   1fdca:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
   1fdce:	eef0 7a47 	vmovmi.f32	s15, s14
   1fdd2:	ecee 7a01 	vstmia	lr!, {s15}
   1fdd6:	3301      	adds	r3, #1
   1fdd8:	e7df      	b.n	1fd9a <__kernel_rem_pio2f+0x46>
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
   1fdda:	ecf5 6a01 	vldmia	r5!, {s13}
   1fdde:	ed33 7a01 	vldmdb	r3!, {s14}
   1fde2:	eee6 7a87 	vfma.f32	s15, s13, s14
   1fde6:	f10c 0c01 	add.w	ip, ip, #1
   1fdea:	45d4      	cmp	ip, sl
   1fdec:	ddf5      	ble.n	1fdda <__kernel_rem_pio2f+0x86>
	    q[i] = fw;
   1fdee:	ece7 7a01 	vstmia	r7!, {s15}
	for (i=0;i<=jk;i++) {
   1fdf2:	3201      	adds	r2, #1
   1fdf4:	e7d5      	b.n	1fda2 <__kernel_rem_pio2f+0x4e>
   1fdf6:	ab06      	add	r3, sp, #24
   1fdf8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
   1fdfc:	9304      	str	r3, [sp, #16]

	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
	    fw    =  (float)((__int32_t)(twon8* z));
   1fdfe:	eddf 8a9a 	vldr	s17, [pc, #616]	; 20068 <__kernel_rem_pio2f+0x314>
	    iq[i] =  (__int32_t)(z-two8*fw);
   1fe02:	ed9f 9a98 	vldr	s18, [pc, #608]	; 20064 <__kernel_rem_pio2f+0x310>
   1fe06:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   1fe0a:	9303      	str	r3, [sp, #12]
	for (i=0;i<=jk;i++) {
   1fe0c:	464d      	mov	r5, r9
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
   1fe0e:	ab56      	add	r3, sp, #344	; 0x158
   1fe10:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
   1fe14:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1fe18:	3f01      	subs	r7, #1
   1fe1a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   1fe1e:	00bf      	lsls	r7, r7, #2
   1fe20:	ab56      	add	r3, sp, #344	; 0x158
   1fe22:	19da      	adds	r2, r3, r7
   1fe24:	3a4c      	subs	r2, #76	; 0x4c
   1fe26:	2300      	movs	r3, #0
   1fe28:	1ae9      	subs	r1, r5, r3
   1fe2a:	2900      	cmp	r1, #0
   1fe2c:	dc4c      	bgt.n	1fec8 <__kernel_rem_pio2f+0x174>
	    z     =  q[j-1]+fw;
	}

    /* compute n */
	z  = scalbnf(z,(int)q0);	/* actual value of z */
   1fe2e:	4620      	mov	r0, r4
   1fe30:	f7fe fd1c 	bl	1e86c <scalbnf>
   1fe34:	eeb0 8a40 	vmov.f32	s16, s0
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
   1fe38:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   1fe3c:	ee28 0a00 	vmul.f32	s0, s16, s0
   1fe40:	f7ff faea 	bl	1f418 <floorf>
   1fe44:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   1fe48:	eea0 8a67 	vfms.f32	s16, s0, s15
	n  = (__int32_t) z;
	z -= (float)n;
	ih = 0;
	if(q0>0) {	/* need iq[jz-1] to determine n */
   1fe4c:	2c00      	cmp	r4, #0
	n  = (__int32_t) z;
   1fe4e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   1fe52:	edcd 7a01 	vstr	s15, [sp, #4]
	z -= (float)n;
   1fe56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1fe5a:	ee38 8a67 	vsub.f32	s16, s16, s15
	if(q0>0) {	/* need iq[jz-1] to determine n */
   1fe5e:	dd48      	ble.n	1fef2 <__kernel_rem_pio2f+0x19e>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
   1fe60:	1e69      	subs	r1, r5, #1
   1fe62:	ab06      	add	r3, sp, #24
   1fe64:	f1c4 0008 	rsb	r0, r4, #8
   1fe68:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
   1fe6c:	9a01      	ldr	r2, [sp, #4]
   1fe6e:	fa4c f300 	asr.w	r3, ip, r0
   1fe72:	441a      	add	r2, r3
	    iq[jz-1] -= i<<(8-q0);
   1fe74:	4083      	lsls	r3, r0
	    i  = (iq[jz-1]>>(8-q0)); n += i;
   1fe76:	9201      	str	r2, [sp, #4]
	    iq[jz-1] -= i<<(8-q0);
   1fe78:	ebac 0203 	sub.w	r2, ip, r3
   1fe7c:	ab06      	add	r3, sp, #24
   1fe7e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	    ih = iq[jz-1]>>(7-q0);
   1fe82:	f1c4 0307 	rsb	r3, r4, #7
   1fe86:	fa42 f803 	asr.w	r8, r2, r3
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
   1fe8a:	f1b8 0f00 	cmp.w	r8, #0
   1fe8e:	dd41      	ble.n	1ff14 <__kernel_rem_pio2f+0x1c0>
	    n += 1; carry = 0;
   1fe90:	9b01      	ldr	r3, [sp, #4]
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
   1fe92:	2000      	movs	r0, #0
	    n += 1; carry = 0;
   1fe94:	3301      	adds	r3, #1
   1fe96:	9301      	str	r3, [sp, #4]
   1fe98:	4601      	mov	r1, r0
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
   1fe9a:	4285      	cmp	r5, r0
   1fe9c:	dc6d      	bgt.n	1ff7a <__kernel_rem_pio2f+0x226>
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
		    }
		} else  iq[i] = 0xff - j;
	    }
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
   1fe9e:	2c00      	cmp	r4, #0
   1fea0:	dd04      	ble.n	1feac <__kernel_rem_pio2f+0x158>
	        switch(q0) {
   1fea2:	2c01      	cmp	r4, #1
   1fea4:	d07e      	beq.n	1ffa4 <__kernel_rem_pio2f+0x250>
   1fea6:	2c02      	cmp	r4, #2
   1fea8:	f000 8086 	beq.w	1ffb8 <__kernel_rem_pio2f+0x264>
	    	   iq[jz-1] &= 0x7f; break;
	    	case 2:
	    	   iq[jz-1] &= 0x3f; break;
	        }
	    }
	    if(ih==2) {
   1feac:	f1b8 0f02 	cmp.w	r8, #2
   1feb0:	d130      	bne.n	1ff14 <__kernel_rem_pio2f+0x1c0>
		z = one - z;
   1feb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1feb6:	ee30 8a48 	vsub.f32	s16, s0, s16
		if(carry!=0) z -= scalbnf(one,(int)q0);
   1feba:	b359      	cbz	r1, 1ff14 <__kernel_rem_pio2f+0x1c0>
   1febc:	4620      	mov	r0, r4
   1febe:	f7fe fcd5 	bl	1e86c <scalbnf>
   1fec2:	ee38 8a40 	vsub.f32	s16, s16, s0
   1fec6:	e025      	b.n	1ff14 <__kernel_rem_pio2f+0x1c0>
	    fw    =  (float)((__int32_t)(twon8* z));
   1fec8:	ee60 7a28 	vmul.f32	s15, s0, s17
	    iq[i] =  (__int32_t)(z-two8*fw);
   1fecc:	a806      	add	r0, sp, #24
	    fw    =  (float)((__int32_t)(twon8* z));
   1fece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1fed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	    iq[i] =  (__int32_t)(z-two8*fw);
   1fed6:	eea7 0ac9 	vfms.f32	s0, s15, s18
   1feda:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1fede:	ee10 1a10 	vmov	r1, s0
	    z     =  q[j-1]+fw;
   1fee2:	ed32 0a01 	vldmdb	r2!, {s0}
	    iq[i] =  (__int32_t)(z-two8*fw);
   1fee6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	    z     =  q[j-1]+fw;
   1feea:	ee37 0a80 	vadd.f32	s0, s15, s0
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
   1feee:	3301      	adds	r3, #1
   1fef0:	e79a      	b.n	1fe28 <__kernel_rem_pio2f+0xd4>
	else if(q0==0) ih = iq[jz-1]>>8;
   1fef2:	d106      	bne.n	1ff02 <__kernel_rem_pio2f+0x1ae>
   1fef4:	1e6b      	subs	r3, r5, #1
   1fef6:	aa06      	add	r2, sp, #24
   1fef8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1fefc:	ea4f 2822 	mov.w	r8, r2, asr #8
   1ff00:	e7c3      	b.n	1fe8a <__kernel_rem_pio2f+0x136>
	else if(z>=(float)0.5) ih=2;
   1ff02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ff06:	eeb4 8ae7 	vcmpe.f32	s16, s15
   1ff0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ff0e:	da31      	bge.n	1ff74 <__kernel_rem_pio2f+0x220>
	ih = 0;
   1ff10:	f04f 0800 	mov.w	r8, #0
	    }
	}

    /* check if recomputation is needed */
	if(z==zero) {
   1ff14:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ff18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ff1c:	f040 80a8 	bne.w	20070 <__kernel_rem_pio2f+0x31c>
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
   1ff20:	1e6b      	subs	r3, r5, #1
   1ff22:	4618      	mov	r0, r3
	    j = 0;
   1ff24:	2200      	movs	r2, #0
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
   1ff26:	4548      	cmp	r0, r9
   1ff28:	da4d      	bge.n	1ffc6 <__kernel_rem_pio2f+0x272>
	    if(j==0) { /* need recomputation */
   1ff2a:	2a00      	cmp	r2, #0
   1ff2c:	f000 8087 	beq.w	2003e <__kernel_rem_pio2f+0x2ea>
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
	    jz -= 1; q0 -= 8;
	    while(iq[jz]==0) { jz--; q0-=8;}
   1ff30:	aa06      	add	r2, sp, #24
   1ff32:	3c08      	subs	r4, #8
   1ff34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1ff38:	2900      	cmp	r1, #0
   1ff3a:	f000 808d 	beq.w	20058 <__kernel_rem_pio2f+0x304>
		iq[jz] = (__int32_t) fw;
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
   1ff3e:	4620      	mov	r0, r4
   1ff40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1ff44:	9302      	str	r3, [sp, #8]
   1ff46:	f7fe fc91 	bl	1e86c <scalbnf>
   1ff4a:	9b02      	ldr	r3, [sp, #8]
	for(i=jz;i>=0;i--) {
	    q[i] = fw*(float)iq[i]; fw*=twon8;
   1ff4c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 20068 <__kernel_rem_pio2f+0x314>
   1ff50:	0099      	lsls	r1, r3, #2
   1ff52:	aa42      	add	r2, sp, #264	; 0x108
   1ff54:	1850      	adds	r0, r2, r1
   1ff56:	1d05      	adds	r5, r0, #4
	for(i=jz;i>=0;i--) {
   1ff58:	461c      	mov	r4, r3
   1ff5a:	2c00      	cmp	r4, #0
   1ff5c:	f280 80b8 	bge.w	200d0 <__kernel_rem_pio2f+0x37c>
   1ff60:	2500      	movs	r5, #0
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
   1ff62:	1b5c      	subs	r4, r3, r5
   1ff64:	2c00      	cmp	r4, #0
   1ff66:	f2c0 80d8 	blt.w	2011a <__kernel_rem_pio2f+0x3c6>
   1ff6a:	4f3d      	ldr	r7, [pc, #244]	; (20060 <__kernel_rem_pio2f+0x30c>)
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
   1ff6c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 2006c <__kernel_rem_pio2f+0x318>
   1ff70:	2400      	movs	r4, #0
   1ff72:	e0c6      	b.n	20102 <__kernel_rem_pio2f+0x3ae>
	else if(z>=(float)0.5) ih=2;
   1ff74:	f04f 0802 	mov.w	r8, #2
   1ff78:	e78a      	b.n	1fe90 <__kernel_rem_pio2f+0x13c>
		j = iq[i];
   1ff7a:	ab06      	add	r3, sp, #24
   1ff7c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
		if(carry==0) {
   1ff80:	b949      	cbnz	r1, 1ff96 <__kernel_rem_pio2f+0x242>
		    if(j!=0) {
   1ff82:	b12b      	cbz	r3, 1ff90 <__kernel_rem_pio2f+0x23c>
			carry = 1; iq[i] = 0x100- j;
   1ff84:	aa06      	add	r2, sp, #24
   1ff86:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
   1ff8a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
   1ff8e:	2301      	movs	r3, #1
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
   1ff90:	3001      	adds	r0, #1
   1ff92:	4619      	mov	r1, r3
   1ff94:	e781      	b.n	1fe9a <__kernel_rem_pio2f+0x146>
		} else  iq[i] = 0xff - j;
   1ff96:	aa06      	add	r2, sp, #24
   1ff98:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   1ff9c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
   1ffa0:	460b      	mov	r3, r1
   1ffa2:	e7f5      	b.n	1ff90 <__kernel_rem_pio2f+0x23c>
	    	   iq[jz-1] &= 0x7f; break;
   1ffa4:	1e68      	subs	r0, r5, #1
   1ffa6:	ab06      	add	r3, sp, #24
   1ffa8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ffac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    	   iq[jz-1] &= 0x3f; break;
   1ffb0:	aa06      	add	r2, sp, #24
   1ffb2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
   1ffb6:	e779      	b.n	1feac <__kernel_rem_pio2f+0x158>
   1ffb8:	1e68      	subs	r0, r5, #1
   1ffba:	ab06      	add	r3, sp, #24
   1ffbc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ffc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ffc4:	e7f4      	b.n	1ffb0 <__kernel_rem_pio2f+0x25c>
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
   1ffc6:	a906      	add	r1, sp, #24
   1ffc8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1ffcc:	3801      	subs	r0, #1
   1ffce:	430a      	orrs	r2, r1
   1ffd0:	e7a9      	b.n	1ff26 <__kernel_rem_pio2f+0x1d2>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
   1ffd2:	f10c 0c01 	add.w	ip, ip, #1
   1ffd6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1ffda:	2a00      	cmp	r2, #0
   1ffdc:	d0f9      	beq.n	1ffd2 <__kernel_rem_pio2f+0x27e>
   1ffde:	eb0b 0305 	add.w	r3, fp, r5
   1ffe2:	aa1a      	add	r2, sp, #104	; 0x68
   1ffe4:	009b      	lsls	r3, r3, #2
   1ffe6:	1898      	adds	r0, r3, r2
   1ffe8:	3004      	adds	r0, #4
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
   1ffea:	1c69      	adds	r1, r5, #1
   1ffec:	3704      	adds	r7, #4
   1ffee:	2200      	movs	r2, #0
   1fff0:	4465      	add	r5, ip
   1fff2:	9005      	str	r0, [sp, #20]
   1fff4:	428d      	cmp	r5, r1
   1fff6:	f6ff af0a 	blt.w	1fe0e <__kernel_rem_pio2f+0xba>
		    f[jx+i] = (float) ipio2[jv+i];
   1fffa:	a81a      	add	r0, sp, #104	; 0x68
   1fffc:	eb02 0c03 	add.w	ip, r2, r3
   20000:	4484      	add	ip, r0
   20002:	9803      	ldr	r0, [sp, #12]
   20004:	f8dd e008 	ldr.w	lr, [sp, #8]
   20008:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   2000c:	9001      	str	r0, [sp, #4]
   2000e:	ee07 0a90 	vmov	s15, r0
   20012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   20016:	9805      	ldr	r0, [sp, #20]
   20018:	edcc 7a00 	vstr	s15, [ip]
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
   2001c:	eddf 7a13 	vldr	s15, [pc, #76]	; 2006c <__kernel_rem_pio2f+0x318>
   20020:	eb00 0802 	add.w	r8, r0, r2
   20024:	f04f 0c00 	mov.w	ip, #0
   20028:	45d4      	cmp	ip, sl
   2002a:	dd0c      	ble.n	20046 <__kernel_rem_pio2f+0x2f2>
		    q[i] = fw;
   2002c:	eb02 0c07 	add.w	ip, r2, r7
   20030:	a842      	add	r0, sp, #264	; 0x108
   20032:	4484      	add	ip, r0
   20034:	edcc 7a01 	vstr	s15, [ip, #4]
		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
   20038:	3101      	adds	r1, #1
   2003a:	3204      	adds	r2, #4
   2003c:	e7da      	b.n	1fff4 <__kernel_rem_pio2f+0x2a0>
   2003e:	9b04      	ldr	r3, [sp, #16]
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
   20040:	f04f 0c01 	mov.w	ip, #1
   20044:	e7c7      	b.n	1ffd6 <__kernel_rem_pio2f+0x282>
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
   20046:	ecfe 6a01 	vldmia	lr!, {s13}
   2004a:	ed38 7a01 	vldmdb	r8!, {s14}
   2004e:	f10c 0c01 	add.w	ip, ip, #1
   20052:	eee6 7a87 	vfma.f32	s15, s13, s14
   20056:	e7e7      	b.n	20028 <__kernel_rem_pio2f+0x2d4>
	    while(iq[jz]==0) { jz--; q0-=8;}
   20058:	3b01      	subs	r3, #1
   2005a:	e769      	b.n	1ff30 <__kernel_rem_pio2f+0x1dc>
   2005c:	0002c6b0 	.word	0x0002c6b0
   20060:	0002c684 	.word	0x0002c684
   20064:	43800000 	.word	0x43800000
   20068:	3b800000 	.word	0x3b800000
   2006c:	00000000 	.word	0x00000000
	    z = scalbnf(z,-(int)q0);
   20070:	4260      	negs	r0, r4
   20072:	eeb0 0a48 	vmov.f32	s0, s16
   20076:	f7fe fbf9 	bl	1e86c <scalbnf>
	    if(z>=two8) { 
   2007a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 20064 <__kernel_rem_pio2f+0x310>
   2007e:	eeb4 0ac7 	vcmpe.f32	s0, s14
   20082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20086:	db1a      	blt.n	200be <__kernel_rem_pio2f+0x36a>
		fw = (float)((__int32_t)(twon8*z));
   20088:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 20068 <__kernel_rem_pio2f+0x314>
   2008c:	ee60 7a27 	vmul.f32	s15, s0, s15
		iq[jz] = (__int32_t)(z-two8*fw);
   20090:	aa06      	add	r2, sp, #24
		fw = (float)((__int32_t)(twon8*z));
   20092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		iq[jz] = (__int32_t) fw;
   20096:	a906      	add	r1, sp, #24
		fw = (float)((__int32_t)(twon8*z));
   20098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		jz += 1; q0 += 8;
   2009c:	3408      	adds	r4, #8
		iq[jz] = (__int32_t)(z-two8*fw);
   2009e:	eea7 0ac7 	vfms.f32	s0, s15, s14
		iq[jz] = (__int32_t) fw;
   200a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		iq[jz] = (__int32_t)(z-two8*fw);
   200a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   200aa:	ee10 3a10 	vmov	r3, s0
   200ae:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
		jz += 1; q0 += 8;
   200b2:	1c6b      	adds	r3, r5, #1
		iq[jz] = (__int32_t) fw;
   200b4:	ee17 2a90 	vmov	r2, s15
   200b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   200bc:	e73f      	b.n	1ff3e <__kernel_rem_pio2f+0x1ea>
	    } else iq[jz] = (__int32_t) z ;
   200be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   200c2:	aa06      	add	r2, sp, #24
   200c4:	ee10 3a10 	vmov	r3, s0
   200c8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
   200cc:	462b      	mov	r3, r5
   200ce:	e736      	b.n	1ff3e <__kernel_rem_pio2f+0x1ea>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
   200d0:	aa06      	add	r2, sp, #24
   200d2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   200d6:	9202      	str	r2, [sp, #8]
   200d8:	ee07 2a90 	vmov	s15, r2
   200dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for(i=jz;i>=0;i--) {
   200e0:	3c01      	subs	r4, #1
	    q[i] = fw*(float)iq[i]; fw*=twon8;
   200e2:	ee67 7a80 	vmul.f32	s15, s15, s0
   200e6:	ee20 0a07 	vmul.f32	s0, s0, s14
   200ea:	ed65 7a01 	vstmdb	r5!, {s15}
   200ee:	e734      	b.n	1ff5a <__kernel_rem_pio2f+0x206>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
   200f0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
   200f4:	ecf7 6a01 	vldmia	r7!, {s13}
   200f8:	ed9c 7a00 	vldr	s14, [ip]
   200fc:	eee6 7a87 	vfma.f32	s15, s13, s14
   20100:	3401      	adds	r4, #1
   20102:	454c      	cmp	r4, r9
   20104:	dc01      	bgt.n	2010a <__kernel_rem_pio2f+0x3b6>
   20106:	42a5      	cmp	r5, r4
   20108:	daf2      	bge.n	200f0 <__kernel_rem_pio2f+0x39c>
	    fq[jz-i] = fw;
   2010a:	aa56      	add	r2, sp, #344	; 0x158
   2010c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
   20110:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
   20114:	3501      	adds	r5, #1
   20116:	3804      	subs	r0, #4
   20118:	e723      	b.n	1ff62 <__kernel_rem_pio2f+0x20e>
	}

    /* compress fq[] into y[] */
	switch(prec) {
   2011a:	9a64      	ldr	r2, [sp, #400]	; 0x190
   2011c:	2a03      	cmp	r2, #3
   2011e:	d84d      	bhi.n	201bc <__kernel_rem_pio2f+0x468>
   20120:	e8df f002 	tbb	[pc, r2]
   20124:	021f1f3e 	.word	0x021f1f3e
   20128:	aa56      	add	r2, sp, #344	; 0x158
   2012a:	4411      	add	r1, r2
   2012c:	399c      	subs	r1, #156	; 0x9c
   2012e:	4608      	mov	r0, r1
		fw = fq[0]-fw;
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
   20130:	461c      	mov	r4, r3
   20132:	2c00      	cmp	r4, #0
   20134:	dc5f      	bgt.n	201f6 <__kernel_rem_pio2f+0x4a2>
   20136:	4608      	mov	r0, r1
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
   20138:	461c      	mov	r4, r3
   2013a:	2c01      	cmp	r4, #1
   2013c:	dc6b      	bgt.n	20216 <__kernel_rem_pio2f+0x4c2>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
   2013e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 2006c <__kernel_rem_pio2f+0x318>
   20142:	2b01      	cmp	r3, #1
   20144:	dc77      	bgt.n	20236 <__kernel_rem_pio2f+0x4e2>
   20146:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
   2014a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
		if(ih==0) {
   2014e:	f1b8 0f00 	cmp.w	r8, #0
   20152:	d176      	bne.n	20242 <__kernel_rem_pio2f+0x4ee>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
   20154:	edc6 6a00 	vstr	s13, [r6]
   20158:	ed86 7a01 	vstr	s14, [r6, #4]
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
   2015c:	edc6 7a02 	vstr	s15, [r6, #8]
   20160:	e02c      	b.n	201bc <__kernel_rem_pio2f+0x468>
   20162:	aa56      	add	r2, sp, #344	; 0x158
   20164:	4411      	add	r1, r2
		fw = 0.0;
   20166:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 2006c <__kernel_rem_pio2f+0x318>
   2016a:	399c      	subs	r1, #156	; 0x9c
		for (i=jz;i>=0;i--) fw += fq[i]; 
   2016c:	4618      	mov	r0, r3
   2016e:	2800      	cmp	r0, #0
   20170:	da32      	bge.n	201d8 <__kernel_rem_pio2f+0x484>
		y[0] = (ih==0)? fw: -fw; 
   20172:	f1b8 0f00 	cmp.w	r8, #0
   20176:	d035      	beq.n	201e4 <__kernel_rem_pio2f+0x490>
   20178:	eef1 7a47 	vneg.f32	s15, s14
   2017c:	edc6 7a00 	vstr	s15, [r6]
		fw = fq[0]-fw;
   20180:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
   20184:	ee77 7ac7 	vsub.f32	s15, s15, s14
   20188:	a82f      	add	r0, sp, #188	; 0xbc
		for (i=1;i<=jz;i++) fw += fq[i];
   2018a:	2101      	movs	r1, #1
   2018c:	428b      	cmp	r3, r1
   2018e:	da2c      	bge.n	201ea <__kernel_rem_pio2f+0x496>
		y[1] = (ih==0)? fw: -fw; 
   20190:	f1b8 0f00 	cmp.w	r8, #0
   20194:	d001      	beq.n	2019a <__kernel_rem_pio2f+0x446>
   20196:	eef1 7a67 	vneg.f32	s15, s15
   2019a:	edc6 7a01 	vstr	s15, [r6, #4]
		break;
   2019e:	e00d      	b.n	201bc <__kernel_rem_pio2f+0x468>
   201a0:	aa56      	add	r2, sp, #344	; 0x158
   201a2:	4411      	add	r1, r2
		fw = 0.0;
   201a4:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 2006c <__kernel_rem_pio2f+0x318>
   201a8:	399c      	subs	r1, #156	; 0x9c
		for (i=jz;i>=0;i--) fw += fq[i];
   201aa:	2b00      	cmp	r3, #0
   201ac:	da0e      	bge.n	201cc <__kernel_rem_pio2f+0x478>
		y[0] = (ih==0)? fw: -fw; 
   201ae:	f1b8 0f00 	cmp.w	r8, #0
   201b2:	d001      	beq.n	201b8 <__kernel_rem_pio2f+0x464>
   201b4:	eef1 7a67 	vneg.f32	s15, s15
   201b8:	edc6 7a00 	vstr	s15, [r6]
		}
	}
	return n&7;
}
   201bc:	9b01      	ldr	r3, [sp, #4]
   201be:	f003 0007 	and.w	r0, r3, #7
   201c2:	b057      	add	sp, #348	; 0x15c
   201c4:	ecbd 8b04 	vpop	{d8-d9}
   201c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i=jz;i>=0;i--) fw += fq[i];
   201cc:	ed31 7a01 	vldmdb	r1!, {s14}
   201d0:	3b01      	subs	r3, #1
   201d2:	ee77 7a87 	vadd.f32	s15, s15, s14
   201d6:	e7e8      	b.n	201aa <__kernel_rem_pio2f+0x456>
		for (i=jz;i>=0;i--) fw += fq[i]; 
   201d8:	ed71 7a01 	vldmdb	r1!, {s15}
   201dc:	3801      	subs	r0, #1
   201de:	ee37 7a27 	vadd.f32	s14, s14, s15
   201e2:	e7c4      	b.n	2016e <__kernel_rem_pio2f+0x41a>
   201e4:	eef0 7a47 	vmov.f32	s15, s14
   201e8:	e7c8      	b.n	2017c <__kernel_rem_pio2f+0x428>
		for (i=1;i<=jz;i++) fw += fq[i];
   201ea:	ecb0 7a01 	vldmia	r0!, {s14}
   201ee:	3101      	adds	r1, #1
   201f0:	ee77 7a87 	vadd.f32	s15, s15, s14
   201f4:	e7ca      	b.n	2018c <__kernel_rem_pio2f+0x438>
		    fw      = fq[i-1]+fq[i]; 
   201f6:	ed50 7a02 	vldr	s15, [r0, #-8]
   201fa:	ed70 6a01 	vldmdb	r0!, {s13}
   201fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
   20202:	3c01      	subs	r4, #1
		    fq[i]  += fq[i-1]-fw;
   20204:	ee77 7ac7 	vsub.f32	s15, s15, s14
		    fq[i-1] = fw;
   20208:	ed00 7a01 	vstr	s14, [r0, #-4]
		    fq[i]  += fq[i-1]-fw;
   2020c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   20210:	edc0 7a00 	vstr	s15, [r0]
   20214:	e78d      	b.n	20132 <__kernel_rem_pio2f+0x3de>
		    fw      = fq[i-1]+fq[i]; 
   20216:	ed50 7a02 	vldr	s15, [r0, #-8]
   2021a:	ed70 6a01 	vldmdb	r0!, {s13}
   2021e:	ee37 7aa6 	vadd.f32	s14, s15, s13
   20222:	3c01      	subs	r4, #1
		    fq[i]  += fq[i-1]-fw;
   20224:	ee77 7ac7 	vsub.f32	s15, s15, s14
		    fq[i-1] = fw;
   20228:	ed00 7a01 	vstr	s14, [r0, #-4]
		    fq[i]  += fq[i-1]-fw;
   2022c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   20230:	edc0 7a00 	vstr	s15, [r0]
   20234:	e781      	b.n	2013a <__kernel_rem_pio2f+0x3e6>
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
   20236:	ed31 7a01 	vldmdb	r1!, {s14}
   2023a:	3b01      	subs	r3, #1
   2023c:	ee77 7a87 	vadd.f32	s15, s15, s14
   20240:	e77f      	b.n	20142 <__kernel_rem_pio2f+0x3ee>
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
   20242:	eef1 6a66 	vneg.f32	s13, s13
   20246:	eeb1 7a47 	vneg.f32	s14, s14
   2024a:	edc6 6a00 	vstr	s13, [r6]
   2024e:	ed86 7a01 	vstr	s14, [r6, #4]
   20252:	eef1 7a67 	vneg.f32	s15, s15
   20256:	e781      	b.n	2015c <__kernel_rem_pio2f+0x408>

00020258 <__kernel_sinf>:
	float x,y; int iy;		/* iy=0 if y is zero */
#endif
{
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
   20258:	ee10 3a10 	vmov	r3, s0
	ix &= 0x7fffffff;			/* high word of x */
   2025c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if(ix<0x32000000)			/* |x| < 2**-27 */
   20260:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   20264:	da04      	bge.n	20270 <__kernel_sinf+0x18>
	   {if((int)x==0) return x;}		/* generate inexact */
   20266:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   2026a:	ee17 3a90 	vmov	r3, s15
   2026e:	b35b      	cbz	r3, 202c8 <__kernel_sinf+0x70>
	z	=  x*x;
   20270:	ee20 7a00 	vmul.f32	s14, s0, s0
	v	=  z*x;
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
   20274:	eddf 7a15 	vldr	s15, [pc, #84]	; 202cc <__kernel_sinf+0x74>
   20278:	ed9f 6a15 	vldr	s12, [pc, #84]	; 202d0 <__kernel_sinf+0x78>
   2027c:	eea7 6a27 	vfma.f32	s12, s14, s15
   20280:	eddf 7a14 	vldr	s15, [pc, #80]	; 202d4 <__kernel_sinf+0x7c>
   20284:	eee6 7a07 	vfma.f32	s15, s12, s14
   20288:	ed9f 6a13 	vldr	s12, [pc, #76]	; 202d8 <__kernel_sinf+0x80>
   2028c:	eea7 6a87 	vfma.f32	s12, s15, s14
   20290:	eddf 7a12 	vldr	s15, [pc, #72]	; 202dc <__kernel_sinf+0x84>
	v	=  z*x;
   20294:	ee60 6a07 	vmul.f32	s13, s0, s14
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
   20298:	eee6 7a07 	vfma.f32	s15, s12, s14
	if(iy==0) return x+v*(S1+z*r);
   2029c:	b930      	cbnz	r0, 202ac <__kernel_sinf+0x54>
   2029e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 202e0 <__kernel_sinf+0x88>
   202a2:	eea7 6a27 	vfma.f32	s12, s14, s15
   202a6:	eea6 0a26 	vfma.f32	s0, s12, s13
   202aa:	4770      	bx	lr
	else      return x-((z*(half*y-v*r)-y)-v*S1);
   202ac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
   202b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   202b4:	eee0 7a86 	vfma.f32	s15, s1, s12
   202b8:	eed7 0a87 	vfnms.f32	s1, s15, s14
   202bc:	eddf 7a09 	vldr	s15, [pc, #36]	; 202e4 <__kernel_sinf+0x8c>
   202c0:	eee6 0aa7 	vfma.f32	s1, s13, s15
   202c4:	ee30 0a60 	vsub.f32	s0, s0, s1
}
   202c8:	4770      	bx	lr
   202ca:	bf00      	nop
   202cc:	2f2ec9d3 	.word	0x2f2ec9d3
   202d0:	b2d72f34 	.word	0xb2d72f34
   202d4:	3638ef1b 	.word	0x3638ef1b
   202d8:	b9500d01 	.word	0xb9500d01
   202dc:	3c088889 	.word	0x3c088889
   202e0:	be2aaaab 	.word	0xbe2aaaab
   202e4:	3e2aaaab 	.word	0x3e2aaaab

000202e8 <__kernel_tanf>:
	float x,y; int iy;
#endif
{
	float z,r,v,w,s;
	__int32_t ix,hx;
	GET_FLOAT_WORD(hx,x);
   202e8:	ee10 3a10 	vmov	r3, s0
	ix = hx&0x7fffffff;	/* high word of |x| */
   202ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
	if(ix<0x31800000)			/* x < 2**-28 */
   202f0:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   202f4:	da16      	bge.n	20324 <__kernel_tanf+0x3c>
	    {if((int)x==0) {			/* generate inexact */
   202f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   202fa:	ee17 1a90 	vmov	r1, s15
   202fe:	bb39      	cbnz	r1, 20350 <__kernel_tanf+0x68>
		if((ix|(iy+1))==0) return one/fabsf(x);
   20300:	1c43      	adds	r3, r0, #1
   20302:	4313      	orrs	r3, r2
   20304:	d106      	bne.n	20314 <__kernel_tanf+0x2c>
   20306:	eef0 7ac0 	vabs.f32	s15, s0
   2030a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2030e:	ee87 0a27 	vdiv.f32	s0, s14, s15
   20312:	4770      	bx	lr
		else return (iy==1)? x: -one/x;
   20314:	2801      	cmp	r0, #1
   20316:	f000 80a0 	beq.w	2045a <__kernel_tanf+0x172>
   2031a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   2031e:	ee87 0a80 	vdiv.f32	s0, s15, s0
   20322:	4770      	bx	lr
	    }
	    }
	if(ix>=0x3f2ca140) { 			/* |x|>=0.6744 */
   20324:	494d      	ldr	r1, [pc, #308]	; (2045c <__kernel_tanf+0x174>)
   20326:	428a      	cmp	r2, r1
   20328:	dd12      	ble.n	20350 <__kernel_tanf+0x68>
	    if(hx<0) {x = -x; y = -y;}
   2032a:	2b00      	cmp	r3, #0
	    z = pio4-x;
   2032c:	eddf 7a4c 	vldr	s15, [pc, #304]	; 20460 <__kernel_tanf+0x178>
	    if(hx<0) {x = -x; y = -y;}
   20330:	bfb8      	it	lt
   20332:	eeb1 0a40 	vneglt.f32	s0, s0
	    z = pio4-x;
   20336:	ee37 0ac0 	vsub.f32	s0, s15, s0
	    w = pio4lo-y;
   2033a:	eddf 7a4a 	vldr	s15, [pc, #296]	; 20464 <__kernel_tanf+0x17c>
	    if(hx<0) {x = -x; y = -y;}
   2033e:	bfb8      	it	lt
   20340:	eef1 0a60 	vneglt.f32	s1, s1
	    w = pio4lo-y;
   20344:	ee77 0ae0 	vsub.f32	s1, s15, s1
	    x = z+w; y = 0.0;
   20348:	ee30 0a80 	vadd.f32	s0, s1, s0
   2034c:	eddf 0a46 	vldr	s1, [pc, #280]	; 20468 <__kernel_tanf+0x180>
    /* Break x^5*(T[1]+x^2*T[2]+...) into
     *	  x^5(T[1]+x^4*T[3]+...+x^20*T[11]) +
     *	  x^5(x^2*(T[2]+x^4*T[4]+...+x^22*[T12]))
     */
	r = T[1]+w*(T[3]+w*(T[5]+w*(T[7]+w*(T[9]+w*T[11]))));
	v = z*(T[2]+w*(T[4]+w*(T[6]+w*(T[8]+w*(T[10]+w*T[12])))));
   20350:	eddf 6a46 	vldr	s13, [pc, #280]	; 2046c <__kernel_tanf+0x184>
   20354:	ed9f 6a46 	vldr	s12, [pc, #280]	; 20470 <__kernel_tanf+0x188>
	r = T[1]+w*(T[3]+w*(T[5]+w*(T[7]+w*(T[9]+w*T[11]))));
   20358:	eddf 5a46 	vldr	s11, [pc, #280]	; 20474 <__kernel_tanf+0x18c>
	s = z*x;
	r = y + z*(s*(r+v)+y);
	r += T[0]*s;
	w = x+r;
	if(ix>=0x3f2ca140) {
   2035c:	493f      	ldr	r1, [pc, #252]	; (2045c <__kernel_tanf+0x174>)
	z	=  x*x;
   2035e:	ee20 7a00 	vmul.f32	s14, s0, s0
	if(ix>=0x3f2ca140) {
   20362:	428a      	cmp	r2, r1
	w 	=  z*z;
   20364:	ee67 7a07 	vmul.f32	s15, s14, s14
	s = z*x;
   20368:	ee20 5a07 	vmul.f32	s10, s0, s14
	v = z*(T[2]+w*(T[4]+w*(T[6]+w*(T[8]+w*(T[10]+w*T[12])))));
   2036c:	eea7 6aa6 	vfma.f32	s12, s15, s13
   20370:	eddf 6a41 	vldr	s13, [pc, #260]	; 20478 <__kernel_tanf+0x190>
   20374:	eee6 6a27 	vfma.f32	s13, s12, s15
   20378:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2047c <__kernel_tanf+0x194>
   2037c:	eea6 6aa7 	vfma.f32	s12, s13, s15
   20380:	eddf 6a3f 	vldr	s13, [pc, #252]	; 20480 <__kernel_tanf+0x198>
   20384:	eee6 6a27 	vfma.f32	s13, s12, s15
   20388:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 20484 <__kernel_tanf+0x19c>
   2038c:	eea6 6aa7 	vfma.f32	s12, s13, s15
	r = T[1]+w*(T[3]+w*(T[5]+w*(T[7]+w*(T[9]+w*T[11]))));
   20390:	eddf 6a3d 	vldr	s13, [pc, #244]	; 20488 <__kernel_tanf+0x1a0>
   20394:	eee7 6aa5 	vfma.f32	s13, s15, s11
   20398:	eddf 5a3c 	vldr	s11, [pc, #240]	; 2048c <__kernel_tanf+0x1a4>
   2039c:	eee6 5aa7 	vfma.f32	s11, s13, s15
   203a0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 20490 <__kernel_tanf+0x1a8>
   203a4:	eee5 6aa7 	vfma.f32	s13, s11, s15
   203a8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 20494 <__kernel_tanf+0x1ac>
   203ac:	eee6 5aa7 	vfma.f32	s11, s13, s15
   203b0:	eddf 6a39 	vldr	s13, [pc, #228]	; 20498 <__kernel_tanf+0x1b0>
   203b4:	eee5 6aa7 	vfma.f32	s13, s11, s15
   203b8:	eef0 7a66 	vmov.f32	s15, s13
	r = y + z*(s*(r+v)+y);
   203bc:	eee6 7a07 	vfma.f32	s15, s12, s14
   203c0:	eef0 6a60 	vmov.f32	s13, s1
   203c4:	eee7 6a85 	vfma.f32	s13, s15, s10
	r += T[0]*s;
   203c8:	eddf 7a34 	vldr	s15, [pc, #208]	; 2049c <__kernel_tanf+0x1b4>
	r = y + z*(s*(r+v)+y);
   203cc:	eee6 0a87 	vfma.f32	s1, s13, s14
	r += T[0]*s;
   203d0:	eee5 0a27 	vfma.f32	s1, s10, s15
	w = x+r;
   203d4:	ee30 7a20 	vadd.f32	s14, s0, s1
	if(ix>=0x3f2ca140) {
   203d8:	dd1d      	ble.n	20416 <__kernel_tanf+0x12e>
	    v = (float)iy;
   203da:	ee07 0a90 	vmov	s15, r0
   203de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	    return (float)(1-((hx>>30)&2))*(v-(float)2.0*(x-(w*w/(w+v)-r)));
   203e2:	ee27 6a07 	vmul.f32	s12, s14, s14
   203e6:	ee37 7a27 	vadd.f32	s14, s14, s15
   203ea:	179b      	asrs	r3, r3, #30
   203ec:	eec6 6a07 	vdiv.f32	s13, s12, s14
   203f0:	f003 0302 	and.w	r3, r3, #2
   203f4:	f1c3 0301 	rsb	r3, r3, #1
   203f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   203fc:	ee76 0ae0 	vsub.f32	s1, s13, s1
   20400:	ee30 0a60 	vsub.f32	s0, s0, s1
   20404:	eee0 7a47 	vfms.f32	s15, s0, s14
   20408:	ee00 3a10 	vmov	s0, r3
   2040c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   20410:	ee27 0a80 	vmul.f32	s0, s15, s0
   20414:	4770      	bx	lr
	}
	if(iy==1) return w;
   20416:	2801      	cmp	r0, #1
   20418:	d01d      	beq.n	20456 <__kernel_tanf+0x16e>
	    __int32_t i;
	    z  = w;
	    GET_FLOAT_WORD(i,z);
	    SET_FLOAT_WORD(z,i&0xfffff000);
	    v  = r-(z - x); 	/* z+v = r+x */
	    t = a  = -(float)1.0/w;	/* a = -1.0/w */
   2041a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   2041e:	ee87 6a87 	vdiv.f32	s12, s15, s14
	    SET_FLOAT_WORD(z,i&0xfffff000);
   20422:	4b1f      	ldr	r3, [pc, #124]	; (204a0 <__kernel_tanf+0x1b8>)
   20424:	ee17 2a10 	vmov	r2, s14
   20428:	401a      	ands	r2, r3
   2042a:	ee06 2a90 	vmov	s13, r2
	    GET_FLOAT_WORD(i,t);
	    SET_FLOAT_WORD(t,i&0xfffff000);
   2042e:	ee16 2a10 	vmov	r2, s12
   20432:	4013      	ands	r3, r2
   20434:	ee07 3a90 	vmov	s15, r3
	    s  = (float)1.0+t*z;
   20438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2043c:	eea6 7aa7 	vfma.f32	s14, s13, s15
	    v  = r-(z - x); 	/* z+v = r+x */
   20440:	ee36 0ac0 	vsub.f32	s0, s13, s0
   20444:	ee70 0ac0 	vsub.f32	s1, s1, s0
	    return t+a*(s+t*v);
   20448:	eea7 7aa0 	vfma.f32	s14, s15, s1
   2044c:	eee7 7a06 	vfma.f32	s15, s14, s12
   20450:	eeb0 0a67 	vmov.f32	s0, s15
   20454:	4770      	bx	lr
	if(iy==1) return w;
   20456:	eeb0 0a47 	vmov.f32	s0, s14
	}
}
   2045a:	4770      	bx	lr
   2045c:	3f2ca13f 	.word	0x3f2ca13f
   20460:	3f490fda 	.word	0x3f490fda
   20464:	33222168 	.word	0x33222168
   20468:	00000000 	.word	0x00000000
   2046c:	37d95384 	.word	0x37d95384
   20470:	3895c07a 	.word	0x3895c07a
   20474:	b79bae5f 	.word	0xb79bae5f
   20478:	398137b9 	.word	0x398137b9
   2047c:	3abede48 	.word	0x3abede48
   20480:	3c11371f 	.word	0x3c11371f
   20484:	3d5d0dd1 	.word	0x3d5d0dd1
   20488:	38a3f445 	.word	0x38a3f445
   2048c:	3a1a26c8 	.word	0x3a1a26c8
   20490:	3b6b6916 	.word	0x3b6b6916
   20494:	3cb327a4 	.word	0x3cb327a4
   20498:	3e088889 	.word	0x3e088889
   2049c:	3eaaaaab 	.word	0x3eaaaaab
   204a0:	fffff000 	.word	0xfffff000

000204a4 <nearbyintf>:
#include "libm.h"

float nearbyintf(float x)
{
	union {float f; uint32_t i;} u = {x};
	int e = u.i>>23 & 0xff;
   204a4:	ee10 3a10 	vmov	r3, s0
   204a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
	int s = u.i>>31;
	float_t y;

	if (e >= 0x7f+23)
   204ac:	2a95      	cmp	r2, #149	; 0x95
   204ae:	dc18      	bgt.n	204e2 <nearbyintf+0x3e>
   204b0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 204e4 <nearbyintf+0x40>
		return x;
	if (s)
   204b4:	0fdb      	lsrs	r3, r3, #31
		y = x - 0x1p23f + 0x1p23f;
   204b6:	bf15      	itete	ne
   204b8:	ee30 0a67 	vsubne.f32	s0, s0, s15
	else
		y = x + 0x1p23f - 0x1p23f;
   204bc:	ee30 0a27 	vaddeq.f32	s0, s0, s15
		y = x - 0x1p23f + 0x1p23f;
   204c0:	ee30 0a27 	vaddne.f32	s0, s0, s15
		y = x + 0x1p23f - 0x1p23f;
   204c4:	ee30 0a67 	vsubeq.f32	s0, s0, s15
	if (y == 0)
   204c8:	eeb5 0a40 	vcmp.f32	s0, #0.0
   204cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   204d0:	d107      	bne.n	204e2 <nearbyintf+0x3e>
		return s ? -0.0f : 0.0f;
   204d2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 204e8 <nearbyintf+0x44>
   204d6:	eddf 7a05 	vldr	s15, [pc, #20]	; 204ec <nearbyintf+0x48>
   204da:	2b00      	cmp	r3, #0
   204dc:	bf08      	it	eq
   204de:	eeb0 0a67 	vmoveq.f32	s0, s15
	return y;
}
   204e2:	4770      	bx	lr
   204e4:	4b000000 	.word	0x4b000000
   204e8:	80000000 	.word	0x80000000
   204ec:	00000000 	.word	0x00000000

000204f0 <cosf>:
#endif
{
	float y[2],z=0.0;
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
   204f0:	ee10 3a10 	vmov	r3, s0
{
   204f4:	b507      	push	{r0, r1, r2, lr}

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
   204f6:	4a1c      	ldr	r2, [pc, #112]	; (20568 <cosf+0x78>)
	ix &= 0x7fffffff;
   204f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
   204fc:	4293      	cmp	r3, r2
   204fe:	dc04      	bgt.n	2050a <cosf+0x1a>
   20500:	eddf 0a1a 	vldr	s1, [pc, #104]	; 2056c <cosf+0x7c>

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
	    switch(n&3) {
		case 0: return  __kernel_cosf(y[0],y[1]);
   20504:	f7ff fbc8 	bl	1fc98 <__kernel_cosf>
   20508:	e004      	b.n	20514 <cosf+0x24>
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
   2050a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2050e:	db04      	blt.n	2051a <cosf+0x2a>
   20510:	ee30 0a40 	vsub.f32	s0, s0, s0
		case 2: return -__kernel_cosf(y[0],y[1]);
		default:
		        return  __kernel_sinf(y[0],y[1],1);
	    }
	}
}
   20514:	b003      	add	sp, #12
   20516:	f85d fb04 	ldr.w	pc, [sp], #4
	    n = __ieee754_rem_pio2f(x,y);
   2051a:	4668      	mov	r0, sp
   2051c:	f7ff fa2c 	bl	1f978 <__ieee754_rem_pio2f>
	    switch(n&3) {
   20520:	f000 0003 	and.w	r0, r0, #3
   20524:	2801      	cmp	r0, #1
   20526:	d007      	beq.n	20538 <cosf+0x48>
   20528:	2802      	cmp	r0, #2
   2052a:	d00e      	beq.n	2054a <cosf+0x5a>
   2052c:	b9a0      	cbnz	r0, 20558 <cosf+0x68>
		case 0: return  __kernel_cosf(y[0],y[1]);
   2052e:	eddd 0a01 	vldr	s1, [sp, #4]
   20532:	ed9d 0a00 	vldr	s0, [sp]
   20536:	e7e5      	b.n	20504 <cosf+0x14>
		case 1: return -__kernel_sinf(y[0],y[1],1);
   20538:	eddd 0a01 	vldr	s1, [sp, #4]
   2053c:	ed9d 0a00 	vldr	s0, [sp]
   20540:	f7ff fe8a 	bl	20258 <__kernel_sinf>
		case 2: return -__kernel_cosf(y[0],y[1]);
   20544:	eeb1 0a40 	vneg.f32	s0, s0
   20548:	e7e4      	b.n	20514 <cosf+0x24>
   2054a:	eddd 0a01 	vldr	s1, [sp, #4]
   2054e:	ed9d 0a00 	vldr	s0, [sp]
   20552:	f7ff fba1 	bl	1fc98 <__kernel_cosf>
   20556:	e7f5      	b.n	20544 <cosf+0x54>
		        return  __kernel_sinf(y[0],y[1],1);
   20558:	2001      	movs	r0, #1
   2055a:	eddd 0a01 	vldr	s1, [sp, #4]
   2055e:	ed9d 0a00 	vldr	s0, [sp]
   20562:	f7ff fe79 	bl	20258 <__kernel_sinf>
   20566:	e7d5      	b.n	20514 <cosf+0x24>
   20568:	3f490fd8 	.word	0x3f490fd8
   2056c:	00000000 	.word	0x00000000

00020570 <frexpf>:
	float frexpf(float x, int *eptr)
#else
	float frexpf(x, eptr)
	float x; int *eptr;
#endif
{
   20570:	ee10 1a10 	vmov	r1, s0
	__int32_t hx, ix;
	GET_FLOAT_WORD(hx,x);
	ix = 0x7fffffff&hx;
   20574:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
{
   20578:	b510      	push	{r4, lr}
	*eptr = 0;
	if(!FLT_UWORD_IS_FINITE(ix)||FLT_UWORD_IS_ZERO(ix)) return x;	/* 0,inf,nan */
   2057a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
	*eptr = 0;
   2057e:	f04f 0400 	mov.w	r4, #0
	GET_FLOAT_WORD(hx,x);
   20582:	ee10 2a10 	vmov	r2, s0
	*eptr = 0;
   20586:	6004      	str	r4, [r0, #0]
	if(!FLT_UWORD_IS_FINITE(ix)||FLT_UWORD_IS_ZERO(ix)) return x;	/* 0,inf,nan */
   20588:	da17      	bge.n	205ba <frexpf+0x4a>
   2058a:	b1b3      	cbz	r3, 205ba <frexpf+0x4a>
	if (FLT_UWORD_IS_SUBNORMAL(ix)) {		/* subnormal */
   2058c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   20590:	da0a      	bge.n	205a8 <frexpf+0x38>
	    x *= two25;
	    GET_FLOAT_WORD(hx,x);
   20592:	eddf 7a0b 	vldr	s15, [pc, #44]	; 205c0 <frexpf+0x50>
   20596:	ee60 7a27 	vmul.f32	s15, s0, s15
	    ix = hx&0x7fffffff;
	    *eptr = -25;
   2059a:	f06f 0118 	mvn.w	r1, #24
	    GET_FLOAT_WORD(hx,x);
   2059e:	ee17 2a90 	vmov	r2, s15
	    *eptr = -25;
   205a2:	6001      	str	r1, [r0, #0]
	    ix = hx&0x7fffffff;
   205a4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
	}
	*eptr += (ix>>23)-126;
   205a8:	6801      	ldr	r1, [r0, #0]
   205aa:	15db      	asrs	r3, r3, #23
   205ac:	3b7e      	subs	r3, #126	; 0x7e
   205ae:	440b      	add	r3, r1
	hx = (hx&0x807fffff)|0x3f000000;
   205b0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
	*eptr += (ix>>23)-126;
   205b4:	6003      	str	r3, [r0, #0]
	SET_FLOAT_WORD(x,hx);
   205b6:	f042 517c 	orr.w	r1, r2, #1056964608	; 0x3f000000
	return x;
}
   205ba:	ee00 1a10 	vmov	s0, r1
   205be:	bd10      	pop	{r4, pc}
   205c0:	4c000000 	.word	0x4c000000

000205c4 <ldexpf>:
#else
	float ldexpf(value, exp)
	float value; int exp;
#endif
{
	if(!isfinite(value)||value==(float)0.0) return value;
   205c4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 205f0 <ldexpf+0x2c>
   205c8:	eef0 6ac0 	vabs.f32	s13, s0
   205cc:	eef4 6a47 	vcmp.f32	s13, s14
   205d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   205d4:	eef0 7a40 	vmov.f32	s15, s0
	if(!isfinite(value)||value==(float)0.0) return value;
   205d8:	d806      	bhi.n	205e8 <ldexpf+0x24>
   205da:	eeb5 0a40 	vcmp.f32	s0, #0.0
   205de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   205e2:	d001      	beq.n	205e8 <ldexpf+0x24>
	value = scalbnf(value,exp);
   205e4:	f7fe b942 	b.w	1e86c <scalbnf>
	//if(!finitef(value)||value==(float)0.0) errno = ERANGE;
	return value;
}
   205e8:	eeb0 0a67 	vmov.f32	s0, s15
   205ec:	4770      	bx	lr
   205ee:	bf00      	nop
   205f0:	7f7fffff 	.word	0x7f7fffff

000205f4 <modff>:
	float modff(float x, float *iptr)
#else
	float modff(x, iptr)
	float x,*iptr;
#endif
{
   205f4:	ee10 2a10 	vmov	r2, s0
	__int32_t i0,j0;
	__uint32_t i;
	GET_FLOAT_WORD(i0,x);
	j0 = ((i0>>23)&0xff)-0x7f;	/* exponent of x */
   205f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
   205fc:	397f      	subs	r1, #127	; 0x7f
	if(j0<23) {			/* integer part in x */
   205fe:	2916      	cmp	r1, #22
{
   20600:	b510      	push	{r4, lr}
	GET_FLOAT_WORD(i0,x);
   20602:	ee10 3a10 	vmov	r3, s0
	if(j0<23) {			/* integer part in x */
   20606:	dc0c      	bgt.n	20622 <modff+0x2e>
	    if(j0<0) {			/* |x|<1 */
   20608:	2900      	cmp	r1, #0
   2060a:	da05      	bge.n	20618 <modff+0x24>
	        SET_FLOAT_WORD(*iptr,i0&0x80000000);	/* *iptr = +-0 */
   2060c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
   20610:	6003      	str	r3, [r0, #0]
	    *iptr = x*one;
	    GET_FLOAT_WORD(ix,x);
	    SET_FLOAT_WORD(x,ix&0x80000000);	/* return +-0 */
	    return x;
	}
}
   20612:	ee00 2a10 	vmov	s0, r2
   20616:	bd10      	pop	{r4, pc}
		i = (0x007fffff)>>j0;
   20618:	4c09      	ldr	r4, [pc, #36]	; (20640 <modff+0x4c>)
   2061a:	fa44 f101 	asr.w	r1, r4, r1
		if((i0&i)==0) {			/* x is integral */
   2061e:	420a      	tst	r2, r1
   20620:	d103      	bne.n	2062a <modff+0x36>
	    *iptr = x*one;
   20622:	6002      	str	r2, [r0, #0]
	    SET_FLOAT_WORD(x,ix&0x80000000);	/* return +-0 */
   20624:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
	    return x;
   20628:	e7f3      	b.n	20612 <modff+0x1e>
		    SET_FLOAT_WORD(*iptr,i0&(~i));
   2062a:	ea22 0301 	bic.w	r3, r2, r1
		    return x - *iptr;
   2062e:	ee07 3a10 	vmov	s14, r3
   20632:	ee70 7a47 	vsub.f32	s15, s0, s14
		    SET_FLOAT_WORD(*iptr,i0&(~i));
   20636:	6003      	str	r3, [r0, #0]
		    return x - *iptr;
   20638:	ee17 2a90 	vmov	r2, s15
   2063c:	e7e9      	b.n	20612 <modff+0x1e>
   2063e:	bf00      	nop
   20640:	007fffff 	.word	0x007fffff

00020644 <sinf>:
#endif
{
	float y[2],z=0.0;
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
   20644:	ee10 3a10 	vmov	r3, s0
{
   20648:	b507      	push	{r0, r1, r2, lr}

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
	if(ix <= 0x3f490fd8) return __kernel_sinf(x,z,0);
   2064a:	4a1d      	ldr	r2, [pc, #116]	; (206c0 <sinf+0x7c>)
	ix &= 0x7fffffff;
   2064c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if(ix <= 0x3f490fd8) return __kernel_sinf(x,z,0);
   20650:	4293      	cmp	r3, r2
   20652:	dc05      	bgt.n	20660 <sinf+0x1c>
   20654:	eddf 0a1b 	vldr	s1, [pc, #108]	; 206c4 <sinf+0x80>
   20658:	2000      	movs	r0, #0

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
	    switch(n&3) {
		case 0: return  __kernel_sinf(y[0],y[1],1);
   2065a:	f7ff fdfd 	bl	20258 <__kernel_sinf>
   2065e:	e004      	b.n	2066a <sinf+0x26>
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
   20660:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   20664:	db04      	blt.n	20670 <sinf+0x2c>
   20666:	ee30 0a40 	vsub.f32	s0, s0, s0
		case 2: return -__kernel_sinf(y[0],y[1],1);
		default:
			return -__kernel_cosf(y[0],y[1]);
	    }
	}
}
   2066a:	b003      	add	sp, #12
   2066c:	f85d fb04 	ldr.w	pc, [sp], #4
	    n = __ieee754_rem_pio2f(x,y);
   20670:	4668      	mov	r0, sp
   20672:	f7ff f981 	bl	1f978 <__ieee754_rem_pio2f>
	    switch(n&3) {
   20676:	f000 0003 	and.w	r0, r0, #3
   2067a:	2801      	cmp	r0, #1
   2067c:	d008      	beq.n	20690 <sinf+0x4c>
   2067e:	2802      	cmp	r0, #2
   20680:	d00d      	beq.n	2069e <sinf+0x5a>
   20682:	b9b0      	cbnz	r0, 206b2 <sinf+0x6e>
		case 0: return  __kernel_sinf(y[0],y[1],1);
   20684:	2001      	movs	r0, #1
   20686:	eddd 0a01 	vldr	s1, [sp, #4]
   2068a:	ed9d 0a00 	vldr	s0, [sp]
   2068e:	e7e4      	b.n	2065a <sinf+0x16>
		case 1: return  __kernel_cosf(y[0],y[1]);
   20690:	eddd 0a01 	vldr	s1, [sp, #4]
   20694:	ed9d 0a00 	vldr	s0, [sp]
   20698:	f7ff fafe 	bl	1fc98 <__kernel_cosf>
   2069c:	e7e5      	b.n	2066a <sinf+0x26>
		case 2: return -__kernel_sinf(y[0],y[1],1);
   2069e:	2001      	movs	r0, #1
   206a0:	eddd 0a01 	vldr	s1, [sp, #4]
   206a4:	ed9d 0a00 	vldr	s0, [sp]
   206a8:	f7ff fdd6 	bl	20258 <__kernel_sinf>
			return -__kernel_cosf(y[0],y[1]);
   206ac:	eeb1 0a40 	vneg.f32	s0, s0
   206b0:	e7db      	b.n	2066a <sinf+0x26>
   206b2:	eddd 0a01 	vldr	s1, [sp, #4]
   206b6:	ed9d 0a00 	vldr	s0, [sp]
   206ba:	f7ff faed 	bl	1fc98 <__kernel_cosf>
   206be:	e7f5      	b.n	206ac <sinf+0x68>
   206c0:	3f490fd8 	.word	0x3f490fd8
   206c4:	00000000 	.word	0x00000000

000206c8 <tanf>:
#endif
{
	float y[2],z=0.0;
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
   206c8:	ee10 3a10 	vmov	r3, s0
{
   206cc:	b507      	push	{r0, r1, r2, lr}

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
	if(ix <= 0x3f490fda) return __kernel_tanf(x,z,1);
   206ce:	4a10      	ldr	r2, [pc, #64]	; (20710 <tanf+0x48>)
	ix &= 0x7fffffff;
   206d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if(ix <= 0x3f490fda) return __kernel_tanf(x,z,1);
   206d4:	4293      	cmp	r3, r2
   206d6:	dc05      	bgt.n	206e4 <tanf+0x1c>
   206d8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 20714 <tanf+0x4c>
   206dc:	2001      	movs	r0, #1
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;		/* NaN */

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
	    return __kernel_tanf(y[0],y[1],1-((n&1)<<1)); /*   1 -- n even
   206de:	f7ff fe03 	bl	202e8 <__kernel_tanf>
   206e2:	e004      	b.n	206ee <tanf+0x26>
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;		/* NaN */
   206e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   206e8:	db04      	blt.n	206f4 <tanf+0x2c>
   206ea:	ee30 0a40 	vsub.f32	s0, s0, s0
							      -1 -- n odd */
	}
}
   206ee:	b003      	add	sp, #12
   206f0:	f85d fb04 	ldr.w	pc, [sp], #4
	    n = __ieee754_rem_pio2f(x,y);
   206f4:	4668      	mov	r0, sp
   206f6:	f7ff f93f 	bl	1f978 <__ieee754_rem_pio2f>
	    return __kernel_tanf(y[0],y[1],1-((n&1)<<1)); /*   1 -- n even
   206fa:	0040      	lsls	r0, r0, #1
   206fc:	f000 0002 	and.w	r0, r0, #2
   20700:	f1c0 0001 	rsb	r0, r0, #1
   20704:	eddd 0a01 	vldr	s1, [sp, #4]
   20708:	ed9d 0a00 	vldr	s0, [sp]
   2070c:	e7e7      	b.n	206de <tanf+0x16>
   2070e:	bf00      	nop
   20710:	3f490fda 	.word	0x3f490fda
   20714:	00000000 	.word	0x00000000

00020718 <GPIODirModeSet>:
   20718:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
   2071c:	f012 0f01 	tst.w	r2, #1
   20720:	bf14      	ite	ne
   20722:	430b      	orrne	r3, r1
   20724:	438b      	biceq	r3, r1
   20726:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
   2072a:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
   2072e:	0792      	lsls	r2, r2, #30
   20730:	bf4c      	ite	mi
   20732:	4319      	orrmi	r1, r3
   20734:	ea23 0101 	bicpl.w	r1, r3, r1
   20738:	f8c0 1420 	str.w	r1, [r0, #1056]	; 0x420
   2073c:	4770      	bx	lr

0002073e <GPIODirModeGet>:
   2073e:	2301      	movs	r3, #1
   20740:	fa03 f101 	lsl.w	r1, r3, r1
   20744:	b510      	push	{r4, lr}
   20746:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
   2074a:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
   2074e:	b2c9      	uxtb	r1, r1
   20750:	4221      	tst	r1, r4
   20752:	bf14      	ite	ne
   20754:	4618      	movne	r0, r3
   20756:	2000      	moveq	r0, #0
   20758:	4211      	tst	r1, r2
   2075a:	bf14      	ite	ne
   2075c:	2302      	movne	r3, #2
   2075e:	2300      	moveq	r3, #0
   20760:	4318      	orrs	r0, r3
   20762:	bd10      	pop	{r4, pc}

00020764 <GPIOPadConfigSet>:
   20764:	b5f0      	push	{r4, r5, r6, r7, lr}
   20766:	f04f 0c03 	mov.w	ip, #3
   2076a:	f3c2 1741 	ubfx	r7, r2, #5, #2
   2076e:	2500      	movs	r5, #0
   20770:	fa41 f405 	asr.w	r4, r1, r5
   20774:	07e6      	lsls	r6, r4, #31
   20776:	d50f      	bpl.n	20798 <GPIOPadConfigSet+0x34>
   20778:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   2077c:	006c      	lsls	r4, r5, #1
   2077e:	fa0c fe04 	lsl.w	lr, ip, r4
   20782:	ea26 060e 	bic.w	r6, r6, lr
   20786:	f8c0 6fc4 	str.w	r6, [r0, #4036]	; 0xfc4
   2078a:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   2078e:	fa07 f404 	lsl.w	r4, r7, r4
   20792:	4334      	orrs	r4, r6
   20794:	f8c0 4fc4 	str.w	r4, [r0, #4036]	; 0xfc4
   20798:	3501      	adds	r5, #1
   2079a:	2d08      	cmp	r5, #8
   2079c:	d1e8      	bne.n	20770 <GPIOPadConfigSet+0xc>
   2079e:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
   207a2:	07d5      	lsls	r5, r2, #31
   207a4:	bf4c      	ite	mi
   207a6:	430c      	orrmi	r4, r1
   207a8:	438c      	bicpl	r4, r1
   207aa:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
   207ae:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   207b2:	0797      	lsls	r7, r2, #30
   207b4:	bf4c      	ite	mi
   207b6:	430c      	orrmi	r4, r1
   207b8:	438c      	bicpl	r4, r1
   207ba:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
   207be:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   207c2:	0756      	lsls	r6, r2, #29
   207c4:	bf4c      	ite	mi
   207c6:	430c      	orrmi	r4, r1
   207c8:	438c      	bicpl	r4, r1
   207ca:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
   207ce:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   207d2:	0715      	lsls	r5, r2, #28
   207d4:	bf4c      	ite	mi
   207d6:	430c      	orrmi	r4, r1
   207d8:	438c      	bicpl	r4, r1
   207da:	f8c0 4518 	str.w	r4, [r0, #1304]	; 0x518
   207de:	f012 0f10 	tst.w	r2, #16
   207e2:	f8d0 253c 	ldr.w	r2, [r0, #1340]	; 0x53c
   207e6:	bf14      	ite	ne
   207e8:	430a      	orrne	r2, r1
   207ea:	438a      	biceq	r2, r1
   207ec:	f8c0 253c 	str.w	r2, [r0, #1340]	; 0x53c
   207f0:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   207f4:	07dc      	lsls	r4, r3, #31
   207f6:	bf4c      	ite	mi
   207f8:	430a      	orrmi	r2, r1
   207fa:	438a      	bicpl	r2, r1
   207fc:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
   20800:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   20804:	079f      	lsls	r7, r3, #30
   20806:	bf4c      	ite	mi
   20808:	430a      	orrmi	r2, r1
   2080a:	438a      	bicpl	r2, r1
   2080c:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   20810:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   20814:	075e      	lsls	r6, r3, #29
   20816:	bf4c      	ite	mi
   20818:	430a      	orrmi	r2, r1
   2081a:	438a      	bicpl	r2, r1
   2081c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
   20820:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   20824:	071d      	lsls	r5, r3, #28
   20826:	bf4c      	ite	mi
   20828:	430a      	orrmi	r2, r1
   2082a:	438a      	bicpl	r2, r1
   2082c:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
   20830:	f8d0 2544 	ldr.w	r2, [r0, #1348]	; 0x544
   20834:	059c      	lsls	r4, r3, #22
   20836:	bf4c      	ite	mi
   20838:	430a      	orrmi	r2, r1
   2083a:	438a      	bicpl	r2, r1
   2083c:	f8c0 2544 	str.w	r2, [r0, #1348]	; 0x544
   20840:	f8d0 2540 	ldr.w	r2, [r0, #1344]	; 0x540
   20844:	f413 7f40 	tst.w	r3, #768	; 0x300
   20848:	bf14      	ite	ne
   2084a:	430a      	orrne	r2, r1
   2084c:	438a      	biceq	r2, r1
   2084e:	f8c0 2540 	str.w	r2, [r0, #1344]	; 0x540
   20852:	b92b      	cbnz	r3, 20860 <GPIOPadConfigSet+0xfc>
   20854:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   20858:	4319      	orrs	r1, r3
   2085a:	f8c0 1528 	str.w	r1, [r0, #1320]	; 0x528
   2085e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20860:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   20864:	ea23 0101 	bic.w	r1, r3, r1
   20868:	e7f7      	b.n	2085a <GPIOPadConfigSet+0xf6>

0002086a <GPIOPadConfigGet>:
   2086a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2086e:	2401      	movs	r4, #1
   20870:	f8d0 5500 	ldr.w	r5, [r0, #1280]	; 0x500
   20874:	fa04 f101 	lsl.w	r1, r4, r1
   20878:	b2c9      	uxtb	r1, r1
   2087a:	420d      	tst	r5, r1
   2087c:	bf18      	it	ne
   2087e:	46a0      	movne	r8, r4
   20880:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   20884:	bf08      	it	eq
   20886:	f04f 0800 	moveq.w	r8, #0
   2088a:	4221      	tst	r1, r4
   2088c:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   20890:	bf14      	ite	ne
   20892:	f04f 0e02 	movne.w	lr, #2
   20896:	f04f 0e00 	moveq.w	lr, #0
   2089a:	4221      	tst	r1, r4
   2089c:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   208a0:	bf14      	ite	ne
   208a2:	f04f 0c04 	movne.w	ip, #4
   208a6:	f04f 0c00 	moveq.w	ip, #0
   208aa:	4221      	tst	r1, r4
   208ac:	f8d0 453c 	ldr.w	r4, [r0, #1340]	; 0x53c
   208b0:	f8d0 5fc4 	ldr.w	r5, [r0, #4036]	; 0xfc4
   208b4:	bf14      	ite	ne
   208b6:	2708      	movne	r7, #8
   208b8:	2700      	moveq	r7, #0
   208ba:	4221      	tst	r1, r4
   208bc:	ea4f 0441 	mov.w	r4, r1, lsl #1
   208c0:	fa25 f404 	lsr.w	r4, r5, r4
   208c4:	ea4f 1444 	mov.w	r4, r4, lsl #5
   208c8:	f004 0460 	and.w	r4, r4, #96	; 0x60
   208cc:	ea44 0408 	orr.w	r4, r4, r8
   208d0:	ea44 040e 	orr.w	r4, r4, lr
   208d4:	ea44 040c 	orr.w	r4, r4, ip
   208d8:	bf14      	ite	ne
   208da:	2610      	movne	r6, #16
   208dc:	2600      	moveq	r6, #0
   208de:	433c      	orrs	r4, r7
   208e0:	4334      	orrs	r4, r6
   208e2:	6014      	str	r4, [r2, #0]
   208e4:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   208e8:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
   208ec:	4211      	tst	r1, r2
   208ee:	bf14      	ite	ne
   208f0:	2201      	movne	r2, #1
   208f2:	2200      	moveq	r2, #0
   208f4:	4221      	tst	r1, r4
   208f6:	bf14      	ite	ne
   208f8:	2402      	movne	r4, #2
   208fa:	2400      	moveq	r4, #0
   208fc:	4314      	orrs	r4, r2
   208fe:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   20902:	4211      	tst	r1, r2
   20904:	bf14      	ite	ne
   20906:	2204      	movne	r2, #4
   20908:	2200      	moveq	r2, #0
   2090a:	4314      	orrs	r4, r2
   2090c:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   20910:	4211      	tst	r1, r2
   20912:	bf14      	ite	ne
   20914:	2208      	movne	r2, #8
   20916:	2200      	moveq	r2, #0
   20918:	4322      	orrs	r2, r4
   2091a:	f8d0 4540 	ldr.w	r4, [r0, #1344]	; 0x540
   2091e:	4221      	tst	r1, r4
   20920:	d008      	beq.n	20934 <GPIOPadConfigGet+0xca>
   20922:	f8d0 0544 	ldr.w	r0, [r0, #1348]	; 0x544
   20926:	4201      	tst	r1, r0
   20928:	bf14      	ite	ne
   2092a:	f44f 7100 	movne.w	r1, #512	; 0x200
   2092e:	f44f 7180 	moveq.w	r1, #256	; 0x100
   20932:	430a      	orrs	r2, r1
   20934:	601a      	str	r2, [r3, #0]
   20936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002093a <GPIOPinRead>:
   2093a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   2093e:	4770      	bx	lr

00020940 <GPIOPinWrite>:
   20940:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   20944:	4770      	bx	lr

00020946 <GPIOPinTypeComparatorOutput>:
   20946:	b570      	push	{r4, r5, r6, lr}
   20948:	2202      	movs	r2, #2
   2094a:	460d      	mov	r5, r1
   2094c:	f7ff fee4 	bl	20718 <GPIODirModeSet>
   20950:	4629      	mov	r1, r5
   20952:	2308      	movs	r3, #8
   20954:	2201      	movs	r2, #1
   20956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2095a:	f7ff bf03 	b.w	20764 <GPIOPadConfigSet>

0002095e <GPIOPinTypeGPIOInput>:
   2095e:	b570      	push	{r4, r5, r6, lr}
   20960:	2200      	movs	r2, #0
   20962:	460d      	mov	r5, r1
   20964:	f7ff fed8 	bl	20718 <GPIODirModeSet>
   20968:	4629      	mov	r1, r5
   2096a:	2308      	movs	r3, #8
   2096c:	2201      	movs	r2, #1
   2096e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20972:	f7ff bef7 	b.w	20764 <GPIOPadConfigSet>

00020976 <GPIOPinTypeUART>:
   20976:	f7ff bfe6 	b.w	20946 <GPIOPinTypeComparatorOutput>
	...

0002097c <GPIOPinConfigure>:
   2097c:	4b0e      	ldr	r3, [pc, #56]	; (209b8 <GPIOPinConfigure+0x3c>)
   2097e:	f3c0 4107 	ubfx	r1, r0, #16, #8
   20982:	b510      	push	{r4, lr}
   20984:	2201      	movs	r2, #1
   20986:	681c      	ldr	r4, [r3, #0]
   20988:	408a      	lsls	r2, r1
   2098a:	004b      	lsls	r3, r1, #1
   2098c:	4222      	tst	r2, r4
   2098e:	bf18      	it	ne
   20990:	3301      	addne	r3, #1
   20992:	4a0a      	ldr	r2, [pc, #40]	; (209bc <GPIOPinConfigure+0x40>)
   20994:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   20998:	f3c0 2407 	ubfx	r4, r0, #8, #8
   2099c:	f8d2 352c 	ldr.w	r3, [r2, #1324]	; 0x52c
   209a0:	210f      	movs	r1, #15
   209a2:	40a1      	lsls	r1, r4
   209a4:	f000 000f 	and.w	r0, r0, #15
   209a8:	ea23 0301 	bic.w	r3, r3, r1
   209ac:	40a0      	lsls	r0, r4
   209ae:	4318      	orrs	r0, r3
   209b0:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
   209b4:	bd10      	pop	{r4, pc}
   209b6:	bf00      	nop
   209b8:	400fe06c 	.word	0x400fe06c
   209bc:	0002db0c 	.word	0x0002db0c

000209c0 <_IntDefaultHandler>:
   209c0:	e7fe      	b.n	209c0 <_IntDefaultHandler>
	...

000209c4 <IntUnregister>:
   209c4:	4b02      	ldr	r3, [pc, #8]	; (209d0 <IntUnregister+0xc>)
   209c6:	4a03      	ldr	r2, [pc, #12]	; (209d4 <IntUnregister+0x10>)
   209c8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   209cc:	4770      	bx	lr
   209ce:	bf00      	nop
   209d0:	20000400 	.word	0x20000400
   209d4:	000209c1 	.word	0x000209c1

000209d8 <IntPrioritySet>:
   209d8:	0882      	lsrs	r2, r0, #2
   209da:	4b08      	ldr	r3, [pc, #32]	; (209fc <IntPrioritySet+0x24>)
   209dc:	b510      	push	{r4, lr}
   209de:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   209e2:	f000 0003 	and.w	r0, r0, #3
   209e6:	6823      	ldr	r3, [r4, #0]
   209e8:	00c0      	lsls	r0, r0, #3
   209ea:	22ff      	movs	r2, #255	; 0xff
   209ec:	4082      	lsls	r2, r0
   209ee:	ea23 0302 	bic.w	r3, r3, r2
   209f2:	fa01 f000 	lsl.w	r0, r1, r0
   209f6:	4318      	orrs	r0, r3
   209f8:	6020      	str	r0, [r4, #0]
   209fa:	bd10      	pop	{r4, pc}
   209fc:	0002dbb0 	.word	0x0002dbb0

00020a00 <IntDisable>:
   20a00:	2804      	cmp	r0, #4
   20a02:	d105      	bne.n	20a10 <IntDisable+0x10>
   20a04:	4a13      	ldr	r2, [pc, #76]	; (20a54 <IntDisable+0x54>)
   20a06:	6813      	ldr	r3, [r2, #0]
   20a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   20a0c:	6013      	str	r3, [r2, #0]
   20a0e:	4770      	bx	lr
   20a10:	2805      	cmp	r0, #5
   20a12:	d104      	bne.n	20a1e <IntDisable+0x1e>
   20a14:	4a0f      	ldr	r2, [pc, #60]	; (20a54 <IntDisable+0x54>)
   20a16:	6813      	ldr	r3, [r2, #0]
   20a18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   20a1c:	e7f6      	b.n	20a0c <IntDisable+0xc>
   20a1e:	2806      	cmp	r0, #6
   20a20:	d104      	bne.n	20a2c <IntDisable+0x2c>
   20a22:	4a0c      	ldr	r2, [pc, #48]	; (20a54 <IntDisable+0x54>)
   20a24:	6813      	ldr	r3, [r2, #0]
   20a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   20a2a:	e7ef      	b.n	20a0c <IntDisable+0xc>
   20a2c:	280f      	cmp	r0, #15
   20a2e:	d104      	bne.n	20a3a <IntDisable+0x3a>
   20a30:	4a09      	ldr	r2, [pc, #36]	; (20a58 <IntDisable+0x58>)
   20a32:	6813      	ldr	r3, [r2, #0]
   20a34:	f023 0302 	bic.w	r3, r3, #2
   20a38:	e7e8      	b.n	20a0c <IntDisable+0xc>
   20a3a:	d90a      	bls.n	20a52 <IntDisable+0x52>
   20a3c:	3810      	subs	r0, #16
   20a3e:	0942      	lsrs	r2, r0, #5
   20a40:	4b06      	ldr	r3, [pc, #24]	; (20a5c <IntDisable+0x5c>)
   20a42:	f000 001f 	and.w	r0, r0, #31
   20a46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   20a4a:	2301      	movs	r3, #1
   20a4c:	fa03 f000 	lsl.w	r0, r3, r0
   20a50:	6010      	str	r0, [r2, #0]
   20a52:	4770      	bx	lr
   20a54:	e000ed24 	.word	0xe000ed24
   20a58:	e000e010 	.word	0xe000e010
   20a5c:	0002db9c 	.word	0x0002db9c

00020a60 <SSIConfigSetExpClk>:
   20a60:	b530      	push	{r4, r5, lr}
   20a62:	2b00      	cmp	r3, #0
   20a64:	bf14      	ite	ne
   20a66:	2304      	movne	r3, #4
   20a68:	2300      	moveq	r3, #0
   20a6a:	2500      	movs	r5, #0
   20a6c:	6043      	str	r3, [r0, #4]
   20a6e:	9b03      	ldr	r3, [sp, #12]
   20a70:	fbb1 f1f3 	udiv	r1, r1, r3
   20a74:	3502      	adds	r5, #2
   20a76:	fbb1 f3f5 	udiv	r3, r1, r5
   20a7a:	1e5c      	subs	r4, r3, #1
   20a7c:	2cff      	cmp	r4, #255	; 0xff
   20a7e:	d8f9      	bhi.n	20a74 <SSIConfigSetExpClk+0x14>
   20a80:	9b04      	ldr	r3, [sp, #16]
   20a82:	6105      	str	r5, [r0, #16]
   20a84:	f002 0130 	and.w	r1, r2, #48	; 0x30
   20a88:	3b01      	subs	r3, #1
   20a8a:	0192      	lsls	r2, r2, #6
   20a8c:	430b      	orrs	r3, r1
   20a8e:	b2d2      	uxtb	r2, r2
   20a90:	4313      	orrs	r3, r2
   20a92:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   20a96:	6003      	str	r3, [r0, #0]
   20a98:	bd30      	pop	{r4, r5, pc}

00020a9a <SSIEnable>:
   20a9a:	6843      	ldr	r3, [r0, #4]
   20a9c:	f043 0302 	orr.w	r3, r3, #2
   20aa0:	6043      	str	r3, [r0, #4]
   20aa2:	4770      	bx	lr

00020aa4 <SSIDisable>:
   20aa4:	6843      	ldr	r3, [r0, #4]
   20aa6:	f023 0302 	bic.w	r3, r3, #2
   20aaa:	6043      	str	r3, [r0, #4]
   20aac:	4770      	bx	lr

00020aae <SSIDataPutNonBlocking>:
   20aae:	68c3      	ldr	r3, [r0, #12]
   20ab0:	f013 0302 	ands.w	r3, r3, #2
   20ab4:	bf1a      	itte	ne
   20ab6:	6081      	strne	r1, [r0, #8]
   20ab8:	2001      	movne	r0, #1
   20aba:	4618      	moveq	r0, r3
   20abc:	4770      	bx	lr

00020abe <SSIDataGetNonBlocking>:
   20abe:	68c3      	ldr	r3, [r0, #12]
   20ac0:	f013 0304 	ands.w	r3, r3, #4
   20ac4:	bf1d      	ittte	ne
   20ac6:	6883      	ldrne	r3, [r0, #8]
   20ac8:	600b      	strne	r3, [r1, #0]
   20aca:	2001      	movne	r0, #1
   20acc:	4618      	moveq	r0, r3
   20ace:	4770      	bx	lr

00020ad0 <SSIDMAEnable>:
   20ad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20ad2:	4319      	orrs	r1, r3
   20ad4:	6241      	str	r1, [r0, #36]	; 0x24
   20ad6:	4770      	bx	lr

00020ad8 <SSIDMADisable>:
   20ad8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20ada:	ea23 0101 	bic.w	r1, r3, r1
   20ade:	6241      	str	r1, [r0, #36]	; 0x24
   20ae0:	4770      	bx	lr

00020ae2 <SSIBusy>:
   20ae2:	68c0      	ldr	r0, [r0, #12]
   20ae4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   20ae8:	4770      	bx	lr

00020aea <SSIClockSourceSet>:
   20aea:	f8c0 1fc8 	str.w	r1, [r0, #4040]	; 0xfc8
   20aee:	4770      	bx	lr

00020af0 <SysCtlPeripheralReady>:
   20af0:	f3c0 2207 	ubfx	r2, r0, #8, #8
   20af4:	4b06      	ldr	r3, [pc, #24]	; (20b10 <SysCtlPeripheralReady+0x20>)
   20af6:	0080      	lsls	r0, r0, #2
   20af8:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   20afc:	4413      	add	r3, r2
   20afe:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   20b02:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   20b06:	6800      	ldr	r0, [r0, #0]
   20b08:	3000      	adds	r0, #0
   20b0a:	bf18      	it	ne
   20b0c:	2001      	movne	r0, #1
   20b0e:	4770      	bx	lr
   20b10:	400fea00 	.word	0x400fea00

00020b14 <SysCtlPeripheralEnable>:
   20b14:	f3c0 2207 	ubfx	r2, r0, #8, #8
   20b18:	4b05      	ldr	r3, [pc, #20]	; (20b30 <SysCtlPeripheralEnable+0x1c>)
   20b1a:	0080      	lsls	r0, r0, #2
   20b1c:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   20b20:	4413      	add	r3, r2
   20b22:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   20b26:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   20b2a:	2301      	movs	r3, #1
   20b2c:	6003      	str	r3, [r0, #0]
   20b2e:	4770      	bx	lr
   20b30:	400fe600 	.word	0x400fe600

00020b34 <SysCtlPeripheralDisable>:
   20b34:	f3c0 2207 	ubfx	r2, r0, #8, #8
   20b38:	4b05      	ldr	r3, [pc, #20]	; (20b50 <SysCtlPeripheralDisable+0x1c>)
   20b3a:	0080      	lsls	r0, r0, #2
   20b3c:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   20b40:	4413      	add	r3, r2
   20b42:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   20b46:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   20b4a:	2300      	movs	r3, #0
   20b4c:	6003      	str	r3, [r0, #0]
   20b4e:	4770      	bx	lr
   20b50:	400fe600 	.word	0x400fe600

00020b54 <SysCtlIntEnable>:
   20b54:	4a02      	ldr	r2, [pc, #8]	; (20b60 <SysCtlIntEnable+0xc>)
   20b56:	6813      	ldr	r3, [r2, #0]
   20b58:	4318      	orrs	r0, r3
   20b5a:	6010      	str	r0, [r2, #0]
   20b5c:	4770      	bx	lr
   20b5e:	bf00      	nop
   20b60:	400fe054 	.word	0x400fe054

00020b64 <SysCtlIntDisable>:
   20b64:	4a02      	ldr	r2, [pc, #8]	; (20b70 <SysCtlIntDisable+0xc>)
   20b66:	6813      	ldr	r3, [r2, #0]
   20b68:	ea23 0000 	bic.w	r0, r3, r0
   20b6c:	6010      	str	r0, [r2, #0]
   20b6e:	4770      	bx	lr
   20b70:	400fe054 	.word	0x400fe054

00020b74 <SysCtlReset>:
   20b74:	4b01      	ldr	r3, [pc, #4]	; (20b7c <SysCtlReset+0x8>)
   20b76:	4a02      	ldr	r2, [pc, #8]	; (20b80 <SysCtlReset+0xc>)
   20b78:	601a      	str	r2, [r3, #0]
   20b7a:	e7fe      	b.n	20b7a <SysCtlReset+0x6>
   20b7c:	e000ed0c 	.word	0xe000ed0c
   20b80:	05fa0004 	.word	0x05fa0004

00020b84 <SysCtlSleep>:
   20b84:	f000 b97f 	b.w	20e86 <CPUwfi>

00020b88 <SysCtlDeepSleep>:
   20b88:	b510      	push	{r4, lr}
   20b8a:	4c06      	ldr	r4, [pc, #24]	; (20ba4 <SysCtlDeepSleep+0x1c>)
   20b8c:	6823      	ldr	r3, [r4, #0]
   20b8e:	f043 0304 	orr.w	r3, r3, #4
   20b92:	6023      	str	r3, [r4, #0]
   20b94:	f000 f977 	bl	20e86 <CPUwfi>
   20b98:	6823      	ldr	r3, [r4, #0]
   20b9a:	f023 0304 	bic.w	r3, r3, #4
   20b9e:	6023      	str	r3, [r4, #0]
   20ba0:	bd10      	pop	{r4, pc}
   20ba2:	bf00      	nop
   20ba4:	e000ed10 	.word	0xe000ed10

00020ba8 <SysCtlResetCauseGet>:
   20ba8:	4b01      	ldr	r3, [pc, #4]	; (20bb0 <SysCtlResetCauseGet+0x8>)
   20baa:	6818      	ldr	r0, [r3, #0]
   20bac:	4770      	bx	lr
   20bae:	bf00      	nop
   20bb0:	400fe05c 	.word	0x400fe05c

00020bb4 <SysCtlResetCauseClear>:
   20bb4:	4a02      	ldr	r2, [pc, #8]	; (20bc0 <SysCtlResetCauseClear+0xc>)
   20bb6:	6813      	ldr	r3, [r2, #0]
   20bb8:	ea23 0000 	bic.w	r0, r3, r0
   20bbc:	6010      	str	r0, [r2, #0]
   20bbe:	4770      	bx	lr
   20bc0:	400fe05c 	.word	0x400fe05c

00020bc4 <SysCtlDelay>:
   20bc4:	3801      	subs	r0, #1
   20bc6:	f47f affd 	bne.w	20bc4 <SysCtlDelay>
   20bca:	4770      	bx	lr

00020bcc <SysCtlClockGet>:
   20bcc:	4b48      	ldr	r3, [pc, #288]	; (20cf0 <SysCtlClockGet+0x124>)
   20bce:	b570      	push	{r4, r5, r6, lr}
   20bd0:	3310      	adds	r3, #16
   20bd2:	f853 4c10 	ldr.w	r4, [r3, #-16]
   20bd6:	681b      	ldr	r3, [r3, #0]
   20bd8:	2b00      	cmp	r3, #0
   20bda:	da3e      	bge.n	20c5a <SysCtlClockGet+0x8e>
   20bdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
   20be0:	2a20      	cmp	r2, #32
   20be2:	d052      	beq.n	20c8a <SysCtlClockGet+0xbe>
   20be4:	d805      	bhi.n	20bf2 <SysCtlClockGet+0x26>
   20be6:	2a00      	cmp	r2, #0
   20be8:	d03e      	beq.n	20c68 <SysCtlClockGet+0x9c>
   20bea:	2a10      	cmp	r2, #16
   20bec:	d033      	beq.n	20c56 <SysCtlClockGet+0x8a>
   20bee:	2000      	movs	r0, #0
   20bf0:	e069      	b.n	20cc6 <SysCtlClockGet+0xfa>
   20bf2:	2a30      	cmp	r2, #48	; 0x30
   20bf4:	d077      	beq.n	20ce6 <SysCtlClockGet+0x11a>
   20bf6:	2a70      	cmp	r2, #112	; 0x70
   20bf8:	d1f9      	bne.n	20bee <SysCtlClockGet+0x22>
   20bfa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20bfe:	f413 6f00 	tst.w	r3, #2048	; 0x800
   20c02:	d125      	bne.n	20c50 <SysCtlClockGet+0x84>
   20c04:	4a3b      	ldr	r2, [pc, #236]	; (20cf4 <SysCtlClockGet+0x128>)
   20c06:	6815      	ldr	r5, [r2, #0]
   20c08:	3204      	adds	r2, #4
   20c0a:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
   20c0e:	6812      	ldr	r2, [r2, #0]
   20c10:	f3c2 2604 	ubfx	r6, r2, #8, #5
   20c14:	f002 021f 	and.w	r2, r2, #31
   20c18:	3201      	adds	r2, #1
   20c1a:	0052      	lsls	r2, r2, #1
   20c1c:	fb06 2202 	mla	r2, r6, r2, r2
   20c20:	fbb0 f0f2 	udiv	r0, r0, r2
   20c24:	f3c5 0209 	ubfx	r2, r5, #0, #10
   20c28:	f3c5 2589 	ubfx	r5, r5, #10, #10
   20c2c:	4345      	muls	r5, r0
   20c2e:	0aad      	lsrs	r5, r5, #10
   20c30:	fb00 5002 	mla	r0, r0, r2, r5
   20c34:	4a30      	ldr	r2, [pc, #192]	; (20cf8 <SysCtlClockGet+0x12c>)
   20c36:	6812      	ldr	r2, [r2, #0]
   20c38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   20c3c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   20c40:	d044      	beq.n	20ccc <SysCtlClockGet+0x100>
   20c42:	d826      	bhi.n	20c92 <SysCtlClockGet+0xc6>
   20c44:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   20c48:	d02b      	beq.n	20ca2 <SysCtlClockGet+0xd6>
   20c4a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
   20c4e:	d03b      	beq.n	20cc8 <SysCtlClockGet+0xfc>
   20c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20c54:	e026      	b.n	20ca4 <SysCtlClockGet+0xd8>
   20c56:	4829      	ldr	r0, [pc, #164]	; (20cfc <SysCtlClockGet+0x130>)
   20c58:	e7d1      	b.n	20bfe <SysCtlClockGet+0x32>
   20c5a:	f004 0230 	and.w	r2, r4, #48	; 0x30
   20c5e:	2a10      	cmp	r2, #16
   20c60:	d015      	beq.n	20c8e <SysCtlClockGet+0xc2>
   20c62:	d80b      	bhi.n	20c7c <SysCtlClockGet+0xb0>
   20c64:	2a00      	cmp	r2, #0
   20c66:	d1c2      	bne.n	20bee <SysCtlClockGet+0x22>
   20c68:	f3c4 1184 	ubfx	r1, r4, #6, #5
   20c6c:	4a24      	ldr	r2, [pc, #144]	; (20d00 <SysCtlClockGet+0x134>)
   20c6e:	2b00      	cmp	r3, #0
   20c70:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   20c74:	dbc3      	blt.n	20bfe <SysCtlClockGet+0x32>
   20c76:	f414 6f00 	tst.w	r4, #2048	; 0x800
   20c7a:	e7c2      	b.n	20c02 <SysCtlClockGet+0x36>
   20c7c:	2a20      	cmp	r2, #32
   20c7e:	d035      	beq.n	20cec <SysCtlClockGet+0x120>
   20c80:	2a30      	cmp	r2, #48	; 0x30
   20c82:	d1b4      	bne.n	20bee <SysCtlClockGet+0x22>
   20c84:	f247 5030 	movw	r0, #30000	; 0x7530
   20c88:	e7f5      	b.n	20c76 <SysCtlClockGet+0xaa>
   20c8a:	481e      	ldr	r0, [pc, #120]	; (20d04 <SysCtlClockGet+0x138>)
   20c8c:	e7b7      	b.n	20bfe <SysCtlClockGet+0x32>
   20c8e:	481b      	ldr	r0, [pc, #108]	; (20cfc <SysCtlClockGet+0x130>)
   20c90:	e7f1      	b.n	20c76 <SysCtlClockGet+0xaa>
   20c92:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
   20c96:	d01b      	beq.n	20cd0 <SysCtlClockGet+0x104>
   20c98:	f5b2 4f10 	cmp.w	r2, #36864	; 0x9000
   20c9c:	d1d8      	bne.n	20c50 <SysCtlClockGet+0x84>
   20c9e:	4a1a      	ldr	r2, [pc, #104]	; (20d08 <SysCtlClockGet+0x13c>)
   20ca0:	e000      	b.n	20ca4 <SysCtlClockGet+0xd8>
   20ca2:	4a1a      	ldr	r2, [pc, #104]	; (20d0c <SysCtlClockGet+0x140>)
   20ca4:	0265      	lsls	r5, r4, #9
   20ca6:	d50b      	bpl.n	20cc0 <SysCtlClockGet+0xf4>
   20ca8:	2b00      	cmp	r3, #0
   20caa:	da16      	bge.n	20cda <SysCtlClockGet+0x10e>
   20cac:	005c      	lsls	r4, r3, #1
   20cae:	d511      	bpl.n	20cd4 <SysCtlClockGet+0x108>
   20cb0:	0519      	lsls	r1, r3, #20
   20cb2:	d40f      	bmi.n	20cd4 <SysCtlClockGet+0x108>
   20cb4:	0040      	lsls	r0, r0, #1
   20cb6:	f3c3 5386 	ubfx	r3, r3, #22, #7
   20cba:	3301      	adds	r3, #1
   20cbc:	fbb0 f0f3 	udiv	r0, r0, r3
   20cc0:	4290      	cmp	r0, r2
   20cc2:	bf28      	it	cs
   20cc4:	4610      	movcs	r0, r2
   20cc6:	bd70      	pop	{r4, r5, r6, pc}
   20cc8:	4a11      	ldr	r2, [pc, #68]	; (20d10 <SysCtlClockGet+0x144>)
   20cca:	e7eb      	b.n	20ca4 <SysCtlClockGet+0xd8>
   20ccc:	4a11      	ldr	r2, [pc, #68]	; (20d14 <SysCtlClockGet+0x148>)
   20cce:	e7e9      	b.n	20ca4 <SysCtlClockGet+0xd8>
   20cd0:	4a11      	ldr	r2, [pc, #68]	; (20d18 <SysCtlClockGet+0x14c>)
   20cd2:	e7e7      	b.n	20ca4 <SysCtlClockGet+0xd8>
   20cd4:	f3c3 53c5 	ubfx	r3, r3, #23, #6
   20cd8:	e7ef      	b.n	20cba <SysCtlClockGet+0xee>
   20cda:	f3c4 54c3 	ubfx	r4, r4, #23, #4
   20cde:	3401      	adds	r4, #1
   20ce0:	fbb0 f0f4 	udiv	r0, r0, r4
   20ce4:	e7ec      	b.n	20cc0 <SysCtlClockGet+0xf4>
   20ce6:	f247 5030 	movw	r0, #30000	; 0x7530
   20cea:	e788      	b.n	20bfe <SysCtlClockGet+0x32>
   20cec:	4805      	ldr	r0, [pc, #20]	; (20d04 <SysCtlClockGet+0x138>)
   20cee:	e7c2      	b.n	20c76 <SysCtlClockGet+0xaa>
   20cf0:	400fe060 	.word	0x400fe060
   20cf4:	400fe160 	.word	0x400fe160
   20cf8:	400fe010 	.word	0x400fe010
   20cfc:	00f42400 	.word	0x00f42400
   20d00:	0002dc4c 	.word	0x0002dc4c
   20d04:	003d0900 	.word	0x003d0900
   20d08:	01312d00 	.word	0x01312d00
   20d0c:	04c4b400 	.word	0x04c4b400
   20d10:	02faf080 	.word	0x02faf080
   20d14:	02625a00 	.word	0x02625a00
   20d18:	017d7840 	.word	0x017d7840

00020d1c <SysTickEnable>:
   20d1c:	4a02      	ldr	r2, [pc, #8]	; (20d28 <SysTickEnable+0xc>)
   20d1e:	6813      	ldr	r3, [r2, #0]
   20d20:	f043 0305 	orr.w	r3, r3, #5
   20d24:	6013      	str	r3, [r2, #0]
   20d26:	4770      	bx	lr
   20d28:	e000e010 	.word	0xe000e010

00020d2c <SysTickIntEnable>:
   20d2c:	4a02      	ldr	r2, [pc, #8]	; (20d38 <SysTickIntEnable+0xc>)
   20d2e:	6813      	ldr	r3, [r2, #0]
   20d30:	f043 0302 	orr.w	r3, r3, #2
   20d34:	6013      	str	r3, [r2, #0]
   20d36:	4770      	bx	lr
   20d38:	e000e010 	.word	0xe000e010

00020d3c <SysTickPeriodSet>:
   20d3c:	4b01      	ldr	r3, [pc, #4]	; (20d44 <SysTickPeriodSet+0x8>)
   20d3e:	3801      	subs	r0, #1
   20d40:	6018      	str	r0, [r3, #0]
   20d42:	4770      	bx	lr
   20d44:	e000e014 	.word	0xe000e014

00020d48 <_UARTIntNumberGet>:
   20d48:	4b0b      	ldr	r3, [pc, #44]	; (20d78 <_UARTIntNumberGet+0x30>)
   20d4a:	490c      	ldr	r1, [pc, #48]	; (20d7c <_UARTIntNumberGet+0x34>)
   20d4c:	681a      	ldr	r2, [r3, #0]
   20d4e:	4b0c      	ldr	r3, [pc, #48]	; (20d80 <_UARTIntNumberGet+0x38>)
   20d50:	b510      	push	{r4, lr}
   20d52:	4013      	ands	r3, r2
   20d54:	4c0b      	ldr	r4, [pc, #44]	; (20d84 <_UARTIntNumberGet+0x3c>)
   20d56:	4a0c      	ldr	r2, [pc, #48]	; (20d88 <_UARTIntNumberGet+0x40>)
   20d58:	42a3      	cmp	r3, r4
   20d5a:	bf08      	it	eq
   20d5c:	460a      	moveq	r2, r1
   20d5e:	2300      	movs	r3, #0
   20d60:	58d4      	ldr	r4, [r2, r3]
   20d62:	4284      	cmp	r4, r0
   20d64:	eb02 0103 	add.w	r1, r2, r3
   20d68:	d101      	bne.n	20d6e <_UARTIntNumberGet+0x26>
   20d6a:	6848      	ldr	r0, [r1, #4]
   20d6c:	bd10      	pop	{r4, pc}
   20d6e:	3308      	adds	r3, #8
   20d70:	2b40      	cmp	r3, #64	; 0x40
   20d72:	d1f5      	bne.n	20d60 <_UARTIntNumberGet+0x18>
   20d74:	2000      	movs	r0, #0
   20d76:	e7f9      	b.n	20d6c <_UARTIntNumberGet+0x24>
   20d78:	400fe000 	.word	0x400fe000
   20d7c:	0002dcf8 	.word	0x0002dcf8
   20d80:	70ff0000 	.word	0x70ff0000
   20d84:	100a0000 	.word	0x100a0000
   20d88:	0002dcb8 	.word	0x0002dcb8

00020d8c <UARTConfigGetExpClk>:
   20d8c:	b530      	push	{r4, r5, lr}
   20d8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   20d90:	6a84      	ldr	r4, [r0, #40]	; 0x28
   20d92:	0089      	lsls	r1, r1, #2
   20d94:	eb04 1485 	add.w	r4, r4, r5, lsl #6
   20d98:	fbb1 f1f4 	udiv	r1, r1, r4
   20d9c:	6011      	str	r1, [r2, #0]
   20d9e:	6b04      	ldr	r4, [r0, #48]	; 0x30
   20da0:	06a4      	lsls	r4, r4, #26
   20da2:	bf44      	itt	mi
   20da4:	0049      	lslmi	r1, r1, #1
   20da6:	6011      	strmi	r1, [r2, #0]
   20da8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   20daa:	f002 02ee 	and.w	r2, r2, #238	; 0xee
   20dae:	601a      	str	r2, [r3, #0]
   20db0:	bd30      	pop	{r4, r5, pc}

00020db2 <UARTEnable>:
   20db2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20db4:	f043 0310 	orr.w	r3, r3, #16
   20db8:	62c3      	str	r3, [r0, #44]	; 0x2c
   20dba:	6b03      	ldr	r3, [r0, #48]	; 0x30
   20dbc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   20dc0:	f043 0301 	orr.w	r3, r3, #1
   20dc4:	6303      	str	r3, [r0, #48]	; 0x30
   20dc6:	4770      	bx	lr

00020dc8 <UARTDisable>:
   20dc8:	6983      	ldr	r3, [r0, #24]
   20dca:	071b      	lsls	r3, r3, #28
   20dcc:	d4fc      	bmi.n	20dc8 <UARTDisable>
   20dce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20dd0:	f023 0310 	bic.w	r3, r3, #16
   20dd4:	62c3      	str	r3, [r0, #44]	; 0x2c
   20dd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   20dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   20ddc:	f023 0301 	bic.w	r3, r3, #1
   20de0:	6303      	str	r3, [r0, #48]	; 0x30
   20de2:	4770      	bx	lr

00020de4 <UARTConfigSetExpClk>:
   20de4:	b538      	push	{r3, r4, r5, lr}
   20de6:	4604      	mov	r4, r0
   20de8:	461d      	mov	r5, r3
   20dea:	f7ff ffed 	bl	20dc8 <UARTDisable>
   20dee:	6b00      	ldr	r0, [r0, #48]	; 0x30
   20df0:	ebb1 1f02 	cmp.w	r1, r2, lsl #4
   20df4:	bf38      	it	cc
   20df6:	0852      	lsrcc	r2, r2, #1
   20df8:	ea4f 01c1 	mov.w	r1, r1, lsl #3
   20dfc:	fbb1 f2f2 	udiv	r2, r1, r2
   20e00:	f102 0201 	add.w	r2, r2, #1
   20e04:	ea4f 13d2 	mov.w	r3, r2, lsr #7
   20e08:	bf35      	itete	cc
   20e0a:	f040 0020 	orrcc.w	r0, r0, #32
   20e0e:	f020 0020 	biccs.w	r0, r0, #32
   20e12:	6320      	strcc	r0, [r4, #48]	; 0x30
   20e14:	6320      	strcs	r0, [r4, #48]	; 0x30
   20e16:	f3c2 0245 	ubfx	r2, r2, #1, #6
   20e1a:	6263      	str	r3, [r4, #36]	; 0x24
   20e1c:	2300      	movs	r3, #0
   20e1e:	62a2      	str	r2, [r4, #40]	; 0x28
   20e20:	4620      	mov	r0, r4
   20e22:	62e5      	str	r5, [r4, #44]	; 0x2c
   20e24:	61a3      	str	r3, [r4, #24]
   20e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20e2a:	f7ff bfc2 	b.w	20db2 <UARTEnable>

00020e2e <UARTFIFOEnable>:
   20e2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20e30:	f043 0310 	orr.w	r3, r3, #16
   20e34:	62c3      	str	r3, [r0, #44]	; 0x2c
   20e36:	4770      	bx	lr

00020e38 <UARTFlowControlSet>:
   20e38:	6b03      	ldr	r3, [r0, #48]	; 0x30
   20e3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
   20e3e:	4319      	orrs	r1, r3
   20e40:	6301      	str	r1, [r0, #48]	; 0x30
   20e42:	4770      	bx	lr

00020e44 <UARTIntUnregister>:
   20e44:	b510      	push	{r4, lr}
   20e46:	f7ff ff7f 	bl	20d48 <_UARTIntNumberGet>
   20e4a:	4604      	mov	r4, r0
   20e4c:	f7ff fdd8 	bl	20a00 <IntDisable>
   20e50:	4620      	mov	r0, r4
   20e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20e56:	f7ff bdb5 	b.w	209c4 <IntUnregister>

00020e5a <UARTIntEnable>:
   20e5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   20e5c:	4319      	orrs	r1, r3
   20e5e:	6381      	str	r1, [r0, #56]	; 0x38
   20e60:	4770      	bx	lr

00020e62 <UARTIntDisable>:
   20e62:	6b83      	ldr	r3, [r0, #56]	; 0x38
   20e64:	ea23 0101 	bic.w	r1, r3, r1
   20e68:	6381      	str	r1, [r0, #56]	; 0x38
   20e6a:	4770      	bx	lr

00020e6c <UARTClockSourceSet>:
   20e6c:	f8c0 1fc8 	str.w	r1, [r0, #4040]	; 0xfc8
   20e70:	4770      	bx	lr

00020e72 <UARTClockSourceGet>:
   20e72:	f8d0 0fc8 	ldr.w	r0, [r0, #4040]	; 0xfc8
   20e76:	4770      	bx	lr

00020e78 <UART9BitDisable>:
   20e78:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   20e7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   20e80:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
   20e84:	4770      	bx	lr

00020e86 <CPUwfi>:
   20e86:	bf30      	wfi
   20e88:	4770      	bx	lr
	...
